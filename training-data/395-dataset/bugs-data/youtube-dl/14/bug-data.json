{
    "youtube-dl:14": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_14/youtube_dl/extractor/youtube.py": {
            "buggy_functions": [
                {
                    "function_name": "_extract_chapters",
                    "function_code": "@staticmethod\ndef _extract_chapters(description, duration):\n    if not description:\n        return None\n    chapter_lines = re.findall(\n        r'(?:^|<br\\s*/>)([^<]*<a[^>]+onclick=[\"\\']yt\\.www\\.watch\\.player\\.seekTo[^>]+>(\\d{1,2}:\\d{1,2}(?::\\d{1,2})?)</a>[^>]*)(?=$|<br\\s*/>)',\n        description)\n    if not chapter_lines:\n        return None\n    chapters = []\n    for next_num, (chapter_line, time_point) in enumerate(\n            chapter_lines, start=1):\n        start_time = parse_duration(time_point)\n        if start_time is None:\n            continue\n        if start_time > duration:\n            break\n        end_time = (duration if next_num == len(chapter_lines)\n                    else parse_duration(chapter_lines[next_num][1]))\n        if end_time is None:\n            continue\n        if end_time > duration:\n            end_time = duration\n        if start_time > end_time:\n            break\n        chapter_title = re.sub(\n            r'<a[^>]+>[^<]+</a>', '', chapter_line).strip(' \\t-')\n        chapter_title = re.sub(r'\\s+', ' ', chapter_title)\n        chapters.append({\n            'start_time': start_time,\n            'end_time': end_time,\n            'title': chapter_title,\n        })\n    return chapters\n",
                    "decorators": [
                        "staticmethod"
                    ],
                    "docstring": null,
                    "start_line": 1655,
                    "end_line": 1688,
                    "variables": {
                        "description": [
                            1657,
                            1661
                        ],
                        "chapter_lines": [
                            1666,
                            1672,
                            1673,
                            1659,
                            1662
                        ],
                        "re.findall": [
                            1659
                        ],
                        "re": [
                            1680,
                            1682,
                            1659
                        ],
                        "chapters": [
                            1664,
                            1683,
                            1688
                        ],
                        "next_num": [
                            1672,
                            1665,
                            1673
                        ],
                        "chapter_line": [
                            1665,
                            1681
                        ],
                        "time_point": [
                            1665,
                            1667
                        ],
                        "enumerate": [
                            1665
                        ],
                        "start_time": [
                            1667,
                            1668,
                            1670,
                            1678,
                            1684
                        ],
                        "parse_duration": [
                            1673,
                            1667
                        ],
                        "duration": [
                            1672,
                            1676,
                            1677,
                            1670
                        ],
                        "end_time": [
                            1672,
                            1674,
                            1676,
                            1677,
                            1678,
                            1685
                        ],
                        "len": [
                            1672
                        ],
                        "chapter_title": [
                            1680,
                            1682,
                            1686
                        ],
                        "strip": [
                            1680
                        ],
                        "re.sub": [
                            1680,
                            1682
                        ],
                        "chapters.append": [
                            1683
                        ],
                        "staticmethod": [
                            1655
                        ]
                    },
                    "filtered_variables": {
                        "description": [
                            1657,
                            1661
                        ],
                        "chapter_lines": [
                            1666,
                            1672,
                            1673,
                            1659,
                            1662
                        ],
                        "re.findall": [
                            1659
                        ],
                        "re": [
                            1680,
                            1682,
                            1659
                        ],
                        "chapters": [
                            1664,
                            1683,
                            1688
                        ],
                        "next_num": [
                            1672,
                            1665,
                            1673
                        ],
                        "chapter_line": [
                            1665,
                            1681
                        ],
                        "time_point": [
                            1665,
                            1667
                        ],
                        "start_time": [
                            1667,
                            1668,
                            1670,
                            1678,
                            1684
                        ],
                        "parse_duration": [
                            1673,
                            1667
                        ],
                        "duration": [
                            1672,
                            1676,
                            1677,
                            1670
                        ],
                        "end_time": [
                            1672,
                            1674,
                            1676,
                            1677,
                            1678,
                            1685
                        ],
                        "chapter_title": [
                            1680,
                            1682,
                            1686
                        ],
                        "strip": [
                            1680
                        ],
                        "re.sub": [
                            1680,
                            1682
                        ],
                        "chapters.append": [
                            1683
                        ]
                    },
                    "diff_line_number": 1656,
                    "class_data": {
                        "signature": "class YoutubeIE(YoutubeBaseInfoExtractor)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *args, **kwargs):\n    super(YoutubeIE, self).__init__(*args, **kwargs)\n    self._player_cache = {}",
                            "def report_video_info_webpage_download(self, video_id):\n    \"\"\"Report attempt to download video info webpage.\"\"\"\n    self.to_screen('%s: Downloading video info webpage' % video_id)",
                            "def report_information_extraction(self, video_id):\n    \"\"\"Report attempt to extract video information.\"\"\"\n    self.to_screen('%s: Extracting video information' % video_id)",
                            "def report_unavailable_format(self, video_id, format):\n    \"\"\"Report extracted video URL.\"\"\"\n    self.to_screen('%s: Format %s not available' % (video_id, format))",
                            "def report_rtmp_download(self):\n    \"\"\"Indicate the download will use the RTMP protocol.\"\"\"\n    self.to_screen('RTMP download detected')",
                            "def _signature_cache_id(self, example_sig):\n    \"\"\" Return a string representation of a signature \"\"\"\n    return '.'.join((compat_str(len(part)) for part in example_sig.split('.')))",
                            "@classmethod\ndef _extract_player_info(cls, player_url):\n    for player_re in cls._PLAYER_INFO_RE:\n        id_m = re.search(player_re, player_url)\n        if id_m:\n            break\n    else:\n        raise ExtractorError('Cannot identify player %r' % player_url)\n    return (id_m.group('ext'), id_m.group('id'))",
                            "def _extract_signature_function(self, video_id, player_url, example_sig):\n    player_type, player_id = self._extract_player_info(player_url)\n    func_id = '%s_%s_%s' % (player_type, player_id, self._signature_cache_id(example_sig))\n    assert os.path.basename(func_id) == func_id\n    cache_spec = self._downloader.cache.load('youtube-sigfuncs', func_id)\n    if cache_spec is not None:\n        return lambda s: ''.join((s[i] for i in cache_spec))\n    download_note = 'Downloading player %s' % player_url if self._downloader.params.get('verbose') else 'Downloading %s player %s' % (player_type, player_id)\n    if player_type == 'js':\n        code = self._download_webpage(player_url, video_id, note=download_note, errnote='Download of %s failed' % player_url)\n        res = self._parse_sig_js(code)\n    elif player_type == 'swf':\n        urlh = self._request_webpage(player_url, video_id, note=download_note, errnote='Download of %s failed' % player_url)\n        code = urlh.read()\n        res = self._parse_sig_swf(code)\n    else:\n        assert False, 'Invalid player type %r' % player_type\n    test_string = ''.join(map(compat_chr, range(len(example_sig))))\n    cache_res = res(test_string)\n    cache_spec = [ord(c) for c in cache_res]\n    self._downloader.cache.store('youtube-sigfuncs', func_id, cache_spec)\n    return res",
                            "def _print_sig_code(self, func, example_sig):\n\n    def gen_sig_code(idxs):\n\n        def _genslice(start, end, step):\n            starts = '' if start == 0 else str(start)\n            ends = ':%d' % (end + step) if end + step >= 0 else ':'\n            steps = '' if step == 1 else ':%d' % step\n            return 's[%s%s%s]' % (starts, ends, steps)\n        step = None\n        start = '(Never used)'\n        for i, prev in zip(idxs[1:], idxs[:-1]):\n            if step is not None:\n                if i - prev == step:\n                    continue\n                yield _genslice(start, prev, step)\n                step = None\n                continue\n            if i - prev in [-1, 1]:\n                step = i - prev\n                start = prev\n                continue\n            else:\n                yield ('s[%d]' % prev)\n        if step is None:\n            yield ('s[%d]' % i)\n        else:\n            yield _genslice(start, i, step)\n    test_string = ''.join(map(compat_chr, range(len(example_sig))))\n    cache_res = func(test_string)\n    cache_spec = [ord(c) for c in cache_res]\n    expr_code = ' + '.join(gen_sig_code(cache_spec))\n    signature_id_tuple = '(%s)' % ', '.join((compat_str(len(p)) for p in example_sig.split('.')))\n    code = \"if tuple(len(p) for p in s.split('.')) == %s:\\n    return %s\\n\" % (signature_id_tuple, expr_code)\n    self.to_screen('Extracted signature function:\\n' + code)",
                            "def _parse_sig_js(self, jscode):\n    funcname = self._search_regex(('\\\\b[cs]\\\\s*&&\\\\s*[adf]\\\\.set\\\\([^,]+\\\\s*,\\\\s*encodeURIComponent\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b[a-zA-Z0-9]+\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*encodeURIComponent\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b(?P<sig>[a-zA-Z0-9$]{2})\\\\s*=\\\\s*function\\\\(\\\\s*a\\\\s*\\\\)\\\\s*{\\\\s*a\\\\s*=\\\\s*a\\\\.split\\\\(\\\\s*\"\"\\\\s*\\\\)', '(?P<sig>[a-zA-Z0-9$]+)\\\\s*=\\\\s*function\\\\(\\\\s*a\\\\s*\\\\)\\\\s*{\\\\s*a\\\\s*=\\\\s*a\\\\.split\\\\(\\\\s*\"\"\\\\s*\\\\)', '([\"\\\\\\'])signature\\\\1\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\.sig\\\\|\\\\|(?P<sig>[a-zA-Z0-9$]+)\\\\(', 'yt\\\\.akamaized\\\\.net/\\\\)\\\\s*\\\\|\\\\|\\\\s*.*?\\\\s*[cs]\\\\s*&&\\\\s*[adf]\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?:encodeURIComponent\\\\s*\\\\()?\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b[cs]\\\\s*&&\\\\s*[adf]\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b[a-zA-Z0-9]+\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*a\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\('), jscode, 'Initial JS player signature function name', group='sig')\n    jsi = JSInterpreter(jscode)\n    initial_function = jsi.extract_function(funcname)\n    return lambda s: initial_function([s])",
                            "def _parse_sig_swf(self, file_contents):\n    swfi = SWFInterpreter(file_contents)\n    TARGET_CLASSNAME = 'SignatureDecipher'\n    searched_class = swfi.extract_class(TARGET_CLASSNAME)\n    initial_function = swfi.extract_function(searched_class, 'decipher')\n    return lambda s: initial_function([s])",
                            "def _decrypt_signature(self, s, video_id, player_url, age_gate=False):\n    \"\"\"Turn the encrypted s field into a working signature\"\"\"\n    if player_url is None:\n        raise ExtractorError('Cannot decrypt signature without player_url')\n    if player_url.startswith('//'):\n        player_url = 'https:' + player_url\n    elif not re.match('https?://', player_url):\n        player_url = compat_urlparse.urljoin('https://www.youtube.com', player_url)\n    try:\n        player_id = (player_url, self._signature_cache_id(s))\n        if player_id not in self._player_cache:\n            func = self._extract_signature_function(video_id, player_url, s)\n            self._player_cache[player_id] = func\n        func = self._player_cache[player_id]\n        if self._downloader.params.get('youtube_print_sig_code'):\n            self._print_sig_code(func, s)\n        return func(s)\n    except Exception as e:\n        tb = traceback.format_exc()\n        raise ExtractorError('Signature extraction failed: ' + tb, cause=e)",
                            "def _get_subtitles(self, video_id, webpage):\n    try:\n        subs_doc = self._download_xml('https://video.google.com/timedtext?hl=en&type=list&v=%s' % video_id, video_id, note=False)\n    except ExtractorError as err:\n        self._downloader.report_warning('unable to download video subtitles: %s' % error_to_compat_str(err))\n        return {}\n    sub_lang_list = {}\n    for track in subs_doc.findall('track'):\n        lang = track.attrib['lang_code']\n        if lang in sub_lang_list:\n            continue\n        sub_formats = []\n        for ext in self._SUBTITLE_FORMATS:\n            params = compat_urllib_parse_urlencode({'lang': lang, 'v': video_id, 'fmt': ext, 'name': track.attrib['name'].encode('utf-8')})\n            sub_formats.append({'url': 'https://www.youtube.com/api/timedtext?' + params, 'ext': ext})\n        sub_lang_list[lang] = sub_formats\n    if not sub_lang_list:\n        self._downloader.report_warning(\"video doesn't have subtitles\")\n        return {}\n    return sub_lang_list",
                            "def _get_ytplayer_config(self, video_id, webpage):\n    patterns = (';ytplayer\\\\.config\\\\s*=\\\\s*({.+?});ytplayer', ';ytplayer\\\\.config\\\\s*=\\\\s*({.+?});')\n    config = self._search_regex(patterns, webpage, 'ytplayer.config', default=None)\n    if config:\n        return self._parse_json(uppercase_escape(config), video_id, fatal=False)",
                            "def _get_automatic_captions(self, video_id, webpage):\n    \"\"\"We need the webpage for getting the captions url, pass it as an\n       argument to speed up the process.\"\"\"\n    self.to_screen('%s: Looking for automatic captions' % video_id)\n    player_config = self._get_ytplayer_config(video_id, webpage)\n    err_msg = \"Couldn't find automatic captions for %s\" % video_id\n    if not player_config:\n        self._downloader.report_warning(err_msg)\n        return {}\n    try:\n        args = player_config['args']\n        caption_url = args.get('ttsurl')\n        if caption_url:\n            timestamp = args['timestamp']\n            list_params = compat_urllib_parse_urlencode({'type': 'list', 'tlangs': 1, 'asrs': 1})\n            list_url = caption_url + '&' + list_params\n            caption_list = self._download_xml(list_url, video_id)\n            original_lang_node = caption_list.find('track')\n            if original_lang_node is None:\n                self._downloader.report_warning(\"Video doesn't have automatic captions\")\n                return {}\n            original_lang = original_lang_node.attrib['lang_code']\n            caption_kind = original_lang_node.attrib.get('kind', '')\n            sub_lang_list = {}\n            for lang_node in caption_list.findall('target'):\n                sub_lang = lang_node.attrib['lang_code']\n                sub_formats = []\n                for ext in self._SUBTITLE_FORMATS:\n                    params = compat_urllib_parse_urlencode({'lang': original_lang, 'tlang': sub_lang, 'fmt': ext, 'ts': timestamp, 'kind': caption_kind})\n                    sub_formats.append({'url': caption_url + '&' + params, 'ext': ext})\n                sub_lang_list[sub_lang] = sub_formats\n            return sub_lang_list\n\n        def make_captions(sub_url, sub_langs):\n            parsed_sub_url = compat_urllib_parse_urlparse(sub_url)\n            caption_qs = compat_parse_qs(parsed_sub_url.query)\n            captions = {}\n            for sub_lang in sub_langs:\n                sub_formats = []\n                for ext in self._SUBTITLE_FORMATS:\n                    caption_qs.update({'tlang': [sub_lang], 'fmt': [ext]})\n                    sub_url = compat_urlparse.urlunparse(parsed_sub_url._replace(query=compat_urllib_parse_urlencode(caption_qs, True)))\n                    sub_formats.append({'url': sub_url, 'ext': ext})\n                captions[sub_lang] = sub_formats\n            return captions\n        player_response = args.get('player_response')\n        if player_response and isinstance(player_response, compat_str):\n            player_response = self._parse_json(player_response, video_id, fatal=False)\n            if player_response:\n                renderer = player_response['captions']['playerCaptionsTracklistRenderer']\n                base_url = renderer['captionTracks'][0]['baseUrl']\n                sub_lang_list = []\n                for lang in renderer['translationLanguages']:\n                    lang_code = lang.get('languageCode')\n                    if lang_code:\n                        sub_lang_list.append(lang_code)\n                return make_captions(base_url, sub_lang_list)\n        caption_tracks = args['caption_tracks']\n        caption_translation_languages = args['caption_translation_languages']\n        caption_url = compat_parse_qs(caption_tracks.split(',')[0])['u'][0]\n        sub_lang_list = []\n        for lang in caption_translation_languages.split(','):\n            lang_qs = compat_parse_qs(compat_urllib_parse_unquote_plus(lang))\n            sub_lang = lang_qs.get('lc', [None])[0]\n            if sub_lang:\n                sub_lang_list.append(sub_lang)\n        return make_captions(caption_url, sub_lang_list)\n    except (KeyError, IndexError, ExtractorError):\n        self._downloader.report_warning(err_msg)\n        return {}",
                            "def _mark_watched(self, video_id, video_info, player_response):\n    playback_url = url_or_none(try_get(player_response, lambda x: x['playbackTracking']['videostatsPlaybackUrl']['baseUrl']) or try_get(video_info, lambda x: x['videostats_playback_base_url'][0]))\n    if not playback_url:\n        return\n    parsed_playback_url = compat_urlparse.urlparse(playback_url)\n    qs = compat_urlparse.parse_qs(parsed_playback_url.query)\n    CPN_ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'\n    cpn = ''.join((CPN_ALPHABET[random.randint(0, 256) & 63] for _ in range(0, 16)))\n    qs.update({'ver': ['2'], 'cpn': [cpn]})\n    playback_url = compat_urlparse.urlunparse(parsed_playback_url._replace(query=compat_urllib_parse_urlencode(qs, True)))\n    self._download_webpage(playback_url, video_id, 'Marking watched', 'Unable to mark watched', fatal=False)",
                            "@staticmethod\ndef _extract_urls(webpage):\n    entries = [unescapeHTML(mobj.group('url')) for mobj in re.finditer('(?x)\\n            (?:\\n                <iframe[^>]+?src=|\\n                data-video-url=|\\n                <embed[^>]+?src=|\\n                embedSWF\\\\(?:\\\\s*|\\n                <object[^>]+data=|\\n                new\\\\s+SWFObject\\\\(\\n            )\\n            ([\"\\\\\\'])\\n                (?P<url>(?:https?:)?//(?:www\\\\.)?youtube(?:-nocookie)?\\\\.com/\\n                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\\n            \\\\1', webpage)]\n    entries.extend(list(map(unescapeHTML, re.findall('class=\"lazyYT\" data-youtube-id=\"([^\"]+)\"', webpage))))\n    matches = re.findall('(?x)<div[^>]+\\n            class=(?P<q1>[\\\\\\'\"])[^\\\\\\'\"]*\\\\byvii_single_video_player\\\\b[^\\\\\\'\"]*(?P=q1)[^>]+\\n            data-video_id=(?P<q2>[\\\\\\'\"])([^\\\\\\'\"]+)(?P=q2)', webpage)\n    entries.extend((m[-1] for m in matches))\n    return entries",
                            "@staticmethod\ndef _extract_url(webpage):\n    urls = YoutubeIE._extract_urls(webpage)\n    return urls[0] if urls else None",
                            "@classmethod\ndef extract_id(cls, url):\n    mobj = re.match(cls._VALID_URL, url, re.VERBOSE)\n    if mobj is None:\n        raise ExtractorError('Invalid URL: %s' % url)\n    video_id = mobj.group(2)\n    return video_id",
                            "@staticmethod\ndef _extract_chapters(description, duration):\n    if not description:\n        return None\n    chapter_lines = re.findall('(?:^|<br\\\\s*/>)([^<]*<a[^>]+onclick=[\"\\\\\\']yt\\\\.www\\\\.watch\\\\.player\\\\.seekTo[^>]+>(\\\\d{1,2}:\\\\d{1,2}(?::\\\\d{1,2})?)</a>[^>]*)(?=$|<br\\\\s*/>)', description)\n    if not chapter_lines:\n        return None\n    chapters = []\n    for next_num, (chapter_line, time_point) in enumerate(chapter_lines, start=1):\n        start_time = parse_duration(time_point)\n        if start_time is None:\n            continue\n        if start_time > duration:\n            break\n        end_time = duration if next_num == len(chapter_lines) else parse_duration(chapter_lines[next_num][1])\n        if end_time is None:\n            continue\n        if end_time > duration:\n            end_time = duration\n        if start_time > end_time:\n            break\n        chapter_title = re.sub('<a[^>]+>[^<]+</a>', '', chapter_line).strip(' \\t-')\n        chapter_title = re.sub('\\\\s+', ' ', chapter_title)\n        chapters.append({'start_time': start_time, 'end_time': end_time, 'title': chapter_title})\n    return chapters",
                            "def _real_extract(self, url):\n    url, smuggled_data = unsmuggle_url(url, {})\n    proto = 'http' if self._downloader.params.get('prefer_insecure', False) else 'https'\n    start_time = None\n    end_time = None\n    parsed_url = compat_urllib_parse_urlparse(url)\n    for component in [parsed_url.fragment, parsed_url.query]:\n        query = compat_parse_qs(component)\n        if start_time is None and 't' in query:\n            start_time = parse_duration(query['t'][0])\n        if start_time is None and 'start' in query:\n            start_time = parse_duration(query['start'][0])\n        if end_time is None and 'end' in query:\n            end_time = parse_duration(query['end'][0])\n    mobj = re.search(self._NEXT_URL_RE, url)\n    if mobj:\n        url = proto + '://www.youtube.com/' + compat_urllib_parse_unquote(mobj.group(1)).lstrip('/')\n    video_id = self.extract_id(url)\n    url = proto + '://www.youtube.com/watch?v=%s&gl=US&hl=en&has_verified=1&bpctr=9999999999' % video_id\n    video_webpage, urlh = self._download_webpage_handle(url, video_id)\n    qs = compat_parse_qs(compat_urllib_parse_urlparse(urlh.geturl()).query)\n    video_id = qs.get('v', [None])[0] or video_id\n    mobj = re.search('swfConfig.*?\"(https?:\\\\\\\\/\\\\\\\\/.*?watch.*?-.*?\\\\.swf)\"', video_webpage)\n    if mobj is not None:\n        player_url = re.sub('\\\\\\\\(.)', '\\\\1', mobj.group(1))\n    else:\n        player_url = None\n    dash_mpds = []\n\n    def add_dash_mpd(video_info):\n        dash_mpd = video_info.get('dashmpd')\n        if dash_mpd and dash_mpd[0] not in dash_mpds:\n            dash_mpds.append(dash_mpd[0])\n\n    def add_dash_mpd_pr(pl_response):\n        dash_mpd = url_or_none(try_get(pl_response, lambda x: x['streamingData']['dashManifestUrl'], compat_str))\n        if dash_mpd and dash_mpd not in dash_mpds:\n            dash_mpds.append(dash_mpd)\n    is_live = None\n    view_count = None\n\n    def extract_view_count(v_info):\n        return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))\n\n    def extract_player_response(player_response, video_id):\n        pl_response = str_or_none(player_response)\n        if not pl_response:\n            return\n        pl_response = self._parse_json(pl_response, video_id, fatal=False)\n        if isinstance(pl_response, dict):\n            add_dash_mpd_pr(pl_response)\n            return pl_response\n    player_response = {}\n    video_info = {}\n    embed_webpage = None\n    if re.search('player-age-gate-content\">', video_webpage) is not None:\n        age_gate = True\n        url = proto + '://www.youtube.com/embed/%s' % video_id\n        embed_webpage = self._download_webpage(url, video_id, 'Downloading embed webpage')\n        data = compat_urllib_parse_urlencode({'video_id': video_id, 'eurl': 'https://youtube.googleapis.com/v/' + video_id, 'sts': self._search_regex('\"sts\"\\\\s*:\\\\s*(\\\\d+)', embed_webpage, 'sts', default='')})\n        video_info_url = proto + '://www.youtube.com/get_video_info?' + data\n        try:\n            video_info_webpage = self._download_webpage(video_info_url, video_id, note='Refetching age-gated info webpage', errnote='unable to download video info webpage')\n        except ExtractorError:\n            video_info_webpage = None\n        if video_info_webpage:\n            video_info = compat_parse_qs(video_info_webpage)\n            pl_response = video_info.get('player_response', [None])[0]\n            player_response = extract_player_response(pl_response, video_id)\n            add_dash_mpd(video_info)\n            view_count = extract_view_count(video_info)\n    else:\n        age_gate = False\n        ytplayer_config = self._get_ytplayer_config(video_id, video_webpage)\n        if ytplayer_config:\n            args = ytplayer_config['args']\n            if args.get('url_encoded_fmt_stream_map') or args.get('hlsvp'):\n                video_info = dict(((k, [v]) for k, v in args.items()))\n                add_dash_mpd(video_info)\n            if not video_info and args.get('ypc_vid'):\n                return self.url_result(args['ypc_vid'], YoutubeIE.ie_key(), video_id=args['ypc_vid'])\n            if args.get('livestream') == '1' or args.get('live_playback') == 1:\n                is_live = True\n            if not player_response:\n                player_response = extract_player_response(args.get('player_response'), video_id)\n        if not video_info or self._downloader.params.get('youtube_include_dash_manifest', True):\n            add_dash_mpd_pr(player_response)\n\n    def extract_unavailable_message():\n        messages = []\n        for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n            msg = self._html_search_regex('(?s)<{tag}[^>]+id=[\"\\\\\\']unavailable-{kind}[\"\\\\\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind), video_webpage, 'unavailable %s' % kind, default=None)\n            if msg:\n                messages.append(msg)\n        if messages:\n            return '\\n'.join(messages)\n    if not video_info and (not player_response):\n        unavailable_message = extract_unavailable_message()\n        if not unavailable_message:\n            unavailable_message = 'Unable to extract video data'\n        raise ExtractorError('YouTube said: %s' % unavailable_message, expected=True, video_id=video_id)\n    if not isinstance(video_info, dict):\n        video_info = {}\n    video_details = try_get(player_response, lambda x: x['videoDetails'], dict) or {}\n    video_title = video_info.get('title', [None])[0] or video_details.get('title')\n    if not video_title:\n        self._downloader.report_warning('Unable to extract video title')\n        video_title = '_'\n    description_original = video_description = get_element_by_id('eow-description', video_webpage)\n    if video_description:\n\n        def replace_url(m):\n            redir_url = compat_urlparse.urljoin(url, m.group(1))\n            parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n            if re.search('^(?:www\\\\.)?(?:youtube(?:-nocookie)?\\\\.com|youtu\\\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n                qs = compat_parse_qs(parsed_redir_url.query)\n                q = qs.get('q')\n                if q and q[0]:\n                    return q[0]\n            return redir_url\n        description_original = video_description = re.sub('(?x)\\n                <a\\\\s+\\n                    (?:[a-zA-Z-]+=\"[^\"]*\"\\\\s+)*?\\n                    (?:title|href)=\"([^\"]+)\"\\\\s+\\n                    (?:[a-zA-Z-]+=\"[^\"]*\"\\\\s+)*?\\n                    class=\"[^\"]*\"[^>]*>\\n                [^<]+\\\\.{3}\\\\s*\\n                </a>\\n            ', replace_url, video_description)\n        video_description = clean_html(video_description)\n    else:\n        video_description = self._html_search_meta('description', video_webpage) or video_details.get('shortDescription')\n    if not smuggled_data.get('force_singlefeed', False):\n        if not self._downloader.params.get('noplaylist'):\n            multifeed_metadata_list = try_get(player_response, lambda x: x['multicamera']['playerLegacyMulticameraRenderer']['metadataList'], compat_str) or try_get(video_info, lambda x: x['multifeed_metadata_list'][0], compat_str)\n            if multifeed_metadata_list:\n                entries = []\n                feed_ids = []\n                for feed in multifeed_metadata_list.split(','):\n                    feed_data = compat_parse_qs(compat_urllib_parse_unquote_plus(feed))\n\n                    def feed_entry(name):\n                        return try_get(feed_data, lambda x: x[name][0], compat_str)\n                    feed_id = feed_entry('id')\n                    if not feed_id:\n                        continue\n                    feed_title = feed_entry('title')\n                    title = video_title\n                    if feed_title:\n                        title += ' (%s)' % feed_title\n                    entries.append({'_type': 'url_transparent', 'ie_key': 'Youtube', 'url': smuggle_url('%s://www.youtube.com/watch?v=%s' % (proto, feed_data['id'][0]), {'force_singlefeed': True}), 'title': title})\n                    feed_ids.append(feed_id)\n                self.to_screen('Downloading multifeed video (%s) - add --no-playlist to just download video %s' % (', '.join(feed_ids), video_id))\n                return self.playlist_result(entries, video_id, video_title, video_description)\n        else:\n            self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n    if view_count is None:\n        view_count = extract_view_count(video_info)\n    if view_count is None and video_details:\n        view_count = int_or_none(video_details.get('viewCount'))\n    if is_live is None:\n        is_live = bool_or_none(video_details.get('isLive'))\n    if 'ypc_video_rental_bar_text' in video_info and 'author' not in video_info:\n        raise ExtractorError('\"rental\" videos not supported. See https://github.com/ytdl-org/youtube-dl/issues/359 for more information.', expected=True)\n\n    def _extract_filesize(media_url):\n        return int_or_none(self._search_regex('\\\\bclen[=/](\\\\d+)', media_url, 'filesize', default=None))\n    streaming_formats = try_get(player_response, lambda x: x['streamingData']['formats'], list) or []\n    streaming_formats.extend(try_get(player_response, lambda x: x['streamingData']['adaptiveFormats'], list) or [])\n    if 'conn' in video_info and video_info['conn'][0].startswith('rtmp'):\n        self.report_rtmp_download()\n        formats = [{'format_id': '_rtmp', 'protocol': 'rtmp', 'url': video_info['conn'][0], 'player_url': player_url}]\n    elif not is_live and (streaming_formats or len(video_info.get('url_encoded_fmt_stream_map', [''])[0]) >= 1 or len(video_info.get('adaptive_fmts', [''])[0]) >= 1):\n        encoded_url_map = video_info.get('url_encoded_fmt_stream_map', [''])[0] + ',' + video_info.get('adaptive_fmts', [''])[0]\n        if 'rtmpe%3Dyes' in encoded_url_map:\n            raise ExtractorError('rtmpe downloads are not supported, see https://github.com/ytdl-org/youtube-dl/issues/343 for more information.', expected=True)\n        formats = []\n        formats_spec = {}\n        fmt_list = video_info.get('fmt_list', [''])[0]\n        if fmt_list:\n            for fmt in fmt_list.split(','):\n                spec = fmt.split('/')\n                if len(spec) > 1:\n                    width_height = spec[1].split('x')\n                    if len(width_height) == 2:\n                        formats_spec[spec[0]] = {'resolution': spec[1], 'width': int_or_none(width_height[0]), 'height': int_or_none(width_height[1])}\n        for fmt in streaming_formats:\n            itag = str_or_none(fmt.get('itag'))\n            if not itag:\n                continue\n            quality = fmt.get('quality')\n            quality_label = fmt.get('qualityLabel') or quality\n            formats_spec[itag] = {'asr': int_or_none(fmt.get('audioSampleRate')), 'filesize': int_or_none(fmt.get('contentLength')), 'format_note': quality_label, 'fps': int_or_none(fmt.get('fps')), 'height': int_or_none(fmt.get('height')), 'tbr': float_or_none(fmt.get('averageBitrate') or fmt.get('bitrate'), 1000) if itag != '43' else None, 'width': int_or_none(fmt.get('width'))}\n        for fmt in streaming_formats:\n            if fmt.get('drmFamilies') or fmt.get('drm_families'):\n                continue\n            url = url_or_none(fmt.get('url'))\n            if not url:\n                cipher = fmt.get('cipher') or fmt.get('signatureCipher')\n                if not cipher:\n                    continue\n                url_data = compat_parse_qs(cipher)\n                url = url_or_none(try_get(url_data, lambda x: x['url'][0], compat_str))\n                if not url:\n                    continue\n            else:\n                cipher = None\n                url_data = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n            stream_type = int_or_none(try_get(url_data, lambda x: x['stream_type'][0]))\n            if stream_type == 3:\n                continue\n            format_id = fmt.get('itag') or url_data['itag'][0]\n            if not format_id:\n                continue\n            format_id = compat_str(format_id)\n            if cipher:\n                if 's' in url_data or self._downloader.params.get('youtube_include_dash_manifest', True):\n                    ASSETS_RE = '\"assets\":.+?\"js\":\\\\s*(\"[^\"]+\")'\n                    jsplayer_url_json = self._search_regex(ASSETS_RE, embed_webpage if age_gate else video_webpage, 'JS player URL (1)', default=None)\n                    if not jsplayer_url_json and (not age_gate):\n                        if embed_webpage is None:\n                            embed_url = proto + '://www.youtube.com/embed/%s' % video_id\n                            embed_webpage = self._download_webpage(embed_url, video_id, 'Downloading embed webpage')\n                        jsplayer_url_json = self._search_regex(ASSETS_RE, embed_webpage, 'JS player URL')\n                    player_url = json.loads(jsplayer_url_json)\n                    if player_url is None:\n                        player_url_json = self._search_regex('ytplayer\\\\.config.*?\"url\"\\\\s*:\\\\s*(\"[^\"]+\")', video_webpage, 'age gate player URL')\n                        player_url = json.loads(player_url_json)\n                if 'sig' in url_data:\n                    url += '&signature=' + url_data['sig'][0]\n                elif 's' in url_data:\n                    encrypted_sig = url_data['s'][0]\n                    if self._downloader.params.get('verbose'):\n                        if player_url is None:\n                            player_desc = 'unknown'\n                        else:\n                            player_type, player_version = self._extract_player_info(player_url)\n                            player_desc = '%s player %s' % ('flash' if player_type == 'swf' else 'html5', player_version)\n                        parts_sizes = self._signature_cache_id(encrypted_sig)\n                        self.to_screen('{%s} signature length %s, %s' % (format_id, parts_sizes, player_desc))\n                    signature = self._decrypt_signature(encrypted_sig, video_id, player_url, age_gate)\n                    sp = try_get(url_data, lambda x: x['sp'][0], compat_str) or 'signature'\n                    url += '&%s=%s' % (sp, signature)\n            if 'ratebypass' not in url:\n                url += '&ratebypass=yes'\n            dct = {'format_id': format_id, 'url': url, 'player_url': player_url}\n            if format_id in self._formats:\n                dct.update(self._formats[format_id])\n            if format_id in formats_spec:\n                dct.update(formats_spec[format_id])\n            mobj = re.search('^(?P<width>\\\\d+)[xX](?P<height>\\\\d+)$', url_data.get('size', [''])[0])\n            width, height = (int(mobj.group('width')), int(mobj.group('height'))) if mobj else (None, None)\n            if width is None:\n                width = int_or_none(fmt.get('width'))\n            if height is None:\n                height = int_or_none(fmt.get('height'))\n            filesize = int_or_none(url_data.get('clen', [None])[0]) or _extract_filesize(url)\n            quality = url_data.get('quality', [None])[0] or fmt.get('quality')\n            quality_label = url_data.get('quality_label', [None])[0] or fmt.get('qualityLabel')\n            tbr = float_or_none(url_data.get('bitrate', [None])[0], 1000) or float_or_none(fmt.get('bitrate'), 1000) if format_id != '43' else None\n            fps = int_or_none(url_data.get('fps', [None])[0]) or int_or_none(fmt.get('fps'))\n            more_fields = {'filesize': filesize, 'tbr': tbr, 'width': width, 'height': height, 'fps': fps, 'format_note': quality_label or quality}\n            for key, value in more_fields.items():\n                if value:\n                    dct[key] = value\n            type_ = url_data.get('type', [None])[0] or fmt.get('mimeType')\n            if type_:\n                type_split = type_.split(';')\n                kind_ext = type_split[0].split('/')\n                if len(kind_ext) == 2:\n                    kind, _ = kind_ext\n                    dct['ext'] = mimetype2ext(type_split[0])\n                    if kind in ('audio', 'video'):\n                        codecs = None\n                        for mobj in re.finditer('(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\\\\\']?)(?P<val>.+?)(?P=quote)(?:;|$)', type_):\n                            if mobj.group('key') == 'codecs':\n                                codecs = mobj.group('val')\n                                break\n                        if codecs:\n                            dct.update(parse_codecs(codecs))\n            if dct.get('acodec') == 'none' or dct.get('vcodec') == 'none':\n                dct['downloader_options'] = {'http_chunk_size': 10485760}\n            formats.append(dct)\n    else:\n        manifest_url = url_or_none(try_get(player_response, lambda x: x['streamingData']['hlsManifestUrl'], compat_str)) or url_or_none(try_get(video_info, lambda x: x['hlsvp'][0], compat_str))\n        if manifest_url:\n            formats = []\n            m3u8_formats = self._extract_m3u8_formats(manifest_url, video_id, 'mp4', fatal=False)\n            for a_format in m3u8_formats:\n                itag = self._search_regex('/itag/(\\\\d+)/', a_format['url'], 'itag', default=None)\n                if itag:\n                    a_format['format_id'] = itag\n                    if itag in self._formats:\n                        dct = self._formats[itag].copy()\n                        dct.update(a_format)\n                        a_format = dct\n                a_format['player_url'] = player_url\n                a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = 'True'\n                formats.append(a_format)\n        else:\n            error_message = extract_unavailable_message()\n            if not error_message:\n                error_message = clean_html(try_get(player_response, lambda x: x['playabilityStatus']['reason'], compat_str))\n            if not error_message:\n                error_message = clean_html(try_get(video_info, lambda x: x['reason'][0], compat_str))\n            if error_message:\n                raise ExtractorError(error_message, expected=True)\n            raise ExtractorError('no conn, hlsvp, hlsManifestUrl or url_encoded_fmt_stream_map information found in video info')\n    video_uploader = try_get(video_info, lambda x: x['author'][0], compat_str) or str_or_none(video_details.get('author'))\n    if video_uploader:\n        video_uploader = compat_urllib_parse_unquote_plus(video_uploader)\n    else:\n        self._downloader.report_warning('unable to extract uploader name')\n    video_uploader_id = None\n    video_uploader_url = None\n    mobj = re.search('<link itemprop=\"url\" href=\"(?P<uploader_url>https?://www\\\\.youtube\\\\.com/(?:user|channel)/(?P<uploader_id>[^\"]+))\">', video_webpage)\n    if mobj is not None:\n        video_uploader_id = mobj.group('uploader_id')\n        video_uploader_url = mobj.group('uploader_url')\n    else:\n        self._downloader.report_warning('unable to extract uploader nickname')\n    channel_id = str_or_none(video_details.get('channelId')) or self._html_search_meta('channelId', video_webpage, 'channel id', default=None) or self._search_regex('data-channel-external-id=([\"\\\\\\'])(?P<id>(?:(?!\\\\1).)+)\\\\1', video_webpage, 'channel id', default=None, group='id')\n    channel_url = 'http://www.youtube.com/channel/%s' % channel_id if channel_id else None\n    m_thumb = re.search('<span itemprop=\"thumbnail\".*?href=\"(.*?)\">', video_webpage, re.DOTALL)\n    if m_thumb is not None:\n        video_thumbnail = m_thumb.group(1)\n    elif 'thumbnail_url' not in video_info:\n        self._downloader.report_warning('unable to extract video thumbnail')\n        video_thumbnail = None\n    else:\n        video_thumbnail = compat_urllib_parse_unquote_plus(video_info['thumbnail_url'][0])\n    upload_date = self._html_search_meta('datePublished', video_webpage, 'upload date', default=None)\n    if not upload_date:\n        upload_date = self._search_regex(['(?s)id=\"eow-date.*?>(.*?)</span>', '(?:id=\"watch-uploader-info\".*?>.*?|[\"\\\\\\']simpleText[\"\\\\\\']\\\\s*:\\\\s*[\"\\\\\\'])(?:Published|Uploaded|Streamed live|Started) on (.+?)[<\"\\\\\\']'], video_webpage, 'upload date', default=None)\n    upload_date = unified_strdate(upload_date)\n    video_license = self._html_search_regex('<h4[^>]+class=\"title\"[^>]*>\\\\s*License\\\\s*</h4>\\\\s*<ul[^>]*>\\\\s*<li>(.+?)</li', video_webpage, 'license', default=None)\n    m_music = re.search('(?x)\\n                <h4[^>]+class=\"title\"[^>]*>\\\\s*Music\\\\s*</h4>\\\\s*\\n                <ul[^>]*>\\\\s*\\n                <li>(?P<title>.+?)\\n                by (?P<creator>.+?)\\n                (?:\\n                    \\\\(.+?\\\\)|\\n                    <a[^>]*\\n                        (?:\\n                            \\\\bhref=[\"\\\\\\']/red[^>]*>|             # drop possible\\n                            >\\\\s*Listen ad-free with YouTube Red # YouTube Red ad\\n                        )\\n                    .*?\\n                )?</li\\n            ', video_webpage)\n    if m_music:\n        video_alt_title = remove_quotes(unescapeHTML(m_music.group('title')))\n        video_creator = clean_html(m_music.group('creator'))\n    else:\n        video_alt_title = video_creator = None\n\n    def extract_meta(field):\n        return self._html_search_regex('<h4[^>]+class=\"title\"[^>]*>\\\\s*%s\\\\s*</h4>\\\\s*<ul[^>]*>\\\\s*<li>(.+?)</li>\\\\s*' % field, video_webpage, field, default=None)\n    track = extract_meta('Song')\n    artist = extract_meta('Artist')\n    album = extract_meta('Album')\n    release_date = release_year = None\n    if video_description:\n        mobj = re.search('(?s)Provided to YouTube by [^\\\\n]+\\\\n+(?P<track>[^\u00b7]+)\u00b7(?P<artist>[^\\\\n]+)\\\\n+(?P<album>[^\\\\n]+)(?:.+?\u2117\\\\s*(?P<release_year>\\\\d{4})(?!\\\\d))?(?:.+?Released on\\\\s*:\\\\s*(?P<release_date>\\\\d{4}-\\\\d{2}-\\\\d{2}))?(.+?\\\\nArtist\\\\s*:\\\\s*(?P<clean_artist>[^\\\\n]+))?', video_description)\n        if mobj:\n            if not track:\n                track = mobj.group('track').strip()\n            if not artist:\n                artist = mobj.group('clean_artist') or ', '.join((a.strip() for a in mobj.group('artist').split('\u00b7')))\n            if not album:\n                album = mobj.group('album'.strip())\n            release_year = mobj.group('release_year')\n            release_date = mobj.group('release_date')\n            if release_date:\n                release_date = release_date.replace('-', '')\n                if not release_year:\n                    release_year = int(release_date[:4])\n            if release_year:\n                release_year = int(release_year)\n    m_episode = re.search('<div[^>]+id=\"watch7-headline\"[^>]*>\\\\s*<span[^>]*>.*?>(?P<series>[^<]+)</a></b>\\\\s*S(?P<season>\\\\d+)\\\\s*\u2022\\\\s*E(?P<episode>\\\\d+)</span>', video_webpage)\n    if m_episode:\n        series = unescapeHTML(m_episode.group('series'))\n        season_number = int(m_episode.group('season'))\n        episode_number = int(m_episode.group('episode'))\n    else:\n        series = season_number = episode_number = None\n    m_cat_container = self._search_regex('(?s)<h4[^>]*>\\\\s*Category\\\\s*</h4>\\\\s*<ul[^>]*>(.*?)</ul>', video_webpage, 'categories', default=None)\n    if m_cat_container:\n        category = self._html_search_regex('(?s)<a[^<]+>(.*?)</a>', m_cat_container, 'category', default=None)\n        video_categories = None if category is None else [category]\n    else:\n        video_categories = None\n    video_tags = [unescapeHTML(m.group('content')) for m in re.finditer(self._meta_regex('og:video:tag'), video_webpage)]\n\n    def _extract_count(count_name):\n        return str_to_int(self._search_regex('-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\\\d,]+)</span>' % re.escape(count_name), video_webpage, count_name, default=None))\n    like_count = _extract_count('like')\n    dislike_count = _extract_count('dislike')\n    if view_count is None:\n        view_count = str_to_int(self._search_regex('<[^>]+class=[\"\\\\\\']watch-view-count[^>]+>\\\\s*([\\\\d,\\\\s]+)', video_webpage, 'view count', default=None))\n    average_rating = float_or_none(video_details.get('averageRating')) or try_get(video_info, lambda x: float_or_none(x['avg_rating'][0]))\n    video_subtitles = self.extract_subtitles(video_id, video_webpage)\n    automatic_captions = self.extract_automatic_captions(video_id, video_webpage)\n    video_duration = try_get(video_info, lambda x: int_or_none(x['length_seconds'][0]))\n    if not video_duration:\n        video_duration = int_or_none(video_details.get('lengthSeconds'))\n    if not video_duration:\n        video_duration = parse_duration(self._html_search_meta('duration', video_webpage, 'video duration'))\n    video_annotations = None\n    if self._downloader.params.get('writeannotations', False):\n        xsrf_token = self._search_regex('([\\\\\\'\"])XSRF_TOKEN\\\\1\\\\s*:\\\\s*([\\\\\\'\"])(?P<xsrf_token>[A-Za-z0-9+/=]+)\\\\2', video_webpage, 'xsrf token', group='xsrf_token', fatal=False)\n        invideo_url = try_get(player_response, lambda x: x['annotations'][0]['playerAnnotationsUrlsRenderer']['invideoUrl'], compat_str)\n        if xsrf_token and invideo_url:\n            xsrf_field_name = self._search_regex('([\\\\\\'\"])XSRF_FIELD_NAME\\\\1\\\\s*:\\\\s*([\\\\\\'\"])(?P<xsrf_field_name>\\\\w+)\\\\2', video_webpage, 'xsrf field name', group='xsrf_field_name', default='session_token')\n            video_annotations = self._download_webpage(self._proto_relative_url(invideo_url), video_id, note='Downloading annotations', errnote='Unable to download video annotations', fatal=False, data=urlencode_postdata({xsrf_field_name: xsrf_token}))\n    chapters = self._extract_chapters(description_original, video_duration)\n    if self._downloader.params.get('youtube_include_dash_manifest', True):\n        dash_mpd_fatal = True\n        for mpd_url in dash_mpds:\n            dash_formats = {}\n            try:\n\n                def decrypt_sig(mobj):\n                    s = mobj.group(1)\n                    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n                    return '/signature/%s' % dec_s\n                mpd_url = re.sub('/s/([a-fA-F0-9\\\\.]+)', decrypt_sig, mpd_url)\n                for df in self._extract_mpd_formats(mpd_url, video_id, fatal=dash_mpd_fatal, formats_dict=self._formats):\n                    if not df.get('filesize'):\n                        df['filesize'] = _extract_filesize(df['url'])\n                    if df['format_id'] not in dash_formats:\n                        dash_formats[df['format_id']] = df\n                    dash_mpd_fatal = False\n            except (ExtractorError, KeyError) as e:\n                self.report_warning('Skipping DASH manifest: %r' % e, video_id)\n            if dash_formats:\n                formats = [f for f in formats if f['format_id'] not in dash_formats.keys()]\n                formats.extend(dash_formats.values())\n    stretched_m = re.search('<meta\\\\s+property=\"og:video:tag\".*?content=\"yt:stretch=(?P<w>[0-9]+):(?P<h>[0-9]+)\">', video_webpage)\n    if stretched_m:\n        w = float(stretched_m.group('w'))\n        h = float(stretched_m.group('h'))\n        if w > 0 and h > 0:\n            ratio = w / h\n            for f in formats:\n                if f.get('vcodec') != 'none':\n                    f['stretched_ratio'] = ratio\n    if not formats:\n        if 'reason' in video_info:\n            if 'The uploader has not made this video available in your country.' in video_info['reason']:\n                regions_allowed = self._html_search_meta('regionsAllowed', video_webpage, default=None)\n                countries = regions_allowed.split(',') if regions_allowed else None\n                self.raise_geo_restricted(msg=video_info['reason'][0], countries=countries)\n            reason = video_info['reason'][0]\n            if 'Invalid parameters' in reason:\n                unavailable_message = extract_unavailable_message()\n                if unavailable_message:\n                    reason = unavailable_message\n            raise ExtractorError('YouTube said: %s' % reason, expected=True, video_id=video_id)\n        if video_info.get('license_info') or try_get(player_response, lambda x: x['streamingData']['licenseInfos']):\n            raise ExtractorError('This video is DRM protected.', expected=True)\n    self._sort_formats(formats)\n    self.mark_watched(video_id, video_info, player_response)\n    return {'id': video_id, 'uploader': video_uploader, 'uploader_id': video_uploader_id, 'uploader_url': video_uploader_url, 'channel_id': channel_id, 'channel_url': channel_url, 'upload_date': upload_date, 'license': video_license, 'creator': video_creator or artist, 'title': video_title, 'alt_title': video_alt_title or track, 'thumbnail': video_thumbnail, 'description': video_description, 'categories': video_categories, 'tags': video_tags, 'subtitles': video_subtitles, 'automatic_captions': automatic_captions, 'duration': video_duration, 'age_limit': 18 if age_gate else 0, 'annotations': video_annotations, 'chapters': chapters, 'webpage_url': proto + '://www.youtube.com/watch?v=%s' % video_id, 'view_count': view_count, 'like_count': like_count, 'dislike_count': dislike_count, 'average_rating': average_rating, 'formats': formats, 'is_live': is_live, 'start_time': start_time, 'end_time': end_time, 'series': series, 'season_number': season_number, 'episode_number': episode_number, 'track': track, 'artist': artist, 'album': album, 'release_date': release_date, 'release_year': release_year}",
                            "def gen_sig_code(idxs):\n\n    def _genslice(start, end, step):\n        starts = '' if start == 0 else str(start)\n        ends = ':%d' % (end + step) if end + step >= 0 else ':'\n        steps = '' if step == 1 else ':%d' % step\n        return 's[%s%s%s]' % (starts, ends, steps)\n    step = None\n    start = '(Never used)'\n    for i, prev in zip(idxs[1:], idxs[:-1]):\n        if step is not None:\n            if i - prev == step:\n                continue\n            yield _genslice(start, prev, step)\n            step = None\n            continue\n        if i - prev in [-1, 1]:\n            step = i - prev\n            start = prev\n            continue\n        else:\n            yield ('s[%d]' % prev)\n    if step is None:\n        yield ('s[%d]' % i)\n    else:\n        yield _genslice(start, i, step)",
                            "def add_dash_mpd(video_info):\n    dash_mpd = video_info.get('dashmpd')\n    if dash_mpd and dash_mpd[0] not in dash_mpds:\n        dash_mpds.append(dash_mpd[0])",
                            "def add_dash_mpd_pr(pl_response):\n    dash_mpd = url_or_none(try_get(pl_response, lambda x: x['streamingData']['dashManifestUrl'], compat_str))\n    if dash_mpd and dash_mpd not in dash_mpds:\n        dash_mpds.append(dash_mpd)",
                            "def extract_view_count(v_info):\n    return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))",
                            "def extract_player_response(player_response, video_id):\n    pl_response = str_or_none(player_response)\n    if not pl_response:\n        return\n    pl_response = self._parse_json(pl_response, video_id, fatal=False)\n    if isinstance(pl_response, dict):\n        add_dash_mpd_pr(pl_response)\n        return pl_response",
                            "def extract_unavailable_message():\n    messages = []\n    for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n        msg = self._html_search_regex('(?s)<{tag}[^>]+id=[\"\\\\\\']unavailable-{kind}[\"\\\\\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind), video_webpage, 'unavailable %s' % kind, default=None)\n        if msg:\n            messages.append(msg)\n    if messages:\n        return '\\n'.join(messages)",
                            "def _extract_filesize(media_url):\n    return int_or_none(self._search_regex('\\\\bclen[=/](\\\\d+)', media_url, 'filesize', default=None))",
                            "def extract_meta(field):\n    return self._html_search_regex('<h4[^>]+class=\"title\"[^>]*>\\\\s*%s\\\\s*</h4>\\\\s*<ul[^>]*>\\\\s*<li>(.+?)</li>\\\\s*' % field, video_webpage, field, default=None)",
                            "def _extract_count(count_name):\n    return str_to_int(self._search_regex('-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\\\d,]+)</span>' % re.escape(count_name), video_webpage, count_name, default=None))",
                            "def _genslice(start, end, step):\n    starts = '' if start == 0 else str(start)\n    ends = ':%d' % (end + step) if end + step >= 0 else ':'\n    steps = '' if step == 1 else ':%d' % step\n    return 's[%s%s%s]' % (starts, ends, steps)",
                            "def make_captions(sub_url, sub_langs):\n    parsed_sub_url = compat_urllib_parse_urlparse(sub_url)\n    caption_qs = compat_parse_qs(parsed_sub_url.query)\n    captions = {}\n    for sub_lang in sub_langs:\n        sub_formats = []\n        for ext in self._SUBTITLE_FORMATS:\n            caption_qs.update({'tlang': [sub_lang], 'fmt': [ext]})\n            sub_url = compat_urlparse.urlunparse(parsed_sub_url._replace(query=compat_urllib_parse_urlencode(caption_qs, True)))\n            sub_formats.append({'url': sub_url, 'ext': ext})\n        captions[sub_lang] = sub_formats\n    return captions",
                            "def replace_url(m):\n    redir_url = compat_urlparse.urljoin(url, m.group(1))\n    parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n    if re.search('^(?:www\\\\.)?(?:youtube(?:-nocookie)?\\\\.com|youtu\\\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n        qs = compat_parse_qs(parsed_redir_url.query)\n        q = qs.get('q')\n        if q and q[0]:\n            return q[0]\n    return redir_url",
                            "def decrypt_sig(mobj):\n    s = mobj.group(1)\n    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n    return '/signature/%s' % dec_s",
                            "def feed_entry(name):\n    return try_get(feed_data, lambda x: x[name][0], compat_str)"
                        ],
                        "constructor_variables": [
                            "_player_cache"
                        ],
                        "class_level_variables": [
                            "IE_DESC",
                            "_VALID_URL",
                            "_NEXT_URL_RE",
                            "_PLAYER_INFO_RE",
                            "_formats",
                            "_SUBTITLE_FORMATS",
                            "_GEO_BYPASS",
                            "IE_NAME",
                            "_TESTS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *args, **kwargs)",
                            "report_video_info_webpage_download(self, video_id)",
                            "report_information_extraction(self, video_id)",
                            "report_unavailable_format(self, video_id, format)",
                            "report_rtmp_download(self)",
                            "_signature_cache_id(self, example_sig)",
                            "_extract_player_info(cls, player_url)",
                            "_extract_signature_function(self, video_id, player_url, example_sig)",
                            "_print_sig_code(self, func, example_sig)",
                            "_parse_sig_js(self, jscode)",
                            "_parse_sig_swf(self, file_contents)",
                            "_decrypt_signature(self, s, video_id, player_url, age_gate=False)",
                            "_get_subtitles(self, video_id, webpage)",
                            "_get_ytplayer_config(self, video_id, webpage)",
                            "_get_automatic_captions(self, video_id, webpage)",
                            "_mark_watched(self, video_id, video_info, player_response)",
                            "_extract_urls(webpage)",
                            "_extract_url(webpage)",
                            "extract_id(cls, url)",
                            "_extract_chapters(description, duration)",
                            "_real_extract(self, url)",
                            "gen_sig_code(idxs)",
                            "add_dash_mpd(video_info)",
                            "add_dash_mpd_pr(pl_response)",
                            "extract_view_count(v_info)",
                            "extract_player_response(player_response, video_id)",
                            "extract_unavailable_message()",
                            "_extract_filesize(media_url)",
                            "extract_meta(field)",
                            "_extract_count(count_name)",
                            "_genslice(start, end, step)",
                            "make_captions(sub_url, sub_langs)",
                            "replace_url(m)",
                            "decrypt_sig(mobj)",
                            "feed_entry(name)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_real_extract",
                    "function_code": "def _real_extract(self, url):\n    url, smuggled_data = unsmuggle_url(url, {})\n\n    proto = (\n        'http' if self._downloader.params.get('prefer_insecure', False)\n        else 'https')\n\n    start_time = None\n    end_time = None\n    parsed_url = compat_urllib_parse_urlparse(url)\n    for component in [parsed_url.fragment, parsed_url.query]:\n        query = compat_parse_qs(component)\n        if start_time is None and 't' in query:\n            start_time = parse_duration(query['t'][0])\n        if start_time is None and 'start' in query:\n            start_time = parse_duration(query['start'][0])\n        if end_time is None and 'end' in query:\n            end_time = parse_duration(query['end'][0])\n\n    # Extract original video URL from URL with redirection, like age verification, using next_url parameter\n    mobj = re.search(self._NEXT_URL_RE, url)\n    if mobj:\n        url = proto + '://www.youtube.com/' + compat_urllib_parse_unquote(mobj.group(1)).lstrip('/')\n    video_id = self.extract_id(url)\n\n    # Get video webpage\n    url = proto + '://www.youtube.com/watch?v=%s&gl=US&hl=en&has_verified=1&bpctr=9999999999' % video_id\n    video_webpage, urlh = self._download_webpage_handle(url, video_id)\n\n    qs = compat_parse_qs(compat_urllib_parse_urlparse(urlh.geturl()).query)\n    video_id = qs.get('v', [None])[0] or video_id\n\n    # Attempt to extract SWF player URL\n    mobj = re.search(r'swfConfig.*?\"(https?:\\\\/\\\\/.*?watch.*?-.*?\\.swf)\"', video_webpage)\n    if mobj is not None:\n        player_url = re.sub(r'\\\\(.)', r'\\1', mobj.group(1))\n    else:\n        player_url = None\n\n    dash_mpds = []\n\n    def add_dash_mpd(video_info):\n        dash_mpd = video_info.get('dashmpd')\n        if dash_mpd and dash_mpd[0] not in dash_mpds:\n            dash_mpds.append(dash_mpd[0])\n\n    def add_dash_mpd_pr(pl_response):\n        dash_mpd = url_or_none(try_get(\n            pl_response, lambda x: x['streamingData']['dashManifestUrl'],\n            compat_str))\n        if dash_mpd and dash_mpd not in dash_mpds:\n            dash_mpds.append(dash_mpd)\n\n    is_live = None\n    view_count = None\n\n    def extract_view_count(v_info):\n        return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))\n\n    def extract_player_response(player_response, video_id):\n        pl_response = str_or_none(player_response)\n        if not pl_response:\n            return\n        pl_response = self._parse_json(pl_response, video_id, fatal=False)\n        if isinstance(pl_response, dict):\n            add_dash_mpd_pr(pl_response)\n            return pl_response\n\n    player_response = {}\n\n    # Get video info\n    video_info = {}\n    embed_webpage = None\n    if re.search(r'player-age-gate-content\">', video_webpage) is not None:\n        age_gate = True\n        # We simulate the access to the video from www.youtube.com/v/{video_id}\n        # this can be viewed without login into Youtube\n        url = proto + '://www.youtube.com/embed/%s' % video_id\n        embed_webpage = self._download_webpage(url, video_id, 'Downloading embed webpage')\n        data = compat_urllib_parse_urlencode({\n            'video_id': video_id,\n            'eurl': 'https://youtube.googleapis.com/v/' + video_id,\n            'sts': self._search_regex(\n                r'\"sts\"\\s*:\\s*(\\d+)', embed_webpage, 'sts', default=''),\n        })\n        video_info_url = proto + '://www.youtube.com/get_video_info?' + data\n        try:\n            video_info_webpage = self._download_webpage(\n                video_info_url, video_id,\n                note='Refetching age-gated info webpage',\n                errnote='unable to download video info webpage')\n        except ExtractorError:\n            video_info_webpage = None\n        if video_info_webpage:\n            video_info = compat_parse_qs(video_info_webpage)\n            pl_response = video_info.get('player_response', [None])[0]\n            player_response = extract_player_response(pl_response, video_id)\n            add_dash_mpd(video_info)\n            view_count = extract_view_count(video_info)\n    else:\n        age_gate = False\n        # Try looking directly into the video webpage\n        ytplayer_config = self._get_ytplayer_config(video_id, video_webpage)\n        if ytplayer_config:\n            args = ytplayer_config['args']\n            if args.get('url_encoded_fmt_stream_map') or args.get('hlsvp'):\n                # Convert to the same format returned by compat_parse_qs\n                video_info = dict((k, [v]) for k, v in args.items())\n                add_dash_mpd(video_info)\n            # Rental video is not rented but preview is available (e.g.\n            # https://www.youtube.com/watch?v=yYr8q0y5Jfg,\n            # https://github.com/ytdl-org/youtube-dl/issues/10532)\n            if not video_info and args.get('ypc_vid'):\n                return self.url_result(\n                    args['ypc_vid'], YoutubeIE.ie_key(), video_id=args['ypc_vid'])\n            if args.get('livestream') == '1' or args.get('live_playback') == 1:\n                is_live = True\n            if not player_response:\n                player_response = extract_player_response(args.get('player_response'), video_id)\n        if not video_info or self._downloader.params.get('youtube_include_dash_manifest', True):\n            add_dash_mpd_pr(player_response)\n\n    def extract_unavailable_message():\n        messages = []\n        for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n            msg = self._html_search_regex(\n                r'(?s)<{tag}[^>]+id=[\"\\']unavailable-{kind}[\"\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind),\n                video_webpage, 'unavailable %s' % kind, default=None)\n            if msg:\n                messages.append(msg)\n        if messages:\n            return '\\n'.join(messages)\n\n    if not video_info and not player_response:\n        unavailable_message = extract_unavailable_message()\n        if not unavailable_message:\n            unavailable_message = 'Unable to extract video data'\n        raise ExtractorError(\n            'YouTube said: %s' % unavailable_message, expected=True, video_id=video_id)\n\n    if not isinstance(video_info, dict):\n        video_info = {}\n\n    video_details = try_get(\n        player_response, lambda x: x['videoDetails'], dict) or {}\n\n    video_title = video_info.get('title', [None])[0] or video_details.get('title')\n    if not video_title:\n        self._downloader.report_warning('Unable to extract video title')\n        video_title = '_'\n\n    description_original = video_description = get_element_by_id(\"eow-description\", video_webpage)\n    if video_description:\n\n        def replace_url(m):\n            redir_url = compat_urlparse.urljoin(url, m.group(1))\n            parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n            if re.search(r'^(?:www\\.)?(?:youtube(?:-nocookie)?\\.com|youtu\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n                qs = compat_parse_qs(parsed_redir_url.query)\n                q = qs.get('q')\n                if q and q[0]:\n                    return q[0]\n            return redir_url\n\n        description_original = video_description = re.sub(r'''(?x)\n            <a\\s+\n                (?:[a-zA-Z-]+=\"[^\"]*\"\\s+)*?\n                (?:title|href)=\"([^\"]+)\"\\s+\n                (?:[a-zA-Z-]+=\"[^\"]*\"\\s+)*?\n                class=\"[^\"]*\"[^>]*>\n            [^<]+\\.{3}\\s*\n            </a>\n        ''', replace_url, video_description)\n        video_description = clean_html(video_description)\n    else:\n        video_description = self._html_search_meta('description', video_webpage) or video_details.get('shortDescription')\n\n    if not smuggled_data.get('force_singlefeed', False):\n        if not self._downloader.params.get('noplaylist'):\n            multifeed_metadata_list = try_get(\n                player_response,\n                lambda x: x['multicamera']['playerLegacyMulticameraRenderer']['metadataList'],\n                compat_str) or try_get(\n                video_info, lambda x: x['multifeed_metadata_list'][0], compat_str)\n            if multifeed_metadata_list:\n                entries = []\n                feed_ids = []\n                for feed in multifeed_metadata_list.split(','):\n                    # Unquote should take place before split on comma (,) since textual\n                    # fields may contain comma as well (see\n                    # https://github.com/ytdl-org/youtube-dl/issues/8536)\n                    feed_data = compat_parse_qs(compat_urllib_parse_unquote_plus(feed))\n\n                    def feed_entry(name):\n                        return try_get(feed_data, lambda x: x[name][0], compat_str)\n\n                    feed_id = feed_entry('id')\n                    if not feed_id:\n                        continue\n                    feed_title = feed_entry('title')\n                    title = video_title\n                    if feed_title:\n                        title += ' (%s)' % feed_title\n                    entries.append({\n                        '_type': 'url_transparent',\n                        'ie_key': 'Youtube',\n                        'url': smuggle_url(\n                            '%s://www.youtube.com/watch?v=%s' % (proto, feed_data['id'][0]),\n                            {'force_singlefeed': True}),\n                        'title': title,\n                    })\n                    feed_ids.append(feed_id)\n                self.to_screen(\n                    'Downloading multifeed video (%s) - add --no-playlist to just download video %s'\n                    % (', '.join(feed_ids), video_id))\n                return self.playlist_result(entries, video_id, video_title, video_description)\n        else:\n            self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n\n    if view_count is None:\n        view_count = extract_view_count(video_info)\n    if view_count is None and video_details:\n        view_count = int_or_none(video_details.get('viewCount'))\n\n    if is_live is None:\n        is_live = bool_or_none(video_details.get('isLive'))\n\n    # Check for \"rental\" videos\n    if 'ypc_video_rental_bar_text' in video_info and 'author' not in video_info:\n        raise ExtractorError('\"rental\" videos not supported. See https://github.com/ytdl-org/youtube-dl/issues/359 for more information.', expected=True)\n\n    def _extract_filesize(media_url):\n        return int_or_none(self._search_regex(\n            r'\\bclen[=/](\\d+)', media_url, 'filesize', default=None))\n\n    streaming_formats = try_get(player_response, lambda x: x['streamingData']['formats'], list) or []\n    streaming_formats.extend(try_get(player_response, lambda x: x['streamingData']['adaptiveFormats'], list) or [])\n\n    if 'conn' in video_info and video_info['conn'][0].startswith('rtmp'):\n        self.report_rtmp_download()\n        formats = [{\n            'format_id': '_rtmp',\n            'protocol': 'rtmp',\n            'url': video_info['conn'][0],\n            'player_url': player_url,\n        }]\n    elif not is_live and (streaming_formats or len(video_info.get('url_encoded_fmt_stream_map', [''])[0]) >= 1 or len(video_info.get('adaptive_fmts', [''])[0]) >= 1):\n        encoded_url_map = video_info.get('url_encoded_fmt_stream_map', [''])[0] + ',' + video_info.get('adaptive_fmts', [''])[0]\n        if 'rtmpe%3Dyes' in encoded_url_map:\n            raise ExtractorError('rtmpe downloads are not supported, see https://github.com/ytdl-org/youtube-dl/issues/343 for more information.', expected=True)\n        formats = []\n        formats_spec = {}\n        fmt_list = video_info.get('fmt_list', [''])[0]\n        if fmt_list:\n            for fmt in fmt_list.split(','):\n                spec = fmt.split('/')\n                if len(spec) > 1:\n                    width_height = spec[1].split('x')\n                    if len(width_height) == 2:\n                        formats_spec[spec[0]] = {\n                            'resolution': spec[1],\n                            'width': int_or_none(width_height[0]),\n                            'height': int_or_none(width_height[1]),\n                        }\n        for fmt in streaming_formats:\n            itag = str_or_none(fmt.get('itag'))\n            if not itag:\n                continue\n            quality = fmt.get('quality')\n            quality_label = fmt.get('qualityLabel') or quality\n            formats_spec[itag] = {\n                'asr': int_or_none(fmt.get('audioSampleRate')),\n                'filesize': int_or_none(fmt.get('contentLength')),\n                'format_note': quality_label,\n                'fps': int_or_none(fmt.get('fps')),\n                'height': int_or_none(fmt.get('height')),\n                # bitrate for itag 43 is always 2147483647\n                'tbr': float_or_none(fmt.get('averageBitrate') or fmt.get('bitrate'), 1000) if itag != '43' else None,\n                'width': int_or_none(fmt.get('width')),\n            }\n\n        for fmt in streaming_formats:\n            if fmt.get('drmFamilies') or fmt.get('drm_families'):\n                continue\n            url = url_or_none(fmt.get('url'))\n\n            if not url:\n                cipher = fmt.get('cipher') or fmt.get('signatureCipher')\n                if not cipher:\n                    continue\n                url_data = compat_parse_qs(cipher)\n                url = url_or_none(try_get(url_data, lambda x: x['url'][0], compat_str))\n                if not url:\n                    continue\n            else:\n                cipher = None\n                url_data = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n\n            stream_type = int_or_none(try_get(url_data, lambda x: x['stream_type'][0]))\n            # Unsupported FORMAT_STREAM_TYPE_OTF\n            if stream_type == 3:\n                continue\n\n            format_id = fmt.get('itag') or url_data['itag'][0]\n            if not format_id:\n                continue\n            format_id = compat_str(format_id)\n\n            if cipher:\n                if 's' in url_data or self._downloader.params.get('youtube_include_dash_manifest', True):\n                    ASSETS_RE = r'\"assets\":.+?\"js\":\\s*(\"[^\"]+\")'\n                    jsplayer_url_json = self._search_regex(\n                        ASSETS_RE,\n                        embed_webpage if age_gate else video_webpage,\n                        'JS player URL (1)', default=None)\n                    if not jsplayer_url_json and not age_gate:\n                        # We need the embed website after all\n                        if embed_webpage is None:\n                            embed_url = proto + '://www.youtube.com/embed/%s' % video_id\n                            embed_webpage = self._download_webpage(\n                                embed_url, video_id, 'Downloading embed webpage')\n                        jsplayer_url_json = self._search_regex(\n                            ASSETS_RE, embed_webpage, 'JS player URL')\n\n                    player_url = json.loads(jsplayer_url_json)\n                    if player_url is None:\n                        player_url_json = self._search_regex(\n                            r'ytplayer\\.config.*?\"url\"\\s*:\\s*(\"[^\"]+\")',\n                            video_webpage, 'age gate player URL')\n                        player_url = json.loads(player_url_json)\n\n                if 'sig' in url_data:\n                    url += '&signature=' + url_data['sig'][0]\n                elif 's' in url_data:\n                    encrypted_sig = url_data['s'][0]\n\n                    if self._downloader.params.get('verbose'):\n                        if player_url is None:\n                            player_desc = 'unknown'\n                        else:\n                            player_type, player_version = self._extract_player_info(player_url)\n                            player_desc = '%s player %s' % ('flash' if player_type == 'swf' else 'html5', player_version)\n                        parts_sizes = self._signature_cache_id(encrypted_sig)\n                        self.to_screen('{%s} signature length %s, %s' %\n                                       (format_id, parts_sizes, player_desc))\n\n                    signature = self._decrypt_signature(\n                        encrypted_sig, video_id, player_url, age_gate)\n                    sp = try_get(url_data, lambda x: x['sp'][0], compat_str) or 'signature'\n                    url += '&%s=%s' % (sp, signature)\n            if 'ratebypass' not in url:\n                url += '&ratebypass=yes'\n\n            dct = {\n                'format_id': format_id,\n                'url': url,\n                'player_url': player_url,\n            }\n            if format_id in self._formats:\n                dct.update(self._formats[format_id])\n            if format_id in formats_spec:\n                dct.update(formats_spec[format_id])\n\n            # Some itags are not included in DASH manifest thus corresponding formats will\n            # lack metadata (see https://github.com/ytdl-org/youtube-dl/pull/5993).\n            # Trying to extract metadata from url_encoded_fmt_stream_map entry.\n            mobj = re.search(r'^(?P<width>\\d+)[xX](?P<height>\\d+)$', url_data.get('size', [''])[0])\n            width, height = (int(mobj.group('width')), int(mobj.group('height'))) if mobj else (None, None)\n\n            if width is None:\n                width = int_or_none(fmt.get('width'))\n            if height is None:\n                height = int_or_none(fmt.get('height'))\n\n            filesize = int_or_none(url_data.get(\n                'clen', [None])[0]) or _extract_filesize(url)\n\n            quality = url_data.get('quality', [None])[0] or fmt.get('quality')\n            quality_label = url_data.get('quality_label', [None])[0] or fmt.get('qualityLabel')\n\n            tbr = (float_or_none(url_data.get('bitrate', [None])[0], 1000)\n                   or float_or_none(fmt.get('bitrate'), 1000)) if format_id != '43' else None\n            fps = int_or_none(url_data.get('fps', [None])[0]) or int_or_none(fmt.get('fps'))\n\n            more_fields = {\n                'filesize': filesize,\n                'tbr': tbr,\n                'width': width,\n                'height': height,\n                'fps': fps,\n                'format_note': quality_label or quality,\n            }\n            for key, value in more_fields.items():\n                if value:\n                    dct[key] = value\n            type_ = url_data.get('type', [None])[0] or fmt.get('mimeType')\n            if type_:\n                type_split = type_.split(';')\n                kind_ext = type_split[0].split('/')\n                if len(kind_ext) == 2:\n                    kind, _ = kind_ext\n                    dct['ext'] = mimetype2ext(type_split[0])\n                    if kind in ('audio', 'video'):\n                        codecs = None\n                        for mobj in re.finditer(\n                                r'(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\']?)(?P<val>.+?)(?P=quote)(?:;|$)', type_):\n                            if mobj.group('key') == 'codecs':\n                                codecs = mobj.group('val')\n                                break\n                        if codecs:\n                            dct.update(parse_codecs(codecs))\n            if dct.get('acodec') == 'none' or dct.get('vcodec') == 'none':\n                dct['downloader_options'] = {\n                    # Youtube throttles chunks >~10M\n                    'http_chunk_size': 10485760,\n                }\n            formats.append(dct)\n    else:\n        manifest_url = (\n            url_or_none(try_get(\n                player_response,\n                lambda x: x['streamingData']['hlsManifestUrl'],\n                compat_str))\n            or url_or_none(try_get(\n                video_info, lambda x: x['hlsvp'][0], compat_str)))\n        if manifest_url:\n            formats = []\n            m3u8_formats = self._extract_m3u8_formats(\n                manifest_url, video_id, 'mp4', fatal=False)\n            for a_format in m3u8_formats:\n                itag = self._search_regex(\n                    r'/itag/(\\d+)/', a_format['url'], 'itag', default=None)\n                if itag:\n                    a_format['format_id'] = itag\n                    if itag in self._formats:\n                        dct = self._formats[itag].copy()\n                        dct.update(a_format)\n                        a_format = dct\n                a_format['player_url'] = player_url\n                # Accept-Encoding header causes failures in live streams on Youtube and Youtube Gaming\n                a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = 'True'\n                formats.append(a_format)\n        else:\n            error_message = extract_unavailable_message()\n            if not error_message:\n                error_message = clean_html(try_get(\n                    player_response, lambda x: x['playabilityStatus']['reason'],\n                    compat_str))\n            if not error_message:\n                error_message = clean_html(\n                    try_get(video_info, lambda x: x['reason'][0], compat_str))\n            if error_message:\n                raise ExtractorError(error_message, expected=True)\n            raise ExtractorError('no conn, hlsvp, hlsManifestUrl or url_encoded_fmt_stream_map information found in video info')\n\n    # uploader\n    video_uploader = try_get(\n        video_info, lambda x: x['author'][0],\n        compat_str) or str_or_none(video_details.get('author'))\n    if video_uploader:\n        video_uploader = compat_urllib_parse_unquote_plus(video_uploader)\n    else:\n        self._downloader.report_warning('unable to extract uploader name')\n\n    # uploader_id\n    video_uploader_id = None\n    video_uploader_url = None\n    mobj = re.search(\n        r'<link itemprop=\"url\" href=\"(?P<uploader_url>https?://www\\.youtube\\.com/(?:user|channel)/(?P<uploader_id>[^\"]+))\">',\n        video_webpage)\n    if mobj is not None:\n        video_uploader_id = mobj.group('uploader_id')\n        video_uploader_url = mobj.group('uploader_url')\n    else:\n        self._downloader.report_warning('unable to extract uploader nickname')\n\n    channel_id = (\n        str_or_none(video_details.get('channelId'))\n        or self._html_search_meta(\n            'channelId', video_webpage, 'channel id', default=None)\n        or self._search_regex(\n            r'data-channel-external-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            video_webpage, 'channel id', default=None, group='id'))\n    channel_url = 'http://www.youtube.com/channel/%s' % channel_id if channel_id else None\n\n    # thumbnail image\n    # We try first to get a high quality image:\n    m_thumb = re.search(r'<span itemprop=\"thumbnail\".*?href=\"(.*?)\">',\n                        video_webpage, re.DOTALL)\n    if m_thumb is not None:\n        video_thumbnail = m_thumb.group(1)\n    elif 'thumbnail_url' not in video_info:\n        self._downloader.report_warning('unable to extract video thumbnail')\n        video_thumbnail = None\n    else:   # don't panic if we can't find it\n        video_thumbnail = compat_urllib_parse_unquote_plus(video_info['thumbnail_url'][0])\n\n    # upload date\n    upload_date = self._html_search_meta(\n        'datePublished', video_webpage, 'upload date', default=None)\n    if not upload_date:\n        upload_date = self._search_regex(\n            [r'(?s)id=\"eow-date.*?>(.*?)</span>',\n             r'(?:id=\"watch-uploader-info\".*?>.*?|[\"\\']simpleText[\"\\']\\s*:\\s*[\"\\'])(?:Published|Uploaded|Streamed live|Started) on (.+?)[<\"\\']'],\n            video_webpage, 'upload date', default=None)\n    upload_date = unified_strdate(upload_date)\n\n    video_license = self._html_search_regex(\n        r'<h4[^>]+class=\"title\"[^>]*>\\s*License\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li',\n        video_webpage, 'license', default=None)\n\n    m_music = re.search(\n        r'''(?x)\n            <h4[^>]+class=\"title\"[^>]*>\\s*Music\\s*</h4>\\s*\n            <ul[^>]*>\\s*\n            <li>(?P<title>.+?)\n            by (?P<creator>.+?)\n            (?:\n                \\(.+?\\)|\n                <a[^>]*\n                    (?:\n                        \\bhref=[\"\\']/red[^>]*>|             # drop possible\n                        >\\s*Listen ad-free with YouTube Red # YouTube Red ad\n                    )\n                .*?\n            )?</li\n        ''',\n        video_webpage)\n    if m_music:\n        video_alt_title = remove_quotes(unescapeHTML(m_music.group('title')))\n        video_creator = clean_html(m_music.group('creator'))\n    else:\n        video_alt_title = video_creator = None\n\n    def extract_meta(field):\n        return self._html_search_regex(\n            r'<h4[^>]+class=\"title\"[^>]*>\\s*%s\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li>\\s*' % field,\n            video_webpage, field, default=None)\n\n    track = extract_meta('Song')\n    artist = extract_meta('Artist')\n    album = extract_meta('Album')\n\n    # Youtube Music Auto-generated description\n    release_date = release_year = None\n    if video_description:\n        mobj = re.search(r'(?s)Provided to YouTube by [^\\n]+\\n+(?P<track>[^\u00b7]+)\u00b7(?P<artist>[^\\n]+)\\n+(?P<album>[^\\n]+)(?:.+?\u2117\\s*(?P<release_year>\\d{4})(?!\\d))?(?:.+?Released on\\s*:\\s*(?P<release_date>\\d{4}-\\d{2}-\\d{2}))?(.+?\\nArtist\\s*:\\s*(?P<clean_artist>[^\\n]+))?', video_description)\n        if mobj:\n            if not track:\n                track = mobj.group('track').strip()\n            if not artist:\n                artist = mobj.group('clean_artist') or ', '.join(a.strip() for a in mobj.group('artist').split('\u00b7'))\n            if not album:\n                album = mobj.group('album'.strip())\n            release_year = mobj.group('release_year')\n            release_date = mobj.group('release_date')\n            if release_date:\n                release_date = release_date.replace('-', '')\n                if not release_year:\n                    release_year = int(release_date[:4])\n            if release_year:\n                release_year = int(release_year)\n\n    m_episode = re.search(\n        r'<div[^>]+id=\"watch7-headline\"[^>]*>\\s*<span[^>]*>.*?>(?P<series>[^<]+)</a></b>\\s*S(?P<season>\\d+)\\s*\u2022\\s*E(?P<episode>\\d+)</span>',\n        video_webpage)\n    if m_episode:\n        series = unescapeHTML(m_episode.group('series'))\n        season_number = int(m_episode.group('season'))\n        episode_number = int(m_episode.group('episode'))\n    else:\n        series = season_number = episode_number = None\n\n    m_cat_container = self._search_regex(\n        r'(?s)<h4[^>]*>\\s*Category\\s*</h4>\\s*<ul[^>]*>(.*?)</ul>',\n        video_webpage, 'categories', default=None)\n    if m_cat_container:\n        category = self._html_search_regex(\n            r'(?s)<a[^<]+>(.*?)</a>', m_cat_container, 'category',\n            default=None)\n        video_categories = None if category is None else [category]\n    else:\n        video_categories = None\n\n    video_tags = [\n        unescapeHTML(m.group('content'))\n        for m in re.finditer(self._meta_regex('og:video:tag'), video_webpage)]\n\n    def _extract_count(count_name):\n        return str_to_int(self._search_regex(\n            r'-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\d,]+)</span>'\n            % re.escape(count_name),\n            video_webpage, count_name, default=None))\n\n    like_count = _extract_count('like')\n    dislike_count = _extract_count('dislike')\n\n    if view_count is None:\n        view_count = str_to_int(self._search_regex(\n            r'<[^>]+class=[\"\\']watch-view-count[^>]+>\\s*([\\d,\\s]+)', video_webpage,\n            'view count', default=None))\n\n    average_rating = (\n        float_or_none(video_details.get('averageRating'))\n        or try_get(video_info, lambda x: float_or_none(x['avg_rating'][0])))\n\n    # subtitles\n    video_subtitles = self.extract_subtitles(video_id, video_webpage)\n    automatic_captions = self.extract_automatic_captions(video_id, video_webpage)\n\n    video_duration = try_get(\n        video_info, lambda x: int_or_none(x['length_seconds'][0]))\n    if not video_duration:\n        video_duration = int_or_none(video_details.get('lengthSeconds'))\n    if not video_duration:\n        video_duration = parse_duration(self._html_search_meta(\n            'duration', video_webpage, 'video duration'))\n\n    # annotations\n    video_annotations = None\n    if self._downloader.params.get('writeannotations', False):\n        xsrf_token = self._search_regex(\n            r'([\\'\"])XSRF_TOKEN\\1\\s*:\\s*([\\'\"])(?P<xsrf_token>[A-Za-z0-9+/=]+)\\2',\n            video_webpage, 'xsrf token', group='xsrf_token', fatal=False)\n        invideo_url = try_get(\n            player_response, lambda x: x['annotations'][0]['playerAnnotationsUrlsRenderer']['invideoUrl'], compat_str)\n        if xsrf_token and invideo_url:\n            xsrf_field_name = self._search_regex(\n                r'([\\'\"])XSRF_FIELD_NAME\\1\\s*:\\s*([\\'\"])(?P<xsrf_field_name>\\w+)\\2',\n                video_webpage, 'xsrf field name',\n                group='xsrf_field_name', default='session_token')\n            video_annotations = self._download_webpage(\n                self._proto_relative_url(invideo_url),\n                video_id, note='Downloading annotations',\n                errnote='Unable to download video annotations', fatal=False,\n                data=urlencode_postdata({xsrf_field_name: xsrf_token}))\n\n    chapters = self._extract_chapters(description_original, video_duration)\n\n    # Look for the DASH manifest\n    if self._downloader.params.get('youtube_include_dash_manifest', True):\n        dash_mpd_fatal = True\n        for mpd_url in dash_mpds:\n            dash_formats = {}\n            try:\n                def decrypt_sig(mobj):\n                    s = mobj.group(1)\n                    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n                    return '/signature/%s' % dec_s\n\n                mpd_url = re.sub(r'/s/([a-fA-F0-9\\.]+)', decrypt_sig, mpd_url)\n\n                for df in self._extract_mpd_formats(\n                        mpd_url, video_id, fatal=dash_mpd_fatal,\n                        formats_dict=self._formats):\n                    if not df.get('filesize'):\n                        df['filesize'] = _extract_filesize(df['url'])\n                    # Do not overwrite DASH format found in some previous DASH manifest\n                    if df['format_id'] not in dash_formats:\n                        dash_formats[df['format_id']] = df\n                    # Additional DASH manifests may end up in HTTP Error 403 therefore\n                    # allow them to fail without bug report message if we already have\n                    # some DASH manifest succeeded. This is temporary workaround to reduce\n                    # burst of bug reports until we figure out the reason and whether it\n                    # can be fixed at all.\n                    dash_mpd_fatal = False\n            except (ExtractorError, KeyError) as e:\n                self.report_warning(\n                    'Skipping DASH manifest: %r' % e, video_id)\n            if dash_formats:\n                # Remove the formats we found through non-DASH, they\n                # contain less info and it can be wrong, because we use\n                # fixed values (for example the resolution). See\n                # https://github.com/ytdl-org/youtube-dl/issues/5774 for an\n                # example.\n                formats = [f for f in formats if f['format_id'] not in dash_formats.keys()]\n                formats.extend(dash_formats.values())\n\n    # Check for malformed aspect ratio\n    stretched_m = re.search(\n        r'<meta\\s+property=\"og:video:tag\".*?content=\"yt:stretch=(?P<w>[0-9]+):(?P<h>[0-9]+)\">',\n        video_webpage)\n    if stretched_m:\n        w = float(stretched_m.group('w'))\n        h = float(stretched_m.group('h'))\n        # yt:stretch may hold invalid ratio data (e.g. for Q39EVAstoRM ratio is 17:0).\n        # We will only process correct ratios.\n        if w > 0 and h > 0:\n            ratio = w / h\n            for f in formats:\n                if f.get('vcodec') != 'none':\n                    f['stretched_ratio'] = ratio\n\n    if not formats:\n        if 'reason' in video_info:\n            if 'The uploader has not made this video available in your country.' in video_info['reason']:\n                regions_allowed = self._html_search_meta(\n                    'regionsAllowed', video_webpage, default=None)\n                countries = regions_allowed.split(',') if regions_allowed else None\n                self.raise_geo_restricted(\n                    msg=video_info['reason'][0], countries=countries)\n            reason = video_info['reason'][0]\n            if 'Invalid parameters' in reason:\n                unavailable_message = extract_unavailable_message()\n                if unavailable_message:\n                    reason = unavailable_message\n            raise ExtractorError(\n                'YouTube said: %s' % reason,\n                expected=True, video_id=video_id)\n        if video_info.get('license_info') or try_get(player_response, lambda x: x['streamingData']['licenseInfos']):\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n    self._sort_formats(formats)\n\n    self.mark_watched(video_id, video_info, player_response)\n\n    return {\n        'id': video_id,\n        'uploader': video_uploader,\n        'uploader_id': video_uploader_id,\n        'uploader_url': video_uploader_url,\n        'channel_id': channel_id,\n        'channel_url': channel_url,\n        'upload_date': upload_date,\n        'license': video_license,\n        'creator': video_creator or artist,\n        'title': video_title,\n        'alt_title': video_alt_title or track,\n        'thumbnail': video_thumbnail,\n        'description': video_description,\n        'categories': video_categories,\n        'tags': video_tags,\n        'subtitles': video_subtitles,\n        'automatic_captions': automatic_captions,\n        'duration': video_duration,\n        'age_limit': 18 if age_gate else 0,\n        'annotations': video_annotations,\n        'chapters': chapters,\n        'webpage_url': proto + '://www.youtube.com/watch?v=%s' % video_id,\n        'view_count': view_count,\n        'like_count': like_count,\n        'dislike_count': dislike_count,\n        'average_rating': average_rating,\n        'formats': formats,\n        'is_live': is_live,\n        'start_time': start_time,\n        'end_time': end_time,\n        'series': series,\n        'season_number': season_number,\n        'episode_number': episode_number,\n        'track': track,\n        'artist': artist,\n        'album': album,\n        'release_date': release_date,\n        'release_year': release_year,\n    }\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1690,
                    "end_line": 2445,
                    "variables": {
                        "url": [
                            2065,
                            1691,
                            1699,
                            1710,
                            1712,
                            1713,
                            1716,
                            1717,
                            1845,
                            1974,
                            1976,
                            1981,
                            1982,
                            1986,
                            2022,
                            1767,
                            1768,
                            2039,
                            2040,
                            2041,
                            2045
                        ],
                        "smuggled_data": [
                            1867,
                            1691
                        ],
                        "unsmuggle_url": [
                            1691
                        ],
                        "proto": [
                            1767,
                            1897,
                            1775,
                            1712,
                            1716,
                            2008,
                            2428,
                            1693
                        ],
                        "self._downloader.params.get": [
                            2310,
                            2026,
                            1868,
                            1999,
                            1809,
                            2330,
                            1694
                        ],
                        "self._downloader.params": [
                            2310,
                            2026,
                            1868,
                            1999,
                            1809,
                            2330,
                            1694
                        ],
                        "self._downloader": [
                            2182,
                            2310,
                            2152,
                            2026,
                            1868,
                            1838,
                            1999,
                            1809,
                            2164,
                            2330,
                            1694
                        ],
                        "self": [
                            1792,
                            2048,
                            1922,
                            2049,
                            2305,
                            2182,
                            2310,
                            2311,
                            1929,
                            1803,
                            2188,
                            2317,
                            2191,
                            1809,
                            2321,
                            2322,
                            2197,
                            1815,
                            2327,
                            2330,
                            1694,
                            2337,
                            2342,
                            2344,
                            2298,
                            1710,
                            1838,
                            1713,
                            2225,
                            1717,
                            2357,
                            2117,
                            2120,
                            1865,
                            1868,
                            2124,
                            2125,
                            1999,
                            2001,
                            2386,
                            2389,
                            2263,
                            1753,
                            2009,
                            2011,
                            2267,
                            2016,
                            2402,
                            2276,
                            2404,
                            2279,
                            1768,
                            2152,
                            2026,
                            1772,
                            1902,
                            2030,
                            2032,
                            1777,
                            1905,
                            1907,
                            2033,
                            2036,
                            2164,
                            2288,
                            2168,
                            2297,
                            2170
                        ],
                        "start_time": [
                            1697,
                            2435,
                            1702,
                            1703,
                            1704,
                            1705
                        ],
                        "end_time": [
                            1706,
                            1698,
                            1707,
                            2436
                        ],
                        "parsed_url": [
                            1699,
                            1700
                        ],
                        "compat_urllib_parse_urlparse": [
                            1986,
                            1699,
                            1846,
                            1719
                        ],
                        "component": [
                            1700,
                            1701
                        ],
                        "parsed_url.fragment": [
                            1700
                        ],
                        "parsed_url.query": [
                            1700
                        ],
                        "query": [
                            1986,
                            1701,
                            1702,
                            1703,
                            1704,
                            1705,
                            1706,
                            1707,
                            1719
                        ],
                        "compat_parse_qs": [
                            1986,
                            1701,
                            1848,
                            1719,
                            1784,
                            1881,
                            1980
                        ],
                        "parse_duration": [
                            1705,
                            1707,
                            2305,
                            1703
                        ],
                        "mobj": [
                            2056,
                            2057,
                            2336,
                            1710,
                            1711,
                            1712,
                            2094,
                            2096,
                            2097,
                            1723,
                            2236,
                            2237,
                            1724,
                            1725,
                            2239,
                            2241,
                            2243,
                            2244,
                            2245,
                            2157,
                            2160,
                            2161,
                            2162
                        ],
                        "re.search": [
                            2177,
                            2369,
                            1763,
                            2056,
                            2157,
                            1710,
                            2253,
                            1847,
                            2201,
                            1723,
                            2236
                        ],
                        "re": [
                            2177,
                            2178,
                            1763,
                            2276,
                            2340,
                            2369,
                            2056,
                            2281,
                            2157,
                            1710,
                            2094,
                            2253,
                            1847,
                            2201,
                            1723,
                            2236,
                            1725,
                            1854
                        ],
                        "self._NEXT_URL_RE": [
                            1710
                        ],
                        "lstrip": [
                            1712
                        ],
                        "compat_urllib_parse_unquote": [
                            1712
                        ],
                        "mobj.group": [
                            2336,
                            2241,
                            2243,
                            2244,
                            2245,
                            2057,
                            1712,
                            2096,
                            2097,
                            2161,
                            2162,
                            1725,
                            2239
                        ],
                        "video_id": [
                            1792,
                            1808,
                            2323,
                            2337,
                            1828,
                            2343,
                            2298,
                            1713,
                            1716,
                            1717,
                            2358,
                            1720,
                            2118,
                            2008,
                            1753,
                            2010,
                            2398,
                            2404,
                            1767,
                            1768,
                            2407,
                            1770,
                            1771,
                            1904,
                            1905,
                            1778,
                            1907,
                            2037,
                            2297,
                            1786,
                            2428
                        ],
                        "self.extract_id": [
                            1713
                        ],
                        "video_webpage": [
                            1792,
                            2178,
                            2306,
                            2313,
                            2189,
                            2319,
                            2194,
                            2199,
                            1817,
                            2297,
                            2217,
                            1841,
                            2227,
                            1717,
                            1723,
                            2371,
                            1865,
                            2255,
                            2003,
                            2387,
                            2265,
                            2018,
                            1763,
                            2276,
                            2282,
                            2159,
                            2289,
                            2169,
                            2298,
                            2172
                        ],
                        "urlh": [
                            1717,
                            1719
                        ],
                        "self._download_webpage_handle": [
                            1717
                        ],
                        "qs": [
                            1720,
                            1849,
                            1848,
                            1719
                        ],
                        "urlh.geturl": [
                            1719
                        ],
                        "qs.get": [
                            1720,
                            1849
                        ],
                        "player_url": [
                            2337,
                            2019,
                            2027,
                            1934,
                            2030,
                            2128,
                            1727,
                            2037,
                            2046,
                            1725,
                            2014,
                            2015
                        ],
                        "re.sub": [
                            2340,
                            1725,
                            1854
                        ],
                        "dash_mpds": [
                            1729,
                            1733,
                            1734,
                            1740,
                            1741,
                            2332
                        ],
                        "dash_mpd": [
                            1732,
                            1733,
                            1734,
                            1737,
                            1740,
                            1741
                        ],
                        "video_info.get": [
                            1732,
                            1836,
                            1936,
                            1937,
                            1942,
                            1785,
                            2399
                        ],
                        "video_info": [
                            1797,
                            1798,
                            2181,
                            1928,
                            2185,
                            1802,
                            1933,
                            1936,
                            1809,
                            1937,
                            1942,
                            1823,
                            1830,
                            1831,
                            1836,
                            2114,
                            1732,
                            2384,
                            1873,
                            2385,
                            2390,
                            2391,
                            2140,
                            2399,
                            1761,
                            2147,
                            2404,
                            1910,
                            2294,
                            1784,
                            1785,
                            1787,
                            1788,
                            2301,
                            1918
                        ],
                        "dash_mpds.append": [
                            1741,
                            1734
                        ],
                        "url_or_none": [
                            2113,
                            1737,
                            1981,
                            1974,
                            2109
                        ],
                        "try_get": [
                            1925,
                            1926,
                            2314,
                            1833,
                            2109,
                            1981,
                            2113,
                            1988,
                            1737,
                            1869,
                            1872,
                            1747,
                            2135,
                            2140,
                            1884,
                            2399,
                            2146,
                            2038,
                            2294,
                            2300
                        ],
                        "pl_response": [
                            1786,
                            1738,
                            1785,
                            1750,
                            1751,
                            1753,
                            1754,
                            1755,
                            1756
                        ],
                        "x": [
                            1925,
                            1926,
                            2315,
                            1834,
                            1981,
                            2111,
                            2114,
                            1988,
                            1738,
                            1871,
                            1873,
                            1747,
                            2136,
                            2140,
                            1884,
                            2399,
                            2147,
                            2038,
                            2294,
                            2301
                        ],
                        "compat_str": [
                            2112,
                            2114,
                            2148,
                            1739,
                            1996,
                            2315,
                            2140,
                            1872,
                            1873,
                            2038,
                            2137,
                            1884,
                            1981
                        ],
                        "is_live": [
                            2434,
                            1806,
                            1743,
                            1936,
                            1914,
                            1915
                        ],
                        "view_count": [
                            2287,
                            1744,
                            2288,
                            1909,
                            1910,
                            1911,
                            1912,
                            1788,
                            2429
                        ],
                        "int_or_none": [
                            1952,
                            1922,
                            2303,
                            1988,
                            1961,
                            1962,
                            1964,
                            1965,
                            2060,
                            2062,
                            1968,
                            2064,
                            1747,
                            1912,
                            2072,
                            2301,
                            1951
                        ],
                        "v_info": [
                            1747
                        ],
                        "str_or_none": [
                            1955,
                            2148,
                            1750,
                            2167
                        ],
                        "player_response": [
                            2404,
                            1925,
                            1926,
                            2399,
                            1834,
                            2315,
                            1870,
                            1807,
                            1808,
                            1810,
                            1750,
                            2110,
                            1786,
                            2136,
                            1758,
                            1823
                        ],
                        "self._parse_json": [
                            1753
                        ],
                        "isinstance": [
                            1754,
                            1830
                        ],
                        "dict": [
                            1754,
                            1834,
                            1797,
                            1830
                        ],
                        "add_dash_mpd_pr": [
                            1810,
                            1755
                        ],
                        "embed_webpage": [
                            1762,
                            1768,
                            1773,
                            2003,
                            2007,
                            2009,
                            2012
                        ],
                        "age_gate": [
                            2337,
                            1764,
                            2003,
                            2037,
                            2005,
                            2425,
                            1790
                        ],
                        "self._download_webpage": [
                            1768,
                            1777,
                            2009,
                            2321
                        ],
                        "data": [
                            1769,
                            1775
                        ],
                        "compat_urllib_parse_urlencode": [
                            1769
                        ],
                        "self._search_regex": [
                            2016,
                            1922,
                            2279,
                            2120,
                            2311,
                            1772,
                            2317,
                            2191,
                            2288,
                            2001,
                            2263,
                            2170,
                            2011
                        ],
                        "video_info_url": [
                            1778,
                            1775
                        ],
                        "video_info_webpage": [
                            1784,
                            1777,
                            1782,
                            1783
                        ],
                        "ExtractorError": [
                            2400,
                            1827,
                            1939,
                            2356,
                            1781,
                            2143,
                            2396,
                            2142,
                            1919
                        ],
                        "extract_player_response": [
                            1808,
                            1786
                        ],
                        "add_dash_mpd": [
                            1787,
                            1798
                        ],
                        "extract_view_count": [
                            1788,
                            1910
                        ],
                        "ytplayer_config": [
                            1792,
                            1793,
                            1794
                        ],
                        "self._get_ytplayer_config": [
                            1792
                        ],
                        "args": [
                            1794,
                            1795,
                            1797,
                            1802,
                            1804,
                            1805,
                            1808
                        ],
                        "args.get": [
                            1808,
                            1802,
                            1795,
                            1805
                        ],
                        "k": [
                            1797
                        ],
                        "v": [
                            1797
                        ],
                        "args.items": [
                            1797
                        ],
                        "self.url_result": [
                            1803
                        ],
                        "YoutubeIE.ie_key": [
                            1804
                        ],
                        "YoutubeIE": [
                            1804
                        ],
                        "messages": [
                            1821,
                            1819,
                            1820,
                            1813
                        ],
                        "tag": [
                            1816,
                            1814
                        ],
                        "kind": [
                            2090,
                            2092,
                            1814,
                            1816,
                            1817
                        ],
                        "msg": [
                            1818,
                            1819,
                            1815
                        ],
                        "self._html_search_regex": [
                            2225,
                            2267,
                            2197,
                            1815
                        ],
                        "format": [
                            1816
                        ],
                        "messages.append": [
                            1819
                        ],
                        "join": [
                            1904,
                            2241,
                            1821
                        ],
                        "unavailable_message": [
                            1824,
                            1825,
                            1826,
                            1828,
                            2393,
                            2394,
                            2395
                        ],
                        "extract_unavailable_message": [
                            1824,
                            2393,
                            2133
                        ],
                        "video_details": [
                            2148,
                            1865,
                            1833,
                            1836,
                            2293,
                            2167,
                            1911,
                            1912,
                            1915,
                            2303
                        ],
                        "video_title": [
                            1890,
                            1836,
                            1837,
                            1839,
                            2416,
                            1905
                        ],
                        "video_details.get": [
                            2148,
                            1865,
                            1836,
                            2293,
                            2167,
                            1912,
                            1915,
                            2303
                        ],
                        "self._downloader.report_warning": [
                            2152,
                            2182,
                            2164,
                            1838
                        ],
                        "description_original": [
                            1841,
                            1854,
                            2327
                        ],
                        "video_description": [
                            1862,
                            1863,
                            1865,
                            1841,
                            1842,
                            1905,
                            2419,
                            2235,
                            2236,
                            1854
                        ],
                        "get_element_by_id": [
                            1841
                        ],
                        "redir_url": [
                            1852,
                            1845,
                            1846
                        ],
                        "compat_urlparse.urljoin": [
                            1845
                        ],
                        "compat_urlparse": [
                            1845
                        ],
                        "m.group": [
                            2275,
                            1845
                        ],
                        "m": [
                            2275,
                            2276,
                            1845
                        ],
                        "parsed_redir_url": [
                            1848,
                            1846,
                            1847
                        ],
                        "parsed_redir_url.netloc": [
                            1847
                        ],
                        "parsed_redir_url.path": [
                            1847
                        ],
                        "parsed_redir_url.query": [
                            1848
                        ],
                        "q": [
                            1849,
                            1850,
                            1851
                        ],
                        "replace_url": [
                            1862
                        ],
                        "clean_html": [
                            2139,
                            2220,
                            2135,
                            1863
                        ],
                        "self._html_search_meta": [
                            2305,
                            1865,
                            2188,
                            2386,
                            2168
                        ],
                        "smuggled_data.get": [
                            1867
                        ],
                        "multifeed_metadata_list": [
                            1874,
                            1877,
                            1869
                        ],
                        "entries": [
                            1905,
                            1875,
                            1893
                        ],
                        "feed_ids": [
                            1904,
                            1876,
                            1901
                        ],
                        "feed": [
                            1881,
                            1877
                        ],
                        "multifeed_metadata_list.split": [
                            1877
                        ],
                        "feed_data": [
                            1881,
                            1884,
                            1897
                        ],
                        "compat_urllib_parse_unquote_plus": [
                            1881,
                            2185,
                            2150
                        ],
                        "name": [
                            1884
                        ],
                        "feed_id": [
                            1901,
                            1886,
                            1887
                        ],
                        "feed_entry": [
                            1889,
                            1886
                        ],
                        "feed_title": [
                            1889,
                            1891,
                            1892
                        ],
                        "title": [
                            1890,
                            1899,
                            1892
                        ],
                        "entries.append": [
                            1893
                        ],
                        "smuggle_url": [
                            1896
                        ],
                        "feed_ids.append": [
                            1901
                        ],
                        "self.to_screen": [
                            2033,
                            1907,
                            1902
                        ],
                        "self.playlist_result": [
                            1905
                        ],
                        "bool_or_none": [
                            1915
                        ],
                        "media_url": [
                            1923
                        ],
                        "streaming_formats": [
                            1954,
                            1925,
                            1926,
                            1936,
                            1971
                        ],
                        "list": [
                            1925,
                            1926
                        ],
                        "streaming_formats.extend": [
                            1926
                        ],
                        "startswith": [
                            1928
                        ],
                        "self.report_rtmp_download": [
                            1929
                        ],
                        "formats": [
                            2433,
                            2402,
                            2116,
                            1930,
                            2379,
                            2383,
                            2131,
                            1940,
                            2106,
                            2365,
                            2366
                        ],
                        "len": [
                            1936,
                            2089,
                            1946,
                            1948
                        ],
                        "encoded_url_map": [
                            1937,
                            1938
                        ],
                        "formats_spec": [
                            2050,
                            2051,
                            1960,
                            1941,
                            1949
                        ],
                        "fmt_list": [
                            1944,
                            1942,
                            1943
                        ],
                        "fmt": [
                            2060,
                            2062,
                            2067,
                            2068,
                            2071,
                            1944,
                            1945,
                            2072,
                            1954,
                            1955,
                            2085,
                            1958,
                            1959,
                            1961,
                            1962,
                            1964,
                            1965,
                            1967,
                            1968,
                            1971,
                            1972,
                            1974,
                            1977,
                            1993
                        ],
                        "fmt_list.split": [
                            1944
                        ],
                        "spec": [
                            1945,
                            1946,
                            1947,
                            1949,
                            1950
                        ],
                        "fmt.split": [
                            1945
                        ],
                        "width_height": [
                            1952,
                            1947,
                            1948,
                            1951
                        ],
                        "split": [
                            2088,
                            2241,
                            1947
                        ],
                        "itag": [
                            1955,
                            1956,
                            1960,
                            2120,
                            2122,
                            2123,
                            2124,
                            2125,
                            1967
                        ],
                        "fmt.get": [
                            2060,
                            2062,
                            2067,
                            2068,
                            2071,
                            2072,
                            1955,
                            2085,
                            1958,
                            1959,
                            1961,
                            1962,
                            1964,
                            1965,
                            1967,
                            1968,
                            1972,
                            1974,
                            1977,
                            1993
                        ],
                        "quality": [
                            2080,
                            2067,
                            1958,
                            1959
                        ],
                        "quality_label": [
                            2080,
                            1963,
                            2068,
                            1959
                        ],
                        "float_or_none": [
                            1967,
                            2293,
                            2294,
                            2071,
                            2070
                        ],
                        "cipher": [
                            1985,
                            1998,
                            1977,
                            1978,
                            1980
                        ],
                        "url_data": [
                            1986,
                            1988,
                            2021,
                            2022,
                            2023,
                            2024,
                            1993,
                            2056,
                            2085,
                            1999,
                            2064,
                            2067,
                            2068,
                            2038,
                            2070,
                            2072,
                            1980,
                            1981
                        ],
                        "stream_type": [
                            1988,
                            1990
                        ],
                        "format_id": [
                            2048,
                            2049,
                            2050,
                            2051,
                            1993,
                            1994,
                            1996,
                            2034,
                            2071,
                            2044
                        ],
                        "ASSETS_RE": [
                            2000,
                            2002,
                            2012
                        ],
                        "jsplayer_url_json": [
                            2001,
                            2011,
                            2005,
                            2014
                        ],
                        "embed_url": [
                            2008,
                            2010
                        ],
                        "json.loads": [
                            2019,
                            2014
                        ],
                        "json": [
                            2019,
                            2014
                        ],
                        "player_url_json": [
                            2016,
                            2019
                        ],
                        "encrypted_sig": [
                            2024,
                            2032,
                            2037
                        ],
                        "player_desc": [
                            2034,
                            2028,
                            2031
                        ],
                        "player_type": [
                            2030,
                            2031
                        ],
                        "player_version": [
                            2030,
                            2031
                        ],
                        "self._extract_player_info": [
                            2030
                        ],
                        "parts_sizes": [
                            2032,
                            2034
                        ],
                        "self._signature_cache_id": [
                            2032
                        ],
                        "signature": [
                            2036,
                            2039
                        ],
                        "self._decrypt_signature": [
                            2337,
                            2036
                        ],
                        "sp": [
                            2038,
                            2039
                        ],
                        "dct": [
                            2049,
                            2051,
                            2084,
                            2091,
                            2125,
                            2126,
                            2127,
                            2100,
                            2101,
                            2102,
                            2106,
                            2043
                        ],
                        "self._formats": [
                            2048,
                            2049,
                            2344,
                            2124,
                            2125
                        ],
                        "dct.update": [
                            2049,
                            2051,
                            2100,
                            2126
                        ],
                        "url_data.get": [
                            2085,
                            2056,
                            2064,
                            2067,
                            2068,
                            2070,
                            2072
                        ],
                        "width": [
                            2057,
                            2059,
                            2060,
                            2077
                        ],
                        "height": [
                            2057,
                            2061,
                            2062,
                            2078
                        ],
                        "int": [
                            2057,
                            2249,
                            2251,
                            2258,
                            2259
                        ],
                        "filesize": [
                            2064,
                            2075
                        ],
                        "_extract_filesize": [
                            2065,
                            2346
                        ],
                        "tbr": [
                            2076,
                            2070
                        ],
                        "fps": [
                            2072,
                            2079
                        ],
                        "more_fields": [
                            2074,
                            2082
                        ],
                        "key": [
                            2082,
                            2084
                        ],
                        "value": [
                            2082,
                            2083,
                            2084
                        ],
                        "more_fields.items": [
                            2082
                        ],
                        "type_": [
                            2095,
                            2085,
                            2086,
                            2087
                        ],
                        "type_split": [
                            2088,
                            2091,
                            2087
                        ],
                        "type_.split": [
                            2087
                        ],
                        "kind_ext": [
                            2088,
                            2089,
                            2090
                        ],
                        "_": [
                            2090
                        ],
                        "mimetype2ext": [
                            2091
                        ],
                        "codecs": [
                            2097,
                            2099,
                            2100,
                            2093
                        ],
                        "re.finditer": [
                            2276,
                            2094
                        ],
                        "parse_codecs": [
                            2100
                        ],
                        "dct.get": [
                            2101
                        ],
                        "formats.append": [
                            2106,
                            2131
                        ],
                        "manifest_url": [
                            2115,
                            2108,
                            2118
                        ],
                        "m3u8_formats": [
                            2117,
                            2119
                        ],
                        "self._extract_m3u8_formats": [
                            2117
                        ],
                        "a_format": [
                            2119,
                            2121,
                            2123,
                            2126,
                            2127,
                            2128,
                            2130,
                            2131
                        ],
                        "copy": [
                            2125
                        ],
                        "a_format.setdefault": [
                            2130
                        ],
                        "error_message": [
                            2133,
                            2134,
                            2135,
                            2138,
                            2139,
                            2141,
                            2142
                        ],
                        "video_uploader": [
                            2408,
                            2146,
                            2149,
                            2150
                        ],
                        "video_uploader_id": [
                            2409,
                            2161,
                            2155
                        ],
                        "video_uploader_url": [
                            2162,
                            2156,
                            2410
                        ],
                        "channel_id": [
                            2411,
                            2173,
                            2166
                        ],
                        "channel_url": [
                            2412,
                            2173
                        ],
                        "m_thumb": [
                            2177,
                            2179,
                            2180
                        ],
                        "re.DOTALL": [
                            2178
                        ],
                        "video_thumbnail": [
                            2185,
                            2418,
                            2180,
                            2183
                        ],
                        "m_thumb.group": [
                            2180
                        ],
                        "upload_date": [
                            2188,
                            2413,
                            2190,
                            2191,
                            2195
                        ],
                        "unified_strdate": [
                            2195
                        ],
                        "video_license": [
                            2197,
                            2414
                        ],
                        "m_music": [
                            2201,
                            2218,
                            2219,
                            2220
                        ],
                        "video_alt_title": [
                            2417,
                            2219,
                            2222
                        ],
                        "remove_quotes": [
                            2219
                        ],
                        "unescapeHTML": [
                            2257,
                            2219,
                            2275
                        ],
                        "m_music.group": [
                            2219,
                            2220
                        ],
                        "video_creator": [
                            2220,
                            2222,
                            2415
                        ],
                        "field": [
                            2226,
                            2227
                        ],
                        "track": [
                            2440,
                            2417,
                            2229,
                            2238,
                            2239
                        ],
                        "extract_meta": [
                            2229,
                            2230,
                            2231
                        ],
                        "artist": [
                            2240,
                            2241,
                            2441,
                            2415,
                            2230
                        ],
                        "album": [
                            2242,
                            2243,
                            2442,
                            2231
                        ],
                        "release_date": [
                            2245,
                            2246,
                            2247,
                            2249,
                            2443,
                            2234
                        ],
                        "release_year": [
                            2244,
                            2248,
                            2249,
                            2250,
                            2251,
                            2444,
                            2234
                        ],
                        "strip": [
                            2243,
                            2239
                        ],
                        "a.strip": [
                            2241
                        ],
                        "a": [
                            2241
                        ],
                        "release_date.replace": [
                            2247
                        ],
                        "m_episode": [
                            2253,
                            2256,
                            2257,
                            2258,
                            2259
                        ],
                        "series": [
                            2257,
                            2261,
                            2437
                        ],
                        "m_episode.group": [
                            2257,
                            2258,
                            2259
                        ],
                        "season_number": [
                            2258,
                            2261,
                            2438
                        ],
                        "episode_number": [
                            2259,
                            2261,
                            2439
                        ],
                        "m_cat_container": [
                            2266,
                            2268,
                            2263
                        ],
                        "category": [
                            2267,
                            2270
                        ],
                        "video_categories": [
                            2272,
                            2420,
                            2270
                        ],
                        "video_tags": [
                            2274,
                            2421
                        ],
                        "self._meta_regex": [
                            2276
                        ],
                        "str_to_int": [
                            2288,
                            2279
                        ],
                        "re.escape": [
                            2281
                        ],
                        "count_name": [
                            2281,
                            2282
                        ],
                        "like_count": [
                            2284,
                            2430
                        ],
                        "_extract_count": [
                            2284,
                            2285
                        ],
                        "dislike_count": [
                            2285,
                            2431
                        ],
                        "average_rating": [
                            2432,
                            2292
                        ],
                        "video_subtitles": [
                            2297,
                            2422
                        ],
                        "self.extract_subtitles": [
                            2297
                        ],
                        "automatic_captions": [
                            2298,
                            2423
                        ],
                        "self.extract_automatic_captions": [
                            2298
                        ],
                        "video_duration": [
                            2304,
                            2305,
                            2327,
                            2424,
                            2300,
                            2302,
                            2303
                        ],
                        "video_annotations": [
                            2321,
                            2426,
                            2309
                        ],
                        "xsrf_token": [
                            2316,
                            2325,
                            2311
                        ],
                        "invideo_url": [
                            2314,
                            2322,
                            2316
                        ],
                        "xsrf_field_name": [
                            2325,
                            2317
                        ],
                        "self._proto_relative_url": [
                            2322
                        ],
                        "urlencode_postdata": [
                            2325
                        ],
                        "chapters": [
                            2427,
                            2327
                        ],
                        "self._extract_chapters": [
                            2327
                        ],
                        "dash_mpd_fatal": [
                            2355,
                            2331,
                            2343
                        ],
                        "mpd_url": [
                            2332,
                            2340,
                            2343
                        ],
                        "dash_formats": [
                            2348,
                            2349,
                            2359,
                            2333,
                            2365,
                            2366
                        ],
                        "s": [
                            2336,
                            2337
                        ],
                        "dec_s": [
                            2337,
                            2338
                        ],
                        "decrypt_sig": [
                            2340
                        ],
                        "df": [
                            2342,
                            2345,
                            2346,
                            2348,
                            2349
                        ],
                        "self._extract_mpd_formats": [
                            2342
                        ],
                        "df.get": [
                            2345
                        ],
                        "KeyError": [
                            2356
                        ],
                        "self.report_warning": [
                            2357
                        ],
                        "e": [
                            2358
                        ],
                        "f": [
                            2379,
                            2380,
                            2365,
                            2381
                        ],
                        "dash_formats.keys": [
                            2365
                        ],
                        "formats.extend": [
                            2366
                        ],
                        "dash_formats.values": [
                            2366
                        ],
                        "stretched_m": [
                            2369,
                            2372,
                            2373,
                            2374
                        ],
                        "w": [
                            2377,
                            2378,
                            2373
                        ],
                        "float": [
                            2373,
                            2374
                        ],
                        "stretched_m.group": [
                            2373,
                            2374
                        ],
                        "h": [
                            2377,
                            2378,
                            2374
                        ],
                        "ratio": [
                            2378,
                            2381
                        ],
                        "f.get": [
                            2380
                        ],
                        "regions_allowed": [
                            2386,
                            2388
                        ],
                        "countries": [
                            2388,
                            2390
                        ],
                        "regions_allowed.split": [
                            2388
                        ],
                        "self.raise_geo_restricted": [
                            2389
                        ],
                        "reason": [
                            2392,
                            2395,
                            2397,
                            2391
                        ],
                        "self._sort_formats": [
                            2402
                        ],
                        "self.mark_watched": [
                            2404
                        ]
                    },
                    "filtered_variables": {
                        "url": [
                            2065,
                            1691,
                            1699,
                            1710,
                            1712,
                            1713,
                            1716,
                            1717,
                            1845,
                            1974,
                            1976,
                            1981,
                            1982,
                            1986,
                            2022,
                            1767,
                            1768,
                            2039,
                            2040,
                            2041,
                            2045
                        ],
                        "smuggled_data": [
                            1867,
                            1691
                        ],
                        "unsmuggle_url": [
                            1691
                        ],
                        "proto": [
                            1767,
                            1897,
                            1775,
                            1712,
                            1716,
                            2008,
                            2428,
                            1693
                        ],
                        "self._downloader.params.get": [
                            2310,
                            2026,
                            1868,
                            1999,
                            1809,
                            2330,
                            1694
                        ],
                        "self._downloader.params": [
                            2310,
                            2026,
                            1868,
                            1999,
                            1809,
                            2330,
                            1694
                        ],
                        "self._downloader": [
                            2182,
                            2310,
                            2152,
                            2026,
                            1868,
                            1838,
                            1999,
                            1809,
                            2164,
                            2330,
                            1694
                        ],
                        "self": [
                            1792,
                            2048,
                            1922,
                            2049,
                            2305,
                            2182,
                            2310,
                            2311,
                            1929,
                            1803,
                            2188,
                            2317,
                            2191,
                            1809,
                            2321,
                            2322,
                            2197,
                            1815,
                            2327,
                            2330,
                            1694,
                            2337,
                            2342,
                            2344,
                            2298,
                            1710,
                            1838,
                            1713,
                            2225,
                            1717,
                            2357,
                            2117,
                            2120,
                            1865,
                            1868,
                            2124,
                            2125,
                            1999,
                            2001,
                            2386,
                            2389,
                            2263,
                            1753,
                            2009,
                            2011,
                            2267,
                            2016,
                            2402,
                            2276,
                            2404,
                            2279,
                            1768,
                            2152,
                            2026,
                            1772,
                            1902,
                            2030,
                            2032,
                            1777,
                            1905,
                            1907,
                            2033,
                            2036,
                            2164,
                            2288,
                            2168,
                            2297,
                            2170
                        ],
                        "start_time": [
                            1697,
                            2435,
                            1702,
                            1703,
                            1704,
                            1705
                        ],
                        "end_time": [
                            1706,
                            1698,
                            1707,
                            2436
                        ],
                        "parsed_url": [
                            1699,
                            1700
                        ],
                        "compat_urllib_parse_urlparse": [
                            1986,
                            1699,
                            1846,
                            1719
                        ],
                        "component": [
                            1700,
                            1701
                        ],
                        "parsed_url.fragment": [
                            1700
                        ],
                        "parsed_url.query": [
                            1700
                        ],
                        "query": [
                            1986,
                            1701,
                            1702,
                            1703,
                            1704,
                            1705,
                            1706,
                            1707,
                            1719
                        ],
                        "compat_parse_qs": [
                            1986,
                            1701,
                            1848,
                            1719,
                            1784,
                            1881,
                            1980
                        ],
                        "parse_duration": [
                            1705,
                            1707,
                            2305,
                            1703
                        ],
                        "mobj": [
                            2056,
                            2057,
                            2336,
                            1710,
                            1711,
                            1712,
                            2094,
                            2096,
                            2097,
                            1723,
                            2236,
                            2237,
                            1724,
                            1725,
                            2239,
                            2241,
                            2243,
                            2244,
                            2245,
                            2157,
                            2160,
                            2161,
                            2162
                        ],
                        "re.search": [
                            2177,
                            2369,
                            1763,
                            2056,
                            2157,
                            1710,
                            2253,
                            1847,
                            2201,
                            1723,
                            2236
                        ],
                        "re": [
                            2177,
                            2178,
                            1763,
                            2276,
                            2340,
                            2369,
                            2056,
                            2281,
                            2157,
                            1710,
                            2094,
                            2253,
                            1847,
                            2201,
                            1723,
                            2236,
                            1725,
                            1854
                        ],
                        "self._NEXT_URL_RE": [
                            1710
                        ],
                        "lstrip": [
                            1712
                        ],
                        "compat_urllib_parse_unquote": [
                            1712
                        ],
                        "mobj.group": [
                            2336,
                            2241,
                            2243,
                            2244,
                            2245,
                            2057,
                            1712,
                            2096,
                            2097,
                            2161,
                            2162,
                            1725,
                            2239
                        ],
                        "video_id": [
                            1792,
                            1808,
                            2323,
                            2337,
                            1828,
                            2343,
                            2298,
                            1713,
                            1716,
                            1717,
                            2358,
                            1720,
                            2118,
                            2008,
                            1753,
                            2010,
                            2398,
                            2404,
                            1767,
                            1768,
                            2407,
                            1770,
                            1771,
                            1904,
                            1905,
                            1778,
                            1907,
                            2037,
                            2297,
                            1786,
                            2428
                        ],
                        "self.extract_id": [
                            1713
                        ],
                        "video_webpage": [
                            1792,
                            2178,
                            2306,
                            2313,
                            2189,
                            2319,
                            2194,
                            2199,
                            1817,
                            2297,
                            2217,
                            1841,
                            2227,
                            1717,
                            1723,
                            2371,
                            1865,
                            2255,
                            2003,
                            2387,
                            2265,
                            2018,
                            1763,
                            2276,
                            2282,
                            2159,
                            2289,
                            2169,
                            2298,
                            2172
                        ],
                        "urlh": [
                            1717,
                            1719
                        ],
                        "self._download_webpage_handle": [
                            1717
                        ],
                        "qs": [
                            1720,
                            1849,
                            1848,
                            1719
                        ],
                        "urlh.geturl": [
                            1719
                        ],
                        "qs.get": [
                            1720,
                            1849
                        ],
                        "player_url": [
                            2337,
                            2019,
                            2027,
                            1934,
                            2030,
                            2128,
                            1727,
                            2037,
                            2046,
                            1725,
                            2014,
                            2015
                        ],
                        "re.sub": [
                            2340,
                            1725,
                            1854
                        ],
                        "dash_mpds": [
                            1729,
                            1733,
                            1734,
                            1740,
                            1741,
                            2332
                        ],
                        "dash_mpd": [
                            1732,
                            1733,
                            1734,
                            1737,
                            1740,
                            1741
                        ],
                        "video_info.get": [
                            1732,
                            1836,
                            1936,
                            1937,
                            1942,
                            1785,
                            2399
                        ],
                        "video_info": [
                            1797,
                            1798,
                            2181,
                            1928,
                            2185,
                            1802,
                            1933,
                            1936,
                            1809,
                            1937,
                            1942,
                            1823,
                            1830,
                            1831,
                            1836,
                            2114,
                            1732,
                            2384,
                            1873,
                            2385,
                            2390,
                            2391,
                            2140,
                            2399,
                            1761,
                            2147,
                            2404,
                            1910,
                            2294,
                            1784,
                            1785,
                            1787,
                            1788,
                            2301,
                            1918
                        ],
                        "dash_mpds.append": [
                            1741,
                            1734
                        ],
                        "url_or_none": [
                            2113,
                            1737,
                            1981,
                            1974,
                            2109
                        ],
                        "try_get": [
                            1925,
                            1926,
                            2314,
                            1833,
                            2109,
                            1981,
                            2113,
                            1988,
                            1737,
                            1869,
                            1872,
                            1747,
                            2135,
                            2140,
                            1884,
                            2399,
                            2146,
                            2038,
                            2294,
                            2300
                        ],
                        "pl_response": [
                            1786,
                            1738,
                            1785,
                            1750,
                            1751,
                            1753,
                            1754,
                            1755,
                            1756
                        ],
                        "x": [
                            1925,
                            1926,
                            2315,
                            1834,
                            1981,
                            2111,
                            2114,
                            1988,
                            1738,
                            1871,
                            1873,
                            1747,
                            2136,
                            2140,
                            1884,
                            2399,
                            2147,
                            2038,
                            2294,
                            2301
                        ],
                        "compat_str": [
                            2112,
                            2114,
                            2148,
                            1739,
                            1996,
                            2315,
                            2140,
                            1872,
                            1873,
                            2038,
                            2137,
                            1884,
                            1981
                        ],
                        "is_live": [
                            2434,
                            1806,
                            1743,
                            1936,
                            1914,
                            1915
                        ],
                        "view_count": [
                            2287,
                            1744,
                            2288,
                            1909,
                            1910,
                            1911,
                            1912,
                            1788,
                            2429
                        ],
                        "int_or_none": [
                            1952,
                            1922,
                            2303,
                            1988,
                            1961,
                            1962,
                            1964,
                            1965,
                            2060,
                            2062,
                            1968,
                            2064,
                            1747,
                            1912,
                            2072,
                            2301,
                            1951
                        ],
                        "v_info": [
                            1747
                        ],
                        "str_or_none": [
                            1955,
                            2148,
                            1750,
                            2167
                        ],
                        "player_response": [
                            2404,
                            1925,
                            1926,
                            2399,
                            1834,
                            2315,
                            1870,
                            1807,
                            1808,
                            1810,
                            1750,
                            2110,
                            1786,
                            2136,
                            1758,
                            1823
                        ],
                        "self._parse_json": [
                            1753
                        ],
                        "add_dash_mpd_pr": [
                            1810,
                            1755
                        ],
                        "embed_webpage": [
                            1762,
                            1768,
                            1773,
                            2003,
                            2007,
                            2009,
                            2012
                        ],
                        "age_gate": [
                            2337,
                            1764,
                            2003,
                            2037,
                            2005,
                            2425,
                            1790
                        ],
                        "self._download_webpage": [
                            1768,
                            1777,
                            2009,
                            2321
                        ],
                        "data": [
                            1769,
                            1775
                        ],
                        "compat_urllib_parse_urlencode": [
                            1769
                        ],
                        "self._search_regex": [
                            2016,
                            1922,
                            2279,
                            2120,
                            2311,
                            1772,
                            2317,
                            2191,
                            2288,
                            2001,
                            2263,
                            2170,
                            2011
                        ],
                        "video_info_url": [
                            1778,
                            1775
                        ],
                        "video_info_webpage": [
                            1784,
                            1777,
                            1782,
                            1783
                        ],
                        "ExtractorError": [
                            2400,
                            1827,
                            1939,
                            2356,
                            1781,
                            2143,
                            2396,
                            2142,
                            1919
                        ],
                        "extract_player_response": [
                            1808,
                            1786
                        ],
                        "add_dash_mpd": [
                            1787,
                            1798
                        ],
                        "extract_view_count": [
                            1788,
                            1910
                        ],
                        "ytplayer_config": [
                            1792,
                            1793,
                            1794
                        ],
                        "self._get_ytplayer_config": [
                            1792
                        ],
                        "args": [
                            1794,
                            1795,
                            1797,
                            1802,
                            1804,
                            1805,
                            1808
                        ],
                        "args.get": [
                            1808,
                            1802,
                            1795,
                            1805
                        ],
                        "k": [
                            1797
                        ],
                        "v": [
                            1797
                        ],
                        "args.items": [
                            1797
                        ],
                        "self.url_result": [
                            1803
                        ],
                        "YoutubeIE.ie_key": [
                            1804
                        ],
                        "YoutubeIE": [
                            1804
                        ],
                        "messages": [
                            1821,
                            1819,
                            1820,
                            1813
                        ],
                        "tag": [
                            1816,
                            1814
                        ],
                        "kind": [
                            2090,
                            2092,
                            1814,
                            1816,
                            1817
                        ],
                        "msg": [
                            1818,
                            1819,
                            1815
                        ],
                        "self._html_search_regex": [
                            2225,
                            2267,
                            2197,
                            1815
                        ],
                        "messages.append": [
                            1819
                        ],
                        "join": [
                            1904,
                            2241,
                            1821
                        ],
                        "unavailable_message": [
                            1824,
                            1825,
                            1826,
                            1828,
                            2393,
                            2394,
                            2395
                        ],
                        "extract_unavailable_message": [
                            1824,
                            2393,
                            2133
                        ],
                        "video_details": [
                            2148,
                            1865,
                            1833,
                            1836,
                            2293,
                            2167,
                            1911,
                            1912,
                            1915,
                            2303
                        ],
                        "video_title": [
                            1890,
                            1836,
                            1837,
                            1839,
                            2416,
                            1905
                        ],
                        "video_details.get": [
                            2148,
                            1865,
                            1836,
                            2293,
                            2167,
                            1912,
                            1915,
                            2303
                        ],
                        "self._downloader.report_warning": [
                            2152,
                            2182,
                            2164,
                            1838
                        ],
                        "description_original": [
                            1841,
                            1854,
                            2327
                        ],
                        "video_description": [
                            1862,
                            1863,
                            1865,
                            1841,
                            1842,
                            1905,
                            2419,
                            2235,
                            2236,
                            1854
                        ],
                        "get_element_by_id": [
                            1841
                        ],
                        "redir_url": [
                            1852,
                            1845,
                            1846
                        ],
                        "compat_urlparse.urljoin": [
                            1845
                        ],
                        "compat_urlparse": [
                            1845
                        ],
                        "m.group": [
                            2275,
                            1845
                        ],
                        "m": [
                            2275,
                            2276,
                            1845
                        ],
                        "parsed_redir_url": [
                            1848,
                            1846,
                            1847
                        ],
                        "parsed_redir_url.netloc": [
                            1847
                        ],
                        "parsed_redir_url.path": [
                            1847
                        ],
                        "parsed_redir_url.query": [
                            1848
                        ],
                        "q": [
                            1849,
                            1850,
                            1851
                        ],
                        "replace_url": [
                            1862
                        ],
                        "clean_html": [
                            2139,
                            2220,
                            2135,
                            1863
                        ],
                        "self._html_search_meta": [
                            2305,
                            1865,
                            2188,
                            2386,
                            2168
                        ],
                        "smuggled_data.get": [
                            1867
                        ],
                        "multifeed_metadata_list": [
                            1874,
                            1877,
                            1869
                        ],
                        "entries": [
                            1905,
                            1875,
                            1893
                        ],
                        "feed_ids": [
                            1904,
                            1876,
                            1901
                        ],
                        "feed": [
                            1881,
                            1877
                        ],
                        "multifeed_metadata_list.split": [
                            1877
                        ],
                        "feed_data": [
                            1881,
                            1884,
                            1897
                        ],
                        "compat_urllib_parse_unquote_plus": [
                            1881,
                            2185,
                            2150
                        ],
                        "name": [
                            1884
                        ],
                        "feed_id": [
                            1901,
                            1886,
                            1887
                        ],
                        "feed_entry": [
                            1889,
                            1886
                        ],
                        "feed_title": [
                            1889,
                            1891,
                            1892
                        ],
                        "title": [
                            1890,
                            1899,
                            1892
                        ],
                        "entries.append": [
                            1893
                        ],
                        "smuggle_url": [
                            1896
                        ],
                        "feed_ids.append": [
                            1901
                        ],
                        "self.to_screen": [
                            2033,
                            1907,
                            1902
                        ],
                        "self.playlist_result": [
                            1905
                        ],
                        "bool_or_none": [
                            1915
                        ],
                        "media_url": [
                            1923
                        ],
                        "streaming_formats": [
                            1954,
                            1925,
                            1926,
                            1936,
                            1971
                        ],
                        "streaming_formats.extend": [
                            1926
                        ],
                        "startswith": [
                            1928
                        ],
                        "self.report_rtmp_download": [
                            1929
                        ],
                        "formats": [
                            2433,
                            2402,
                            2116,
                            1930,
                            2379,
                            2383,
                            2131,
                            1940,
                            2106,
                            2365,
                            2366
                        ],
                        "encoded_url_map": [
                            1937,
                            1938
                        ],
                        "formats_spec": [
                            2050,
                            2051,
                            1960,
                            1941,
                            1949
                        ],
                        "fmt_list": [
                            1944,
                            1942,
                            1943
                        ],
                        "fmt": [
                            2060,
                            2062,
                            2067,
                            2068,
                            2071,
                            1944,
                            1945,
                            2072,
                            1954,
                            1955,
                            2085,
                            1958,
                            1959,
                            1961,
                            1962,
                            1964,
                            1965,
                            1967,
                            1968,
                            1971,
                            1972,
                            1974,
                            1977,
                            1993
                        ],
                        "fmt_list.split": [
                            1944
                        ],
                        "spec": [
                            1945,
                            1946,
                            1947,
                            1949,
                            1950
                        ],
                        "fmt.split": [
                            1945
                        ],
                        "width_height": [
                            1952,
                            1947,
                            1948,
                            1951
                        ],
                        "split": [
                            2088,
                            2241,
                            1947
                        ],
                        "itag": [
                            1955,
                            1956,
                            1960,
                            2120,
                            2122,
                            2123,
                            2124,
                            2125,
                            1967
                        ],
                        "fmt.get": [
                            2060,
                            2062,
                            2067,
                            2068,
                            2071,
                            2072,
                            1955,
                            2085,
                            1958,
                            1959,
                            1961,
                            1962,
                            1964,
                            1965,
                            1967,
                            1968,
                            1972,
                            1974,
                            1977,
                            1993
                        ],
                        "quality": [
                            2080,
                            2067,
                            1958,
                            1959
                        ],
                        "quality_label": [
                            2080,
                            1963,
                            2068,
                            1959
                        ],
                        "float_or_none": [
                            1967,
                            2293,
                            2294,
                            2071,
                            2070
                        ],
                        "cipher": [
                            1985,
                            1998,
                            1977,
                            1978,
                            1980
                        ],
                        "url_data": [
                            1986,
                            1988,
                            2021,
                            2022,
                            2023,
                            2024,
                            1993,
                            2056,
                            2085,
                            1999,
                            2064,
                            2067,
                            2068,
                            2038,
                            2070,
                            2072,
                            1980,
                            1981
                        ],
                        "stream_type": [
                            1988,
                            1990
                        ],
                        "format_id": [
                            2048,
                            2049,
                            2050,
                            2051,
                            1993,
                            1994,
                            1996,
                            2034,
                            2071,
                            2044
                        ],
                        "ASSETS_RE": [
                            2000,
                            2002,
                            2012
                        ],
                        "jsplayer_url_json": [
                            2001,
                            2011,
                            2005,
                            2014
                        ],
                        "embed_url": [
                            2008,
                            2010
                        ],
                        "json.loads": [
                            2019,
                            2014
                        ],
                        "json": [
                            2019,
                            2014
                        ],
                        "player_url_json": [
                            2016,
                            2019
                        ],
                        "encrypted_sig": [
                            2024,
                            2032,
                            2037
                        ],
                        "player_desc": [
                            2034,
                            2028,
                            2031
                        ],
                        "player_type": [
                            2030,
                            2031
                        ],
                        "player_version": [
                            2030,
                            2031
                        ],
                        "self._extract_player_info": [
                            2030
                        ],
                        "parts_sizes": [
                            2032,
                            2034
                        ],
                        "self._signature_cache_id": [
                            2032
                        ],
                        "signature": [
                            2036,
                            2039
                        ],
                        "self._decrypt_signature": [
                            2337,
                            2036
                        ],
                        "sp": [
                            2038,
                            2039
                        ],
                        "dct": [
                            2049,
                            2051,
                            2084,
                            2091,
                            2125,
                            2126,
                            2127,
                            2100,
                            2101,
                            2102,
                            2106,
                            2043
                        ],
                        "self._formats": [
                            2048,
                            2049,
                            2344,
                            2124,
                            2125
                        ],
                        "dct.update": [
                            2049,
                            2051,
                            2100,
                            2126
                        ],
                        "url_data.get": [
                            2085,
                            2056,
                            2064,
                            2067,
                            2068,
                            2070,
                            2072
                        ],
                        "width": [
                            2057,
                            2059,
                            2060,
                            2077
                        ],
                        "height": [
                            2057,
                            2061,
                            2062,
                            2078
                        ],
                        "filesize": [
                            2064,
                            2075
                        ],
                        "_extract_filesize": [
                            2065,
                            2346
                        ],
                        "tbr": [
                            2076,
                            2070
                        ],
                        "fps": [
                            2072,
                            2079
                        ],
                        "more_fields": [
                            2074,
                            2082
                        ],
                        "key": [
                            2082,
                            2084
                        ],
                        "value": [
                            2082,
                            2083,
                            2084
                        ],
                        "more_fields.items": [
                            2082
                        ],
                        "type_": [
                            2095,
                            2085,
                            2086,
                            2087
                        ],
                        "type_split": [
                            2088,
                            2091,
                            2087
                        ],
                        "type_.split": [
                            2087
                        ],
                        "kind_ext": [
                            2088,
                            2089,
                            2090
                        ],
                        "_": [
                            2090
                        ],
                        "mimetype2ext": [
                            2091
                        ],
                        "codecs": [
                            2097,
                            2099,
                            2100,
                            2093
                        ],
                        "re.finditer": [
                            2276,
                            2094
                        ],
                        "parse_codecs": [
                            2100
                        ],
                        "dct.get": [
                            2101
                        ],
                        "formats.append": [
                            2106,
                            2131
                        ],
                        "manifest_url": [
                            2115,
                            2108,
                            2118
                        ],
                        "m3u8_formats": [
                            2117,
                            2119
                        ],
                        "self._extract_m3u8_formats": [
                            2117
                        ],
                        "a_format": [
                            2119,
                            2121,
                            2123,
                            2126,
                            2127,
                            2128,
                            2130,
                            2131
                        ],
                        "copy": [
                            2125
                        ],
                        "a_format.setdefault": [
                            2130
                        ],
                        "error_message": [
                            2133,
                            2134,
                            2135,
                            2138,
                            2139,
                            2141,
                            2142
                        ],
                        "video_uploader": [
                            2408,
                            2146,
                            2149,
                            2150
                        ],
                        "video_uploader_id": [
                            2409,
                            2161,
                            2155
                        ],
                        "video_uploader_url": [
                            2162,
                            2156,
                            2410
                        ],
                        "channel_id": [
                            2411,
                            2173,
                            2166
                        ],
                        "channel_url": [
                            2412,
                            2173
                        ],
                        "m_thumb": [
                            2177,
                            2179,
                            2180
                        ],
                        "re.DOTALL": [
                            2178
                        ],
                        "video_thumbnail": [
                            2185,
                            2418,
                            2180,
                            2183
                        ],
                        "m_thumb.group": [
                            2180
                        ],
                        "upload_date": [
                            2188,
                            2413,
                            2190,
                            2191,
                            2195
                        ],
                        "unified_strdate": [
                            2195
                        ],
                        "video_license": [
                            2197,
                            2414
                        ],
                        "m_music": [
                            2201,
                            2218,
                            2219,
                            2220
                        ],
                        "video_alt_title": [
                            2417,
                            2219,
                            2222
                        ],
                        "remove_quotes": [
                            2219
                        ],
                        "unescapeHTML": [
                            2257,
                            2219,
                            2275
                        ],
                        "m_music.group": [
                            2219,
                            2220
                        ],
                        "video_creator": [
                            2220,
                            2222,
                            2415
                        ],
                        "field": [
                            2226,
                            2227
                        ],
                        "track": [
                            2440,
                            2417,
                            2229,
                            2238,
                            2239
                        ],
                        "extract_meta": [
                            2229,
                            2230,
                            2231
                        ],
                        "artist": [
                            2240,
                            2241,
                            2441,
                            2415,
                            2230
                        ],
                        "album": [
                            2242,
                            2243,
                            2442,
                            2231
                        ],
                        "release_date": [
                            2245,
                            2246,
                            2247,
                            2249,
                            2443,
                            2234
                        ],
                        "release_year": [
                            2244,
                            2248,
                            2249,
                            2250,
                            2251,
                            2444,
                            2234
                        ],
                        "strip": [
                            2243,
                            2239
                        ],
                        "a.strip": [
                            2241
                        ],
                        "a": [
                            2241
                        ],
                        "release_date.replace": [
                            2247
                        ],
                        "m_episode": [
                            2253,
                            2256,
                            2257,
                            2258,
                            2259
                        ],
                        "series": [
                            2257,
                            2261,
                            2437
                        ],
                        "m_episode.group": [
                            2257,
                            2258,
                            2259
                        ],
                        "season_number": [
                            2258,
                            2261,
                            2438
                        ],
                        "episode_number": [
                            2259,
                            2261,
                            2439
                        ],
                        "m_cat_container": [
                            2266,
                            2268,
                            2263
                        ],
                        "category": [
                            2267,
                            2270
                        ],
                        "video_categories": [
                            2272,
                            2420,
                            2270
                        ],
                        "video_tags": [
                            2274,
                            2421
                        ],
                        "self._meta_regex": [
                            2276
                        ],
                        "str_to_int": [
                            2288,
                            2279
                        ],
                        "re.escape": [
                            2281
                        ],
                        "count_name": [
                            2281,
                            2282
                        ],
                        "like_count": [
                            2284,
                            2430
                        ],
                        "_extract_count": [
                            2284,
                            2285
                        ],
                        "dislike_count": [
                            2285,
                            2431
                        ],
                        "average_rating": [
                            2432,
                            2292
                        ],
                        "video_subtitles": [
                            2297,
                            2422
                        ],
                        "self.extract_subtitles": [
                            2297
                        ],
                        "automatic_captions": [
                            2298,
                            2423
                        ],
                        "self.extract_automatic_captions": [
                            2298
                        ],
                        "video_duration": [
                            2304,
                            2305,
                            2327,
                            2424,
                            2300,
                            2302,
                            2303
                        ],
                        "video_annotations": [
                            2321,
                            2426,
                            2309
                        ],
                        "xsrf_token": [
                            2316,
                            2325,
                            2311
                        ],
                        "invideo_url": [
                            2314,
                            2322,
                            2316
                        ],
                        "xsrf_field_name": [
                            2325,
                            2317
                        ],
                        "self._proto_relative_url": [
                            2322
                        ],
                        "urlencode_postdata": [
                            2325
                        ],
                        "chapters": [
                            2427,
                            2327
                        ],
                        "self._extract_chapters": [
                            2327
                        ],
                        "dash_mpd_fatal": [
                            2355,
                            2331,
                            2343
                        ],
                        "mpd_url": [
                            2332,
                            2340,
                            2343
                        ],
                        "dash_formats": [
                            2348,
                            2349,
                            2359,
                            2333,
                            2365,
                            2366
                        ],
                        "s": [
                            2336,
                            2337
                        ],
                        "dec_s": [
                            2337,
                            2338
                        ],
                        "decrypt_sig": [
                            2340
                        ],
                        "df": [
                            2342,
                            2345,
                            2346,
                            2348,
                            2349
                        ],
                        "self._extract_mpd_formats": [
                            2342
                        ],
                        "df.get": [
                            2345
                        ],
                        "self.report_warning": [
                            2357
                        ],
                        "e": [
                            2358
                        ],
                        "f": [
                            2379,
                            2380,
                            2365,
                            2381
                        ],
                        "dash_formats.keys": [
                            2365
                        ],
                        "formats.extend": [
                            2366
                        ],
                        "dash_formats.values": [
                            2366
                        ],
                        "stretched_m": [
                            2369,
                            2372,
                            2373,
                            2374
                        ],
                        "w": [
                            2377,
                            2378,
                            2373
                        ],
                        "stretched_m.group": [
                            2373,
                            2374
                        ],
                        "h": [
                            2377,
                            2378,
                            2374
                        ],
                        "ratio": [
                            2378,
                            2381
                        ],
                        "f.get": [
                            2380
                        ],
                        "regions_allowed": [
                            2386,
                            2388
                        ],
                        "countries": [
                            2388,
                            2390
                        ],
                        "regions_allowed.split": [
                            2388
                        ],
                        "self.raise_geo_restricted": [
                            2389
                        ],
                        "reason": [
                            2392,
                            2395,
                            2397,
                            2391
                        ],
                        "self._sort_formats": [
                            2402
                        ],
                        "self.mark_watched": [
                            2404
                        ]
                    },
                    "diff_line_number": 1690,
                    "class_data": {
                        "signature": "class YoutubeIE(YoutubeBaseInfoExtractor)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *args, **kwargs):\n    super(YoutubeIE, self).__init__(*args, **kwargs)\n    self._player_cache = {}",
                            "def report_video_info_webpage_download(self, video_id):\n    \"\"\"Report attempt to download video info webpage.\"\"\"\n    self.to_screen('%s: Downloading video info webpage' % video_id)",
                            "def report_information_extraction(self, video_id):\n    \"\"\"Report attempt to extract video information.\"\"\"\n    self.to_screen('%s: Extracting video information' % video_id)",
                            "def report_unavailable_format(self, video_id, format):\n    \"\"\"Report extracted video URL.\"\"\"\n    self.to_screen('%s: Format %s not available' % (video_id, format))",
                            "def report_rtmp_download(self):\n    \"\"\"Indicate the download will use the RTMP protocol.\"\"\"\n    self.to_screen('RTMP download detected')",
                            "def _signature_cache_id(self, example_sig):\n    \"\"\" Return a string representation of a signature \"\"\"\n    return '.'.join((compat_str(len(part)) for part in example_sig.split('.')))",
                            "@classmethod\ndef _extract_player_info(cls, player_url):\n    for player_re in cls._PLAYER_INFO_RE:\n        id_m = re.search(player_re, player_url)\n        if id_m:\n            break\n    else:\n        raise ExtractorError('Cannot identify player %r' % player_url)\n    return (id_m.group('ext'), id_m.group('id'))",
                            "def _extract_signature_function(self, video_id, player_url, example_sig):\n    player_type, player_id = self._extract_player_info(player_url)\n    func_id = '%s_%s_%s' % (player_type, player_id, self._signature_cache_id(example_sig))\n    assert os.path.basename(func_id) == func_id\n    cache_spec = self._downloader.cache.load('youtube-sigfuncs', func_id)\n    if cache_spec is not None:\n        return lambda s: ''.join((s[i] for i in cache_spec))\n    download_note = 'Downloading player %s' % player_url if self._downloader.params.get('verbose') else 'Downloading %s player %s' % (player_type, player_id)\n    if player_type == 'js':\n        code = self._download_webpage(player_url, video_id, note=download_note, errnote='Download of %s failed' % player_url)\n        res = self._parse_sig_js(code)\n    elif player_type == 'swf':\n        urlh = self._request_webpage(player_url, video_id, note=download_note, errnote='Download of %s failed' % player_url)\n        code = urlh.read()\n        res = self._parse_sig_swf(code)\n    else:\n        assert False, 'Invalid player type %r' % player_type\n    test_string = ''.join(map(compat_chr, range(len(example_sig))))\n    cache_res = res(test_string)\n    cache_spec = [ord(c) for c in cache_res]\n    self._downloader.cache.store('youtube-sigfuncs', func_id, cache_spec)\n    return res",
                            "def _print_sig_code(self, func, example_sig):\n\n    def gen_sig_code(idxs):\n\n        def _genslice(start, end, step):\n            starts = '' if start == 0 else str(start)\n            ends = ':%d' % (end + step) if end + step >= 0 else ':'\n            steps = '' if step == 1 else ':%d' % step\n            return 's[%s%s%s]' % (starts, ends, steps)\n        step = None\n        start = '(Never used)'\n        for i, prev in zip(idxs[1:], idxs[:-1]):\n            if step is not None:\n                if i - prev == step:\n                    continue\n                yield _genslice(start, prev, step)\n                step = None\n                continue\n            if i - prev in [-1, 1]:\n                step = i - prev\n                start = prev\n                continue\n            else:\n                yield ('s[%d]' % prev)\n        if step is None:\n            yield ('s[%d]' % i)\n        else:\n            yield _genslice(start, i, step)\n    test_string = ''.join(map(compat_chr, range(len(example_sig))))\n    cache_res = func(test_string)\n    cache_spec = [ord(c) for c in cache_res]\n    expr_code = ' + '.join(gen_sig_code(cache_spec))\n    signature_id_tuple = '(%s)' % ', '.join((compat_str(len(p)) for p in example_sig.split('.')))\n    code = \"if tuple(len(p) for p in s.split('.')) == %s:\\n    return %s\\n\" % (signature_id_tuple, expr_code)\n    self.to_screen('Extracted signature function:\\n' + code)",
                            "def _parse_sig_js(self, jscode):\n    funcname = self._search_regex(('\\\\b[cs]\\\\s*&&\\\\s*[adf]\\\\.set\\\\([^,]+\\\\s*,\\\\s*encodeURIComponent\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b[a-zA-Z0-9]+\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*encodeURIComponent\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b(?P<sig>[a-zA-Z0-9$]{2})\\\\s*=\\\\s*function\\\\(\\\\s*a\\\\s*\\\\)\\\\s*{\\\\s*a\\\\s*=\\\\s*a\\\\.split\\\\(\\\\s*\"\"\\\\s*\\\\)', '(?P<sig>[a-zA-Z0-9$]+)\\\\s*=\\\\s*function\\\\(\\\\s*a\\\\s*\\\\)\\\\s*{\\\\s*a\\\\s*=\\\\s*a\\\\.split\\\\(\\\\s*\"\"\\\\s*\\\\)', '([\"\\\\\\'])signature\\\\1\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\.sig\\\\|\\\\|(?P<sig>[a-zA-Z0-9$]+)\\\\(', 'yt\\\\.akamaized\\\\.net/\\\\)\\\\s*\\\\|\\\\|\\\\s*.*?\\\\s*[cs]\\\\s*&&\\\\s*[adf]\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?:encodeURIComponent\\\\s*\\\\()?\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b[cs]\\\\s*&&\\\\s*[adf]\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\b[a-zA-Z0-9]+\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*a\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\(', '\\\\bc\\\\s*&&\\\\s*[a-zA-Z0-9]+\\\\.set\\\\([^,]+\\\\s*,\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\(\\\\s*(?P<sig>[a-zA-Z0-9$]+)\\\\('), jscode, 'Initial JS player signature function name', group='sig')\n    jsi = JSInterpreter(jscode)\n    initial_function = jsi.extract_function(funcname)\n    return lambda s: initial_function([s])",
                            "def _parse_sig_swf(self, file_contents):\n    swfi = SWFInterpreter(file_contents)\n    TARGET_CLASSNAME = 'SignatureDecipher'\n    searched_class = swfi.extract_class(TARGET_CLASSNAME)\n    initial_function = swfi.extract_function(searched_class, 'decipher')\n    return lambda s: initial_function([s])",
                            "def _decrypt_signature(self, s, video_id, player_url, age_gate=False):\n    \"\"\"Turn the encrypted s field into a working signature\"\"\"\n    if player_url is None:\n        raise ExtractorError('Cannot decrypt signature without player_url')\n    if player_url.startswith('//'):\n        player_url = 'https:' + player_url\n    elif not re.match('https?://', player_url):\n        player_url = compat_urlparse.urljoin('https://www.youtube.com', player_url)\n    try:\n        player_id = (player_url, self._signature_cache_id(s))\n        if player_id not in self._player_cache:\n            func = self._extract_signature_function(video_id, player_url, s)\n            self._player_cache[player_id] = func\n        func = self._player_cache[player_id]\n        if self._downloader.params.get('youtube_print_sig_code'):\n            self._print_sig_code(func, s)\n        return func(s)\n    except Exception as e:\n        tb = traceback.format_exc()\n        raise ExtractorError('Signature extraction failed: ' + tb, cause=e)",
                            "def _get_subtitles(self, video_id, webpage):\n    try:\n        subs_doc = self._download_xml('https://video.google.com/timedtext?hl=en&type=list&v=%s' % video_id, video_id, note=False)\n    except ExtractorError as err:\n        self._downloader.report_warning('unable to download video subtitles: %s' % error_to_compat_str(err))\n        return {}\n    sub_lang_list = {}\n    for track in subs_doc.findall('track'):\n        lang = track.attrib['lang_code']\n        if lang in sub_lang_list:\n            continue\n        sub_formats = []\n        for ext in self._SUBTITLE_FORMATS:\n            params = compat_urllib_parse_urlencode({'lang': lang, 'v': video_id, 'fmt': ext, 'name': track.attrib['name'].encode('utf-8')})\n            sub_formats.append({'url': 'https://www.youtube.com/api/timedtext?' + params, 'ext': ext})\n        sub_lang_list[lang] = sub_formats\n    if not sub_lang_list:\n        self._downloader.report_warning(\"video doesn't have subtitles\")\n        return {}\n    return sub_lang_list",
                            "def _get_ytplayer_config(self, video_id, webpage):\n    patterns = (';ytplayer\\\\.config\\\\s*=\\\\s*({.+?});ytplayer', ';ytplayer\\\\.config\\\\s*=\\\\s*({.+?});')\n    config = self._search_regex(patterns, webpage, 'ytplayer.config', default=None)\n    if config:\n        return self._parse_json(uppercase_escape(config), video_id, fatal=False)",
                            "def _get_automatic_captions(self, video_id, webpage):\n    \"\"\"We need the webpage for getting the captions url, pass it as an\n       argument to speed up the process.\"\"\"\n    self.to_screen('%s: Looking for automatic captions' % video_id)\n    player_config = self._get_ytplayer_config(video_id, webpage)\n    err_msg = \"Couldn't find automatic captions for %s\" % video_id\n    if not player_config:\n        self._downloader.report_warning(err_msg)\n        return {}\n    try:\n        args = player_config['args']\n        caption_url = args.get('ttsurl')\n        if caption_url:\n            timestamp = args['timestamp']\n            list_params = compat_urllib_parse_urlencode({'type': 'list', 'tlangs': 1, 'asrs': 1})\n            list_url = caption_url + '&' + list_params\n            caption_list = self._download_xml(list_url, video_id)\n            original_lang_node = caption_list.find('track')\n            if original_lang_node is None:\n                self._downloader.report_warning(\"Video doesn't have automatic captions\")\n                return {}\n            original_lang = original_lang_node.attrib['lang_code']\n            caption_kind = original_lang_node.attrib.get('kind', '')\n            sub_lang_list = {}\n            for lang_node in caption_list.findall('target'):\n                sub_lang = lang_node.attrib['lang_code']\n                sub_formats = []\n                for ext in self._SUBTITLE_FORMATS:\n                    params = compat_urllib_parse_urlencode({'lang': original_lang, 'tlang': sub_lang, 'fmt': ext, 'ts': timestamp, 'kind': caption_kind})\n                    sub_formats.append({'url': caption_url + '&' + params, 'ext': ext})\n                sub_lang_list[sub_lang] = sub_formats\n            return sub_lang_list\n\n        def make_captions(sub_url, sub_langs):\n            parsed_sub_url = compat_urllib_parse_urlparse(sub_url)\n            caption_qs = compat_parse_qs(parsed_sub_url.query)\n            captions = {}\n            for sub_lang in sub_langs:\n                sub_formats = []\n                for ext in self._SUBTITLE_FORMATS:\n                    caption_qs.update({'tlang': [sub_lang], 'fmt': [ext]})\n                    sub_url = compat_urlparse.urlunparse(parsed_sub_url._replace(query=compat_urllib_parse_urlencode(caption_qs, True)))\n                    sub_formats.append({'url': sub_url, 'ext': ext})\n                captions[sub_lang] = sub_formats\n            return captions\n        player_response = args.get('player_response')\n        if player_response and isinstance(player_response, compat_str):\n            player_response = self._parse_json(player_response, video_id, fatal=False)\n            if player_response:\n                renderer = player_response['captions']['playerCaptionsTracklistRenderer']\n                base_url = renderer['captionTracks'][0]['baseUrl']\n                sub_lang_list = []\n                for lang in renderer['translationLanguages']:\n                    lang_code = lang.get('languageCode')\n                    if lang_code:\n                        sub_lang_list.append(lang_code)\n                return make_captions(base_url, sub_lang_list)\n        caption_tracks = args['caption_tracks']\n        caption_translation_languages = args['caption_translation_languages']\n        caption_url = compat_parse_qs(caption_tracks.split(',')[0])['u'][0]\n        sub_lang_list = []\n        for lang in caption_translation_languages.split(','):\n            lang_qs = compat_parse_qs(compat_urllib_parse_unquote_plus(lang))\n            sub_lang = lang_qs.get('lc', [None])[0]\n            if sub_lang:\n                sub_lang_list.append(sub_lang)\n        return make_captions(caption_url, sub_lang_list)\n    except (KeyError, IndexError, ExtractorError):\n        self._downloader.report_warning(err_msg)\n        return {}",
                            "def _mark_watched(self, video_id, video_info, player_response):\n    playback_url = url_or_none(try_get(player_response, lambda x: x['playbackTracking']['videostatsPlaybackUrl']['baseUrl']) or try_get(video_info, lambda x: x['videostats_playback_base_url'][0]))\n    if not playback_url:\n        return\n    parsed_playback_url = compat_urlparse.urlparse(playback_url)\n    qs = compat_urlparse.parse_qs(parsed_playback_url.query)\n    CPN_ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'\n    cpn = ''.join((CPN_ALPHABET[random.randint(0, 256) & 63] for _ in range(0, 16)))\n    qs.update({'ver': ['2'], 'cpn': [cpn]})\n    playback_url = compat_urlparse.urlunparse(parsed_playback_url._replace(query=compat_urllib_parse_urlencode(qs, True)))\n    self._download_webpage(playback_url, video_id, 'Marking watched', 'Unable to mark watched', fatal=False)",
                            "@staticmethod\ndef _extract_urls(webpage):\n    entries = [unescapeHTML(mobj.group('url')) for mobj in re.finditer('(?x)\\n            (?:\\n                <iframe[^>]+?src=|\\n                data-video-url=|\\n                <embed[^>]+?src=|\\n                embedSWF\\\\(?:\\\\s*|\\n                <object[^>]+data=|\\n                new\\\\s+SWFObject\\\\(\\n            )\\n            ([\"\\\\\\'])\\n                (?P<url>(?:https?:)?//(?:www\\\\.)?youtube(?:-nocookie)?\\\\.com/\\n                (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\\n            \\\\1', webpage)]\n    entries.extend(list(map(unescapeHTML, re.findall('class=\"lazyYT\" data-youtube-id=\"([^\"]+)\"', webpage))))\n    matches = re.findall('(?x)<div[^>]+\\n            class=(?P<q1>[\\\\\\'\"])[^\\\\\\'\"]*\\\\byvii_single_video_player\\\\b[^\\\\\\'\"]*(?P=q1)[^>]+\\n            data-video_id=(?P<q2>[\\\\\\'\"])([^\\\\\\'\"]+)(?P=q2)', webpage)\n    entries.extend((m[-1] for m in matches))\n    return entries",
                            "@staticmethod\ndef _extract_url(webpage):\n    urls = YoutubeIE._extract_urls(webpage)\n    return urls[0] if urls else None",
                            "@classmethod\ndef extract_id(cls, url):\n    mobj = re.match(cls._VALID_URL, url, re.VERBOSE)\n    if mobj is None:\n        raise ExtractorError('Invalid URL: %s' % url)\n    video_id = mobj.group(2)\n    return video_id",
                            "@staticmethod\ndef _extract_chapters(description, duration):\n    if not description:\n        return None\n    chapter_lines = re.findall('(?:^|<br\\\\s*/>)([^<]*<a[^>]+onclick=[\"\\\\\\']yt\\\\.www\\\\.watch\\\\.player\\\\.seekTo[^>]+>(\\\\d{1,2}:\\\\d{1,2}(?::\\\\d{1,2})?)</a>[^>]*)(?=$|<br\\\\s*/>)', description)\n    if not chapter_lines:\n        return None\n    chapters = []\n    for next_num, (chapter_line, time_point) in enumerate(chapter_lines, start=1):\n        start_time = parse_duration(time_point)\n        if start_time is None:\n            continue\n        if start_time > duration:\n            break\n        end_time = duration if next_num == len(chapter_lines) else parse_duration(chapter_lines[next_num][1])\n        if end_time is None:\n            continue\n        if end_time > duration:\n            end_time = duration\n        if start_time > end_time:\n            break\n        chapter_title = re.sub('<a[^>]+>[^<]+</a>', '', chapter_line).strip(' \\t-')\n        chapter_title = re.sub('\\\\s+', ' ', chapter_title)\n        chapters.append({'start_time': start_time, 'end_time': end_time, 'title': chapter_title})\n    return chapters",
                            "def _real_extract(self, url):\n    url, smuggled_data = unsmuggle_url(url, {})\n    proto = 'http' if self._downloader.params.get('prefer_insecure', False) else 'https'\n    start_time = None\n    end_time = None\n    parsed_url = compat_urllib_parse_urlparse(url)\n    for component in [parsed_url.fragment, parsed_url.query]:\n        query = compat_parse_qs(component)\n        if start_time is None and 't' in query:\n            start_time = parse_duration(query['t'][0])\n        if start_time is None and 'start' in query:\n            start_time = parse_duration(query['start'][0])\n        if end_time is None and 'end' in query:\n            end_time = parse_duration(query['end'][0])\n    mobj = re.search(self._NEXT_URL_RE, url)\n    if mobj:\n        url = proto + '://www.youtube.com/' + compat_urllib_parse_unquote(mobj.group(1)).lstrip('/')\n    video_id = self.extract_id(url)\n    url = proto + '://www.youtube.com/watch?v=%s&gl=US&hl=en&has_verified=1&bpctr=9999999999' % video_id\n    video_webpage, urlh = self._download_webpage_handle(url, video_id)\n    qs = compat_parse_qs(compat_urllib_parse_urlparse(urlh.geturl()).query)\n    video_id = qs.get('v', [None])[0] or video_id\n    mobj = re.search('swfConfig.*?\"(https?:\\\\\\\\/\\\\\\\\/.*?watch.*?-.*?\\\\.swf)\"', video_webpage)\n    if mobj is not None:\n        player_url = re.sub('\\\\\\\\(.)', '\\\\1', mobj.group(1))\n    else:\n        player_url = None\n    dash_mpds = []\n\n    def add_dash_mpd(video_info):\n        dash_mpd = video_info.get('dashmpd')\n        if dash_mpd and dash_mpd[0] not in dash_mpds:\n            dash_mpds.append(dash_mpd[0])\n\n    def add_dash_mpd_pr(pl_response):\n        dash_mpd = url_or_none(try_get(pl_response, lambda x: x['streamingData']['dashManifestUrl'], compat_str))\n        if dash_mpd and dash_mpd not in dash_mpds:\n            dash_mpds.append(dash_mpd)\n    is_live = None\n    view_count = None\n\n    def extract_view_count(v_info):\n        return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))\n\n    def extract_player_response(player_response, video_id):\n        pl_response = str_or_none(player_response)\n        if not pl_response:\n            return\n        pl_response = self._parse_json(pl_response, video_id, fatal=False)\n        if isinstance(pl_response, dict):\n            add_dash_mpd_pr(pl_response)\n            return pl_response\n    player_response = {}\n    video_info = {}\n    embed_webpage = None\n    if re.search('player-age-gate-content\">', video_webpage) is not None:\n        age_gate = True\n        url = proto + '://www.youtube.com/embed/%s' % video_id\n        embed_webpage = self._download_webpage(url, video_id, 'Downloading embed webpage')\n        data = compat_urllib_parse_urlencode({'video_id': video_id, 'eurl': 'https://youtube.googleapis.com/v/' + video_id, 'sts': self._search_regex('\"sts\"\\\\s*:\\\\s*(\\\\d+)', embed_webpage, 'sts', default='')})\n        video_info_url = proto + '://www.youtube.com/get_video_info?' + data\n        try:\n            video_info_webpage = self._download_webpage(video_info_url, video_id, note='Refetching age-gated info webpage', errnote='unable to download video info webpage')\n        except ExtractorError:\n            video_info_webpage = None\n        if video_info_webpage:\n            video_info = compat_parse_qs(video_info_webpage)\n            pl_response = video_info.get('player_response', [None])[0]\n            player_response = extract_player_response(pl_response, video_id)\n            add_dash_mpd(video_info)\n            view_count = extract_view_count(video_info)\n    else:\n        age_gate = False\n        ytplayer_config = self._get_ytplayer_config(video_id, video_webpage)\n        if ytplayer_config:\n            args = ytplayer_config['args']\n            if args.get('url_encoded_fmt_stream_map') or args.get('hlsvp'):\n                video_info = dict(((k, [v]) for k, v in args.items()))\n                add_dash_mpd(video_info)\n            if not video_info and args.get('ypc_vid'):\n                return self.url_result(args['ypc_vid'], YoutubeIE.ie_key(), video_id=args['ypc_vid'])\n            if args.get('livestream') == '1' or args.get('live_playback') == 1:\n                is_live = True\n            if not player_response:\n                player_response = extract_player_response(args.get('player_response'), video_id)\n        if not video_info or self._downloader.params.get('youtube_include_dash_manifest', True):\n            add_dash_mpd_pr(player_response)\n\n    def extract_unavailable_message():\n        messages = []\n        for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n            msg = self._html_search_regex('(?s)<{tag}[^>]+id=[\"\\\\\\']unavailable-{kind}[\"\\\\\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind), video_webpage, 'unavailable %s' % kind, default=None)\n            if msg:\n                messages.append(msg)\n        if messages:\n            return '\\n'.join(messages)\n    if not video_info and (not player_response):\n        unavailable_message = extract_unavailable_message()\n        if not unavailable_message:\n            unavailable_message = 'Unable to extract video data'\n        raise ExtractorError('YouTube said: %s' % unavailable_message, expected=True, video_id=video_id)\n    if not isinstance(video_info, dict):\n        video_info = {}\n    video_details = try_get(player_response, lambda x: x['videoDetails'], dict) or {}\n    video_title = video_info.get('title', [None])[0] or video_details.get('title')\n    if not video_title:\n        self._downloader.report_warning('Unable to extract video title')\n        video_title = '_'\n    description_original = video_description = get_element_by_id('eow-description', video_webpage)\n    if video_description:\n\n        def replace_url(m):\n            redir_url = compat_urlparse.urljoin(url, m.group(1))\n            parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n            if re.search('^(?:www\\\\.)?(?:youtube(?:-nocookie)?\\\\.com|youtu\\\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n                qs = compat_parse_qs(parsed_redir_url.query)\n                q = qs.get('q')\n                if q and q[0]:\n                    return q[0]\n            return redir_url\n        description_original = video_description = re.sub('(?x)\\n                <a\\\\s+\\n                    (?:[a-zA-Z-]+=\"[^\"]*\"\\\\s+)*?\\n                    (?:title|href)=\"([^\"]+)\"\\\\s+\\n                    (?:[a-zA-Z-]+=\"[^\"]*\"\\\\s+)*?\\n                    class=\"[^\"]*\"[^>]*>\\n                [^<]+\\\\.{3}\\\\s*\\n                </a>\\n            ', replace_url, video_description)\n        video_description = clean_html(video_description)\n    else:\n        video_description = self._html_search_meta('description', video_webpage) or video_details.get('shortDescription')\n    if not smuggled_data.get('force_singlefeed', False):\n        if not self._downloader.params.get('noplaylist'):\n            multifeed_metadata_list = try_get(player_response, lambda x: x['multicamera']['playerLegacyMulticameraRenderer']['metadataList'], compat_str) or try_get(video_info, lambda x: x['multifeed_metadata_list'][0], compat_str)\n            if multifeed_metadata_list:\n                entries = []\n                feed_ids = []\n                for feed in multifeed_metadata_list.split(','):\n                    feed_data = compat_parse_qs(compat_urllib_parse_unquote_plus(feed))\n\n                    def feed_entry(name):\n                        return try_get(feed_data, lambda x: x[name][0], compat_str)\n                    feed_id = feed_entry('id')\n                    if not feed_id:\n                        continue\n                    feed_title = feed_entry('title')\n                    title = video_title\n                    if feed_title:\n                        title += ' (%s)' % feed_title\n                    entries.append({'_type': 'url_transparent', 'ie_key': 'Youtube', 'url': smuggle_url('%s://www.youtube.com/watch?v=%s' % (proto, feed_data['id'][0]), {'force_singlefeed': True}), 'title': title})\n                    feed_ids.append(feed_id)\n                self.to_screen('Downloading multifeed video (%s) - add --no-playlist to just download video %s' % (', '.join(feed_ids), video_id))\n                return self.playlist_result(entries, video_id, video_title, video_description)\n        else:\n            self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n    if view_count is None:\n        view_count = extract_view_count(video_info)\n    if view_count is None and video_details:\n        view_count = int_or_none(video_details.get('viewCount'))\n    if is_live is None:\n        is_live = bool_or_none(video_details.get('isLive'))\n    if 'ypc_video_rental_bar_text' in video_info and 'author' not in video_info:\n        raise ExtractorError('\"rental\" videos not supported. See https://github.com/ytdl-org/youtube-dl/issues/359 for more information.', expected=True)\n\n    def _extract_filesize(media_url):\n        return int_or_none(self._search_regex('\\\\bclen[=/](\\\\d+)', media_url, 'filesize', default=None))\n    streaming_formats = try_get(player_response, lambda x: x['streamingData']['formats'], list) or []\n    streaming_formats.extend(try_get(player_response, lambda x: x['streamingData']['adaptiveFormats'], list) or [])\n    if 'conn' in video_info and video_info['conn'][0].startswith('rtmp'):\n        self.report_rtmp_download()\n        formats = [{'format_id': '_rtmp', 'protocol': 'rtmp', 'url': video_info['conn'][0], 'player_url': player_url}]\n    elif not is_live and (streaming_formats or len(video_info.get('url_encoded_fmt_stream_map', [''])[0]) >= 1 or len(video_info.get('adaptive_fmts', [''])[0]) >= 1):\n        encoded_url_map = video_info.get('url_encoded_fmt_stream_map', [''])[0] + ',' + video_info.get('adaptive_fmts', [''])[0]\n        if 'rtmpe%3Dyes' in encoded_url_map:\n            raise ExtractorError('rtmpe downloads are not supported, see https://github.com/ytdl-org/youtube-dl/issues/343 for more information.', expected=True)\n        formats = []\n        formats_spec = {}\n        fmt_list = video_info.get('fmt_list', [''])[0]\n        if fmt_list:\n            for fmt in fmt_list.split(','):\n                spec = fmt.split('/')\n                if len(spec) > 1:\n                    width_height = spec[1].split('x')\n                    if len(width_height) == 2:\n                        formats_spec[spec[0]] = {'resolution': spec[1], 'width': int_or_none(width_height[0]), 'height': int_or_none(width_height[1])}\n        for fmt in streaming_formats:\n            itag = str_or_none(fmt.get('itag'))\n            if not itag:\n                continue\n            quality = fmt.get('quality')\n            quality_label = fmt.get('qualityLabel') or quality\n            formats_spec[itag] = {'asr': int_or_none(fmt.get('audioSampleRate')), 'filesize': int_or_none(fmt.get('contentLength')), 'format_note': quality_label, 'fps': int_or_none(fmt.get('fps')), 'height': int_or_none(fmt.get('height')), 'tbr': float_or_none(fmt.get('averageBitrate') or fmt.get('bitrate'), 1000) if itag != '43' else None, 'width': int_or_none(fmt.get('width'))}\n        for fmt in streaming_formats:\n            if fmt.get('drmFamilies') or fmt.get('drm_families'):\n                continue\n            url = url_or_none(fmt.get('url'))\n            if not url:\n                cipher = fmt.get('cipher') or fmt.get('signatureCipher')\n                if not cipher:\n                    continue\n                url_data = compat_parse_qs(cipher)\n                url = url_or_none(try_get(url_data, lambda x: x['url'][0], compat_str))\n                if not url:\n                    continue\n            else:\n                cipher = None\n                url_data = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n            stream_type = int_or_none(try_get(url_data, lambda x: x['stream_type'][0]))\n            if stream_type == 3:\n                continue\n            format_id = fmt.get('itag') or url_data['itag'][0]\n            if not format_id:\n                continue\n            format_id = compat_str(format_id)\n            if cipher:\n                if 's' in url_data or self._downloader.params.get('youtube_include_dash_manifest', True):\n                    ASSETS_RE = '\"assets\":.+?\"js\":\\\\s*(\"[^\"]+\")'\n                    jsplayer_url_json = self._search_regex(ASSETS_RE, embed_webpage if age_gate else video_webpage, 'JS player URL (1)', default=None)\n                    if not jsplayer_url_json and (not age_gate):\n                        if embed_webpage is None:\n                            embed_url = proto + '://www.youtube.com/embed/%s' % video_id\n                            embed_webpage = self._download_webpage(embed_url, video_id, 'Downloading embed webpage')\n                        jsplayer_url_json = self._search_regex(ASSETS_RE, embed_webpage, 'JS player URL')\n                    player_url = json.loads(jsplayer_url_json)\n                    if player_url is None:\n                        player_url_json = self._search_regex('ytplayer\\\\.config.*?\"url\"\\\\s*:\\\\s*(\"[^\"]+\")', video_webpage, 'age gate player URL')\n                        player_url = json.loads(player_url_json)\n                if 'sig' in url_data:\n                    url += '&signature=' + url_data['sig'][0]\n                elif 's' in url_data:\n                    encrypted_sig = url_data['s'][0]\n                    if self._downloader.params.get('verbose'):\n                        if player_url is None:\n                            player_desc = 'unknown'\n                        else:\n                            player_type, player_version = self._extract_player_info(player_url)\n                            player_desc = '%s player %s' % ('flash' if player_type == 'swf' else 'html5', player_version)\n                        parts_sizes = self._signature_cache_id(encrypted_sig)\n                        self.to_screen('{%s} signature length %s, %s' % (format_id, parts_sizes, player_desc))\n                    signature = self._decrypt_signature(encrypted_sig, video_id, player_url, age_gate)\n                    sp = try_get(url_data, lambda x: x['sp'][0], compat_str) or 'signature'\n                    url += '&%s=%s' % (sp, signature)\n            if 'ratebypass' not in url:\n                url += '&ratebypass=yes'\n            dct = {'format_id': format_id, 'url': url, 'player_url': player_url}\n            if format_id in self._formats:\n                dct.update(self._formats[format_id])\n            if format_id in formats_spec:\n                dct.update(formats_spec[format_id])\n            mobj = re.search('^(?P<width>\\\\d+)[xX](?P<height>\\\\d+)$', url_data.get('size', [''])[0])\n            width, height = (int(mobj.group('width')), int(mobj.group('height'))) if mobj else (None, None)\n            if width is None:\n                width = int_or_none(fmt.get('width'))\n            if height is None:\n                height = int_or_none(fmt.get('height'))\n            filesize = int_or_none(url_data.get('clen', [None])[0]) or _extract_filesize(url)\n            quality = url_data.get('quality', [None])[0] or fmt.get('quality')\n            quality_label = url_data.get('quality_label', [None])[0] or fmt.get('qualityLabel')\n            tbr = float_or_none(url_data.get('bitrate', [None])[0], 1000) or float_or_none(fmt.get('bitrate'), 1000) if format_id != '43' else None\n            fps = int_or_none(url_data.get('fps', [None])[0]) or int_or_none(fmt.get('fps'))\n            more_fields = {'filesize': filesize, 'tbr': tbr, 'width': width, 'height': height, 'fps': fps, 'format_note': quality_label or quality}\n            for key, value in more_fields.items():\n                if value:\n                    dct[key] = value\n            type_ = url_data.get('type', [None])[0] or fmt.get('mimeType')\n            if type_:\n                type_split = type_.split(';')\n                kind_ext = type_split[0].split('/')\n                if len(kind_ext) == 2:\n                    kind, _ = kind_ext\n                    dct['ext'] = mimetype2ext(type_split[0])\n                    if kind in ('audio', 'video'):\n                        codecs = None\n                        for mobj in re.finditer('(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\\\\\']?)(?P<val>.+?)(?P=quote)(?:;|$)', type_):\n                            if mobj.group('key') == 'codecs':\n                                codecs = mobj.group('val')\n                                break\n                        if codecs:\n                            dct.update(parse_codecs(codecs))\n            if dct.get('acodec') == 'none' or dct.get('vcodec') == 'none':\n                dct['downloader_options'] = {'http_chunk_size': 10485760}\n            formats.append(dct)\n    else:\n        manifest_url = url_or_none(try_get(player_response, lambda x: x['streamingData']['hlsManifestUrl'], compat_str)) or url_or_none(try_get(video_info, lambda x: x['hlsvp'][0], compat_str))\n        if manifest_url:\n            formats = []\n            m3u8_formats = self._extract_m3u8_formats(manifest_url, video_id, 'mp4', fatal=False)\n            for a_format in m3u8_formats:\n                itag = self._search_regex('/itag/(\\\\d+)/', a_format['url'], 'itag', default=None)\n                if itag:\n                    a_format['format_id'] = itag\n                    if itag in self._formats:\n                        dct = self._formats[itag].copy()\n                        dct.update(a_format)\n                        a_format = dct\n                a_format['player_url'] = player_url\n                a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = 'True'\n                formats.append(a_format)\n        else:\n            error_message = extract_unavailable_message()\n            if not error_message:\n                error_message = clean_html(try_get(player_response, lambda x: x['playabilityStatus']['reason'], compat_str))\n            if not error_message:\n                error_message = clean_html(try_get(video_info, lambda x: x['reason'][0], compat_str))\n            if error_message:\n                raise ExtractorError(error_message, expected=True)\n            raise ExtractorError('no conn, hlsvp, hlsManifestUrl or url_encoded_fmt_stream_map information found in video info')\n    video_uploader = try_get(video_info, lambda x: x['author'][0], compat_str) or str_or_none(video_details.get('author'))\n    if video_uploader:\n        video_uploader = compat_urllib_parse_unquote_plus(video_uploader)\n    else:\n        self._downloader.report_warning('unable to extract uploader name')\n    video_uploader_id = None\n    video_uploader_url = None\n    mobj = re.search('<link itemprop=\"url\" href=\"(?P<uploader_url>https?://www\\\\.youtube\\\\.com/(?:user|channel)/(?P<uploader_id>[^\"]+))\">', video_webpage)\n    if mobj is not None:\n        video_uploader_id = mobj.group('uploader_id')\n        video_uploader_url = mobj.group('uploader_url')\n    else:\n        self._downloader.report_warning('unable to extract uploader nickname')\n    channel_id = str_or_none(video_details.get('channelId')) or self._html_search_meta('channelId', video_webpage, 'channel id', default=None) or self._search_regex('data-channel-external-id=([\"\\\\\\'])(?P<id>(?:(?!\\\\1).)+)\\\\1', video_webpage, 'channel id', default=None, group='id')\n    channel_url = 'http://www.youtube.com/channel/%s' % channel_id if channel_id else None\n    m_thumb = re.search('<span itemprop=\"thumbnail\".*?href=\"(.*?)\">', video_webpage, re.DOTALL)\n    if m_thumb is not None:\n        video_thumbnail = m_thumb.group(1)\n    elif 'thumbnail_url' not in video_info:\n        self._downloader.report_warning('unable to extract video thumbnail')\n        video_thumbnail = None\n    else:\n        video_thumbnail = compat_urllib_parse_unquote_plus(video_info['thumbnail_url'][0])\n    upload_date = self._html_search_meta('datePublished', video_webpage, 'upload date', default=None)\n    if not upload_date:\n        upload_date = self._search_regex(['(?s)id=\"eow-date.*?>(.*?)</span>', '(?:id=\"watch-uploader-info\".*?>.*?|[\"\\\\\\']simpleText[\"\\\\\\']\\\\s*:\\\\s*[\"\\\\\\'])(?:Published|Uploaded|Streamed live|Started) on (.+?)[<\"\\\\\\']'], video_webpage, 'upload date', default=None)\n    upload_date = unified_strdate(upload_date)\n    video_license = self._html_search_regex('<h4[^>]+class=\"title\"[^>]*>\\\\s*License\\\\s*</h4>\\\\s*<ul[^>]*>\\\\s*<li>(.+?)</li', video_webpage, 'license', default=None)\n    m_music = re.search('(?x)\\n                <h4[^>]+class=\"title\"[^>]*>\\\\s*Music\\\\s*</h4>\\\\s*\\n                <ul[^>]*>\\\\s*\\n                <li>(?P<title>.+?)\\n                by (?P<creator>.+?)\\n                (?:\\n                    \\\\(.+?\\\\)|\\n                    <a[^>]*\\n                        (?:\\n                            \\\\bhref=[\"\\\\\\']/red[^>]*>|             # drop possible\\n                            >\\\\s*Listen ad-free with YouTube Red # YouTube Red ad\\n                        )\\n                    .*?\\n                )?</li\\n            ', video_webpage)\n    if m_music:\n        video_alt_title = remove_quotes(unescapeHTML(m_music.group('title')))\n        video_creator = clean_html(m_music.group('creator'))\n    else:\n        video_alt_title = video_creator = None\n\n    def extract_meta(field):\n        return self._html_search_regex('<h4[^>]+class=\"title\"[^>]*>\\\\s*%s\\\\s*</h4>\\\\s*<ul[^>]*>\\\\s*<li>(.+?)</li>\\\\s*' % field, video_webpage, field, default=None)\n    track = extract_meta('Song')\n    artist = extract_meta('Artist')\n    album = extract_meta('Album')\n    release_date = release_year = None\n    if video_description:\n        mobj = re.search('(?s)Provided to YouTube by [^\\\\n]+\\\\n+(?P<track>[^\u00b7]+)\u00b7(?P<artist>[^\\\\n]+)\\\\n+(?P<album>[^\\\\n]+)(?:.+?\u2117\\\\s*(?P<release_year>\\\\d{4})(?!\\\\d))?(?:.+?Released on\\\\s*:\\\\s*(?P<release_date>\\\\d{4}-\\\\d{2}-\\\\d{2}))?(.+?\\\\nArtist\\\\s*:\\\\s*(?P<clean_artist>[^\\\\n]+))?', video_description)\n        if mobj:\n            if not track:\n                track = mobj.group('track').strip()\n            if not artist:\n                artist = mobj.group('clean_artist') or ', '.join((a.strip() for a in mobj.group('artist').split('\u00b7')))\n            if not album:\n                album = mobj.group('album'.strip())\n            release_year = mobj.group('release_year')\n            release_date = mobj.group('release_date')\n            if release_date:\n                release_date = release_date.replace('-', '')\n                if not release_year:\n                    release_year = int(release_date[:4])\n            if release_year:\n                release_year = int(release_year)\n    m_episode = re.search('<div[^>]+id=\"watch7-headline\"[^>]*>\\\\s*<span[^>]*>.*?>(?P<series>[^<]+)</a></b>\\\\s*S(?P<season>\\\\d+)\\\\s*\u2022\\\\s*E(?P<episode>\\\\d+)</span>', video_webpage)\n    if m_episode:\n        series = unescapeHTML(m_episode.group('series'))\n        season_number = int(m_episode.group('season'))\n        episode_number = int(m_episode.group('episode'))\n    else:\n        series = season_number = episode_number = None\n    m_cat_container = self._search_regex('(?s)<h4[^>]*>\\\\s*Category\\\\s*</h4>\\\\s*<ul[^>]*>(.*?)</ul>', video_webpage, 'categories', default=None)\n    if m_cat_container:\n        category = self._html_search_regex('(?s)<a[^<]+>(.*?)</a>', m_cat_container, 'category', default=None)\n        video_categories = None if category is None else [category]\n    else:\n        video_categories = None\n    video_tags = [unescapeHTML(m.group('content')) for m in re.finditer(self._meta_regex('og:video:tag'), video_webpage)]\n\n    def _extract_count(count_name):\n        return str_to_int(self._search_regex('-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\\\d,]+)</span>' % re.escape(count_name), video_webpage, count_name, default=None))\n    like_count = _extract_count('like')\n    dislike_count = _extract_count('dislike')\n    if view_count is None:\n        view_count = str_to_int(self._search_regex('<[^>]+class=[\"\\\\\\']watch-view-count[^>]+>\\\\s*([\\\\d,\\\\s]+)', video_webpage, 'view count', default=None))\n    average_rating = float_or_none(video_details.get('averageRating')) or try_get(video_info, lambda x: float_or_none(x['avg_rating'][0]))\n    video_subtitles = self.extract_subtitles(video_id, video_webpage)\n    automatic_captions = self.extract_automatic_captions(video_id, video_webpage)\n    video_duration = try_get(video_info, lambda x: int_or_none(x['length_seconds'][0]))\n    if not video_duration:\n        video_duration = int_or_none(video_details.get('lengthSeconds'))\n    if not video_duration:\n        video_duration = parse_duration(self._html_search_meta('duration', video_webpage, 'video duration'))\n    video_annotations = None\n    if self._downloader.params.get('writeannotations', False):\n        xsrf_token = self._search_regex('([\\\\\\'\"])XSRF_TOKEN\\\\1\\\\s*:\\\\s*([\\\\\\'\"])(?P<xsrf_token>[A-Za-z0-9+/=]+)\\\\2', video_webpage, 'xsrf token', group='xsrf_token', fatal=False)\n        invideo_url = try_get(player_response, lambda x: x['annotations'][0]['playerAnnotationsUrlsRenderer']['invideoUrl'], compat_str)\n        if xsrf_token and invideo_url:\n            xsrf_field_name = self._search_regex('([\\\\\\'\"])XSRF_FIELD_NAME\\\\1\\\\s*:\\\\s*([\\\\\\'\"])(?P<xsrf_field_name>\\\\w+)\\\\2', video_webpage, 'xsrf field name', group='xsrf_field_name', default='session_token')\n            video_annotations = self._download_webpage(self._proto_relative_url(invideo_url), video_id, note='Downloading annotations', errnote='Unable to download video annotations', fatal=False, data=urlencode_postdata({xsrf_field_name: xsrf_token}))\n    chapters = self._extract_chapters(description_original, video_duration)\n    if self._downloader.params.get('youtube_include_dash_manifest', True):\n        dash_mpd_fatal = True\n        for mpd_url in dash_mpds:\n            dash_formats = {}\n            try:\n\n                def decrypt_sig(mobj):\n                    s = mobj.group(1)\n                    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n                    return '/signature/%s' % dec_s\n                mpd_url = re.sub('/s/([a-fA-F0-9\\\\.]+)', decrypt_sig, mpd_url)\n                for df in self._extract_mpd_formats(mpd_url, video_id, fatal=dash_mpd_fatal, formats_dict=self._formats):\n                    if not df.get('filesize'):\n                        df['filesize'] = _extract_filesize(df['url'])\n                    if df['format_id'] not in dash_formats:\n                        dash_formats[df['format_id']] = df\n                    dash_mpd_fatal = False\n            except (ExtractorError, KeyError) as e:\n                self.report_warning('Skipping DASH manifest: %r' % e, video_id)\n            if dash_formats:\n                formats = [f for f in formats if f['format_id'] not in dash_formats.keys()]\n                formats.extend(dash_formats.values())\n    stretched_m = re.search('<meta\\\\s+property=\"og:video:tag\".*?content=\"yt:stretch=(?P<w>[0-9]+):(?P<h>[0-9]+)\">', video_webpage)\n    if stretched_m:\n        w = float(stretched_m.group('w'))\n        h = float(stretched_m.group('h'))\n        if w > 0 and h > 0:\n            ratio = w / h\n            for f in formats:\n                if f.get('vcodec') != 'none':\n                    f['stretched_ratio'] = ratio\n    if not formats:\n        if 'reason' in video_info:\n            if 'The uploader has not made this video available in your country.' in video_info['reason']:\n                regions_allowed = self._html_search_meta('regionsAllowed', video_webpage, default=None)\n                countries = regions_allowed.split(',') if regions_allowed else None\n                self.raise_geo_restricted(msg=video_info['reason'][0], countries=countries)\n            reason = video_info['reason'][0]\n            if 'Invalid parameters' in reason:\n                unavailable_message = extract_unavailable_message()\n                if unavailable_message:\n                    reason = unavailable_message\n            raise ExtractorError('YouTube said: %s' % reason, expected=True, video_id=video_id)\n        if video_info.get('license_info') or try_get(player_response, lambda x: x['streamingData']['licenseInfos']):\n            raise ExtractorError('This video is DRM protected.', expected=True)\n    self._sort_formats(formats)\n    self.mark_watched(video_id, video_info, player_response)\n    return {'id': video_id, 'uploader': video_uploader, 'uploader_id': video_uploader_id, 'uploader_url': video_uploader_url, 'channel_id': channel_id, 'channel_url': channel_url, 'upload_date': upload_date, 'license': video_license, 'creator': video_creator or artist, 'title': video_title, 'alt_title': video_alt_title or track, 'thumbnail': video_thumbnail, 'description': video_description, 'categories': video_categories, 'tags': video_tags, 'subtitles': video_subtitles, 'automatic_captions': automatic_captions, 'duration': video_duration, 'age_limit': 18 if age_gate else 0, 'annotations': video_annotations, 'chapters': chapters, 'webpage_url': proto + '://www.youtube.com/watch?v=%s' % video_id, 'view_count': view_count, 'like_count': like_count, 'dislike_count': dislike_count, 'average_rating': average_rating, 'formats': formats, 'is_live': is_live, 'start_time': start_time, 'end_time': end_time, 'series': series, 'season_number': season_number, 'episode_number': episode_number, 'track': track, 'artist': artist, 'album': album, 'release_date': release_date, 'release_year': release_year}",
                            "def gen_sig_code(idxs):\n\n    def _genslice(start, end, step):\n        starts = '' if start == 0 else str(start)\n        ends = ':%d' % (end + step) if end + step >= 0 else ':'\n        steps = '' if step == 1 else ':%d' % step\n        return 's[%s%s%s]' % (starts, ends, steps)\n    step = None\n    start = '(Never used)'\n    for i, prev in zip(idxs[1:], idxs[:-1]):\n        if step is not None:\n            if i - prev == step:\n                continue\n            yield _genslice(start, prev, step)\n            step = None\n            continue\n        if i - prev in [-1, 1]:\n            step = i - prev\n            start = prev\n            continue\n        else:\n            yield ('s[%d]' % prev)\n    if step is None:\n        yield ('s[%d]' % i)\n    else:\n        yield _genslice(start, i, step)",
                            "def add_dash_mpd(video_info):\n    dash_mpd = video_info.get('dashmpd')\n    if dash_mpd and dash_mpd[0] not in dash_mpds:\n        dash_mpds.append(dash_mpd[0])",
                            "def add_dash_mpd_pr(pl_response):\n    dash_mpd = url_or_none(try_get(pl_response, lambda x: x['streamingData']['dashManifestUrl'], compat_str))\n    if dash_mpd and dash_mpd not in dash_mpds:\n        dash_mpds.append(dash_mpd)",
                            "def extract_view_count(v_info):\n    return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))",
                            "def extract_player_response(player_response, video_id):\n    pl_response = str_or_none(player_response)\n    if not pl_response:\n        return\n    pl_response = self._parse_json(pl_response, video_id, fatal=False)\n    if isinstance(pl_response, dict):\n        add_dash_mpd_pr(pl_response)\n        return pl_response",
                            "def extract_unavailable_message():\n    messages = []\n    for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n        msg = self._html_search_regex('(?s)<{tag}[^>]+id=[\"\\\\\\']unavailable-{kind}[\"\\\\\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind), video_webpage, 'unavailable %s' % kind, default=None)\n        if msg:\n            messages.append(msg)\n    if messages:\n        return '\\n'.join(messages)",
                            "def _extract_filesize(media_url):\n    return int_or_none(self._search_regex('\\\\bclen[=/](\\\\d+)', media_url, 'filesize', default=None))",
                            "def extract_meta(field):\n    return self._html_search_regex('<h4[^>]+class=\"title\"[^>]*>\\\\s*%s\\\\s*</h4>\\\\s*<ul[^>]*>\\\\s*<li>(.+?)</li>\\\\s*' % field, video_webpage, field, default=None)",
                            "def _extract_count(count_name):\n    return str_to_int(self._search_regex('-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\\\d,]+)</span>' % re.escape(count_name), video_webpage, count_name, default=None))",
                            "def _genslice(start, end, step):\n    starts = '' if start == 0 else str(start)\n    ends = ':%d' % (end + step) if end + step >= 0 else ':'\n    steps = '' if step == 1 else ':%d' % step\n    return 's[%s%s%s]' % (starts, ends, steps)",
                            "def make_captions(sub_url, sub_langs):\n    parsed_sub_url = compat_urllib_parse_urlparse(sub_url)\n    caption_qs = compat_parse_qs(parsed_sub_url.query)\n    captions = {}\n    for sub_lang in sub_langs:\n        sub_formats = []\n        for ext in self._SUBTITLE_FORMATS:\n            caption_qs.update({'tlang': [sub_lang], 'fmt': [ext]})\n            sub_url = compat_urlparse.urlunparse(parsed_sub_url._replace(query=compat_urllib_parse_urlencode(caption_qs, True)))\n            sub_formats.append({'url': sub_url, 'ext': ext})\n        captions[sub_lang] = sub_formats\n    return captions",
                            "def replace_url(m):\n    redir_url = compat_urlparse.urljoin(url, m.group(1))\n    parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n    if re.search('^(?:www\\\\.)?(?:youtube(?:-nocookie)?\\\\.com|youtu\\\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n        qs = compat_parse_qs(parsed_redir_url.query)\n        q = qs.get('q')\n        if q and q[0]:\n            return q[0]\n    return redir_url",
                            "def decrypt_sig(mobj):\n    s = mobj.group(1)\n    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n    return '/signature/%s' % dec_s",
                            "def feed_entry(name):\n    return try_get(feed_data, lambda x: x[name][0], compat_str)"
                        ],
                        "constructor_variables": [
                            "_player_cache"
                        ],
                        "class_level_variables": [
                            "IE_DESC",
                            "_VALID_URL",
                            "_NEXT_URL_RE",
                            "_PLAYER_INFO_RE",
                            "_formats",
                            "_SUBTITLE_FORMATS",
                            "_GEO_BYPASS",
                            "IE_NAME",
                            "_TESTS"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *args, **kwargs)",
                            "report_video_info_webpage_download(self, video_id)",
                            "report_information_extraction(self, video_id)",
                            "report_unavailable_format(self, video_id, format)",
                            "report_rtmp_download(self)",
                            "_signature_cache_id(self, example_sig)",
                            "_extract_player_info(cls, player_url)",
                            "_extract_signature_function(self, video_id, player_url, example_sig)",
                            "_print_sig_code(self, func, example_sig)",
                            "_parse_sig_js(self, jscode)",
                            "_parse_sig_swf(self, file_contents)",
                            "_decrypt_signature(self, s, video_id, player_url, age_gate=False)",
                            "_get_subtitles(self, video_id, webpage)",
                            "_get_ytplayer_config(self, video_id, webpage)",
                            "_get_automatic_captions(self, video_id, webpage)",
                            "_mark_watched(self, video_id, video_info, player_response)",
                            "_extract_urls(webpage)",
                            "_extract_url(webpage)",
                            "extract_id(cls, url)",
                            "_extract_chapters(description, duration)",
                            "_real_extract(self, url)",
                            "gen_sig_code(idxs)",
                            "add_dash_mpd(video_info)",
                            "add_dash_mpd_pr(pl_response)",
                            "extract_view_count(v_info)",
                            "extract_player_response(player_response, video_id)",
                            "extract_unavailable_message()",
                            "_extract_filesize(media_url)",
                            "extract_meta(field)",
                            "_extract_count(count_name)",
                            "_genslice(start, end, step)",
                            "make_captions(sub_url, sub_langs)",
                            "replace_url(m)",
                            "decrypt_sig(mobj)",
                            "feed_entry(name)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "@staticmethod",
                    "start_line": 1654,
                    "end_line": 1655
                }
            ],
            "inscope_functions": [
                "def _set_language(self):\n    self._set_cookie(\n        '.youtube.com', 'PREF', 'f1=50000000&hl=en',\n        # YouTube sets the expire time to about two months\n        expire_time=time.time() + 2 * 30 * 24 * 3600)",
                "def _ids_to_results(self, ids):\n    return [\n        self.url_result(vid_id, 'Youtube', video_id=vid_id)\n        for vid_id in ids]",
                "def _login(self):\n    \"\"\"\n    Attempt to log in to YouTube.\n    True is returned if successful or skipped.\n    False is returned if login failed.\n\n    If _LOGIN_REQUIRED is set and no authentication was provided, an error is raised.\n    \"\"\"\n    username, password = self._get_login_info()\n    # No authentication to be performed\n    if username is None:\n        if self._LOGIN_REQUIRED and self._downloader.params.get('cookiefile') is None:\n            raise ExtractorError('No login info available, needed for using %s.' % self.IE_NAME, expected=True)\n        return True\n\n    login_page = self._download_webpage(\n        self._LOGIN_URL, None,\n        note='Downloading login page',\n        errnote='unable to fetch login page', fatal=False)\n    if login_page is False:\n        return\n\n    login_form = self._hidden_inputs(login_page)\n\n    def req(url, f_req, note, errnote):\n        data = login_form.copy()\n        data.update({\n            'pstMsg': 1,\n            'checkConnection': 'youtube',\n            'checkedDomains': 'youtube',\n            'hl': 'en',\n            'deviceinfo': '[null,null,null,[],null,\"US\",null,null,[],\"GlifWebSignIn\",null,[null,null,[]]]',\n            'f.req': json.dumps(f_req),\n            'flowName': 'GlifWebSignIn',\n            'flowEntry': 'ServiceLogin',\n            # TODO: reverse actual botguard identifier generation algo\n            'bgRequest': '[\"identifier\",\"\"]',\n        })\n        return self._download_json(\n            url, None, note=note, errnote=errnote,\n            transform_source=lambda s: re.sub(r'^[^[]*', '', s),\n            fatal=False,\n            data=urlencode_postdata(data), headers={\n                'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n                'Google-Accounts-XSRF': 1,\n            })\n\n    def warn(message):\n        self._downloader.report_warning(message)\n\n    lookup_req = [\n        username,\n        None, [], None, 'US', None, None, 2, False, True,\n        [\n            None, None,\n            [2, 1, None, 1,\n             'https://accounts.google.com/ServiceLogin?passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Fnext%3D%252F%26action_handle_signin%3Dtrue%26hl%3Den%26app%3Ddesktop%26feature%3Dsign_in_button&hl=en&service=youtube&uilel=3&requestPath=%2FServiceLogin&Page=PasswordSeparationSignIn',\n             None, [], 4],\n            1, [None, None, []], None, None, None, True\n        ],\n        username,\n    ]\n\n    lookup_results = req(\n        self._LOOKUP_URL, lookup_req,\n        'Looking up account info', 'Unable to look up account info')\n\n    if lookup_results is False:\n        return False\n\n    user_hash = try_get(lookup_results, lambda x: x[0][2], compat_str)\n    if not user_hash:\n        warn('Unable to extract user hash')\n        return False\n\n    challenge_req = [\n        user_hash,\n        None, 1, None, [1, None, None, None, [password, None, True]],\n        [\n            None, None, [2, 1, None, 1, 'https://accounts.google.com/ServiceLogin?passive=true&continue=https%3A%2F%2Fwww.youtube.com%2Fsignin%3Fnext%3D%252F%26action_handle_signin%3Dtrue%26hl%3Den%26app%3Ddesktop%26feature%3Dsign_in_button&hl=en&service=youtube&uilel=3&requestPath=%2FServiceLogin&Page=PasswordSeparationSignIn', None, [], 4],\n            1, [None, None, []], None, None, None, True\n        ]]\n\n    challenge_results = req(\n        self._CHALLENGE_URL, challenge_req,\n        'Logging in', 'Unable to log in')\n\n    if challenge_results is False:\n        return\n\n    login_res = try_get(challenge_results, lambda x: x[0][5], list)\n    if login_res:\n        login_msg = try_get(login_res, lambda x: x[5], compat_str)\n        warn(\n            'Unable to login: %s' % 'Invalid password'\n            if login_msg == 'INCORRECT_ANSWER_ENTERED' else login_msg)\n        return False\n\n    res = try_get(challenge_results, lambda x: x[0][-1], list)\n    if not res:\n        warn('Unable to extract result entry')\n        return False\n\n    login_challenge = try_get(res, lambda x: x[0][0], list)\n    if login_challenge:\n        challenge_str = try_get(login_challenge, lambda x: x[2], compat_str)\n        if challenge_str == 'TWO_STEP_VERIFICATION':\n            # SEND_SUCCESS - TFA code has been successfully sent to phone\n            # QUOTA_EXCEEDED - reached the limit of TFA codes\n            status = try_get(login_challenge, lambda x: x[5], compat_str)\n            if status == 'QUOTA_EXCEEDED':\n                warn('Exceeded the limit of TFA codes, try later')\n                return False\n\n            tl = try_get(challenge_results, lambda x: x[1][2], compat_str)\n            if not tl:\n                warn('Unable to extract TL')\n                return False\n\n            tfa_code = self._get_tfa_info('2-step verification code')\n\n            if not tfa_code:\n                warn(\n                    'Two-factor authentication required. Provide it either interactively or with --twofactor <code>'\n                    '(Note that only TOTP (Google Authenticator App) codes work at this time.)')\n                return False\n\n            tfa_code = remove_start(tfa_code, 'G-')\n\n            tfa_req = [\n                user_hash, None, 2, None,\n                [\n                    9, None, None, None, None, None, None, None,\n                    [None, tfa_code, True, 2]\n                ]]\n\n            tfa_results = req(\n                self._TFA_URL.format(tl), tfa_req,\n                'Submitting TFA code', 'Unable to submit TFA code')\n\n            if tfa_results is False:\n                return False\n\n            tfa_res = try_get(tfa_results, lambda x: x[0][5], list)\n            if tfa_res:\n                tfa_msg = try_get(tfa_res, lambda x: x[5], compat_str)\n                warn(\n                    'Unable to finish TFA: %s' % 'Invalid TFA code'\n                    if tfa_msg == 'INCORRECT_ANSWER_ENTERED' else tfa_msg)\n                return False\n\n            check_cookie_url = try_get(\n                tfa_results, lambda x: x[0][-1][2], compat_str)\n        else:\n            CHALLENGES = {\n                'LOGIN_CHALLENGE': \"This device isn't recognized. For your security, Google wants to make sure it's really you.\",\n                'USERNAME_RECOVERY': 'Please provide additional information to aid in the recovery process.',\n                'REAUTH': \"There is something unusual about your activity. For your security, Google wants to make sure it's really you.\",\n            }\n            challenge = CHALLENGES.get(\n                challenge_str,\n                '%s returned error %s.' % (self.IE_NAME, challenge_str))\n            warn('%s\\nGo to https://accounts.google.com/, login and solve a challenge.' % challenge)\n            return False\n    else:\n        check_cookie_url = try_get(res, lambda x: x[2], compat_str)\n\n    if not check_cookie_url:\n        warn('Unable to extract CheckCookie URL')\n        return False\n\n    check_cookie_results = self._download_webpage(\n        check_cookie_url, None, 'Checking cookie', fatal=False)\n\n    if check_cookie_results is False:\n        return False\n\n    if 'https://myaccount.google.com/' not in check_cookie_results:\n        warn('Unable to log in')\n        return False\n\n    return True",
                "def _download_webpage_handle(self, *args, **kwargs):\n    query = kwargs.get('query', {}).copy()\n    query['disable_polymer'] = 'true'\n    kwargs['query'] = query\n    return super(YoutubeBaseInfoExtractor, self)._download_webpage_handle(\n        *args, **compat_kwargs(kwargs))",
                "def _real_initialize(self):\n    if self._downloader is None:\n        return\n    self._set_language()\n    if not self._login():\n        return",
                "def _entries(self, page, playlist_id):\n    more_widget_html = content_html = page\n    for page_num in itertools.count(1):\n        for entry in self._process_page(content_html):\n            yield entry\n\n        mobj = re.search(r'data-uix-load-more-href=\"/?(?P<more>[^\"]+)\"', more_widget_html)\n        if not mobj:\n            break\n\n        count = 0\n        retries = 3\n        while count <= retries:\n            try:\n                # Downloading page may result in intermittent 5xx HTTP error\n                # that is usually worked around with a retry\n                more = self._download_json(\n                    'https://youtube.com/%s' % mobj.group('more'), playlist_id,\n                    'Downloading page #%s%s'\n                    % (page_num, ' (retry #%d)' % count if count else ''),\n                    transform_source=uppercase_escape)\n                break\n            except ExtractorError as e:\n                if isinstance(e.cause, compat_HTTPError) and e.cause.code in (500, 503):\n                    count += 1\n                    if count <= retries:\n                        continue\n                raise\n\n        content_html = more['content_html']\n        if not content_html.strip():\n            # Some webpages show a \"Load more\" button but they don't\n            # have more videos\n            break\n        more_widget_html = more['load_more_widget_html']",
                "def _process_page(self, content):\n    for video_id, video_title in self.extract_videos_from_page(content):\n        yield self.url_result(video_id, 'Youtube', video_id, video_title)",
                "def extract_videos_from_page_impl(self, video_re, page, ids_in_page, titles_in_page):\n    for mobj in re.finditer(video_re, page):\n        # The link with index 0 is not the first video of the playlist (not sure if still actual)\n        if 'index' in mobj.groupdict() and mobj.group('id') == '0':\n            continue\n        video_id = mobj.group('id')\n        video_title = unescapeHTML(\n            mobj.group('title')) if 'title' in mobj.groupdict() else None\n        if video_title:\n            video_title = video_title.strip()\n        if video_title == '\u25ba Play all':\n            video_title = None\n        try:\n            idx = ids_in_page.index(video_id)\n            if video_title and not titles_in_page[idx]:\n                titles_in_page[idx] = video_title\n        except ValueError:\n            ids_in_page.append(video_id)\n            titles_in_page.append(video_title)",
                "def extract_videos_from_page(self, page):\n    ids_in_page = []\n    titles_in_page = []\n    self.extract_videos_from_page_impl(\n        self._VIDEO_RE, page, ids_in_page, titles_in_page)\n    return zip(ids_in_page, titles_in_page)",
                "def _process_page(self, content):\n    for playlist_id in orderedSet(re.findall(\n            r'<h3[^>]+class=\"[^\"]*yt-lockup-title[^\"]*\"[^>]*><a[^>]+href=\"/?playlist\\?list=([0-9A-Za-z-_]{10,})\"',\n            content)):\n        yield self.url_result(\n            'https://www.youtube.com/playlist?list=%s' % playlist_id, 'YoutubePlaylist')",
                "def _real_extract(self, url):\n    playlist_id = self._match_id(url)\n    webpage = self._download_webpage(url, playlist_id)\n    title = self._og_search_title(webpage, fatal=False)\n    return self.playlist_result(self._entries(webpage, playlist_id), playlist_id, title)",
                "def __init__(self, *args, **kwargs):\n    super(YoutubeIE, self).__init__(*args, **kwargs)\n    self._player_cache = {}",
                "def report_video_info_webpage_download(self, video_id):\n    \"\"\"Report attempt to download video info webpage.\"\"\"\n    self.to_screen('%s: Downloading video info webpage' % video_id)",
                "def report_information_extraction(self, video_id):\n    \"\"\"Report attempt to extract video information.\"\"\"\n    self.to_screen('%s: Extracting video information' % video_id)",
                "def report_unavailable_format(self, video_id, format):\n    \"\"\"Report extracted video URL.\"\"\"\n    self.to_screen('%s: Format %s not available' % (video_id, format))",
                "def report_rtmp_download(self):\n    \"\"\"Indicate the download will use the RTMP protocol.\"\"\"\n    self.to_screen('RTMP download detected')",
                "def _signature_cache_id(self, example_sig):\n    \"\"\" Return a string representation of a signature \"\"\"\n    return '.'.join(compat_str(len(part)) for part in example_sig.split('.'))",
                "@classmethod\ndef _extract_player_info(cls, player_url):\n    for player_re in cls._PLAYER_INFO_RE:\n        id_m = re.search(player_re, player_url)\n        if id_m:\n            break\n    else:\n        raise ExtractorError('Cannot identify player %r' % player_url)\n    return id_m.group('ext'), id_m.group('id')",
                "def _extract_signature_function(self, video_id, player_url, example_sig):\n    player_type, player_id = self._extract_player_info(player_url)\n\n    # Read from filesystem cache\n    func_id = '%s_%s_%s' % (\n        player_type, player_id, self._signature_cache_id(example_sig))\n    assert os.path.basename(func_id) == func_id\n\n    cache_spec = self._downloader.cache.load('youtube-sigfuncs', func_id)\n    if cache_spec is not None:\n        return lambda s: ''.join(s[i] for i in cache_spec)\n\n    download_note = (\n        'Downloading player %s' % player_url\n        if self._downloader.params.get('verbose') else\n        'Downloading %s player %s' % (player_type, player_id)\n    )\n    if player_type == 'js':\n        code = self._download_webpage(\n            player_url, video_id,\n            note=download_note,\n            errnote='Download of %s failed' % player_url)\n        res = self._parse_sig_js(code)\n    elif player_type == 'swf':\n        urlh = self._request_webpage(\n            player_url, video_id,\n            note=download_note,\n            errnote='Download of %s failed' % player_url)\n        code = urlh.read()\n        res = self._parse_sig_swf(code)\n    else:\n        assert False, 'Invalid player type %r' % player_type\n\n    test_string = ''.join(map(compat_chr, range(len(example_sig))))\n    cache_res = res(test_string)\n    cache_spec = [ord(c) for c in cache_res]\n\n    self._downloader.cache.store('youtube-sigfuncs', func_id, cache_spec)\n    return res",
                "def _print_sig_code(self, func, example_sig):\n    def gen_sig_code(idxs):\n        def _genslice(start, end, step):\n            starts = '' if start == 0 else str(start)\n            ends = (':%d' % (end + step)) if end + step >= 0 else ':'\n            steps = '' if step == 1 else (':%d' % step)\n            return 's[%s%s%s]' % (starts, ends, steps)\n\n        step = None\n        # Quelch pyflakes warnings - start will be set when step is set\n        start = '(Never used)'\n        for i, prev in zip(idxs[1:], idxs[:-1]):\n            if step is not None:\n                if i - prev == step:\n                    continue\n                yield _genslice(start, prev, step)\n                step = None\n                continue\n            if i - prev in [-1, 1]:\n                step = i - prev\n                start = prev\n                continue\n            else:\n                yield 's[%d]' % prev\n        if step is None:\n            yield 's[%d]' % i\n        else:\n            yield _genslice(start, i, step)\n\n    test_string = ''.join(map(compat_chr, range(len(example_sig))))\n    cache_res = func(test_string)\n    cache_spec = [ord(c) for c in cache_res]\n    expr_code = ' + '.join(gen_sig_code(cache_spec))\n    signature_id_tuple = '(%s)' % (\n        ', '.join(compat_str(len(p)) for p in example_sig.split('.')))\n    code = ('if tuple(len(p) for p in s.split(\\'.\\')) == %s:\\n'\n            '    return %s\\n') % (signature_id_tuple, expr_code)\n    self.to_screen('Extracted signature function:\\n' + code)",
                "def _parse_sig_js(self, jscode):\n    funcname = self._search_regex(\n        (r'\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\b(?P<sig>[a-zA-Z0-9$]{2})\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)',\n         r'(?P<sig>[a-zA-Z0-9$]+)\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*\"\"\\s*\\)',\n         # Obsolete patterns\n         r'([\"\\'])signature\\1\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\.sig\\|\\|(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'yt\\.akamaized\\.net/\\)\\s*\\|\\|\\s*.*?\\s*[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\bc\\s*&&\\s*a\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\(',\n         r'\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*(?P<sig>[a-zA-Z0-9$]+)\\('),\n        jscode, 'Initial JS player signature function name', group='sig')\n\n    jsi = JSInterpreter(jscode)\n    initial_function = jsi.extract_function(funcname)\n    return lambda s: initial_function([s])",
                "def _parse_sig_swf(self, file_contents):\n    swfi = SWFInterpreter(file_contents)\n    TARGET_CLASSNAME = 'SignatureDecipher'\n    searched_class = swfi.extract_class(TARGET_CLASSNAME)\n    initial_function = swfi.extract_function(searched_class, 'decipher')\n    return lambda s: initial_function([s])",
                "def _decrypt_signature(self, s, video_id, player_url, age_gate=False):\n    \"\"\"Turn the encrypted s field into a working signature\"\"\"\n\n    if player_url is None:\n        raise ExtractorError('Cannot decrypt signature without player_url')\n\n    if player_url.startswith('//'):\n        player_url = 'https:' + player_url\n    elif not re.match(r'https?://', player_url):\n        player_url = compat_urlparse.urljoin(\n            'https://www.youtube.com', player_url)\n    try:\n        player_id = (player_url, self._signature_cache_id(s))\n        if player_id not in self._player_cache:\n            func = self._extract_signature_function(\n                video_id, player_url, s\n            )\n            self._player_cache[player_id] = func\n        func = self._player_cache[player_id]\n        if self._downloader.params.get('youtube_print_sig_code'):\n            self._print_sig_code(func, s)\n        return func(s)\n    except Exception as e:\n        tb = traceback.format_exc()\n        raise ExtractorError(\n            'Signature extraction failed: ' + tb, cause=e)",
                "def _get_subtitles(self, video_id, webpage):\n    try:\n        subs_doc = self._download_xml(\n            'https://video.google.com/timedtext?hl=en&type=list&v=%s' % video_id,\n            video_id, note=False)\n    except ExtractorError as err:\n        self._downloader.report_warning('unable to download video subtitles: %s' % error_to_compat_str(err))\n        return {}\n\n    sub_lang_list = {}\n    for track in subs_doc.findall('track'):\n        lang = track.attrib['lang_code']\n        if lang in sub_lang_list:\n            continue\n        sub_formats = []\n        for ext in self._SUBTITLE_FORMATS:\n            params = compat_urllib_parse_urlencode({\n                'lang': lang,\n                'v': video_id,\n                'fmt': ext,\n                'name': track.attrib['name'].encode('utf-8'),\n            })\n            sub_formats.append({\n                'url': 'https://www.youtube.com/api/timedtext?' + params,\n                'ext': ext,\n            })\n        sub_lang_list[lang] = sub_formats\n    if not sub_lang_list:\n        self._downloader.report_warning('video doesn\\'t have subtitles')\n        return {}\n    return sub_lang_list",
                "def _get_ytplayer_config(self, video_id, webpage):\n    patterns = (\n        # User data may contain arbitrary character sequences that may affect\n        # JSON extraction with regex, e.g. when '};' is contained the second\n        # regex won't capture the whole JSON. Yet working around by trying more\n        # concrete regex first keeping in mind proper quoted string handling\n        # to be implemented in future that will replace this workaround (see\n        # https://github.com/ytdl-org/youtube-dl/issues/7468,\n        # https://github.com/ytdl-org/youtube-dl/pull/7599)\n        r';ytplayer\\.config\\s*=\\s*({.+?});ytplayer',\n        r';ytplayer\\.config\\s*=\\s*({.+?});',\n    )\n    config = self._search_regex(\n        patterns, webpage, 'ytplayer.config', default=None)\n    if config:\n        return self._parse_json(\n            uppercase_escape(config), video_id, fatal=False)",
                "def _get_automatic_captions(self, video_id, webpage):\n    \"\"\"We need the webpage for getting the captions url, pass it as an\n       argument to speed up the process.\"\"\"\n    self.to_screen('%s: Looking for automatic captions' % video_id)\n    player_config = self._get_ytplayer_config(video_id, webpage)\n    err_msg = 'Couldn\\'t find automatic captions for %s' % video_id\n    if not player_config:\n        self._downloader.report_warning(err_msg)\n        return {}\n    try:\n        args = player_config['args']\n        caption_url = args.get('ttsurl')\n        if caption_url:\n            timestamp = args['timestamp']\n            # We get the available subtitles\n            list_params = compat_urllib_parse_urlencode({\n                'type': 'list',\n                'tlangs': 1,\n                'asrs': 1,\n            })\n            list_url = caption_url + '&' + list_params\n            caption_list = self._download_xml(list_url, video_id)\n            original_lang_node = caption_list.find('track')\n            if original_lang_node is None:\n                self._downloader.report_warning('Video doesn\\'t have automatic captions')\n                return {}\n            original_lang = original_lang_node.attrib['lang_code']\n            caption_kind = original_lang_node.attrib.get('kind', '')\n\n            sub_lang_list = {}\n            for lang_node in caption_list.findall('target'):\n                sub_lang = lang_node.attrib['lang_code']\n                sub_formats = []\n                for ext in self._SUBTITLE_FORMATS:\n                    params = compat_urllib_parse_urlencode({\n                        'lang': original_lang,\n                        'tlang': sub_lang,\n                        'fmt': ext,\n                        'ts': timestamp,\n                        'kind': caption_kind,\n                    })\n                    sub_formats.append({\n                        'url': caption_url + '&' + params,\n                        'ext': ext,\n                    })\n                sub_lang_list[sub_lang] = sub_formats\n            return sub_lang_list\n\n        def make_captions(sub_url, sub_langs):\n            parsed_sub_url = compat_urllib_parse_urlparse(sub_url)\n            caption_qs = compat_parse_qs(parsed_sub_url.query)\n            captions = {}\n            for sub_lang in sub_langs:\n                sub_formats = []\n                for ext in self._SUBTITLE_FORMATS:\n                    caption_qs.update({\n                        'tlang': [sub_lang],\n                        'fmt': [ext],\n                    })\n                    sub_url = compat_urlparse.urlunparse(parsed_sub_url._replace(\n                        query=compat_urllib_parse_urlencode(caption_qs, True)))\n                    sub_formats.append({\n                        'url': sub_url,\n                        'ext': ext,\n                    })\n                captions[sub_lang] = sub_formats\n            return captions\n\n        # New captions format as of 22.06.2017\n        player_response = args.get('player_response')\n        if player_response and isinstance(player_response, compat_str):\n            player_response = self._parse_json(\n                player_response, video_id, fatal=False)\n            if player_response:\n                renderer = player_response['captions']['playerCaptionsTracklistRenderer']\n                base_url = renderer['captionTracks'][0]['baseUrl']\n                sub_lang_list = []\n                for lang in renderer['translationLanguages']:\n                    lang_code = lang.get('languageCode')\n                    if lang_code:\n                        sub_lang_list.append(lang_code)\n                return make_captions(base_url, sub_lang_list)\n\n        # Some videos don't provide ttsurl but rather caption_tracks and\n        # caption_translation_languages (e.g. 20LmZk1hakA)\n        # Does not used anymore as of 22.06.2017\n        caption_tracks = args['caption_tracks']\n        caption_translation_languages = args['caption_translation_languages']\n        caption_url = compat_parse_qs(caption_tracks.split(',')[0])['u'][0]\n        sub_lang_list = []\n        for lang in caption_translation_languages.split(','):\n            lang_qs = compat_parse_qs(compat_urllib_parse_unquote_plus(lang))\n            sub_lang = lang_qs.get('lc', [None])[0]\n            if sub_lang:\n                sub_lang_list.append(sub_lang)\n        return make_captions(caption_url, sub_lang_list)\n    # An extractor error can be raise by the download process if there are\n    # no automatic captions but there are subtitles\n    except (KeyError, IndexError, ExtractorError):\n        self._downloader.report_warning(err_msg)\n        return {}",
                "def _mark_watched(self, video_id, video_info, player_response):\n    playback_url = url_or_none(try_get(\n        player_response,\n        lambda x: x['playbackTracking']['videostatsPlaybackUrl']['baseUrl']) or try_get(\n        video_info, lambda x: x['videostats_playback_base_url'][0]))\n    if not playback_url:\n        return\n    parsed_playback_url = compat_urlparse.urlparse(playback_url)\n    qs = compat_urlparse.parse_qs(parsed_playback_url.query)\n\n    # cpn generation algorithm is reverse engineered from base.js.\n    # In fact it works even with dummy cpn.\n    CPN_ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'\n    cpn = ''.join((CPN_ALPHABET[random.randint(0, 256) & 63] for _ in range(0, 16)))\n\n    qs.update({\n        'ver': ['2'],\n        'cpn': [cpn],\n    })\n    playback_url = compat_urlparse.urlunparse(\n        parsed_playback_url._replace(query=compat_urllib_parse_urlencode(qs, True)))\n\n    self._download_webpage(\n        playback_url, video_id, 'Marking watched',\n        'Unable to mark watched', fatal=False)",
                "@staticmethod\ndef _extract_urls(webpage):\n    # Embedded YouTube player\n    entries = [\n        unescapeHTML(mobj.group('url'))\n        for mobj in re.finditer(r'''(?x)\n        (?:\n            <iframe[^>]+?src=|\n            data-video-url=|\n            <embed[^>]+?src=|\n            embedSWF\\(?:\\s*|\n            <object[^>]+data=|\n            new\\s+SWFObject\\(\n        )\n        ([\"\\'])\n            (?P<url>(?:https?:)?//(?:www\\.)?youtube(?:-nocookie)?\\.com/\n            (?:embed|v|p)/[0-9A-Za-z_-]{11}.*?)\n        \\1''', webpage)]\n\n    # lazyYT YouTube embed\n    entries.extend(list(map(\n        unescapeHTML,\n        re.findall(r'class=\"lazyYT\" data-youtube-id=\"([^\"]+)\"', webpage))))\n\n    # Wordpress \"YouTube Video Importer\" plugin\n    matches = re.findall(r'''(?x)<div[^>]+\n        class=(?P<q1>[\\'\"])[^\\'\"]*\\byvii_single_video_player\\b[^\\'\"]*(?P=q1)[^>]+\n        data-video_id=(?P<q2>[\\'\"])([^\\'\"]+)(?P=q2)''', webpage)\n    entries.extend(m[-1] for m in matches)\n\n    return entries",
                "@staticmethod\ndef _extract_url(webpage):\n    urls = YoutubeIE._extract_urls(webpage)\n    return urls[0] if urls else None",
                "@classmethod\ndef extract_id(cls, url):\n    mobj = re.match(cls._VALID_URL, url, re.VERBOSE)\n    if mobj is None:\n        raise ExtractorError('Invalid URL: %s' % url)\n    video_id = mobj.group(2)\n    return video_id",
                "@staticmethod\ndef _extract_chapters(description, duration):\n    if not description:\n        return None\n    chapter_lines = re.findall(\n        r'(?:^|<br\\s*/>)([^<]*<a[^>]+onclick=[\"\\']yt\\.www\\.watch\\.player\\.seekTo[^>]+>(\\d{1,2}:\\d{1,2}(?::\\d{1,2})?)</a>[^>]*)(?=$|<br\\s*/>)',\n        description)\n    if not chapter_lines:\n        return None\n    chapters = []\n    for next_num, (chapter_line, time_point) in enumerate(\n            chapter_lines, start=1):\n        start_time = parse_duration(time_point)\n        if start_time is None:\n            continue\n        if start_time > duration:\n            break\n        end_time = (duration if next_num == len(chapter_lines)\n                    else parse_duration(chapter_lines[next_num][1]))\n        if end_time is None:\n            continue\n        if end_time > duration:\n            end_time = duration\n        if start_time > end_time:\n            break\n        chapter_title = re.sub(\n            r'<a[^>]+>[^<]+</a>', '', chapter_line).strip(' \\t-')\n        chapter_title = re.sub(r'\\s+', ' ', chapter_title)\n        chapters.append({\n            'start_time': start_time,\n            'end_time': end_time,\n            'title': chapter_title,\n        })\n    return chapters",
                "def _real_extract(self, url):\n    url, smuggled_data = unsmuggle_url(url, {})\n\n    proto = (\n        'http' if self._downloader.params.get('prefer_insecure', False)\n        else 'https')\n\n    start_time = None\n    end_time = None\n    parsed_url = compat_urllib_parse_urlparse(url)\n    for component in [parsed_url.fragment, parsed_url.query]:\n        query = compat_parse_qs(component)\n        if start_time is None and 't' in query:\n            start_time = parse_duration(query['t'][0])\n        if start_time is None and 'start' in query:\n            start_time = parse_duration(query['start'][0])\n        if end_time is None and 'end' in query:\n            end_time = parse_duration(query['end'][0])\n\n    # Extract original video URL from URL with redirection, like age verification, using next_url parameter\n    mobj = re.search(self._NEXT_URL_RE, url)\n    if mobj:\n        url = proto + '://www.youtube.com/' + compat_urllib_parse_unquote(mobj.group(1)).lstrip('/')\n    video_id = self.extract_id(url)\n\n    # Get video webpage\n    url = proto + '://www.youtube.com/watch?v=%s&gl=US&hl=en&has_verified=1&bpctr=9999999999' % video_id\n    video_webpage, urlh = self._download_webpage_handle(url, video_id)\n\n    qs = compat_parse_qs(compat_urllib_parse_urlparse(urlh.geturl()).query)\n    video_id = qs.get('v', [None])[0] or video_id\n\n    # Attempt to extract SWF player URL\n    mobj = re.search(r'swfConfig.*?\"(https?:\\\\/\\\\/.*?watch.*?-.*?\\.swf)\"', video_webpage)\n    if mobj is not None:\n        player_url = re.sub(r'\\\\(.)', r'\\1', mobj.group(1))\n    else:\n        player_url = None\n\n    dash_mpds = []\n\n    def add_dash_mpd(video_info):\n        dash_mpd = video_info.get('dashmpd')\n        if dash_mpd and dash_mpd[0] not in dash_mpds:\n            dash_mpds.append(dash_mpd[0])\n\n    def add_dash_mpd_pr(pl_response):\n        dash_mpd = url_or_none(try_get(\n            pl_response, lambda x: x['streamingData']['dashManifestUrl'],\n            compat_str))\n        if dash_mpd and dash_mpd not in dash_mpds:\n            dash_mpds.append(dash_mpd)\n\n    is_live = None\n    view_count = None\n\n    def extract_view_count(v_info):\n        return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))\n\n    def extract_player_response(player_response, video_id):\n        pl_response = str_or_none(player_response)\n        if not pl_response:\n            return\n        pl_response = self._parse_json(pl_response, video_id, fatal=False)\n        if isinstance(pl_response, dict):\n            add_dash_mpd_pr(pl_response)\n            return pl_response\n\n    player_response = {}\n\n    # Get video info\n    video_info = {}\n    embed_webpage = None\n    if re.search(r'player-age-gate-content\">', video_webpage) is not None:\n        age_gate = True\n        # We simulate the access to the video from www.youtube.com/v/{video_id}\n        # this can be viewed without login into Youtube\n        url = proto + '://www.youtube.com/embed/%s' % video_id\n        embed_webpage = self._download_webpage(url, video_id, 'Downloading embed webpage')\n        data = compat_urllib_parse_urlencode({\n            'video_id': video_id,\n            'eurl': 'https://youtube.googleapis.com/v/' + video_id,\n            'sts': self._search_regex(\n                r'\"sts\"\\s*:\\s*(\\d+)', embed_webpage, 'sts', default=''),\n        })\n        video_info_url = proto + '://www.youtube.com/get_video_info?' + data\n        try:\n            video_info_webpage = self._download_webpage(\n                video_info_url, video_id,\n                note='Refetching age-gated info webpage',\n                errnote='unable to download video info webpage')\n        except ExtractorError:\n            video_info_webpage = None\n        if video_info_webpage:\n            video_info = compat_parse_qs(video_info_webpage)\n            pl_response = video_info.get('player_response', [None])[0]\n            player_response = extract_player_response(pl_response, video_id)\n            add_dash_mpd(video_info)\n            view_count = extract_view_count(video_info)\n    else:\n        age_gate = False\n        # Try looking directly into the video webpage\n        ytplayer_config = self._get_ytplayer_config(video_id, video_webpage)\n        if ytplayer_config:\n            args = ytplayer_config['args']\n            if args.get('url_encoded_fmt_stream_map') or args.get('hlsvp'):\n                # Convert to the same format returned by compat_parse_qs\n                video_info = dict((k, [v]) for k, v in args.items())\n                add_dash_mpd(video_info)\n            # Rental video is not rented but preview is available (e.g.\n            # https://www.youtube.com/watch?v=yYr8q0y5Jfg,\n            # https://github.com/ytdl-org/youtube-dl/issues/10532)\n            if not video_info and args.get('ypc_vid'):\n                return self.url_result(\n                    args['ypc_vid'], YoutubeIE.ie_key(), video_id=args['ypc_vid'])\n            if args.get('livestream') == '1' or args.get('live_playback') == 1:\n                is_live = True\n            if not player_response:\n                player_response = extract_player_response(args.get('player_response'), video_id)\n        if not video_info or self._downloader.params.get('youtube_include_dash_manifest', True):\n            add_dash_mpd_pr(player_response)\n\n    def extract_unavailable_message():\n        messages = []\n        for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n            msg = self._html_search_regex(\n                r'(?s)<{tag}[^>]+id=[\"\\']unavailable-{kind}[\"\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind),\n                video_webpage, 'unavailable %s' % kind, default=None)\n            if msg:\n                messages.append(msg)\n        if messages:\n            return '\\n'.join(messages)\n\n    if not video_info and not player_response:\n        unavailable_message = extract_unavailable_message()\n        if not unavailable_message:\n            unavailable_message = 'Unable to extract video data'\n        raise ExtractorError(\n            'YouTube said: %s' % unavailable_message, expected=True, video_id=video_id)\n\n    if not isinstance(video_info, dict):\n        video_info = {}\n\n    video_details = try_get(\n        player_response, lambda x: x['videoDetails'], dict) or {}\n\n    video_title = video_info.get('title', [None])[0] or video_details.get('title')\n    if not video_title:\n        self._downloader.report_warning('Unable to extract video title')\n        video_title = '_'\n\n    description_original = video_description = get_element_by_id(\"eow-description\", video_webpage)\n    if video_description:\n\n        def replace_url(m):\n            redir_url = compat_urlparse.urljoin(url, m.group(1))\n            parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n            if re.search(r'^(?:www\\.)?(?:youtube(?:-nocookie)?\\.com|youtu\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n                qs = compat_parse_qs(parsed_redir_url.query)\n                q = qs.get('q')\n                if q and q[0]:\n                    return q[0]\n            return redir_url\n\n        description_original = video_description = re.sub(r'''(?x)\n            <a\\s+\n                (?:[a-zA-Z-]+=\"[^\"]*\"\\s+)*?\n                (?:title|href)=\"([^\"]+)\"\\s+\n                (?:[a-zA-Z-]+=\"[^\"]*\"\\s+)*?\n                class=\"[^\"]*\"[^>]*>\n            [^<]+\\.{3}\\s*\n            </a>\n        ''', replace_url, video_description)\n        video_description = clean_html(video_description)\n    else:\n        video_description = self._html_search_meta('description', video_webpage) or video_details.get('shortDescription')\n\n    if not smuggled_data.get('force_singlefeed', False):\n        if not self._downloader.params.get('noplaylist'):\n            multifeed_metadata_list = try_get(\n                player_response,\n                lambda x: x['multicamera']['playerLegacyMulticameraRenderer']['metadataList'],\n                compat_str) or try_get(\n                video_info, lambda x: x['multifeed_metadata_list'][0], compat_str)\n            if multifeed_metadata_list:\n                entries = []\n                feed_ids = []\n                for feed in multifeed_metadata_list.split(','):\n                    # Unquote should take place before split on comma (,) since textual\n                    # fields may contain comma as well (see\n                    # https://github.com/ytdl-org/youtube-dl/issues/8536)\n                    feed_data = compat_parse_qs(compat_urllib_parse_unquote_plus(feed))\n\n                    def feed_entry(name):\n                        return try_get(feed_data, lambda x: x[name][0], compat_str)\n\n                    feed_id = feed_entry('id')\n                    if not feed_id:\n                        continue\n                    feed_title = feed_entry('title')\n                    title = video_title\n                    if feed_title:\n                        title += ' (%s)' % feed_title\n                    entries.append({\n                        '_type': 'url_transparent',\n                        'ie_key': 'Youtube',\n                        'url': smuggle_url(\n                            '%s://www.youtube.com/watch?v=%s' % (proto, feed_data['id'][0]),\n                            {'force_singlefeed': True}),\n                        'title': title,\n                    })\n                    feed_ids.append(feed_id)\n                self.to_screen(\n                    'Downloading multifeed video (%s) - add --no-playlist to just download video %s'\n                    % (', '.join(feed_ids), video_id))\n                return self.playlist_result(entries, video_id, video_title, video_description)\n        else:\n            self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n\n    if view_count is None:\n        view_count = extract_view_count(video_info)\n    if view_count is None and video_details:\n        view_count = int_or_none(video_details.get('viewCount'))\n\n    if is_live is None:\n        is_live = bool_or_none(video_details.get('isLive'))\n\n    # Check for \"rental\" videos\n    if 'ypc_video_rental_bar_text' in video_info and 'author' not in video_info:\n        raise ExtractorError('\"rental\" videos not supported. See https://github.com/ytdl-org/youtube-dl/issues/359 for more information.', expected=True)\n\n    def _extract_filesize(media_url):\n        return int_or_none(self._search_regex(\n            r'\\bclen[=/](\\d+)', media_url, 'filesize', default=None))\n\n    streaming_formats = try_get(player_response, lambda x: x['streamingData']['formats'], list) or []\n    streaming_formats.extend(try_get(player_response, lambda x: x['streamingData']['adaptiveFormats'], list) or [])\n\n    if 'conn' in video_info and video_info['conn'][0].startswith('rtmp'):\n        self.report_rtmp_download()\n        formats = [{\n            'format_id': '_rtmp',\n            'protocol': 'rtmp',\n            'url': video_info['conn'][0],\n            'player_url': player_url,\n        }]\n    elif not is_live and (streaming_formats or len(video_info.get('url_encoded_fmt_stream_map', [''])[0]) >= 1 or len(video_info.get('adaptive_fmts', [''])[0]) >= 1):\n        encoded_url_map = video_info.get('url_encoded_fmt_stream_map', [''])[0] + ',' + video_info.get('adaptive_fmts', [''])[0]\n        if 'rtmpe%3Dyes' in encoded_url_map:\n            raise ExtractorError('rtmpe downloads are not supported, see https://github.com/ytdl-org/youtube-dl/issues/343 for more information.', expected=True)\n        formats = []\n        formats_spec = {}\n        fmt_list = video_info.get('fmt_list', [''])[0]\n        if fmt_list:\n            for fmt in fmt_list.split(','):\n                spec = fmt.split('/')\n                if len(spec) > 1:\n                    width_height = spec[1].split('x')\n                    if len(width_height) == 2:\n                        formats_spec[spec[0]] = {\n                            'resolution': spec[1],\n                            'width': int_or_none(width_height[0]),\n                            'height': int_or_none(width_height[1]),\n                        }\n        for fmt in streaming_formats:\n            itag = str_or_none(fmt.get('itag'))\n            if not itag:\n                continue\n            quality = fmt.get('quality')\n            quality_label = fmt.get('qualityLabel') or quality\n            formats_spec[itag] = {\n                'asr': int_or_none(fmt.get('audioSampleRate')),\n                'filesize': int_or_none(fmt.get('contentLength')),\n                'format_note': quality_label,\n                'fps': int_or_none(fmt.get('fps')),\n                'height': int_or_none(fmt.get('height')),\n                # bitrate for itag 43 is always 2147483647\n                'tbr': float_or_none(fmt.get('averageBitrate') or fmt.get('bitrate'), 1000) if itag != '43' else None,\n                'width': int_or_none(fmt.get('width')),\n            }\n\n        for fmt in streaming_formats:\n            if fmt.get('drmFamilies') or fmt.get('drm_families'):\n                continue\n            url = url_or_none(fmt.get('url'))\n\n            if not url:\n                cipher = fmt.get('cipher') or fmt.get('signatureCipher')\n                if not cipher:\n                    continue\n                url_data = compat_parse_qs(cipher)\n                url = url_or_none(try_get(url_data, lambda x: x['url'][0], compat_str))\n                if not url:\n                    continue\n            else:\n                cipher = None\n                url_data = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n\n            stream_type = int_or_none(try_get(url_data, lambda x: x['stream_type'][0]))\n            # Unsupported FORMAT_STREAM_TYPE_OTF\n            if stream_type == 3:\n                continue\n\n            format_id = fmt.get('itag') or url_data['itag'][0]\n            if not format_id:\n                continue\n            format_id = compat_str(format_id)\n\n            if cipher:\n                if 's' in url_data or self._downloader.params.get('youtube_include_dash_manifest', True):\n                    ASSETS_RE = r'\"assets\":.+?\"js\":\\s*(\"[^\"]+\")'\n                    jsplayer_url_json = self._search_regex(\n                        ASSETS_RE,\n                        embed_webpage if age_gate else video_webpage,\n                        'JS player URL (1)', default=None)\n                    if not jsplayer_url_json and not age_gate:\n                        # We need the embed website after all\n                        if embed_webpage is None:\n                            embed_url = proto + '://www.youtube.com/embed/%s' % video_id\n                            embed_webpage = self._download_webpage(\n                                embed_url, video_id, 'Downloading embed webpage')\n                        jsplayer_url_json = self._search_regex(\n                            ASSETS_RE, embed_webpage, 'JS player URL')\n\n                    player_url = json.loads(jsplayer_url_json)\n                    if player_url is None:\n                        player_url_json = self._search_regex(\n                            r'ytplayer\\.config.*?\"url\"\\s*:\\s*(\"[^\"]+\")',\n                            video_webpage, 'age gate player URL')\n                        player_url = json.loads(player_url_json)\n\n                if 'sig' in url_data:\n                    url += '&signature=' + url_data['sig'][0]\n                elif 's' in url_data:\n                    encrypted_sig = url_data['s'][0]\n\n                    if self._downloader.params.get('verbose'):\n                        if player_url is None:\n                            player_desc = 'unknown'\n                        else:\n                            player_type, player_version = self._extract_player_info(player_url)\n                            player_desc = '%s player %s' % ('flash' if player_type == 'swf' else 'html5', player_version)\n                        parts_sizes = self._signature_cache_id(encrypted_sig)\n                        self.to_screen('{%s} signature length %s, %s' %\n                                       (format_id, parts_sizes, player_desc))\n\n                    signature = self._decrypt_signature(\n                        encrypted_sig, video_id, player_url, age_gate)\n                    sp = try_get(url_data, lambda x: x['sp'][0], compat_str) or 'signature'\n                    url += '&%s=%s' % (sp, signature)\n            if 'ratebypass' not in url:\n                url += '&ratebypass=yes'\n\n            dct = {\n                'format_id': format_id,\n                'url': url,\n                'player_url': player_url,\n            }\n            if format_id in self._formats:\n                dct.update(self._formats[format_id])\n            if format_id in formats_spec:\n                dct.update(formats_spec[format_id])\n\n            # Some itags are not included in DASH manifest thus corresponding formats will\n            # lack metadata (see https://github.com/ytdl-org/youtube-dl/pull/5993).\n            # Trying to extract metadata from url_encoded_fmt_stream_map entry.\n            mobj = re.search(r'^(?P<width>\\d+)[xX](?P<height>\\d+)$', url_data.get('size', [''])[0])\n            width, height = (int(mobj.group('width')), int(mobj.group('height'))) if mobj else (None, None)\n\n            if width is None:\n                width = int_or_none(fmt.get('width'))\n            if height is None:\n                height = int_or_none(fmt.get('height'))\n\n            filesize = int_or_none(url_data.get(\n                'clen', [None])[0]) or _extract_filesize(url)\n\n            quality = url_data.get('quality', [None])[0] or fmt.get('quality')\n            quality_label = url_data.get('quality_label', [None])[0] or fmt.get('qualityLabel')\n\n            tbr = (float_or_none(url_data.get('bitrate', [None])[0], 1000)\n                   or float_or_none(fmt.get('bitrate'), 1000)) if format_id != '43' else None\n            fps = int_or_none(url_data.get('fps', [None])[0]) or int_or_none(fmt.get('fps'))\n\n            more_fields = {\n                'filesize': filesize,\n                'tbr': tbr,\n                'width': width,\n                'height': height,\n                'fps': fps,\n                'format_note': quality_label or quality,\n            }\n            for key, value in more_fields.items():\n                if value:\n                    dct[key] = value\n            type_ = url_data.get('type', [None])[0] or fmt.get('mimeType')\n            if type_:\n                type_split = type_.split(';')\n                kind_ext = type_split[0].split('/')\n                if len(kind_ext) == 2:\n                    kind, _ = kind_ext\n                    dct['ext'] = mimetype2ext(type_split[0])\n                    if kind in ('audio', 'video'):\n                        codecs = None\n                        for mobj in re.finditer(\n                                r'(?P<key>[a-zA-Z_-]+)=(?P<quote>[\"\\']?)(?P<val>.+?)(?P=quote)(?:;|$)', type_):\n                            if mobj.group('key') == 'codecs':\n                                codecs = mobj.group('val')\n                                break\n                        if codecs:\n                            dct.update(parse_codecs(codecs))\n            if dct.get('acodec') == 'none' or dct.get('vcodec') == 'none':\n                dct['downloader_options'] = {\n                    # Youtube throttles chunks >~10M\n                    'http_chunk_size': 10485760,\n                }\n            formats.append(dct)\n    else:\n        manifest_url = (\n            url_or_none(try_get(\n                player_response,\n                lambda x: x['streamingData']['hlsManifestUrl'],\n                compat_str))\n            or url_or_none(try_get(\n                video_info, lambda x: x['hlsvp'][0], compat_str)))\n        if manifest_url:\n            formats = []\n            m3u8_formats = self._extract_m3u8_formats(\n                manifest_url, video_id, 'mp4', fatal=False)\n            for a_format in m3u8_formats:\n                itag = self._search_regex(\n                    r'/itag/(\\d+)/', a_format['url'], 'itag', default=None)\n                if itag:\n                    a_format['format_id'] = itag\n                    if itag in self._formats:\n                        dct = self._formats[itag].copy()\n                        dct.update(a_format)\n                        a_format = dct\n                a_format['player_url'] = player_url\n                # Accept-Encoding header causes failures in live streams on Youtube and Youtube Gaming\n                a_format.setdefault('http_headers', {})['Youtubedl-no-compression'] = 'True'\n                formats.append(a_format)\n        else:\n            error_message = extract_unavailable_message()\n            if not error_message:\n                error_message = clean_html(try_get(\n                    player_response, lambda x: x['playabilityStatus']['reason'],\n                    compat_str))\n            if not error_message:\n                error_message = clean_html(\n                    try_get(video_info, lambda x: x['reason'][0], compat_str))\n            if error_message:\n                raise ExtractorError(error_message, expected=True)\n            raise ExtractorError('no conn, hlsvp, hlsManifestUrl or url_encoded_fmt_stream_map information found in video info')\n\n    # uploader\n    video_uploader = try_get(\n        video_info, lambda x: x['author'][0],\n        compat_str) or str_or_none(video_details.get('author'))\n    if video_uploader:\n        video_uploader = compat_urllib_parse_unquote_plus(video_uploader)\n    else:\n        self._downloader.report_warning('unable to extract uploader name')\n\n    # uploader_id\n    video_uploader_id = None\n    video_uploader_url = None\n    mobj = re.search(\n        r'<link itemprop=\"url\" href=\"(?P<uploader_url>https?://www\\.youtube\\.com/(?:user|channel)/(?P<uploader_id>[^\"]+))\">',\n        video_webpage)\n    if mobj is not None:\n        video_uploader_id = mobj.group('uploader_id')\n        video_uploader_url = mobj.group('uploader_url')\n    else:\n        self._downloader.report_warning('unable to extract uploader nickname')\n\n    channel_id = (\n        str_or_none(video_details.get('channelId'))\n        or self._html_search_meta(\n            'channelId', video_webpage, 'channel id', default=None)\n        or self._search_regex(\n            r'data-channel-external-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            video_webpage, 'channel id', default=None, group='id'))\n    channel_url = 'http://www.youtube.com/channel/%s' % channel_id if channel_id else None\n\n    # thumbnail image\n    # We try first to get a high quality image:\n    m_thumb = re.search(r'<span itemprop=\"thumbnail\".*?href=\"(.*?)\">',\n                        video_webpage, re.DOTALL)\n    if m_thumb is not None:\n        video_thumbnail = m_thumb.group(1)\n    elif 'thumbnail_url' not in video_info:\n        self._downloader.report_warning('unable to extract video thumbnail')\n        video_thumbnail = None\n    else:   # don't panic if we can't find it\n        video_thumbnail = compat_urllib_parse_unquote_plus(video_info['thumbnail_url'][0])\n\n    # upload date\n    upload_date = self._html_search_meta(\n        'datePublished', video_webpage, 'upload date', default=None)\n    if not upload_date:\n        upload_date = self._search_regex(\n            [r'(?s)id=\"eow-date.*?>(.*?)</span>',\n             r'(?:id=\"watch-uploader-info\".*?>.*?|[\"\\']simpleText[\"\\']\\s*:\\s*[\"\\'])(?:Published|Uploaded|Streamed live|Started) on (.+?)[<\"\\']'],\n            video_webpage, 'upload date', default=None)\n    upload_date = unified_strdate(upload_date)\n\n    video_license = self._html_search_regex(\n        r'<h4[^>]+class=\"title\"[^>]*>\\s*License\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li',\n        video_webpage, 'license', default=None)\n\n    m_music = re.search(\n        r'''(?x)\n            <h4[^>]+class=\"title\"[^>]*>\\s*Music\\s*</h4>\\s*\n            <ul[^>]*>\\s*\n            <li>(?P<title>.+?)\n            by (?P<creator>.+?)\n            (?:\n                \\(.+?\\)|\n                <a[^>]*\n                    (?:\n                        \\bhref=[\"\\']/red[^>]*>|             # drop possible\n                        >\\s*Listen ad-free with YouTube Red # YouTube Red ad\n                    )\n                .*?\n            )?</li\n        ''',\n        video_webpage)\n    if m_music:\n        video_alt_title = remove_quotes(unescapeHTML(m_music.group('title')))\n        video_creator = clean_html(m_music.group('creator'))\n    else:\n        video_alt_title = video_creator = None\n\n    def extract_meta(field):\n        return self._html_search_regex(\n            r'<h4[^>]+class=\"title\"[^>]*>\\s*%s\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li>\\s*' % field,\n            video_webpage, field, default=None)\n\n    track = extract_meta('Song')\n    artist = extract_meta('Artist')\n    album = extract_meta('Album')\n\n    # Youtube Music Auto-generated description\n    release_date = release_year = None\n    if video_description:\n        mobj = re.search(r'(?s)Provided to YouTube by [^\\n]+\\n+(?P<track>[^\u00b7]+)\u00b7(?P<artist>[^\\n]+)\\n+(?P<album>[^\\n]+)(?:.+?\u2117\\s*(?P<release_year>\\d{4})(?!\\d))?(?:.+?Released on\\s*:\\s*(?P<release_date>\\d{4}-\\d{2}-\\d{2}))?(.+?\\nArtist\\s*:\\s*(?P<clean_artist>[^\\n]+))?', video_description)\n        if mobj:\n            if not track:\n                track = mobj.group('track').strip()\n            if not artist:\n                artist = mobj.group('clean_artist') or ', '.join(a.strip() for a in mobj.group('artist').split('\u00b7'))\n            if not album:\n                album = mobj.group('album'.strip())\n            release_year = mobj.group('release_year')\n            release_date = mobj.group('release_date')\n            if release_date:\n                release_date = release_date.replace('-', '')\n                if not release_year:\n                    release_year = int(release_date[:4])\n            if release_year:\n                release_year = int(release_year)\n\n    m_episode = re.search(\n        r'<div[^>]+id=\"watch7-headline\"[^>]*>\\s*<span[^>]*>.*?>(?P<series>[^<]+)</a></b>\\s*S(?P<season>\\d+)\\s*\u2022\\s*E(?P<episode>\\d+)</span>',\n        video_webpage)\n    if m_episode:\n        series = unescapeHTML(m_episode.group('series'))\n        season_number = int(m_episode.group('season'))\n        episode_number = int(m_episode.group('episode'))\n    else:\n        series = season_number = episode_number = None\n\n    m_cat_container = self._search_regex(\n        r'(?s)<h4[^>]*>\\s*Category\\s*</h4>\\s*<ul[^>]*>(.*?)</ul>',\n        video_webpage, 'categories', default=None)\n    if m_cat_container:\n        category = self._html_search_regex(\n            r'(?s)<a[^<]+>(.*?)</a>', m_cat_container, 'category',\n            default=None)\n        video_categories = None if category is None else [category]\n    else:\n        video_categories = None\n\n    video_tags = [\n        unescapeHTML(m.group('content'))\n        for m in re.finditer(self._meta_regex('og:video:tag'), video_webpage)]\n\n    def _extract_count(count_name):\n        return str_to_int(self._search_regex(\n            r'-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\d,]+)</span>'\n            % re.escape(count_name),\n            video_webpage, count_name, default=None))\n\n    like_count = _extract_count('like')\n    dislike_count = _extract_count('dislike')\n\n    if view_count is None:\n        view_count = str_to_int(self._search_regex(\n            r'<[^>]+class=[\"\\']watch-view-count[^>]+>\\s*([\\d,\\s]+)', video_webpage,\n            'view count', default=None))\n\n    average_rating = (\n        float_or_none(video_details.get('averageRating'))\n        or try_get(video_info, lambda x: float_or_none(x['avg_rating'][0])))\n\n    # subtitles\n    video_subtitles = self.extract_subtitles(video_id, video_webpage)\n    automatic_captions = self.extract_automatic_captions(video_id, video_webpage)\n\n    video_duration = try_get(\n        video_info, lambda x: int_or_none(x['length_seconds'][0]))\n    if not video_duration:\n        video_duration = int_or_none(video_details.get('lengthSeconds'))\n    if not video_duration:\n        video_duration = parse_duration(self._html_search_meta(\n            'duration', video_webpage, 'video duration'))\n\n    # annotations\n    video_annotations = None\n    if self._downloader.params.get('writeannotations', False):\n        xsrf_token = self._search_regex(\n            r'([\\'\"])XSRF_TOKEN\\1\\s*:\\s*([\\'\"])(?P<xsrf_token>[A-Za-z0-9+/=]+)\\2',\n            video_webpage, 'xsrf token', group='xsrf_token', fatal=False)\n        invideo_url = try_get(\n            player_response, lambda x: x['annotations'][0]['playerAnnotationsUrlsRenderer']['invideoUrl'], compat_str)\n        if xsrf_token and invideo_url:\n            xsrf_field_name = self._search_regex(\n                r'([\\'\"])XSRF_FIELD_NAME\\1\\s*:\\s*([\\'\"])(?P<xsrf_field_name>\\w+)\\2',\n                video_webpage, 'xsrf field name',\n                group='xsrf_field_name', default='session_token')\n            video_annotations = self._download_webpage(\n                self._proto_relative_url(invideo_url),\n                video_id, note='Downloading annotations',\n                errnote='Unable to download video annotations', fatal=False,\n                data=urlencode_postdata({xsrf_field_name: xsrf_token}))\n\n    chapters = self._extract_chapters(description_original, video_duration)\n\n    # Look for the DASH manifest\n    if self._downloader.params.get('youtube_include_dash_manifest', True):\n        dash_mpd_fatal = True\n        for mpd_url in dash_mpds:\n            dash_formats = {}\n            try:\n                def decrypt_sig(mobj):\n                    s = mobj.group(1)\n                    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n                    return '/signature/%s' % dec_s\n\n                mpd_url = re.sub(r'/s/([a-fA-F0-9\\.]+)', decrypt_sig, mpd_url)\n\n                for df in self._extract_mpd_formats(\n                        mpd_url, video_id, fatal=dash_mpd_fatal,\n                        formats_dict=self._formats):\n                    if not df.get('filesize'):\n                        df['filesize'] = _extract_filesize(df['url'])\n                    # Do not overwrite DASH format found in some previous DASH manifest\n                    if df['format_id'] not in dash_formats:\n                        dash_formats[df['format_id']] = df\n                    # Additional DASH manifests may end up in HTTP Error 403 therefore\n                    # allow them to fail without bug report message if we already have\n                    # some DASH manifest succeeded. This is temporary workaround to reduce\n                    # burst of bug reports until we figure out the reason and whether it\n                    # can be fixed at all.\n                    dash_mpd_fatal = False\n            except (ExtractorError, KeyError) as e:\n                self.report_warning(\n                    'Skipping DASH manifest: %r' % e, video_id)\n            if dash_formats:\n                # Remove the formats we found through non-DASH, they\n                # contain less info and it can be wrong, because we use\n                # fixed values (for example the resolution). See\n                # https://github.com/ytdl-org/youtube-dl/issues/5774 for an\n                # example.\n                formats = [f for f in formats if f['format_id'] not in dash_formats.keys()]\n                formats.extend(dash_formats.values())\n\n    # Check for malformed aspect ratio\n    stretched_m = re.search(\n        r'<meta\\s+property=\"og:video:tag\".*?content=\"yt:stretch=(?P<w>[0-9]+):(?P<h>[0-9]+)\">',\n        video_webpage)\n    if stretched_m:\n        w = float(stretched_m.group('w'))\n        h = float(stretched_m.group('h'))\n        # yt:stretch may hold invalid ratio data (e.g. for Q39EVAstoRM ratio is 17:0).\n        # We will only process correct ratios.\n        if w > 0 and h > 0:\n            ratio = w / h\n            for f in formats:\n                if f.get('vcodec') != 'none':\n                    f['stretched_ratio'] = ratio\n\n    if not formats:\n        if 'reason' in video_info:\n            if 'The uploader has not made this video available in your country.' in video_info['reason']:\n                regions_allowed = self._html_search_meta(\n                    'regionsAllowed', video_webpage, default=None)\n                countries = regions_allowed.split(',') if regions_allowed else None\n                self.raise_geo_restricted(\n                    msg=video_info['reason'][0], countries=countries)\n            reason = video_info['reason'][0]\n            if 'Invalid parameters' in reason:\n                unavailable_message = extract_unavailable_message()\n                if unavailable_message:\n                    reason = unavailable_message\n            raise ExtractorError(\n                'YouTube said: %s' % reason,\n                expected=True, video_id=video_id)\n        if video_info.get('license_info') or try_get(player_response, lambda x: x['streamingData']['licenseInfos']):\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n    self._sort_formats(formats)\n\n    self.mark_watched(video_id, video_info, player_response)\n\n    return {\n        'id': video_id,\n        'uploader': video_uploader,\n        'uploader_id': video_uploader_id,\n        'uploader_url': video_uploader_url,\n        'channel_id': channel_id,\n        'channel_url': channel_url,\n        'upload_date': upload_date,\n        'license': video_license,\n        'creator': video_creator or artist,\n        'title': video_title,\n        'alt_title': video_alt_title or track,\n        'thumbnail': video_thumbnail,\n        'description': video_description,\n        'categories': video_categories,\n        'tags': video_tags,\n        'subtitles': video_subtitles,\n        'automatic_captions': automatic_captions,\n        'duration': video_duration,\n        'age_limit': 18 if age_gate else 0,\n        'annotations': video_annotations,\n        'chapters': chapters,\n        'webpage_url': proto + '://www.youtube.com/watch?v=%s' % video_id,\n        'view_count': view_count,\n        'like_count': like_count,\n        'dislike_count': dislike_count,\n        'average_rating': average_rating,\n        'formats': formats,\n        'is_live': is_live,\n        'start_time': start_time,\n        'end_time': end_time,\n        'series': series,\n        'season_number': season_number,\n        'episode_number': episode_number,\n        'track': track,\n        'artist': artist,\n        'album': album,\n        'release_date': release_date,\n        'release_year': release_year,\n    }",
                "def _real_initialize(self):\n    self._login()",
                "def extract_videos_from_page(self, page):\n    ids_in_page = []\n    titles_in_page = []\n\n    for item in re.findall(\n            r'(<[^>]*\\bdata-video-id\\s*=\\s*[\"\\'][0-9A-Za-z_-]{11}[^>]+>)', page):\n        attrs = extract_attributes(item)\n        video_id = attrs['data-video-id']\n        video_title = unescapeHTML(attrs.get('data-title'))\n        if video_title:\n            video_title = video_title.strip()\n        ids_in_page.append(video_id)\n        titles_in_page.append(video_title)\n\n    # Fallback with old _VIDEO_RE\n    self.extract_videos_from_page_impl(\n        self._VIDEO_RE, page, ids_in_page, titles_in_page)\n\n    # Relaxed fallbacks\n    self.extract_videos_from_page_impl(\n        r'href=\"\\s*/watch\\?v\\s*=\\s*(?P<id>[0-9A-Za-z_-]{11})', page,\n        ids_in_page, titles_in_page)\n    self.extract_videos_from_page_impl(\n        r'data-video-ids\\s*=\\s*[\"\\'](?P<id>[0-9A-Za-z_-]{11})', page,\n        ids_in_page, titles_in_page)\n\n    return zip(ids_in_page, titles_in_page)",
                "def _extract_mix(self, playlist_id):\n    # The mixes are generated from a single video\n    # the id of the playlist is just 'RD' + video_id\n    ids = []\n    last_id = playlist_id[-11:]\n    for n in itertools.count(1):\n        url = 'https://youtube.com/watch?v=%s&list=%s' % (last_id, playlist_id)\n        webpage = self._download_webpage(\n            url, playlist_id, 'Downloading page {0} of Youtube mix'.format(n))\n        new_ids = orderedSet(re.findall(\n            r'''(?xs)data-video-username=\".*?\".*?\n                       href=\"/watch\\?v=([0-9A-Za-z_-]{11})&amp;[^\"]*?list=%s''' % re.escape(playlist_id),\n            webpage))\n        # Fetch new pages until all the videos are repeated, it seems that\n        # there are always 51 unique videos.\n        new_ids = [_id for _id in new_ids if _id not in ids]\n        if not new_ids:\n            break\n        ids.extend(new_ids)\n        last_id = ids[-1]\n\n    url_results = self._ids_to_results(ids)\n\n    search_title = lambda class_name: get_element_by_attribute('class', class_name, webpage)\n    title_span = (\n        search_title('playlist-title')\n        or search_title('title long-title')\n        or search_title('title'))\n    title = clean_html(title_span)\n\n    return self.playlist_result(url_results, playlist_id, title)",
                "def _extract_playlist(self, playlist_id):\n    url = self._TEMPLATE_URL % playlist_id\n    page = self._download_webpage(url, playlist_id)\n\n    # the yt-alert-message now has tabindex attribute (see https://github.com/ytdl-org/youtube-dl/issues/11604)\n    for match in re.findall(r'<div class=\"yt-alert-message\"[^>]*>([^<]+)</div>', page):\n        match = match.strip()\n        # Check if the playlist exists or is private\n        mobj = re.match(r'[^<]*(?:The|This) playlist (?P<reason>does not exist|is private)[^<]*', match)\n        if mobj:\n            reason = mobj.group('reason')\n            message = 'This playlist %s' % reason\n            if 'private' in reason:\n                message += ', use --username or --netrc to access it'\n            message += '.'\n            raise ExtractorError(message, expected=True)\n        elif re.match(r'[^<]*Invalid parameters[^<]*', match):\n            raise ExtractorError(\n                'Invalid parameters. Maybe URL is incorrect.',\n                expected=True)\n        elif re.match(r'[^<]*Choose your language[^<]*', match):\n            continue\n        else:\n            self.report_warning('Youtube gives an alert message: ' + match)\n\n    playlist_title = self._html_search_regex(\n        r'(?s)<h1 class=\"pl-header-title[^\"]*\"[^>]*>\\s*(.*?)\\s*</h1>',\n        page, 'title', default=None)\n\n    _UPLOADER_BASE = r'class=[\"\\']pl-header-details[^>]+>\\s*<li>\\s*<a[^>]+\\bhref='\n    uploader = self._html_search_regex(\n        r'%s[\"\\']/(?:user|channel)/[^>]+>([^<]+)' % _UPLOADER_BASE,\n        page, 'uploader', default=None)\n    mobj = re.search(\n        r'%s([\"\\'])(?P<path>/(?:user|channel)/(?P<uploader_id>.+?))\\1' % _UPLOADER_BASE,\n        page)\n    if mobj:\n        uploader_id = mobj.group('uploader_id')\n        uploader_url = compat_urlparse.urljoin(url, mobj.group('path'))\n    else:\n        uploader_id = uploader_url = None\n\n    has_videos = True\n\n    if not playlist_title:\n        try:\n            # Some playlist URLs don't actually serve a playlist (e.g.\n            # https://www.youtube.com/watch?v=FqZTN594JQw&list=PLMYEtVRpaqY00V9W81Cwmzp6N6vZqfUKD4)\n            next(self._entries(page, playlist_id))\n        except StopIteration:\n            has_videos = False\n\n    playlist = self.playlist_result(\n        self._entries(page, playlist_id), playlist_id, playlist_title)\n    playlist.update({\n        'uploader': uploader,\n        'uploader_id': uploader_id,\n        'uploader_url': uploader_url,\n    })\n\n    return has_videos, playlist",
                "def _check_download_just_video(self, url, playlist_id):\n    # Check if it's a video-specific URL\n    query_dict = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n    video_id = query_dict.get('v', [None])[0] or self._search_regex(\n        r'(?:(?:^|//)youtu\\.be/|youtube\\.com/embed/(?!videoseries))([0-9A-Za-z_-]{11})', url,\n        'video id', default=None)\n    if video_id:\n        if self._downloader.params.get('noplaylist'):\n            self.to_screen('Downloading just video %s because of --no-playlist' % video_id)\n            return video_id, self.url_result(video_id, 'Youtube', video_id=video_id)\n        else:\n            self.to_screen('Downloading playlist %s - add --no-playlist to just download video %s' % (playlist_id, video_id))\n            return video_id, None\n    return None, None",
                "def _real_extract(self, url):\n    # Extract playlist id\n    mobj = re.match(self._VALID_URL, url)\n    if mobj is None:\n        raise ExtractorError('Invalid URL: %s' % url)\n    playlist_id = mobj.group(1) or mobj.group(2)\n\n    video_id, video = self._check_download_just_video(url, playlist_id)\n    if video:\n        return video\n\n    if playlist_id.startswith(('RD', 'UL', 'PU')):\n        # Mixes require a custom extraction process\n        return self._extract_mix(playlist_id)\n\n    has_videos, playlist = self._extract_playlist(playlist_id)\n    if has_videos or not video_id:\n        return playlist\n\n    # Some playlist URLs don't actually serve a playlist (see\n    # https://github.com/ytdl-org/youtube-dl/issues/10537).\n    # Fallback to plain video extraction if there is a video id\n    # along with playlist id.\n    return self.url_result(video_id, 'Youtube', video_id=video_id)",
                "@classmethod\ndef suitable(cls, url):\n    return (False if YoutubePlaylistsIE.suitable(url) or YoutubeLiveIE.suitable(url)\n            else super(YoutubeChannelIE, cls).suitable(url))",
                "def _build_template_url(self, url, channel_id):\n    return self._TEMPLATE_URL % channel_id",
                "def _real_extract(self, url):\n    channel_id = self._match_id(url)\n\n    url = self._build_template_url(url, channel_id)\n\n    # Channel by page listing is restricted to 35 pages of 30 items, i.e. 1050 videos total (see #5778)\n    # Workaround by extracting as a playlist if managed to obtain channel playlist URL\n    # otherwise fallback on channel by page extraction\n    channel_page = self._download_webpage(\n        url + '?view=57', channel_id,\n        'Downloading channel page', fatal=False)\n    if channel_page is False:\n        channel_playlist_id = False\n    else:\n        channel_playlist_id = self._html_search_meta(\n            'channelId', channel_page, 'channel id', default=None)\n        if not channel_playlist_id:\n            channel_url = self._html_search_meta(\n                ('al:ios:url', 'twitter:app:url:iphone', 'twitter:app:url:ipad'),\n                channel_page, 'channel url', default=None)\n            if channel_url:\n                channel_playlist_id = self._search_regex(\n                    r'vnd\\.youtube://user/([0-9A-Za-z_-]+)',\n                    channel_url, 'channel id', default=None)\n    if channel_playlist_id and channel_playlist_id.startswith('UC'):\n        playlist_id = 'UU' + channel_playlist_id[2:]\n        return self.url_result(\n            compat_urlparse.urljoin(url, '/playlist?list=%s' % playlist_id), 'YoutubePlaylist')\n\n    channel_page = self._download_webpage(url, channel_id, 'Downloading page #1')\n    autogenerated = re.search(r'''(?x)\n            class=\"[^\"]*?(?:\n                channel-header-autogenerated-label|\n                yt-channel-title-autogenerated\n            )[^\"]*\"''', channel_page) is not None\n\n    if autogenerated:\n        # The videos are contained in a single page\n        # the ajax pages can't be used, they are empty\n        entries = [\n            self.url_result(\n                video_id, 'Youtube', video_id=video_id,\n                video_title=video_title)\n            for video_id, video_title in self.extract_videos_from_page(channel_page)]\n        return self.playlist_result(entries, channel_id)\n\n    try:\n        next(self._entries(channel_page, channel_id))\n    except StopIteration:\n        alert_message = self._html_search_regex(\n            r'(?s)<div[^>]+class=([\"\\']).*?\\byt-alert-message\\b.*?\\1[^>]*>(?P<alert>[^<]+)</div>',\n            channel_page, 'alert', default=None, group='alert')\n        if alert_message:\n            raise ExtractorError('Youtube said: %s' % alert_message, expected=True)\n\n    return self.playlist_result(self._entries(channel_page, channel_id), channel_id)",
                "@classmethod\ndef suitable(cls, url):\n    # Don't return True if the url can be extracted with other youtube\n    # extractor, the regex would is too permissive and it would match.\n    other_yt_ies = iter(klass for (name, klass) in globals().items() if name.startswith('Youtube') and name.endswith('IE') and klass is not cls)\n    if any(ie.suitable(url) for ie in other_yt_ies):\n        return False\n    else:\n        return super(YoutubeUserIE, cls).suitable(url)",
                "def _build_template_url(self, url, channel_id):\n    mobj = re.match(self._VALID_URL, url)\n    return self._TEMPLATE_URL % (mobj.group('user') or 'user', mobj.group('id'))",
                "def _real_extract(self, url):\n    mobj = re.match(self._VALID_URL, url)\n    channel_id = mobj.group('id')\n    base_url = mobj.group('base_url')\n    webpage = self._download_webpage(url, channel_id, fatal=False)\n    if webpage:\n        page_type = self._og_search_property(\n            'type', webpage, 'page type', default='')\n        video_id = self._html_search_meta(\n            'videoId', webpage, 'video id', default=None)\n        if page_type.startswith('video') and video_id and re.match(\n                r'^[0-9A-Za-z_-]{11}$', video_id):\n            return self.url_result(video_id, YoutubeIE.ie_key())\n    return self.url_result(base_url)",
                "def _get_n_results(self, query, n):\n    \"\"\"Get a specified number of results for a query\"\"\"\n\n    videos = []\n    limit = n\n\n    url_query = {\n        'search_query': query.encode('utf-8'),\n    }\n    url_query.update(self._EXTRA_QUERY_ARGS)\n    result_url = 'https://www.youtube.com/results?' + compat_urllib_parse_urlencode(url_query)\n\n    for pagenum in itertools.count(1):\n        data = self._download_json(\n            result_url, video_id='query \"%s\"' % query,\n            note='Downloading page %s' % pagenum,\n            errnote='Unable to download API page',\n            query={'spf': 'navigate'})\n        html_content = data[1]['body']['content']\n\n        if 'class=\"search-message' in html_content:\n            raise ExtractorError(\n                '[youtube] No video results', expected=True)\n\n        new_videos = list(self._process_page(html_content))\n        videos += new_videos\n        if not new_videos or len(videos) > limit:\n            break\n        next_link = self._html_search_regex(\n            r'href=\"(/results\\?[^\"]*\\bsp=[^\"]+)\"[^>]*>\\s*<span[^>]+class=\"[^\"]*\\byt-uix-button-content\\b[^\"]*\"[^>]*>Next',\n            html_content, 'next link', default=None)\n        if next_link is None:\n            break\n        result_url = compat_urlparse.urljoin('https://www.youtube.com/', next_link)\n\n    if len(videos) > n:\n        videos = videos[:n]\n    return self.playlist_result(videos, query)",
                "def _real_extract(self, url):\n    mobj = re.match(self._VALID_URL, url)\n    query = compat_urllib_parse_unquote_plus(mobj.group('query'))\n    webpage = self._download_webpage(url, query)\n    return self.playlist_result(self._process_page(webpage), playlist_title=query)",
                "def _real_extract(self, url):\n    playlist_id = self._match_id(url)\n    return super(YoutubeShowIE, self)._real_extract(\n        'https://www.youtube.com/show/%s/playlists' % playlist_id)",
                "@property\ndef IE_NAME(self):\n    return 'youtube:%s' % self._FEED_NAME",
                "def _real_initialize(self):\n    self._login()",
                "def _entries(self, page):\n    # The extraction process is the same as for playlists, but the regex\n    # for the video ids doesn't contain an index\n    ids = []\n    more_widget_html = content_html = page\n    for page_num in itertools.count(1):\n        matches = re.findall(r'href=\"\\s*/watch\\?v=([0-9A-Za-z_-]{11})', content_html)\n\n        # 'recommended' feed has infinite 'load more' and each new portion spins\n        # the same videos in (sometimes) slightly different order, so we'll check\n        # for unicity and break when portion has no new videos\n        new_ids = list(filter(lambda video_id: video_id not in ids, orderedSet(matches)))\n        if not new_ids:\n            break\n\n        ids.extend(new_ids)\n\n        for entry in self._ids_to_results(new_ids):\n            yield entry\n\n        mobj = re.search(r'data-uix-load-more-href=\"/?(?P<more>[^\"]+)\"', more_widget_html)\n        if not mobj:\n            break\n\n        more = self._download_json(\n            'https://youtube.com/%s' % mobj.group('more'), self._PLAYLIST_TITLE,\n            'Downloading page #%s' % page_num,\n            transform_source=uppercase_escape)\n        content_html = more['content_html']\n        more_widget_html = more['load_more_widget_html']",
                "def _real_extract(self, url):\n    page = self._download_webpage(\n        'https://www.youtube.com/feed/%s' % self._FEED_NAME,\n        self._PLAYLIST_TITLE)\n    return self.playlist_result(\n        self._entries(page), playlist_title=self._PLAYLIST_TITLE)",
                "def _real_extract(self, url):\n    _, video = self._check_download_just_video(url, 'WL')\n    if video:\n        return video\n    _, playlist = self._extract_playlist('WL')\n    return playlist",
                "def _real_extract(self, url):\n    webpage = self._download_webpage('https://www.youtube.com/my_favorites', 'Youtube Favourites videos')\n    playlist_id = self._search_regex(r'list=(.+?)[\"&]', webpage, 'favourites playlist id')\n    return self.url_result(playlist_id, 'YoutubePlaylist')",
                "def _real_extract(self, url):\n    raise ExtractorError(\n        'Did you forget to quote the URL? Remember that & is a meta '\n        'character in most shells, so you want to put the URL in quotes, '\n        'like  youtube-dl '\n        '\"https://www.youtube.com/watch?feature=foo&v=BaW_jenozKc\" '\n        ' or simply  youtube-dl BaW_jenozKc  .',\n        expected=True)",
                "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    raise ExtractorError(\n        'Incomplete YouTube ID %s. URL %s looks truncated.' % (video_id, url),\n        expected=True)",
                "def req(url, f_req, note, errnote):\n    data = login_form.copy()\n    data.update({\n        'pstMsg': 1,\n        'checkConnection': 'youtube',\n        'checkedDomains': 'youtube',\n        'hl': 'en',\n        'deviceinfo': '[null,null,null,[],null,\"US\",null,null,[],\"GlifWebSignIn\",null,[null,null,[]]]',\n        'f.req': json.dumps(f_req),\n        'flowName': 'GlifWebSignIn',\n        'flowEntry': 'ServiceLogin',\n        # TODO: reverse actual botguard identifier generation algo\n        'bgRequest': '[\"identifier\",\"\"]',\n    })\n    return self._download_json(\n        url, None, note=note, errnote=errnote,\n        transform_source=lambda s: re.sub(r'^[^[]*', '', s),\n        fatal=False,\n        data=urlencode_postdata(data), headers={\n            'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n            'Google-Accounts-XSRF': 1,\n        })",
                "def warn(message):\n    self._downloader.report_warning(message)",
                "def gen_sig_code(idxs):\n    def _genslice(start, end, step):\n        starts = '' if start == 0 else str(start)\n        ends = (':%d' % (end + step)) if end + step >= 0 else ':'\n        steps = '' if step == 1 else (':%d' % step)\n        return 's[%s%s%s]' % (starts, ends, steps)\n\n    step = None\n    # Quelch pyflakes warnings - start will be set when step is set\n    start = '(Never used)'\n    for i, prev in zip(idxs[1:], idxs[:-1]):\n        if step is not None:\n            if i - prev == step:\n                continue\n            yield _genslice(start, prev, step)\n            step = None\n            continue\n        if i - prev in [-1, 1]:\n            step = i - prev\n            start = prev\n            continue\n        else:\n            yield 's[%d]' % prev\n    if step is None:\n        yield 's[%d]' % i\n    else:\n        yield _genslice(start, i, step)",
                "def add_dash_mpd(video_info):\n    dash_mpd = video_info.get('dashmpd')\n    if dash_mpd and dash_mpd[0] not in dash_mpds:\n        dash_mpds.append(dash_mpd[0])",
                "def add_dash_mpd_pr(pl_response):\n    dash_mpd = url_or_none(try_get(\n        pl_response, lambda x: x['streamingData']['dashManifestUrl'],\n        compat_str))\n    if dash_mpd and dash_mpd not in dash_mpds:\n        dash_mpds.append(dash_mpd)",
                "def extract_view_count(v_info):\n    return int_or_none(try_get(v_info, lambda x: x['view_count'][0]))",
                "def extract_player_response(player_response, video_id):\n    pl_response = str_or_none(player_response)\n    if not pl_response:\n        return\n    pl_response = self._parse_json(pl_response, video_id, fatal=False)\n    if isinstance(pl_response, dict):\n        add_dash_mpd_pr(pl_response)\n        return pl_response",
                "def extract_unavailable_message():\n    messages = []\n    for tag, kind in (('h1', 'message'), ('div', 'submessage')):\n        msg = self._html_search_regex(\n            r'(?s)<{tag}[^>]+id=[\"\\']unavailable-{kind}[\"\\'][^>]*>(.+?)</{tag}>'.format(tag=tag, kind=kind),\n            video_webpage, 'unavailable %s' % kind, default=None)\n        if msg:\n            messages.append(msg)\n    if messages:\n        return '\\n'.join(messages)",
                "def _extract_filesize(media_url):\n    return int_or_none(self._search_regex(\n        r'\\bclen[=/](\\d+)', media_url, 'filesize', default=None))",
                "def extract_meta(field):\n    return self._html_search_regex(\n        r'<h4[^>]+class=\"title\"[^>]*>\\s*%s\\s*</h4>\\s*<ul[^>]*>\\s*<li>(.+?)</li>\\s*' % field,\n        video_webpage, field, default=None)",
                "def _extract_count(count_name):\n    return str_to_int(self._search_regex(\n        r'-%s-button[^>]+><span[^>]+class=\"yt-uix-button-content\"[^>]*>([\\d,]+)</span>'\n        % re.escape(count_name),\n        video_webpage, count_name, default=None))",
                "def _genslice(start, end, step):\n    starts = '' if start == 0 else str(start)\n    ends = (':%d' % (end + step)) if end + step >= 0 else ':'\n    steps = '' if step == 1 else (':%d' % step)\n    return 's[%s%s%s]' % (starts, ends, steps)",
                "def make_captions(sub_url, sub_langs):\n    parsed_sub_url = compat_urllib_parse_urlparse(sub_url)\n    caption_qs = compat_parse_qs(parsed_sub_url.query)\n    captions = {}\n    for sub_lang in sub_langs:\n        sub_formats = []\n        for ext in self._SUBTITLE_FORMATS:\n            caption_qs.update({\n                'tlang': [sub_lang],\n                'fmt': [ext],\n            })\n            sub_url = compat_urlparse.urlunparse(parsed_sub_url._replace(\n                query=compat_urllib_parse_urlencode(caption_qs, True)))\n            sub_formats.append({\n                'url': sub_url,\n                'ext': ext,\n            })\n        captions[sub_lang] = sub_formats\n    return captions",
                "def replace_url(m):\n    redir_url = compat_urlparse.urljoin(url, m.group(1))\n    parsed_redir_url = compat_urllib_parse_urlparse(redir_url)\n    if re.search(r'^(?:www\\.)?(?:youtube(?:-nocookie)?\\.com|youtu\\.be)$', parsed_redir_url.netloc) and parsed_redir_url.path == '/redirect':\n        qs = compat_parse_qs(parsed_redir_url.query)\n        q = qs.get('q')\n        if q and q[0]:\n            return q[0]\n    return redir_url",
                "def decrypt_sig(mobj):\n    s = mobj.group(1)\n    dec_s = self._decrypt_signature(s, video_id, player_url, age_gate)\n    return '/signature/%s' % dec_s",
                "def feed_entry(name):\n    return try_get(feed_data, lambda x: x[name][0], compat_str)"
            ],
            "inscope_function_signatures": [
                "_set_language(self)",
                "_ids_to_results(self, ids)",
                "_login(self)",
                "_download_webpage_handle(self, *args, **kwargs)",
                "_real_initialize(self)",
                "_entries(self, page, playlist_id)",
                "_process_page(self, content)",
                "extract_videos_from_page_impl(self, video_re, page, ids_in_page, titles_in_page)",
                "extract_videos_from_page(self, page)",
                "_process_page(self, content)",
                "_real_extract(self, url)",
                "__init__(self, *args, **kwargs)",
                "report_video_info_webpage_download(self, video_id)",
                "report_information_extraction(self, video_id)",
                "report_unavailable_format(self, video_id, format)",
                "report_rtmp_download(self)",
                "_signature_cache_id(self, example_sig)",
                "_extract_player_info(cls, player_url)",
                "_extract_signature_function(self, video_id, player_url, example_sig)",
                "_print_sig_code(self, func, example_sig)",
                "_parse_sig_js(self, jscode)",
                "_parse_sig_swf(self, file_contents)",
                "_decrypt_signature(self, s, video_id, player_url, age_gate=False)",
                "_get_subtitles(self, video_id, webpage)",
                "_get_ytplayer_config(self, video_id, webpage)",
                "_get_automatic_captions(self, video_id, webpage)",
                "_mark_watched(self, video_id, video_info, player_response)",
                "_extract_urls(webpage)",
                "_extract_url(webpage)",
                "extract_id(cls, url)",
                "_extract_chapters(description, duration)",
                "_real_extract(self, url)",
                "_real_initialize(self)",
                "extract_videos_from_page(self, page)",
                "_extract_mix(self, playlist_id)",
                "_extract_playlist(self, playlist_id)",
                "_check_download_just_video(self, url, playlist_id)",
                "_real_extract(self, url)",
                "suitable(cls, url)",
                "_build_template_url(self, url, channel_id)",
                "_real_extract(self, url)",
                "suitable(cls, url)",
                "_build_template_url(self, url, channel_id)",
                "_real_extract(self, url)",
                "_get_n_results(self, query, n)",
                "_real_extract(self, url)",
                "_real_extract(self, url)",
                "IE_NAME(self)",
                "_real_initialize(self)",
                "_entries(self, page)",
                "_real_extract(self, url)",
                "_real_extract(self, url)",
                "_real_extract(self, url)",
                "_real_extract(self, url)",
                "_real_extract(self, url)",
                "req(url, f_req, note, errnote)",
                "warn(message)",
                "gen_sig_code(idxs)",
                "add_dash_mpd(video_info)",
                "add_dash_mpd_pr(pl_response)",
                "extract_view_count(v_info)",
                "extract_player_response(player_response, video_id)",
                "extract_unavailable_message()",
                "_extract_filesize(media_url)",
                "extract_meta(field)",
                "_extract_count(count_name)",
                "_genslice(start, end, step)",
                "make_captions(sub_url, sub_langs)",
                "replace_url(m)",
                "decrypt_sig(mobj)",
                "feed_entry(name)"
            ],
            "variables_in_file": {
                "InfoExtractor": [
                    58,
                    3260,
                    3309
                ],
                "_LOGIN_URL": [
                    60
                ],
                "_TWOFACTOR_URL": [
                    61
                ],
                "_LOOKUP_URL": [
                    63
                ],
                "_CHALLENGE_URL": [
                    64
                ],
                "_TFA_URL": [
                    65
                ],
                "_NETRC_MACHINE": [
                    67
                ],
                "_LOGIN_REQUIRED": [
                    69,
                    3158,
                    3231
                ],
                "_PLAYLIST_ID_RE": [
                    71
                ],
                "self._set_cookie": [
                    74
                ],
                "self": [
                    1536,
                    2048,
                    2049,
                    3074,
                    3078,
                    1553,
                    3089,
                    3093,
                    3102,
                    1581,
                    3128,
                    3130,
                    3131,
                    2117,
                    1606,
                    2120,
                    74,
                    2124,
                    2125,
                    3148,
                    3149,
                    81,
                    2646,
                    3162,
                    92,
                    3165,
                    95,
                    96,
                    99,
                    100,
                    2663,
                    2152,
                    2664,
                    106,
                    2667,
                    2670,
                    3184,
                    2164,
                    3191,
                    2168,
                    3192,
                    122,
                    2170,
                    2683,
                    3199,
                    3200,
                    3201,
                    3202,
                    3203,
                    132,
                    2182,
                    2697,
                    2188,
                    2191,
                    2706,
                    148,
                    2197,
                    2709,
                    2710,
                    3220,
                    3223,
                    1694,
                    3234,
                    3235,
                    3236,
                    168,
                    2731,
                    2733,
                    1710,
                    1713,
                    2225,
                    2738,
                    1717,
                    2756,
                    2760,
                    2761,
                    203,
                    2773,
                    2263,
                    1753,
                    2777,
                    2267,
                    2778,
                    221,
                    2779,
                    2781,
                    2787,
                    2276,
                    2279,
                    1768,
                    2792,
                    1772,
                    2798,
                    2288,
                    1265,
                    1266,
                    1777,
                    2800,
                    245,
                    1270,
                    2808,
                    2297,
                    1274,
                    2298,
                    3320,
                    1278,
                    255,
                    1792,
                    2305,
                    1282,
                    2310,
                    2311,
                    1803,
                    2317,
                    271,
                    1809,
                    2321,
                    275,
                    1299,
                    277,
                    278,
                    1303,
                    1815,
                    2322,
                    1306,
                    2327,
                    2330,
                    287,
                    1312,
                    2337,
                    1316,
                    2852,
                    2342,
                    2855,
                    1320,
                    2344,
                    1322,
                    2857,
                    300,
                    1838,
                    1327,
                    2862,
                    2868,
                    2357,
                    1335,
                    2871,
                    2875,
                    2880,
                    323,
                    324,
                    2883,
                    1865,
                    1868,
                    2894,
                    2897,
                    2386,
                    2898,
                    2389,
                    2901,
                    2903,
                    349,
                    350,
                    1375,
                    2909,
                    1378,
                    2402,
                    2404,
                    359,
                    363,
                    364,
                    365,
                    366,
                    1902,
                    1905,
                    1907,
                    1922,
                    1417,
                    1418,
                    1419,
                    1929,
                    1422,
                    1423,
                    1424,
                    1425,
                    2964,
                    2965,
                    1434,
                    1438,
                    1447,
                    1460,
                    3005,
                    3008,
                    3010,
                    1476,
                    3012,
                    1479,
                    3016,
                    3017,
                    1485,
                    1486,
                    1999,
                    1489,
                    2001,
                    2009,
                    2011,
                    1503,
                    2016,
                    1506,
                    2026,
                    1515,
                    2030,
                    2032,
                    2033,
                    2036
                ],
                "time.time": [
                    77
                ],
                "time": [
                    77
                ],
                "self.url_result": [
                    2880,
                    324,
                    3236,
                    359,
                    3016,
                    3017,
                    1803,
                    2894,
                    81,
                    2808,
                    2779
                ],
                "vid_id": [
                    81,
                    82
                ],
                "ids": [
                    3170,
                    2691,
                    2694,
                    2695,
                    2697,
                    3178,
                    3182,
                    82,
                    2679
                ],
                "username": [
                    144,
                    92,
                    94,
                    135
                ],
                "password": [
                    161,
                    92
                ],
                "self._get_login_info": [
                    92
                ],
                "self._LOGIN_REQUIRED": [
                    95
                ],
                "self._downloader.params.get": [
                    1312,
                    2310,
                    2026,
                    1868,
                    1999,
                    1424,
                    1809,
                    2777,
                    2330,
                    1694,
                    95
                ],
                "self._downloader.params": [
                    1312,
                    2310,
                    2026,
                    1868,
                    1999,
                    1424,
                    1809,
                    2777,
                    2330,
                    1694,
                    95
                ],
                "self._downloader": [
                    132,
                    2182,
                    2310,
                    1424,
                    1809,
                    275,
                    1306,
                    2330,
                    1694,
                    1438,
                    1312,
                    1581,
                    1838,
                    1460,
                    1335,
                    1868,
                    1999,
                    1489,
                    2777,
                    95,
                    1506,
                    2152,
                    2026,
                    2164
                ],
                "ExtractorError": [
                    1409,
                    3086,
                    1295,
                    1939,
                    1429,
                    1437,
                    1827,
                    2723,
                    2725,
                    1580,
                    306,
                    2356,
                    2907,
                    2396,
                    2142,
                    2143,
                    96,
                    2400,
                    3300,
                    2789,
                    1651,
                    1781,
                    3321,
                    1919
                ],
                "self.IE_NAME": [
                    96,
                    245
                ],
                "login_page": [
                    106,
                    99,
                    103
                ],
                "self._download_webpage": [
                    3008,
                    3234,
                    99,
                    1316,
                    2883,
                    1606,
                    1768,
                    364,
                    2862,
                    1777,
                    2321,
                    2710,
                    2009,
                    3130,
                    2683,
                    3199,
                    255
                ],
                "self._LOGIN_URL": [
                    100
                ],
                "login_form": [
                    106,
                    109
                ],
                "self._hidden_inputs": [
                    106
                ],
                "data": [
                    3078,
                    1769,
                    3083,
                    109,
                    110,
                    1775,
                    126
                ],
                "login_form.copy": [
                    109
                ],
                "data.update": [
                    110
                ],
                "json.dumps": [
                    116
                ],
                "json": [
                    2019,
                    116,
                    2014
                ],
                "f_req": [
                    116
                ],
                "self._download_json": [
                    122,
                    300,
                    3078,
                    3191
                ],
                "url": [
                    2958,
                    2065,
                    2961,
                    2964,
                    2709,
                    2710,
                    3220,
                    1691,
                    2848,
                    2849,
                    1699,
                    2855,
                    2857,
                    1710,
                    2863,
                    1712,
                    1713,
                    1716,
                    1717,
                    1845,
                    1974,
                    1976,
                    3128,
                    2746,
                    3130,
                    1981,
                    1982,
                    3005,
                    3008,
                    2881,
                    1986,
                    2883,
                    3320,
                    3322,
                    3148,
                    2772,
                    2774,
                    2787,
                    2789,
                    2022,
                    1767,
                    1768,
                    2792,
                    363,
                    364,
                    1649,
                    1651,
                    2039,
                    2040,
                    2041,
                    2682,
                    123,
                    2684,
                    2045
                ],
                "note": [
                    123
                ],
                "errnote": [
                    123
                ],
                "re.sub": [
                    2340,
                    1680,
                    1682,
                    124,
                    1725,
                    1854
                ],
                "re": [
                    2177,
                    2178,
                    1413,
                    2056,
                    1291,
                    1680,
                    1682,
                    2964,
                    2201,
                    2713,
                    2716,
                    290,
                    2340,
                    2724,
                    2728,
                    1710,
                    2094,
                    2741,
                    1847,
                    3128,
                    1723,
                    2236,
                    1725,
                    1854,
                    3005,
                    2369,
                    2884,
                    3014,
                    327,
                    2253,
                    1615,
                    2652,
                    1632,
                    1635,
                    356,
                    1763,
                    2276,
                    2787,
                    3173,
                    2281,
                    2157,
                    1649,
                    3187,
                    1659,
                    124,
                    2685,
                    2687
                ],
                "s": [
                    2336,
                    2337,
                    1417,
                    1420,
                    1425,
                    1426,
                    1396,
                    1308,
                    1403,
                    124
                ],
                "urlencode_postdata": [
                    2325,
                    126
                ],
                "self._downloader.report_warning": [
                    1506,
                    132,
                    2182,
                    2152,
                    1581,
                    1838,
                    1489,
                    1460,
                    2164,
                    1438
                ],
                "message": [
                    2721,
                    2722,
                    2723,
                    132,
                    2719
                ],
                "lookup_req": [
                    148,
                    134
                ],
                "lookup_results": [
                    154,
                    147,
                    151
                ],
                "req": [
                    147,
                    220,
                    167
                ],
                "self._LOOKUP_URL": [
                    148
                ],
                "user_hash": [
                    160,
                    154,
                    155,
                    214
                ],
                "try_get": [
                    1925,
                    1926,
                    2314,
                    154,
                    1833,
                    174,
                    176,
                    1585,
                    1587,
                    182,
                    187,
                    189,
                    1981,
                    2109,
                    193,
                    2113,
                    1988,
                    198,
                    1737,
                    1869,
                    1872,
                    1747,
                    2135,
                    1884,
                    2140,
                    2399,
                    2146,
                    227,
                    229,
                    235,
                    2038,
                    2294,
                    249,
                    2300
                ],
                "x": [
                    1925,
                    1926,
                    2315,
                    154,
                    1834,
                    174,
                    176,
                    1587,
                    1588,
                    182,
                    187,
                    189,
                    1981,
                    2111,
                    193,
                    2114,
                    1988,
                    198,
                    1738,
                    1871,
                    1873,
                    1747,
                    2136,
                    1884,
                    2140,
                    2399,
                    227,
                    2147,
                    229,
                    236,
                    2038,
                    2294,
                    249,
                    2301
                ],
                "compat_str": [
                    1286,
                    2315,
                    1552,
                    154,
                    176,
                    1981,
                    189,
                    2112,
                    193,
                    2114,
                    198,
                    1739,
                    1996,
                    1872,
                    1873,
                    2137,
                    1884,
                    1372,
                    2140,
                    2148,
                    229,
                    236,
                    2038,
                    249
                ],
                "warn": [
                    195,
                    230,
                    262,
                    200,
                    206,
                    177,
                    252,
                    246,
                    184,
                    156
                ],
                "challenge_req": [
                    168,
                    159
                ],
                "challenge_results": [
                    198,
                    167,
                    171,
                    174,
                    182
                ],
                "self._CHALLENGE_URL": [
                    168
                ],
                "login_res": [
                    176,
                    174,
                    175
                ],
                "list": [
                    227,
                    1925,
                    1926,
                    3178,
                    174,
                    2609,
                    3089,
                    182,
                    2587,
                    187,
                    1630
                ],
                "login_msg": [
                    176,
                    179
                ],
                "res": [
                    1320,
                    1327,
                    1332,
                    182,
                    183,
                    1336,
                    249,
                    187
                ],
                "login_challenge": [
                    193,
                    187,
                    188,
                    189
                ],
                "challenge_str": [
                    245,
                    244,
                    189,
                    190
                ],
                "status": [
                    193,
                    194
                ],
                "tl": [
                    221,
                    198,
                    199
                ],
                "tfa_code": [
                    217,
                    203,
                    205,
                    211
                ],
                "self._get_tfa_info": [
                    203
                ],
                "remove_start": [
                    211
                ],
                "tfa_req": [
                    221,
                    213
                ],
                "tfa_results": [
                    224,
                    227,
                    220,
                    236
                ],
                "self._TFA_URL.format": [
                    221
                ],
                "self._TFA_URL": [
                    221
                ],
                "tfa_res": [
                    227,
                    228,
                    229
                ],
                "tfa_msg": [
                    232,
                    229
                ],
                "check_cookie_url": [
                    256,
                    249,
                    235,
                    251
                ],
                "CHALLENGES": [
                    243,
                    238
                ],
                "challenge": [
                    243,
                    246
                ],
                "CHALLENGES.get": [
                    243
                ],
                "check_cookie_results": [
                    258,
                    261,
                    255
                ],
                "query": [
                    3072,
                    3079,
                    268,
                    269,
                    270,
                    3102,
                    1701,
                    1702,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1719,
                    3129,
                    3130,
                    3131,
                    1986,
                    2772
                ],
                "copy": [
                    268,
                    2125
                ],
                "kwargs.get": [
                    268
                ],
                "kwargs": [
                    272,
                    1265,
                    268,
                    270
                ],
                "_download_webpage_handle": [
                    271
                ],
                "super": [
                    2849,
                    3149,
                    271,
                    1265,
                    2961
                ],
                "YoutubeBaseInfoExtractor": [
                    2474,
                    271,
                    369,
                    3153,
                    435,
                    2968,
                    282,
                    3227
                ],
                "args": [
                    1568,
                    1569,
                    1794,
                    1795,
                    1797,
                    1802,
                    1804,
                    1805,
                    1551,
                    272,
                    1265,
                    1808,
                    1492,
                    1493,
                    1495
                ],
                "compat_kwargs": [
                    272
                ],
                "self._set_language": [
                    277
                ],
                "self._login": [
                    2646,
                    3165,
                    278
                ],
                "more_widget_html": [
                    290,
                    3171,
                    3187,
                    3196,
                    285,
                    318
                ],
                "content_html": [
                    3171,
                    3173,
                    313,
                    314,
                    3195,
                    285,
                    287
                ],
                "page": [
                    3171,
                    2756,
                    3203,
                    327,
                    2664,
                    2761,
                    2668,
                    2671,
                    2735,
                    2740,
                    2710,
                    2743,
                    2713,
                    285,
                    2653,
                    350,
                    3199
                ],
                "page_num": [
                    3193,
                    3172,
                    286,
                    303
                ],
                "itertools.count": [
                    2681,
                    3172,
                    3077,
                    286
                ],
                "itertools": [
                    2681,
                    3172,
                    3077,
                    286
                ],
                "entry": [
                    288,
                    3185,
                    3184,
                    287
                ],
                "self._process_page": [
                    3089,
                    3131,
                    287
                ],
                "mobj": [
                    2056,
                    2057,
                    2964,
                    2965,
                    2716,
                    2717,
                    2718,
                    2336,
                    290,
                    291,
                    301,
                    1710,
                    1711,
                    1712,
                    2094,
                    2096,
                    2097,
                    2741,
                    2744,
                    2745,
                    2746,
                    1723,
                    1724,
                    1725,
                    2236,
                    2237,
                    2239,
                    2241,
                    3005,
                    2243,
                    2244,
                    2245,
                    3006,
                    327,
                    3007,
                    329,
                    331,
                    333,
                    1614,
                    1615,
                    2787,
                    2788,
                    2790,
                    2157,
                    2160,
                    1649,
                    1650,
                    2161,
                    1652,
                    2162,
                    3187,
                    3188,
                    3192,
                    3128,
                    3129
                ],
                "re.search": [
                    2177,
                    290,
                    1763,
                    2369,
                    2884,
                    2056,
                    1291,
                    2157,
                    1710,
                    2253,
                    3187,
                    2741,
                    1847,
                    2201,
                    1723,
                    2236
                ],
                "count": [
                    294,
                    296,
                    303,
                    308,
                    309
                ],
                "retries": [
                    296,
                    309,
                    295
                ],
                "more": [
                    300,
                    3191,
                    313,
                    3195,
                    3196,
                    318
                ],
                "mobj.group": [
                    2057,
                    2965,
                    2718,
                    2336,
                    301,
                    1712,
                    2096,
                    2097,
                    2745,
                    2746,
                    3129,
                    1725,
                    3006,
                    2239,
                    3007,
                    2241,
                    2243,
                    2244,
                    2245,
                    329,
                    331,
                    333,
                    1614,
                    2790,
                    2161,
                    2162,
                    1652,
                    3192
                ],
                "playlist_id": [
                    2706,
                    2709,
                    2710,
                    3235,
                    3236,
                    301,
                    2879,
                    2881,
                    2756,
                    2761,
                    3148,
                    3150,
                    2781,
                    356,
                    2790,
                    360,
                    2792,
                    363,
                    364,
                    2796,
                    366,
                    2798,
                    2800,
                    2680,
                    2682,
                    2684,
                    2687
                ],
                "uppercase_escape": [
                    304,
                    3194,
                    1480
                ],
                "isinstance": [
                    1552,
                    1754,
                    307,
                    1830
                ],
                "e.cause": [
                    307
                ],
                "e": [
                    2358,
                    307,
                    1430
                ],
                "compat_HTTPError": [
                    307
                ],
                "e.cause.code": [
                    307
                ],
                "content_html.strip": [
                    314
                ],
                "YoutubeEntryListBaseInfoExtractor": [
                    321,
                    354
                ],
                "video_id": [
                    1792,
                    1420,
                    1808,
                    1554,
                    2323,
                    1786,
                    1435,
                    1436,
                    2337,
                    1828,
                    1317,
                    2343,
                    1450,
                    1323,
                    2298,
                    2808,
                    1713,
                    1716,
                    1717,
                    2358,
                    1720,
                    3320,
                    323,
                    324,
                    3012,
                    2118,
                    1607,
                    1480,
                    3014,
                    3015,
                    331,
                    3016,
                    1485,
                    1486,
                    1487,
                    2895,
                    2897,
                    3322,
                    339,
                    2773,
                    343,
                    2008,
                    1753,
                    2010,
                    2776,
                    2778,
                    2779,
                    2398,
                    1503,
                    2655,
                    2781,
                    2782,
                    2659,
                    2404,
                    1767,
                    1768,
                    2407,
                    1770,
                    1771,
                    2792,
                    3178,
                    1904,
                    1905,
                    1778,
                    1907,
                    1652,
                    1653,
                    1270,
                    2037,
                    2801,
                    2297,
                    1274,
                    2428,
                    1278
                ],
                "video_title": [
                    1836,
                    1837,
                    1839,
                    323,
                    324,
                    332,
                    334,
                    335,
                    336,
                    337,
                    2896,
                    2897,
                    340,
                    341,
                    344,
                    2656,
                    2657,
                    1890,
                    2658,
                    2660,
                    2416,
                    1905
                ],
                "self.extract_videos_from_page": [
                    2897,
                    323
                ],
                "content": [
                    323,
                    358
                ],
                "re.finditer": [
                    2094,
                    2276,
                    1615,
                    327
                ],
                "video_re": [
                    327
                ],
                "mobj.groupdict": [
                    329,
                    333
                ],
                "unescapeHTML": [
                    2656,
                    2275,
                    2219,
                    332,
                    1614,
                    2257,
                    1631
                ],
                "video_title.strip": [
                    2658,
                    335
                ],
                "idx": [
                    339,
                    340,
                    341
                ],
                "ids_in_page.index": [
                    339
                ],
                "ids_in_page": [
                    2659,
                    2664,
                    2669,
                    2672,
                    2674,
                    339,
                    343,
                    2649,
                    347,
                    350,
                    351
                ],
                "titles_in_page": [
                    2660,
                    2664,
                    2669,
                    2672,
                    2674,
                    340,
                    341,
                    344,
                    2650,
                    348,
                    350,
                    351
                ],
                "ValueError": [
                    342
                ],
                "ids_in_page.append": [
                    2659,
                    343
                ],
                "titles_in_page.append": [
                    344,
                    2660
                ],
                "self.extract_videos_from_page_impl": [
                    2667,
                    349,
                    2670,
                    2663
                ],
                "self._VIDEO_RE": [
                    2664,
                    350
                ],
                "zip": [
                    2674,
                    1349,
                    351
                ],
                "orderedSet": [
                    3178,
                    356,
                    2685
                ],
                "re.findall": [
                    1632,
                    1635,
                    356,
                    3173,
                    2713,
                    1659,
                    2652,
                    2685
                ],
                "self._match_id": [
                    3320,
                    363,
                    3148,
                    2855
                ],
                "webpage": [
                    2688,
                    2699,
                    3234,
                    3235,
                    3130,
                    3131,
                    3008,
                    3009,
                    3011,
                    1477,
                    3013,
                    1486,
                    1627,
                    1632,
                    1637,
                    364,
                    365,
                    366,
                    1644,
                    2683
                ],
                "title": [
                    1890,
                    1892,
                    1899,
                    365,
                    366,
                    2704,
                    2706
                ],
                "self._og_search_title": [
                    365
                ],
                "self.playlist_result": [
                    3202,
                    2760,
                    366,
                    1905,
                    2706,
                    2898,
                    3131,
                    2909,
                    3102
                ],
                "self._entries": [
                    3203,
                    2756,
                    2761,
                    366,
                    2901,
                    2909
                ],
                "IE_DESC": [
                    2913,
                    3108,
                    3208,
                    3113,
                    3240,
                    3021,
                    3247,
                    3056,
                    2449,
                    370,
                    3311,
                    3254,
                    2969,
                    2812,
                    3229,
                    3262,
                    3135
                ],
                "_VALID_URL": [
                    3136,
                    2914,
                    3209,
                    3241,
                    3115,
                    3022,
                    3248,
                    3312,
                    2450,
                    371,
                    3255,
                    2970,
                    2813,
                    3230,
                    3263
                ],
                "YoutubeBaseInfoExtractor._PLAYLIST_ID_RE": [
                    2474,
                    435
                ],
                "_NEXT_URL_RE": [
                    436
                ],
                "_PLAYER_INFO_RE": [
                    437
                ],
                "_formats": [
                    441
                ],
                "_SUBTITLE_FORMATS": [
                    546
                ],
                "_GEO_BYPASS": [
                    548
                ],
                "IE_NAME": [
                    2816,
                    3137,
                    3106,
                    2916,
                    550,
                    3207,
                    3114,
                    2478,
                    3023,
                    3310,
                    3060,
                    2971,
                    3228,
                    3261
                ],
                "_TESTS": [
                    2817,
                    3138,
                    2918,
                    551,
                    3211,
                    3116,
                    2479,
                    3279,
                    3025,
                    3314,
                    3063,
                    2973
                ],
                "int": [
                    647,
                    648,
                    649,
                    2057,
                    2249,
                    2251,
                    2987,
                    2988,
                    2258,
                    2259,
                    2610,
                    2611,
                    568,
                    569,
                    570,
                    2588,
                    2589,
                    2590
                ],
                "__init__": [
                    1265
                ],
                "YoutubeIE": [
                    2596,
                    3016,
                    1644,
                    1804,
                    1265
                ],
                "self._player_cache": [
                    1423,
                    1266,
                    1422,
                    1418
                ],
                "self.to_screen": [
                    1282,
                    1485,
                    1902,
                    2033,
                    1907,
                    1270,
                    2778,
                    1274,
                    2781,
                    1278,
                    1375
                ],
                "format": [
                    1816,
                    2684,
                    1278
                ],
                "join": [
                    2241,
                    1286,
                    1821,
                    1904,
                    1331,
                    1372,
                    1367,
                    1370,
                    1308,
                    1597
                ],
                "len": [
                    1286,
                    1672,
                    1948,
                    2089,
                    3100,
                    1936,
                    1331,
                    3091,
                    1367,
                    1946,
                    1372
                ],
                "part": [
                    1286
                ],
                "example_sig.split": [
                    1372,
                    1286
                ],
                "example_sig": [
                    1286,
                    1303,
                    1331,
                    1367,
                    1372
                ],
                "player_re": [
                    1290,
                    1291
                ],
                "cls._PLAYER_INFO_RE": [
                    1290
                ],
                "cls": [
                    2849,
                    1290,
                    2957,
                    1649,
                    2961
                ],
                "id_m": [
                    1296,
                    1291,
                    1292
                ],
                "player_url": [
                    1408,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1417,
                    1291,
                    1420,
                    1934,
                    1295,
                    1299,
                    1311,
                    2337,
                    1317,
                    1319,
                    1323,
                    1325,
                    1725,
                    1727,
                    2128,
                    2014,
                    2015,
                    2019,
                    2027,
                    2030,
                    2037,
                    2046
                ],
                "id_m.group": [
                    1296
                ],
                "classmethod": [
                    1288,
                    2953,
                    2846,
                    1647
                ],
                "player_type": [
                    1313,
                    1315,
                    1321,
                    2030,
                    2031,
                    1329,
                    1299,
                    1303
                ],
                "player_id": [
                    1313,
                    1417,
                    1418,
                    1422,
                    1423,
                    1299,
                    1303
                ],
                "self._extract_player_info": [
                    1299,
                    2030
                ],
                "func_id": [
                    1304,
                    1306,
                    1302,
                    1335
                ],
                "self._signature_cache_id": [
                    2032,
                    1417,
                    1303
                ],
                "os.path.basename": [
                    1304
                ],
                "os.path": [
                    1304
                ],
                "os": [
                    1304
                ],
                "cache_spec": [
                    1370,
                    1333,
                    1335,
                    1369,
                    1306,
                    1307,
                    1308
                ],
                "self._downloader.cache.load": [
                    1306
                ],
                "self._downloader.cache": [
                    1306,
                    1335
                ],
                "i": [
                    1349,
                    1351,
                    1356,
                    1357,
                    1363,
                    1365,
                    1308
                ],
                "download_note": [
                    1318,
                    1324,
                    1310
                ],
                "code": [
                    1316,
                    1320,
                    1326,
                    1327,
                    1373,
                    1375
                ],
                "self._parse_sig_js": [
                    1320
                ],
                "urlh": [
                    1322,
                    1717,
                    1326,
                    1719
                ],
                "self._request_webpage": [
                    1322
                ],
                "urlh.read": [
                    1326
                ],
                "self._parse_sig_swf": [
                    1327
                ],
                "test_string": [
                    1368,
                    1331,
                    1332,
                    1367
                ],
                "map": [
                    1331,
                    1630,
                    1367
                ],
                "compat_chr": [
                    1331,
                    1367
                ],
                "range": [
                    1331,
                    1597,
                    1367
                ],
                "cache_res": [
                    1368,
                    1369,
                    1332,
                    1333
                ],
                "ord": [
                    1369,
                    1333
                ],
                "c": [
                    1369,
                    1333
                ],
                "self._downloader.cache.store": [
                    1335
                ],
                "starts": [
                    1344,
                    1341
                ],
                "start": [
                    1348,
                    1353,
                    1358,
                    1365,
                    1341
                ],
                "str": [
                    1341
                ],
                "ends": [
                    1344,
                    1342
                ],
                "end": [
                    1342
                ],
                "step": [
                    1346,
                    1350,
                    1351,
                    1353,
                    1354,
                    1357,
                    1362,
                    1365,
                    1342,
                    1343
                ],
                "steps": [
                    1344,
                    1343
                ],
                "prev": [
                    1349,
                    1351,
                    1353,
                    1356,
                    1357,
                    1358,
                    1361
                ],
                "idxs": [
                    1349
                ],
                "_genslice": [
                    1353,
                    1365
                ],
                "func": [
                    1419,
                    1422,
                    1423,
                    1425,
                    1426,
                    1368
                ],
                "expr_code": [
                    1370,
                    1374
                ],
                "gen_sig_code": [
                    1370
                ],
                "signature_id_tuple": [
                    1371,
                    1374
                ],
                "p": [
                    1372
                ],
                "funcname": [
                    1378,
                    1395
                ],
                "self._search_regex": [
                    2016,
                    2875,
                    1378,
                    1922,
                    1476,
                    3235,
                    2279,
                    2120,
                    2311,
                    1772,
                    2317,
                    2191,
                    2288,
                    2001,
                    2773,
                    2263,
                    2170,
                    2011
                ],
                "jscode": [
                    1392,
                    1394
                ],
                "jsi": [
                    1394,
                    1395
                ],
                "JSInterpreter": [
                    1394
                ],
                "initial_function": [
                    1403,
                    1402,
                    1395,
                    1396
                ],
                "jsi.extract_function": [
                    1395
                ],
                "swfi": [
                    1401,
                    1402,
                    1399
                ],
                "SWFInterpreter": [
                    1399
                ],
                "file_contents": [
                    1399
                ],
                "TARGET_CLASSNAME": [
                    1400,
                    1401
                ],
                "searched_class": [
                    1401,
                    1402
                ],
                "swfi.extract_class": [
                    1401
                ],
                "swfi.extract_function": [
                    1402
                ],
                "player_url.startswith": [
                    1411
                ],
                "re.match": [
                    2787,
                    2724,
                    1413,
                    3014,
                    2728,
                    1649,
                    2964,
                    3128,
                    2716,
                    3005
                ],
                "compat_urlparse.urljoin": [
                    2881,
                    3098,
                    1414,
                    1845,
                    2746
                ],
                "compat_urlparse": [
                    2881,
                    1603,
                    3098,
                    1541,
                    1414,
                    2772,
                    1845,
                    1591,
                    1592,
                    2746
                ],
                "self._extract_signature_function": [
                    1419
                ],
                "self._print_sig_code": [
                    1425
                ],
                "Exception": [
                    1427
                ],
                "tb": [
                    1428,
                    1430
                ],
                "traceback.format_exc": [
                    1428
                ],
                "traceback": [
                    1428
                ],
                "subs_doc": [
                    1442,
                    1434
                ],
                "self._download_xml": [
                    1434,
                    1503
                ],
                "error_to_compat_str": [
                    1438
                ],
                "err": [
                    1438
                ],
                "sub_lang_list": [
                    1441,
                    1571,
                    1444,
                    1511,
                    1576,
                    1577,
                    1458,
                    1459,
                    1462,
                    1527,
                    1528,
                    1558,
                    1562,
                    1563
                ],
                "track": [
                    1442,
                    1443,
                    2440,
                    1452,
                    2417,
                    2229,
                    2238,
                    2239
                ],
                "subs_doc.findall": [
                    1442
                ],
                "lang": [
                    1443,
                    1444,
                    1572,
                    1573,
                    1449,
                    1458,
                    1559,
                    1560
                ],
                "track.attrib": [
                    1443,
                    1452
                ],
                "sub_formats": [
                    1446,
                    1543,
                    1514,
                    1547,
                    1454,
                    1458,
                    1523,
                    1527,
                    1535
                ],
                "ext": [
                    1536,
                    1539,
                    1447,
                    1545,
                    1451,
                    1515,
                    1519,
                    1456,
                    1525
                ],
                "self._SUBTITLE_FORMATS": [
                    1536,
                    1515,
                    1447
                ],
                "params": [
                    1448,
                    1516,
                    1524,
                    1455
                ],
                "compat_urllib_parse_urlencode": [
                    3075,
                    1604,
                    1542,
                    1448,
                    1769,
                    1516,
                    1497
                ],
                "encode": [
                    1452
                ],
                "sub_formats.append": [
                    1523,
                    1454,
                    1543
                ],
                "patterns": [
                    1465,
                    1477
                ],
                "config": [
                    1480,
                    1476,
                    1478
                ],
                "self._parse_json": [
                    1553,
                    1753,
                    1479
                ],
                "player_config": [
                    1488,
                    1492,
                    1486
                ],
                "self._get_ytplayer_config": [
                    1792,
                    1486
                ],
                "err_msg": [
                    1489,
                    1581,
                    1487
                ],
                "caption_url": [
                    1570,
                    1577,
                    1524,
                    1493,
                    1494,
                    1502
                ],
                "args.get": [
                    1795,
                    1802,
                    1805,
                    1551,
                    1808,
                    1493
                ],
                "timestamp": [
                    1520,
                    1495
                ],
                "list_params": [
                    1497,
                    1502
                ],
                "list_url": [
                    1502,
                    1503
                ],
                "caption_list": [
                    1504,
                    1512,
                    1503
                ],
                "original_lang_node": [
                    1504,
                    1505,
                    1508,
                    1509
                ],
                "caption_list.find": [
                    1504
                ],
                "original_lang": [
                    1508,
                    1517
                ],
                "original_lang_node.attrib": [
                    1508,
                    1509
                ],
                "caption_kind": [
                    1521,
                    1509
                ],
                "original_lang_node.attrib.get": [
                    1509
                ],
                "lang_node": [
                    1512,
                    1513
                ],
                "caption_list.findall": [
                    1512
                ],
                "sub_lang": [
                    1538,
                    1574,
                    1575,
                    1576,
                    1513,
                    1547,
                    1518,
                    1527,
                    1534
                ],
                "lang_node.attrib": [
                    1513
                ],
                "parsed_sub_url": [
                    1531,
                    1532,
                    1541
                ],
                "compat_urllib_parse_urlparse": [
                    1986,
                    1699,
                    1846,
                    1719,
                    1531
                ],
                "sub_url": [
                    1544,
                    1531,
                    1541
                ],
                "caption_qs": [
                    1537,
                    1532,
                    1542
                ],
                "compat_parse_qs": [
                    1570,
                    1986,
                    1573,
                    1701,
                    1980,
                    1848,
                    1719,
                    1784,
                    1881,
                    1532
                ],
                "parsed_sub_url.query": [
                    1532
                ],
                "captions": [
                    1547,
                    1548,
                    1533
                ],
                "sub_langs": [
                    1534
                ],
                "caption_qs.update": [
                    1537
                ],
                "compat_urlparse.urlunparse": [
                    1603,
                    1541
                ],
                "parsed_sub_url._replace": [
                    1541
                ],
                "player_response": [
                    1925,
                    1926,
                    2315,
                    1551,
                    1552,
                    1553,
                    1554,
                    1555,
                    1556,
                    1807,
                    1808,
                    1810,
                    1823,
                    1834,
                    1586,
                    2110,
                    1870,
                    1750,
                    2136,
                    1758,
                    2399,
                    2404,
                    1786
                ],
                "renderer": [
                    1556,
                    1557,
                    1559
                ],
                "base_url": [
                    3017,
                    1563,
                    1557,
                    3007
                ],
                "lang_code": [
                    1560,
                    1561,
                    1562
                ],
                "lang.get": [
                    1560
                ],
                "sub_lang_list.append": [
                    1576,
                    1562
                ],
                "make_captions": [
                    1577,
                    1563
                ],
                "caption_tracks": [
                    1568,
                    1570
                ],
                "caption_translation_languages": [
                    1569,
                    1572
                ],
                "caption_tracks.split": [
                    1570
                ],
                "caption_translation_languages.split": [
                    1572
                ],
                "lang_qs": [
                    1573,
                    1574
                ],
                "compat_urllib_parse_unquote_plus": [
                    1573,
                    2150,
                    2185,
                    1881,
                    3129
                ],
                "lang_qs.get": [
                    1574
                ],
                "KeyError": [
                    1580,
                    2356
                ],
                "IndexError": [
                    1580
                ],
                "playback_url": [
                    1603,
                    1607,
                    1585,
                    1589,
                    1591
                ],
                "url_or_none": [
                    2113,
                    1737,
                    1981,
                    1585,
                    1974,
                    2109
                ],
                "video_info": [
                    1797,
                    1798,
                    2181,
                    1928,
                    2185,
                    1802,
                    1933,
                    1936,
                    1809,
                    1937,
                    1942,
                    1823,
                    1830,
                    1831,
                    1836,
                    1588,
                    2114,
                    1732,
                    2384,
                    1873,
                    2385,
                    2390,
                    2391,
                    2140,
                    2399,
                    1761,
                    2147,
                    2404,
                    1910,
                    2294,
                    1784,
                    1785,
                    1787,
                    1788,
                    2301,
                    1918
                ],
                "parsed_playback_url": [
                    1592,
                    1604,
                    1591
                ],
                "compat_urlparse.urlparse": [
                    2772,
                    1591
                ],
                "qs": [
                    1604,
                    1720,
                    1848,
                    1719,
                    1592,
                    1849,
                    1599
                ],
                "compat_urlparse.parse_qs": [
                    1592,
                    2772
                ],
                "parsed_playback_url.query": [
                    1592
                ],
                "CPN_ALPHABET": [
                    1596,
                    1597
                ],
                "cpn": [
                    1601,
                    1597
                ],
                "random.randint": [
                    1597
                ],
                "random": [
                    1597
                ],
                "_": [
                    2090,
                    3220,
                    1597,
                    3223
                ],
                "qs.update": [
                    1599
                ],
                "parsed_playback_url._replace": [
                    1604
                ],
                "entries": [
                    1893,
                    1638,
                    1640,
                    1613,
                    2893,
                    1905,
                    2898,
                    1875,
                    1630
                ],
                "entries.extend": [
                    1638,
                    1630
                ],
                "matches": [
                    3178,
                    1635,
                    3173,
                    1638
                ],
                "m": [
                    2275,
                    2276,
                    1845,
                    1638
                ],
                "staticmethod": [
                    1610,
                    1642,
                    1655
                ],
                "urls": [
                    1644,
                    1645
                ],
                "YoutubeIE._extract_urls": [
                    1644
                ],
                "cls._VALID_URL": [
                    1649
                ],
                "re.VERBOSE": [
                    1649
                ],
                "description": [
                    1657,
                    1661
                ],
                "chapter_lines": [
                    1666,
                    1672,
                    1673,
                    1659,
                    1662
                ],
                "chapters": [
                    1664,
                    1683,
                    2327,
                    1688,
                    2427
                ],
                "next_num": [
                    1672,
                    1665,
                    1673
                ],
                "chapter_line": [
                    1665,
                    1681
                ],
                "time_point": [
                    1665,
                    1667
                ],
                "enumerate": [
                    1665
                ],
                "start_time": [
                    1697,
                    1667,
                    1668,
                    2435,
                    1670,
                    1702,
                    1703,
                    1704,
                    1705,
                    1678,
                    1684
                ],
                "parse_duration": [
                    2305,
                    1667,
                    1703,
                    1673,
                    1705,
                    1707
                ],
                "duration": [
                    1672,
                    1676,
                    1677,
                    1670
                ],
                "end_time": [
                    1698,
                    2436,
                    1672,
                    1674,
                    1706,
                    1676,
                    1677,
                    1678,
                    1707,
                    1685
                ],
                "chapter_title": [
                    1680,
                    1682,
                    1686
                ],
                "strip": [
                    1680,
                    2243,
                    2239
                ],
                "chapters.append": [
                    1683
                ],
                "smuggled_data": [
                    1867,
                    1691
                ],
                "unsmuggle_url": [
                    1691
                ],
                "proto": [
                    1767,
                    1897,
                    1775,
                    1712,
                    1716,
                    2008,
                    2428,
                    1693
                ],
                "parsed_url": [
                    1699,
                    1700
                ],
                "component": [
                    1700,
                    1701
                ],
                "parsed_url.fragment": [
                    1700
                ],
                "parsed_url.query": [
                    1700
                ],
                "self._NEXT_URL_RE": [
                    1710
                ],
                "lstrip": [
                    1712
                ],
                "compat_urllib_parse_unquote": [
                    1712
                ],
                "self.extract_id": [
                    1713
                ],
                "video_webpage": [
                    1792,
                    2178,
                    2306,
                    2313,
                    2189,
                    2319,
                    2194,
                    2199,
                    1817,
                    2297,
                    2217,
                    1841,
                    2227,
                    1717,
                    1723,
                    2371,
                    1865,
                    2255,
                    2003,
                    2387,
                    2265,
                    2018,
                    1763,
                    2276,
                    2282,
                    2159,
                    2289,
                    2169,
                    2298,
                    2172
                ],
                "self._download_webpage_handle": [
                    1717
                ],
                "urlh.geturl": [
                    1719
                ],
                "qs.get": [
                    1720,
                    1849
                ],
                "dash_mpds": [
                    1729,
                    1733,
                    1734,
                    1740,
                    1741,
                    2332
                ],
                "dash_mpd": [
                    1732,
                    1733,
                    1734,
                    1737,
                    1740,
                    1741
                ],
                "video_info.get": [
                    1732,
                    1836,
                    1936,
                    1937,
                    1942,
                    1785,
                    2399
                ],
                "dash_mpds.append": [
                    1741,
                    1734
                ],
                "pl_response": [
                    1786,
                    1738,
                    1785,
                    1750,
                    1751,
                    1753,
                    1754,
                    1755,
                    1756
                ],
                "is_live": [
                    2434,
                    1806,
                    1743,
                    1936,
                    1914,
                    1915
                ],
                "view_count": [
                    2287,
                    1744,
                    2288,
                    1909,
                    1910,
                    1911,
                    1912,
                    1788,
                    2429
                ],
                "int_or_none": [
                    1952,
                    1922,
                    2303,
                    1988,
                    1961,
                    1962,
                    1964,
                    1965,
                    2060,
                    2062,
                    1968,
                    2064,
                    1747,
                    1912,
                    2072,
                    2301,
                    1951
                ],
                "v_info": [
                    1747
                ],
                "str_or_none": [
                    1955,
                    2148,
                    1750,
                    2167
                ],
                "dict": [
                    1754,
                    1834,
                    1797,
                    1830
                ],
                "add_dash_mpd_pr": [
                    1810,
                    1755
                ],
                "embed_webpage": [
                    1762,
                    1768,
                    1773,
                    2003,
                    2007,
                    2009,
                    2012
                ],
                "age_gate": [
                    2337,
                    1764,
                    2003,
                    2037,
                    2005,
                    2425,
                    1790
                ],
                "video_info_url": [
                    1778,
                    1775
                ],
                "video_info_webpage": [
                    1784,
                    1777,
                    1782,
                    1783
                ],
                "extract_player_response": [
                    1808,
                    1786
                ],
                "add_dash_mpd": [
                    1787,
                    1798
                ],
                "extract_view_count": [
                    1788,
                    1910
                ],
                "ytplayer_config": [
                    1792,
                    1793,
                    1794
                ],
                "k": [
                    1797
                ],
                "v": [
                    1797
                ],
                "args.items": [
                    1797
                ],
                "YoutubeIE.ie_key": [
                    3016,
                    1804,
                    2596
                ],
                "messages": [
                    1821,
                    1819,
                    1820,
                    1813
                ],
                "tag": [
                    1816,
                    1814
                ],
                "kind": [
                    2090,
                    2092,
                    1814,
                    1816,
                    1817
                ],
                "msg": [
                    1818,
                    1819,
                    1815
                ],
                "self._html_search_regex": [
                    2733,
                    2903,
                    2225,
                    2738,
                    2197,
                    3093,
                    1815,
                    2267
                ],
                "messages.append": [
                    1819
                ],
                "unavailable_message": [
                    1824,
                    1825,
                    1826,
                    1828,
                    2393,
                    2394,
                    2395
                ],
                "extract_unavailable_message": [
                    1824,
                    2393,
                    2133
                ],
                "video_details": [
                    2148,
                    1865,
                    1833,
                    1836,
                    2293,
                    2167,
                    1911,
                    1912,
                    1915,
                    2303
                ],
                "video_details.get": [
                    2148,
                    1865,
                    1836,
                    2293,
                    2167,
                    1912,
                    1915,
                    2303
                ],
                "description_original": [
                    1841,
                    1854,
                    2327
                ],
                "video_description": [
                    1862,
                    1863,
                    1865,
                    1841,
                    1842,
                    1905,
                    2419,
                    2235,
                    2236,
                    1854
                ],
                "get_element_by_id": [
                    1841
                ],
                "redir_url": [
                    1852,
                    1845,
                    1846
                ],
                "m.group": [
                    2275,
                    1845
                ],
                "parsed_redir_url": [
                    1848,
                    1846,
                    1847
                ],
                "parsed_redir_url.netloc": [
                    1847
                ],
                "parsed_redir_url.path": [
                    1847
                ],
                "parsed_redir_url.query": [
                    1848
                ],
                "q": [
                    1849,
                    1850,
                    1851
                ],
                "replace_url": [
                    1862
                ],
                "clean_html": [
                    1863,
                    2220,
                    2704,
                    2135,
                    2139
                ],
                "self._html_search_meta": [
                    2305,
                    3012,
                    1865,
                    2188,
                    2386,
                    2868,
                    2871,
                    2168
                ],
                "smuggled_data.get": [
                    1867
                ],
                "multifeed_metadata_list": [
                    1874,
                    1877,
                    1869
                ],
                "feed_ids": [
                    1904,
                    1876,
                    1901
                ],
                "feed": [
                    1881,
                    1877
                ],
                "multifeed_metadata_list.split": [
                    1877
                ],
                "feed_data": [
                    1881,
                    1884,
                    1897
                ],
                "name": [
                    1884,
                    2957
                ],
                "feed_id": [
                    1901,
                    1886,
                    1887
                ],
                "feed_entry": [
                    1889,
                    1886
                ],
                "feed_title": [
                    1889,
                    1891,
                    1892
                ],
                "entries.append": [
                    1893
                ],
                "smuggle_url": [
                    1896
                ],
                "feed_ids.append": [
                    1901
                ],
                "bool_or_none": [
                    1915
                ],
                "media_url": [
                    1923
                ],
                "streaming_formats": [
                    1954,
                    1925,
                    1926,
                    1936,
                    1971
                ],
                "streaming_formats.extend": [
                    1926
                ],
                "startswith": [
                    1928
                ],
                "self.report_rtmp_download": [
                    1929
                ],
                "formats": [
                    2433,
                    2402,
                    2116,
                    1930,
                    2379,
                    2383,
                    2131,
                    1940,
                    2106,
                    2365,
                    2366
                ],
                "encoded_url_map": [
                    1937,
                    1938
                ],
                "formats_spec": [
                    2050,
                    2051,
                    1960,
                    1941,
                    1949
                ],
                "fmt_list": [
                    1944,
                    1942,
                    1943
                ],
                "fmt": [
                    2060,
                    2062,
                    2067,
                    2068,
                    2071,
                    1944,
                    1945,
                    2072,
                    1954,
                    1955,
                    2085,
                    1958,
                    1959,
                    1961,
                    1962,
                    1964,
                    1965,
                    1967,
                    1968,
                    1971,
                    1972,
                    1974,
                    1977,
                    1993
                ],
                "fmt_list.split": [
                    1944
                ],
                "spec": [
                    1945,
                    1946,
                    1947,
                    1949,
                    1950
                ],
                "fmt.split": [
                    1945
                ],
                "width_height": [
                    1952,
                    1947,
                    1948,
                    1951
                ],
                "split": [
                    2088,
                    2241,
                    1947
                ],
                "itag": [
                    1955,
                    1956,
                    1960,
                    2120,
                    2122,
                    2123,
                    2124,
                    2125,
                    1967
                ],
                "fmt.get": [
                    2060,
                    2062,
                    2067,
                    2068,
                    2071,
                    2072,
                    1955,
                    2085,
                    1958,
                    1959,
                    1961,
                    1962,
                    1964,
                    1965,
                    1967,
                    1968,
                    1972,
                    1974,
                    1977,
                    1993
                ],
                "quality": [
                    2080,
                    2067,
                    1958,
                    1959
                ],
                "quality_label": [
                    2080,
                    1963,
                    2068,
                    1959
                ],
                "float_or_none": [
                    1967,
                    2293,
                    2294,
                    2071,
                    2070
                ],
                "cipher": [
                    1985,
                    1998,
                    1977,
                    1978,
                    1980
                ],
                "url_data": [
                    1986,
                    1988,
                    2021,
                    2022,
                    2023,
                    2024,
                    1993,
                    2056,
                    2085,
                    1999,
                    2064,
                    2067,
                    2068,
                    2038,
                    2070,
                    2072,
                    1980,
                    1981
                ],
                "stream_type": [
                    1988,
                    1990
                ],
                "format_id": [
                    2048,
                    2049,
                    2050,
                    2051,
                    1993,
                    1994,
                    1996,
                    2034,
                    2071,
                    2044
                ],
                "ASSETS_RE": [
                    2000,
                    2002,
                    2012
                ],
                "jsplayer_url_json": [
                    2001,
                    2011,
                    2005,
                    2014
                ],
                "embed_url": [
                    2008,
                    2010
                ],
                "json.loads": [
                    2019,
                    2014
                ],
                "player_url_json": [
                    2016,
                    2019
                ],
                "encrypted_sig": [
                    2024,
                    2032,
                    2037
                ],
                "player_desc": [
                    2034,
                    2028,
                    2031
                ],
                "player_version": [
                    2030,
                    2031
                ],
                "parts_sizes": [
                    2032,
                    2034
                ],
                "signature": [
                    2036,
                    2039
                ],
                "self._decrypt_signature": [
                    2337,
                    2036
                ],
                "sp": [
                    2038,
                    2039
                ],
                "dct": [
                    2049,
                    2051,
                    2084,
                    2091,
                    2125,
                    2126,
                    2127,
                    2100,
                    2101,
                    2102,
                    2106,
                    2043
                ],
                "self._formats": [
                    2048,
                    2049,
                    2344,
                    2124,
                    2125
                ],
                "dct.update": [
                    2049,
                    2051,
                    2100,
                    2126
                ],
                "url_data.get": [
                    2085,
                    2056,
                    2064,
                    2067,
                    2068,
                    2070,
                    2072
                ],
                "width": [
                    2057,
                    2059,
                    2060,
                    2077
                ],
                "height": [
                    2057,
                    2061,
                    2062,
                    2078
                ],
                "filesize": [
                    2064,
                    2075
                ],
                "_extract_filesize": [
                    2065,
                    2346
                ],
                "tbr": [
                    2076,
                    2070
                ],
                "fps": [
                    2072,
                    2079
                ],
                "more_fields": [
                    2074,
                    2082
                ],
                "key": [
                    2082,
                    2084
                ],
                "value": [
                    2082,
                    2083,
                    2084
                ],
                "more_fields.items": [
                    2082
                ],
                "type_": [
                    2095,
                    2085,
                    2086,
                    2087
                ],
                "type_split": [
                    2088,
                    2091,
                    2087
                ],
                "type_.split": [
                    2087
                ],
                "kind_ext": [
                    2088,
                    2089,
                    2090
                ],
                "mimetype2ext": [
                    2091
                ],
                "codecs": [
                    2097,
                    2099,
                    2100,
                    2093
                ],
                "parse_codecs": [
                    2100
                ],
                "dct.get": [
                    2101
                ],
                "formats.append": [
                    2106,
                    2131
                ],
                "manifest_url": [
                    2115,
                    2108,
                    2118
                ],
                "m3u8_formats": [
                    2117,
                    2119
                ],
                "self._extract_m3u8_formats": [
                    2117
                ],
                "a_format": [
                    2119,
                    2121,
                    2123,
                    2126,
                    2127,
                    2128,
                    2130,
                    2131
                ],
                "a_format.setdefault": [
                    2130
                ],
                "error_message": [
                    2133,
                    2134,
                    2135,
                    2138,
                    2139,
                    2141,
                    2142
                ],
                "video_uploader": [
                    2408,
                    2146,
                    2149,
                    2150
                ],
                "video_uploader_id": [
                    2409,
                    2161,
                    2155
                ],
                "video_uploader_url": [
                    2162,
                    2156,
                    2410
                ],
                "channel_id": [
                    3008,
                    2883,
                    2852,
                    2855,
                    2857,
                    2411,
                    2909,
                    2863,
                    2898,
                    2901,
                    2166,
                    2173,
                    3006
                ],
                "channel_url": [
                    2412,
                    2173,
                    2871,
                    2874,
                    2877
                ],
                "m_thumb": [
                    2177,
                    2179,
                    2180
                ],
                "re.DOTALL": [
                    2178
                ],
                "video_thumbnail": [
                    2185,
                    2418,
                    2180,
                    2183
                ],
                "m_thumb.group": [
                    2180
                ],
                "upload_date": [
                    2188,
                    2413,
                    2190,
                    2191,
                    2195
                ],
                "unified_strdate": [
                    2195
                ],
                "video_license": [
                    2197,
                    2414
                ],
                "m_music": [
                    2201,
                    2218,
                    2219,
                    2220
                ],
                "video_alt_title": [
                    2417,
                    2219,
                    2222
                ],
                "remove_quotes": [
                    2219
                ],
                "m_music.group": [
                    2219,
                    2220
                ],
                "video_creator": [
                    2220,
                    2222,
                    2415
                ],
                "field": [
                    2226,
                    2227
                ],
                "extract_meta": [
                    2229,
                    2230,
                    2231
                ],
                "artist": [
                    2240,
                    2241,
                    2441,
                    2415,
                    2230
                ],
                "album": [
                    2242,
                    2243,
                    2442,
                    2231
                ],
                "release_date": [
                    2245,
                    2246,
                    2247,
                    2249,
                    2443,
                    2234
                ],
                "release_year": [
                    2244,
                    2248,
                    2249,
                    2250,
                    2251,
                    2444,
                    2234
                ],
                "a.strip": [
                    2241
                ],
                "a": [
                    2241
                ],
                "release_date.replace": [
                    2247
                ],
                "m_episode": [
                    2253,
                    2256,
                    2257,
                    2258,
                    2259
                ],
                "series": [
                    2257,
                    2261,
                    2437
                ],
                "m_episode.group": [
                    2257,
                    2258,
                    2259
                ],
                "season_number": [
                    2258,
                    2261,
                    2438
                ],
                "episode_number": [
                    2259,
                    2261,
                    2439
                ],
                "m_cat_container": [
                    2266,
                    2268,
                    2263
                ],
                "category": [
                    2267,
                    2270
                ],
                "video_categories": [
                    2272,
                    2420,
                    2270
                ],
                "video_tags": [
                    2274,
                    2421
                ],
                "self._meta_regex": [
                    2276
                ],
                "str_to_int": [
                    2288,
                    2279
                ],
                "re.escape": [
                    2281,
                    2687
                ],
                "count_name": [
                    2281,
                    2282
                ],
                "like_count": [
                    2284,
                    2430
                ],
                "_extract_count": [
                    2284,
                    2285
                ],
                "dislike_count": [
                    2285,
                    2431
                ],
                "average_rating": [
                    2432,
                    2292
                ],
                "video_subtitles": [
                    2297,
                    2422
                ],
                "self.extract_subtitles": [
                    2297
                ],
                "automatic_captions": [
                    2298,
                    2423
                ],
                "self.extract_automatic_captions": [
                    2298
                ],
                "video_duration": [
                    2304,
                    2305,
                    2327,
                    2424,
                    2300,
                    2302,
                    2303
                ],
                "video_annotations": [
                    2321,
                    2426,
                    2309
                ],
                "xsrf_token": [
                    2316,
                    2325,
                    2311
                ],
                "invideo_url": [
                    2314,
                    2322,
                    2316
                ],
                "xsrf_field_name": [
                    2325,
                    2317
                ],
                "self._proto_relative_url": [
                    2322
                ],
                "self._extract_chapters": [
                    2327
                ],
                "dash_mpd_fatal": [
                    2355,
                    2331,
                    2343
                ],
                "mpd_url": [
                    2332,
                    2340,
                    2343
                ],
                "dash_formats": [
                    2348,
                    2349,
                    2359,
                    2333,
                    2365,
                    2366
                ],
                "dec_s": [
                    2337,
                    2338
                ],
                "decrypt_sig": [
                    2340
                ],
                "df": [
                    2342,
                    2345,
                    2346,
                    2348,
                    2349
                ],
                "self._extract_mpd_formats": [
                    2342
                ],
                "df.get": [
                    2345
                ],
                "self.report_warning": [
                    2731,
                    2357
                ],
                "f": [
                    2379,
                    2380,
                    2365,
                    2381
                ],
                "dash_formats.keys": [
                    2365
                ],
                "formats.extend": [
                    2366
                ],
                "dash_formats.values": [
                    2366
                ],
                "stretched_m": [
                    2369,
                    2372,
                    2373,
                    2374
                ],
                "w": [
                    2377,
                    2378,
                    2373
                ],
                "float": [
                    3059,
                    2373,
                    2374
                ],
                "stretched_m.group": [
                    2373,
                    2374
                ],
                "h": [
                    2377,
                    2378,
                    2374
                ],
                "ratio": [
                    2378,
                    2381
                ],
                "f.get": [
                    2380
                ],
                "regions_allowed": [
                    2386,
                    2388
                ],
                "countries": [
                    2388,
                    2390
                ],
                "regions_allowed.split": [
                    2388
                ],
                "self.raise_geo_restricted": [
                    2389
                ],
                "reason": [
                    2720,
                    2391,
                    2392,
                    2395,
                    2397,
                    2718,
                    2719
                ],
                "self._sort_formats": [
                    2402
                ],
                "self.mark_watched": [
                    2404
                ],
                "YoutubePlaylistBaseInfoExtractor": [
                    2448,
                    2811,
                    3051
                ],
                "_TEMPLATE_URL": [
                    2915,
                    2475,
                    2814
                ],
                "_VIDEO_RE_TPL": [
                    2476,
                    2477
                ],
                "_VIDEO_RE": [
                    3052,
                    2477,
                    2815
                ],
                "item": [
                    2652,
                    2654
                ],
                "attrs": [
                    2656,
                    2654,
                    2655
                ],
                "extract_attributes": [
                    2654
                ],
                "attrs.get": [
                    2656
                ],
                "last_id": [
                    2680,
                    2682,
                    2695
                ],
                "n": [
                    2684,
                    3101,
                    2681,
                    3100,
                    3069
                ],
                "new_ids": [
                    2691,
                    2692,
                    2694,
                    3178,
                    3179,
                    3182,
                    3184,
                    2685
                ],
                "_id": [
                    2691
                ],
                "ids.extend": [
                    3182,
                    2694
                ],
                "url_results": [
                    2697,
                    2706
                ],
                "self._ids_to_results": [
                    3184,
                    2697
                ],
                "search_title": [
                    2699,
                    2701,
                    2702,
                    2703
                ],
                "get_element_by_attribute": [
                    2699
                ],
                "class_name": [
                    2699
                ],
                "title_span": [
                    2704,
                    2700
                ],
                "self._TEMPLATE_URL": [
                    2852,
                    2709,
                    2965
                ],
                "match": [
                    2724,
                    2728,
                    2731,
                    2713,
                    2714,
                    2716
                ],
                "match.strip": [
                    2714
                ],
                "playlist_title": [
                    2752,
                    2761,
                    2733
                ],
                "_UPLOADER_BASE": [
                    2737,
                    2739,
                    2742
                ],
                "uploader": [
                    2738,
                    2763
                ],
                "uploader_id": [
                    2745,
                    2764,
                    2748
                ],
                "uploader_url": [
                    2746,
                    2748,
                    2765
                ],
                "has_videos": [
                    2758,
                    2768,
                    2801,
                    2800,
                    2750
                ],
                "next": [
                    2756,
                    2901
                ],
                "StopIteration": [
                    2757,
                    2902
                ],
                "playlist": [
                    2760,
                    2762,
                    2800,
                    2768,
                    2802,
                    3223,
                    3224
                ],
                "playlist.update": [
                    2762
                ],
                "query_dict": [
                    2772,
                    2773
                ],
                "query_dict.get": [
                    2773
                ],
                "self._VALID_URL": [
                    3128,
                    2787,
                    2964,
                    3005
                ],
                "video": [
                    2792,
                    2793,
                    2794,
                    3220,
                    3221,
                    3222
                ],
                "self._check_download_just_video": [
                    2792,
                    3220
                ],
                "playlist_id.startswith": [
                    2796
                ],
                "self._extract_mix": [
                    2798
                ],
                "self._extract_playlist": [
                    2800,
                    3223
                ],
                "YoutubePlaylistsIE.suitable": [
                    2848
                ],
                "YoutubePlaylistsIE": [
                    2848
                ],
                "YoutubeLiveIE.suitable": [
                    2848
                ],
                "YoutubeLiveIE": [
                    2848
                ],
                "suitable": [
                    2849,
                    2961
                ],
                "YoutubeChannelIE": [
                    2912,
                    2849
                ],
                "self._build_template_url": [
                    2857
                ],
                "channel_page": [
                    2883,
                    2888,
                    2862,
                    2865,
                    2897,
                    2869,
                    2901,
                    2905,
                    2873,
                    2909
                ],
                "channel_playlist_id": [
                    2866,
                    2868,
                    2870,
                    2875,
                    2878,
                    2879
                ],
                "channel_playlist_id.startswith": [
                    2878
                ],
                "autogenerated": [
                    2890,
                    2884
                ],
                "alert_message": [
                    2906,
                    2907,
                    2903
                ],
                "other_yt_ies": [
                    2957,
                    2958
                ],
                "iter": [
                    2957
                ],
                "klass": [
                    2957
                ],
                "items": [
                    2957
                ],
                "globals": [
                    2957
                ],
                "name.startswith": [
                    2957
                ],
                "name.endswith": [
                    2957
                ],
                "any": [
                    2958
                ],
                "ie.suitable": [
                    2958
                ],
                "ie": [
                    2958
                ],
                "YoutubeUserIE": [
                    2961
                ],
                "page_type": [
                    3010,
                    3014
                ],
                "self._og_search_property": [
                    3010
                ],
                "page_type.startswith": [
                    3014
                ],
                "YoutubePlaylistsBaseInfoExtractor": [
                    3020,
                    3134
                ],
                "SearchInfoExtractor": [
                    3055
                ],
                "YoutubeSearchBaseInfoExtractor": [
                    3112,
                    3055
                ],
                "_MAX_RESULTS": [
                    3059
                ],
                "_SEARCH_KEY": [
                    3107,
                    3061
                ],
                "_EXTRA_QUERY_ARGS": [
                    3109,
                    3062
                ],
                "videos": [
                    3100,
                    3090,
                    3091,
                    3068,
                    3101,
                    3102
                ],
                "limit": [
                    3091,
                    3069
                ],
                "url_query": [
                    3074,
                    3075,
                    3071
                ],
                "query.encode": [
                    3072
                ],
                "url_query.update": [
                    3074
                ],
                "self._EXTRA_QUERY_ARGS": [
                    3074
                ],
                "result_url": [
                    3098,
                    3075,
                    3079
                ],
                "pagenum": [
                    3080,
                    3077
                ],
                "html_content": [
                    3089,
                    3083,
                    3085,
                    3095
                ],
                "new_videos": [
                    3089,
                    3090,
                    3091
                ],
                "next_link": [
                    3096,
                    3098,
                    3093
                ],
                "YoutubeSearchIE": [
                    3105,
                    3106
                ],
                "YoutubeSearchIE.IE_NAME": [
                    3106
                ],
                "_real_extract": [
                    3149
                ],
                "YoutubeShowIE": [
                    3149
                ],
                "self._FEED_NAME": [
                    3200,
                    3162
                ],
                "property": [
                    3160
                ],
                "filter": [
                    3178
                ],
                "self._PLAYLIST_TITLE": [
                    3192,
                    3201,
                    3203
                ],
                "YoutubePlaylistIE": [
                    3206
                ],
                "YoutubeFeedsInfoExtractor": [
                    3253,
                    3246,
                    3239
                ],
                "_FEED_NAME": [
                    3256,
                    3249,
                    3242
                ],
                "_PLAYLIST_TITLE": [
                    3257,
                    3250,
                    3243
                ]
            },
            "filtered_variables_in_file": {
                "InfoExtractor": [
                    58,
                    3260,
                    3309
                ],
                "_LOGIN_URL": [
                    60
                ],
                "_TWOFACTOR_URL": [
                    61
                ],
                "_LOOKUP_URL": [
                    63
                ],
                "_CHALLENGE_URL": [
                    64
                ],
                "_TFA_URL": [
                    65
                ],
                "_NETRC_MACHINE": [
                    67
                ],
                "_LOGIN_REQUIRED": [
                    69,
                    3158,
                    3231
                ],
                "_PLAYLIST_ID_RE": [
                    71
                ],
                "self._set_cookie": [
                    74
                ],
                "self": [
                    1536,
                    2048,
                    2049,
                    3074,
                    3078,
                    1553,
                    3089,
                    3093,
                    3102,
                    1581,
                    3128,
                    3130,
                    3131,
                    2117,
                    1606,
                    2120,
                    74,
                    2124,
                    2125,
                    3148,
                    3149,
                    81,
                    2646,
                    3162,
                    92,
                    3165,
                    95,
                    96,
                    99,
                    100,
                    2663,
                    2152,
                    2664,
                    106,
                    2667,
                    2670,
                    3184,
                    2164,
                    3191,
                    2168,
                    3192,
                    122,
                    2170,
                    2683,
                    3199,
                    3200,
                    3201,
                    3202,
                    3203,
                    132,
                    2182,
                    2697,
                    2188,
                    2191,
                    2706,
                    148,
                    2197,
                    2709,
                    2710,
                    3220,
                    3223,
                    1694,
                    3234,
                    3235,
                    3236,
                    168,
                    2731,
                    2733,
                    1710,
                    1713,
                    2225,
                    2738,
                    1717,
                    2756,
                    2760,
                    2761,
                    203,
                    2773,
                    2263,
                    1753,
                    2777,
                    2267,
                    2778,
                    221,
                    2779,
                    2781,
                    2787,
                    2276,
                    2279,
                    1768,
                    2792,
                    1772,
                    2798,
                    2288,
                    1265,
                    1266,
                    1777,
                    2800,
                    245,
                    1270,
                    2808,
                    2297,
                    1274,
                    2298,
                    3320,
                    1278,
                    255,
                    1792,
                    2305,
                    1282,
                    2310,
                    2311,
                    1803,
                    2317,
                    271,
                    1809,
                    2321,
                    275,
                    1299,
                    277,
                    278,
                    1303,
                    1815,
                    2322,
                    1306,
                    2327,
                    2330,
                    287,
                    1312,
                    2337,
                    1316,
                    2852,
                    2342,
                    2855,
                    1320,
                    2344,
                    1322,
                    2857,
                    300,
                    1838,
                    1327,
                    2862,
                    2868,
                    2357,
                    1335,
                    2871,
                    2875,
                    2880,
                    323,
                    324,
                    2883,
                    1865,
                    1868,
                    2894,
                    2897,
                    2386,
                    2898,
                    2389,
                    2901,
                    2903,
                    349,
                    350,
                    1375,
                    2909,
                    1378,
                    2402,
                    2404,
                    359,
                    363,
                    364,
                    365,
                    366,
                    1902,
                    1905,
                    1907,
                    1922,
                    1417,
                    1418,
                    1419,
                    1929,
                    1422,
                    1423,
                    1424,
                    1425,
                    2964,
                    2965,
                    1434,
                    1438,
                    1447,
                    1460,
                    3005,
                    3008,
                    3010,
                    1476,
                    3012,
                    1479,
                    3016,
                    3017,
                    1485,
                    1486,
                    1999,
                    1489,
                    2001,
                    2009,
                    2011,
                    1503,
                    2016,
                    1506,
                    2026,
                    1515,
                    2030,
                    2032,
                    2033,
                    2036
                ],
                "time.time": [
                    77
                ],
                "time": [
                    77
                ],
                "self.url_result": [
                    2880,
                    324,
                    3236,
                    359,
                    3016,
                    3017,
                    1803,
                    2894,
                    81,
                    2808,
                    2779
                ],
                "vid_id": [
                    81,
                    82
                ],
                "ids": [
                    3170,
                    2691,
                    2694,
                    2695,
                    2697,
                    3178,
                    3182,
                    82,
                    2679
                ],
                "username": [
                    144,
                    92,
                    94,
                    135
                ],
                "password": [
                    161,
                    92
                ],
                "self._get_login_info": [
                    92
                ],
                "self._LOGIN_REQUIRED": [
                    95
                ],
                "self._downloader.params.get": [
                    1312,
                    2310,
                    2026,
                    1868,
                    1999,
                    1424,
                    1809,
                    2777,
                    2330,
                    1694,
                    95
                ],
                "self._downloader.params": [
                    1312,
                    2310,
                    2026,
                    1868,
                    1999,
                    1424,
                    1809,
                    2777,
                    2330,
                    1694,
                    95
                ],
                "self._downloader": [
                    132,
                    2182,
                    2310,
                    1424,
                    1809,
                    275,
                    1306,
                    2330,
                    1694,
                    1438,
                    1312,
                    1581,
                    1838,
                    1460,
                    1335,
                    1868,
                    1999,
                    1489,
                    2777,
                    95,
                    1506,
                    2152,
                    2026,
                    2164
                ],
                "ExtractorError": [
                    1409,
                    3086,
                    1295,
                    1939,
                    1429,
                    1437,
                    1827,
                    2723,
                    2725,
                    1580,
                    306,
                    2356,
                    2907,
                    2396,
                    2142,
                    2143,
                    96,
                    2400,
                    3300,
                    2789,
                    1651,
                    1781,
                    3321,
                    1919
                ],
                "self.IE_NAME": [
                    96,
                    245
                ],
                "login_page": [
                    106,
                    99,
                    103
                ],
                "self._download_webpage": [
                    3008,
                    3234,
                    99,
                    1316,
                    2883,
                    1606,
                    1768,
                    364,
                    2862,
                    1777,
                    2321,
                    2710,
                    2009,
                    3130,
                    2683,
                    3199,
                    255
                ],
                "self._LOGIN_URL": [
                    100
                ],
                "login_form": [
                    106,
                    109
                ],
                "self._hidden_inputs": [
                    106
                ],
                "data": [
                    3078,
                    1769,
                    3083,
                    109,
                    110,
                    1775,
                    126
                ],
                "login_form.copy": [
                    109
                ],
                "data.update": [
                    110
                ],
                "json.dumps": [
                    116
                ],
                "json": [
                    2019,
                    116,
                    2014
                ],
                "f_req": [
                    116
                ],
                "self._download_json": [
                    122,
                    300,
                    3078,
                    3191
                ],
                "url": [
                    2958,
                    2065,
                    2961,
                    2964,
                    2709,
                    2710,
                    3220,
                    1691,
                    2848,
                    2849,
                    1699,
                    2855,
                    2857,
                    1710,
                    2863,
                    1712,
                    1713,
                    1716,
                    1717,
                    1845,
                    1974,
                    1976,
                    3128,
                    2746,
                    3130,
                    1981,
                    1982,
                    3005,
                    3008,
                    2881,
                    1986,
                    2883,
                    3320,
                    3322,
                    3148,
                    2772,
                    2774,
                    2787,
                    2789,
                    2022,
                    1767,
                    1768,
                    2792,
                    363,
                    364,
                    1649,
                    1651,
                    2039,
                    2040,
                    2041,
                    2682,
                    123,
                    2684,
                    2045
                ],
                "note": [
                    123
                ],
                "errnote": [
                    123
                ],
                "re.sub": [
                    2340,
                    1680,
                    1682,
                    124,
                    1725,
                    1854
                ],
                "re": [
                    2177,
                    2178,
                    1413,
                    2056,
                    1291,
                    1680,
                    1682,
                    2964,
                    2201,
                    2713,
                    2716,
                    290,
                    2340,
                    2724,
                    2728,
                    1710,
                    2094,
                    2741,
                    1847,
                    3128,
                    1723,
                    2236,
                    1725,
                    1854,
                    3005,
                    2369,
                    2884,
                    3014,
                    327,
                    2253,
                    1615,
                    2652,
                    1632,
                    1635,
                    356,
                    1763,
                    2276,
                    2787,
                    3173,
                    2281,
                    2157,
                    1649,
                    3187,
                    1659,
                    124,
                    2685,
                    2687
                ],
                "s": [
                    2336,
                    2337,
                    1417,
                    1420,
                    1425,
                    1426,
                    1396,
                    1308,
                    1403,
                    124
                ],
                "urlencode_postdata": [
                    2325,
                    126
                ],
                "self._downloader.report_warning": [
                    1506,
                    132,
                    2182,
                    2152,
                    1581,
                    1838,
                    1489,
                    1460,
                    2164,
                    1438
                ],
                "message": [
                    2721,
                    2722,
                    2723,
                    132,
                    2719
                ],
                "lookup_req": [
                    148,
                    134
                ],
                "lookup_results": [
                    154,
                    147,
                    151
                ],
                "req": [
                    147,
                    220,
                    167
                ],
                "self._LOOKUP_URL": [
                    148
                ],
                "user_hash": [
                    160,
                    154,
                    155,
                    214
                ],
                "try_get": [
                    1925,
                    1926,
                    2314,
                    154,
                    1833,
                    174,
                    176,
                    1585,
                    1587,
                    182,
                    187,
                    189,
                    1981,
                    2109,
                    193,
                    2113,
                    1988,
                    198,
                    1737,
                    1869,
                    1872,
                    1747,
                    2135,
                    1884,
                    2140,
                    2399,
                    2146,
                    227,
                    229,
                    235,
                    2038,
                    2294,
                    249,
                    2300
                ],
                "x": [
                    1925,
                    1926,
                    2315,
                    154,
                    1834,
                    174,
                    176,
                    1587,
                    1588,
                    182,
                    187,
                    189,
                    1981,
                    2111,
                    193,
                    2114,
                    1988,
                    198,
                    1738,
                    1871,
                    1873,
                    1747,
                    2136,
                    1884,
                    2140,
                    2399,
                    227,
                    2147,
                    229,
                    236,
                    2038,
                    2294,
                    249,
                    2301
                ],
                "compat_str": [
                    1286,
                    2315,
                    1552,
                    154,
                    176,
                    1981,
                    189,
                    2112,
                    193,
                    2114,
                    198,
                    1739,
                    1996,
                    1872,
                    1873,
                    2137,
                    1884,
                    1372,
                    2140,
                    2148,
                    229,
                    236,
                    2038,
                    249
                ],
                "warn": [
                    195,
                    230,
                    262,
                    200,
                    206,
                    177,
                    252,
                    246,
                    184,
                    156
                ],
                "challenge_req": [
                    168,
                    159
                ],
                "challenge_results": [
                    198,
                    167,
                    171,
                    174,
                    182
                ],
                "self._CHALLENGE_URL": [
                    168
                ],
                "login_res": [
                    176,
                    174,
                    175
                ],
                "login_msg": [
                    176,
                    179
                ],
                "res": [
                    1320,
                    1327,
                    1332,
                    182,
                    183,
                    1336,
                    249,
                    187
                ],
                "login_challenge": [
                    193,
                    187,
                    188,
                    189
                ],
                "challenge_str": [
                    245,
                    244,
                    189,
                    190
                ],
                "status": [
                    193,
                    194
                ],
                "tl": [
                    221,
                    198,
                    199
                ],
                "tfa_code": [
                    217,
                    203,
                    205,
                    211
                ],
                "self._get_tfa_info": [
                    203
                ],
                "remove_start": [
                    211
                ],
                "tfa_req": [
                    221,
                    213
                ],
                "tfa_results": [
                    224,
                    227,
                    220,
                    236
                ],
                "self._TFA_URL.format": [
                    221
                ],
                "self._TFA_URL": [
                    221
                ],
                "tfa_res": [
                    227,
                    228,
                    229
                ],
                "tfa_msg": [
                    232,
                    229
                ],
                "check_cookie_url": [
                    256,
                    249,
                    235,
                    251
                ],
                "CHALLENGES": [
                    243,
                    238
                ],
                "challenge": [
                    243,
                    246
                ],
                "CHALLENGES.get": [
                    243
                ],
                "check_cookie_results": [
                    258,
                    261,
                    255
                ],
                "query": [
                    3072,
                    3079,
                    268,
                    269,
                    270,
                    3102,
                    1701,
                    1702,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1719,
                    3129,
                    3130,
                    3131,
                    1986,
                    2772
                ],
                "copy": [
                    268,
                    2125
                ],
                "kwargs.get": [
                    268
                ],
                "kwargs": [
                    272,
                    1265,
                    268,
                    270
                ],
                "_download_webpage_handle": [
                    271
                ],
                "YoutubeBaseInfoExtractor": [
                    2474,
                    271,
                    369,
                    3153,
                    435,
                    2968,
                    282,
                    3227
                ],
                "args": [
                    1568,
                    1569,
                    1794,
                    1795,
                    1797,
                    1802,
                    1804,
                    1805,
                    1551,
                    272,
                    1265,
                    1808,
                    1492,
                    1493,
                    1495
                ],
                "compat_kwargs": [
                    272
                ],
                "self._set_language": [
                    277
                ],
                "self._login": [
                    2646,
                    3165,
                    278
                ],
                "more_widget_html": [
                    290,
                    3171,
                    3187,
                    3196,
                    285,
                    318
                ],
                "content_html": [
                    3171,
                    3173,
                    313,
                    314,
                    3195,
                    285,
                    287
                ],
                "page": [
                    3171,
                    2756,
                    3203,
                    327,
                    2664,
                    2761,
                    2668,
                    2671,
                    2735,
                    2740,
                    2710,
                    2743,
                    2713,
                    285,
                    2653,
                    350,
                    3199
                ],
                "page_num": [
                    3193,
                    3172,
                    286,
                    303
                ],
                "itertools.count": [
                    2681,
                    3172,
                    3077,
                    286
                ],
                "itertools": [
                    2681,
                    3172,
                    3077,
                    286
                ],
                "entry": [
                    288,
                    3185,
                    3184,
                    287
                ],
                "self._process_page": [
                    3089,
                    3131,
                    287
                ],
                "mobj": [
                    2056,
                    2057,
                    2964,
                    2965,
                    2716,
                    2717,
                    2718,
                    2336,
                    290,
                    291,
                    301,
                    1710,
                    1711,
                    1712,
                    2094,
                    2096,
                    2097,
                    2741,
                    2744,
                    2745,
                    2746,
                    1723,
                    1724,
                    1725,
                    2236,
                    2237,
                    2239,
                    2241,
                    3005,
                    2243,
                    2244,
                    2245,
                    3006,
                    327,
                    3007,
                    329,
                    331,
                    333,
                    1614,
                    1615,
                    2787,
                    2788,
                    2790,
                    2157,
                    2160,
                    1649,
                    1650,
                    2161,
                    1652,
                    2162,
                    3187,
                    3188,
                    3192,
                    3128,
                    3129
                ],
                "re.search": [
                    2177,
                    290,
                    1763,
                    2369,
                    2884,
                    2056,
                    1291,
                    2157,
                    1710,
                    2253,
                    3187,
                    2741,
                    1847,
                    2201,
                    1723,
                    2236
                ],
                "count": [
                    294,
                    296,
                    303,
                    308,
                    309
                ],
                "retries": [
                    296,
                    309,
                    295
                ],
                "more": [
                    300,
                    3191,
                    313,
                    3195,
                    3196,
                    318
                ],
                "mobj.group": [
                    2057,
                    2965,
                    2718,
                    2336,
                    301,
                    1712,
                    2096,
                    2097,
                    2745,
                    2746,
                    3129,
                    1725,
                    3006,
                    2239,
                    3007,
                    2241,
                    2243,
                    2244,
                    2245,
                    329,
                    331,
                    333,
                    1614,
                    2790,
                    2161,
                    2162,
                    1652,
                    3192
                ],
                "playlist_id": [
                    2706,
                    2709,
                    2710,
                    3235,
                    3236,
                    301,
                    2879,
                    2881,
                    2756,
                    2761,
                    3148,
                    3150,
                    2781,
                    356,
                    2790,
                    360,
                    2792,
                    363,
                    364,
                    2796,
                    366,
                    2798,
                    2800,
                    2680,
                    2682,
                    2684,
                    2687
                ],
                "uppercase_escape": [
                    304,
                    3194,
                    1480
                ],
                "e.cause": [
                    307
                ],
                "e": [
                    2358,
                    307,
                    1430
                ],
                "compat_HTTPError": [
                    307
                ],
                "e.cause.code": [
                    307
                ],
                "content_html.strip": [
                    314
                ],
                "YoutubeEntryListBaseInfoExtractor": [
                    321,
                    354
                ],
                "video_id": [
                    1792,
                    1420,
                    1808,
                    1554,
                    2323,
                    1786,
                    1435,
                    1436,
                    2337,
                    1828,
                    1317,
                    2343,
                    1450,
                    1323,
                    2298,
                    2808,
                    1713,
                    1716,
                    1717,
                    2358,
                    1720,
                    3320,
                    323,
                    324,
                    3012,
                    2118,
                    1607,
                    1480,
                    3014,
                    3015,
                    331,
                    3016,
                    1485,
                    1486,
                    1487,
                    2895,
                    2897,
                    3322,
                    339,
                    2773,
                    343,
                    2008,
                    1753,
                    2010,
                    2776,
                    2778,
                    2779,
                    2398,
                    1503,
                    2655,
                    2781,
                    2782,
                    2659,
                    2404,
                    1767,
                    1768,
                    2407,
                    1770,
                    1771,
                    2792,
                    3178,
                    1904,
                    1905,
                    1778,
                    1907,
                    1652,
                    1653,
                    1270,
                    2037,
                    2801,
                    2297,
                    1274,
                    2428,
                    1278
                ],
                "video_title": [
                    1836,
                    1837,
                    1839,
                    323,
                    324,
                    332,
                    334,
                    335,
                    336,
                    337,
                    2896,
                    2897,
                    340,
                    341,
                    344,
                    2656,
                    2657,
                    1890,
                    2658,
                    2660,
                    2416,
                    1905
                ],
                "self.extract_videos_from_page": [
                    2897,
                    323
                ],
                "content": [
                    323,
                    358
                ],
                "re.finditer": [
                    2094,
                    2276,
                    1615,
                    327
                ],
                "video_re": [
                    327
                ],
                "mobj.groupdict": [
                    329,
                    333
                ],
                "unescapeHTML": [
                    2656,
                    2275,
                    2219,
                    332,
                    1614,
                    2257,
                    1631
                ],
                "video_title.strip": [
                    2658,
                    335
                ],
                "idx": [
                    339,
                    340,
                    341
                ],
                "ids_in_page.index": [
                    339
                ],
                "ids_in_page": [
                    2659,
                    2664,
                    2669,
                    2672,
                    2674,
                    339,
                    343,
                    2649,
                    347,
                    350,
                    351
                ],
                "titles_in_page": [
                    2660,
                    2664,
                    2669,
                    2672,
                    2674,
                    340,
                    341,
                    344,
                    2650,
                    348,
                    350,
                    351
                ],
                "ids_in_page.append": [
                    2659,
                    343
                ],
                "titles_in_page.append": [
                    344,
                    2660
                ],
                "self.extract_videos_from_page_impl": [
                    2667,
                    349,
                    2670,
                    2663
                ],
                "self._VIDEO_RE": [
                    2664,
                    350
                ],
                "orderedSet": [
                    3178,
                    356,
                    2685
                ],
                "re.findall": [
                    1632,
                    1635,
                    356,
                    3173,
                    2713,
                    1659,
                    2652,
                    2685
                ],
                "self._match_id": [
                    3320,
                    363,
                    3148,
                    2855
                ],
                "webpage": [
                    2688,
                    2699,
                    3234,
                    3235,
                    3130,
                    3131,
                    3008,
                    3009,
                    3011,
                    1477,
                    3013,
                    1486,
                    1627,
                    1632,
                    1637,
                    364,
                    365,
                    366,
                    1644,
                    2683
                ],
                "title": [
                    1890,
                    1892,
                    1899,
                    365,
                    366,
                    2704,
                    2706
                ],
                "self._og_search_title": [
                    365
                ],
                "self.playlist_result": [
                    3202,
                    2760,
                    366,
                    1905,
                    2706,
                    2898,
                    3131,
                    2909,
                    3102
                ],
                "self._entries": [
                    3203,
                    2756,
                    2761,
                    366,
                    2901,
                    2909
                ],
                "IE_DESC": [
                    2913,
                    3108,
                    3208,
                    3113,
                    3240,
                    3021,
                    3247,
                    3056,
                    2449,
                    370,
                    3311,
                    3254,
                    2969,
                    2812,
                    3229,
                    3262,
                    3135
                ],
                "_VALID_URL": [
                    3136,
                    2914,
                    3209,
                    3241,
                    3115,
                    3022,
                    3248,
                    3312,
                    2450,
                    371,
                    3255,
                    2970,
                    2813,
                    3230,
                    3263
                ],
                "YoutubeBaseInfoExtractor._PLAYLIST_ID_RE": [
                    2474,
                    435
                ],
                "_NEXT_URL_RE": [
                    436
                ],
                "_PLAYER_INFO_RE": [
                    437
                ],
                "_formats": [
                    441
                ],
                "_SUBTITLE_FORMATS": [
                    546
                ],
                "_GEO_BYPASS": [
                    548
                ],
                "IE_NAME": [
                    2816,
                    3137,
                    3106,
                    2916,
                    550,
                    3207,
                    3114,
                    2478,
                    3023,
                    3310,
                    3060,
                    2971,
                    3228,
                    3261
                ],
                "_TESTS": [
                    2817,
                    3138,
                    2918,
                    551,
                    3211,
                    3116,
                    2479,
                    3279,
                    3025,
                    3314,
                    3063,
                    2973
                ],
                "__init__": [
                    1265
                ],
                "YoutubeIE": [
                    2596,
                    3016,
                    1644,
                    1804,
                    1265
                ],
                "self._player_cache": [
                    1423,
                    1266,
                    1422,
                    1418
                ],
                "self.to_screen": [
                    1282,
                    1485,
                    1902,
                    2033,
                    1907,
                    1270,
                    2778,
                    1274,
                    2781,
                    1278,
                    1375
                ],
                "join": [
                    2241,
                    1286,
                    1821,
                    1904,
                    1331,
                    1372,
                    1367,
                    1370,
                    1308,
                    1597
                ],
                "part": [
                    1286
                ],
                "example_sig.split": [
                    1372,
                    1286
                ],
                "example_sig": [
                    1286,
                    1303,
                    1331,
                    1367,
                    1372
                ],
                "player_re": [
                    1290,
                    1291
                ],
                "cls._PLAYER_INFO_RE": [
                    1290
                ],
                "cls": [
                    2849,
                    1290,
                    2957,
                    1649,
                    2961
                ],
                "id_m": [
                    1296,
                    1291,
                    1292
                ],
                "player_url": [
                    1408,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1417,
                    1291,
                    1420,
                    1934,
                    1295,
                    1299,
                    1311,
                    2337,
                    1317,
                    1319,
                    1323,
                    1325,
                    1725,
                    1727,
                    2128,
                    2014,
                    2015,
                    2019,
                    2027,
                    2030,
                    2037,
                    2046
                ],
                "id_m.group": [
                    1296
                ],
                "player_type": [
                    1313,
                    1315,
                    1321,
                    2030,
                    2031,
                    1329,
                    1299,
                    1303
                ],
                "player_id": [
                    1313,
                    1417,
                    1418,
                    1422,
                    1423,
                    1299,
                    1303
                ],
                "self._extract_player_info": [
                    1299,
                    2030
                ],
                "func_id": [
                    1304,
                    1306,
                    1302,
                    1335
                ],
                "self._signature_cache_id": [
                    2032,
                    1417,
                    1303
                ],
                "os.path.basename": [
                    1304
                ],
                "os.path": [
                    1304
                ],
                "os": [
                    1304
                ],
                "cache_spec": [
                    1370,
                    1333,
                    1335,
                    1369,
                    1306,
                    1307,
                    1308
                ],
                "self._downloader.cache.load": [
                    1306
                ],
                "self._downloader.cache": [
                    1306,
                    1335
                ],
                "i": [
                    1349,
                    1351,
                    1356,
                    1357,
                    1363,
                    1365,
                    1308
                ],
                "download_note": [
                    1318,
                    1324,
                    1310
                ],
                "code": [
                    1316,
                    1320,
                    1326,
                    1327,
                    1373,
                    1375
                ],
                "self._parse_sig_js": [
                    1320
                ],
                "urlh": [
                    1322,
                    1717,
                    1326,
                    1719
                ],
                "self._request_webpage": [
                    1322
                ],
                "urlh.read": [
                    1326
                ],
                "self._parse_sig_swf": [
                    1327
                ],
                "test_string": [
                    1368,
                    1331,
                    1332,
                    1367
                ],
                "compat_chr": [
                    1331,
                    1367
                ],
                "cache_res": [
                    1368,
                    1369,
                    1332,
                    1333
                ],
                "c": [
                    1369,
                    1333
                ],
                "self._downloader.cache.store": [
                    1335
                ],
                "starts": [
                    1344,
                    1341
                ],
                "start": [
                    1348,
                    1353,
                    1358,
                    1365,
                    1341
                ],
                "ends": [
                    1344,
                    1342
                ],
                "end": [
                    1342
                ],
                "step": [
                    1346,
                    1350,
                    1351,
                    1353,
                    1354,
                    1357,
                    1362,
                    1365,
                    1342,
                    1343
                ],
                "steps": [
                    1344,
                    1343
                ],
                "prev": [
                    1349,
                    1351,
                    1353,
                    1356,
                    1357,
                    1358,
                    1361
                ],
                "idxs": [
                    1349
                ],
                "_genslice": [
                    1353,
                    1365
                ],
                "func": [
                    1419,
                    1422,
                    1423,
                    1425,
                    1426,
                    1368
                ],
                "expr_code": [
                    1370,
                    1374
                ],
                "gen_sig_code": [
                    1370
                ],
                "signature_id_tuple": [
                    1371,
                    1374
                ],
                "p": [
                    1372
                ],
                "funcname": [
                    1378,
                    1395
                ],
                "self._search_regex": [
                    2016,
                    2875,
                    1378,
                    1922,
                    1476,
                    3235,
                    2279,
                    2120,
                    2311,
                    1772,
                    2317,
                    2191,
                    2288,
                    2001,
                    2773,
                    2263,
                    2170,
                    2011
                ],
                "jscode": [
                    1392,
                    1394
                ],
                "jsi": [
                    1394,
                    1395
                ],
                "JSInterpreter": [
                    1394
                ],
                "initial_function": [
                    1403,
                    1402,
                    1395,
                    1396
                ],
                "jsi.extract_function": [
                    1395
                ],
                "swfi": [
                    1401,
                    1402,
                    1399
                ],
                "SWFInterpreter": [
                    1399
                ],
                "file_contents": [
                    1399
                ],
                "TARGET_CLASSNAME": [
                    1400,
                    1401
                ],
                "searched_class": [
                    1401,
                    1402
                ],
                "swfi.extract_class": [
                    1401
                ],
                "swfi.extract_function": [
                    1402
                ],
                "player_url.startswith": [
                    1411
                ],
                "re.match": [
                    2787,
                    2724,
                    1413,
                    3014,
                    2728,
                    1649,
                    2964,
                    3128,
                    2716,
                    3005
                ],
                "compat_urlparse.urljoin": [
                    2881,
                    3098,
                    1414,
                    1845,
                    2746
                ],
                "compat_urlparse": [
                    2881,
                    1603,
                    3098,
                    1541,
                    1414,
                    2772,
                    1845,
                    1591,
                    1592,
                    2746
                ],
                "self._extract_signature_function": [
                    1419
                ],
                "self._print_sig_code": [
                    1425
                ],
                "tb": [
                    1428,
                    1430
                ],
                "traceback.format_exc": [
                    1428
                ],
                "traceback": [
                    1428
                ],
                "subs_doc": [
                    1442,
                    1434
                ],
                "self._download_xml": [
                    1434,
                    1503
                ],
                "error_to_compat_str": [
                    1438
                ],
                "err": [
                    1438
                ],
                "sub_lang_list": [
                    1441,
                    1571,
                    1444,
                    1511,
                    1576,
                    1577,
                    1458,
                    1459,
                    1462,
                    1527,
                    1528,
                    1558,
                    1562,
                    1563
                ],
                "track": [
                    1442,
                    1443,
                    2440,
                    1452,
                    2417,
                    2229,
                    2238,
                    2239
                ],
                "subs_doc.findall": [
                    1442
                ],
                "lang": [
                    1443,
                    1444,
                    1572,
                    1573,
                    1449,
                    1458,
                    1559,
                    1560
                ],
                "track.attrib": [
                    1443,
                    1452
                ],
                "sub_formats": [
                    1446,
                    1543,
                    1514,
                    1547,
                    1454,
                    1458,
                    1523,
                    1527,
                    1535
                ],
                "ext": [
                    1536,
                    1539,
                    1447,
                    1545,
                    1451,
                    1515,
                    1519,
                    1456,
                    1525
                ],
                "self._SUBTITLE_FORMATS": [
                    1536,
                    1515,
                    1447
                ],
                "params": [
                    1448,
                    1516,
                    1524,
                    1455
                ],
                "compat_urllib_parse_urlencode": [
                    3075,
                    1604,
                    1542,
                    1448,
                    1769,
                    1516,
                    1497
                ],
                "encode": [
                    1452
                ],
                "sub_formats.append": [
                    1523,
                    1454,
                    1543
                ],
                "patterns": [
                    1465,
                    1477
                ],
                "config": [
                    1480,
                    1476,
                    1478
                ],
                "self._parse_json": [
                    1553,
                    1753,
                    1479
                ],
                "player_config": [
                    1488,
                    1492,
                    1486
                ],
                "self._get_ytplayer_config": [
                    1792,
                    1486
                ],
                "err_msg": [
                    1489,
                    1581,
                    1487
                ],
                "caption_url": [
                    1570,
                    1577,
                    1524,
                    1493,
                    1494,
                    1502
                ],
                "args.get": [
                    1795,
                    1802,
                    1805,
                    1551,
                    1808,
                    1493
                ],
                "timestamp": [
                    1520,
                    1495
                ],
                "list_params": [
                    1497,
                    1502
                ],
                "list_url": [
                    1502,
                    1503
                ],
                "caption_list": [
                    1504,
                    1512,
                    1503
                ],
                "original_lang_node": [
                    1504,
                    1505,
                    1508,
                    1509
                ],
                "caption_list.find": [
                    1504
                ],
                "original_lang": [
                    1508,
                    1517
                ],
                "original_lang_node.attrib": [
                    1508,
                    1509
                ],
                "caption_kind": [
                    1521,
                    1509
                ],
                "original_lang_node.attrib.get": [
                    1509
                ],
                "lang_node": [
                    1512,
                    1513
                ],
                "caption_list.findall": [
                    1512
                ],
                "sub_lang": [
                    1538,
                    1574,
                    1575,
                    1576,
                    1513,
                    1547,
                    1518,
                    1527,
                    1534
                ],
                "lang_node.attrib": [
                    1513
                ],
                "parsed_sub_url": [
                    1531,
                    1532,
                    1541
                ],
                "compat_urllib_parse_urlparse": [
                    1986,
                    1699,
                    1846,
                    1719,
                    1531
                ],
                "sub_url": [
                    1544,
                    1531,
                    1541
                ],
                "caption_qs": [
                    1537,
                    1532,
                    1542
                ],
                "compat_parse_qs": [
                    1570,
                    1986,
                    1573,
                    1701,
                    1980,
                    1848,
                    1719,
                    1784,
                    1881,
                    1532
                ],
                "parsed_sub_url.query": [
                    1532
                ],
                "captions": [
                    1547,
                    1548,
                    1533
                ],
                "sub_langs": [
                    1534
                ],
                "caption_qs.update": [
                    1537
                ],
                "compat_urlparse.urlunparse": [
                    1603,
                    1541
                ],
                "parsed_sub_url._replace": [
                    1541
                ],
                "player_response": [
                    1925,
                    1926,
                    2315,
                    1551,
                    1552,
                    1553,
                    1554,
                    1555,
                    1556,
                    1807,
                    1808,
                    1810,
                    1823,
                    1834,
                    1586,
                    2110,
                    1870,
                    1750,
                    2136,
                    1758,
                    2399,
                    2404,
                    1786
                ],
                "renderer": [
                    1556,
                    1557,
                    1559
                ],
                "base_url": [
                    3017,
                    1563,
                    1557,
                    3007
                ],
                "lang_code": [
                    1560,
                    1561,
                    1562
                ],
                "lang.get": [
                    1560
                ],
                "sub_lang_list.append": [
                    1576,
                    1562
                ],
                "make_captions": [
                    1577,
                    1563
                ],
                "caption_tracks": [
                    1568,
                    1570
                ],
                "caption_translation_languages": [
                    1569,
                    1572
                ],
                "caption_tracks.split": [
                    1570
                ],
                "caption_translation_languages.split": [
                    1572
                ],
                "lang_qs": [
                    1573,
                    1574
                ],
                "compat_urllib_parse_unquote_plus": [
                    1573,
                    2150,
                    2185,
                    1881,
                    3129
                ],
                "lang_qs.get": [
                    1574
                ],
                "playback_url": [
                    1603,
                    1607,
                    1585,
                    1589,
                    1591
                ],
                "url_or_none": [
                    2113,
                    1737,
                    1981,
                    1585,
                    1974,
                    2109
                ],
                "video_info": [
                    1797,
                    1798,
                    2181,
                    1928,
                    2185,
                    1802,
                    1933,
                    1936,
                    1809,
                    1937,
                    1942,
                    1823,
                    1830,
                    1831,
                    1836,
                    1588,
                    2114,
                    1732,
                    2384,
                    1873,
                    2385,
                    2390,
                    2391,
                    2140,
                    2399,
                    1761,
                    2147,
                    2404,
                    1910,
                    2294,
                    1784,
                    1785,
                    1787,
                    1788,
                    2301,
                    1918
                ],
                "parsed_playback_url": [
                    1592,
                    1604,
                    1591
                ],
                "compat_urlparse.urlparse": [
                    2772,
                    1591
                ],
                "qs": [
                    1604,
                    1720,
                    1848,
                    1719,
                    1592,
                    1849,
                    1599
                ],
                "compat_urlparse.parse_qs": [
                    1592,
                    2772
                ],
                "parsed_playback_url.query": [
                    1592
                ],
                "CPN_ALPHABET": [
                    1596,
                    1597
                ],
                "cpn": [
                    1601,
                    1597
                ],
                "random.randint": [
                    1597
                ],
                "random": [
                    1597
                ],
                "_": [
                    2090,
                    3220,
                    1597,
                    3223
                ],
                "qs.update": [
                    1599
                ],
                "parsed_playback_url._replace": [
                    1604
                ],
                "entries": [
                    1893,
                    1638,
                    1640,
                    1613,
                    2893,
                    1905,
                    2898,
                    1875,
                    1630
                ],
                "entries.extend": [
                    1638,
                    1630
                ],
                "matches": [
                    3178,
                    1635,
                    3173,
                    1638
                ],
                "m": [
                    2275,
                    2276,
                    1845,
                    1638
                ],
                "urls": [
                    1644,
                    1645
                ],
                "YoutubeIE._extract_urls": [
                    1644
                ],
                "cls._VALID_URL": [
                    1649
                ],
                "re.VERBOSE": [
                    1649
                ],
                "description": [
                    1657,
                    1661
                ],
                "chapter_lines": [
                    1666,
                    1672,
                    1673,
                    1659,
                    1662
                ],
                "chapters": [
                    1664,
                    1683,
                    2327,
                    1688,
                    2427
                ],
                "next_num": [
                    1672,
                    1665,
                    1673
                ],
                "chapter_line": [
                    1665,
                    1681
                ],
                "time_point": [
                    1665,
                    1667
                ],
                "start_time": [
                    1697,
                    1667,
                    1668,
                    2435,
                    1670,
                    1702,
                    1703,
                    1704,
                    1705,
                    1678,
                    1684
                ],
                "parse_duration": [
                    2305,
                    1667,
                    1703,
                    1673,
                    1705,
                    1707
                ],
                "duration": [
                    1672,
                    1676,
                    1677,
                    1670
                ],
                "end_time": [
                    1698,
                    2436,
                    1672,
                    1674,
                    1706,
                    1676,
                    1677,
                    1678,
                    1707,
                    1685
                ],
                "chapter_title": [
                    1680,
                    1682,
                    1686
                ],
                "strip": [
                    1680,
                    2243,
                    2239
                ],
                "chapters.append": [
                    1683
                ],
                "smuggled_data": [
                    1867,
                    1691
                ],
                "unsmuggle_url": [
                    1691
                ],
                "proto": [
                    1767,
                    1897,
                    1775,
                    1712,
                    1716,
                    2008,
                    2428,
                    1693
                ],
                "parsed_url": [
                    1699,
                    1700
                ],
                "component": [
                    1700,
                    1701
                ],
                "parsed_url.fragment": [
                    1700
                ],
                "parsed_url.query": [
                    1700
                ],
                "self._NEXT_URL_RE": [
                    1710
                ],
                "lstrip": [
                    1712
                ],
                "compat_urllib_parse_unquote": [
                    1712
                ],
                "self.extract_id": [
                    1713
                ],
                "video_webpage": [
                    1792,
                    2178,
                    2306,
                    2313,
                    2189,
                    2319,
                    2194,
                    2199,
                    1817,
                    2297,
                    2217,
                    1841,
                    2227,
                    1717,
                    1723,
                    2371,
                    1865,
                    2255,
                    2003,
                    2387,
                    2265,
                    2018,
                    1763,
                    2276,
                    2282,
                    2159,
                    2289,
                    2169,
                    2298,
                    2172
                ],
                "self._download_webpage_handle": [
                    1717
                ],
                "urlh.geturl": [
                    1719
                ],
                "qs.get": [
                    1720,
                    1849
                ],
                "dash_mpds": [
                    1729,
                    1733,
                    1734,
                    1740,
                    1741,
                    2332
                ],
                "dash_mpd": [
                    1732,
                    1733,
                    1734,
                    1737,
                    1740,
                    1741
                ],
                "video_info.get": [
                    1732,
                    1836,
                    1936,
                    1937,
                    1942,
                    1785,
                    2399
                ],
                "dash_mpds.append": [
                    1741,
                    1734
                ],
                "pl_response": [
                    1786,
                    1738,
                    1785,
                    1750,
                    1751,
                    1753,
                    1754,
                    1755,
                    1756
                ],
                "is_live": [
                    2434,
                    1806,
                    1743,
                    1936,
                    1914,
                    1915
                ],
                "view_count": [
                    2287,
                    1744,
                    2288,
                    1909,
                    1910,
                    1911,
                    1912,
                    1788,
                    2429
                ],
                "int_or_none": [
                    1952,
                    1922,
                    2303,
                    1988,
                    1961,
                    1962,
                    1964,
                    1965,
                    2060,
                    2062,
                    1968,
                    2064,
                    1747,
                    1912,
                    2072,
                    2301,
                    1951
                ],
                "v_info": [
                    1747
                ],
                "str_or_none": [
                    1955,
                    2148,
                    1750,
                    2167
                ],
                "add_dash_mpd_pr": [
                    1810,
                    1755
                ],
                "embed_webpage": [
                    1762,
                    1768,
                    1773,
                    2003,
                    2007,
                    2009,
                    2012
                ],
                "age_gate": [
                    2337,
                    1764,
                    2003,
                    2037,
                    2005,
                    2425,
                    1790
                ],
                "video_info_url": [
                    1778,
                    1775
                ],
                "video_info_webpage": [
                    1784,
                    1777,
                    1782,
                    1783
                ],
                "extract_player_response": [
                    1808,
                    1786
                ],
                "add_dash_mpd": [
                    1787,
                    1798
                ],
                "extract_view_count": [
                    1788,
                    1910
                ],
                "ytplayer_config": [
                    1792,
                    1793,
                    1794
                ],
                "k": [
                    1797
                ],
                "v": [
                    1797
                ],
                "args.items": [
                    1797
                ],
                "YoutubeIE.ie_key": [
                    3016,
                    1804,
                    2596
                ],
                "messages": [
                    1821,
                    1819,
                    1820,
                    1813
                ],
                "tag": [
                    1816,
                    1814
                ],
                "kind": [
                    2090,
                    2092,
                    1814,
                    1816,
                    1817
                ],
                "msg": [
                    1818,
                    1819,
                    1815
                ],
                "self._html_search_regex": [
                    2733,
                    2903,
                    2225,
                    2738,
                    2197,
                    3093,
                    1815,
                    2267
                ],
                "messages.append": [
                    1819
                ],
                "unavailable_message": [
                    1824,
                    1825,
                    1826,
                    1828,
                    2393,
                    2394,
                    2395
                ],
                "extract_unavailable_message": [
                    1824,
                    2393,
                    2133
                ],
                "video_details": [
                    2148,
                    1865,
                    1833,
                    1836,
                    2293,
                    2167,
                    1911,
                    1912,
                    1915,
                    2303
                ],
                "video_details.get": [
                    2148,
                    1865,
                    1836,
                    2293,
                    2167,
                    1912,
                    1915,
                    2303
                ],
                "description_original": [
                    1841,
                    1854,
                    2327
                ],
                "video_description": [
                    1862,
                    1863,
                    1865,
                    1841,
                    1842,
                    1905,
                    2419,
                    2235,
                    2236,
                    1854
                ],
                "get_element_by_id": [
                    1841
                ],
                "redir_url": [
                    1852,
                    1845,
                    1846
                ],
                "m.group": [
                    2275,
                    1845
                ],
                "parsed_redir_url": [
                    1848,
                    1846,
                    1847
                ],
                "parsed_redir_url.netloc": [
                    1847
                ],
                "parsed_redir_url.path": [
                    1847
                ],
                "parsed_redir_url.query": [
                    1848
                ],
                "q": [
                    1849,
                    1850,
                    1851
                ],
                "replace_url": [
                    1862
                ],
                "clean_html": [
                    1863,
                    2220,
                    2704,
                    2135,
                    2139
                ],
                "self._html_search_meta": [
                    2305,
                    3012,
                    1865,
                    2188,
                    2386,
                    2868,
                    2871,
                    2168
                ],
                "smuggled_data.get": [
                    1867
                ],
                "multifeed_metadata_list": [
                    1874,
                    1877,
                    1869
                ],
                "feed_ids": [
                    1904,
                    1876,
                    1901
                ],
                "feed": [
                    1881,
                    1877
                ],
                "multifeed_metadata_list.split": [
                    1877
                ],
                "feed_data": [
                    1881,
                    1884,
                    1897
                ],
                "name": [
                    1884,
                    2957
                ],
                "feed_id": [
                    1901,
                    1886,
                    1887
                ],
                "feed_entry": [
                    1889,
                    1886
                ],
                "feed_title": [
                    1889,
                    1891,
                    1892
                ],
                "entries.append": [
                    1893
                ],
                "smuggle_url": [
                    1896
                ],
                "feed_ids.append": [
                    1901
                ],
                "bool_or_none": [
                    1915
                ],
                "media_url": [
                    1923
                ],
                "streaming_formats": [
                    1954,
                    1925,
                    1926,
                    1936,
                    1971
                ],
                "streaming_formats.extend": [
                    1926
                ],
                "startswith": [
                    1928
                ],
                "self.report_rtmp_download": [
                    1929
                ],
                "formats": [
                    2433,
                    2402,
                    2116,
                    1930,
                    2379,
                    2383,
                    2131,
                    1940,
                    2106,
                    2365,
                    2366
                ],
                "encoded_url_map": [
                    1937,
                    1938
                ],
                "formats_spec": [
                    2050,
                    2051,
                    1960,
                    1941,
                    1949
                ],
                "fmt_list": [
                    1944,
                    1942,
                    1943
                ],
                "fmt": [
                    2060,
                    2062,
                    2067,
                    2068,
                    2071,
                    1944,
                    1945,
                    2072,
                    1954,
                    1955,
                    2085,
                    1958,
                    1959,
                    1961,
                    1962,
                    1964,
                    1965,
                    1967,
                    1968,
                    1971,
                    1972,
                    1974,
                    1977,
                    1993
                ],
                "fmt_list.split": [
                    1944
                ],
                "spec": [
                    1945,
                    1946,
                    1947,
                    1949,
                    1950
                ],
                "fmt.split": [
                    1945
                ],
                "width_height": [
                    1952,
                    1947,
                    1948,
                    1951
                ],
                "split": [
                    2088,
                    2241,
                    1947
                ],
                "itag": [
                    1955,
                    1956,
                    1960,
                    2120,
                    2122,
                    2123,
                    2124,
                    2125,
                    1967
                ],
                "fmt.get": [
                    2060,
                    2062,
                    2067,
                    2068,
                    2071,
                    2072,
                    1955,
                    2085,
                    1958,
                    1959,
                    1961,
                    1962,
                    1964,
                    1965,
                    1967,
                    1968,
                    1972,
                    1974,
                    1977,
                    1993
                ],
                "quality": [
                    2080,
                    2067,
                    1958,
                    1959
                ],
                "quality_label": [
                    2080,
                    1963,
                    2068,
                    1959
                ],
                "float_or_none": [
                    1967,
                    2293,
                    2294,
                    2071,
                    2070
                ],
                "cipher": [
                    1985,
                    1998,
                    1977,
                    1978,
                    1980
                ],
                "url_data": [
                    1986,
                    1988,
                    2021,
                    2022,
                    2023,
                    2024,
                    1993,
                    2056,
                    2085,
                    1999,
                    2064,
                    2067,
                    2068,
                    2038,
                    2070,
                    2072,
                    1980,
                    1981
                ],
                "stream_type": [
                    1988,
                    1990
                ],
                "format_id": [
                    2048,
                    2049,
                    2050,
                    2051,
                    1993,
                    1994,
                    1996,
                    2034,
                    2071,
                    2044
                ],
                "ASSETS_RE": [
                    2000,
                    2002,
                    2012
                ],
                "jsplayer_url_json": [
                    2001,
                    2011,
                    2005,
                    2014
                ],
                "embed_url": [
                    2008,
                    2010
                ],
                "json.loads": [
                    2019,
                    2014
                ],
                "player_url_json": [
                    2016,
                    2019
                ],
                "encrypted_sig": [
                    2024,
                    2032,
                    2037
                ],
                "player_desc": [
                    2034,
                    2028,
                    2031
                ],
                "player_version": [
                    2030,
                    2031
                ],
                "parts_sizes": [
                    2032,
                    2034
                ],
                "signature": [
                    2036,
                    2039
                ],
                "self._decrypt_signature": [
                    2337,
                    2036
                ],
                "sp": [
                    2038,
                    2039
                ],
                "dct": [
                    2049,
                    2051,
                    2084,
                    2091,
                    2125,
                    2126,
                    2127,
                    2100,
                    2101,
                    2102,
                    2106,
                    2043
                ],
                "self._formats": [
                    2048,
                    2049,
                    2344,
                    2124,
                    2125
                ],
                "dct.update": [
                    2049,
                    2051,
                    2100,
                    2126
                ],
                "url_data.get": [
                    2085,
                    2056,
                    2064,
                    2067,
                    2068,
                    2070,
                    2072
                ],
                "width": [
                    2057,
                    2059,
                    2060,
                    2077
                ],
                "height": [
                    2057,
                    2061,
                    2062,
                    2078
                ],
                "filesize": [
                    2064,
                    2075
                ],
                "_extract_filesize": [
                    2065,
                    2346
                ],
                "tbr": [
                    2076,
                    2070
                ],
                "fps": [
                    2072,
                    2079
                ],
                "more_fields": [
                    2074,
                    2082
                ],
                "key": [
                    2082,
                    2084
                ],
                "value": [
                    2082,
                    2083,
                    2084
                ],
                "more_fields.items": [
                    2082
                ],
                "type_": [
                    2095,
                    2085,
                    2086,
                    2087
                ],
                "type_split": [
                    2088,
                    2091,
                    2087
                ],
                "type_.split": [
                    2087
                ],
                "kind_ext": [
                    2088,
                    2089,
                    2090
                ],
                "mimetype2ext": [
                    2091
                ],
                "codecs": [
                    2097,
                    2099,
                    2100,
                    2093
                ],
                "parse_codecs": [
                    2100
                ],
                "dct.get": [
                    2101
                ],
                "formats.append": [
                    2106,
                    2131
                ],
                "manifest_url": [
                    2115,
                    2108,
                    2118
                ],
                "m3u8_formats": [
                    2117,
                    2119
                ],
                "self._extract_m3u8_formats": [
                    2117
                ],
                "a_format": [
                    2119,
                    2121,
                    2123,
                    2126,
                    2127,
                    2128,
                    2130,
                    2131
                ],
                "a_format.setdefault": [
                    2130
                ],
                "error_message": [
                    2133,
                    2134,
                    2135,
                    2138,
                    2139,
                    2141,
                    2142
                ],
                "video_uploader": [
                    2408,
                    2146,
                    2149,
                    2150
                ],
                "video_uploader_id": [
                    2409,
                    2161,
                    2155
                ],
                "video_uploader_url": [
                    2162,
                    2156,
                    2410
                ],
                "channel_id": [
                    3008,
                    2883,
                    2852,
                    2855,
                    2857,
                    2411,
                    2909,
                    2863,
                    2898,
                    2901,
                    2166,
                    2173,
                    3006
                ],
                "channel_url": [
                    2412,
                    2173,
                    2871,
                    2874,
                    2877
                ],
                "m_thumb": [
                    2177,
                    2179,
                    2180
                ],
                "re.DOTALL": [
                    2178
                ],
                "video_thumbnail": [
                    2185,
                    2418,
                    2180,
                    2183
                ],
                "m_thumb.group": [
                    2180
                ],
                "upload_date": [
                    2188,
                    2413,
                    2190,
                    2191,
                    2195
                ],
                "unified_strdate": [
                    2195
                ],
                "video_license": [
                    2197,
                    2414
                ],
                "m_music": [
                    2201,
                    2218,
                    2219,
                    2220
                ],
                "video_alt_title": [
                    2417,
                    2219,
                    2222
                ],
                "remove_quotes": [
                    2219
                ],
                "m_music.group": [
                    2219,
                    2220
                ],
                "video_creator": [
                    2220,
                    2222,
                    2415
                ],
                "field": [
                    2226,
                    2227
                ],
                "extract_meta": [
                    2229,
                    2230,
                    2231
                ],
                "artist": [
                    2240,
                    2241,
                    2441,
                    2415,
                    2230
                ],
                "album": [
                    2242,
                    2243,
                    2442,
                    2231
                ],
                "release_date": [
                    2245,
                    2246,
                    2247,
                    2249,
                    2443,
                    2234
                ],
                "release_year": [
                    2244,
                    2248,
                    2249,
                    2250,
                    2251,
                    2444,
                    2234
                ],
                "a.strip": [
                    2241
                ],
                "a": [
                    2241
                ],
                "release_date.replace": [
                    2247
                ],
                "m_episode": [
                    2253,
                    2256,
                    2257,
                    2258,
                    2259
                ],
                "series": [
                    2257,
                    2261,
                    2437
                ],
                "m_episode.group": [
                    2257,
                    2258,
                    2259
                ],
                "season_number": [
                    2258,
                    2261,
                    2438
                ],
                "episode_number": [
                    2259,
                    2261,
                    2439
                ],
                "m_cat_container": [
                    2266,
                    2268,
                    2263
                ],
                "category": [
                    2267,
                    2270
                ],
                "video_categories": [
                    2272,
                    2420,
                    2270
                ],
                "video_tags": [
                    2274,
                    2421
                ],
                "self._meta_regex": [
                    2276
                ],
                "str_to_int": [
                    2288,
                    2279
                ],
                "re.escape": [
                    2281,
                    2687
                ],
                "count_name": [
                    2281,
                    2282
                ],
                "like_count": [
                    2284,
                    2430
                ],
                "_extract_count": [
                    2284,
                    2285
                ],
                "dislike_count": [
                    2285,
                    2431
                ],
                "average_rating": [
                    2432,
                    2292
                ],
                "video_subtitles": [
                    2297,
                    2422
                ],
                "self.extract_subtitles": [
                    2297
                ],
                "automatic_captions": [
                    2298,
                    2423
                ],
                "self.extract_automatic_captions": [
                    2298
                ],
                "video_duration": [
                    2304,
                    2305,
                    2327,
                    2424,
                    2300,
                    2302,
                    2303
                ],
                "video_annotations": [
                    2321,
                    2426,
                    2309
                ],
                "xsrf_token": [
                    2316,
                    2325,
                    2311
                ],
                "invideo_url": [
                    2314,
                    2322,
                    2316
                ],
                "xsrf_field_name": [
                    2325,
                    2317
                ],
                "self._proto_relative_url": [
                    2322
                ],
                "self._extract_chapters": [
                    2327
                ],
                "dash_mpd_fatal": [
                    2355,
                    2331,
                    2343
                ],
                "mpd_url": [
                    2332,
                    2340,
                    2343
                ],
                "dash_formats": [
                    2348,
                    2349,
                    2359,
                    2333,
                    2365,
                    2366
                ],
                "dec_s": [
                    2337,
                    2338
                ],
                "decrypt_sig": [
                    2340
                ],
                "df": [
                    2342,
                    2345,
                    2346,
                    2348,
                    2349
                ],
                "self._extract_mpd_formats": [
                    2342
                ],
                "df.get": [
                    2345
                ],
                "self.report_warning": [
                    2731,
                    2357
                ],
                "f": [
                    2379,
                    2380,
                    2365,
                    2381
                ],
                "dash_formats.keys": [
                    2365
                ],
                "formats.extend": [
                    2366
                ],
                "dash_formats.values": [
                    2366
                ],
                "stretched_m": [
                    2369,
                    2372,
                    2373,
                    2374
                ],
                "w": [
                    2377,
                    2378,
                    2373
                ],
                "stretched_m.group": [
                    2373,
                    2374
                ],
                "h": [
                    2377,
                    2378,
                    2374
                ],
                "ratio": [
                    2378,
                    2381
                ],
                "f.get": [
                    2380
                ],
                "regions_allowed": [
                    2386,
                    2388
                ],
                "countries": [
                    2388,
                    2390
                ],
                "regions_allowed.split": [
                    2388
                ],
                "self.raise_geo_restricted": [
                    2389
                ],
                "reason": [
                    2720,
                    2391,
                    2392,
                    2395,
                    2397,
                    2718,
                    2719
                ],
                "self._sort_formats": [
                    2402
                ],
                "self.mark_watched": [
                    2404
                ],
                "YoutubePlaylistBaseInfoExtractor": [
                    2448,
                    2811,
                    3051
                ],
                "_TEMPLATE_URL": [
                    2915,
                    2475,
                    2814
                ],
                "_VIDEO_RE_TPL": [
                    2476,
                    2477
                ],
                "_VIDEO_RE": [
                    3052,
                    2477,
                    2815
                ],
                "item": [
                    2652,
                    2654
                ],
                "attrs": [
                    2656,
                    2654,
                    2655
                ],
                "extract_attributes": [
                    2654
                ],
                "attrs.get": [
                    2656
                ],
                "last_id": [
                    2680,
                    2682,
                    2695
                ],
                "n": [
                    2684,
                    3101,
                    2681,
                    3100,
                    3069
                ],
                "new_ids": [
                    2691,
                    2692,
                    2694,
                    3178,
                    3179,
                    3182,
                    3184,
                    2685
                ],
                "_id": [
                    2691
                ],
                "ids.extend": [
                    3182,
                    2694
                ],
                "url_results": [
                    2697,
                    2706
                ],
                "self._ids_to_results": [
                    3184,
                    2697
                ],
                "search_title": [
                    2699,
                    2701,
                    2702,
                    2703
                ],
                "get_element_by_attribute": [
                    2699
                ],
                "class_name": [
                    2699
                ],
                "title_span": [
                    2704,
                    2700
                ],
                "self._TEMPLATE_URL": [
                    2852,
                    2709,
                    2965
                ],
                "match": [
                    2724,
                    2728,
                    2731,
                    2713,
                    2714,
                    2716
                ],
                "match.strip": [
                    2714
                ],
                "playlist_title": [
                    2752,
                    2761,
                    2733
                ],
                "_UPLOADER_BASE": [
                    2737,
                    2739,
                    2742
                ],
                "uploader": [
                    2738,
                    2763
                ],
                "uploader_id": [
                    2745,
                    2764,
                    2748
                ],
                "uploader_url": [
                    2746,
                    2748,
                    2765
                ],
                "has_videos": [
                    2758,
                    2768,
                    2801,
                    2800,
                    2750
                ],
                "playlist": [
                    2760,
                    2762,
                    2800,
                    2768,
                    2802,
                    3223,
                    3224
                ],
                "playlist.update": [
                    2762
                ],
                "query_dict": [
                    2772,
                    2773
                ],
                "query_dict.get": [
                    2773
                ],
                "self._VALID_URL": [
                    3128,
                    2787,
                    2964,
                    3005
                ],
                "video": [
                    2792,
                    2793,
                    2794,
                    3220,
                    3221,
                    3222
                ],
                "self._check_download_just_video": [
                    2792,
                    3220
                ],
                "playlist_id.startswith": [
                    2796
                ],
                "self._extract_mix": [
                    2798
                ],
                "self._extract_playlist": [
                    2800,
                    3223
                ],
                "YoutubePlaylistsIE.suitable": [
                    2848
                ],
                "YoutubePlaylistsIE": [
                    2848
                ],
                "YoutubeLiveIE.suitable": [
                    2848
                ],
                "YoutubeLiveIE": [
                    2848
                ],
                "suitable": [
                    2849,
                    2961
                ],
                "YoutubeChannelIE": [
                    2912,
                    2849
                ],
                "self._build_template_url": [
                    2857
                ],
                "channel_page": [
                    2883,
                    2888,
                    2862,
                    2865,
                    2897,
                    2869,
                    2901,
                    2905,
                    2873,
                    2909
                ],
                "channel_playlist_id": [
                    2866,
                    2868,
                    2870,
                    2875,
                    2878,
                    2879
                ],
                "channel_playlist_id.startswith": [
                    2878
                ],
                "autogenerated": [
                    2890,
                    2884
                ],
                "alert_message": [
                    2906,
                    2907,
                    2903
                ],
                "other_yt_ies": [
                    2957,
                    2958
                ],
                "klass": [
                    2957
                ],
                "items": [
                    2957
                ],
                "name.startswith": [
                    2957
                ],
                "name.endswith": [
                    2957
                ],
                "ie.suitable": [
                    2958
                ],
                "ie": [
                    2958
                ],
                "YoutubeUserIE": [
                    2961
                ],
                "page_type": [
                    3010,
                    3014
                ],
                "self._og_search_property": [
                    3010
                ],
                "page_type.startswith": [
                    3014
                ],
                "YoutubePlaylistsBaseInfoExtractor": [
                    3020,
                    3134
                ],
                "SearchInfoExtractor": [
                    3055
                ],
                "YoutubeSearchBaseInfoExtractor": [
                    3112,
                    3055
                ],
                "_MAX_RESULTS": [
                    3059
                ],
                "_SEARCH_KEY": [
                    3107,
                    3061
                ],
                "_EXTRA_QUERY_ARGS": [
                    3109,
                    3062
                ],
                "videos": [
                    3100,
                    3090,
                    3091,
                    3068,
                    3101,
                    3102
                ],
                "limit": [
                    3091,
                    3069
                ],
                "url_query": [
                    3074,
                    3075,
                    3071
                ],
                "query.encode": [
                    3072
                ],
                "url_query.update": [
                    3074
                ],
                "self._EXTRA_QUERY_ARGS": [
                    3074
                ],
                "result_url": [
                    3098,
                    3075,
                    3079
                ],
                "pagenum": [
                    3080,
                    3077
                ],
                "html_content": [
                    3089,
                    3083,
                    3085,
                    3095
                ],
                "new_videos": [
                    3089,
                    3090,
                    3091
                ],
                "next_link": [
                    3096,
                    3098,
                    3093
                ],
                "YoutubeSearchIE": [
                    3105,
                    3106
                ],
                "YoutubeSearchIE.IE_NAME": [
                    3106
                ],
                "_real_extract": [
                    3149
                ],
                "YoutubeShowIE": [
                    3149
                ],
                "self._FEED_NAME": [
                    3200,
                    3162
                ],
                "self._PLAYLIST_TITLE": [
                    3192,
                    3201,
                    3203
                ],
                "YoutubePlaylistIE": [
                    3206
                ],
                "YoutubeFeedsInfoExtractor": [
                    3253,
                    3246,
                    3239
                ],
                "_FEED_NAME": [
                    3256,
                    3249,
                    3242
                ],
                "_PLAYLIST_TITLE": [
                    3257,
                    3250,
                    3243
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_14/test/test_youtube_chapters.py",
                "test_function": "test_youtube_chapters",
                "test_function_code": "    def test_youtube_chapters(self):\n        for description, duration, expected_chapters in self._TEST_CASES:\n            ie = YoutubeIE()\n            expect_value(\n                self, ie._extract_chapters_from_description(description, duration),\n                expected_chapters, None)",
                "test_error": "AttributeError: 'YoutubeIE' object has no attribute '_extract_chapters_from_description'",
                "full_test_error": "self = <test.test_youtube_chapters.TestYoutubeChapters testMethod=test_youtube_chapters>\n\n    def test_youtube_chapters(self):\n        for description, duration, expected_chapters in self._TEST_CASES:\n            ie = YoutubeIE()\n            expect_value(\n>               self, ie._extract_chapters_from_description(description, duration),\n                expected_chapters, None)\nE           AttributeError: 'YoutubeIE' object has no attribute '_extract_chapters_from_description'\n\ntest/test_youtube_chapters.py:270: AttributeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}