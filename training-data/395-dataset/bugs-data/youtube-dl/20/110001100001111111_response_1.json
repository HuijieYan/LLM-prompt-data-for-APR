{
    "youtube-dl": [
        {
            "bugID": 20,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 360,
            "file_name": "SD2T/bgp_envs/repos/youtube-dl_20/youtube_dl/utils.py",
            "replace_code": "def get_elements_by_attribute(attribute, value, html, escape_value=True):\n    import re\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n    \n    retlist = []\n    \n    pattern = r'<(\\w+)(?:[^>]*)\\s{0}=[\"\\']?([^\"\\']*)[\"\\']?(?:[^>]*)>([^<]*)</\\1>'\n    attribute_pattern = fr'{attribute}'\n    value_pattern = re.escape(value) if escape_value else value\n    \n    match_pattern = pattern.format(fr'{attribute_pattern}', fr'{value_pattern}')\n    \n    for m in re.finditer(match_pattern, html):\n        res = m.group(3)\n    \n        if res.startswith('\"') or res.startswith(\"'\"):\n            res = res[1:-1]\n    \n        retlist.append(unescapeHTML(res))\n    \n    return retlist"
        }
    ]
}