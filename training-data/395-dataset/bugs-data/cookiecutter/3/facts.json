{
    "1.1.1": "def read_user_choice(var_name, options):\n    \n    # Please see http://click.pocoo.org/4/api/#click.prompt\n    if not isinstance(options, list):\n        raise TypeError\n\n    if not options:\n        raise ValueError\n\n    choice_map = OrderedDict(\n        (u'{}'.format(i), value) for i, value in enumerate(options, 1)\n    )\n    choices = choice_map.keys()\n    default = u'1'\n\n    choice_lines = [u'{} - {}'.format(*c) for c in choice_map.items()]\n    prompt = u'\\n'.join((\n        u'Select {}:'.format(var_name),\n        u'\\n'.join(choice_lines),\n        u'Choose from {}'.format(u', '.join(choices))\n    ))\n\n    user_choice = click.prompt(\n        prompt, type=click.Choice(choices), default=default\n    )\n    return choice_map[user_choice]\n",
    "1.1.2": "Prompt the user to choose from several options for the given variable.\n\nThe first item will be returned if no input happens.\n\n:param str var_name: Variable as specified in the context\n:param list options: Sequence of options that are available to select from\n:return: Exactly one item of ``options`` that has been chosen by the user",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/cookiecutter_3/cookiecutter/prompt.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\ndef test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1',\n        show_choices=False\n    )",
        "@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\ndef test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1',\n        show_choices=False\n    )",
        "@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\ndef test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1',\n        show_choices=False\n    )",
        "@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\ndef test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1',\n        show_choices=False\n    )"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/cookiecutter_3/tests/test_read_user_choice.py",
        "/Volumes/SSD2T/bgp_envs/repos/cookiecutter_3/tests/test_read_user_choice.py",
        "/Volumes/SSD2T/bgp_envs/repos/cookiecutter_3/tests/test_read_user_choice.py",
        "/Volumes/SSD2T/bgp_envs/repos/cookiecutter_3/tests/test_read_user_choice.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4350067856'>)\nE           Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350067856'>)",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4350067856'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350067856'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4350067856'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4350067856'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4350067856'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4350067856'>,\nE           }",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4350067856'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350067856'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4350067856'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4350067856'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4350067856'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4350067856'>,\nE           }"
        ],
        [
            "E           AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4345337232'>)\nE           Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4345337232'>)",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4345337232'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4345337232'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4345337232'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4345337232'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4345337232'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4345337232'>,\nE           }",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4345337232'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4345337232'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4345337232'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4345337232'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4345337232'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4345337232'>,\nE           }"
        ],
        [
            "E           AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4350978064'>)\nE           Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350978064'>)",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4350978064'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350978064'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4350978064'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4350978064'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4350978064'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4350978064'>,\nE           }",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4350978064'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350978064'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4350978064'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4350978064'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4350978064'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4350978064'>,\nE           }"
        ],
        [
            "E           AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4351060432'>)\nE           Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4351060432'>)",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4351060432'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4351060432'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4351060432'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4351060432'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4351060432'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4351060432'>,\nE           }",
            "E       AssertionError: Expected call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', show_choices=False, type=<MagicMock name='Choice()' id='4351060432'>)\nE       Actual call: prompt('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4351060432'>)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'type': <MagicMock name='Choice()' id='4351060432'>, 'default': '1'} == {'type': <MagicMock name='Choice()' id='4351060432'>, 'default': '1', 'show_choices': False}\nE         Common items:\nE         {'default': '1', 'type': <MagicMock name='Choice()' id='4351060432'>}\nE         Right contains 1 more item:\nE         {'show_choices': False}\nE         Full diff:\nE           {\nE            'default': '1',\nE         -  'show_choices': False,\nE            'type': <MagicMock name='Choice()' id='4351060432'>,\nE           }"
        ]
    ],
    "2.1.2": [
        [
            "_mock_self = <MagicMock name='prompt' id='4350464528'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4350067856'>}\nexpected = (('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',), {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4350067856'>})\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x1034d77a0>\nactual = call('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350067856'>)\ncause = None\n\n    def assert_called_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        self = _mock_self\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            raise AssertionError('Expected call: %s\\nNot called' % (expected,))\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher((args, kwargs))\n        actual = self._call_matcher(self.call_args)\n        if expected != actual:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:878: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n_mock_self = <MagicMock name='prompt' id='4350464528'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4350067856'>}\nself = <MagicMock name='prompt' id='4350464528'>\n\n    def assert_called_once_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        self = _mock_self\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.\" %\n                   (self._mock_name or 'mock', self.call_count))\n            raise AssertionError(msg)\n>       return self.assert_called_with(*args, **kwargs)",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:889: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x1034b8690>\nuser_choice = 1, expected_value = 'hello'\n\n    @pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\n    def test_click_invocation(mocker, user_choice, expected_value):\n        choice = mocker.patch('click.Choice')\n        choice.return_value = click.Choice(OPTIONS)\n    \n        prompt = mocker.patch('click.prompt')\n        prompt.return_value = '{}'.format(user_choice)\n    \n        assert read_user_choice('varname', OPTIONS) == expected_value\n    \n        prompt.assert_called_once_with(\n            EXPECTED_PROMPT,\n            type=click.Choice(OPTIONS),\n            default='1',\n>           show_choices=False\n        )",
            "\ntests/test_read_user_choice.py:33: AssertionError"
        ],
        [
            "_mock_self = <MagicMock name='prompt' id='4330831056'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4345337232'>}\nexpected = (('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',), {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4345337232'>})\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x102254200>\nactual = call('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4345337232'>)\ncause = None\n\n    def assert_called_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        self = _mock_self\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            raise AssertionError('Expected call: %s\\nNot called' % (expected,))\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher((args, kwargs))\n        actual = self._call_matcher(self.call_args)\n        if expected != actual:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:878: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n_mock_self = <MagicMock name='prompt' id='4330831056'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4345337232'>}\nself = <MagicMock name='prompt' id='4330831056'>\n\n    def assert_called_once_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        self = _mock_self\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.\" %\n                   (self._mock_name or 'mock', self.call_count))\n            raise AssertionError(msg)\n>       return self.assert_called_with(*args, **kwargs)",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:889: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x10358cdd0>\nuser_choice = 2, expected_value = 'world'\n\n    @pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\n    def test_click_invocation(mocker, user_choice, expected_value):\n        choice = mocker.patch('click.Choice')\n        choice.return_value = click.Choice(OPTIONS)\n    \n        prompt = mocker.patch('click.prompt')\n        prompt.return_value = '{}'.format(user_choice)\n    \n        assert read_user_choice('varname', OPTIONS) == expected_value\n    \n        prompt.assert_called_once_with(\n            EXPECTED_PROMPT,\n            type=click.Choice(OPTIONS),\n            default='1',\n>           show_choices=False\n        )",
            "\ntests/test_read_user_choice.py:33: AssertionError"
        ],
        [
            "_mock_self = <MagicMock name='prompt' id='4351021136'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4350978064'>}\nexpected = (('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',), {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4350978064'>})\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x10223f680>\nactual = call('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4350978064'>)\ncause = None\n\n    def assert_called_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        self = _mock_self\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            raise AssertionError('Expected call: %s\\nNot called' % (expected,))\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher((args, kwargs))\n        actual = self._call_matcher(self.call_args)\n        if expected != actual:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:878: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n_mock_self = <MagicMock name='prompt' id='4351021136'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4350978064'>}\nself = <MagicMock name='prompt' id='4351021136'>\n\n    def assert_called_once_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        self = _mock_self\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.\" %\n                   (self._mock_name or 'mock', self.call_count))\n            raise AssertionError(msg)\n>       return self.assert_called_with(*args, **kwargs)",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:889: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x1036ec590>\nuser_choice = 3, expected_value = 'foo'\n\n    @pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\n    def test_click_invocation(mocker, user_choice, expected_value):\n        choice = mocker.patch('click.Choice')\n        choice.return_value = click.Choice(OPTIONS)\n    \n        prompt = mocker.patch('click.prompt')\n        prompt.return_value = '{}'.format(user_choice)\n    \n        assert read_user_choice('varname', OPTIONS) == expected_value\n    \n        prompt.assert_called_once_with(\n            EXPECTED_PROMPT,\n            type=click.Choice(OPTIONS),\n            default='1',\n>           show_choices=False\n        )",
            "\ntests/test_read_user_choice.py:33: AssertionError"
        ],
        [
            "_mock_self = <MagicMock name='prompt' id='4351193680'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4351060432'>}\nexpected = (('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',), {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4351060432'>})\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x10223b710>\nactual = call('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4', default='1', type=<MagicMock name='Choice()' id='4351060432'>)\ncause = None\n\n    def assert_called_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        self = _mock_self\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            raise AssertionError('Expected call: %s\\nNot called' % (expected,))\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher((args, kwargs))\n        actual = self._call_matcher(self.call_args)\n        if expected != actual:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:878: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n_mock_self = <MagicMock name='prompt' id='4351193680'>\nargs = ('Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4',)\nkwargs = {'default': '1', 'show_choices': False, 'type': <MagicMock name='Choice()' id='4351060432'>}\nself = <MagicMock name='prompt' id='4351193680'>\n\n    def assert_called_once_with(_mock_self, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        self = _mock_self\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.\" %\n                   (self._mock_name or 'mock', self.call_count))\n            raise AssertionError(msg)\n>       return self.assert_called_with(*args, **kwargs)",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/unittest/mock.py:889: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmocker = <pytest_mock.plugin.MockerFixture object at 0x1036965d0>\nuser_choice = 4, expected_value = 'bar'\n\n    @pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\n    def test_click_invocation(mocker, user_choice, expected_value):\n        choice = mocker.patch('click.Choice')\n        choice.return_value = click.Choice(OPTIONS)\n    \n        prompt = mocker.patch('click.prompt')\n        prompt.return_value = '{}'.format(user_choice)\n    \n        assert read_user_choice('varname', OPTIONS) == expected_value\n    \n        prompt.assert_called_once_with(\n            EXPECTED_PROMPT,\n            type=click.Choice(OPTIONS),\n            default='1',\n>           show_choices=False\n        )",
            "\ntests/test_read_user_choice.py:33: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "options": "['hello', 'world', 'foo', 'bar']",
                "var_name": "'varname'"
            },
            {
                "choice_map": "OrderedDict([('1', 'hello'), ('2', 'world'), ('3', 'foo'), ('4', 'bar')])",
                "choices": "odict_keys(['1', '2', '3', '4'])",
                "default": "'1'",
                "choice_lines": "['1 - hello', '2 - world', '3 - foo', '4 - bar']",
                "prompt": "'Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4'",
                "user_choice": "'1'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "options": "list",
                "var_name": "str"
            },
            {
                "choice_map": "OrderedDict",
                "choices": "odict_keys",
                "default": "str",
                "choice_lines": "list",
                "prompt": "str",
                "user_choice": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "options": "['hello', 'world', 'foo', 'bar']",
                "var_name": "'varname'"
            },
            {
                "choice_map": "OrderedDict([('1', 'hello'), ('2', 'world'), ('3', 'foo'), ('4', 'bar')])",
                "choices": "odict_keys(['1', '2', '3', '4'])",
                "default": "'1'",
                "choice_lines": "['1 - hello', '2 - world', '3 - foo', '4 - bar']",
                "prompt": "'Select varname:\\n1 - hello\\n2 - world\\n3 - foo\\n4 - bar\\nChoose from 1, 2, 3, 4'",
                "user_choice": "'1'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "options": "list",
                "var_name": "str"
            },
            {
                "choice_map": "OrderedDict",
                "choices": "odict_keys",
                "default": "str",
                "choice_lines": "list",
                "prompt": "str",
                "user_choice": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}