{
    "cookiecutter:4": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/cookiecutter/exceptions.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "\"\"\"",
                    "start_line": 83,
                    "end_line": 83
                }
            ],
            "inscope_functions": [],
            "inscope_function_signatures": [],
            "variables_in_file": {
                "Exception": [
                    12
                ],
                "CookiecutterException": [
                    34,
                    67,
                    41,
                    73,
                    79,
                    48,
                    19,
                    55,
                    27,
                    61
                ]
            },
            "filtered_variables_in_file": {
                "CookiecutterException": [
                    34,
                    67,
                    41,
                    73,
                    79,
                    48,
                    19,
                    55,
                    27,
                    61
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/cookiecutter/generate.py": {
            "buggy_functions": [
                {
                    "function_name": "generate_files",
                    "function_code": "def generate_files(repo_dir, context=None, output_dir='.',\n                   overwrite_if_exists=False):\n    \"\"\"\n    Renders the templates and saves them to files.\n\n    :param repo_dir: Project template input directory.\n    :param context: Dict for populating the template's variables.\n    :param output_dir: Where to output the generated project dir into.\n    :param overwrite_if_exists: Overwrite the contents of the output directory\n        if it exists\n    \"\"\"\n\n    template_dir = find_template(repo_dir)\n    logging.debug('Generating project from {0}...'.format(template_dir))\n    context = context or {}\n\n    unrendered_dir = os.path.split(template_dir)[1]\n    ensure_dir_is_templated(unrendered_dir)\n    project_dir = render_and_create_dir(unrendered_dir,\n                                        context,\n                                        output_dir,\n                                        overwrite_if_exists)\n\n    # We want the Jinja path and the OS paths to match. Consequently, we'll:\n    #   + CD to the template folder\n    #   + Set Jinja's path to '.'\n    #\n    #  In order to build our files to the correct folder(s), we'll use an\n    # absolute path for the target folder (project_dir)\n\n    project_dir = os.path.abspath(project_dir)\n    logging.debug('project_dir is {0}'.format(project_dir))\n\n    # run pre-gen hook from repo_dir\n    with work_in(repo_dir):\n        if run_hook('pre_gen_project', project_dir, context) != EXIT_SUCCESS:\n            logging.error(\"Stopping generation because pre_gen_project\"\n                          \" hook script didn't exit sucessfully\")\n            return\n\n    with work_in(template_dir):\n        env = Environment(keep_trailing_newline=True)\n        env.loader = FileSystemLoader('.')\n\n        for root, dirs, files in os.walk('.'):\n            # We must separate the two types of dirs into different lists.\n            # The reason is that we don't want ``os.walk`` to go through the\n            # unrendered directories, since they will just be copied.\n            copy_dirs = []\n            render_dirs = []\n\n            for d in dirs:\n                d_ = os.path.normpath(os.path.join(root, d))\n                # We check the full path, because that's how it can be\n                # specified in the ``_copy_without_render`` setting, but\n                # we store just the dir name\n                if copy_without_render(d_, context):\n                    copy_dirs.append(d)\n                else:\n                    render_dirs.append(d)\n\n            for copy_dir in copy_dirs:\n                indir = os.path.normpath(os.path.join(root, copy_dir))\n                outdir = os.path.normpath(os.path.join(project_dir, indir))\n                logging.debug(\n                    'Copying dir {0} to {1} without rendering'\n                    ''.format(indir, outdir)\n                )\n                shutil.copytree(indir, outdir)\n\n            # We mutate ``dirs``, because we only want to go through these dirs\n            # recursively\n            dirs[:] = render_dirs\n            for d in dirs:\n                unrendered_dir = os.path.join(project_dir, root, d)\n                render_and_create_dir(unrendered_dir, context, output_dir,\n                                      overwrite_if_exists)\n\n            for f in files:\n                infile = os.path.normpath(os.path.join(root, f))\n                if copy_without_render(infile, context):\n                    outfile_tmpl = Template(infile)\n                    outfile_rendered = outfile_tmpl.render(**context)\n                    outfile = os.path.join(project_dir, outfile_rendered)\n                    logging.debug(\n                        'Copying file {0} to {1} without rendering'\n                        ''.format(infile, outfile)\n                    )\n                    shutil.copyfile(infile, outfile)\n                    shutil.copymode(infile, outfile)\n                    continue\n                logging.debug('f is {0}'.format(f))\n                generate_file(project_dir, infile, context, env)\n\n    # run post-gen hook from repo_dir\n    with work_in(repo_dir):\n        run_hook('post_gen_project', project_dir, context)\n\n    return project_dir\n",
                    "decorators": [],
                    "docstring": "Renders the templates and saves them to files.\n\n:param repo_dir: Project template input directory.\n:param context: Dict for populating the template's variables.\n:param output_dir: Where to output the generated project dir into.\n:param overwrite_if_exists: Overwrite the contents of the output directory\n    if it exists",
                    "start_line": 225,
                    "end_line": 323,
                    "variables": {
                        "template_dir": [
                            241,
                            237,
                            238,
                            265
                        ],
                        "find_template": [
                            237
                        ],
                        "repo_dir": [
                            320,
                            259,
                            237
                        ],
                        "logging.debug": [
                            256,
                            289,
                            238,
                            309,
                            316
                        ],
                        "logging": [
                            256,
                            289,
                            261,
                            238,
                            309,
                            316
                        ],
                        "format": [
                            256,
                            290,
                            238,
                            310,
                            316
                        ],
                        "context": [
                            321,
                            260,
                            300,
                            239,
                            305,
                            307,
                            244,
                            281,
                            317
                        ],
                        "unrendered_dir": [
                            299,
                            300,
                            241,
                            242,
                            243
                        ],
                        "os.path.split": [
                            241
                        ],
                        "os.path": [
                            288,
                            255,
                            299,
                            304,
                            241,
                            308,
                            277,
                            287
                        ],
                        "os": [
                            288,
                            255,
                            299,
                            269,
                            304,
                            241,
                            308,
                            277,
                            287
                        ],
                        "ensure_dir_is_templated": [
                            242
                        ],
                        "project_dir": [
                            256,
                            288,
                            321,
                            323,
                            260,
                            299,
                            243,
                            308,
                            317,
                            255
                        ],
                        "render_and_create_dir": [
                            243,
                            300
                        ],
                        "output_dir": [
                            300,
                            245
                        ],
                        "overwrite_if_exists": [
                            301,
                            246
                        ],
                        "os.path.abspath": [
                            255
                        ],
                        "work_in": [
                            320,
                            265,
                            259
                        ],
                        "run_hook": [
                            321,
                            260
                        ],
                        "EXIT_SUCCESS": [
                            260
                        ],
                        "logging.error": [
                            261
                        ],
                        "env": [
                            266,
                            267,
                            317
                        ],
                        "Environment": [
                            266
                        ],
                        "env.loader": [
                            267
                        ],
                        "FileSystemLoader": [
                            267
                        ],
                        "root": [
                            299,
                            269,
                            304,
                            277,
                            287
                        ],
                        "dirs": [
                            297,
                            298,
                            276,
                            269
                        ],
                        "files": [
                            269,
                            303
                        ],
                        "os.walk": [
                            269
                        ],
                        "copy_dirs": [
                            273,
                            282,
                            286
                        ],
                        "render_dirs": [
                            297,
                            274,
                            284
                        ],
                        "d": [
                            298,
                            299,
                            276,
                            277,
                            282,
                            284
                        ],
                        "d_": [
                            281,
                            277
                        ],
                        "os.path.normpath": [
                            288,
                            304,
                            277,
                            287
                        ],
                        "os.path.join": [
                            288,
                            299,
                            304,
                            308,
                            277,
                            287
                        ],
                        "copy_without_render": [
                            281,
                            305
                        ],
                        "copy_dirs.append": [
                            282
                        ],
                        "render_dirs.append": [
                            284
                        ],
                        "copy_dir": [
                            286,
                            287
                        ],
                        "indir": [
                            288,
                            291,
                            293,
                            287
                        ],
                        "outdir": [
                            288,
                            291,
                            293
                        ],
                        "shutil.copytree": [
                            293
                        ],
                        "shutil": [
                            313,
                            314,
                            293
                        ],
                        "f": [
                            304,
                            316,
                            303
                        ],
                        "infile": [
                            304,
                            305,
                            306,
                            311,
                            313,
                            314,
                            317
                        ],
                        "outfile_tmpl": [
                            306,
                            307
                        ],
                        "Template": [
                            306
                        ],
                        "outfile_rendered": [
                            307,
                            308
                        ],
                        "outfile_tmpl.render": [
                            307
                        ],
                        "outfile": [
                            313,
                            314,
                            308,
                            311
                        ],
                        "shutil.copyfile": [
                            313
                        ],
                        "shutil.copymode": [
                            314
                        ],
                        "generate_file": [
                            317
                        ]
                    },
                    "filtered_variables": {
                        "template_dir": [
                            241,
                            237,
                            238,
                            265
                        ],
                        "find_template": [
                            237
                        ],
                        "repo_dir": [
                            320,
                            259,
                            237
                        ],
                        "logging.debug": [
                            256,
                            289,
                            238,
                            309,
                            316
                        ],
                        "logging": [
                            256,
                            289,
                            261,
                            238,
                            309,
                            316
                        ],
                        "context": [
                            321,
                            260,
                            300,
                            239,
                            305,
                            307,
                            244,
                            281,
                            317
                        ],
                        "unrendered_dir": [
                            299,
                            300,
                            241,
                            242,
                            243
                        ],
                        "os.path.split": [
                            241
                        ],
                        "os.path": [
                            288,
                            255,
                            299,
                            304,
                            241,
                            308,
                            277,
                            287
                        ],
                        "os": [
                            288,
                            255,
                            299,
                            269,
                            304,
                            241,
                            308,
                            277,
                            287
                        ],
                        "ensure_dir_is_templated": [
                            242
                        ],
                        "project_dir": [
                            256,
                            288,
                            321,
                            323,
                            260,
                            299,
                            243,
                            308,
                            317,
                            255
                        ],
                        "render_and_create_dir": [
                            243,
                            300
                        ],
                        "output_dir": [
                            300,
                            245
                        ],
                        "overwrite_if_exists": [
                            301,
                            246
                        ],
                        "os.path.abspath": [
                            255
                        ],
                        "work_in": [
                            320,
                            265,
                            259
                        ],
                        "run_hook": [
                            321,
                            260
                        ],
                        "EXIT_SUCCESS": [
                            260
                        ],
                        "logging.error": [
                            261
                        ],
                        "env": [
                            266,
                            267,
                            317
                        ],
                        "Environment": [
                            266
                        ],
                        "env.loader": [
                            267
                        ],
                        "FileSystemLoader": [
                            267
                        ],
                        "root": [
                            299,
                            269,
                            304,
                            277,
                            287
                        ],
                        "dirs": [
                            297,
                            298,
                            276,
                            269
                        ],
                        "files": [
                            269,
                            303
                        ],
                        "os.walk": [
                            269
                        ],
                        "copy_dirs": [
                            273,
                            282,
                            286
                        ],
                        "render_dirs": [
                            297,
                            274,
                            284
                        ],
                        "d": [
                            298,
                            299,
                            276,
                            277,
                            282,
                            284
                        ],
                        "d_": [
                            281,
                            277
                        ],
                        "os.path.normpath": [
                            288,
                            304,
                            277,
                            287
                        ],
                        "os.path.join": [
                            288,
                            299,
                            304,
                            308,
                            277,
                            287
                        ],
                        "copy_without_render": [
                            281,
                            305
                        ],
                        "copy_dirs.append": [
                            282
                        ],
                        "render_dirs.append": [
                            284
                        ],
                        "copy_dir": [
                            286,
                            287
                        ],
                        "indir": [
                            288,
                            291,
                            293,
                            287
                        ],
                        "outdir": [
                            288,
                            291,
                            293
                        ],
                        "shutil.copytree": [
                            293
                        ],
                        "shutil": [
                            313,
                            314,
                            293
                        ],
                        "f": [
                            304,
                            316,
                            303
                        ],
                        "infile": [
                            304,
                            305,
                            306,
                            311,
                            313,
                            314,
                            317
                        ],
                        "outfile_tmpl": [
                            306,
                            307
                        ],
                        "Template": [
                            306
                        ],
                        "outfile_rendered": [
                            307,
                            308
                        ],
                        "outfile_tmpl.render": [
                            307
                        ],
                        "outfile": [
                            313,
                            314,
                            308,
                            311
                        ],
                        "shutil.copyfile": [
                            313
                        ],
                        "shutil.copymode": [
                            314
                        ],
                        "generate_file": [
                            317
                        ]
                    },
                    "diff_line_number": 260,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from .exceptions import (\n    NonTemplatedInputDirException,\n    ContextDecodingException,\n    OutputDirExistsException\n)\nfrom .find import find_template\nfrom .utils import make_sure_path_exists, work_in\nfrom .hooks import run_hook, EXIT_SUCCESS",
                    "start_line": 24,
                    "end_line": 32
                }
            ],
            "inscope_functions": [
                "def copy_without_render(path, context):\n    \"\"\"\n    Returns True if `path` matches some pattern in the\n    `_copy_without_render` context setting.\n\n    :param path: A file-system path referring to a file or dir that\n        should be rendered or just copied.\n    :param context: cookiecutter context.\n    \"\"\"\n    try:\n        for dont_render in context['cookiecutter']['_copy_without_render']:\n            if fnmatch.fnmatch(path, dont_render):\n                return True\n    except KeyError:\n        return False\n\n    return False",
                "def apply_overwrites_to_context(context, overwrite_context):\n    \"\"\"Modify the given context in place based on the overwrite_context.\"\"\"\n    for variable, overwrite in overwrite_context.items():\n        if variable not in context:\n            # Do not include variables which are not used in the template\n            continue\n\n        context_value = context[variable]\n\n        if isinstance(context_value, list):\n            # We are dealing with a choice variable\n            if overwrite in context_value:\n                # This overwrite is actually valid for the given context\n                # Let's set it as default (by definition first item in list)\n                # see ``cookiecutter.prompt.prompt_choice_for_config``\n                context_value.remove(overwrite)\n                context_value.insert(0, overwrite)\n        else:\n            # Simply overwrite the value for this variable\n            context[variable] = overwrite",
                "def generate_context(context_file='cookiecutter.json', default_context=None,\n                     extra_context=None):\n    \"\"\"\n    Generates the context for a Cookiecutter project template.\n    Loads the JSON file as a Python object, with key being the JSON filename.\n\n    :param context_file: JSON file containing key/value pairs for populating\n        the cookiecutter's variables.\n    :param default_context: Dictionary containing config to take into account.\n    :param extra_context: Dictionary containing configuration overrides\n    \"\"\"\n\n    context = {}\n\n    file_handle = open(context_file)\n    try:\n        obj = json.load(file_handle, object_pairs_hook=OrderedDict)\n    except ValueError as e:\n        # JSON decoding error.  Let's throw a new exception that is more\n        # friendly for the developer or user.\n        full_fpath = os.path.abspath(context_file)\n        json_exc_message = str(e)\n        our_exc_message = (\n            'JSON decoding error while loading \"{0}\".  Decoding'\n            ' error details: \"{1}\"'.format(full_fpath, json_exc_message))\n        raise ContextDecodingException(our_exc_message)\n\n    # Add the Python object to the context dictionary\n    file_name = os.path.split(context_file)[1]\n    file_stem = file_name.split('.')[0]\n    context[file_stem] = obj\n\n    # Overwrite context variable defaults with the default context from the\n    # user's global config, if available\n    if default_context:\n        apply_overwrites_to_context(obj, default_context)\n    if extra_context:\n        apply_overwrites_to_context(obj, extra_context)\n\n    logging.debug('Context generated is {0}'.format(context))\n    return context",
                "def generate_file(project_dir, infile, context, env):\n    \"\"\"\n    1. Render the filename of infile as the name of outfile.\n    2. Deal with infile appropriately:\n\n        a. If infile is a binary file, copy it over without rendering.\n        b. If infile is a text file, render its contents and write the\n           rendered infile to outfile.\n\n    Precondition:\n\n        When calling `generate_file()`, the root template dir must be the\n        current working directory. Using `utils.work_in()` is the recommended\n        way to perform this directory change.\n\n    :param project_dir: Absolute path to the resulting generated project.\n    :param infile: Input file to generate the file from. Relative to the root\n        template dir.\n    :param context: Dict for populating the cookiecutter's variables.\n    :param env: Jinja2 template execution environment.\n    \"\"\"\n\n    logging.debug('Generating file {0}'.format(infile))\n\n    # Render the path to the output file (not including the root project dir)\n    outfile_tmpl = Template(infile)\n\n    outfile = os.path.join(project_dir, outfile_tmpl.render(**context))\n    file_name_is_empty = os.path.isdir(outfile)\n    if file_name_is_empty:\n        logging.debug('The resulting file name is empty: {0}'.format(outfile))\n        return\n\n    logging.debug('outfile is {0}'.format(outfile))\n\n    # Just copy over binary files. Don't render.\n    logging.debug(\"Check {0} to see if it's a binary\".format(infile))\n    if is_binary(infile):\n        logging.debug('Copying binary {0} to {1} without rendering'\n                      .format(infile, outfile))\n        shutil.copyfile(infile, outfile)\n    else:\n        # Force fwd slashes on Windows for get_template\n        # This is a by-design Jinja issue\n        infile_fwd_slashes = infile.replace(os.path.sep, '/')\n\n        # Render the file\n        try:\n            tmpl = env.get_template(infile_fwd_slashes)\n        except TemplateSyntaxError as exception:\n            # Disable translated so that printed exception contains verbose\n            # information about syntax error location\n            exception.translated = False\n            raise\n        rendered_file = tmpl.render(**context)\n\n        logging.debug('Writing {0}'.format(outfile))\n\n        with io.open(outfile, 'w', encoding='utf-8') as fh:\n            fh.write(rendered_file)\n\n    # Apply file permissions to output file\n    shutil.copymode(infile, outfile)",
                "def render_and_create_dir(dirname, context, output_dir,\n                          overwrite_if_exists=False):\n    \"\"\"\n    Renders the name of a directory, creates the directory, and\n    returns its path.\n    \"\"\"\n\n    name_tmpl = Template(dirname)\n    rendered_dirname = name_tmpl.render(**context)\n    logging.debug('Rendered dir {0} must exist in output_dir {1}'.format(\n        rendered_dirname,\n        output_dir\n    ))\n    dir_to_create = os.path.normpath(\n        os.path.join(output_dir, rendered_dirname)\n    )\n\n    output_dir_exists = os.path.exists(dir_to_create)\n\n    if overwrite_if_exists:\n        if output_dir_exists:\n            logging.debug('Output directory {} already exists,'\n                          'overwriting it'.format(dir_to_create))\n    else:\n        if output_dir_exists:\n            msg = 'Error: \"{}\" directory already exists'.format(dir_to_create)\n            raise OutputDirExistsException(msg)\n\n    make_sure_path_exists(dir_to_create)\n    return dir_to_create",
                "def ensure_dir_is_templated(dirname):\n    \"\"\"\n    Ensures that dirname is a templated directory name.\n    \"\"\"\n    if '{{' in dirname and '}}' in dirname:\n        return True\n    else:\n        raise NonTemplatedInputDirException",
                "def generate_files(repo_dir, context=None, output_dir='.',\n                   overwrite_if_exists=False):\n    \"\"\"\n    Renders the templates and saves them to files.\n\n    :param repo_dir: Project template input directory.\n    :param context: Dict for populating the template's variables.\n    :param output_dir: Where to output the generated project dir into.\n    :param overwrite_if_exists: Overwrite the contents of the output directory\n        if it exists\n    \"\"\"\n\n    template_dir = find_template(repo_dir)\n    logging.debug('Generating project from {0}...'.format(template_dir))\n    context = context or {}\n\n    unrendered_dir = os.path.split(template_dir)[1]\n    ensure_dir_is_templated(unrendered_dir)\n    project_dir = render_and_create_dir(unrendered_dir,\n                                        context,\n                                        output_dir,\n                                        overwrite_if_exists)\n\n    # We want the Jinja path and the OS paths to match. Consequently, we'll:\n    #   + CD to the template folder\n    #   + Set Jinja's path to '.'\n    #\n    #  In order to build our files to the correct folder(s), we'll use an\n    # absolute path for the target folder (project_dir)\n\n    project_dir = os.path.abspath(project_dir)\n    logging.debug('project_dir is {0}'.format(project_dir))\n\n    # run pre-gen hook from repo_dir\n    with work_in(repo_dir):\n        if run_hook('pre_gen_project', project_dir, context) != EXIT_SUCCESS:\n            logging.error(\"Stopping generation because pre_gen_project\"\n                          \" hook script didn't exit sucessfully\")\n            return\n\n    with work_in(template_dir):\n        env = Environment(keep_trailing_newline=True)\n        env.loader = FileSystemLoader('.')\n\n        for root, dirs, files in os.walk('.'):\n            # We must separate the two types of dirs into different lists.\n            # The reason is that we don't want ``os.walk`` to go through the\n            # unrendered directories, since they will just be copied.\n            copy_dirs = []\n            render_dirs = []\n\n            for d in dirs:\n                d_ = os.path.normpath(os.path.join(root, d))\n                # We check the full path, because that's how it can be\n                # specified in the ``_copy_without_render`` setting, but\n                # we store just the dir name\n                if copy_without_render(d_, context):\n                    copy_dirs.append(d)\n                else:\n                    render_dirs.append(d)\n\n            for copy_dir in copy_dirs:\n                indir = os.path.normpath(os.path.join(root, copy_dir))\n                outdir = os.path.normpath(os.path.join(project_dir, indir))\n                logging.debug(\n                    'Copying dir {0} to {1} without rendering'\n                    ''.format(indir, outdir)\n                )\n                shutil.copytree(indir, outdir)\n\n            # We mutate ``dirs``, because we only want to go through these dirs\n            # recursively\n            dirs[:] = render_dirs\n            for d in dirs:\n                unrendered_dir = os.path.join(project_dir, root, d)\n                render_and_create_dir(unrendered_dir, context, output_dir,\n                                      overwrite_if_exists)\n\n            for f in files:\n                infile = os.path.normpath(os.path.join(root, f))\n                if copy_without_render(infile, context):\n                    outfile_tmpl = Template(infile)\n                    outfile_rendered = outfile_tmpl.render(**context)\n                    outfile = os.path.join(project_dir, outfile_rendered)\n                    logging.debug(\n                        'Copying file {0} to {1} without rendering'\n                        ''.format(infile, outfile)\n                    )\n                    shutil.copyfile(infile, outfile)\n                    shutil.copymode(infile, outfile)\n                    continue\n                logging.debug('f is {0}'.format(f))\n                generate_file(project_dir, infile, context, env)\n\n    # run post-gen hook from repo_dir\n    with work_in(repo_dir):\n        run_hook('post_gen_project', project_dir, context)\n\n    return project_dir"
            ],
            "inscope_function_signatures": [
                "copy_without_render(path, context)",
                "apply_overwrites_to_context(context, overwrite_context)",
                "generate_context(context_file='cookiecutter.json', default_context=None, extra_context=None)",
                "generate_file(project_dir, infile, context, env)",
                "render_and_create_dir(dirname, context, output_dir, overwrite_if_exists=False)",
                "ensure_dir_is_templated(dirname)",
                "generate_files(repo_dir, context=None, output_dir='.', overwrite_if_exists=False)"
            ],
            "variables_in_file": {
                "dont_render": [
                    44,
                    45
                ],
                "context": [
                    260,
                    145,
                    281,
                    44,
                    172,
                    300,
                    305,
                    307,
                    56,
                    60,
                    317,
                    191,
                    321,
                    72,
                    87,
                    105,
                    239,
                    114,
                    115,
                    244
                ],
                "fnmatch.fnmatch": [
                    45
                ],
                "fnmatch": [
                    45
                ],
                "path": [
                    45
                ],
                "KeyError": [
                    47
                ],
                "variable": [
                    56,
                    72,
                    60,
                    55
                ],
                "overwrite": [
                    64,
                    68,
                    69,
                    72,
                    55
                ],
                "overwrite_context.items": [
                    55
                ],
                "overwrite_context": [
                    55
                ],
                "context_value": [
                    64,
                    68,
                    69,
                    60,
                    62
                ],
                "isinstance": [
                    62
                ],
                "list": [
                    62
                ],
                "context_value.remove": [
                    68
                ],
                "context_value.insert": [
                    69
                ],
                "file_handle": [
                    89,
                    91
                ],
                "open": [
                    89
                ],
                "context_file": [
                    89,
                    103,
                    95
                ],
                "obj": [
                    112,
                    105,
                    91,
                    110
                ],
                "json.load": [
                    91
                ],
                "json": [
                    91
                ],
                "OrderedDict": [
                    91
                ],
                "ValueError": [
                    92
                ],
                "full_fpath": [
                    99,
                    95
                ],
                "os.path.abspath": [
                    255,
                    95
                ],
                "os.path": [
                    288,
                    162,
                    255,
                    196,
                    197,
                    287,
                    103,
                    200,
                    299,
                    304,
                    145,
                    146,
                    241,
                    308,
                    277,
                    95
                ],
                "os": [
                    288,
                    162,
                    255,
                    196,
                    197,
                    287,
                    103,
                    200,
                    299,
                    269,
                    304,
                    145,
                    146,
                    241,
                    308,
                    277,
                    95
                ],
                "json_exc_message": [
                    96,
                    99
                ],
                "str": [
                    96
                ],
                "e": [
                    96
                ],
                "our_exc_message": [
                    97,
                    100
                ],
                "format": [
                    192,
                    256,
                    98,
                    290,
                    140,
                    204,
                    174,
                    238,
                    208,
                    114,
                    148,
                    310,
                    151,
                    316,
                    154,
                    156
                ],
                "ContextDecodingException": [
                    100
                ],
                "file_name": [
                    104,
                    103
                ],
                "os.path.split": [
                    241,
                    103
                ],
                "file_stem": [
                    104,
                    105
                ],
                "file_name.split": [
                    104
                ],
                "default_context": [
                    109,
                    110
                ],
                "apply_overwrites_to_context": [
                    112,
                    110
                ],
                "extra_context": [
                    112,
                    111
                ],
                "logging.debug": [
                    192,
                    256,
                    289,
                    140,
                    204,
                    174,
                    238,
                    114,
                    148,
                    309,
                    316,
                    151,
                    154,
                    156
                ],
                "logging": [
                    192,
                    256,
                    289,
                    261,
                    140,
                    204,
                    174,
                    238,
                    114,
                    148,
                    309,
                    316,
                    151,
                    154,
                    156
                ],
                "infile": [
                    162,
                    317,
                    140,
                    314,
                    143,
                    304,
                    305,
                    306,
                    180,
                    311,
                    313,
                    154,
                    155,
                    157,
                    158
                ],
                "outfile_tmpl": [
                    145,
                    306,
                    307,
                    143
                ],
                "Template": [
                    306,
                    190,
                    143
                ],
                "outfile": [
                    174,
                    176,
                    145,
                    146,
                    311,
                    148,
                    180,
                    308,
                    151,
                    313,
                    314,
                    157,
                    158
                ],
                "os.path.join": [
                    288,
                    197,
                    299,
                    304,
                    145,
                    308,
                    277,
                    287
                ],
                "project_dir": [
                    256,
                    288,
                    321,
                    323,
                    260,
                    299,
                    145,
                    243,
                    308,
                    317,
                    255
                ],
                "outfile_tmpl.render": [
                    145,
                    307
                ],
                "file_name_is_empty": [
                    146,
                    147
                ],
                "os.path.isdir": [
                    146
                ],
                "is_binary": [
                    155
                ],
                "shutil.copyfile": [
                    313,
                    158
                ],
                "shutil": [
                    293,
                    180,
                    313,
                    314,
                    158
                ],
                "infile_fwd_slashes": [
                    162,
                    166
                ],
                "infile.replace": [
                    162
                ],
                "os.path.sep": [
                    162
                ],
                "tmpl": [
                    172,
                    166
                ],
                "env.get_template": [
                    166
                ],
                "env": [
                    266,
                    267,
                    317,
                    166
                ],
                "TemplateSyntaxError": [
                    167
                ],
                "exception.translated": [
                    170
                ],
                "exception": [
                    170
                ],
                "rendered_file": [
                    177,
                    172
                ],
                "tmpl.render": [
                    172
                ],
                "io.open": [
                    176
                ],
                "io": [
                    176
                ],
                "fh": [
                    176,
                    177
                ],
                "fh.write": [
                    177
                ],
                "shutil.copymode": [
                    314,
                    180
                ],
                "name_tmpl": [
                    190,
                    191
                ],
                "dirname": [
                    219,
                    190
                ],
                "rendered_dirname": [
                    193,
                    197,
                    191
                ],
                "name_tmpl.render": [
                    191
                ],
                "output_dir": [
                    245,
                    194,
                    300,
                    197
                ],
                "dir_to_create": [
                    196,
                    200,
                    205,
                    208,
                    211,
                    212
                ],
                "os.path.normpath": [
                    288,
                    196,
                    304,
                    277,
                    287
                ],
                "output_dir_exists": [
                    200,
                    203,
                    207
                ],
                "os.path.exists": [
                    200
                ],
                "overwrite_if_exists": [
                    202,
                    301,
                    246
                ],
                "msg": [
                    208,
                    209
                ],
                "OutputDirExistsException": [
                    209
                ],
                "make_sure_path_exists": [
                    211
                ],
                "NonTemplatedInputDirException": [
                    222
                ],
                "template_dir": [
                    241,
                    237,
                    238,
                    265
                ],
                "find_template": [
                    237
                ],
                "repo_dir": [
                    320,
                    259,
                    237
                ],
                "unrendered_dir": [
                    299,
                    300,
                    241,
                    242,
                    243
                ],
                "ensure_dir_is_templated": [
                    242
                ],
                "render_and_create_dir": [
                    243,
                    300
                ],
                "work_in": [
                    320,
                    265,
                    259
                ],
                "run_hook": [
                    321,
                    260
                ],
                "EXIT_SUCCESS": [
                    260
                ],
                "logging.error": [
                    261
                ],
                "Environment": [
                    266
                ],
                "env.loader": [
                    267
                ],
                "FileSystemLoader": [
                    267
                ],
                "root": [
                    299,
                    269,
                    304,
                    277,
                    287
                ],
                "dirs": [
                    297,
                    298,
                    276,
                    269
                ],
                "files": [
                    269,
                    303
                ],
                "os.walk": [
                    269
                ],
                "copy_dirs": [
                    273,
                    282,
                    286
                ],
                "render_dirs": [
                    297,
                    274,
                    284
                ],
                "d": [
                    298,
                    299,
                    276,
                    277,
                    282,
                    284
                ],
                "d_": [
                    281,
                    277
                ],
                "copy_without_render": [
                    281,
                    305
                ],
                "copy_dirs.append": [
                    282
                ],
                "render_dirs.append": [
                    284
                ],
                "copy_dir": [
                    286,
                    287
                ],
                "indir": [
                    288,
                    291,
                    293,
                    287
                ],
                "outdir": [
                    288,
                    291,
                    293
                ],
                "shutil.copytree": [
                    293
                ],
                "f": [
                    304,
                    316,
                    303
                ],
                "outfile_rendered": [
                    307,
                    308
                ],
                "generate_file": [
                    317
                ]
            },
            "filtered_variables_in_file": {
                "dont_render": [
                    44,
                    45
                ],
                "context": [
                    260,
                    145,
                    281,
                    44,
                    172,
                    300,
                    305,
                    307,
                    56,
                    60,
                    317,
                    191,
                    321,
                    72,
                    87,
                    105,
                    239,
                    114,
                    115,
                    244
                ],
                "fnmatch.fnmatch": [
                    45
                ],
                "fnmatch": [
                    45
                ],
                "path": [
                    45
                ],
                "variable": [
                    56,
                    72,
                    60,
                    55
                ],
                "overwrite": [
                    64,
                    68,
                    69,
                    72,
                    55
                ],
                "overwrite_context.items": [
                    55
                ],
                "overwrite_context": [
                    55
                ],
                "context_value": [
                    64,
                    68,
                    69,
                    60,
                    62
                ],
                "context_value.remove": [
                    68
                ],
                "context_value.insert": [
                    69
                ],
                "file_handle": [
                    89,
                    91
                ],
                "context_file": [
                    89,
                    103,
                    95
                ],
                "obj": [
                    112,
                    105,
                    91,
                    110
                ],
                "json.load": [
                    91
                ],
                "json": [
                    91
                ],
                "OrderedDict": [
                    91
                ],
                "full_fpath": [
                    99,
                    95
                ],
                "os.path.abspath": [
                    255,
                    95
                ],
                "os.path": [
                    288,
                    162,
                    255,
                    196,
                    197,
                    287,
                    103,
                    200,
                    299,
                    304,
                    145,
                    146,
                    241,
                    308,
                    277,
                    95
                ],
                "os": [
                    288,
                    162,
                    255,
                    196,
                    197,
                    287,
                    103,
                    200,
                    299,
                    269,
                    304,
                    145,
                    146,
                    241,
                    308,
                    277,
                    95
                ],
                "json_exc_message": [
                    96,
                    99
                ],
                "e": [
                    96
                ],
                "our_exc_message": [
                    97,
                    100
                ],
                "ContextDecodingException": [
                    100
                ],
                "file_name": [
                    104,
                    103
                ],
                "os.path.split": [
                    241,
                    103
                ],
                "file_stem": [
                    104,
                    105
                ],
                "file_name.split": [
                    104
                ],
                "default_context": [
                    109,
                    110
                ],
                "apply_overwrites_to_context": [
                    112,
                    110
                ],
                "extra_context": [
                    112,
                    111
                ],
                "logging.debug": [
                    192,
                    256,
                    289,
                    140,
                    204,
                    174,
                    238,
                    114,
                    148,
                    309,
                    316,
                    151,
                    154,
                    156
                ],
                "logging": [
                    192,
                    256,
                    289,
                    261,
                    140,
                    204,
                    174,
                    238,
                    114,
                    148,
                    309,
                    316,
                    151,
                    154,
                    156
                ],
                "infile": [
                    162,
                    317,
                    140,
                    314,
                    143,
                    304,
                    305,
                    306,
                    180,
                    311,
                    313,
                    154,
                    155,
                    157,
                    158
                ],
                "outfile_tmpl": [
                    145,
                    306,
                    307,
                    143
                ],
                "Template": [
                    306,
                    190,
                    143
                ],
                "outfile": [
                    174,
                    176,
                    145,
                    146,
                    311,
                    148,
                    180,
                    308,
                    151,
                    313,
                    314,
                    157,
                    158
                ],
                "os.path.join": [
                    288,
                    197,
                    299,
                    304,
                    145,
                    308,
                    277,
                    287
                ],
                "project_dir": [
                    256,
                    288,
                    321,
                    323,
                    260,
                    299,
                    145,
                    243,
                    308,
                    317,
                    255
                ],
                "outfile_tmpl.render": [
                    145,
                    307
                ],
                "file_name_is_empty": [
                    146,
                    147
                ],
                "os.path.isdir": [
                    146
                ],
                "is_binary": [
                    155
                ],
                "shutil.copyfile": [
                    313,
                    158
                ],
                "shutil": [
                    293,
                    180,
                    313,
                    314,
                    158
                ],
                "infile_fwd_slashes": [
                    162,
                    166
                ],
                "infile.replace": [
                    162
                ],
                "os.path.sep": [
                    162
                ],
                "tmpl": [
                    172,
                    166
                ],
                "env.get_template": [
                    166
                ],
                "env": [
                    266,
                    267,
                    317,
                    166
                ],
                "TemplateSyntaxError": [
                    167
                ],
                "exception.translated": [
                    170
                ],
                "exception": [
                    170
                ],
                "rendered_file": [
                    177,
                    172
                ],
                "tmpl.render": [
                    172
                ],
                "io.open": [
                    176
                ],
                "io": [
                    176
                ],
                "fh": [
                    176,
                    177
                ],
                "fh.write": [
                    177
                ],
                "shutil.copymode": [
                    314,
                    180
                ],
                "name_tmpl": [
                    190,
                    191
                ],
                "dirname": [
                    219,
                    190
                ],
                "rendered_dirname": [
                    193,
                    197,
                    191
                ],
                "name_tmpl.render": [
                    191
                ],
                "output_dir": [
                    245,
                    194,
                    300,
                    197
                ],
                "dir_to_create": [
                    196,
                    200,
                    205,
                    208,
                    211,
                    212
                ],
                "os.path.normpath": [
                    288,
                    196,
                    304,
                    277,
                    287
                ],
                "output_dir_exists": [
                    200,
                    203,
                    207
                ],
                "os.path.exists": [
                    200
                ],
                "overwrite_if_exists": [
                    202,
                    301,
                    246
                ],
                "msg": [
                    208,
                    209
                ],
                "OutputDirExistsException": [
                    209
                ],
                "make_sure_path_exists": [
                    211
                ],
                "NonTemplatedInputDirException": [
                    222
                ],
                "template_dir": [
                    241,
                    237,
                    238,
                    265
                ],
                "find_template": [
                    237
                ],
                "repo_dir": [
                    320,
                    259,
                    237
                ],
                "unrendered_dir": [
                    299,
                    300,
                    241,
                    242,
                    243
                ],
                "ensure_dir_is_templated": [
                    242
                ],
                "render_and_create_dir": [
                    243,
                    300
                ],
                "work_in": [
                    320,
                    265,
                    259
                ],
                "run_hook": [
                    321,
                    260
                ],
                "EXIT_SUCCESS": [
                    260
                ],
                "logging.error": [
                    261
                ],
                "Environment": [
                    266
                ],
                "env.loader": [
                    267
                ],
                "FileSystemLoader": [
                    267
                ],
                "root": [
                    299,
                    269,
                    304,
                    277,
                    287
                ],
                "dirs": [
                    297,
                    298,
                    276,
                    269
                ],
                "files": [
                    269,
                    303
                ],
                "os.walk": [
                    269
                ],
                "copy_dirs": [
                    273,
                    282,
                    286
                ],
                "render_dirs": [
                    297,
                    274,
                    284
                ],
                "d": [
                    298,
                    299,
                    276,
                    277,
                    282,
                    284
                ],
                "d_": [
                    281,
                    277
                ],
                "copy_without_render": [
                    281,
                    305
                ],
                "copy_dirs.append": [
                    282
                ],
                "render_dirs.append": [
                    284
                ],
                "copy_dir": [
                    286,
                    287
                ],
                "indir": [
                    288,
                    291,
                    293,
                    287
                ],
                "outdir": [
                    288,
                    291,
                    293
                ],
                "shutil.copytree": [
                    293
                ],
                "f": [
                    304,
                    316,
                    303
                ],
                "outfile_rendered": [
                    307,
                    308
                ],
                "generate_file": [
                    317
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/cookiecutter/hooks.py": {
            "buggy_functions": [
                {
                    "function_name": "run_script",
                    "function_code": "def run_script(script_path, cwd='.'):\n    \"\"\"\n    Executes a script from a working directory.\n\n    :param script_path: Absolute path to the script to run.\n    :param cwd: The directory to run the script from.\n    \"\"\"\n    run_thru_shell = sys.platform.startswith('win')\n    if script_path.endswith('.py'):\n        script_command = [sys.executable, script_path]\n    else:\n        script_command = [script_path]\n\n    utils.make_executable(script_path)\n\n    proc = subprocess.Popen(\n        script_command,\n        shell=run_thru_shell,\n        cwd=cwd\n    )\n    return proc.wait()\n",
                    "decorators": [],
                    "docstring": "Executes a script from a working directory.\n\n:param script_path: Absolute path to the script to run.\n:param cwd: The directory to run the script from.",
                    "start_line": 52,
                    "end_line": 72,
                    "variables": {
                        "run_thru_shell": [
                            59,
                            69
                        ],
                        "sys.platform.startswith": [
                            59
                        ],
                        "sys.platform": [
                            59
                        ],
                        "sys": [
                            59,
                            61
                        ],
                        "script_path.endswith": [
                            60
                        ],
                        "script_path": [
                            65,
                            60,
                            61,
                            63
                        ],
                        "script_command": [
                            68,
                            61,
                            63
                        ],
                        "sys.executable": [
                            61
                        ],
                        "utils.make_executable": [
                            65
                        ],
                        "utils": [
                            65
                        ],
                        "proc": [
                            72,
                            67
                        ],
                        "subprocess.Popen": [
                            67
                        ],
                        "subprocess": [
                            67
                        ],
                        "cwd": [
                            70
                        ],
                        "proc.wait": [
                            72
                        ]
                    },
                    "filtered_variables": {
                        "run_thru_shell": [
                            59,
                            69
                        ],
                        "sys.platform.startswith": [
                            59
                        ],
                        "sys.platform": [
                            59
                        ],
                        "sys": [
                            59,
                            61
                        ],
                        "script_path.endswith": [
                            60
                        ],
                        "script_path": [
                            65,
                            60,
                            61,
                            63
                        ],
                        "script_command": [
                            68,
                            61,
                            63
                        ],
                        "sys.executable": [
                            61
                        ],
                        "utils.make_executable": [
                            65
                        ],
                        "utils": [
                            65
                        ],
                        "proc": [
                            72,
                            67
                        ],
                        "subprocess.Popen": [
                            67
                        ],
                        "subprocess": [
                            67
                        ],
                        "cwd": [
                            70
                        ],
                        "proc.wait": [
                            72
                        ]
                    },
                    "diff_line_number": 72,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "run_thru_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.platform.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.platform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "script_path.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1103398f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "script_path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmptbb_zbmw.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "script_command": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sys.executable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.make_executable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subprocess.Popen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subprocess": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cwd": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/tests/test-hooks/input{{hooks}}'",
                                    "variable_type": "str",
                                    "variable_shape": "87"
                                },
                                "exit_status": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "proc.wait": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "EXIT_SUCCESS": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FailedHookException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "run_script_with_context",
                    "function_code": "def run_script_with_context(script_path, cwd, context):\n    \"\"\"\n    Executes a script after rendering with it Jinja.\n\n    :param script_path: Absolute path to the script to run.\n    :param cwd: The directory to run the script from.\n    :param context: Cookiecutter project template context.\n    \"\"\"\n    _, extension = os.path.splitext(script_path)\n\n    contents = io.open(script_path, 'r', encoding='utf-8').read()\n\n    with tempfile.NamedTemporaryFile(\n        delete=False,\n        mode='w',\n        suffix=extension\n    ) as temp:\n        temp.write(Template(contents).render(**context))\n\n    return run_script(temp.name, cwd)\n",
                    "decorators": [],
                    "docstring": "Executes a script after rendering with it Jinja.\n\n:param script_path: Absolute path to the script to run.\n:param cwd: The directory to run the script from.\n:param context: Cookiecutter project template context.",
                    "start_line": 75,
                    "end_line": 94,
                    "variables": {
                        "_": [
                            83
                        ],
                        "extension": [
                            90,
                            83
                        ],
                        "os.path.splitext": [
                            83
                        ],
                        "os.path": [
                            83
                        ],
                        "os": [
                            83
                        ],
                        "script_path": [
                            83,
                            85
                        ],
                        "contents": [
                            92,
                            85
                        ],
                        "read": [
                            85
                        ],
                        "io.open": [
                            85
                        ],
                        "io": [
                            85
                        ],
                        "tempfile.NamedTemporaryFile": [
                            87
                        ],
                        "tempfile": [
                            87
                        ],
                        "temp": [
                            91,
                            92,
                            94
                        ],
                        "temp.write": [
                            92
                        ],
                        "render": [
                            92
                        ],
                        "Template": [
                            92
                        ],
                        "context": [
                            92
                        ],
                        "run_script": [
                            94
                        ],
                        "temp.name": [
                            94
                        ],
                        "cwd": [
                            94
                        ]
                    },
                    "filtered_variables": {
                        "_": [
                            83
                        ],
                        "extension": [
                            90,
                            83
                        ],
                        "os.path.splitext": [
                            83
                        ],
                        "os.path": [
                            83
                        ],
                        "os": [
                            83
                        ],
                        "script_path": [
                            83,
                            85
                        ],
                        "contents": [
                            92,
                            85
                        ],
                        "read": [
                            85
                        ],
                        "io.open": [
                            85
                        ],
                        "io": [
                            85
                        ],
                        "tempfile.NamedTemporaryFile": [
                            87
                        ],
                        "tempfile": [
                            87
                        ],
                        "temp": [
                            91,
                            92,
                            94
                        ],
                        "temp.write": [
                            92
                        ],
                        "render": [
                            92
                        ],
                        "Template": [
                            92
                        ],
                        "context": [
                            92
                        ],
                        "run_script": [
                            94
                        ],
                        "temp.name": [
                            94
                        ],
                        "cwd": [
                            94
                        ]
                    },
                    "diff_line_number": 94,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extension": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "script_path": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/tests/test-hooks/hooks/pre_gen_project.py'",
                                    "variable_type": "str",
                                    "variable_shape": "97"
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io.open": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tempfile.NamedTemporaryFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tempfile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "temp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "temp.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "render": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "run_script": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "temp.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cwd": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/tests/test-hooks/input{{hooks}}'",
                                    "variable_type": "str",
                                    "variable_shape": "87"
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "run_hook",
                    "function_code": "def run_hook(hook_name, project_dir, context):\n    \"\"\"\n    Try to find and execute a hook from the specified project directory.\n\n    :param hook_name: The hook to execute.\n    :param project_dir: The directory to execute the script from.\n    :param context: Cookiecutter project context.\n    \"\"\"\n    script = find_hooks().get(hook_name)\n    if script is None:\n        logging.debug('No hooks found')\n        return EXIT_SUCCESS\n    return run_script_with_context(script, project_dir, context)\n",
                    "decorators": [],
                    "docstring": "Try to find and execute a hook from the specified project directory.\n\n:param hook_name: The hook to execute.\n:param project_dir: The directory to execute the script from.\n:param context: Cookiecutter project context.",
                    "start_line": 97,
                    "end_line": 109,
                    "variables": {
                        "script": [
                            105,
                            106,
                            109
                        ],
                        "get": [
                            105
                        ],
                        "find_hooks": [
                            105
                        ],
                        "hook_name": [
                            105
                        ],
                        "logging.debug": [
                            107
                        ],
                        "logging": [
                            107
                        ],
                        "EXIT_SUCCESS": [
                            108
                        ],
                        "run_script_with_context": [
                            109
                        ],
                        "project_dir": [
                            109
                        ],
                        "context": [
                            109
                        ]
                    },
                    "filtered_variables": {
                        "script": [
                            105,
                            106,
                            109
                        ],
                        "get": [
                            105
                        ],
                        "find_hooks": [
                            105
                        ],
                        "hook_name": [
                            105
                        ],
                        "logging.debug": [
                            107
                        ],
                        "logging": [
                            107
                        ],
                        "EXIT_SUCCESS": [
                            108
                        ],
                        "run_script_with_context": [
                            109
                        ],
                        "project_dir": [
                            109
                        ],
                        "context": [
                            109
                        ]
                    },
                    "diff_line_number": 108,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "script": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "find_hooks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "hook_name": {
                                    "variable_value": "'pre_gen_project'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "logging.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logging": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "run_script_with_context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "project_dir": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/tests/test-hooks/input{{hooks}}'",
                                    "variable_type": "str",
                                    "variable_shape": "87"
                                },
                                "context": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from cookiecutter import utils",
                    "start_line": 20,
                    "end_line": 21
                }
            ],
            "inscope_functions": [
                "def find_hooks():\n    \"\"\"\n    Must be called with the project template as the current working directory.\n    Returns a dict of all hook scripts provided.\n    Dict's key will be the hook/script's name, without extension, while\n    values will be the absolute path to the script.\n    Missing scripts will not be included in the returned dict.\n    \"\"\"\n    hooks_dir = 'hooks'\n    r = {}\n    logging.debug('hooks_dir is {0}'.format(hooks_dir))\n    if not os.path.isdir(hooks_dir):\n        logging.debug('No hooks/ dir in template_dir')\n        return r\n    for f in os.listdir(hooks_dir):\n        basename = os.path.splitext(os.path.basename(f))[0]\n        if basename in _HOOKS:\n            r[basename] = os.path.abspath(os.path.join(hooks_dir, f))\n    return r",
                "def run_script(script_path, cwd='.'):\n    \"\"\"\n    Executes a script from a working directory.\n\n    :param script_path: Absolute path to the script to run.\n    :param cwd: The directory to run the script from.\n    \"\"\"\n    run_thru_shell = sys.platform.startswith('win')\n    if script_path.endswith('.py'):\n        script_command = [sys.executable, script_path]\n    else:\n        script_command = [script_path]\n\n    utils.make_executable(script_path)\n\n    proc = subprocess.Popen(\n        script_command,\n        shell=run_thru_shell,\n        cwd=cwd\n    )\n    return proc.wait()",
                "def run_script_with_context(script_path, cwd, context):\n    \"\"\"\n    Executes a script after rendering with it Jinja.\n\n    :param script_path: Absolute path to the script to run.\n    :param cwd: The directory to run the script from.\n    :param context: Cookiecutter project template context.\n    \"\"\"\n    _, extension = os.path.splitext(script_path)\n\n    contents = io.open(script_path, 'r', encoding='utf-8').read()\n\n    with tempfile.NamedTemporaryFile(\n        delete=False,\n        mode='w',\n        suffix=extension\n    ) as temp:\n        temp.write(Template(contents).render(**context))\n\n    return run_script(temp.name, cwd)",
                "def run_hook(hook_name, project_dir, context):\n    \"\"\"\n    Try to find and execute a hook from the specified project directory.\n\n    :param hook_name: The hook to execute.\n    :param project_dir: The directory to execute the script from.\n    :param context: Cookiecutter project context.\n    \"\"\"\n    script = find_hooks().get(hook_name)\n    if script is None:\n        logging.debug('No hooks found')\n        return EXIT_SUCCESS\n    return run_script_with_context(script, project_dir, context)"
            ],
            "inscope_function_signatures": [
                "find_hooks()",
                "run_script(script_path, cwd='.')",
                "run_script_with_context(script_path, cwd, context)",
                "run_hook(hook_name, project_dir, context)"
            ],
            "variables_in_file": {
                "_HOOKS": [
                    47,
                    23
                ],
                "EXIT_SUCCESS": [
                    108,
                    28
                ],
                "hooks_dir": [
                    39,
                    41,
                    42,
                    45,
                    48
                ],
                "r": [
                    40,
                    49,
                    48,
                    44
                ],
                "logging.debug": [
                    107,
                    41,
                    43
                ],
                "logging": [
                    107,
                    41,
                    43
                ],
                "format": [
                    41
                ],
                "os.path.isdir": [
                    42
                ],
                "os.path": [
                    48,
                    42,
                    83,
                    46
                ],
                "os": [
                    42,
                    45,
                    46,
                    48,
                    83
                ],
                "f": [
                    48,
                    45,
                    46
                ],
                "os.listdir": [
                    45
                ],
                "basename": [
                    48,
                    46,
                    47
                ],
                "os.path.splitext": [
                    83,
                    46
                ],
                "os.path.basename": [
                    46
                ],
                "os.path.abspath": [
                    48
                ],
                "os.path.join": [
                    48
                ],
                "run_thru_shell": [
                    59,
                    69
                ],
                "sys.platform.startswith": [
                    59
                ],
                "sys.platform": [
                    59
                ],
                "sys": [
                    59,
                    61
                ],
                "script_path.endswith": [
                    60
                ],
                "script_path": [
                    65,
                    83,
                    85,
                    60,
                    61,
                    63
                ],
                "script_command": [
                    68,
                    61,
                    63
                ],
                "sys.executable": [
                    61
                ],
                "utils.make_executable": [
                    65
                ],
                "utils": [
                    65
                ],
                "proc": [
                    72,
                    67
                ],
                "subprocess.Popen": [
                    67
                ],
                "subprocess": [
                    67
                ],
                "cwd": [
                    94,
                    70
                ],
                "proc.wait": [
                    72
                ],
                "_": [
                    83
                ],
                "extension": [
                    90,
                    83
                ],
                "contents": [
                    92,
                    85
                ],
                "read": [
                    85
                ],
                "io.open": [
                    85
                ],
                "io": [
                    85
                ],
                "tempfile.NamedTemporaryFile": [
                    87
                ],
                "tempfile": [
                    87
                ],
                "temp": [
                    91,
                    92,
                    94
                ],
                "temp.write": [
                    92
                ],
                "render": [
                    92
                ],
                "Template": [
                    92
                ],
                "context": [
                    92,
                    109
                ],
                "run_script": [
                    94
                ],
                "temp.name": [
                    94
                ],
                "script": [
                    105,
                    106,
                    109
                ],
                "get": [
                    105
                ],
                "find_hooks": [
                    105
                ],
                "hook_name": [
                    105
                ],
                "run_script_with_context": [
                    109
                ],
                "project_dir": [
                    109
                ]
            },
            "filtered_variables_in_file": {
                "_HOOKS": [
                    47,
                    23
                ],
                "EXIT_SUCCESS": [
                    108,
                    28
                ],
                "hooks_dir": [
                    39,
                    41,
                    42,
                    45,
                    48
                ],
                "r": [
                    40,
                    49,
                    48,
                    44
                ],
                "logging.debug": [
                    107,
                    41,
                    43
                ],
                "logging": [
                    107,
                    41,
                    43
                ],
                "os.path.isdir": [
                    42
                ],
                "os.path": [
                    48,
                    42,
                    83,
                    46
                ],
                "os": [
                    42,
                    45,
                    46,
                    48,
                    83
                ],
                "f": [
                    48,
                    45,
                    46
                ],
                "os.listdir": [
                    45
                ],
                "basename": [
                    48,
                    46,
                    47
                ],
                "os.path.splitext": [
                    83,
                    46
                ],
                "os.path.basename": [
                    46
                ],
                "os.path.abspath": [
                    48
                ],
                "os.path.join": [
                    48
                ],
                "run_thru_shell": [
                    59,
                    69
                ],
                "sys.platform.startswith": [
                    59
                ],
                "sys.platform": [
                    59
                ],
                "sys": [
                    59,
                    61
                ],
                "script_path.endswith": [
                    60
                ],
                "script_path": [
                    65,
                    83,
                    85,
                    60,
                    61,
                    63
                ],
                "script_command": [
                    68,
                    61,
                    63
                ],
                "sys.executable": [
                    61
                ],
                "utils.make_executable": [
                    65
                ],
                "utils": [
                    65
                ],
                "proc": [
                    72,
                    67
                ],
                "subprocess.Popen": [
                    67
                ],
                "subprocess": [
                    67
                ],
                "cwd": [
                    94,
                    70
                ],
                "proc.wait": [
                    72
                ],
                "_": [
                    83
                ],
                "extension": [
                    90,
                    83
                ],
                "contents": [
                    92,
                    85
                ],
                "read": [
                    85
                ],
                "io.open": [
                    85
                ],
                "io": [
                    85
                ],
                "tempfile.NamedTemporaryFile": [
                    87
                ],
                "tempfile": [
                    87
                ],
                "temp": [
                    91,
                    92,
                    94
                ],
                "temp.write": [
                    92
                ],
                "render": [
                    92
                ],
                "Template": [
                    92
                ],
                "context": [
                    92,
                    109
                ],
                "run_script": [
                    94
                ],
                "temp.name": [
                    94
                ],
                "script": [
                    105,
                    106,
                    109
                ],
                "get": [
                    105
                ],
                "find_hooks": [
                    105
                ],
                "hook_name": [
                    105
                ],
                "run_script_with_context": [
                    109
                ],
                "project_dir": [
                    109
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/cookiecutter_4/tests/test_hooks.py",
                "test_function": "test_run_failing_hook",
                "test_function_code": "    def test_run_failing_hook(self):\n        hook_path = os.path.join(self.hooks_path, 'pre_gen_project.py')\n        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')\n\n        with open(hook_path, 'w') as f:\n            f.write(\"#!/usr/bin/env python\\n\")\n            f.write(\"import sys; sys.exit(1)\\n\")\n\n        with utils.work_in(self.repo_path):\n            with pytest.raises(exceptions.FailedHookException) as excinfo:\n                hooks.run_hook('pre_gen_project', tests_dir, {})\n            assert 'Hook script failed' in str(excinfo)",
                "test_error": "AttributeError: module 'cookiecutter.exceptions' has no attribute 'FailedHookException'",
                "full_test_error": "self = <tests.test_hooks.TestExternalHooks object at 0x10c9c60d0>\n\n    def test_run_failing_hook(self):\n        hook_path = os.path.join(self.hooks_path, 'pre_gen_project.py')\n        tests_dir = os.path.join(self.repo_path, 'input{{hooks}}')\n    \n        with open(hook_path, 'w') as f:\n            f.write(\"#!/usr/bin/env python\\n\")\n            f.write(\"import sys; sys.exit(1)\\n\")\n    \n        with utils.work_in(self.repo_path):\n>           with pytest.raises(exceptions.FailedHookException) as excinfo:\nE           AttributeError: module 'cookiecutter.exceptions' has no attribute 'FailedHookException'\n\ntests/test_hooks.py:180: AttributeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}