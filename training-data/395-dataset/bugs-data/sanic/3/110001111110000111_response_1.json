{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs) -> str:\n    from typing import Dict\n    from urllib.parse import urlencode, urlunparse\n    import re\n    uri, route = self.router.find_route_by_view_name(view_name)\n    \n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    out = uri\n    \n    matched_params = re.findall(self.router.parameter_pattern, uri)\n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n        if name in kwargs:\n            supplied_param = kwargs.get(name)\n            del kwargs[name]\n        else:\n            raise URLBuildError(\n                \"Required parameter `{}` was not passed to url_for\".format(\n                    name\n                )\n            )\n        # Replace the parameter in the URL with the supplied value\n        out = out.replace(\"<{}>\".format(name), str(supplied_param))\n    \n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = urlunparse((\"http\", self.get_server_name(), out, \"\", query_string, \"\"))\n    \n    return out"
        }
    ]
}