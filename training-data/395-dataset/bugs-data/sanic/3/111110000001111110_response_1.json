{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 798,
            "file_name": "app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n\n    r\"\"\"Build a URL based on a view name and the values provided.\n    \n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n    \n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n    \n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n    \n    :return: the built URL\n    \n    Raises:\n        URLBuildError\n    \"\"\"\n    # find the route by the supplied view name\n    kw: Dict[str, str] = {}\n    # special static files url_for\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n    \n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    if view_name.startswith(\"static\") or view_name.endswith(\".static\"):   \n        filename = kwargs.pop(\"filename\", None)\n        if filename:\n            path = route.uri.split(\"/\", 1)[1]  \n            uri = f\"/{filename}\"\n            if path != \"\":\n                uri = f\"{path}/{filename}\" \n        else:\n            uri = f\"{route.uri}{filename if filename else ''}\"\n    else:\n        uri = route.uri\n    \n    for key in kwargs:\n        if key.startswith(\"_\") and not key == \"_anchor\":\n            if key == \"_external\":\n                if kwargs.get(key):\n                    if not self.config.get(\"SERVER_NAME\", \"\"):\n                        raise ValueError(\"SERVER_NAME is not configured\")\n                else:\n                    raise ValueError(\"_external requires True value\")\n                continue\n            elif key == \"_scheme\":\n                scheme = kwargs.get(key)\n                continue\n            else:\n                continue\n        if key in uri:\n            uri = uri.replace(f\"<{key}>\", str(kwargs.get(key)))\n        else:\n            if not uri.endswith(\"/\"): \n                uri = f\"{uri}/{key}/{kwargs.get(key)}\"\n            else:\n                uri = uri.rstrip(\"/\")\n                uri = f\"{uri}/{key}/{kwargs.get(key)}\"\n    \n    if kwargs.get(\"_external\", False):\n        scheme = scheme or \"http\"\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n        if not netloc:\n            raise ValueError(\"SERVER_NAME is not configured\")\n        if not uri.startswith(\"http\"):\n            uri = f\"{scheme}://{netloc}{uri}\"\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = urlunparse((scheme, netloc, uri, \"\", query_string, kwargs.get(\"_anchor\", \"\")))\n    return out"
        }
    ]
}