{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    # existing code...\n\n    # find the route by the supplied view name\n\n    uri, route = self.router.find_route_by_view_name(view_name, **kwargs)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    filename = kwargs.pop(\"filename\", None)\n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n    \n    out = uri\n    \n    # construct the fully qualified domain name for external URLs\n    external = kwargs.pop(\"_external\", False)\n    if external:\n        scheme = kwargs.pop(\"_scheme\", \"\")\n        if not scheme:\n            netloc = kwargs.pop(\"_server\", None)\n            if netloc is None:\n                netloc = self.config.get(\"SERVER_NAME\", \"\")\n            if \"://\" not in netloc:\n                netloc = \"http://\" + netloc\n            out = netloc + uri\n    \n    # construct the query string\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out += \"?\" + query_string if query_string else \"\"\n    \n    return out"
        }
    ]
}