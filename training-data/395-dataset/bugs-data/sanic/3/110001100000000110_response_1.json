{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 798,
            "file_name": "app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n\n    r\"\"\"Build a URL based on a view name and the values provided.\n    \n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n    \n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n    \n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n    \n    :return: the built URL\n    \n    Raises:\n        URLBuildError\n    \"\"\"\n    \n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        name = kwargs.pop(\"name\", view_name)\n        if not name:\n            name = \"static\"\n        else:\n            name = name\n    else:\n        name = view_name\n    \n    uri, route = self.router.find_route_by_view_name(name)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(name)\n        )\n    \n    if \"<\" in uri and \">\" in uri:\n        param_list = re.findall(\"<(.*?)>\", uri)\n        for param in param_list:\n            if param in kwargs:\n                uri = uri.replace(f\"<{param}>\", kwargs[param])\n                del kwargs[param]\n    \n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    if route.host:\n        url = f\"{route.host}{uri}?{query_string}\" if query_string else f\"{route.host}{uri}\"\n    else: \n        url = f\"{uri}?{query_string}\" if query_string else f\"{uri}\"\n    \n    return url"
        }
    ]
}