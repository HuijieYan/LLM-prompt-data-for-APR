{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, _external=False, _scheme=\"\", _server=None, _anchor=\"\", **kwargs):\n\n    r\"\"\"Build a URL based on a view name and the values provided.\n    \n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n    \n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n    \n    :param view_name: string referencing the view name\n    :param _external: If set to True, the URL will be an absolute URL\n    :param _scheme: URL scheme (e.g., 'http', 'https')\n    :param _server: Network location (e.g., 'example.com')\n    :param _anchor: URL anchor (e.g., '#section')\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n    \n    :return: the built URL\n    \n    Raises:\n        URLBuildError\n    \"\"\"\n    endpoint = self.router.get(name=view_name)\n    if not endpoint:\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    uri = endpoint.uri\n    for key, value in kwargs.items():\n        uri = uri.replace(\"<{}>\".format(key), value)\n    \n    if _external:\n        if _scheme == \"\":\n            if \":\" in _server[:8]:\n                _scheme = _server[:8].split(\":\", 1)[0]\n            else:\n                _scheme = \"http\"\n    \n        netloc = _server if _server else self.config.get(\"SERVER_NAME\", \"\")\n        if not netloc:\n            raise ValueError(\"When specifying _server, _external must be True\")\n    \n        if uri.startswith(\"/\"):\n            uri = uri[1:]\n    \n        url = f\"{_scheme}://{netloc}/{uri}\"\n    else:\n        url = uri\n    \n    if _anchor:\n        url += _anchor\n    \n    return url"
        }
    ]
}