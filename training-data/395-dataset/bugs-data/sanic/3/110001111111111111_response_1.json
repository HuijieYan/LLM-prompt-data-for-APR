{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 798,
            "file_name": "app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs):\n    from typing import Dict\n    import re\n    from urllib.parse import urlencode, urlunparse\n    from sanic.exceptions import URLBuildError\n    r\"\"\"Build a URL based on a view name and the values provided.\n    \n    In order to build a URL, all request parameters must be supplied as\n    keyword arguments, and each parameter must pass the test for the\n    specified parameter type. If these conditions are not met, a\n    `URLBuildError` will be thrown.\n    \n    Keyword arguments that are not request parameters will be included in\n    the output URL's query string.\n    \n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n    \n    :return: the built URL\n    \n    Raises:\n        URLBuildError\n    \"\"\"\n    # find the route by the supplied view name\n    kw: Dict[str, str] = {}\n    # special static files url_for\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n    \n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\n            \"Endpoint with name `{}` was not found\".format(view_name)\n        )\n    \n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        filename = kwargs.pop(\"filename\", None)\n        # it's static folder\n        if \"<file_uri:\" in uri:\n            folder_ = uri.split(\"<file_uri:\", 1)[0]\n            if folder_.endswith(\"/\"):\n                folder_ = folder_[:-1]\n    \n            if filename.startswith(\"/\"):\n                filename = filename[1:]\n    \n            uri = \"{}/{}\".format(folder_, filename)\n    \n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n    \n    # build the URL with the appropriate scheme and netloc\n    scheme = kwargs.pop(\"_scheme\", \"\") or self.config.get(\"URL_SCHEME\", \"http\")\n    netloc = kwargs.pop(\"_server\", None) or request.host  # assuming `request` is available\n    \n    if kwargs.pop(\"_external\", False):\n        uri = urlunparse((scheme, netloc, uri, \"\", \"\", \"\"))\n    else:\n        uri = urlunparse((\"\", \"\", uri, \"\", \"\", \"\"))\n    \n    # parse the remainder of the keyword arguments into a querystring\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    out = f\"{uri}?{query_string}\" if query_string else uri\n    \n    return out"
        }
    ]
}