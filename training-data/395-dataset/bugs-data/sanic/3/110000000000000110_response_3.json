{
    "sanic": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 798,
            "file_name": "sanic/app.py",
            "replace_code": "def url_for(self, view_name: str, **kwargs) -> str:\n    from typing import Dict\n    from urllib.parse import urlencode, urlunparse\n    import re\n    \"\"\"\n    Build a URL based on a view name and the values provided.\n    \n    :param view_name: string referencing the view name\n    :param \\**kwargs: keys and values that are used to build request\n        parameters and query string arguments.\n    \n    :return: the built URL\n    \n    Raises:\n        ValueError: When specifying _scheme, _external must be True\n        URLBuildError: Endpoint with name `{}` was not found\n    \"\"\"\n    kw: Dict[str, str] = {}\n    # special static files url_for\n    if view_name == \"static\":\n        kw.update(name=kwargs.pop(\"name\", \"static\"))\n    elif view_name.endswith(\".static\"):  # blueprint.static\n        kwargs.pop(\"name\", None)\n        kw.update(name=view_name)\n    \n    uri, route = self.router.find_route_by_view_name(view_name, **kw)\n    if not (uri and route):\n        raise URLBuildError(\"Endpoint with name `{}` was not found\".format(view_name))\n    \n    if view_name == \"static\" or view_name.endswith(\".static\"):\n        filename = kwargs.pop(\"filename\", None)\n        # it's static folder\n        if \"<file_uri:\" in uri:\n            folder_ = uri.split(\"<file_uri:\", 1)[0]\n            if folder_.endswith(\"/\"):\n                folder_ = folder_[:-1]\n    \n            if filename.startswith(\"/\"):\n                filename = filename[1:]\n    \n            uri = f\"{folder_}/{filename}\"\n    \n    if uri != \"/\" and uri.endswith(\"/\"):\n        uri = uri[:-1]\n    \n    out = uri\n    \n    # find all the parameters we will need to build in the URL\n    matched_params = re.findall(self.router.parameter_pattern, uri)\n    \n    # _method is only a placeholder now, don't know how to support it\n    kwargs.pop(\"_method\", None)\n    anchor = kwargs.pop(\"_anchor\", \"\")\n    # _external need SERVER_NAME in config or pass _server arg\n    external = kwargs.pop(\"_external\", False)\n    scheme = kwargs.pop(\"_scheme\", \"\")\n    if scheme and not external:\n        raise ValueError(\"When specifying _scheme, _external must be True\")\n    \n    netloc = kwargs.pop(\"_server\", None)\n    if netloc is None and external:\n        netloc = self.config.get(\"SERVER_NAME\", \"\")\n    \n    if external:\n        if not scheme:\n            if \":\" in netloc[:8]:\n                scheme = netloc[:8].split(\":\", 1)[0]\n            else:\n                scheme = \"http\"\n    \n        if \"://\" in netloc[:8]:\n            netloc = netloc.split(\"://\", 1)[-1]\n    \n    for match in matched_params:\n        name, _type, pattern = self.router.parse_parameter_string(match)\n        # we only want to match against each individual parameter\n        specific_pattern = f\"^{pattern}$\"\n        supplied_param = kwargs.pop(name, None)\n        if supplied_param is None:\n            raise URLBuildError(f\"Required parameter `{name}` was not passed to url_for\")\n    \n        supplied_param = str(supplied_param)\n        # determine if the parameter supplied by the caller passes the test\n        # in the URL\n        passes_pattern = re.match(specific_pattern, supplied_param)\n    \n        if not passes_pattern:\n            if _type != str:\n                msg = f'Value \"{supplied_param}\" for parameter `{name}` does not ' \\\n                      f\"match pattern for type `{_type.__name__}`: {pattern}\"\n            else:\n                msg = f'Value \"{supplied_param}\" for parameter `{name}` ' \\\n                      f\"does not satisfy pattern {pattern}\"\n            raise URLBuildError(msg)\n    \n        # replace the parameter in the URL with the supplied value\n        replacement_regex = f\"(<{name}.*?>)\"\n        out = re.sub(replacement_regex, supplied_param, out)\n    \n    # parse the remainder of the keyword arguments into a querystring\n    query_string = urlencode(kwargs, doseq=True) if kwargs else \"\"\n    # scheme://netloc/path;parameters?query#fragment\n    out = urlunparse((scheme, netloc, out, \"\", query_string, anchor))\n    \n    return out"
        }
    ]
}