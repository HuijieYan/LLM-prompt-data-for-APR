{
    "1.1.1": "def __await__(self):\n    \n    task = asyncio.ensure_future(self.serve_coro)\n    while not task.done():\n        yield\n    self.server = task.result()\n    return self\n",
    "1.1.2": "Starts the asyncio server, returns AsyncServerCoro",
    "1.2.1": "class AsyncioServer()",
    "1.2.2": "Wraps an asyncio server with functionality that might be useful to\na user who needs to manage the server lifecycle manually.",
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/sanic_2/sanic/server.py",
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "2.1.1": null,
    "2.1.2": null,
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "Incorrect documentation for AsyncioServer or missing __getattr__ on AsyncioServer\n"
    ],
    "3.1.2": [
        "Describe the bug\nThe described sample code for the AsyncIO server is out of date (https://sanic.readthedocs.io/en/latest/sanic/asyncio_python37.html) or a resultant merge stripped a __getattr__ handler from the AsyncIOServer class.\n\nI discovered this while bootstrapping a mock Azure API inside pytest for my API server (all Sanic because, why not?)\n\nCode snippet\n\n#!/usr/bin/env python3\nimport socket\nimport asyncio\n\nfrom sanic import Sanic\nfrom sanic.response import text\n\nasync def main():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n    sock.bind((\"\", 0))\n    print(sock.getsockname())\n\n    app = Sanic(\"azure_test_api\")\n\n    @app.get(\"/\")\n    async def test_index(request):\n        return text('test')\n\n    server = await app.create_server(\n        sock=sock,\n        return_asyncio_server=True,\n        asyncio_server_kwargs=dict(start_serving=False),\n    )\n    # The docs say this\n    await server.start_serving()\n    await server.serve_forever()\n    # but only this works ;)\n    # await server.server.start_serving()\n    # await server.server.serve_forever()\n\nif __name__ == \"__main__\":\n    asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())\n    asyncio.run(main())\nExpected behavior\nI expect the docs to be updated or the following added to the AsyncIOServer class in server.py (https://github.com/huge-success/sanic/blob/2f776eba85b80ed5ee7e75badb92028ee1df0f4f/sanic/server.py#L671) -\n\n    def __getattr__(self, prop_name):\n         if not self.server:\n            raise AttributeError('{} not found on {}'.format(prop_name, self)\n         return getattr(self.server, prop_name)\n\nEnvironment (please complete the following information):\n\nOS: osx\nVersion 10.14.6 (18G95)\nAdditional context\nN/A\n"
    ]
}