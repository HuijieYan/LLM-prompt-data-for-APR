{
    "1.1.1": "def url_for(self, view_name, **kwargs):\n    \n    # Full URL SERVER_NAME can only be handled in app.url_for\n    if \"//\" in self.app.config.SERVER_NAME:\n        return self.app.url_for(view_name, _external=True, **kwargs)\n\n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n\n    if (scheme.lower() in (\"http\", \"ws\") and port == 80) or (\n        scheme.lower() in (\"https\", \"wss\") and port == 443\n    ):\n        netloc = host\n    else:\n        netloc = \"{}:{}\".format(host, port)\n\n    return self.app.url_for(\n        view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs\n    )\n",
    "1.1.2": "Same as :func:`sanic.Sanic.url_for`, but automatically determine\n`scheme` and `netloc` base on the request. Since this method is aiming\nto generate correct schema & netloc, `_external` is implied.\n\n:param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n:return: an absolute url to the given view\n:rtype: str",
    "1.2.1": "class Request()",
    "1.2.2": "Properties of an HTTP request such as URL, headers, etc.",
    "1.2.3": [
        "port(self)",
        "server_name(self)",
        "server_port(self)",
        "scheme(self)",
        "host(self)",
        "url_for(self, view_name, **kwargs)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/sanic_4/sanic/request.py",
    "1.3.2": [
        "port(self)",
        "server_name(self)",
        "server_port(self)",
        "scheme(self)",
        "host(self)",
        "url_for(self, view_name, **kwargs)"
    ],
    "1.4.1": [
        "def test_url_for_without_server_name(app):\n    @app.route(\"/sample\")\n    def sample(request):\n        return json({\"url\": request.url_for(\"url_for\")})\n\n    @app.route(\"/url-for\")\n    def url_for(request):\n        return text(\"url-for\")\n\n    request, response = app.test_client.get(\"/sample\")\n    assert (\n        response.json[\"url\"]\n        == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n    )"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/sanic_4/tests/test_requests.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: 'NoneType' object is not subscriptable"
        ]
    ],
    "2.1.2": [
        [
            "app = <sanic.app.Sanic object at 0x105469c70>\n\n    def test_url_for_without_server_name(app):\n        @app.route(\"/sample\")\n        def sample(request):\n            return json({\"url\": request.url_for(\"url_for\")})\n    \n        @app.route(\"/url-for\")\n        def url_for(request):\n            return text(\"url-for\")\n    \n        request, response = app.test_client.get(\"/sample\")\n>       assert (\n            response.json[\"url\"]\n            == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n        )",
            "\ntests/test_requests.py:2118: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self.app": "<sanic.app.Sanic object at 0x10ba91d30>",
                "self": "<Request: GET /sample>",
                "view_name": "'url_for'",
                "kwargs": "{}",
                "self.scheme": "'http'",
                "self.server_name": "'127.0.0.1'",
                "self.server_port": "42101"
            },
            {
                "scheme": "'http'",
                "host": "'127.0.0.1'",
                "port": "42101",
                "netloc": "'127.0.0.1:42101'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.app": "Sanic",
                "self": "Request",
                "view_name": "str",
                "kwargs": "dict",
                "self.scheme": "str",
                "self.server_name": "str",
                "self.server_port": "int"
            },
            {
                "scheme": "str",
                "host": "str",
                "port": "int",
                "netloc": "str"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}