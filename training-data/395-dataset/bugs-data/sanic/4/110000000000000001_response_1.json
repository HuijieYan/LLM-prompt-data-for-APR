{
    "sanic": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 511,
            "file_name": "request.py",
            "replace_code": "def url_for(self, view_name, **kwargs):\n\n    \"\"\"\n    Same as :func:`sanic.Sanic.url_for`, but automatically determine\n    `scheme` and `netloc` based on the request. Since this method is aiming\n    to generate correct schema & netloc, `_external` is implied.\n    \n    :param kwargs: takes the same parameters as in :func:`sanic.Sanic.url_for`\n    :return: an absolute url to the given view\n    :rtype: str\n    \"\"\"\n    # Full URL SERVER_NAME can only be handled in app.url_for\n    if \"//\" in self.config.SERVER_NAME:\n        return self.app.url_for(view_name, _external=True, **kwargs)\n    \n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n    \n    if (scheme.lower() in (\"http\", \"ws\") and port == 80) or (\n        scheme.lower() in (\"https\", \"wss\") and port == 443\n    ):\n        netloc = host\n    else:\n        netloc = \"{}:{}\".format(host, port)\n    \n    return self.app.url_for(\n        view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs\n    )"
        }
    ]
}