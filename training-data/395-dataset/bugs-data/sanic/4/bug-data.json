{
    "sanic:4": {
        "/Volumes/SSD2T/bgp_envs/repos/sanic_4/sanic/request.py": {
            "buggy_functions": [
                {
                    "function_name": "url_for",
                    "function_code": "def url_for(self, view_name, **kwargs):\n    \"\"\"\n    Same as :func:`sanic.Sanic.url_for`, but automatically determine\n    `scheme` and `netloc` base on the request. Since this method is aiming\n    to generate correct schema & netloc, `_external` is implied.\n\n    :param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n    :return: an absolute url to the given view\n    :rtype: str\n    \"\"\"\n    # Full URL SERVER_NAME can only be handled in app.url_for\n    if \"//\" in self.app.config.SERVER_NAME:\n        return self.app.url_for(view_name, _external=True, **kwargs)\n\n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n\n    if (scheme.lower() in (\"http\", \"ws\") and port == 80) or (\n        scheme.lower() in (\"https\", \"wss\") and port == 443\n    ):\n        netloc = host\n    else:\n        netloc = \"{}:{}\".format(host, port)\n\n    return self.app.url_for(\n        view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs\n    )\n",
                    "decorators": [],
                    "docstring": "Same as :func:`sanic.Sanic.url_for`, but automatically determine\n`scheme` and `netloc` base on the request. Since this method is aiming\nto generate correct schema & netloc, `_external` is implied.\n\n:param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n:return: an absolute url to the given view\n:rtype: str",
                    "start_line": 511,
                    "end_line": 538,
                    "variables": {
                        "self.app.config.SERVER_NAME": [
                            522
                        ],
                        "self.app.config": [
                            522
                        ],
                        "self.app": [
                            536,
                            522,
                            523
                        ],
                        "self": [
                            522,
                            523,
                            525,
                            526,
                            527,
                            536
                        ],
                        "self.app.url_for": [
                            536,
                            523
                        ],
                        "view_name": [
                            537,
                            523
                        ],
                        "kwargs": [
                            537,
                            523
                        ],
                        "scheme": [
                            529,
                            530,
                            525,
                            537
                        ],
                        "self.scheme": [
                            525
                        ],
                        "host": [
                            532,
                            526,
                            534
                        ],
                        "self.server_name": [
                            526
                        ],
                        "port": [
                            529,
                            530,
                            534,
                            527
                        ],
                        "self.server_port": [
                            527
                        ],
                        "scheme.lower": [
                            529,
                            530
                        ],
                        "netloc": [
                            537,
                            532,
                            534
                        ],
                        "format": [
                            534
                        ]
                    },
                    "filtered_variables": {
                        "self.app.config.SERVER_NAME": [
                            522
                        ],
                        "self.app.config": [
                            522
                        ],
                        "self.app": [
                            536,
                            522,
                            523
                        ],
                        "self": [
                            522,
                            523,
                            525,
                            526,
                            527,
                            536
                        ],
                        "self.app.url_for": [
                            536,
                            523
                        ],
                        "view_name": [
                            537,
                            523
                        ],
                        "kwargs": [
                            537,
                            523
                        ],
                        "scheme": [
                            529,
                            530,
                            525,
                            537
                        ],
                        "self.scheme": [
                            525
                        ],
                        "host": [
                            532,
                            526,
                            534
                        ],
                        "self.server_name": [
                            526
                        ],
                        "port": [
                            529,
                            530,
                            534,
                            527
                        ],
                        "self.server_port": [
                            527
                        ],
                        "scheme.lower": [
                            529,
                            530
                        ],
                        "netloc": [
                            537,
                            532,
                            534
                        ]
                    },
                    "diff_line_number": 522,
                    "class_data": {
                        "signature": "class Request()",
                        "docstring": "Properties of an HTTP request such as URL, headers, etc.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, url_bytes, headers, version, method, transport, app):\n    self.raw_url = url_bytes\n    self._parsed_url = parse_url(url_bytes)\n    self.app = app\n    self.headers = headers\n    self.version = version\n    self.method = method\n    self.transport = transport\n    self.body_init()\n    self.ctx = SimpleNamespace()\n    self.parsed_forwarded = None\n    self.parsed_json = None\n    self.parsed_form = None\n    self.parsed_files = None\n    self.parsed_args = defaultdict(RequestParameters)\n    self.parsed_not_grouped_args = defaultdict(list)\n    self.uri_template = None\n    self._cookies = None\n    self.stream = None\n    self.endpoint = None",
                            "def __repr__(self):\n    return '<{0}: {1} {2}>'.format(self.__class__.__name__, self.method, self.path)",
                            "def get(self, key, default=None):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    return self.ctx.__dict__.get(key, default)",
                            "def __contains__(self, key):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    return key in self.ctx.__dict__",
                            "def __getitem__(self, key):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    return self.ctx.__dict__[key]",
                            "def __delitem__(self, key):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    del self.ctx.__dict__[key]",
                            "def __setitem__(self, key, value):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    setattr(self.ctx, key, value)",
                            "def body_init(self):\n    self.body = []",
                            "def body_push(self, data):\n    self.body.append(data)",
                            "def body_finish(self):\n    self.body = b''.join(self.body)",
                            "@property\ndef json(self):\n    if self.parsed_json is None:\n        self.load_json()\n    return self.parsed_json",
                            "def load_json(self, loads=json_loads):\n    try:\n        self.parsed_json = loads(self.body)\n    except Exception:\n        if not self.body:\n            return None\n        raise InvalidUsage('Failed when parsing body as json')\n    return self.parsed_json",
                            "@property\ndef token(self):\n    \"\"\"Attempt to return the auth header token.\n\n    :return: token related to request\n    \"\"\"\n    prefixes = ('Bearer', 'Token')\n    auth_header = self.headers.get('Authorization')\n    if auth_header is not None:\n        for prefix in prefixes:\n            if prefix in auth_header:\n                return auth_header.partition(prefix)[-1].strip()\n    return auth_header",
                            "@property\ndef form(self):\n    if self.parsed_form is None:\n        self.parsed_form = RequestParameters()\n        self.parsed_files = RequestParameters()\n        content_type = self.headers.get('Content-Type', DEFAULT_HTTP_CONTENT_TYPE)\n        content_type, parameters = parse_content_header(content_type)\n        try:\n            if content_type == 'application/x-www-form-urlencoded':\n                self.parsed_form = RequestParameters(parse_qs(self.body.decode('utf-8')))\n            elif content_type == 'multipart/form-data':\n                boundary = parameters['boundary'].encode('utf-8')\n                self.parsed_form, self.parsed_files = parse_multipart_form(self.body, boundary)\n        except Exception:\n            error_logger.exception('Failed when parsing form')\n    return self.parsed_form",
                            "@property\ndef files(self):\n    if self.parsed_files is None:\n        self.form\n    return self.parsed_files",
                            "def get_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> RequestParameters:\n    \"\"\"\n    Method to parse `query_string` using `urllib.parse.parse_qs`.\n    This methods is used by `args` property.\n    Can be used directly if you need to change default parameters.\n\n    :param keep_blank_values:\n        flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.\n        A true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n    :type keep_blank_values: bool\n    :param strict_parsing:\n        flag indicating what to do with parsing errors.\n        If false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n    :type strict_parsing: bool\n    :param encoding:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type encoding: str\n    :param errors:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type errors: str\n    :return: RequestParameters\n    \"\"\"\n    if not self.parsed_args[keep_blank_values, strict_parsing, encoding, errors]:\n        if self.query_string:\n            self.parsed_args[keep_blank_values, strict_parsing, encoding, errors] = RequestParameters(parse_qs(qs=self.query_string, keep_blank_values=keep_blank_values, strict_parsing=strict_parsing, encoding=encoding, errors=errors))\n    return self.parsed_args[keep_blank_values, strict_parsing, encoding, errors]",
                            "@property\ndef raw_args(self) -> dict:\n    if self.app.debug:\n        warnings.simplefilter('default')\n    warnings.warn('Use of raw_args will be deprecated in the future versions. Please use args or query_args properties instead', DeprecationWarning)\n    return {k: v[0] for k, v in self.args.items()}",
                            "def get_query_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> list:\n    \"\"\"\n    Method to parse `query_string` using `urllib.parse.parse_qsl`.\n    This methods is used by `query_args` property.\n    Can be used directly if you need to change default parameters.\n\n    :param keep_blank_values:\n        flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.\n        A true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n    :type keep_blank_values: bool\n    :param strict_parsing:\n        flag indicating what to do with parsing errors.\n        If false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n    :type strict_parsing: bool\n    :param encoding:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type encoding: str\n    :param errors:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type errors: str\n    :return: list\n    \"\"\"\n    if not self.parsed_not_grouped_args[keep_blank_values, strict_parsing, encoding, errors]:\n        if self.query_string:\n            self.parsed_not_grouped_args[keep_blank_values, strict_parsing, encoding, errors] = parse_qsl(qs=self.query_string, keep_blank_values=keep_blank_values, strict_parsing=strict_parsing, encoding=encoding, errors=errors)\n    return self.parsed_not_grouped_args[keep_blank_values, strict_parsing, encoding, errors]",
                            "@property\ndef cookies(self):\n    if self._cookies is None:\n        cookie = self.headers.get('Cookie')\n        if cookie is not None:\n            cookies = SimpleCookie()\n            cookies.load(cookie)\n            self._cookies = {name: cookie.value for name, cookie in cookies.items()}\n        else:\n            self._cookies = {}\n    return self._cookies",
                            "@property\ndef ip(self):\n    \"\"\"\n    :return: peer ip of the socket\n    \"\"\"\n    if not hasattr(self, '_socket'):\n        self._get_address()\n    return self._ip",
                            "@property\ndef port(self):\n    \"\"\"\n    :return: peer port of the socket\n    \"\"\"\n    if not hasattr(self, '_socket'):\n        self._get_address()\n    return self._port",
                            "@property\ndef socket(self):\n    if not hasattr(self, '_socket'):\n        self._get_address()\n    return self._socket",
                            "def _get_address(self):\n    self._socket = self.transport.get_extra_info('peername') or (None, None)\n    self._ip = self._socket[0]\n    self._port = self._socket[1]",
                            "@property\ndef server_name(self):\n    \"\"\"\n    Attempt to get the server's external hostname in this order:\n    `config.SERVER_NAME`, proxied or direct Host headers\n    :func:`Request.host`\n\n    :return: the server name without port number\n    :rtype: str\n    \"\"\"\n    server_name = self.app.config.get('SERVER_NAME')\n    if server_name:\n        host = server_name.split('//', 1)[-1].split('/', 1)[0]\n        return parse_host(host)[0]\n    return parse_host(self.host)[0]",
                            "@property\ndef forwarded(self):\n    if self.parsed_forwarded is None:\n        self.parsed_forwarded = parse_forwarded(self.headers, self.app.config) or parse_xforwarded(self.headers, self.app.config) or {}\n    return self.parsed_forwarded",
                            "@property\ndef server_port(self):\n    \"\"\"\n    Attempt to get the server's external port number in this order:\n    `config.SERVER_NAME`, proxied or direct Host headers\n    :func:`Request.host`,\n    actual port used by the transport layer socket.\n    :return: server port\n    :rtype: int\n    \"\"\"\n    if self.forwarded:\n        return self.forwarded.get('port') or (80 if self.scheme in ('http', 'ws') else 443)\n    return parse_host(self.host)[1] or self.transport.get_extra_info('sockname')[1]",
                            "@property\ndef remote_addr(self):\n    \"\"\"Attempt to return the original client ip based on `forwarded`,\n    `x-forwarded-for` or `x-real-ip`. If HTTP headers are unavailable or\n    untrusted, returns an empty string.\n\n    :return: original client ip.\n    \"\"\"\n    if not hasattr(self, '_remote_addr'):\n        self._remote_addr = self.forwarded.get('for', '')\n    return self._remote_addr",
                            "@property\ndef scheme(self):\n    \"\"\"\n    Attempt to get the request scheme.\n    Seeking the value in this order:\n    `forwarded` header, `x-forwarded-proto` header,\n    `x-scheme` header, the sanic app itself.\n\n    :return: http|https|ws|wss or arbitrary value given by the headers.\n    :rtype: str\n    \"\"\"\n    forwarded_proto = self.forwarded.get('proto')\n    if forwarded_proto:\n        return forwarded_proto\n    if self.app.websocket_enabled and self.headers.get('upgrade') == 'websocket':\n        scheme = 'ws'\n    else:\n        scheme = 'http'\n    if self.transport.get_extra_info('sslcontext'):\n        scheme += 's'\n    return scheme",
                            "@property\ndef host(self):\n    \"\"\"\n    :return: proxied or direct Host header. Hostname and port number may be\n      separated by sanic.headers.parse_host(request.host).\n    \"\"\"\n    return self.forwarded.get('host', self.headers.get('Host', ''))",
                            "@property\ndef content_type(self):\n    return self.headers.get('Content-Type', DEFAULT_HTTP_CONTENT_TYPE)",
                            "@property\ndef match_info(self):\n    \"\"\"return matched info after resolving route\"\"\"\n    return self.app.router.get(self)[2]",
                            "@property\ndef path(self):\n    return self._parsed_url.path.decode('utf-8')",
                            "@property\ndef query_string(self):\n    if self._parsed_url.query:\n        return self._parsed_url.query.decode('utf-8')\n    else:\n        return ''",
                            "@property\ndef url(self):\n    return urlunparse((self.scheme, self.host, self.path, None, self.query_string, None))",
                            "def url_for(self, view_name, **kwargs):\n    \"\"\"\n    Same as :func:`sanic.Sanic.url_for`, but automatically determine\n    `scheme` and `netloc` base on the request. Since this method is aiming\n    to generate correct schema & netloc, `_external` is implied.\n\n    :param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n    :return: an absolute url to the given view\n    :rtype: str\n    \"\"\"\n    if '//' in self.app.config.SERVER_NAME:\n        return self.app.url_for(view_name, _external=True, **kwargs)\n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n    if scheme.lower() in ('http', 'ws') and port == 80 or (scheme.lower() in ('https', 'wss') and port == 443):\n        netloc = host\n    else:\n        netloc = '{}:{}'.format(host, port)\n    return self.app.url_for(view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs)"
                        ],
                        "constructor_variables": [
                            "app",
                            "parsed_not_grouped_args",
                            "parsed_json",
                            "method",
                            "parsed_forwarded",
                            "parsed_form",
                            "headers",
                            "parsed_files",
                            "parsed_args",
                            "uri_template",
                            "stream",
                            "transport",
                            "_cookies",
                            "_parsed_url",
                            "ctx",
                            "endpoint",
                            "raw_url",
                            "version"
                        ],
                        "class_level_variables": [
                            "__slots__",
                            "args",
                            "query_args"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, url_bytes, headers, version, method, transport, app)",
                            "__repr__(self)",
                            "get(self, key, default=None)",
                            "__contains__(self, key)",
                            "__getitem__(self, key)",
                            "__delitem__(self, key)",
                            "__setitem__(self, key, value)",
                            "body_init(self)",
                            "body_push(self, data)",
                            "body_finish(self)",
                            "json(self)",
                            "load_json(self, loads=json_loads)",
                            "token(self)",
                            "form(self)",
                            "files(self)",
                            "get_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> RequestParameters",
                            "raw_args(self) -> dict",
                            "get_query_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> list",
                            "cookies(self)",
                            "ip(self)",
                            "port(self)",
                            "socket(self)",
                            "_get_address(self)",
                            "server_name(self)",
                            "forwarded(self)",
                            "server_port(self)",
                            "remote_addr(self)",
                            "scheme(self)",
                            "host(self)",
                            "content_type(self)",
                            "match_info(self)",
                            "path(self)",
                            "query_string(self)",
                            "url(self)",
                            "url_for(self, view_name, **kwargs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.app.config.SERVER_NAME": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.app.config": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.app": {
                                    "variable_value": "<sanic.app.Sanic object at 0x10c87dfa0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<Request: GET /sample>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self.app.url_for": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'url_for'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.server_name": {
                                    "variable_value": "'127.0.0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "port": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.server_port": {
                                    "variable_value": "42101",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.app.config.SERVER_NAME": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.app.config": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.app": {
                                    "variable_value": "<sanic.app.Sanic object at 0x10a5f1ca0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<Request: GET /sample>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self.app.url_for": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'url_for'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "host": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.server_name": {
                                    "variable_value": "'127.0.0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "port": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.server_port": {
                                    "variable_value": "42101",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.app.config.SERVER_NAME": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.app.config": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.app": {
                                    "variable_value": "<sanic.app.Sanic object at 0x10a5f1ca0>",
                                    "variable_type": "Sanic",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<Request: GET /sample>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "self.app.url_for": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "view_name": {
                                    "variable_value": "'url_for'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self.scheme": {
                                    "variable_value": "'http'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "host": {
                                    "variable_value": "'127.0.0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "self.server_name": {
                                    "variable_value": "'127.0.0.1'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "port": {
                                    "variable_value": "42101",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.server_port": {
                                    "variable_value": "42101",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x107afba70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "netloc": {
                                    "variable_value": "'127.0.0.1:42101'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def parse_multipart_form(body, boundary):\n    \"\"\"Parse a request body and returns fields and files\n\n    :param body: bytes request body\n    :param boundary: bytes multipart boundary\n    :return: fields (RequestParameters), files (RequestParameters)\n    \"\"\"\n    files = RequestParameters()\n    fields = RequestParameters()\n\n    form_parts = body.split(boundary)\n    for form_part in form_parts[1:-1]:\n        file_name = None\n        content_type = \"text/plain\"\n        content_charset = \"utf-8\"\n        field_name = None\n        line_index = 2\n        line_end_index = 0\n        while not line_end_index == -1:\n            line_end_index = form_part.find(b\"\\r\\n\", line_index)\n            form_line = form_part[line_index:line_end_index].decode(\"utf-8\")\n            line_index = line_end_index + 2\n\n            if not form_line:\n                break\n\n            colon_index = form_line.index(\":\")\n            form_header_field = form_line[0:colon_index].lower()\n            form_header_value, form_parameters = parse_content_header(\n                form_line[colon_index + 2 :]\n            )\n\n            if form_header_field == \"content-disposition\":\n                field_name = form_parameters.get(\"name\")\n                file_name = form_parameters.get(\"filename\")\n\n                # non-ASCII filenames in RFC2231, \"filename*\" format\n                if file_name is None and form_parameters.get(\"filename*\"):\n                    encoding, _, value = email.utils.decode_rfc2231(\n                        form_parameters[\"filename*\"]\n                    )\n                    file_name = unquote(value, encoding=encoding)\n            elif form_header_field == \"content-type\":\n                content_type = form_header_value\n                content_charset = form_parameters.get(\"charset\", \"utf-8\")\n\n        if field_name:\n            post_data = form_part[line_index:-4]\n            if file_name is None:\n                value = post_data.decode(content_charset)\n                if field_name in fields:\n                    fields[field_name].append(value)\n                else:\n                    fields[field_name] = [value]\n            else:\n                form_file = File(\n                    type=content_type, name=file_name, body=post_data\n                )\n                if field_name in files:\n                    files[field_name].append(form_file)\n                else:\n                    files[field_name] = [form_file]\n        else:\n            logger.debug(\n                \"Form-data field does not have a 'name' parameter \"\n                \"in the Content-Disposition header\"\n            )\n\n    return fields, files",
                "def get(self, name, default=None):\n    \"\"\"Return the first value, either the default or actual\"\"\"\n    return super().get(name, [default])[0]",
                "def getlist(self, name, default=None):\n    \"\"\"Return the entire list\"\"\"\n    return super().get(name, default)",
                "def __init__(self, buffer_size=100):\n    self._queue = asyncio.Queue(buffer_size)",
                "async def read(self):\n    \"\"\" Stop reading when gets None \"\"\"\n    payload = await self._queue.get()\n    self._queue.task_done()\n    return payload",
                "async def put(self, payload):\n    await self._queue.put(payload)",
                "def is_full(self):\n    return self._queue.full()",
                "def __init__(self, url_bytes, headers, version, method, transport, app):\n    self.raw_url = url_bytes\n    # TODO: Content-Encoding detection\n    self._parsed_url = parse_url(url_bytes)\n    self.app = app\n\n    self.headers = headers\n    self.version = version\n    self.method = method\n    self.transport = transport\n\n    # Init but do not inhale\n    self.body_init()\n    self.ctx = SimpleNamespace()\n    self.parsed_forwarded = None\n    self.parsed_json = None\n    self.parsed_form = None\n    self.parsed_files = None\n    self.parsed_args = defaultdict(RequestParameters)\n    self.parsed_not_grouped_args = defaultdict(list)\n    self.uri_template = None\n    self._cookies = None\n    self.stream = None\n    self.endpoint = None",
                "def __repr__(self):\n    return \"<{0}: {1} {2}>\".format(\n        self.__class__.__name__, self.method, self.path\n    )",
                "def get(self, key, default=None):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    return self.ctx.__dict__.get(key, default)",
                "def __contains__(self, key):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    return key in self.ctx.__dict__",
                "def __getitem__(self, key):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    return self.ctx.__dict__[key]",
                "def __delitem__(self, key):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    del self.ctx.__dict__[key]",
                "def __setitem__(self, key, value):\n    \"\"\".. deprecated:: 19.9\n       Custom context is now stored in `request.custom_context.yourkey`\"\"\"\n    setattr(self.ctx, key, value)",
                "def body_init(self):\n    self.body = []",
                "def body_push(self, data):\n    self.body.append(data)",
                "def body_finish(self):\n    self.body = b\"\".join(self.body)",
                "@property\ndef json(self):\n    if self.parsed_json is None:\n        self.load_json()\n\n    return self.parsed_json",
                "def load_json(self, loads=json_loads):\n    try:\n        self.parsed_json = loads(self.body)\n    except Exception:\n        if not self.body:\n            return None\n        raise InvalidUsage(\"Failed when parsing body as json\")\n\n    return self.parsed_json",
                "@property\ndef token(self):\n    \"\"\"Attempt to return the auth header token.\n\n    :return: token related to request\n    \"\"\"\n    prefixes = (\"Bearer\", \"Token\")\n    auth_header = self.headers.get(\"Authorization\")\n\n    if auth_header is not None:\n        for prefix in prefixes:\n            if prefix in auth_header:\n                return auth_header.partition(prefix)[-1].strip()\n\n    return auth_header",
                "@property\ndef form(self):\n    if self.parsed_form is None:\n        self.parsed_form = RequestParameters()\n        self.parsed_files = RequestParameters()\n        content_type = self.headers.get(\n            \"Content-Type\", DEFAULT_HTTP_CONTENT_TYPE\n        )\n        content_type, parameters = parse_content_header(content_type)\n        try:\n            if content_type == \"application/x-www-form-urlencoded\":\n                self.parsed_form = RequestParameters(\n                    parse_qs(self.body.decode(\"utf-8\"))\n                )\n            elif content_type == \"multipart/form-data\":\n                # TODO: Stream this instead of reading to/from memory\n                boundary = parameters[\"boundary\"].encode(\"utf-8\")\n                self.parsed_form, self.parsed_files = parse_multipart_form(\n                    self.body, boundary\n                )\n        except Exception:\n            error_logger.exception(\"Failed when parsing form\")\n\n    return self.parsed_form",
                "@property\ndef files(self):\n    if self.parsed_files is None:\n        self.form  # compute form to get files\n\n    return self.parsed_files",
                "def get_args(\n    self,\n    keep_blank_values: bool = False,\n    strict_parsing: bool = False,\n    encoding: str = \"utf-8\",\n    errors: str = \"replace\",\n) -> RequestParameters:\n    \"\"\"\n    Method to parse `query_string` using `urllib.parse.parse_qs`.\n    This methods is used by `args` property.\n    Can be used directly if you need to change default parameters.\n\n    :param keep_blank_values:\n        flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.\n        A true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n    :type keep_blank_values: bool\n    :param strict_parsing:\n        flag indicating what to do with parsing errors.\n        If false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n    :type strict_parsing: bool\n    :param encoding:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type encoding: str\n    :param errors:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type errors: str\n    :return: RequestParameters\n    \"\"\"\n    if not self.parsed_args[\n        (keep_blank_values, strict_parsing, encoding, errors)\n    ]:\n        if self.query_string:\n            self.parsed_args[\n                (keep_blank_values, strict_parsing, encoding, errors)\n            ] = RequestParameters(\n                parse_qs(\n                    qs=self.query_string,\n                    keep_blank_values=keep_blank_values,\n                    strict_parsing=strict_parsing,\n                    encoding=encoding,\n                    errors=errors,\n                )\n            )\n\n    return self.parsed_args[\n        (keep_blank_values, strict_parsing, encoding, errors)\n    ]",
                "@property\ndef raw_args(self) -> dict:\n    if self.app.debug:  # pragma: no cover\n        warnings.simplefilter(\"default\")\n    warnings.warn(\n        \"Use of raw_args will be deprecated in \"\n        \"the future versions. Please use args or query_args \"\n        \"properties instead\",\n        DeprecationWarning,\n    )\n    return {k: v[0] for k, v in self.args.items()}",
                "def get_query_args(\n    self,\n    keep_blank_values: bool = False,\n    strict_parsing: bool = False,\n    encoding: str = \"utf-8\",\n    errors: str = \"replace\",\n) -> list:\n    \"\"\"\n    Method to parse `query_string` using `urllib.parse.parse_qsl`.\n    This methods is used by `query_args` property.\n    Can be used directly if you need to change default parameters.\n\n    :param keep_blank_values:\n        flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.\n        A true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n    :type keep_blank_values: bool\n    :param strict_parsing:\n        flag indicating what to do with parsing errors.\n        If false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n    :type strict_parsing: bool\n    :param encoding:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type encoding: str\n    :param errors:\n        specify how to decode percent-encoded sequences\n        into Unicode characters, as accepted by the bytes.decode() method.\n    :type errors: str\n    :return: list\n    \"\"\"\n    if not self.parsed_not_grouped_args[\n        (keep_blank_values, strict_parsing, encoding, errors)\n    ]:\n        if self.query_string:\n            self.parsed_not_grouped_args[\n                (keep_blank_values, strict_parsing, encoding, errors)\n            ] = parse_qsl(\n                qs=self.query_string,\n                keep_blank_values=keep_blank_values,\n                strict_parsing=strict_parsing,\n                encoding=encoding,\n                errors=errors,\n            )\n    return self.parsed_not_grouped_args[\n        (keep_blank_values, strict_parsing, encoding, errors)\n    ]",
                "@property\ndef cookies(self):\n    if self._cookies is None:\n        cookie = self.headers.get(\"Cookie\")\n        if cookie is not None:\n            cookies = SimpleCookie()\n            cookies.load(cookie)\n            self._cookies = {\n                name: cookie.value for name, cookie in cookies.items()\n            }\n        else:\n            self._cookies = {}\n    return self._cookies",
                "@property\ndef ip(self):\n    \"\"\"\n    :return: peer ip of the socket\n    \"\"\"\n    if not hasattr(self, \"_socket\"):\n        self._get_address()\n    return self._ip",
                "@property\ndef port(self):\n    \"\"\"\n    :return: peer port of the socket\n    \"\"\"\n    if not hasattr(self, \"_socket\"):\n        self._get_address()\n    return self._port",
                "@property\ndef socket(self):\n    if not hasattr(self, \"_socket\"):\n        self._get_address()\n    return self._socket",
                "def _get_address(self):\n    self._socket = self.transport.get_extra_info(\"peername\") or (\n        None,\n        None,\n    )\n    self._ip = self._socket[0]\n    self._port = self._socket[1]",
                "@property\ndef server_name(self):\n    \"\"\"\n    Attempt to get the server's external hostname in this order:\n    `config.SERVER_NAME`, proxied or direct Host headers\n    :func:`Request.host`\n\n    :return: the server name without port number\n    :rtype: str\n    \"\"\"\n    server_name = self.app.config.get(\"SERVER_NAME\")\n    if server_name:\n        host = server_name.split(\"//\", 1)[-1].split(\"/\", 1)[0]\n        return parse_host(host)[0]\n    return parse_host(self.host)[0]",
                "@property\ndef forwarded(self):\n    if self.parsed_forwarded is None:\n        self.parsed_forwarded = (\n            parse_forwarded(self.headers, self.app.config)\n            or parse_xforwarded(self.headers, self.app.config)\n            or {}\n        )\n    return self.parsed_forwarded",
                "@property\ndef server_port(self):\n    \"\"\"\n    Attempt to get the server's external port number in this order:\n    `config.SERVER_NAME`, proxied or direct Host headers\n    :func:`Request.host`,\n    actual port used by the transport layer socket.\n    :return: server port\n    :rtype: int\n    \"\"\"\n    if self.forwarded:\n        return self.forwarded.get(\"port\") or (\n            80 if self.scheme in (\"http\", \"ws\") else 443\n        )\n    return (\n        parse_host(self.host)[1]\n        or self.transport.get_extra_info(\"sockname\")[1]\n    )",
                "@property\ndef remote_addr(self):\n    \"\"\"Attempt to return the original client ip based on `forwarded`,\n    `x-forwarded-for` or `x-real-ip`. If HTTP headers are unavailable or\n    untrusted, returns an empty string.\n\n    :return: original client ip.\n    \"\"\"\n    if not hasattr(self, \"_remote_addr\"):\n        self._remote_addr = self.forwarded.get(\"for\", \"\")\n    return self._remote_addr",
                "@property\ndef scheme(self):\n    \"\"\"\n    Attempt to get the request scheme.\n    Seeking the value in this order:\n    `forwarded` header, `x-forwarded-proto` header,\n    `x-scheme` header, the sanic app itself.\n\n    :return: http|https|ws|wss or arbitrary value given by the headers.\n    :rtype: str\n    \"\"\"\n    forwarded_proto = self.forwarded.get(\"proto\")\n    if forwarded_proto:\n        return forwarded_proto\n\n    if (\n        self.app.websocket_enabled\n        and self.headers.get(\"upgrade\") == \"websocket\"\n    ):\n        scheme = \"ws\"\n    else:\n        scheme = \"http\"\n\n    if self.transport.get_extra_info(\"sslcontext\"):\n        scheme += \"s\"\n\n    return scheme",
                "@property\ndef host(self):\n    \"\"\"\n    :return: proxied or direct Host header. Hostname and port number may be\n      separated by sanic.headers.parse_host(request.host).\n    \"\"\"\n    return self.forwarded.get(\"host\", self.headers.get(\"Host\", \"\"))",
                "@property\ndef content_type(self):\n    return self.headers.get(\"Content-Type\", DEFAULT_HTTP_CONTENT_TYPE)",
                "@property\ndef match_info(self):\n    \"\"\"return matched info after resolving route\"\"\"\n    return self.app.router.get(self)[2]",
                "@property\ndef path(self):\n    return self._parsed_url.path.decode(\"utf-8\")",
                "@property\ndef query_string(self):\n    if self._parsed_url.query:\n        return self._parsed_url.query.decode(\"utf-8\")\n    else:\n        return \"\"",
                "@property\ndef url(self):\n    return urlunparse(\n        (self.scheme, self.host, self.path, None, self.query_string, None)\n    )",
                "def url_for(self, view_name, **kwargs):\n    \"\"\"\n    Same as :func:`sanic.Sanic.url_for`, but automatically determine\n    `scheme` and `netloc` base on the request. Since this method is aiming\n    to generate correct schema & netloc, `_external` is implied.\n\n    :param kwargs: takes same parameters as in :func:`sanic.Sanic.url_for`\n    :return: an absolute url to the given view\n    :rtype: str\n    \"\"\"\n    # Full URL SERVER_NAME can only be handled in app.url_for\n    if \"//\" in self.app.config.SERVER_NAME:\n        return self.app.url_for(view_name, _external=True, **kwargs)\n\n    scheme = self.scheme\n    host = self.server_name\n    port = self.server_port\n\n    if (scheme.lower() in (\"http\", \"ws\") and port == 80) or (\n        scheme.lower() in (\"https\", \"wss\") and port == 443\n    ):\n        netloc = host\n    else:\n        netloc = \"{}:{}\".format(host, port)\n\n    return self.app.url_for(\n        view_name, _external=True, _scheme=scheme, _server=netloc, **kwargs\n    )"
            ],
            "inscope_function_signatures": [
                "parse_multipart_form(body, boundary)",
                "get(self, name, default=None)",
                "getlist(self, name, default=None)",
                "__init__(self, buffer_size=100)",
                "read(self)",
                "put(self, payload)",
                "is_full(self)",
                "__init__(self, url_bytes, headers, version, method, transport, app)",
                "__repr__(self)",
                "get(self, key, default=None)",
                "__contains__(self, key)",
                "__getitem__(self, key)",
                "__delitem__(self, key)",
                "__setitem__(self, key, value)",
                "body_init(self)",
                "body_push(self, data)",
                "body_finish(self)",
                "json(self)",
                "load_json(self, loads=json_loads)",
                "token(self)",
                "form(self)",
                "files(self)",
                "get_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> RequestParameters",
                "raw_args(self) -> dict",
                "get_query_args(self, keep_blank_values: bool=False, strict_parsing: bool=False, encoding: str='utf-8', errors: str='replace') -> list",
                "cookies(self)",
                "ip(self)",
                "port(self)",
                "socket(self)",
                "_get_address(self)",
                "server_name(self)",
                "forwarded(self)",
                "server_port(self)",
                "remote_addr(self)",
                "scheme(self)",
                "host(self)",
                "content_type(self)",
                "match_info(self)",
                "path(self)",
                "query_string(self)",
                "url(self)",
                "url_for(self, view_name, **kwargs)"
            ],
            "variables_in_file": {
                "ImportError": [
                    24
                ],
                "DEFAULT_HTTP_CONTENT_TYPE": [
                    487,
                    27,
                    199
                ],
                "EXPECT_HEADER": [
                    28
                ],
                "dict": [
                    282,
                    35
                ],
                "get": [
                    42,
                    46
                ],
                "super": [
                    42,
                    46
                ],
                "name": [
                    42,
                    46,
                    354
                ],
                "default": [
                    129,
                    42,
                    46
                ],
                "self._queue": [
                    51,
                    55,
                    56,
                    60,
                    63
                ],
                "self": [
                    522,
                    523,
                    525,
                    526,
                    527,
                    536,
                    51,
                    55,
                    56,
                    60,
                    63,
                    97,
                    99,
                    100,
                    102,
                    103,
                    104,
                    105,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    123,
                    129,
                    134,
                    139,
                    144,
                    149,
                    152,
                    155,
                    158,
                    162,
                    163,
                    165,
                    169,
                    171,
                    175,
                    184,
                    195,
                    196,
                    197,
                    198,
                    204,
                    205,
                    210,
                    211,
                    216,
                    220,
                    221,
                    223,
                    259,
                    262,
                    263,
                    267,
                    275,
                    283,
                    291,
                    327,
                    330,
                    331,
                    334,
                    340,
                    348,
                    349,
                    353,
                    357,
                    358,
                    365,
                    366,
                    367,
                    374,
                    375,
                    376,
                    380,
                    381,
                    382,
                    385,
                    389,
                    390,
                    402,
                    406,
                    410,
                    411,
                    412,
                    413,
                    416,
                    428,
                    429,
                    430,
                    433,
                    434,
                    445,
                    446,
                    447,
                    460,
                    465,
                    466,
                    472,
                    483,
                    487,
                    492,
                    496,
                    500,
                    501,
                    508
                ],
                "asyncio.Queue": [
                    51
                ],
                "asyncio": [
                    51
                ],
                "buffer_size": [
                    51
                ],
                "payload": [
                    57,
                    60,
                    55
                ],
                "self._queue.get": [
                    55
                ],
                "self._queue.task_done": [
                    56
                ],
                "self._queue.put": [
                    60
                ],
                "self._queue.full": [
                    63
                ],
                "__slots__": [
                    69
                ],
                "self.raw_url": [
                    97
                ],
                "url_bytes": [
                    97,
                    99
                ],
                "self._parsed_url": [
                    496,
                    99,
                    500,
                    501
                ],
                "parse_url": [
                    99
                ],
                "self.app": [
                    100,
                    522,
                    523,
                    492,
                    465,
                    402,
                    536,
                    283,
                    412,
                    413
                ],
                "app": [
                    100
                ],
                "self.headers": [
                    483,
                    198,
                    102,
                    487,
                    466,
                    184,
                    412,
                    349,
                    413
                ],
                "headers": [
                    102
                ],
                "self.version": [
                    103
                ],
                "version": [
                    103
                ],
                "self.method": [
                    104,
                    123
                ],
                "method": [
                    104
                ],
                "self.transport": [
                    434,
                    105,
                    385,
                    472
                ],
                "transport": [
                    105
                ],
                "self.body_init": [
                    108
                ],
                "self.ctx": [
                    129,
                    134,
                    139,
                    109,
                    144,
                    149
                ],
                "SimpleNamespace": [
                    109
                ],
                "self.parsed_forwarded": [
                    416,
                    410,
                    411,
                    110
                ],
                "self.parsed_json": [
                    162,
                    165,
                    169,
                    175,
                    111
                ],
                "self.parsed_form": [
                    195,
                    196,
                    204,
                    112,
                    210,
                    216
                ],
                "self.parsed_files": [
                    197,
                    113,
                    210,
                    220,
                    223
                ],
                "self.parsed_args": [
                    275,
                    114,
                    259,
                    263
                ],
                "defaultdict": [
                    114,
                    115
                ],
                "RequestParameters": [
                    196,
                    197,
                    231,
                    551,
                    265,
                    552,
                    204,
                    114
                ],
                "self.parsed_not_grouped_args": [
                    331,
                    115,
                    340,
                    327
                ],
                "list": [
                    299,
                    115
                ],
                "self.uri_template": [
                    116
                ],
                "self._cookies": [
                    353,
                    357,
                    358,
                    117,
                    348
                ],
                "self.stream": [
                    118
                ],
                "self.endpoint": [
                    119
                ],
                "format": [
                    122,
                    534
                ],
                "self.__class__.__name__": [
                    123
                ],
                "self.__class__": [
                    123
                ],
                "self.path": [
                    123,
                    508
                ],
                "self.ctx.__dict__.get": [
                    129
                ],
                "self.ctx.__dict__": [
                    144,
                    129,
                    139,
                    134
                ],
                "key": [
                    129,
                    134,
                    139,
                    144,
                    149
                ],
                "setattr": [
                    149
                ],
                "value": [
                    582,
                    585,
                    593,
                    595,
                    149,
                    597
                ],
                "self.body": [
                    169,
                    171,
                    205,
                    211,
                    152,
                    155,
                    158
                ],
                "self.body.append": [
                    155
                ],
                "data": [
                    155
                ],
                "join": [
                    158
                ],
                "self.load_json": [
                    163
                ],
                "property": [
                    392,
                    279,
                    408,
                    281,
                    160,
                    418,
                    177,
                    437,
                    193,
                    449,
                    344,
                    346,
                    218,
                    477,
                    485,
                    360,
                    489,
                    494,
                    369,
                    498,
                    505,
                    378
                ],
                "json_loads": [
                    167
                ],
                "loads": [
                    169
                ],
                "Exception": [
                    170,
                    213
                ],
                "InvalidUsage": [
                    173
                ],
                "prefixes": [
                    187,
                    183
                ],
                "auth_header": [
                    184,
                    186,
                    188,
                    189,
                    191
                ],
                "self.headers.get": [
                    483,
                    198,
                    487,
                    466,
                    184,
                    349
                ],
                "prefix": [
                    187,
                    188,
                    189
                ],
                "strip": [
                    189
                ],
                "auth_header.partition": [
                    189
                ],
                "content_type": [
                    198,
                    201,
                    203,
                    587,
                    557,
                    207,
                    600
                ],
                "parameters": [
                    201,
                    209
                ],
                "parse_content_header": [
                    201,
                    572
                ],
                "parse_qs": [
                    266,
                    205
                ],
                "self.body.decode": [
                    205
                ],
                "boundary": [
                    209,
                    554,
                    211
                ],
                "encode": [
                    209
                ],
                "parse_multipart_form": [
                    210
                ],
                "error_logger.exception": [
                    214
                ],
                "error_logger": [
                    214
                ],
                "self.form": [
                    221
                ],
                "bool": [
                    296,
                    227,
                    228,
                    295
                ],
                "str": [
                    297,
                    298,
                    229,
                    230
                ],
                "keep_blank_values": [
                    260,
                    264,
                    328,
                    268,
                    332,
                    335,
                    276,
                    341
                ],
                "strict_parsing": [
                    260,
                    264,
                    328,
                    332,
                    269,
                    336,
                    276,
                    341
                ],
                "encoding": [
                    260,
                    582,
                    264,
                    328,
                    585,
                    332,
                    270,
                    337,
                    276,
                    341
                ],
                "errors": [
                    260,
                    264,
                    328,
                    332,
                    271,
                    338,
                    276,
                    341
                ],
                "self.query_string": [
                    262,
                    330,
                    267,
                    334,
                    508
                ],
                "args": [
                    279
                ],
                "get_args": [
                    279
                ],
                "self.app.debug": [
                    283
                ],
                "warnings.simplefilter": [
                    284
                ],
                "warnings": [
                    284,
                    285
                ],
                "warnings.warn": [
                    285
                ],
                "DeprecationWarning": [
                    289
                ],
                "k": [
                    291
                ],
                "v": [
                    291
                ],
                "self.args.items": [
                    291
                ],
                "self.args": [
                    291
                ],
                "parse_qsl": [
                    333
                ],
                "query_args": [
                    344
                ],
                "get_query_args": [
                    344
                ],
                "cookie": [
                    352,
                    354,
                    349,
                    350
                ],
                "cookies": [
                    352,
                    354,
                    351
                ],
                "SimpleCookie": [
                    351
                ],
                "cookies.load": [
                    352
                ],
                "cookie.value": [
                    354
                ],
                "cookies.items": [
                    354
                ],
                "hasattr": [
                    380,
                    365,
                    374,
                    445
                ],
                "self._get_address": [
                    381,
                    366,
                    375
                ],
                "self._ip": [
                    389,
                    367
                ],
                "self._port": [
                    376,
                    390
                ],
                "self._socket": [
                    385,
                    390,
                    389,
                    382
                ],
                "self.transport.get_extra_info": [
                    472,
                    385,
                    434
                ],
                "server_name": [
                    402,
                    403,
                    404
                ],
                "self.app.config.get": [
                    402
                ],
                "self.app.config": [
                    402,
                    522,
                    412,
                    413
                ],
                "host": [
                    526,
                    532,
                    404,
                    405,
                    534
                ],
                "split": [
                    404
                ],
                "server_name.split": [
                    404
                ],
                "parse_host": [
                    433,
                    405,
                    406
                ],
                "self.host": [
                    433,
                    508,
                    406
                ],
                "parse_forwarded": [
                    412
                ],
                "parse_xforwarded": [
                    413
                ],
                "self.forwarded": [
                    483,
                    460,
                    428,
                    429,
                    446
                ],
                "self.forwarded.get": [
                    483,
                    460,
                    429,
                    446
                ],
                "self.scheme": [
                    508,
                    525,
                    430
                ],
                "self._remote_addr": [
                    446,
                    447
                ],
                "forwarded_proto": [
                    460,
                    461,
                    462
                ],
                "self.app.websocket_enabled": [
                    465
                ],
                "scheme": [
                    525,
                    537,
                    529,
                    530,
                    468,
                    470,
                    473,
                    475
                ],
                "self.app.router.get": [
                    492
                ],
                "self.app.router": [
                    492
                ],
                "self._parsed_url.path.decode": [
                    496
                ],
                "self._parsed_url.path": [
                    496
                ],
                "self._parsed_url.query": [
                    500,
                    501
                ],
                "self._parsed_url.query.decode": [
                    501
                ],
                "urlunparse": [
                    507
                ],
                "self.app.config.SERVER_NAME": [
                    522
                ],
                "self.app.url_for": [
                    536,
                    523
                ],
                "view_name": [
                    537,
                    523
                ],
                "kwargs": [
                    537,
                    523
                ],
                "self.server_name": [
                    526
                ],
                "port": [
                    529,
                    530,
                    534,
                    527
                ],
                "self.server_port": [
                    527
                ],
                "scheme.lower": [
                    529,
                    530
                ],
                "netloc": [
                    537,
                    532,
                    534
                ],
                "File": [
                    541,
                    599
                ],
                "namedtuple": [
                    541
                ],
                "files": [
                    612,
                    551,
                    602,
                    603,
                    605
                ],
                "fields": [
                    612,
                    552,
                    594,
                    595,
                    597
                ],
                "form_parts": [
                    554,
                    555
                ],
                "body.split": [
                    554
                ],
                "body": [
                    554
                ],
                "form_part": [
                    563,
                    555,
                    564,
                    591
                ],
                "file_name": [
                    578,
                    581,
                    585,
                    556,
                    592,
                    600
                ],
                "content_charset": [
                    593,
                    588,
                    558
                ],
                "field_name": [
                    577,
                    590,
                    559,
                    594,
                    595,
                    597,
                    602,
                    603,
                    605
                ],
                "line_index": [
                    591,
                    560,
                    563,
                    564,
                    565
                ],
                "line_end_index": [
                    561,
                    562,
                    563,
                    564,
                    565
                ],
                "form_part.find": [
                    563
                ],
                "form_line": [
                    564,
                    567,
                    570,
                    571,
                    573
                ],
                "decode": [
                    564
                ],
                "colon_index": [
                    570,
                    571,
                    573
                ],
                "form_line.index": [
                    570
                ],
                "form_header_field": [
                    576,
                    586,
                    571
                ],
                "lower": [
                    571
                ],
                "form_header_value": [
                    587,
                    572
                ],
                "form_parameters": [
                    577,
                    578,
                    581,
                    583,
                    588,
                    572
                ],
                "form_parameters.get": [
                    577,
                    578,
                    588,
                    581
                ],
                "_": [
                    582
                ],
                "email.utils.decode_rfc2231": [
                    582
                ],
                "email.utils": [
                    582
                ],
                "email": [
                    582
                ],
                "unquote": [
                    585
                ],
                "post_data": [
                    600,
                    593,
                    591
                ],
                "post_data.decode": [
                    593
                ],
                "append": [
                    603,
                    595
                ],
                "form_file": [
                    603,
                    605,
                    599
                ],
                "logger.debug": [
                    607
                ],
                "logger": [
                    607
                ]
            },
            "filtered_variables_in_file": {
                "DEFAULT_HTTP_CONTENT_TYPE": [
                    487,
                    27,
                    199
                ],
                "EXPECT_HEADER": [
                    28
                ],
                "get": [
                    42,
                    46
                ],
                "name": [
                    42,
                    46,
                    354
                ],
                "default": [
                    129,
                    42,
                    46
                ],
                "self._queue": [
                    51,
                    55,
                    56,
                    60,
                    63
                ],
                "self": [
                    522,
                    523,
                    525,
                    526,
                    527,
                    536,
                    51,
                    55,
                    56,
                    60,
                    63,
                    97,
                    99,
                    100,
                    102,
                    103,
                    104,
                    105,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    123,
                    129,
                    134,
                    139,
                    144,
                    149,
                    152,
                    155,
                    158,
                    162,
                    163,
                    165,
                    169,
                    171,
                    175,
                    184,
                    195,
                    196,
                    197,
                    198,
                    204,
                    205,
                    210,
                    211,
                    216,
                    220,
                    221,
                    223,
                    259,
                    262,
                    263,
                    267,
                    275,
                    283,
                    291,
                    327,
                    330,
                    331,
                    334,
                    340,
                    348,
                    349,
                    353,
                    357,
                    358,
                    365,
                    366,
                    367,
                    374,
                    375,
                    376,
                    380,
                    381,
                    382,
                    385,
                    389,
                    390,
                    402,
                    406,
                    410,
                    411,
                    412,
                    413,
                    416,
                    428,
                    429,
                    430,
                    433,
                    434,
                    445,
                    446,
                    447,
                    460,
                    465,
                    466,
                    472,
                    483,
                    487,
                    492,
                    496,
                    500,
                    501,
                    508
                ],
                "asyncio.Queue": [
                    51
                ],
                "asyncio": [
                    51
                ],
                "buffer_size": [
                    51
                ],
                "payload": [
                    57,
                    60,
                    55
                ],
                "self._queue.get": [
                    55
                ],
                "self._queue.task_done": [
                    56
                ],
                "self._queue.put": [
                    60
                ],
                "self._queue.full": [
                    63
                ],
                "__slots__": [
                    69
                ],
                "self.raw_url": [
                    97
                ],
                "url_bytes": [
                    97,
                    99
                ],
                "self._parsed_url": [
                    496,
                    99,
                    500,
                    501
                ],
                "parse_url": [
                    99
                ],
                "self.app": [
                    100,
                    522,
                    523,
                    492,
                    465,
                    402,
                    536,
                    283,
                    412,
                    413
                ],
                "app": [
                    100
                ],
                "self.headers": [
                    483,
                    198,
                    102,
                    487,
                    466,
                    184,
                    412,
                    349,
                    413
                ],
                "headers": [
                    102
                ],
                "self.version": [
                    103
                ],
                "version": [
                    103
                ],
                "self.method": [
                    104,
                    123
                ],
                "method": [
                    104
                ],
                "self.transport": [
                    434,
                    105,
                    385,
                    472
                ],
                "transport": [
                    105
                ],
                "self.body_init": [
                    108
                ],
                "self.ctx": [
                    129,
                    134,
                    139,
                    109,
                    144,
                    149
                ],
                "SimpleNamespace": [
                    109
                ],
                "self.parsed_forwarded": [
                    416,
                    410,
                    411,
                    110
                ],
                "self.parsed_json": [
                    162,
                    165,
                    169,
                    175,
                    111
                ],
                "self.parsed_form": [
                    195,
                    196,
                    204,
                    112,
                    210,
                    216
                ],
                "self.parsed_files": [
                    197,
                    113,
                    210,
                    220,
                    223
                ],
                "self.parsed_args": [
                    275,
                    114,
                    259,
                    263
                ],
                "defaultdict": [
                    114,
                    115
                ],
                "RequestParameters": [
                    196,
                    197,
                    231,
                    551,
                    265,
                    552,
                    204,
                    114
                ],
                "self.parsed_not_grouped_args": [
                    331,
                    115,
                    340,
                    327
                ],
                "self.uri_template": [
                    116
                ],
                "self._cookies": [
                    353,
                    357,
                    358,
                    117,
                    348
                ],
                "self.stream": [
                    118
                ],
                "self.endpoint": [
                    119
                ],
                "self.__class__.__name__": [
                    123
                ],
                "self.__class__": [
                    123
                ],
                "self.path": [
                    123,
                    508
                ],
                "self.ctx.__dict__.get": [
                    129
                ],
                "self.ctx.__dict__": [
                    144,
                    129,
                    139,
                    134
                ],
                "key": [
                    129,
                    134,
                    139,
                    144,
                    149
                ],
                "value": [
                    582,
                    585,
                    593,
                    595,
                    149,
                    597
                ],
                "self.body": [
                    169,
                    171,
                    205,
                    211,
                    152,
                    155,
                    158
                ],
                "self.body.append": [
                    155
                ],
                "data": [
                    155
                ],
                "join": [
                    158
                ],
                "self.load_json": [
                    163
                ],
                "json_loads": [
                    167
                ],
                "loads": [
                    169
                ],
                "InvalidUsage": [
                    173
                ],
                "prefixes": [
                    187,
                    183
                ],
                "auth_header": [
                    184,
                    186,
                    188,
                    189,
                    191
                ],
                "self.headers.get": [
                    483,
                    198,
                    487,
                    466,
                    184,
                    349
                ],
                "prefix": [
                    187,
                    188,
                    189
                ],
                "strip": [
                    189
                ],
                "auth_header.partition": [
                    189
                ],
                "content_type": [
                    198,
                    201,
                    203,
                    587,
                    557,
                    207,
                    600
                ],
                "parameters": [
                    201,
                    209
                ],
                "parse_content_header": [
                    201,
                    572
                ],
                "parse_qs": [
                    266,
                    205
                ],
                "self.body.decode": [
                    205
                ],
                "boundary": [
                    209,
                    554,
                    211
                ],
                "encode": [
                    209
                ],
                "parse_multipart_form": [
                    210
                ],
                "error_logger.exception": [
                    214
                ],
                "error_logger": [
                    214
                ],
                "self.form": [
                    221
                ],
                "keep_blank_values": [
                    260,
                    264,
                    328,
                    268,
                    332,
                    335,
                    276,
                    341
                ],
                "strict_parsing": [
                    260,
                    264,
                    328,
                    332,
                    269,
                    336,
                    276,
                    341
                ],
                "encoding": [
                    260,
                    582,
                    264,
                    328,
                    585,
                    332,
                    270,
                    337,
                    276,
                    341
                ],
                "errors": [
                    260,
                    264,
                    328,
                    332,
                    271,
                    338,
                    276,
                    341
                ],
                "self.query_string": [
                    262,
                    330,
                    267,
                    334,
                    508
                ],
                "args": [
                    279
                ],
                "get_args": [
                    279
                ],
                "self.app.debug": [
                    283
                ],
                "warnings.simplefilter": [
                    284
                ],
                "warnings": [
                    284,
                    285
                ],
                "warnings.warn": [
                    285
                ],
                "k": [
                    291
                ],
                "v": [
                    291
                ],
                "self.args.items": [
                    291
                ],
                "self.args": [
                    291
                ],
                "parse_qsl": [
                    333
                ],
                "query_args": [
                    344
                ],
                "get_query_args": [
                    344
                ],
                "cookie": [
                    352,
                    354,
                    349,
                    350
                ],
                "cookies": [
                    352,
                    354,
                    351
                ],
                "SimpleCookie": [
                    351
                ],
                "cookies.load": [
                    352
                ],
                "cookie.value": [
                    354
                ],
                "cookies.items": [
                    354
                ],
                "self._get_address": [
                    381,
                    366,
                    375
                ],
                "self._ip": [
                    389,
                    367
                ],
                "self._port": [
                    376,
                    390
                ],
                "self._socket": [
                    385,
                    390,
                    389,
                    382
                ],
                "self.transport.get_extra_info": [
                    472,
                    385,
                    434
                ],
                "server_name": [
                    402,
                    403,
                    404
                ],
                "self.app.config.get": [
                    402
                ],
                "self.app.config": [
                    402,
                    522,
                    412,
                    413
                ],
                "host": [
                    526,
                    532,
                    404,
                    405,
                    534
                ],
                "split": [
                    404
                ],
                "server_name.split": [
                    404
                ],
                "parse_host": [
                    433,
                    405,
                    406
                ],
                "self.host": [
                    433,
                    508,
                    406
                ],
                "parse_forwarded": [
                    412
                ],
                "parse_xforwarded": [
                    413
                ],
                "self.forwarded": [
                    483,
                    460,
                    428,
                    429,
                    446
                ],
                "self.forwarded.get": [
                    483,
                    460,
                    429,
                    446
                ],
                "self.scheme": [
                    508,
                    525,
                    430
                ],
                "self._remote_addr": [
                    446,
                    447
                ],
                "forwarded_proto": [
                    460,
                    461,
                    462
                ],
                "self.app.websocket_enabled": [
                    465
                ],
                "scheme": [
                    525,
                    537,
                    529,
                    530,
                    468,
                    470,
                    473,
                    475
                ],
                "self.app.router.get": [
                    492
                ],
                "self.app.router": [
                    492
                ],
                "self._parsed_url.path.decode": [
                    496
                ],
                "self._parsed_url.path": [
                    496
                ],
                "self._parsed_url.query": [
                    500,
                    501
                ],
                "self._parsed_url.query.decode": [
                    501
                ],
                "urlunparse": [
                    507
                ],
                "self.app.config.SERVER_NAME": [
                    522
                ],
                "self.app.url_for": [
                    536,
                    523
                ],
                "view_name": [
                    537,
                    523
                ],
                "kwargs": [
                    537,
                    523
                ],
                "self.server_name": [
                    526
                ],
                "port": [
                    529,
                    530,
                    534,
                    527
                ],
                "self.server_port": [
                    527
                ],
                "scheme.lower": [
                    529,
                    530
                ],
                "netloc": [
                    537,
                    532,
                    534
                ],
                "File": [
                    541,
                    599
                ],
                "namedtuple": [
                    541
                ],
                "files": [
                    612,
                    551,
                    602,
                    603,
                    605
                ],
                "fields": [
                    612,
                    552,
                    594,
                    595,
                    597
                ],
                "form_parts": [
                    554,
                    555
                ],
                "body.split": [
                    554
                ],
                "body": [
                    554
                ],
                "form_part": [
                    563,
                    555,
                    564,
                    591
                ],
                "file_name": [
                    578,
                    581,
                    585,
                    556,
                    592,
                    600
                ],
                "content_charset": [
                    593,
                    588,
                    558
                ],
                "field_name": [
                    577,
                    590,
                    559,
                    594,
                    595,
                    597,
                    602,
                    603,
                    605
                ],
                "line_index": [
                    591,
                    560,
                    563,
                    564,
                    565
                ],
                "line_end_index": [
                    561,
                    562,
                    563,
                    564,
                    565
                ],
                "form_part.find": [
                    563
                ],
                "form_line": [
                    564,
                    567,
                    570,
                    571,
                    573
                ],
                "decode": [
                    564
                ],
                "colon_index": [
                    570,
                    571,
                    573
                ],
                "form_line.index": [
                    570
                ],
                "form_header_field": [
                    576,
                    586,
                    571
                ],
                "lower": [
                    571
                ],
                "form_header_value": [
                    587,
                    572
                ],
                "form_parameters": [
                    577,
                    578,
                    581,
                    583,
                    588,
                    572
                ],
                "form_parameters.get": [
                    577,
                    578,
                    588,
                    581
                ],
                "_": [
                    582
                ],
                "email.utils.decode_rfc2231": [
                    582
                ],
                "email.utils": [
                    582
                ],
                "email": [
                    582
                ],
                "unquote": [
                    585
                ],
                "post_data": [
                    600,
                    593,
                    591
                ],
                "post_data.decode": [
                    593
                ],
                "append": [
                    603,
                    595
                ],
                "form_file": [
                    603,
                    605,
                    599
                ],
                "logger.debug": [
                    607
                ],
                "logger": [
                    607
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/sanic_4/tests/test_requests.py",
                "test_function": "test_url_for_without_server_name",
                "test_function_code": "def test_url_for_without_server_name(app):\n    @app.route(\"/sample\")\n    def sample(request):\n        return json({\"url\": request.url_for(\"url_for\")})\n\n    @app.route(\"/url-for\")\n    def url_for(request):\n        return text(\"url-for\")\n\n    request, response = app.test_client.get(\"/sample\")\n    assert (\n        response.json[\"url\"]\n        == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n    )",
                "test_error": "TypeError: 'NoneType' object is not subscriptable",
                "full_test_error": "app = <sanic.app.Sanic object at 0x10a74bc10>\n\n    def test_url_for_without_server_name(app):\n        @app.route(\"/sample\")\n        def sample(request):\n            return json({\"url\": request.url_for(\"url_for\")})\n    \n        @app.route(\"/url-for\")\n        def url_for(request):\n            return text(\"url-for\")\n    \n        request, response = app.test_client.get(\"/sample\")\n>       assert (\n            response.json[\"url\"]\n            == f\"http://127.0.0.1:{app.test_client.port}/url-for\"\n        )\nE       TypeError: 'NoneType' object is not subscriptable\n\ntests/test_requests.py:2118: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}