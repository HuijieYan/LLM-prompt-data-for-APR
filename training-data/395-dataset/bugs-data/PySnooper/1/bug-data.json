{
    "PySnooper:1": {
        "/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "PY3 = (sys.version_info[0] == 3)",
                    "start_line": 10,
                    "end_line": 11
                }
            ],
            "inscope_functions": [
                "@abc.abstractmethod\ndef __fspath__(self):\n    \"\"\"Return the file system path representation of the object.\"\"\"\n    raise NotImplementedError",
                "@classmethod\ndef __subclasshook__(cls, subclass):\n    return (\n        hasattr(subclass, '__fspath__') or\n        # Make a concession for older `pathlib` versions:g\n        (hasattr(subclass, 'open') and\n         'path' in subclass.__name__.lower())\n    )"
            ],
            "inscope_function_signatures": [
                "__fspath__(self)",
                "__subclasshook__(cls, subclass)"
            ],
            "variables_in_file": {
                "PY3": [
                    10,
                    50
                ],
                "sys.version_info": [
                    10
                ],
                "sys": [
                    10
                ],
                "hasattr": [
                    39,
                    12,
                    37,
                    23
                ],
                "abc": [
                    29,
                    19,
                    12,
                    13
                ],
                "ABC": [
                    26,
                    13
                ],
                "abc.ABC": [
                    13
                ],
                "object": [
                    15
                ],
                "__metaclass__": [
                    19
                ],
                "abc.ABCMeta": [
                    19
                ],
                "__slots__": [
                    20
                ],
                "os": [
                    24,
                    23
                ],
                "PathLike": [
                    24
                ],
                "os.PathLike": [
                    24
                ],
                "NotImplementedError": [
                    32
                ],
                "abc.abstractmethod": [
                    29
                ],
                "subclass": [
                    40,
                    37,
                    39
                ],
                "subclass.__name__.lower": [
                    40
                ],
                "subclass.__name__": [
                    40
                ],
                "classmethod": [
                    34
                ],
                "iscoroutinefunction": [
                    45,
                    47
                ],
                "inspect.iscoroutinefunction": [
                    45
                ],
                "inspect": [
                    45
                ],
                "AttributeError": [
                    46
                ],
                "string_types": [
                    51,
                    54
                ],
                "str": [
                    51,
                    52
                ],
                "text_type": [
                    52,
                    55
                ],
                "basestring": [
                    54
                ],
                "unicode": [
                    55
                ]
            },
            "filtered_variables_in_file": {
                "PY3": [
                    10,
                    50
                ],
                "sys.version_info": [
                    10
                ],
                "sys": [
                    10
                ],
                "abc": [
                    29,
                    19,
                    12,
                    13
                ],
                "ABC": [
                    26,
                    13
                ],
                "abc.ABC": [
                    13
                ],
                "__metaclass__": [
                    19
                ],
                "abc.ABCMeta": [
                    19
                ],
                "__slots__": [
                    20
                ],
                "os": [
                    24,
                    23
                ],
                "PathLike": [
                    24
                ],
                "os.PathLike": [
                    24
                ],
                "abc.abstractmethod": [
                    29
                ],
                "subclass": [
                    40,
                    37,
                    39
                ],
                "subclass.__name__.lower": [
                    40
                ],
                "subclass.__name__": [
                    40
                ],
                "iscoroutinefunction": [
                    45,
                    47
                ],
                "inspect.iscoroutinefunction": [
                    45
                ],
                "inspect": [
                    45
                ],
                "string_types": [
                    51,
                    54
                ],
                "text_type": [
                    52,
                    55
                ],
                "basestring": [
                    54
                ],
                "unicode": [
                    55
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/tracer.py": {
            "buggy_functions": [
                {
                    "function_name": "get_source_from_frame",
                    "function_code": "def get_source_from_frame(frame):\n    globs = frame.f_globals or {}\n    module_name = globs.get('__name__')\n    file_name = frame.f_code.co_filename\n    cache_key = (module_name, file_name)\n    try:\n        return source_cache[cache_key]\n    except KeyError:\n        pass\n    loader = globs.get('__loader__')\n\n    source = None\n    if hasattr(loader, 'get_source'):\n        try:\n            source = loader.get_source(module_name)\n        except ImportError:\n            pass\n        if source is not None:\n            source = source.splitlines()\n    if source is None:\n        ipython_filename_match = ipython_filename_pattern.match(file_name)\n        if ipython_filename_match:\n            entry_number = int(ipython_filename_match.group(1))\n            try:\n                import IPython\n                ipython_shell = IPython.get_ipython()\n                ((_, _, source_chunk),) = ipython_shell.history_manager. \\\n                                  get_range(0, entry_number, entry_number + 1)\n                source = source_chunk.splitlines()\n            except Exception:\n                pass\n        else:\n            try:\n                with open(file_name, 'rb') as fp:\n                    source = fp.read().splitlines()\n            except utils.file_reading_errors:\n                pass\n    if source is None:\n        source = UnavailableSource()\n\n    # If we just read the source from a file, or if the loader did not\n    # apply tokenize.detect_encoding to decode the source into a\n    # string, then we should do that ourselves.\n    if isinstance(source[0], bytes):\n        encoding = 'ascii'\n        for line in source[:2]:\n            # File coding may be specified. Match pattern from PEP-263\n            # (https://www.python.org/dev/peps/pep-0263/)\n            match = re.search(br'coding[:=]\\s*([-\\w.]+)', line)\n            if match:\n                encoding = match.group(1).decode('ascii')\n                break\n        source = [pycompat.text_type(sline, encoding, 'replace') for sline in\n                  source]\n\n    source_cache[cache_key] = source\n    return source\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 43,
                    "end_line": 99,
                    "variables": {
                        "globs": [
                            44,
                            45,
                            52
                        ],
                        "frame.f_globals": [
                            44
                        ],
                        "frame": [
                            44,
                            46
                        ],
                        "module_name": [
                            57,
                            45,
                            47
                        ],
                        "globs.get": [
                            52,
                            45
                        ],
                        "file_name": [
                            76,
                            63,
                            46,
                            47
                        ],
                        "frame.f_code.co_filename": [
                            46
                        ],
                        "frame.f_code": [
                            46
                        ],
                        "cache_key": [
                            49,
                            98,
                            47
                        ],
                        "source_cache": [
                            49,
                            98
                        ],
                        "KeyError": [
                            50
                        ],
                        "loader": [
                            57,
                            52,
                            55
                        ],
                        "source": [
                            96,
                            98,
                            99,
                            71,
                            77,
                            80,
                            81,
                            54,
                            86,
                            88,
                            57,
                            60,
                            61,
                            62,
                            95
                        ],
                        "hasattr": [
                            55
                        ],
                        "loader.get_source": [
                            57
                        ],
                        "ImportError": [
                            58
                        ],
                        "source.splitlines": [
                            61
                        ],
                        "ipython_filename_match": [
                            64,
                            65,
                            63
                        ],
                        "ipython_filename_pattern.match": [
                            63
                        ],
                        "ipython_filename_pattern": [
                            63
                        ],
                        "entry_number": [
                            65,
                            70
                        ],
                        "int": [
                            65
                        ],
                        "ipython_filename_match.group": [
                            65
                        ],
                        "ipython_shell": [
                            68,
                            69
                        ],
                        "IPython.get_ipython": [
                            68
                        ],
                        "IPython": [
                            68
                        ],
                        "_": [
                            69
                        ],
                        "source_chunk": [
                            69,
                            71
                        ],
                        "ipython_shell.history_manager.get_range": [
                            69
                        ],
                        "ipython_shell.history_manager": [
                            69
                        ],
                        "source_chunk.splitlines": [
                            71
                        ],
                        "Exception": [
                            72
                        ],
                        "open": [
                            76
                        ],
                        "fp": [
                            76,
                            77
                        ],
                        "splitlines": [
                            77
                        ],
                        "fp.read": [
                            77
                        ],
                        "utils.file_reading_errors": [
                            78
                        ],
                        "utils": [
                            78
                        ],
                        "UnavailableSource": [
                            81
                        ],
                        "isinstance": [
                            86
                        ],
                        "bytes": [
                            86
                        ],
                        "encoding": [
                            93,
                            95,
                            87
                        ],
                        "line": [
                            88,
                            91
                        ],
                        "match": [
                            91,
                            92,
                            93
                        ],
                        "re.search": [
                            91
                        ],
                        "re": [
                            91
                        ],
                        "decode": [
                            93
                        ],
                        "match.group": [
                            93
                        ],
                        "pycompat.text_type": [
                            95
                        ],
                        "pycompat": [
                            95
                        ],
                        "sline": [
                            95
                        ]
                    },
                    "filtered_variables": {
                        "globs": [
                            44,
                            45,
                            52
                        ],
                        "frame.f_globals": [
                            44
                        ],
                        "frame": [
                            44,
                            46
                        ],
                        "module_name": [
                            57,
                            45,
                            47
                        ],
                        "globs.get": [
                            52,
                            45
                        ],
                        "file_name": [
                            76,
                            63,
                            46,
                            47
                        ],
                        "frame.f_code.co_filename": [
                            46
                        ],
                        "frame.f_code": [
                            46
                        ],
                        "cache_key": [
                            49,
                            98,
                            47
                        ],
                        "source_cache": [
                            49,
                            98
                        ],
                        "loader": [
                            57,
                            52,
                            55
                        ],
                        "source": [
                            96,
                            98,
                            99,
                            71,
                            77,
                            80,
                            81,
                            54,
                            86,
                            88,
                            57,
                            60,
                            61,
                            62,
                            95
                        ],
                        "loader.get_source": [
                            57
                        ],
                        "source.splitlines": [
                            61
                        ],
                        "ipython_filename_match": [
                            64,
                            65,
                            63
                        ],
                        "ipython_filename_pattern.match": [
                            63
                        ],
                        "ipython_filename_pattern": [
                            63
                        ],
                        "entry_number": [
                            65,
                            70
                        ],
                        "ipython_filename_match.group": [
                            65
                        ],
                        "ipython_shell": [
                            68,
                            69
                        ],
                        "IPython.get_ipython": [
                            68
                        ],
                        "IPython": [
                            68
                        ],
                        "_": [
                            69
                        ],
                        "source_chunk": [
                            69,
                            71
                        ],
                        "ipython_shell.history_manager.get_range": [
                            69
                        ],
                        "ipython_shell.history_manager": [
                            69
                        ],
                        "source_chunk.splitlines": [
                            71
                        ],
                        "fp": [
                            76,
                            77
                        ],
                        "splitlines": [
                            77
                        ],
                        "fp.read": [
                            77
                        ],
                        "utils.file_reading_errors": [
                            78
                        ],
                        "utils": [
                            78
                        ],
                        "UnavailableSource": [
                            81
                        ],
                        "encoding": [
                            93,
                            95,
                            87
                        ],
                        "line": [
                            88,
                            91
                        ],
                        "match": [
                            91,
                            92,
                            93
                        ],
                        "re.search": [
                            91
                        ],
                        "re": [
                            91
                        ],
                        "decode": [
                            93
                        ],
                        "match.group": [
                            93
                        ],
                        "pycompat.text_type": [
                            95
                        ],
                        "pycompat": [
                            95
                        ],
                        "sline": [
                            95
                        ]
                    },
                    "diff_line_number": 87,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>",
                                    "variable_type": "AssertionRewritingHook",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": "['# -*- coding: utf-8 -*-', '# Copyright 2019 Ram Rachum and collaborators.', '# This program is distributed under the MIT license.', '', 'import io', 'import textwrap', 'import threading', 'import types', 'import sys', '', 'from pysnooper.utils import truncate', 'from python_toolbox import sys_tools, temp_file_tools', 'import pytest', '', 'import pysnooper', 'from pysnooper import pycompat', 'from pysnooper.variables import needs_parentheses', 'from .utils import (assert_output, assert_sample_output, VariableEntry,', '                    CallEntry, LineEntry, ReturnEntry, OpcodeEntry,', '                    ReturnValueEntry, ExceptionEntry)', '', '', '', 'def test_chinese():', \"    with temp_file_tools.create_temp_folder(prefix='pysnooper') as folder:\", \"        path = folder / 'foo.log'\", '        @pysnooper.snoop(path)', '        def foo():', '            a = 1', \"            x = '\u5931\u8d25'\", '            return 7', '', '        foo()', \"        with path.open(encoding='utf-8') as file:\", '            output = file.read()', '        assert_output(', '            output,', '            (', '                CallEntry(),', '                LineEntry(),', \"                VariableEntry('a'),\", '                LineEntry(u\"x = \\'\u5931\u8d25\\'\"),', '                VariableEntry(u\\'x\\', (u\"\\'\u5931\u8d25\\'\" if pycompat.PY3 else None)),', '                LineEntry(),', '                ReturnEntry(),', \"                ReturnValueEntry('7')\", '            ),', '        )']",
                                    "variable_type": "list",
                                    "variable_shape": "48"
                                },
                                "loader.get_source": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": "<_io.BufferedReader name='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": "<built-in method read of _io.BufferedReader object at 0x10b08c0f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "line": {
                                    "variable_value": "b'# -*- coding: utf-8 -*-'",
                                    "variable_type": "bytes",
                                    "variable_shape": "23"
                                },
                                "match": {
                                    "variable_value": "<re.Match object; span=(6, 19), match=b'coding: utf-8'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10b0879b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 29, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 29, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 30, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 30, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10aabbd60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x10b067820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x10b0674c0>, 'assert_output': <function assert_output at 0x10b6dd9d0>, 'assert_sample_output': <function assert_sample_output at 0x10b069700>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x10b059dc0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x10b07fa00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x10b055ac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x10b053c90, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": "<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>",
                                    "variable_type": "AssertionRewritingHook",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": "['# -*- coding: utf-8 -*-', '# Copyright 2019 Ram Rachum and collaborators.', '# This program is distributed under the MIT license.', '', 'import io', 'import textwrap', 'import threading', 'import types', 'import sys', '', 'from pysnooper.utils import truncate', 'from python_toolbox import sys_tools, temp_file_tools', 'import pytest', '', 'import pysnooper', 'from pysnooper import pycompat', 'from pysnooper.variables import needs_parentheses', 'from .utils import (assert_output, assert_sample_output, VariableEntry,', '                    CallEntry, LineEntry, ReturnEntry, OpcodeEntry,', '                    ReturnValueEntry, ExceptionEntry)', '', '', '', 'def test_chinese():', \"    with temp_file_tools.create_temp_folder(prefix='pysnooper') as folder:\", \"        path = folder / 'foo.log'\", '        @pysnooper.snoop(path)', '        def foo():', '            a = 1', \"            x = '\u5931\u8d25'\", '            return 7', '', '        foo()', \"        with path.open(encoding='utf-8') as file:\", '            output = file.read()', '        assert_output(', '            output,', '            (', '                CallEntry(),', '                LineEntry(),', \"                VariableEntry('a'),\", '                LineEntry(u\"x = \\'\u5931\u8d25\\'\"),', '                VariableEntry(u\\'x\\', (u\"\\'\u5931\u8d25\\'\" if pycompat.PY3 else None)),', '                LineEntry(),', '                ReturnEntry(),', \"                ReturnValueEntry('7')\", '            ),', '        )']",
                                    "variable_type": "list",
                                    "variable_shape": "48"
                                },
                                "loader.get_source": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": "<_io.BufferedReader name='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'>",
                                    "variable_type": "BufferedReader",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": "<built-in method read of _io.BufferedReader object at 0x103947d50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": "'utf-8'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "line": {
                                    "variable_value": "b'# -*- coding: utf-8 -*-'",
                                    "variable_type": "bytes",
                                    "variable_shape": "23"
                                },
                                "match": {
                                    "variable_value": "<re.Match object; span=(6, 19), match=b'coding: utf-8'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10396fd30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 27, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 29, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 29, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 30, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 30, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "globs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "globs.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "globs": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame.f_globals": {
                                    "variable_value": "{'__name__': 'tests.test_chinese', '__doc__': None, '__package__': 'tests', '__loader__': <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, '__spec__': ModuleSpec(name='tests.test_chinese', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x10333ad60>, origin='/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'), '__file__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', '__cached__': '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/__pycache__/test_chinese.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.\nAll Rights Reserved.\n\nCopyright (c) 2000 BeOpen.com.\nAll Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.\nAll Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, '@py_builtins': <module 'builtins' (built-in)>, '@pytest_ar': <module '_pytest.assertion.rewrite' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>, 'io': <module 'io' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/io.py'>, 'textwrap': <module 'textwrap' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/textwrap.py'>, 'threading': <module 'threading' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/threading.py'>, 'types': <module 'types' from '/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/types.py'>, 'sys': <module 'sys' (built-in)>, 'truncate': <function truncate at 0x103336820>, 'sys_tools': <module 'python_toolbox.sys_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/sys_tools.py'>, 'temp_file_tools': <module 'python_toolbox.temp_file_tools' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/python_toolbox/temp_file_tools.py'>, 'pytest': <module 'pytest' from '/Volumes/SSD2T/bgp_envs/envs/PySnooper_1/lib/python3.8/site-packages/pytest/__init__.py'>, 'pysnooper': <module 'pysnooper' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/__init__.py'>, 'pycompat': <module 'pysnooper.pycompat' from '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/pysnooper/pycompat.py'>, 'needs_parentheses': <function needs_parentheses at 0x1033364c0>, 'assert_output': <function assert_output at 0x1038f5ca0>, 'assert_sample_output': <function assert_sample_output at 0x1039589d0>, 'VariableEntry': <class 'tests.utils.VariableEntry'>, 'CallEntry': <class 'tests.utils.CallEntry'>, 'LineEntry': <class 'tests.utils.LineEntry'>, 'ReturnEntry': <class 'tests.utils.ReturnEntry'>, 'OpcodeEntry': <class 'tests.utils.OpcodeEntry'>, 'ReturnValueEntry': <class 'tests.utils.ReturnValueEntry'>, 'ExceptionEntry': <class 'tests.utils.ExceptionEntry'>, 'test_chinese': <function test_chinese at 0x1020f0280>}",
                                    "variable_type": "dict",
                                    "variable_shape": "32"
                                },
                                "frame": {
                                    "variable_value": "<frame at 0x103938a00, file '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py', line 31, code foo>",
                                    "variable_type": "frame",
                                    "variable_shape": null
                                },
                                "module_name": {
                                    "variable_value": "'tests.test_chinese'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                },
                                "globs.get": {
                                    "variable_value": "<built-in method get of dict object at 0x103453080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py'",
                                    "variable_type": "str",
                                    "variable_shape": "63"
                                },
                                "frame.f_code.co_filename": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "frame.f_code": {
                                    "variable_value": "<code object foo at 0x103361870, file \"/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py\", line 27>",
                                    "variable_type": "code",
                                    "variable_shape": null
                                },
                                "cache_key": {
                                    "variable_value": "('tests.test_chinese', '/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/test_chinese.py')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "source_cache": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loader.get_source": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_pattern": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "entry_number": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_filename_match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython.get_ipython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "IPython": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager.get_range": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ipython_shell.history_manager": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "source_chunk.splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "splitlines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fp.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils.file_reading_errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UnavailableSource": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "encoding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat.text_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pycompat": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "write",
                    "function_code": "def write(self, s):\n    with open(self.path, 'w' if self.overwrite else 'a') as output_file:\n        output_file.write(s)\n    self.overwrite = False\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 132,
                    "end_line": 135,
                    "variables": {
                        "open": [
                            133
                        ],
                        "self.path": [
                            133
                        ],
                        "self": [
                            133,
                            135
                        ],
                        "self.overwrite": [
                            133,
                            135
                        ],
                        "output_file": [
                            133,
                            134
                        ],
                        "output_file.write": [
                            134
                        ],
                        "s": [
                            134
                        ]
                    },
                    "filtered_variables": {
                        "self.path": [
                            133
                        ],
                        "self": [
                            133,
                            135
                        ],
                        "self.overwrite": [
                            133,
                            135
                        ],
                        "output_file": [
                            133,
                            134
                        ],
                        "output_file.write": [
                            134
                        ],
                        "s": [
                            134
                        ]
                    },
                    "diff_line_number": 133,
                    "class_data": {
                        "signature": "class FileWriter(object)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, path, overwrite):\n    self.path = pycompat.text_type(path)\n    self.overwrite = overwrite",
                            "def write(self, s):\n    with open(self.path, 'w' if self.overwrite else 'a') as output_file:\n        output_file.write(s)\n    self.overwrite = False"
                        ],
                        "constructor_variables": [
                            "path",
                            "overwrite"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, path, overwrite)",
                            "write(self, s)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.915249 call        28         def foo():\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "50"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x1099e0c70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.915249 call        28         def foo():\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "50"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.916799 line        29             a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "49"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x1099e0a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.916799 line        29             a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "49"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'New var:....... a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x1099e0e10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'New var:....... a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"19:06:47.919037 line        30             x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x10991b110>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"19:06:47.919037 line        30             x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"New var:....... x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x10991b380>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"New var:....... x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.921066 line        31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x10991b110>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.921066 line        31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.922193 return      31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x10991b520>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:47.922193 return      31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'Return value:.. 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x1099001c0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper5p4k_vov/foo.log' mode='a' encoding='UTF-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x10991b6c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'Return value:.. 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.246731 call        28         def foo():\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "50"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106cfbba0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.246731 call        28         def foo():\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "50"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.249459 line        29             a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "49"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106cfbd40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.249459 line        29             a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "49"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'New var:....... a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106cfb930>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'New var:....... a = 1\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"19:06:50.254712 line        30             x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106cfbee0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"19:06:50.254712 line        30             x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"New var:....... x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106c2f1e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "\"New var:....... x = '\u5931\u8d25'\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.259320 line        31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106c2f2b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.259320 line        31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.261354 return      31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106c2f450>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'19:06:50.261354 return      31             return 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'Return value:.. 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                }
                            },
                            {
                                "self.path": {
                                    "variable_value": "'/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log'",
                                    "variable_type": "str",
                                    "variable_shape": "74"
                                },
                                "self": {
                                    "variable_value": "<pysnooper.tracer.FileWriter object at 0x106c13190>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "self.overwrite": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_file": {
                                    "variable_value": "<_io.TextIOWrapper name='/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/pysnooper_u0afr60/foo.log' mode='a' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "output_file.write": {
                                    "variable_value": "<built-in method write of _io.TextIOWrapper object at 0x106c2f380>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'Return value:.. 7\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "18"
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from . import utils, pycompat",
                    "start_line": 16,
                    "end_line": 17
                }
            ],
            "inscope_functions": [
                "def get_local_reprs(frame, watch=()):\n    code = frame.f_code\n    vars_order = code.co_varnames + code.co_cellvars + code.co_freevars + tuple(frame.f_locals.keys())\n\n    result_items = [(key, utils.get_shortish_repr(value)) for key, value in frame.f_locals.items()]\n    result_items.sort(key=lambda key_value: vars_order.index(key_value[0]))\n    result = collections.OrderedDict(result_items)\n\n    for variable in watch:\n        result.update(sorted(variable.items(frame)))\n    return result",
                "def get_source_from_frame(frame):\n    globs = frame.f_globals or {}\n    module_name = globs.get('__name__')\n    file_name = frame.f_code.co_filename\n    cache_key = (module_name, file_name)\n    try:\n        return source_cache[cache_key]\n    except KeyError:\n        pass\n    loader = globs.get('__loader__')\n\n    source = None\n    if hasattr(loader, 'get_source'):\n        try:\n            source = loader.get_source(module_name)\n        except ImportError:\n            pass\n        if source is not None:\n            source = source.splitlines()\n    if source is None:\n        ipython_filename_match = ipython_filename_pattern.match(file_name)\n        if ipython_filename_match:\n            entry_number = int(ipython_filename_match.group(1))\n            try:\n                import IPython\n                ipython_shell = IPython.get_ipython()\n                ((_, _, source_chunk),) = ipython_shell.history_manager. \\\n                                  get_range(0, entry_number, entry_number + 1)\n                source = source_chunk.splitlines()\n            except Exception:\n                pass\n        else:\n            try:\n                with open(file_name, 'rb') as fp:\n                    source = fp.read().splitlines()\n            except utils.file_reading_errors:\n                pass\n    if source is None:\n        source = UnavailableSource()\n\n    # If we just read the source from a file, or if the loader did not\n    # apply tokenize.detect_encoding to decode the source into a\n    # string, then we should do that ourselves.\n    if isinstance(source[0], bytes):\n        encoding = 'ascii'\n        for line in source[:2]:\n            # File coding may be specified. Match pattern from PEP-263\n            # (https://www.python.org/dev/peps/pep-0263/)\n            match = re.search(br'coding[:=]\\s*([-\\w.]+)', line)\n            if match:\n                encoding = match.group(1).decode('ascii')\n                break\n        source = [pycompat.text_type(sline, encoding, 'replace') for sline in\n                  source]\n\n    source_cache[cache_key] = source\n    return source",
                "def get_write_function(output, overwrite):\n    is_path = isinstance(output, (pycompat.PathLike, str))\n    if overwrite and not is_path:\n        raise Exception('`overwrite=True` can only be used when writing '\n                        'content to file.')\n    if output is None:\n        def write(s):\n            stderr = sys.stderr\n            try:\n                stderr.write(s)\n            except UnicodeEncodeError:\n                # God damn Python 2\n                stderr.write(utils.shitcode(s))\n    elif is_path:\n        return FileWriter(output, overwrite).write\n    elif callable(output):\n        write = output\n    else:\n        assert isinstance(output, utils.WritableStream)\n\n        def write(s):\n            output.write(s)\n    return write",
                "def __getitem__(self, i):\n    return u'SOURCE IS UNAVAILABLE'",
                "def __init__(self, path, overwrite):\n    self.path = pycompat.text_type(path)\n    self.overwrite = overwrite",
                "def write(self, s):\n    with open(self.path, 'w' if self.overwrite else 'a') as output_file:\n        output_file.write(s)\n    self.overwrite = False",
                "def __init__(\n        self,\n        output=None,\n        watch=(),\n        watch_explode=(),\n        depth=1,\n        prefix='',\n        overwrite=False,\n        thread_info=False,\n):\n    self._write = get_write_function(output, overwrite)\n\n    self.watch = [\n        v if isinstance(v, BaseVariable) else CommonVariable(v)\n        for v in utils.ensure_tuple(watch)\n     ] + [\n         v if isinstance(v, BaseVariable) else Exploding(v)\n         for v in utils.ensure_tuple(watch_explode)\n    ]\n    self.frame_to_local_reprs = {}\n    self.depth = depth\n    self.prefix = prefix\n    self.thread_info = thread_info\n    self.thread_info_padding = 0\n    assert self.depth >= 1\n    self.target_codes = set()\n    self.target_frames = set()\n    self.thread_local = threading.local()",
                "def __call__(self, function):\n    self.target_codes.add(function.__code__)\n\n    @functools.wraps(function)\n    def simple_wrapper(*args, **kwargs):\n        with self:\n            return function(*args, **kwargs)\n\n    @functools.wraps(function)\n    def generator_wrapper(*args, **kwargs):\n        gen = function(*args, **kwargs)\n        method, incoming = gen.send, None\n        while True:\n            with self:\n                try:\n                    outgoing = method(incoming)\n                except StopIteration:\n                    return\n            try:\n                method, incoming = gen.send, (yield outgoing)\n            except Exception as e:\n                method, incoming = gen.throw, e\n\n    if pycompat.iscoroutinefunction(function):\n        # return decorate(function, coroutine_wrapper)\n        raise NotImplementedError\n    elif inspect.isgeneratorfunction(function):\n        return generator_wrapper\n    else:\n        return simple_wrapper",
                "def write(self, s):\n    s = u'{self.prefix}{s}\\n'.format(**locals())\n    self._write(s)",
                "def __enter__(self):\n    calling_frame = inspect.currentframe().f_back\n    if not self._is_internal_frame(calling_frame):\n        calling_frame.f_trace = self.trace\n        self.target_frames.add(calling_frame)\n\n    stack = self.thread_local.__dict__.setdefault('original_trace_functions', [])\n    stack.append(sys.gettrace())\n    sys.settrace(self.trace)",
                "def __exit__(self, exc_type, exc_value, exc_traceback):\n    stack = self.thread_local.original_trace_functions\n    sys.settrace(stack.pop())\n    calling_frame = inspect.currentframe().f_back\n    self.target_frames.discard(calling_frame)\n    self.frame_to_local_reprs.pop(calling_frame, None)",
                "def _is_internal_frame(self, frame):\n    return frame.f_code.co_filename == Tracer.__enter__.__code__.co_filename",
                "def set_thread_info_padding(self, thread_info):\n    current_thread_len = len(thread_info)\n    self.thread_info_padding = max(self.thread_info_padding,\n                                   current_thread_len)\n    return thread_info.ljust(self.thread_info_padding)",
                "def trace(self, frame, event, arg):\n\n    ### Checking whether we should trace this line: #######################\n    #                                                                     #\n    # We should trace this line either if it's in the decorated function,\n    # or the user asked to go a few levels deeper and we're within that\n    # number of levels deeper.\n\n    if not (frame.f_code in self.target_codes or frame in self.target_frames):\n        if self.depth == 1:\n            # We did the most common and quickest check above, because the\n            # trace function runs so incredibly often, therefore it's\n            # crucial to hyper-optimize it for the common case.\n            return None\n        elif self._is_internal_frame(frame):\n            return None\n        else:\n            _frame_candidate = frame\n            for i in range(1, self.depth):\n                _frame_candidate = _frame_candidate.f_back\n                if _frame_candidate is None:\n                    return None\n                elif _frame_candidate.f_code in self.target_codes or _frame_candidate in self.target_frames:\n                    break\n            else:\n                return None\n\n    thread_global.__dict__.setdefault('depth', -1)\n    if event == 'call':\n        thread_global.depth += 1\n    indent = ' ' * 4 * thread_global.depth\n\n    #                                                                     #\n    ### Finished checking whether we should trace this line. ##############\n\n    ### Reporting newish and modified variables: ##########################\n    #                                                                     #\n    old_local_reprs = self.frame_to_local_reprs.get(frame, {})\n    self.frame_to_local_reprs[frame] = local_reprs = \\\n                                   get_local_reprs(frame, watch=self.watch)\n\n    newish_string = ('Starting var:.. ' if event == 'call' else\n                                                        'New var:....... ')\n\n    for name, value_repr in local_reprs.items():\n        if name not in old_local_reprs:\n            self.write('{indent}{newish_string}{name} = {value_repr}'.format(\n                                                                   **locals()))\n        elif old_local_reprs[name] != value_repr:\n            self.write('{indent}Modified var:.. {name} = {value_repr}'.format(\n                                                               **locals()))\n\n    #                                                                     #\n    ### Finished newish and modified variables. ###########################\n\n    now_string = datetime_module.datetime.now().time().isoformat()\n    line_no = frame.f_lineno\n    source_line = get_source_from_frame(frame)[line_no - 1]\n    thread_info = \"\"\n    if self.thread_info:\n        current_thread = threading.current_thread()\n        thread_info = \"{ident}-{name} \".format(\n            ident=current_thread.ident, name=current_thread.getName())\n    thread_info = self.set_thread_info_padding(thread_info)\n\n    ### Dealing with misplaced function definition: #######################\n    #                                                                     #\n    if event == 'call' and source_line.lstrip().startswith('@'):\n        # If a function decorator is found, skip lines until an actual\n        # function definition is found.\n        for candidate_line_no in itertools.count(line_no):\n            try:\n                candidate_source_line = \\\n                        get_source_from_frame(frame)[candidate_line_no - 1]\n            except IndexError:\n                # End of source file reached without finding a function\n                # definition. Fall back to original source line.\n                break\n\n            if candidate_source_line.lstrip().startswith('def'):\n                # Found the def line!\n                line_no = candidate_line_no\n                source_line = candidate_source_line\n                break\n    #                                                                     #\n    ### Finished dealing with misplaced function definition. ##############\n\n    # If a call ends due to an exception, we still get a 'return' event\n    # with arg = None. This seems to be the only way to tell the difference\n    # https://stackoverflow.com/a/12800909/2482744\n    code_byte = frame.f_code.co_code[frame.f_lasti]\n    if not isinstance(code_byte, int):\n        code_byte = ord(code_byte)\n    ended_by_exception = (\n            event == 'return'\n            and arg is None\n            and (opcode.opname[code_byte]\n                 not in ('RETURN_VALUE', 'YIELD_VALUE'))\n    )\n\n    if ended_by_exception:\n        self.write('{indent}Call ended by exception'.\n                   format(**locals()))\n    else:\n        self.write(u'{indent}{now_string} {thread_info}{event:9} '\n                   u'{line_no:4} {source_line}'.format(**locals()))\n\n    if event == 'return':\n        del self.frame_to_local_reprs[frame]\n        thread_global.depth -= 1\n\n        if not ended_by_exception:\n            return_value_repr = utils.get_shortish_repr(arg)\n            self.write('{indent}Return value:.. {return_value_repr}'.\n                       format(**locals()))\n\n    if event == 'exception':\n        exception = '\\n'.join(traceback.format_exception_only(*arg[:2])).strip()\n        exception = utils.truncate(exception, utils.MAX_EXCEPTION_LENGTH)\n        self.write('{indent}{exception}'.\n                   format(**locals()))\n\n    return self.trace",
                "def write(s):\n    stderr = sys.stderr\n    try:\n        stderr.write(s)\n    except UnicodeEncodeError:\n        # God damn Python 2\n        stderr.write(utils.shitcode(s))",
                "@functools.wraps(function)\ndef simple_wrapper(*args, **kwargs):\n    with self:\n        return function(*args, **kwargs)",
                "@functools.wraps(function)\ndef generator_wrapper(*args, **kwargs):\n    gen = function(*args, **kwargs)\n    method, incoming = gen.send, None\n    while True:\n        with self:\n            try:\n                outgoing = method(incoming)\n            except StopIteration:\n                return\n        try:\n            method, incoming = gen.send, (yield outgoing)\n        except Exception as e:\n            method, incoming = gen.throw, e",
                "def write(s):\n    output.write(s)"
            ],
            "inscope_function_signatures": [
                "get_local_reprs(frame, watch=())",
                "get_source_from_frame(frame)",
                "get_write_function(output, overwrite)",
                "__getitem__(self, i)",
                "__init__(self, path, overwrite)",
                "write(self, s)",
                "__init__(self, output=None, watch=(), watch_explode=(), depth=1, prefix='', overwrite=False, thread_info=False)",
                "__call__(self, function)",
                "write(self, s)",
                "__enter__(self)",
                "__exit__(self, exc_type, exc_value, exc_traceback)",
                "_is_internal_frame(self, frame)",
                "set_thread_info_padding(self, thread_info)",
                "trace(self, frame, event, arg)",
                "write(s)",
                "simple_wrapper(*args, **kwargs)",
                "generator_wrapper(*args, **kwargs)",
                "write(s)"
            ],
            "variables_in_file": {
                "ipython_filename_pattern": [
                    19,
                    63
                ],
                "re.compile": [
                    19
                ],
                "re": [
                    91,
                    19
                ],
                "code": [
                    24,
                    23
                ],
                "frame.f_code": [
                    262,
                    361,
                    46,
                    23,
                    279
                ],
                "frame": [
                    288,
                    344,
                    262,
                    327,
                    328,
                    361,
                    44,
                    46,
                    308,
                    309,
                    310,
                    23,
                    24,
                    26,
                    379,
                    279,
                    285,
                    31
                ],
                "vars_order": [
                    24,
                    27
                ],
                "code.co_varnames": [
                    24
                ],
                "code.co_cellvars": [
                    24
                ],
                "code.co_freevars": [
                    24
                ],
                "tuple": [
                    24
                ],
                "frame.f_locals.keys": [
                    24
                ],
                "frame.f_locals": [
                    24,
                    26
                ],
                "result_items": [
                    26,
                    27,
                    28
                ],
                "key": [
                    26
                ],
                "utils.get_shortish_repr": [
                    26,
                    383
                ],
                "utils": [
                    194,
                    197,
                    389,
                    78,
                    114,
                    120,
                    26,
                    383
                ],
                "value": [
                    26
                ],
                "frame.f_locals.items": [
                    26
                ],
                "result_items.sort": [
                    27
                ],
                "vars_order.index": [
                    27
                ],
                "key_value": [
                    27
                ],
                "result": [
                    32,
                    28,
                    31
                ],
                "collections.OrderedDict": [
                    28
                ],
                "collections": [
                    28
                ],
                "variable": [
                    30,
                    31
                ],
                "watch": [
                    194,
                    30
                ],
                "result.update": [
                    31
                ],
                "sorted": [
                    31
                ],
                "variable.items": [
                    31
                ],
                "object": [
                    35,
                    127
                ],
                "source_cache": [
                    40,
                    49,
                    98
                ],
                "globs": [
                    44,
                    45,
                    52
                ],
                "frame.f_globals": [
                    44
                ],
                "module_name": [
                    57,
                    45,
                    47
                ],
                "globs.get": [
                    52,
                    45
                ],
                "file_name": [
                    76,
                    63,
                    46,
                    47
                ],
                "frame.f_code.co_filename": [
                    46,
                    262
                ],
                "cache_key": [
                    49,
                    98,
                    47
                ],
                "KeyError": [
                    50
                ],
                "loader": [
                    57,
                    52,
                    55
                ],
                "source": [
                    96,
                    98,
                    99,
                    71,
                    77,
                    80,
                    81,
                    54,
                    86,
                    88,
                    57,
                    60,
                    61,
                    62,
                    95
                ],
                "hasattr": [
                    55
                ],
                "loader.get_source": [
                    57
                ],
                "ImportError": [
                    58
                ],
                "source.splitlines": [
                    61
                ],
                "ipython_filename_match": [
                    64,
                    65,
                    63
                ],
                "ipython_filename_pattern.match": [
                    63
                ],
                "entry_number": [
                    65,
                    70
                ],
                "int": [
                    65,
                    362
                ],
                "ipython_filename_match.group": [
                    65
                ],
                "ipython_shell": [
                    68,
                    69
                ],
                "IPython.get_ipython": [
                    68
                ],
                "IPython": [
                    68
                ],
                "_": [
                    69
                ],
                "source_chunk": [
                    69,
                    71
                ],
                "ipython_shell.history_manager.get_range": [
                    69
                ],
                "ipython_shell.history_manager": [
                    69
                ],
                "source_chunk.splitlines": [
                    71
                ],
                "Exception": [
                    72,
                    105,
                    229
                ],
                "open": [
                    76,
                    133
                ],
                "fp": [
                    76,
                    77
                ],
                "splitlines": [
                    77
                ],
                "fp.read": [
                    77
                ],
                "utils.file_reading_errors": [
                    78
                ],
                "UnavailableSource": [
                    81
                ],
                "isinstance": [
                    193,
                    196,
                    103,
                    362,
                    86,
                    120
                ],
                "bytes": [
                    86
                ],
                "encoding": [
                    93,
                    95,
                    87
                ],
                "line": [
                    88,
                    91
                ],
                "match": [
                    91,
                    92,
                    93
                ],
                "re.search": [
                    91
                ],
                "decode": [
                    93
                ],
                "match.group": [
                    93
                ],
                "pycompat.text_type": [
                    129,
                    95
                ],
                "pycompat": [
                    232,
                    129,
                    103,
                    95
                ],
                "sline": [
                    95
                ],
                "is_path": [
                    104,
                    115,
                    103
                ],
                "output": [
                    103,
                    107,
                    116,
                    117,
                    118,
                    120,
                    123,
                    190
                ],
                "pycompat.PathLike": [
                    103
                ],
                "str": [
                    103
                ],
                "overwrite": [
                    104,
                    130,
                    116,
                    190
                ],
                "stderr": [
                    114,
                    109,
                    111
                ],
                "sys.stderr": [
                    109
                ],
                "sys": [
                    256,
                    251,
                    252,
                    109
                ],
                "stderr.write": [
                    114,
                    111
                ],
                "s": [
                    134,
                    111,
                    241,
                    114,
                    242,
                    123
                ],
                "UnicodeEncodeError": [
                    112
                ],
                "utils.shitcode": [
                    114
                ],
                "write": [
                    124,
                    116,
                    118
                ],
                "FileWriter": [
                    116
                ],
                "callable": [
                    117
                ],
                "utils.WritableStream": [
                    120
                ],
                "output.write": [
                    123
                ],
                "self.path": [
                    129,
                    133
                ],
                "self": [
                    384,
                    129,
                    130,
                    258,
                    259,
                    133,
                    390,
                    135,
                    393,
                    266,
                    268,
                    279,
                    280,
                    285,
                    289,
                    293,
                    308,
                    309,
                    310,
                    317,
                    190,
                    192,
                    320,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    330,
                    334,
                    210,
                    214,
                    222,
                    375,
                    242,
                    372,
                    246,
                    247,
                    248,
                    250,
                    379,
                    252,
                    255
                ],
                "path": [
                    129
                ],
                "self.overwrite": [
                    130,
                    133,
                    135
                ],
                "output_file": [
                    133,
                    134
                ],
                "output_file.write": [
                    134
                ],
                "thread_global": [
                    138,
                    298,
                    300,
                    301,
                    380
                ],
                "threading.local": [
                    138,
                    207
                ],
                "threading": [
                    138,
                    331,
                    207
                ],
                "self._write": [
                    242,
                    190
                ],
                "get_write_function": [
                    190
                ],
                "self.watch": [
                    192,
                    310
                ],
                "v": [
                    193,
                    194,
                    196,
                    197
                ],
                "BaseVariable": [
                    193,
                    196
                ],
                "CommonVariable": [
                    193
                ],
                "utils.ensure_tuple": [
                    194,
                    197
                ],
                "Exploding": [
                    196
                ],
                "watch_explode": [
                    197
                ],
                "self.frame_to_local_reprs": [
                    259,
                    199,
                    308,
                    309,
                    379
                ],
                "self.depth": [
                    200,
                    280,
                    204,
                    289
                ],
                "depth": [
                    200
                ],
                "self.prefix": [
                    201
                ],
                "prefix": [
                    201
                ],
                "self.thread_info": [
                    202,
                    330
                ],
                "thread_info": [
                    329,
                    265,
                    202,
                    268,
                    332,
                    334
                ],
                "self.thread_info_padding": [
                    266,
                    203,
                    268
                ],
                "self.target_codes": [
                    210,
                    293,
                    205,
                    279
                ],
                "set": [
                    205,
                    206
                ],
                "self.target_frames": [
                    258,
                    293,
                    206,
                    279,
                    248
                ],
                "self.thread_local": [
                    250,
                    255,
                    207
                ],
                "self.target_codes.add": [
                    210
                ],
                "function.__code__": [
                    210
                ],
                "function": [
                    232,
                    235,
                    210,
                    212,
                    215,
                    217,
                    219
                ],
                "args": [
                    219,
                    215
                ],
                "kwargs": [
                    219,
                    215
                ],
                "functools.wraps": [
                    217,
                    212
                ],
                "functools": [
                    217,
                    212
                ],
                "gen": [
                    219,
                    220,
                    228,
                    230
                ],
                "method": [
                    224,
                    220,
                    228,
                    230
                ],
                "incoming": [
                    224,
                    220,
                    228,
                    230
                ],
                "gen.send": [
                    220,
                    228
                ],
                "outgoing": [
                    224,
                    228
                ],
                "StopIteration": [
                    225
                ],
                "gen.throw": [
                    230
                ],
                "e": [
                    230
                ],
                "pycompat.iscoroutinefunction": [
                    232
                ],
                "NotImplementedError": [
                    234
                ],
                "inspect.isgeneratorfunction": [
                    235
                ],
                "inspect": [
                    257,
                    235,
                    245
                ],
                "generator_wrapper": [
                    236
                ],
                "simple_wrapper": [
                    238
                ],
                "format": [
                    320,
                    384,
                    390,
                    332,
                    241,
                    372,
                    375,
                    317
                ],
                "locals": [
                    321,
                    385,
                    391,
                    241,
                    373,
                    376,
                    318
                ],
                "calling_frame": [
                    257,
                    258,
                    259,
                    245,
                    246,
                    247,
                    248
                ],
                "f_back": [
                    257,
                    245
                ],
                "inspect.currentframe": [
                    257,
                    245
                ],
                "self._is_internal_frame": [
                    285,
                    246
                ],
                "calling_frame.f_trace": [
                    247
                ],
                "self.trace": [
                    393,
                    252,
                    247
                ],
                "self.target_frames.add": [
                    248
                ],
                "stack": [
                    256,
                    250,
                    251,
                    255
                ],
                "self.thread_local.__dict__.setdefault": [
                    250
                ],
                "self.thread_local.__dict__": [
                    250
                ],
                "stack.append": [
                    251
                ],
                "sys.gettrace": [
                    251
                ],
                "sys.settrace": [
                    256,
                    252
                ],
                "self.thread_local.original_trace_functions": [
                    255
                ],
                "stack.pop": [
                    256
                ],
                "self.target_frames.discard": [
                    258
                ],
                "self.frame_to_local_reprs.pop": [
                    259
                ],
                "Tracer.__enter__.__code__.co_filename": [
                    262
                ],
                "Tracer.__enter__.__code__": [
                    262
                ],
                "Tracer.__enter__": [
                    262
                ],
                "Tracer": [
                    262
                ],
                "current_thread_len": [
                    265,
                    267
                ],
                "len": [
                    265
                ],
                "max": [
                    266
                ],
                "thread_info.ljust": [
                    268
                ],
                "_frame_candidate": [
                    288,
                    290,
                    291,
                    293
                ],
                "i": [
                    289
                ],
                "range": [
                    289
                ],
                "_frame_candidate.f_back": [
                    290
                ],
                "_frame_candidate.f_code": [
                    293
                ],
                "thread_global.__dict__.setdefault": [
                    298
                ],
                "thread_global.__dict__": [
                    298
                ],
                "event": [
                    387,
                    299,
                    365,
                    338,
                    312,
                    378
                ],
                "thread_global.depth": [
                    380,
                    300,
                    301
                ],
                "indent": [
                    301
                ],
                "old_local_reprs": [
                    308,
                    316,
                    319
                ],
                "self.frame_to_local_reprs.get": [
                    308
                ],
                "local_reprs": [
                    315,
                    309
                ],
                "get_local_reprs": [
                    310
                ],
                "newish_string": [
                    312
                ],
                "name": [
                    315,
                    316,
                    319
                ],
                "value_repr": [
                    315,
                    319
                ],
                "local_reprs.items": [
                    315
                ],
                "self.write": [
                    320,
                    384,
                    390,
                    372,
                    375,
                    317
                ],
                "now_string": [
                    326
                ],
                "isoformat": [
                    326
                ],
                "time": [
                    326
                ],
                "datetime_module.datetime.now": [
                    326
                ],
                "datetime_module.datetime": [
                    326
                ],
                "datetime_module": [
                    326
                ],
                "line_no": [
                    328,
                    352,
                    341,
                    327
                ],
                "frame.f_lineno": [
                    327
                ],
                "source_line": [
                    328,
                    353,
                    338
                ],
                "get_source_from_frame": [
                    328,
                    344
                ],
                "current_thread": [
                    331,
                    333
                ],
                "threading.current_thread": [
                    331
                ],
                "current_thread.ident": [
                    333
                ],
                "current_thread.getName": [
                    333
                ],
                "self.set_thread_info_padding": [
                    334
                ],
                "startswith": [
                    338,
                    350
                ],
                "source_line.lstrip": [
                    338
                ],
                "candidate_line_no": [
                    344,
                    352,
                    341
                ],
                "itertools.count": [
                    341
                ],
                "itertools": [
                    341
                ],
                "candidate_source_line": [
                    353,
                    350,
                    343
                ],
                "IndexError": [
                    345
                ],
                "candidate_source_line.lstrip": [
                    350
                ],
                "code_byte": [
                    361,
                    362,
                    363,
                    367
                ],
                "frame.f_code.co_code": [
                    361
                ],
                "frame.f_lasti": [
                    361
                ],
                "ord": [
                    363
                ],
                "ended_by_exception": [
                    371,
                    364,
                    382
                ],
                "arg": [
                    388,
                    366,
                    383
                ],
                "opcode.opname": [
                    367
                ],
                "opcode": [
                    367
                ],
                "return_value_repr": [
                    383
                ],
                "exception": [
                    388,
                    389
                ],
                "strip": [
                    388
                ],
                "join": [
                    388
                ],
                "traceback.format_exception_only": [
                    388
                ],
                "traceback": [
                    388
                ],
                "utils.truncate": [
                    389
                ],
                "utils.MAX_EXCEPTION_LENGTH": [
                    389
                ]
            },
            "filtered_variables_in_file": {
                "ipython_filename_pattern": [
                    19,
                    63
                ],
                "re.compile": [
                    19
                ],
                "re": [
                    91,
                    19
                ],
                "code": [
                    24,
                    23
                ],
                "frame.f_code": [
                    262,
                    361,
                    46,
                    23,
                    279
                ],
                "frame": [
                    288,
                    344,
                    262,
                    327,
                    328,
                    361,
                    44,
                    46,
                    308,
                    309,
                    310,
                    23,
                    24,
                    26,
                    379,
                    279,
                    285,
                    31
                ],
                "vars_order": [
                    24,
                    27
                ],
                "code.co_varnames": [
                    24
                ],
                "code.co_cellvars": [
                    24
                ],
                "code.co_freevars": [
                    24
                ],
                "frame.f_locals.keys": [
                    24
                ],
                "frame.f_locals": [
                    24,
                    26
                ],
                "result_items": [
                    26,
                    27,
                    28
                ],
                "key": [
                    26
                ],
                "utils.get_shortish_repr": [
                    26,
                    383
                ],
                "utils": [
                    194,
                    197,
                    389,
                    78,
                    114,
                    120,
                    26,
                    383
                ],
                "value": [
                    26
                ],
                "frame.f_locals.items": [
                    26
                ],
                "result_items.sort": [
                    27
                ],
                "vars_order.index": [
                    27
                ],
                "key_value": [
                    27
                ],
                "result": [
                    32,
                    28,
                    31
                ],
                "collections.OrderedDict": [
                    28
                ],
                "collections": [
                    28
                ],
                "variable": [
                    30,
                    31
                ],
                "watch": [
                    194,
                    30
                ],
                "result.update": [
                    31
                ],
                "variable.items": [
                    31
                ],
                "source_cache": [
                    40,
                    49,
                    98
                ],
                "globs": [
                    44,
                    45,
                    52
                ],
                "frame.f_globals": [
                    44
                ],
                "module_name": [
                    57,
                    45,
                    47
                ],
                "globs.get": [
                    52,
                    45
                ],
                "file_name": [
                    76,
                    63,
                    46,
                    47
                ],
                "frame.f_code.co_filename": [
                    46,
                    262
                ],
                "cache_key": [
                    49,
                    98,
                    47
                ],
                "loader": [
                    57,
                    52,
                    55
                ],
                "source": [
                    96,
                    98,
                    99,
                    71,
                    77,
                    80,
                    81,
                    54,
                    86,
                    88,
                    57,
                    60,
                    61,
                    62,
                    95
                ],
                "loader.get_source": [
                    57
                ],
                "source.splitlines": [
                    61
                ],
                "ipython_filename_match": [
                    64,
                    65,
                    63
                ],
                "ipython_filename_pattern.match": [
                    63
                ],
                "entry_number": [
                    65,
                    70
                ],
                "ipython_filename_match.group": [
                    65
                ],
                "ipython_shell": [
                    68,
                    69
                ],
                "IPython.get_ipython": [
                    68
                ],
                "IPython": [
                    68
                ],
                "_": [
                    69
                ],
                "source_chunk": [
                    69,
                    71
                ],
                "ipython_shell.history_manager.get_range": [
                    69
                ],
                "ipython_shell.history_manager": [
                    69
                ],
                "source_chunk.splitlines": [
                    71
                ],
                "fp": [
                    76,
                    77
                ],
                "splitlines": [
                    77
                ],
                "fp.read": [
                    77
                ],
                "utils.file_reading_errors": [
                    78
                ],
                "UnavailableSource": [
                    81
                ],
                "encoding": [
                    93,
                    95,
                    87
                ],
                "line": [
                    88,
                    91
                ],
                "match": [
                    91,
                    92,
                    93
                ],
                "re.search": [
                    91
                ],
                "decode": [
                    93
                ],
                "match.group": [
                    93
                ],
                "pycompat.text_type": [
                    129,
                    95
                ],
                "pycompat": [
                    232,
                    129,
                    103,
                    95
                ],
                "sline": [
                    95
                ],
                "is_path": [
                    104,
                    115,
                    103
                ],
                "output": [
                    103,
                    107,
                    116,
                    117,
                    118,
                    120,
                    123,
                    190
                ],
                "pycompat.PathLike": [
                    103
                ],
                "overwrite": [
                    104,
                    130,
                    116,
                    190
                ],
                "stderr": [
                    114,
                    109,
                    111
                ],
                "sys.stderr": [
                    109
                ],
                "sys": [
                    256,
                    251,
                    252,
                    109
                ],
                "stderr.write": [
                    114,
                    111
                ],
                "s": [
                    134,
                    111,
                    241,
                    114,
                    242,
                    123
                ],
                "utils.shitcode": [
                    114
                ],
                "write": [
                    124,
                    116,
                    118
                ],
                "FileWriter": [
                    116
                ],
                "utils.WritableStream": [
                    120
                ],
                "output.write": [
                    123
                ],
                "self.path": [
                    129,
                    133
                ],
                "self": [
                    384,
                    129,
                    130,
                    258,
                    259,
                    133,
                    390,
                    135,
                    393,
                    266,
                    268,
                    279,
                    280,
                    285,
                    289,
                    293,
                    308,
                    309,
                    310,
                    317,
                    190,
                    192,
                    320,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    330,
                    334,
                    210,
                    214,
                    222,
                    375,
                    242,
                    372,
                    246,
                    247,
                    248,
                    250,
                    379,
                    252,
                    255
                ],
                "path": [
                    129
                ],
                "self.overwrite": [
                    130,
                    133,
                    135
                ],
                "output_file": [
                    133,
                    134
                ],
                "output_file.write": [
                    134
                ],
                "thread_global": [
                    138,
                    298,
                    300,
                    301,
                    380
                ],
                "threading.local": [
                    138,
                    207
                ],
                "threading": [
                    138,
                    331,
                    207
                ],
                "self._write": [
                    242,
                    190
                ],
                "get_write_function": [
                    190
                ],
                "self.watch": [
                    192,
                    310
                ],
                "v": [
                    193,
                    194,
                    196,
                    197
                ],
                "BaseVariable": [
                    193,
                    196
                ],
                "CommonVariable": [
                    193
                ],
                "utils.ensure_tuple": [
                    194,
                    197
                ],
                "Exploding": [
                    196
                ],
                "watch_explode": [
                    197
                ],
                "self.frame_to_local_reprs": [
                    259,
                    199,
                    308,
                    309,
                    379
                ],
                "self.depth": [
                    200,
                    280,
                    204,
                    289
                ],
                "depth": [
                    200
                ],
                "self.prefix": [
                    201
                ],
                "prefix": [
                    201
                ],
                "self.thread_info": [
                    202,
                    330
                ],
                "thread_info": [
                    329,
                    265,
                    202,
                    268,
                    332,
                    334
                ],
                "self.thread_info_padding": [
                    266,
                    203,
                    268
                ],
                "self.target_codes": [
                    210,
                    293,
                    205,
                    279
                ],
                "self.target_frames": [
                    258,
                    293,
                    206,
                    279,
                    248
                ],
                "self.thread_local": [
                    250,
                    255,
                    207
                ],
                "self.target_codes.add": [
                    210
                ],
                "function.__code__": [
                    210
                ],
                "function": [
                    232,
                    235,
                    210,
                    212,
                    215,
                    217,
                    219
                ],
                "args": [
                    219,
                    215
                ],
                "kwargs": [
                    219,
                    215
                ],
                "functools.wraps": [
                    217,
                    212
                ],
                "functools": [
                    217,
                    212
                ],
                "gen": [
                    219,
                    220,
                    228,
                    230
                ],
                "method": [
                    224,
                    220,
                    228,
                    230
                ],
                "incoming": [
                    224,
                    220,
                    228,
                    230
                ],
                "gen.send": [
                    220,
                    228
                ],
                "outgoing": [
                    224,
                    228
                ],
                "gen.throw": [
                    230
                ],
                "e": [
                    230
                ],
                "pycompat.iscoroutinefunction": [
                    232
                ],
                "inspect.isgeneratorfunction": [
                    235
                ],
                "inspect": [
                    257,
                    235,
                    245
                ],
                "generator_wrapper": [
                    236
                ],
                "simple_wrapper": [
                    238
                ],
                "calling_frame": [
                    257,
                    258,
                    259,
                    245,
                    246,
                    247,
                    248
                ],
                "f_back": [
                    257,
                    245
                ],
                "inspect.currentframe": [
                    257,
                    245
                ],
                "self._is_internal_frame": [
                    285,
                    246
                ],
                "calling_frame.f_trace": [
                    247
                ],
                "self.trace": [
                    393,
                    252,
                    247
                ],
                "self.target_frames.add": [
                    248
                ],
                "stack": [
                    256,
                    250,
                    251,
                    255
                ],
                "self.thread_local.__dict__.setdefault": [
                    250
                ],
                "self.thread_local.__dict__": [
                    250
                ],
                "stack.append": [
                    251
                ],
                "sys.gettrace": [
                    251
                ],
                "sys.settrace": [
                    256,
                    252
                ],
                "self.thread_local.original_trace_functions": [
                    255
                ],
                "stack.pop": [
                    256
                ],
                "self.target_frames.discard": [
                    258
                ],
                "self.frame_to_local_reprs.pop": [
                    259
                ],
                "Tracer.__enter__.__code__.co_filename": [
                    262
                ],
                "Tracer.__enter__.__code__": [
                    262
                ],
                "Tracer.__enter__": [
                    262
                ],
                "Tracer": [
                    262
                ],
                "current_thread_len": [
                    265,
                    267
                ],
                "thread_info.ljust": [
                    268
                ],
                "_frame_candidate": [
                    288,
                    290,
                    291,
                    293
                ],
                "i": [
                    289
                ],
                "_frame_candidate.f_back": [
                    290
                ],
                "_frame_candidate.f_code": [
                    293
                ],
                "thread_global.__dict__.setdefault": [
                    298
                ],
                "thread_global.__dict__": [
                    298
                ],
                "event": [
                    387,
                    299,
                    365,
                    338,
                    312,
                    378
                ],
                "thread_global.depth": [
                    380,
                    300,
                    301
                ],
                "indent": [
                    301
                ],
                "old_local_reprs": [
                    308,
                    316,
                    319
                ],
                "self.frame_to_local_reprs.get": [
                    308
                ],
                "local_reprs": [
                    315,
                    309
                ],
                "get_local_reprs": [
                    310
                ],
                "newish_string": [
                    312
                ],
                "name": [
                    315,
                    316,
                    319
                ],
                "value_repr": [
                    315,
                    319
                ],
                "local_reprs.items": [
                    315
                ],
                "self.write": [
                    320,
                    384,
                    390,
                    372,
                    375,
                    317
                ],
                "now_string": [
                    326
                ],
                "isoformat": [
                    326
                ],
                "time": [
                    326
                ],
                "datetime_module.datetime.now": [
                    326
                ],
                "datetime_module.datetime": [
                    326
                ],
                "datetime_module": [
                    326
                ],
                "line_no": [
                    328,
                    352,
                    341,
                    327
                ],
                "frame.f_lineno": [
                    327
                ],
                "source_line": [
                    328,
                    353,
                    338
                ],
                "get_source_from_frame": [
                    328,
                    344
                ],
                "current_thread": [
                    331,
                    333
                ],
                "threading.current_thread": [
                    331
                ],
                "current_thread.ident": [
                    333
                ],
                "current_thread.getName": [
                    333
                ],
                "self.set_thread_info_padding": [
                    334
                ],
                "startswith": [
                    338,
                    350
                ],
                "source_line.lstrip": [
                    338
                ],
                "candidate_line_no": [
                    344,
                    352,
                    341
                ],
                "itertools.count": [
                    341
                ],
                "itertools": [
                    341
                ],
                "candidate_source_line": [
                    353,
                    350,
                    343
                ],
                "candidate_source_line.lstrip": [
                    350
                ],
                "code_byte": [
                    361,
                    362,
                    363,
                    367
                ],
                "frame.f_code.co_code": [
                    361
                ],
                "frame.f_lasti": [
                    361
                ],
                "ended_by_exception": [
                    371,
                    364,
                    382
                ],
                "arg": [
                    388,
                    366,
                    383
                ],
                "opcode.opname": [
                    367
                ],
                "opcode": [
                    367
                ],
                "return_value_repr": [
                    383
                ],
                "exception": [
                    388,
                    389
                ],
                "strip": [
                    388
                ],
                "join": [
                    388
                ],
                "traceback.format_exception_only": [
                    388
                ],
                "traceback": [
                    388
                ],
                "utils.truncate": [
                    389
                ],
                "utils.MAX_EXCEPTION_LENGTH": [
                    389
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/PySnooper_1/tests/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "assert_output",
                    "function_code": "def assert_output(output, expected_entries, prefix=None):\n    lines = tuple(filter(None, output.split('\\n')))\n\n    if prefix is not None:\n        for line in lines:\n            if not line.startswith(prefix):\n                raise OutputFailure(line)\n\n    any_mismatch = False\n    result = ''\n    template = '\\n{line!s:%s}   {expected_entry}  {arrow}' % max(map(len, lines))\n    for expected_entry, line in zip_longest(expected_entries, lines, fillvalue=\"\"):\n        mismatch = not (expected_entry and expected_entry.check(line))\n        any_mismatch |= mismatch\n        arrow = '<===' * mismatch\n        result += template.format(**locals())\n\n    if len(lines) != len(expected_entries):\n        result += '\\nOutput has {} lines, while we expect {} lines.'.format(\n                len(lines), len(expected_entries))\n\n    if any_mismatch:\n        raise OutputFailure(result)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 247,
                    "end_line": 269,
                    "variables": {
                        "lines": [
                            257,
                            258,
                            264,
                            266,
                            248,
                            251
                        ],
                        "tuple": [
                            248
                        ],
                        "filter": [
                            248
                        ],
                        "output.split": [
                            248
                        ],
                        "output": [
                            248
                        ],
                        "prefix": [
                            250,
                            252
                        ],
                        "line": [
                            258,
                            259,
                            251,
                            252,
                            253
                        ],
                        "line.startswith": [
                            252
                        ],
                        "OutputFailure": [
                            269,
                            253
                        ],
                        "any_mismatch": [
                            260,
                            268,
                            255
                        ],
                        "result": [
                            256,
                            265,
                            269,
                            262
                        ],
                        "template": [
                            257,
                            262
                        ],
                        "max": [
                            257
                        ],
                        "map": [
                            257
                        ],
                        "len": [
                            264,
                            257,
                            266
                        ],
                        "expected_entry": [
                            258,
                            259
                        ],
                        "zip_longest": [
                            258
                        ],
                        "expected_entries": [
                            264,
                            258,
                            266
                        ],
                        "mismatch": [
                            259,
                            260,
                            261
                        ],
                        "expected_entry.check": [
                            259
                        ],
                        "arrow": [
                            261
                        ],
                        "template.format": [
                            262
                        ],
                        "locals": [
                            262
                        ],
                        "format": [
                            265
                        ]
                    },
                    "filtered_variables": {
                        "lines": [
                            257,
                            258,
                            264,
                            266,
                            248,
                            251
                        ],
                        "output.split": [
                            248
                        ],
                        "output": [
                            248
                        ],
                        "prefix": [
                            250,
                            252
                        ],
                        "line": [
                            258,
                            259,
                            251,
                            252,
                            253
                        ],
                        "line.startswith": [
                            252
                        ],
                        "OutputFailure": [
                            269,
                            253
                        ],
                        "any_mismatch": [
                            260,
                            268,
                            255
                        ],
                        "result": [
                            256,
                            265,
                            269,
                            262
                        ],
                        "template": [
                            257,
                            262
                        ],
                        "expected_entry": [
                            258,
                            259
                        ],
                        "zip_longest": [
                            258
                        ],
                        "expected_entries": [
                            264,
                            258,
                            266
                        ],
                        "mismatch": [
                            259,
                            260,
                            261
                        ],
                        "expected_entry.check": [
                            259
                        ],
                        "arrow": [
                            261
                        ],
                        "template.format": [
                            262
                        ]
                    },
                    "diff_line_number": 257,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output.split": {
                                    "variable_value": "<built-in method split of str object at 0x7fb7e516f070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "\"19:06:48.410958 call        28         def foo():\\n19:06:48.411645 line        29             a = 1\\nNew var:....... a = 1\\n19:06:48.412356 line        30             x = '\u5931\u8d25'\\nNew var:....... x = '\u5931\u8d25'\\n19:06:48.412568 line        31             return 7\\n19:06:48.412672 return      31             return 7\\nReturn value:.. 7\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "320"
                                },
                                "prefix": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OutputFailure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "any_mismatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entry": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entries": {
                                    "variable_value": "(CallEntry(prefix=''), LineEntry(prefix=''), VariableEntry(name='a', prefix=''), LineEntry(source=\"x = '\u5931\u8d25'\", prefix=''), VariableEntry(name='x', value=\"'\u5931\u8d25'\", prefix=''), LineEntry(prefix=''), ReturnEntry(prefix=''), ReturnValueEntry(value='7', prefix=''))",
                                    "variable_type": "tuple",
                                    "variable_shape": "8"
                                },
                                "mismatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entry.check": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arrow": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "('19:06:48.410958 call        28         def foo():', '19:06:48.411645 line        29             a = 1', 'New var:....... a = 1', \"19:06:48.412356 line        30             x = '\u5931\u8d25'\", \"New var:....... x = '\u5931\u8d25'\", '19:06:48.412568 line        31             return 7', '19:06:48.412672 return      31             return 7', 'Return value:.. 7')",
                                    "variable_type": "tuple",
                                    "variable_shape": "8"
                                },
                                "output.split": {
                                    "variable_value": "<built-in method split of str object at 0x7fb7e516f070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "\"19:06:48.410958 call        28         def foo():\\n19:06:48.411645 line        29             a = 1\\nNew var:....... a = 1\\n19:06:48.412356 line        30             x = '\u5931\u8d25'\\nNew var:....... x = '\u5931\u8d25'\\n19:06:48.412568 line        31             return 7\\n19:06:48.412672 return      31             return 7\\nReturn value:.. 7\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "320"
                                },
                                "prefix": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "'Return value:.. 7'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "line.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x110b14350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "OutputFailure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "any_mismatch": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "'\\n19:06:48.410958 call        28         def foo():     CallEntry(prefix=\\'\\')  \\n19:06:48.411645 line        29             a = 1      LineEntry(prefix=\\'\\')  \\nNew var:....... a = 1                                 VariableEntry(name=\\'a\\', prefix=\\'\\')  \\n19:06:48.412356 line        30             x = \\'\u5931\u8d25\\'   LineEntry(source=\"x = \\'\u5931\u8d25\\'\", prefix=\\'\\')  \\nNew var:....... x = \\'\u5931\u8d25\\'                              VariableEntry(name=\\'x\\', value=\"\\'\u5931\u8d25\\'\", prefix=\\'\\')  \\n19:06:48.412568 line        31             return 7   LineEntry(prefix=\\'\\')  \\n19:06:48.412672 return      31             return 7   ReturnEntry(prefix=\\'\\')  \\nReturn value:.. 7                                     ReturnValueEntry(value=\\'7\\', prefix=\\'\\')  '",
                                    "variable_type": "str",
                                    "variable_shape": "697"
                                },
                                "template": {
                                    "variable_value": "'\\n{line!s:51}   {expected_entry}  {arrow}'",
                                    "variable_type": "str",
                                    "variable_shape": "40"
                                },
                                "expected_entry": {
                                    "variable_value": "ReturnValueEntry(value='7', prefix='')",
                                    "variable_type": "ReturnValueEntry",
                                    "variable_shape": null
                                },
                                "zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entries": {
                                    "variable_value": "(CallEntry(prefix=''), LineEntry(prefix=''), VariableEntry(name='a', prefix=''), LineEntry(source=\"x = '\u5931\u8d25'\", prefix=''), VariableEntry(name='x', value=\"'\u5931\u8d25'\", prefix=''), LineEntry(prefix=''), ReturnEntry(prefix=''), ReturnValueEntry(value='7', prefix=''))",
                                    "variable_type": "tuple",
                                    "variable_shape": "8"
                                },
                                "mismatch": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "expected_entry.check": {
                                    "variable_value": "<bound method _BaseValueEntry.check of ReturnValueEntry(value='7', prefix='')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "arrow": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "template.format": {
                                    "variable_value": "<built-in method format of str object at 0x110a1b9f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f7f51755d90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "\"19:06:50.763660 call        28         def foo():\\n19:06:50.764267 line        29             a = 1\\nNew var:....... a = 1\\n19:06:50.765172 line        30             x = '\u5931\u8d25'\\nNew var:....... x = '\u5931\u8d25'\\n19:06:50.765512 line        31             return 7\\n19:06:50.765785 return      31             return 7\\nReturn value:.. 7\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "320"
                                },
                                "prefix": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OutputFailure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "any_mismatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entry": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entries": {
                                    "variable_value": "(CallEntry(prefix=''), LineEntry(prefix=''), VariableEntry(name='a', prefix=''), LineEntry(source=\"x = '\u5931\u8d25'\", prefix=''), VariableEntry(name='x', value=\"'\u5931\u8d25'\", prefix=''), LineEntry(prefix=''), ReturnEntry(prefix=''), ReturnValueEntry(value='7', prefix=''))",
                                    "variable_type": "tuple",
                                    "variable_shape": "8"
                                },
                                "mismatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entry.check": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arrow": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "template.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "lines": {
                                    "variable_value": "('19:06:50.763660 call        28         def foo():', '19:06:50.764267 line        29             a = 1', 'New var:....... a = 1', \"19:06:50.765172 line        30             x = '\u5931\u8d25'\", \"New var:....... x = '\u5931\u8d25'\", '19:06:50.765512 line        31             return 7', '19:06:50.765785 return      31             return 7', 'Return value:.. 7')",
                                    "variable_type": "tuple",
                                    "variable_shape": "8"
                                },
                                "output.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f7f51755d90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "\"19:06:50.763660 call        28         def foo():\\n19:06:50.764267 line        29             a = 1\\nNew var:....... a = 1\\n19:06:50.765172 line        30             x = '\u5931\u8d25'\\nNew var:....... x = '\u5931\u8d25'\\n19:06:50.765512 line        31             return 7\\n19:06:50.765785 return      31             return 7\\nReturn value:.. 7\\n\"",
                                    "variable_type": "str",
                                    "variable_shape": "320"
                                },
                                "prefix": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "'Return value:.. 7'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "line.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ebac580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "OutputFailure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "any_mismatch": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "'\\n19:06:50.763660 call        28         def foo():     CallEntry(prefix=\\'\\')  \\n19:06:50.764267 line        29             a = 1      LineEntry(prefix=\\'\\')  \\nNew var:....... a = 1                                 VariableEntry(name=\\'a\\', prefix=\\'\\')  \\n19:06:50.765172 line        30             x = \\'\u5931\u8d25\\'   LineEntry(source=\"x = \\'\u5931\u8d25\\'\", prefix=\\'\\')  \\nNew var:....... x = \\'\u5931\u8d25\\'                              VariableEntry(name=\\'x\\', value=\"\\'\u5931\u8d25\\'\", prefix=\\'\\')  \\n19:06:50.765512 line        31             return 7   LineEntry(prefix=\\'\\')  \\n19:06:50.765785 return      31             return 7   ReturnEntry(prefix=\\'\\')  \\nReturn value:.. 7                                     ReturnValueEntry(value=\\'7\\', prefix=\\'\\')  '",
                                    "variable_type": "str",
                                    "variable_shape": "697"
                                },
                                "template": {
                                    "variable_value": "'\\n{line!s:51}   {expected_entry}  {arrow}'",
                                    "variable_type": "str",
                                    "variable_shape": "40"
                                },
                                "expected_entry": {
                                    "variable_value": "ReturnValueEntry(value='7', prefix='')",
                                    "variable_type": "ReturnValueEntry",
                                    "variable_shape": null
                                },
                                "zip_longest": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expected_entries": {
                                    "variable_value": "(CallEntry(prefix=''), LineEntry(prefix=''), VariableEntry(name='a', prefix=''), LineEntry(source=\"x = '\u5931\u8d25'\", prefix=''), VariableEntry(name='x', value=\"'\u5931\u8d25'\", prefix=''), LineEntry(prefix=''), ReturnEntry(prefix=''), ReturnValueEntry(value='7', prefix=''))",
                                    "variable_type": "tuple",
                                    "variable_shape": "8"
                                },
                                "mismatch": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "expected_entry.check": {
                                    "variable_value": "<bound method _BaseValueEntry.check of ReturnValueEntry(value='7', prefix='')>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "arrow": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "template.format": {
                                    "variable_value": "<built-in method format of str object at 0x10eab4a50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "assert_sample_output",
                    "function_code": "def assert_sample_output(module):\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        module.main()\n        \n    time = '21:10:42.298924'\n    time_pattern = re.sub(r'\\d', r'\\\\d', time)\n\n    def normalise(out):\n        return re.sub(time_pattern, time, out).strip()\n\n    output = output_capturer.string_io.getvalue()\n\n    try:\n        assert (\n                normalise(output) ==\n                normalise(module.expected_output)\n        )\n    except AssertionError:\n        print('\\n\\nActual Output:\\n\\n' + output)  # to copy paste into expected_output\n        raise  # show pytest diff (may need -vv flag to see in full)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 272,
                    "end_line": 292,
                    "variables": {
                        "sys_tools.OutputCapturer": [
                            273
                        ],
                        "sys_tools": [
                            273
                        ],
                        "output_capturer": [
                            274,
                            283
                        ],
                        "module.main": [
                            275
                        ],
                        "module": [
                            288,
                            275
                        ],
                        "time": [
                            281,
                            277,
                            278
                        ],
                        "time_pattern": [
                            281,
                            278
                        ],
                        "re.sub": [
                            281,
                            278
                        ],
                        "re": [
                            281,
                            278
                        ],
                        "strip": [
                            281
                        ],
                        "out": [
                            281
                        ],
                        "output": [
                            291,
                            283,
                            287
                        ],
                        "output_capturer.string_io.getvalue": [
                            283
                        ],
                        "output_capturer.string_io": [
                            283
                        ],
                        "normalise": [
                            288,
                            287
                        ],
                        "module.expected_output": [
                            288
                        ],
                        "AssertionError": [
                            290
                        ],
                        "print": [
                            291
                        ]
                    },
                    "filtered_variables": {
                        "sys_tools.OutputCapturer": [
                            273
                        ],
                        "sys_tools": [
                            273
                        ],
                        "output_capturer": [
                            274,
                            283
                        ],
                        "module.main": [
                            275
                        ],
                        "module": [
                            288,
                            275
                        ],
                        "time": [
                            281,
                            277,
                            278
                        ],
                        "time_pattern": [
                            281,
                            278
                        ],
                        "re.sub": [
                            281,
                            278
                        ],
                        "re": [
                            281,
                            278
                        ],
                        "strip": [
                            281
                        ],
                        "out": [
                            281
                        ],
                        "output": [
                            291,
                            283,
                            287
                        ],
                        "output_capturer.string_io.getvalue": [
                            283
                        ],
                        "output_capturer.string_io": [
                            283
                        ],
                        "normalise": [
                            288,
                            287
                        ],
                        "module.expected_output": [
                            288
                        ]
                    },
                    "diff_line_number": 276,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_function_arguments(function, exclude=()):\n    try:\n        getfullargspec = inspect.getfullargspec\n    except AttributeError:\n        result = inspect.getargspec(function).args\n    else:\n        result = getfullargspec(function).args\n    for exclude_item in exclude:\n        result.remove(exclude_item)\n    return result",
                "def assert_output(output, expected_entries, prefix=None):\n    lines = tuple(filter(None, output.split('\\n')))\n\n    if prefix is not None:\n        for line in lines:\n            if not line.startswith(prefix):\n                raise OutputFailure(line)\n\n    any_mismatch = False\n    result = ''\n    template = '\\n{line!s:%s}   {expected_entry}  {arrow}' % max(map(len, lines))\n    for expected_entry, line in zip_longest(expected_entries, lines, fillvalue=\"\"):\n        mismatch = not (expected_entry and expected_entry.check(line))\n        any_mismatch |= mismatch\n        arrow = '<===' * mismatch\n        result += template.format(**locals())\n\n    if len(lines) != len(expected_entries):\n        result += '\\nOutput has {} lines, while we expect {} lines.'.format(\n                len(lines), len(expected_entries))\n\n    if any_mismatch:\n        raise OutputFailure(result)",
                "def assert_sample_output(module):\n    with sys_tools.OutputCapturer(stdout=False,\n                                  stderr=True) as output_capturer:\n        module.main()\n        \n    time = '21:10:42.298924'\n    time_pattern = re.sub(r'\\d', r'\\\\d', time)\n\n    def normalise(out):\n        return re.sub(time_pattern, time, out).strip()\n\n    output = output_capturer.string_io.getvalue()\n\n    try:\n        assert (\n                normalise(output) ==\n                normalise(module.expected_output)\n        )\n    except AssertionError:\n        print('\\n\\nActual Output:\\n\\n' + output)  # to copy paste into expected_output\n        raise  # show pytest diff (may need -vv flag to see in full)",
                "def __init__(self, prefix=''):\n    self.prefix = prefix",
                "@abc.abstractmethod\ndef check(self, s):\n    pass",
                "def __repr__(self):\n    init_arguments = get_function_arguments(self.__init__,\n                                            exclude=('self',))\n    attributes = {\n        key: repr(getattr(self, key)) for key in init_arguments\n                                          if getattr(self, key) is not None\n    }\n    return '%s(%s)' % (\n        type(self).__name__,\n        ', '.join('{key}={value}'.format(**locals()) for key, value\n                                                     in attributes.items())\n    )",
                "def __init__(self, prefix=''):\n    _BaseEntry.__init__(self, prefix=prefix)\n    self.line_pattern = re.compile(\n        r\"\"\"^%s(?P<indent>(?: {4})*)(?P<preamble>[^:]*):\"\"\"\n        r\"\"\"\\.{2,7} (?P<content>.*)$\"\"\" % (re.escape(self.prefix),)\n    )",
                "@abc.abstractmethod\ndef _check_preamble(self, preamble):\n    pass",
                "@abc.abstractmethod\ndef _check_content(self, preamble):\n    pass",
                "def check(self, s):\n    match = self.line_pattern.match(s)\n    if not match:\n        return False\n    _, preamble, content = match.groups()\n    return (self._check_preamble(preamble) and\n                                              self._check_content(content))",
                "def __init__(self, name=None, value=None, stage=None, prefix='',\n             name_regex=None, value_regex=None):\n    _BaseValueEntry.__init__(self, prefix=prefix)\n    if name is not None:\n        assert name_regex is None\n    if value is not None:\n        assert value_regex is None\n    assert stage in (None, 'starting', 'new', 'modified')\n\n    self.name = name\n    self.value = value\n    self.stage = stage\n    self.name_regex = (None if name_regex is None else\n                       re.compile(name_regex))\n    self.value_regex = (None if value_regex is None else\n                        re.compile(value_regex))",
                "def _check_preamble(self, preamble):\n    match = self._preamble_pattern.match(preamble)\n    if not match:\n        return False\n    stage = match.group('stage')\n    return self._check_stage(stage)",
                "def _check_content(self, content):\n    match = self._content_pattern.match(content)\n    if not match:\n        return False\n    name, value = match.groups()\n    return self._check_name(name) and self._check_value(value)",
                "def _check_name(self, name):\n    if self.name is not None:\n        return name == self.name\n    elif self.name_regex is not None:\n        return self.name_regex.match(name)\n    else:\n        return True",
                "def _check_value(self, value):\n    if self.value is not None:\n        return value == self.value\n    elif self.value_regex is not None:\n        return self.value_regex.match(value)\n    else:\n        return True",
                "def _check_stage(self, stage):\n    stage = stage.lower()\n    if self.stage is None:\n        return stage in ('starting', 'new', 'modified')\n    else:\n        return stage == self.stage",
                "def __init__(self, value=None, value_regex=None, prefix=''):\n    _BaseValueEntry.__init__(self, prefix=prefix)\n    if value is not None:\n        assert value_regex is None\n\n    self.value = value\n    self.value_regex = (None if value_regex is None else\n                        re.compile(value_regex))",
                "def _check_preamble(self, preamble):\n    return bool(self._preamble_pattern.match(preamble))",
                "def _check_content(self, content):\n    return self._check_value(content)",
                "def _check_value(self, value):\n    if self.value is not None:\n        return value == self.value\n    elif self.value_regex is not None:\n        return self.value_regex.match(value)\n    else:\n        return True",
                "def __init__(self, source=None, source_regex=None, thread_info=None,\n             thread_info_regex=None, prefix=''):\n    _BaseEntry.__init__(self, prefix=prefix)\n    if type(self) is _BaseEventEntry:\n        raise TypeError\n    if source is not None:\n        assert source_regex is None\n    self.line_pattern = re.compile(\n        r\"\"\"^%s(?P<indent>(?: {4})*)[0-9:.]{15} \"\"\"\n        r\"\"\"(?P<thread_info>[0-9]+-[0-9A-Za-z_-]+[ ]+)?\"\"\"\n        r\"\"\"(?P<event_name>[a-z_]*) +(?P<line_number>[0-9]*) \"\"\"\n        r\"\"\"+(?P<source>.*)$\"\"\" % (re.escape(self.prefix,))\n    )\n\n    self.source = source\n    self.source_regex = (None if source_regex is None else\n                         re.compile(source_regex))\n    self.thread_info = thread_info\n    self.thread_info_regex = (None if thread_info_regex is None else\n                         re.compile(thread_info_regex))",
                "@caching.CachedProperty\ndef event_name(self):\n    return re.match('^[A-Z][a-z_]*', type(self).__name__).group(0).lower()",
                "def _check_source(self, source):\n    if self.source is not None:\n        return source == self.source\n    elif self.source_regex is not None:\n        return self.source_regex.match(source)\n    else:\n        return True",
                "def _check_thread_info(self, thread_info):\n    if self.thread_info is not None:\n        return thread_info == self.thread_info\n    elif self.thread_info_regex is not None:\n        return self.thread_info_regex.match(thread_info)\n    else:\n        return True",
                "def check(self, s):\n    match = self.line_pattern.match(s)\n    if not match:\n        return False\n    _, thread_info, event_name, _, source = match.groups()\n    return (event_name == self.event_name and\n            self._check_source(source) and\n            self._check_thread_info(thread_info))",
                "def normalise(out):\n    return re.sub(time_pattern, time, out).strip()"
            ],
            "inscope_function_signatures": [
                "get_function_arguments(function, exclude=())",
                "assert_output(output, expected_entries, prefix=None)",
                "assert_sample_output(module)",
                "__init__(self, prefix='')",
                "check(self, s)",
                "__repr__(self)",
                "__init__(self, prefix='')",
                "_check_preamble(self, preamble)",
                "_check_content(self, preamble)",
                "check(self, s)",
                "__init__(self, name=None, value=None, stage=None, prefix='', name_regex=None, value_regex=None)",
                "_check_preamble(self, preamble)",
                "_check_content(self, content)",
                "_check_name(self, name)",
                "_check_value(self, value)",
                "_check_stage(self, stage)",
                "__init__(self, value=None, value_regex=None, prefix='')",
                "_check_preamble(self, preamble)",
                "_check_content(self, content)",
                "_check_value(self, value)",
                "__init__(self, source=None, source_regex=None, thread_info=None, thread_info_regex=None, prefix='')",
                "event_name(self)",
                "_check_source(self, source)",
                "_check_thread_info(self, thread_info)",
                "check(self, s)",
                "normalise(out)"
            ],
            "variables_in_file": {
                "ImportError": [
                    10
                ],
                "getfullargspec": [
                    24,
                    20
                ],
                "inspect.getfullargspec": [
                    20
                ],
                "inspect": [
                    20,
                    22
                ],
                "AttributeError": [
                    21
                ],
                "result": [
                    256,
                    262,
                    265,
                    269,
                    22,
                    24,
                    26,
                    27
                ],
                "args": [
                    24,
                    22
                ],
                "inspect.getargspec": [
                    22
                ],
                "function": [
                    24,
                    22
                ],
                "exclude_item": [
                    25,
                    26
                ],
                "exclude": [
                    25
                ],
                "result.remove": [
                    26
                ],
                "pysnooper.pycompat.ABC": [
                    30
                ],
                "pysnooper.pycompat": [
                    30
                ],
                "pysnooper": [
                    30
                ],
                "self.prefix": [
                    32,
                    58,
                    183
                ],
                "self": [
                    128,
                    129,
                    130,
                    136,
                    139,
                    144,
                    148,
                    149,
                    157,
                    32,
                    160,
                    163,
                    164,
                    165,
                    166,
                    39,
                    42,
                    43,
                    46,
                    174,
                    175,
                    179,
                    55,
                    56,
                    183,
                    58,
                    186,
                    187,
                    189,
                    190,
                    195,
                    70,
                    198,
                    199,
                    200,
                    74,
                    75,
                    201,
                    206,
                    207,
                    208,
                    81,
                    209,
                    214,
                    88,
                    89,
                    90,
                    91,
                    218,
                    93,
                    219,
                    220,
                    101,
                    105,
                    112,
                    116,
                    119,
                    120,
                    121,
                    122,
                    127
                ],
                "prefix": [
                    32,
                    174,
                    144,
                    81,
                    55,
                    250,
                    252
                ],
                "abc.abstractmethod": [
                    65,
                    34,
                    61
                ],
                "abc": [
                    65,
                    34,
                    61
                ],
                "init_arguments": [
                    42,
                    39
                ],
                "get_function_arguments": [
                    39
                ],
                "self.__init__": [
                    39
                ],
                "attributes": [
                    48,
                    41
                ],
                "key": [
                    42,
                    43,
                    47
                ],
                "repr": [
                    42
                ],
                "getattr": [
                    42,
                    43
                ],
                "__name__": [
                    195,
                    46
                ],
                "type": [
                    195,
                    46,
                    175
                ],
                "join": [
                    47
                ],
                "format": [
                    265,
                    47
                ],
                "locals": [
                    262,
                    47
                ],
                "value": [
                    128,
                    130,
                    164,
                    166,
                    47,
                    145,
                    115,
                    116,
                    84,
                    148,
                    89
                ],
                "attributes.items": [
                    48
                ],
                "_BaseEntry": [
                    171,
                    53,
                    174,
                    55
                ],
                "_BaseEntry.__init__": [
                    174,
                    55
                ],
                "self.line_pattern": [
                    56,
                    179,
                    214,
                    70
                ],
                "re.compile": [
                    96,
                    107,
                    188,
                    179,
                    150,
                    56,
                    92,
                    152,
                    94,
                    191
                ],
                "re": [
                    96,
                    195,
                    281,
                    107,
                    188,
                    179,
                    150,
                    183,
                    56,
                    278,
                    58,
                    92,
                    152,
                    94,
                    191
                ],
                "re.escape": [
                    58,
                    183
                ],
                "match": [
                    101,
                    102,
                    70,
                    71,
                    73,
                    104,
                    112,
                    113,
                    115,
                    214,
                    215,
                    217
                ],
                "self.line_pattern.match": [
                    214,
                    70
                ],
                "s": [
                    214,
                    70
                ],
                "_": [
                    73,
                    217
                ],
                "preamble": [
                    73,
                    74,
                    101,
                    157
                ],
                "content": [
                    112,
                    73,
                    75,
                    160
                ],
                "match.groups": [
                    73,
                    115,
                    217
                ],
                "self._check_preamble": [
                    74
                ],
                "self._check_content": [
                    75
                ],
                "_BaseValueEntry": [
                    144,
                    81,
                    142,
                    78
                ],
                "_BaseValueEntry.__init__": [
                    144,
                    81
                ],
                "name": [
                    82,
                    115,
                    116,
                    88,
                    122,
                    120
                ],
                "name_regex": [
                    91,
                    83,
                    92
                ],
                "value_regex": [
                    146,
                    85,
                    149,
                    150,
                    93,
                    94
                ],
                "stage": [
                    135,
                    104,
                    105,
                    137,
                    139,
                    86,
                    90
                ],
                "self.name": [
                    88,
                    120,
                    119
                ],
                "self.value": [
                    128,
                    163,
                    164,
                    148,
                    89,
                    127
                ],
                "self.stage": [
                    136,
                    90,
                    139
                ],
                "self.name_regex": [
                    121,
                    122,
                    91
                ],
                "self.value_regex": [
                    129,
                    130,
                    165,
                    166,
                    149,
                    93
                ],
                "_preamble_pattern": [
                    96,
                    152
                ],
                "self._preamble_pattern.match": [
                    101,
                    157
                ],
                "self._preamble_pattern": [
                    101,
                    157
                ],
                "match.group": [
                    104
                ],
                "self._check_stage": [
                    105
                ],
                "_content_pattern": [
                    107
                ],
                "self._content_pattern.match": [
                    112
                ],
                "self._content_pattern": [
                    112
                ],
                "self._check_name": [
                    116
                ],
                "self._check_value": [
                    160,
                    116
                ],
                "self.name_regex.match": [
                    122
                ],
                "self.value_regex.match": [
                    130,
                    166
                ],
                "stage.lower": [
                    135
                ],
                "bool": [
                    157
                ],
                "_BaseEventEntry": [
                    227,
                    231,
                    235,
                    175,
                    239,
                    223
                ],
                "TypeError": [
                    176
                ],
                "source": [
                    199,
                    201,
                    177,
                    217,
                    186,
                    219
                ],
                "source_regex": [
                    178,
                    187,
                    188
                ],
                "self.source": [
                    186,
                    198,
                    199
                ],
                "self.source_regex": [
                    200,
                    201,
                    187
                ],
                "self.thread_info": [
                    189,
                    206,
                    207
                ],
                "thread_info": [
                    207,
                    209,
                    217,
                    220,
                    189
                ],
                "self.thread_info_regex": [
                    208,
                    209,
                    190
                ],
                "thread_info_regex": [
                    190,
                    191
                ],
                "lower": [
                    195
                ],
                "group": [
                    195
                ],
                "re.match": [
                    195
                ],
                "caching.CachedProperty": [
                    193
                ],
                "caching": [
                    193
                ],
                "self.source_regex.match": [
                    201
                ],
                "self.thread_info_regex.match": [
                    209
                ],
                "event_name": [
                    217,
                    218
                ],
                "self.event_name": [
                    218
                ],
                "self._check_source": [
                    219
                ],
                "self._check_thread_info": [
                    220
                ],
                "Exception": [
                    243
                ],
                "lines": [
                    257,
                    258,
                    264,
                    266,
                    248,
                    251
                ],
                "tuple": [
                    248
                ],
                "filter": [
                    248
                ],
                "output.split": [
                    248
                ],
                "output": [
                    248,
                    291,
                    283,
                    287
                ],
                "line": [
                    258,
                    259,
                    251,
                    252,
                    253
                ],
                "line.startswith": [
                    252
                ],
                "OutputFailure": [
                    269,
                    253
                ],
                "any_mismatch": [
                    260,
                    268,
                    255
                ],
                "template": [
                    257,
                    262
                ],
                "max": [
                    257
                ],
                "map": [
                    257
                ],
                "len": [
                    264,
                    257,
                    266
                ],
                "expected_entry": [
                    258,
                    259
                ],
                "zip_longest": [
                    258
                ],
                "expected_entries": [
                    264,
                    258,
                    266
                ],
                "mismatch": [
                    259,
                    260,
                    261
                ],
                "expected_entry.check": [
                    259
                ],
                "arrow": [
                    261
                ],
                "template.format": [
                    262
                ],
                "sys_tools.OutputCapturer": [
                    273
                ],
                "sys_tools": [
                    273
                ],
                "output_capturer": [
                    274,
                    283
                ],
                "module.main": [
                    275
                ],
                "module": [
                    288,
                    275
                ],
                "time": [
                    281,
                    277,
                    278
                ],
                "time_pattern": [
                    281,
                    278
                ],
                "re.sub": [
                    281,
                    278
                ],
                "strip": [
                    281
                ],
                "out": [
                    281
                ],
                "output_capturer.string_io.getvalue": [
                    283
                ],
                "output_capturer.string_io": [
                    283
                ],
                "normalise": [
                    288,
                    287
                ],
                "module.expected_output": [
                    288
                ],
                "AssertionError": [
                    290
                ],
                "print": [
                    291
                ]
            },
            "filtered_variables_in_file": {
                "getfullargspec": [
                    24,
                    20
                ],
                "inspect.getfullargspec": [
                    20
                ],
                "inspect": [
                    20,
                    22
                ],
                "result": [
                    256,
                    262,
                    265,
                    269,
                    22,
                    24,
                    26,
                    27
                ],
                "args": [
                    24,
                    22
                ],
                "inspect.getargspec": [
                    22
                ],
                "function": [
                    24,
                    22
                ],
                "exclude_item": [
                    25,
                    26
                ],
                "exclude": [
                    25
                ],
                "result.remove": [
                    26
                ],
                "pysnooper.pycompat.ABC": [
                    30
                ],
                "pysnooper.pycompat": [
                    30
                ],
                "pysnooper": [
                    30
                ],
                "self.prefix": [
                    32,
                    58,
                    183
                ],
                "self": [
                    128,
                    129,
                    130,
                    136,
                    139,
                    144,
                    148,
                    149,
                    157,
                    32,
                    160,
                    163,
                    164,
                    165,
                    166,
                    39,
                    42,
                    43,
                    46,
                    174,
                    175,
                    179,
                    55,
                    56,
                    183,
                    58,
                    186,
                    187,
                    189,
                    190,
                    195,
                    70,
                    198,
                    199,
                    200,
                    74,
                    75,
                    201,
                    206,
                    207,
                    208,
                    81,
                    209,
                    214,
                    88,
                    89,
                    90,
                    91,
                    218,
                    93,
                    219,
                    220,
                    101,
                    105,
                    112,
                    116,
                    119,
                    120,
                    121,
                    122,
                    127
                ],
                "prefix": [
                    32,
                    174,
                    144,
                    81,
                    55,
                    250,
                    252
                ],
                "abc.abstractmethod": [
                    65,
                    34,
                    61
                ],
                "abc": [
                    65,
                    34,
                    61
                ],
                "init_arguments": [
                    42,
                    39
                ],
                "get_function_arguments": [
                    39
                ],
                "self.__init__": [
                    39
                ],
                "attributes": [
                    48,
                    41
                ],
                "key": [
                    42,
                    43,
                    47
                ],
                "join": [
                    47
                ],
                "value": [
                    128,
                    130,
                    164,
                    166,
                    47,
                    145,
                    115,
                    116,
                    84,
                    148,
                    89
                ],
                "attributes.items": [
                    48
                ],
                "_BaseEntry": [
                    171,
                    53,
                    174,
                    55
                ],
                "_BaseEntry.__init__": [
                    174,
                    55
                ],
                "self.line_pattern": [
                    56,
                    179,
                    214,
                    70
                ],
                "re.compile": [
                    96,
                    107,
                    188,
                    179,
                    150,
                    56,
                    92,
                    152,
                    94,
                    191
                ],
                "re": [
                    96,
                    195,
                    281,
                    107,
                    188,
                    179,
                    150,
                    183,
                    56,
                    278,
                    58,
                    92,
                    152,
                    94,
                    191
                ],
                "re.escape": [
                    58,
                    183
                ],
                "match": [
                    101,
                    102,
                    70,
                    71,
                    73,
                    104,
                    112,
                    113,
                    115,
                    214,
                    215,
                    217
                ],
                "self.line_pattern.match": [
                    214,
                    70
                ],
                "s": [
                    214,
                    70
                ],
                "_": [
                    73,
                    217
                ],
                "preamble": [
                    73,
                    74,
                    101,
                    157
                ],
                "content": [
                    112,
                    73,
                    75,
                    160
                ],
                "match.groups": [
                    73,
                    115,
                    217
                ],
                "self._check_preamble": [
                    74
                ],
                "self._check_content": [
                    75
                ],
                "_BaseValueEntry": [
                    144,
                    81,
                    142,
                    78
                ],
                "_BaseValueEntry.__init__": [
                    144,
                    81
                ],
                "name": [
                    82,
                    115,
                    116,
                    88,
                    122,
                    120
                ],
                "name_regex": [
                    91,
                    83,
                    92
                ],
                "value_regex": [
                    146,
                    85,
                    149,
                    150,
                    93,
                    94
                ],
                "stage": [
                    135,
                    104,
                    105,
                    137,
                    139,
                    86,
                    90
                ],
                "self.name": [
                    88,
                    120,
                    119
                ],
                "self.value": [
                    128,
                    163,
                    164,
                    148,
                    89,
                    127
                ],
                "self.stage": [
                    136,
                    90,
                    139
                ],
                "self.name_regex": [
                    121,
                    122,
                    91
                ],
                "self.value_regex": [
                    129,
                    130,
                    165,
                    166,
                    149,
                    93
                ],
                "_preamble_pattern": [
                    96,
                    152
                ],
                "self._preamble_pattern.match": [
                    101,
                    157
                ],
                "self._preamble_pattern": [
                    101,
                    157
                ],
                "match.group": [
                    104
                ],
                "self._check_stage": [
                    105
                ],
                "_content_pattern": [
                    107
                ],
                "self._content_pattern.match": [
                    112
                ],
                "self._content_pattern": [
                    112
                ],
                "self._check_name": [
                    116
                ],
                "self._check_value": [
                    160,
                    116
                ],
                "self.name_regex.match": [
                    122
                ],
                "self.value_regex.match": [
                    130,
                    166
                ],
                "stage.lower": [
                    135
                ],
                "_BaseEventEntry": [
                    227,
                    231,
                    235,
                    175,
                    239,
                    223
                ],
                "source": [
                    199,
                    201,
                    177,
                    217,
                    186,
                    219
                ],
                "source_regex": [
                    178,
                    187,
                    188
                ],
                "self.source": [
                    186,
                    198,
                    199
                ],
                "self.source_regex": [
                    200,
                    201,
                    187
                ],
                "self.thread_info": [
                    189,
                    206,
                    207
                ],
                "thread_info": [
                    207,
                    209,
                    217,
                    220,
                    189
                ],
                "self.thread_info_regex": [
                    208,
                    209,
                    190
                ],
                "thread_info_regex": [
                    190,
                    191
                ],
                "lower": [
                    195
                ],
                "group": [
                    195
                ],
                "re.match": [
                    195
                ],
                "caching.CachedProperty": [
                    193
                ],
                "caching": [
                    193
                ],
                "self.source_regex.match": [
                    201
                ],
                "self.thread_info_regex.match": [
                    209
                ],
                "event_name": [
                    217,
                    218
                ],
                "self.event_name": [
                    218
                ],
                "self._check_source": [
                    219
                ],
                "self._check_thread_info": [
                    220
                ],
                "lines": [
                    257,
                    258,
                    264,
                    266,
                    248,
                    251
                ],
                "output.split": [
                    248
                ],
                "output": [
                    248,
                    291,
                    283,
                    287
                ],
                "line": [
                    258,
                    259,
                    251,
                    252,
                    253
                ],
                "line.startswith": [
                    252
                ],
                "OutputFailure": [
                    269,
                    253
                ],
                "any_mismatch": [
                    260,
                    268,
                    255
                ],
                "template": [
                    257,
                    262
                ],
                "expected_entry": [
                    258,
                    259
                ],
                "zip_longest": [
                    258
                ],
                "expected_entries": [
                    264,
                    258,
                    266
                ],
                "mismatch": [
                    259,
                    260,
                    261
                ],
                "expected_entry.check": [
                    259
                ],
                "arrow": [
                    261
                ],
                "template.format": [
                    262
                ],
                "sys_tools.OutputCapturer": [
                    273
                ],
                "sys_tools": [
                    273
                ],
                "output_capturer": [
                    274,
                    283
                ],
                "module.main": [
                    275
                ],
                "module": [
                    288,
                    275
                ],
                "time": [
                    281,
                    277,
                    278
                ],
                "time_pattern": [
                    281,
                    278
                ],
                "re.sub": [
                    281,
                    278
                ],
                "strip": [
                    281
                ],
                "out": [
                    281
                ],
                "output_capturer.string_io.getvalue": [
                    283
                ],
                "output_capturer.string_io": [
                    283
                ],
                "normalise": [
                    288,
                    287
                ],
                "module.expected_output": [
                    288
                ]
            }
        },
        "test_data": []
    }
}