{
    "matplotlib": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 326,
            "file_name": "lib/matplotlib/path.py",
            "replace_code": "def make_compound_path(cls, *args):\n    import numpy as np\n    \"\"\"Make a compound path from a list of Path objects.\"\"\"\n    import numpy as np  # import numpy here if not already imported\n    # Handle an empty list in args (i.e. no args).\n    if not args:\n        return Path(np.empty([0, 2], dtype=np.float32))\n    \n    all_vertices = []\n    all_codes = []\n    last_vert = None\n    for path in args:\n        if last_vert is not None:\n            # For closing the path, add the last vertex\n            all_codes.append(cls.LINETO)\n            all_vertices.append(last_vert)\n    \n        vertices = path.vertices\n        codes = path.codes\n        if codes is None:\n            codes = np.array([cls.MOVETO] + [cls.LINETO] * (len(vertices)-1))\n        all_vertices.extend(vertices)\n        all_codes.extend(codes)\n        last_vert = vertices[-1]  # Keep track of the last vertex for closing the path\n    \n    return Path(np.array(all_vertices), np.array(all_codes, dtype=cls.code_type))"
        }
    ]
}