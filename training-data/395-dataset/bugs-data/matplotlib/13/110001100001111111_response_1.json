{
    "matplotlib": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 326,
            "file_name": "/lib/matplotlib/path.py",
            "replace_code": "def make_compound_path(cls, *args):\n\n    \"\"\"Make a compound path from a list of Path objects.\"\"\"\n    if not args:\n        return Path(np.empty([0, 2], dtype=np.float32))\n    \n    all_vertices = []\n    all_codes = []\n    cursor = 0\n    for path in args:\n        if path.vertices.size > 0:\n            all_vertices.append(path.vertices)\n            if path.codes is not None:\n                if path.codes[-1] == cls.STOP:\n                    all_codes.append(path.codes[:-1] + cursor)\n                else:\n                    all_codes.append(path.codes + cursor)\n            else:\n                path_length = len(path.vertices)\n                all_codes.append(np.hstack([cls.MOVETO, np.full(path_length - 1, cls.LINETO)]) + cursor)\n            cursor += len(path.vertices)\n    \n    vertices = np.concatenate(all_vertices)\n    codes = np.concatenate(all_codes)\n    \n    return cls(vertices, codes)"
        }
    ]
}