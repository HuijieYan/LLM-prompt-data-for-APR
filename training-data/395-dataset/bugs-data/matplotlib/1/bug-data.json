{
    "matplotlib:1": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_1/lib/matplotlib/backend_bases.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_renderer",
                    "function_code": "def _get_renderer(figure, print_method=None, *, draw_disabled=False):\n    \"\"\"\n    Get the renderer that would be used to save a `~.Figure`, and cache it on\n    the figure.\n\n    If *draw_disabled* is True, additionally replace drawing methods on\n    *renderer* by no-ops.  This is used by the tight-bbox-saving renderer,\n    which needs to walk through the artist tree to compute the tight-bbox, but\n    for which the output file may be closed early.\n    \"\"\"\n    # This is implemented by triggering a draw, then immediately jumping out of\n    # Figure.draw() by raising an exception.\n\n    class Done(Exception):\n        pass\n\n    def _draw(renderer): raise Done(renderer)\n\n    with cbook._setattr_cm(figure, draw=_draw):\n        if print_method is None:\n            fmt = figure.canvas.get_default_filetype()\n            print_method = getattr(figure.canvas, f\"print_{fmt}\")\n        try:\n            print_method(io.BytesIO(), dpi=figure.dpi)\n        except Done as exc:\n            renderer, = figure._cachedRenderer, = exc.args\n\n    if draw_disabled:\n        for meth_name in dir(RendererBase):\n            if (meth_name.startswith(\"draw_\")\n                    or meth_name in [\"open_group\", \"close_group\"]):\n                setattr(renderer, meth_name, lambda *args, **kwargs: None)\n\n    return renderer\n",
                    "decorators": [],
                    "docstring": "Get the renderer that would be used to save a `~.Figure`, and cache it on\nthe figure.\n\nIf *draw_disabled* is True, additionally replace drawing methods on\n*renderer* by no-ops.  This is used by the tight-bbox-saving renderer,\nwhich needs to walk through the artist tree to compute the tight-bbox, but\nfor which the output file may be closed early.",
                    "start_line": 1505,
                    "end_line": 1538,
                    "variables": {
                        "Exception": [
                            1518
                        ],
                        "Done": [
                            1521,
                            1529
                        ],
                        "renderer": [
                            1536,
                            1521,
                            1530,
                            1538
                        ],
                        "cbook._setattr_cm": [
                            1523
                        ],
                        "cbook": [
                            1523
                        ],
                        "figure": [
                            1523,
                            1525,
                            1526,
                            1528,
                            1530
                        ],
                        "_draw": [
                            1523
                        ],
                        "print_method": [
                            1528,
                            1524,
                            1526
                        ],
                        "fmt": [
                            1525,
                            1526
                        ],
                        "figure.canvas.get_default_filetype": [
                            1525
                        ],
                        "figure.canvas": [
                            1525,
                            1526
                        ],
                        "getattr": [
                            1526
                        ],
                        "io.BytesIO": [
                            1528
                        ],
                        "io": [
                            1528
                        ],
                        "figure.dpi": [
                            1528
                        ],
                        "figure._cachedRenderer": [
                            1530
                        ],
                        "exc.args": [
                            1530
                        ],
                        "exc": [
                            1530
                        ],
                        "draw_disabled": [
                            1532
                        ],
                        "meth_name": [
                            1536,
                            1533,
                            1534,
                            1535
                        ],
                        "dir": [
                            1533
                        ],
                        "RendererBase": [
                            1533
                        ],
                        "meth_name.startswith": [
                            1534
                        ],
                        "setattr": [
                            1536
                        ]
                    },
                    "filtered_variables": {
                        "Done": [
                            1521,
                            1529
                        ],
                        "renderer": [
                            1536,
                            1521,
                            1530,
                            1538
                        ],
                        "cbook._setattr_cm": [
                            1523
                        ],
                        "cbook": [
                            1523
                        ],
                        "figure": [
                            1523,
                            1525,
                            1526,
                            1528,
                            1530
                        ],
                        "_draw": [
                            1523
                        ],
                        "print_method": [
                            1528,
                            1524,
                            1526
                        ],
                        "fmt": [
                            1525,
                            1526
                        ],
                        "figure.canvas.get_default_filetype": [
                            1525
                        ],
                        "figure.canvas": [
                            1525,
                            1526
                        ],
                        "io.BytesIO": [
                            1528
                        ],
                        "io": [
                            1528
                        ],
                        "figure.dpi": [
                            1528
                        ],
                        "figure._cachedRenderer": [
                            1530
                        ],
                        "exc.args": [
                            1530
                        ],
                        "exc": [
                            1530
                        ],
                        "draw_disabled": [
                            1532
                        ],
                        "meth_name": [
                            1536,
                            1533,
                            1534,
                            1535
                        ],
                        "RendererBase": [
                            1533
                        ],
                        "meth_name.startswith": [
                            1534
                        ]
                    },
                    "diff_line_number": 1505,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "_draw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": "functools.partial(<bound method FigureCanvasAgg.print_png of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10baef220>>, orientation='portrait')",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "fmt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.canvas.get_default_filetype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "figure.canvas": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10baef220>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.dpi": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "figure._cachedRenderer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "exc.args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "draw_disabled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "meth_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RendererBase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meth_name.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Done": {
                                    "variable_value": "<class 'matplotlib.backend_bases._get_renderer.<locals>.Done'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x10bb678b0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "_draw": {
                                    "variable_value": "<function _get_renderer.<locals>._draw at 0x10bb5e8b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": "functools.partial(<bound method FigureCanvasAgg.print_png of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10baef220>>, orientation='portrait')",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "fmt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.canvas.get_default_filetype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "figure.canvas": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10baef220>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.dpi": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "figure._cachedRenderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x10bb678b0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "exc.args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "draw_disabled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "meth_name": {
                                    "variable_value": "'stop_rasterizing'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "RendererBase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meth_name.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ac6f4e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "_draw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": "functools.partial(<bound method FigureCanvasAgg.print_png of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11186c580>>, orientation='portrait')",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "fmt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.canvas.get_default_filetype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "figure.canvas": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11186c580>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.dpi": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "figure._cachedRenderer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "exc.args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Done": {
                                    "variable_value": "<class 'matplotlib.backend_bases._get_renderer.<locals>.Done'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x1118eb9a0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "_draw": {
                                    "variable_value": "<function _get_renderer.<locals>._draw at 0x1118f05e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": "functools.partial(<bound method FigureCanvasAgg.print_png of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11186c580>>, orientation='portrait')",
                                    "variable_type": "partial",
                                    "variable_shape": null
                                },
                                "fmt": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.canvas.get_default_filetype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "figure.canvas": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11186c580>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "io.BytesIO": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "io": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "figure.dpi": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "figure._cachedRenderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x1118eb9a0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "exc.args": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "print_figure",
                    "function_code": "def print_figure(\n        self, filename, dpi=None, facecolor=None, edgecolor=None,\n        orientation='portrait', format=None, *,\n        bbox_inches=None, pad_inches=None, bbox_extra_artists=None,\n        backend=None, **kwargs):\n    \"\"\"\n    Render the figure to hardcopy. Set the figure patch face and edge\n    colors.  This is useful because some of the GUIs have a gray figure\n    face color background and you'll probably want to override this on\n    hardcopy.\n\n    Parameters\n    ----------\n    filename : str or path-like or file-like\n        The file where the figure is saved.\n\n    dpi : float, default: :rc:`savefig.dpi`\n        The dots per inch to save the figure in.\n\n    facecolor : color or 'auto', default: :rc:`savefig.facecolor`\n        The facecolor of the figure.  If 'auto', use the current figure\n        facecolor.\n\n    edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`\n        The edgecolor of the figure.  If 'auto', use the current figure\n        edgecolor.\n\n    orientation : {'landscape', 'portrait'}, default: 'portrait'\n        Only currently applies to PostScript printing.\n\n    format : str, optional\n        Force a specific file format. If not given, the format is inferred\n        from the *filename* extension, and if that fails from\n        :rc:`savefig.format`.\n\n    bbox_inches : 'tight' or `.Bbox`, default: :rc:`savefig.bbox`\n        Bounding box in inches: only the given portion of the figure is\n        saved.  If 'tight', try to figure out the tight bbox of the figure.\n\n    pad_inches : float, default: :rc:`savefig.pad_inches`\n        Amount of padding around the figure when *bbox_inches* is 'tight'.\n\n    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n        A list of extra artists that will be considered when the\n        tight bbox is calculated.\n\n    backend : str, optional\n        Use a non-default backend to render the file, e.g. to render a\n        png file with the \"cairo\" backend rather than the default \"agg\",\n        or a pdf file with the \"pgf\" backend rather than the default\n        \"pdf\".  Note that the default backend is normally sufficient.  See\n        :ref:`the-builtin-backends` for a list of valid backends for each\n        file format.  Custom backends can be referenced as \"module://...\".\n    \"\"\"\n    if format is None:\n        # get format from filename, or from backend's default filetype\n        if isinstance(filename, os.PathLike):\n            filename = os.fspath(filename)\n        if isinstance(filename, str):\n            format = os.path.splitext(filename)[1][1:]\n        if format is None or format == '':\n            format = self.get_default_filetype()\n            if isinstance(filename, str):\n                filename = filename.rstrip('.') + '.' + format\n    format = format.lower()\n\n    # get canvas object and print method for format\n    canvas = self._get_output_canvas(backend, format)\n    print_method = getattr(canvas, 'print_%s' % format)\n\n    if dpi is None:\n        dpi = rcParams['savefig.dpi']\n    if dpi == 'figure':\n        dpi = getattr(self.figure, '_original_dpi', self.figure.dpi)\n\n    # Remove the figure manager, if any, to avoid resizing the GUI widget.\n    # Some code (e.g. Figure.show) differentiates between having *no*\n    # manager and a *None* manager, which should be fixed at some point,\n    # but this should be fine.\n    with cbook._setattr_cm(self, _is_saving=True, manager=None), \\\n            cbook._setattr_cm(self.figure, dpi=dpi):\n        origfacecolor = self.figure.get_facecolor()\n        origedgecolor = self.figure.get_edgecolor()\n\n        if facecolor is None:\n            facecolor = rcParams['savefig.facecolor']\n        if cbook._str_equal(facecolor, 'auto'):\n            facecolor = origfacecolor\n        if edgecolor is None:\n            edgecolor = rcParams['savefig.edgecolor']\n        if cbook._str_equal(edgecolor, 'auto'):\n            edgecolor = origedgecolor\n\n        self.figure.set_facecolor(facecolor)\n        self.figure.set_edgecolor(edgecolor)\n\n        if bbox_inches is None:\n            bbox_inches = rcParams['savefig.bbox']\n        if bbox_inches:\n            if bbox_inches == \"tight\":\n                renderer = _get_renderer(\n                    self.figure,\n                    functools.partial(\n                        print_method, orientation=orientation),\n                    draw_disabled=True)\n                self.figure.draw(renderer)\n                bbox_inches = self.figure.get_tightbbox(\n                    renderer, bbox_extra_artists=bbox_extra_artists)\n                if pad_inches is None:\n                    pad_inches = rcParams['savefig.pad_inches']\n                bbox_inches = bbox_inches.padded(pad_inches)\n\n            # call adjust_bbox to save only the given area\n            restore_bbox = tight_bbox.adjust_bbox(self.figure, bbox_inches,\n                                                  canvas.fixed_dpi)\n\n            _bbox_inches_restore = (bbox_inches, restore_bbox)\n        else:\n            _bbox_inches_restore = None\n\n        try:\n            result = print_method(\n                filename,\n                dpi=dpi,\n                facecolor=facecolor,\n                edgecolor=edgecolor,\n                orientation=orientation,\n                bbox_inches_restore=_bbox_inches_restore,\n                **kwargs)\n        finally:\n            if bbox_inches and restore_bbox:\n                restore_bbox()\n\n            self.figure.set_facecolor(origfacecolor)\n            self.figure.set_edgecolor(origedgecolor)\n            self.figure.set_canvas(self)\n        return result\n",
                    "decorators": [],
                    "docstring": "Render the figure to hardcopy. Set the figure patch face and edge\ncolors.  This is useful because some of the GUIs have a gray figure\nface color background and you'll probably want to override this on\nhardcopy.\n\nParameters\n----------\nfilename : str or path-like or file-like\n    The file where the figure is saved.\n\ndpi : float, default: :rc:`savefig.dpi`\n    The dots per inch to save the figure in.\n\nfacecolor : color or 'auto', default: :rc:`savefig.facecolor`\n    The facecolor of the figure.  If 'auto', use the current figure\n    facecolor.\n\nedgecolor : color or 'auto', default: :rc:`savefig.edgecolor`\n    The edgecolor of the figure.  If 'auto', use the current figure\n    edgecolor.\n\norientation : {'landscape', 'portrait'}, default: 'portrait'\n    Only currently applies to PostScript printing.\n\nformat : str, optional\n    Force a specific file format. If not given, the format is inferred\n    from the *filename* extension, and if that fails from\n    :rc:`savefig.format`.\n\nbbox_inches : 'tight' or `.Bbox`, default: :rc:`savefig.bbox`\n    Bounding box in inches: only the given portion of the figure is\n    saved.  If 'tight', try to figure out the tight bbox of the figure.\n\npad_inches : float, default: :rc:`savefig.pad_inches`\n    Amount of padding around the figure when *bbox_inches* is 'tight'.\n\nbbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n    A list of extra artists that will be considered when the\n    tight bbox is calculated.\n\nbackend : str, optional\n    Use a non-default backend to render the file, e.g. to render a\n    png file with the \"cairo\" backend rather than the default \"agg\",\n    or a pdf file with the \"pgf\" backend rather than the default\n    \"pdf\".  Note that the default backend is normally sufficient.  See\n    :ref:`the-builtin-backends` for a list of valid backends for each\n    file format.  Custom backends can be referenced as \"module://...\".",
                    "start_line": 1993,
                    "end_line": 2129,
                    "variables": {
                        "format": [
                            2052,
                            2053,
                            2054,
                            2056,
                            2057,
                            2060,
                            2061,
                            2047
                        ],
                        "isinstance": [
                            2049,
                            2051,
                            2055
                        ],
                        "filename": [
                            2049,
                            2050,
                            2051,
                            2052,
                            2115,
                            2055,
                            2056
                        ],
                        "os.PathLike": [
                            2049
                        ],
                        "os": [
                            2049,
                            2050,
                            2052
                        ],
                        "os.fspath": [
                            2050
                        ],
                        "str": [
                            2051,
                            2055
                        ],
                        "os.path.splitext": [
                            2052
                        ],
                        "os.path": [
                            2052
                        ],
                        "self.get_default_filetype": [
                            2054
                        ],
                        "self": [
                            2106,
                            2054,
                            2086,
                            2087,
                            2060,
                            2094,
                            2126,
                            2127,
                            2128,
                            2066,
                            2098,
                            2099,
                            2072,
                            2073,
                            2074,
                            2075
                        ],
                        "filename.rstrip": [
                            2056
                        ],
                        "format.lower": [
                            2057
                        ],
                        "canvas": [
                            2107,
                            2060,
                            2061
                        ],
                        "self._get_output_canvas": [
                            2060
                        ],
                        "backend": [
                            2060
                        ],
                        "print_method": [
                            2096,
                            2114,
                            2061
                        ],
                        "getattr": [
                            2066,
                            2061
                        ],
                        "dpi": [
                            2116,
                            2063,
                            2064,
                            2065,
                            2066,
                            2073
                        ],
                        "rcParams": [
                            2082,
                            2090,
                            2064,
                            2102,
                            2078
                        ],
                        "self.figure": [
                            2106,
                            2086,
                            2087,
                            2094,
                            2126,
                            2127,
                            2128,
                            2066,
                            2098,
                            2099,
                            2073,
                            2074,
                            2075
                        ],
                        "self.figure.dpi": [
                            2066
                        ],
                        "cbook._setattr_cm": [
                            2072,
                            2073
                        ],
                        "cbook": [
                            2072,
                            2073,
                            2083,
                            2079
                        ],
                        "origfacecolor": [
                            2080,
                            2074,
                            2126
                        ],
                        "self.figure.get_facecolor": [
                            2074
                        ],
                        "origedgecolor": [
                            2075,
                            2084,
                            2127
                        ],
                        "self.figure.get_edgecolor": [
                            2075
                        ],
                        "facecolor": [
                            2080,
                            2117,
                            2086,
                            2077,
                            2078,
                            2079
                        ],
                        "cbook._str_equal": [
                            2083,
                            2079
                        ],
                        "edgecolor": [
                            2081,
                            2082,
                            2083,
                            2084,
                            2118,
                            2087
                        ],
                        "self.figure.set_facecolor": [
                            2126,
                            2086
                        ],
                        "self.figure.set_edgecolor": [
                            2127,
                            2087
                        ],
                        "bbox_inches": [
                            2089,
                            2090,
                            2091,
                            2092,
                            2123,
                            2099,
                            2103,
                            2106,
                            2109
                        ],
                        "renderer": [
                            2098,
                            2100,
                            2093
                        ],
                        "_get_renderer": [
                            2093
                        ],
                        "functools.partial": [
                            2095
                        ],
                        "functools": [
                            2095
                        ],
                        "orientation": [
                            2096,
                            2119
                        ],
                        "self.figure.draw": [
                            2098
                        ],
                        "self.figure.get_tightbbox": [
                            2099
                        ],
                        "bbox_extra_artists": [
                            2100
                        ],
                        "pad_inches": [
                            2101,
                            2102,
                            2103
                        ],
                        "bbox_inches.padded": [
                            2103
                        ],
                        "restore_bbox": [
                            2106,
                            2123,
                            2124,
                            2109
                        ],
                        "tight_bbox.adjust_bbox": [
                            2106
                        ],
                        "tight_bbox": [
                            2106
                        ],
                        "canvas.fixed_dpi": [
                            2107
                        ],
                        "_bbox_inches_restore": [
                            2120,
                            2109,
                            2111
                        ],
                        "result": [
                            2129,
                            2114
                        ],
                        "kwargs": [
                            2121
                        ],
                        "self.figure.set_canvas": [
                            2128
                        ]
                    },
                    "filtered_variables": {
                        "filename": [
                            2049,
                            2050,
                            2051,
                            2052,
                            2115,
                            2055,
                            2056
                        ],
                        "os.PathLike": [
                            2049
                        ],
                        "os": [
                            2049,
                            2050,
                            2052
                        ],
                        "os.fspath": [
                            2050
                        ],
                        "os.path.splitext": [
                            2052
                        ],
                        "os.path": [
                            2052
                        ],
                        "self.get_default_filetype": [
                            2054
                        ],
                        "self": [
                            2106,
                            2054,
                            2086,
                            2087,
                            2060,
                            2094,
                            2126,
                            2127,
                            2128,
                            2066,
                            2098,
                            2099,
                            2072,
                            2073,
                            2074,
                            2075
                        ],
                        "filename.rstrip": [
                            2056
                        ],
                        "format.lower": [
                            2057
                        ],
                        "canvas": [
                            2107,
                            2060,
                            2061
                        ],
                        "self._get_output_canvas": [
                            2060
                        ],
                        "backend": [
                            2060
                        ],
                        "print_method": [
                            2096,
                            2114,
                            2061
                        ],
                        "dpi": [
                            2116,
                            2063,
                            2064,
                            2065,
                            2066,
                            2073
                        ],
                        "rcParams": [
                            2082,
                            2090,
                            2064,
                            2102,
                            2078
                        ],
                        "self.figure": [
                            2106,
                            2086,
                            2087,
                            2094,
                            2126,
                            2127,
                            2128,
                            2066,
                            2098,
                            2099,
                            2073,
                            2074,
                            2075
                        ],
                        "self.figure.dpi": [
                            2066
                        ],
                        "cbook._setattr_cm": [
                            2072,
                            2073
                        ],
                        "cbook": [
                            2072,
                            2073,
                            2083,
                            2079
                        ],
                        "origfacecolor": [
                            2080,
                            2074,
                            2126
                        ],
                        "self.figure.get_facecolor": [
                            2074
                        ],
                        "origedgecolor": [
                            2075,
                            2084,
                            2127
                        ],
                        "self.figure.get_edgecolor": [
                            2075
                        ],
                        "facecolor": [
                            2080,
                            2117,
                            2086,
                            2077,
                            2078,
                            2079
                        ],
                        "cbook._str_equal": [
                            2083,
                            2079
                        ],
                        "edgecolor": [
                            2081,
                            2082,
                            2083,
                            2084,
                            2118,
                            2087
                        ],
                        "self.figure.set_facecolor": [
                            2126,
                            2086
                        ],
                        "self.figure.set_edgecolor": [
                            2127,
                            2087
                        ],
                        "bbox_inches": [
                            2089,
                            2090,
                            2091,
                            2092,
                            2123,
                            2099,
                            2103,
                            2106,
                            2109
                        ],
                        "renderer": [
                            2098,
                            2100,
                            2093
                        ],
                        "_get_renderer": [
                            2093
                        ],
                        "functools.partial": [
                            2095
                        ],
                        "functools": [
                            2095
                        ],
                        "orientation": [
                            2096,
                            2119
                        ],
                        "self.figure.draw": [
                            2098
                        ],
                        "self.figure.get_tightbbox": [
                            2099
                        ],
                        "bbox_extra_artists": [
                            2100
                        ],
                        "pad_inches": [
                            2101,
                            2102,
                            2103
                        ],
                        "bbox_inches.padded": [
                            2103
                        ],
                        "restore_bbox": [
                            2106,
                            2123,
                            2124,
                            2109
                        ],
                        "tight_bbox.adjust_bbox": [
                            2106
                        ],
                        "tight_bbox": [
                            2106
                        ],
                        "canvas.fixed_dpi": [
                            2107
                        ],
                        "_bbox_inches_restore": [
                            2120,
                            2109,
                            2111
                        ],
                        "result": [
                            2129,
                            2114
                        ],
                        "kwargs": [
                            2121
                        ],
                        "self.figure.set_canvas": [
                            2128
                        ]
                    },
                    "diff_line_number": 2096,
                    "class_data": {
                        "signature": "class FigureCanvasBase()",
                        "docstring": "The canvas the figure renders into.\n\nAttributes\n----------\nfigure : `matplotlib.figure.Figure`\n    A high-level figure instance.",
                        "constructor_docstring": null,
                        "functions": [
                            "@cbook._classproperty\ndef supports_blit(cls):\n    return hasattr(cls, 'copy_from_bbox') and hasattr(cls, 'restore_region')",
                            "def __init__(self, figure):\n    self._fix_ipython_backend2gui()\n    self._is_idle_drawing = True\n    self._is_saving = False\n    figure.set_canvas(self)\n    self.figure = figure\n    self.manager = None\n    self.callbacks = cbook.CallbackRegistry()\n    self.widgetlock = widgets.LockDraw()\n    self._button = None\n    self._key = None\n    self._lastx, self._lasty = (None, None)\n    self.button_pick_id = self.mpl_connect('button_press_event', self.pick)\n    self.scroll_pick_id = self.mpl_connect('scroll_event', self.pick)\n    self.mouse_grabber = None\n    self.toolbar = None\n    self._is_idle_drawing = False",
                            "@classmethod\n@functools.lru_cache()\ndef _fix_ipython_backend2gui(cls):\n    if 'IPython' not in sys.modules:\n        return\n    import IPython\n    ip = IPython.get_ipython()\n    if not ip:\n        return\n    from IPython.core import pylabtools as pt\n    if not hasattr(pt, 'backend2gui') or not hasattr(ip, 'enable_matplotlib'):\n        return\n    rif = getattr(cls, 'required_interactive_framework', None)\n    backend2gui_rif = {'qt5': 'qt', 'qt4': 'qt', 'gtk3': 'gtk3', 'wx': 'wx', 'macosx': 'osx'}.get(rif)\n    if backend2gui_rif:\n        if _is_non_interactive_terminal_ipython(ip):\n            ip.enable_gui(backend2gui_rif)",
                            "@contextmanager\ndef _idle_draw_cntx(self):\n    self._is_idle_drawing = True\n    try:\n        yield\n    finally:\n        self._is_idle_drawing = False",
                            "def is_saving(self):\n    \"\"\"\n    Return whether the renderer is in the process of saving\n    to a file, rather than rendering for an on-screen buffer.\n    \"\"\"\n    return self._is_saving",
                            "def pick(self, mouseevent):\n    if not self.widgetlock.locked():\n        self.figure.pick(mouseevent)",
                            "def blit(self, bbox=None):\n    \"\"\"Blit the canvas in bbox (default entire canvas).\"\"\"",
                            "def resize(self, w, h):\n    \"\"\"Set the canvas size in pixels.\"\"\"",
                            "def draw_event(self, renderer):\n    \"\"\"Pass a `DrawEvent` to all functions connected to ``draw_event``.\"\"\"\n    s = 'draw_event'\n    event = DrawEvent(s, self, renderer)\n    self.callbacks.process(s, event)",
                            "def resize_event(self):\n    \"\"\"\n    Pass a `ResizeEvent` to all functions connected to ``resize_event``.\n    \"\"\"\n    s = 'resize_event'\n    event = ResizeEvent(s, self)\n    self.callbacks.process(s, event)\n    self.draw_idle()",
                            "def close_event(self, guiEvent=None):\n    \"\"\"\n    Pass a `CloseEvent` to all functions connected to ``close_event``.\n    \"\"\"\n    s = 'close_event'\n    try:\n        event = CloseEvent(s, self, guiEvent=guiEvent)\n        self.callbacks.process(s, event)\n    except (TypeError, AttributeError):\n        pass",
                            "def key_press_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_press_event``.\n    \"\"\"\n    self._key = key\n    s = 'key_press_event'\n    event = KeyEvent(s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                            "def key_release_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_release_event``.\n    \"\"\"\n    s = 'key_release_event'\n    event = KeyEvent(s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._key = None",
                            "def pick_event(self, mouseevent, artist, **kwargs):\n    \"\"\"\n    Callback processing for pick events.\n\n    This method will be called by artists who are picked and will\n    fire off `PickEvent` callbacks registered listeners.\n    \"\"\"\n    s = 'pick_event'\n    event = PickEvent(s, self, mouseevent, artist, guiEvent=mouseevent.guiEvent, **kwargs)\n    self.callbacks.process(s, event)",
                            "def scroll_event(self, x, y, step, guiEvent=None):\n    \"\"\"\n    Callback processing for scroll events.\n\n    Backend derived classes should call this function on any\n    scroll wheel event.  (*x*, *y*) are the canvas coords ((0, 0) is lower\n    left).  button and key are as defined in `MouseEvent`.\n\n    This method will call all functions connected to the 'scroll_event'\n    with a `MouseEvent` instance.\n    \"\"\"\n    if step >= 0:\n        self._button = 'up'\n    else:\n        self._button = 'down'\n    s = 'scroll_event'\n    mouseevent = MouseEvent(s, self, x, y, self._button, self._key, step=step, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                            "def button_press_event(self, x, y, button, dblclick=False, guiEvent=None):\n    \"\"\"\n    Callback processing for mouse button press events.\n\n    Backend derived classes should call this function on any mouse\n    button press.  (*x*, *y*) are the canvas coords ((0, 0) is lower left).\n    button and key are as defined in `MouseEvent`.\n\n    This method will call all functions connected to the\n    'button_press_event' with a `MouseEvent` instance.\n    \"\"\"\n    self._button = button\n    s = 'button_press_event'\n    mouseevent = MouseEvent(s, self, x, y, button, self._key, dblclick=dblclick, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                            "def button_release_event(self, x, y, button, guiEvent=None):\n    \"\"\"\n    Callback processing for mouse button release events.\n\n    Backend derived classes should call this function on any mouse\n    button release.\n\n    This method will call all functions connected to the\n    'button_release_event' with a `MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    s = 'button_release_event'\n    event = MouseEvent(s, self, x, y, button, self._key, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._button = None",
                            "def motion_notify_event(self, x, y, guiEvent=None):\n    \"\"\"\n    Callback processing for mouse movement events.\n\n    Backend derived classes should call this function on any\n    motion-notify-event.\n\n    This method will call all functions connected to the\n    'motion_notify_event' with a `MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self._lastx, self._lasty = (x, y)\n    s = 'motion_notify_event'\n    event = MouseEvent(s, self, x, y, self._button, self._key, guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                            "def leave_notify_event(self, guiEvent=None):\n    \"\"\"\n    Callback processing for the mouse cursor leaving the canvas.\n\n    Backend derived classes should call this function when leaving\n    canvas.\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self.callbacks.process('figure_leave_event', LocationEvent.lastevent)\n    LocationEvent.lastevent = None\n    self._lastx, self._lasty = (None, None)",
                            "def enter_notify_event(self, guiEvent=None, xy=None):\n    \"\"\"\n    Callback processing for the mouse cursor entering the canvas.\n\n    Backend derived classes should call this function when entering\n    canvas.\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    xy : (float, float)\n        The coordinate location of the pointer when the canvas is entered.\n    \"\"\"\n    if xy is not None:\n        x, y = xy\n        self._lastx, self._lasty = (x, y)\n    else:\n        x = None\n        y = None\n        cbook.warn_deprecated('3.0', removal='3.5', name='enter_notify_event', message='Since %(since)s, %(name)s expects a location but your backend did not pass one. This will become an error %(removal)s.')\n    event = LocationEvent('figure_enter_event', self, x, y, guiEvent)\n    self.callbacks.process('figure_enter_event', event)",
                            "def inaxes(self, xy):\n    \"\"\"\n    Return the topmost visible `~.axes.Axes` containing the point *xy*.\n\n    Parameters\n    ----------\n    xy : (float, float)\n        (x, y) pixel positions from left/bottom of the canvas.\n\n    Returns\n    -------\n    `~matplotlib.axes.Axes` or None\n        The topmost visible axes containing the point, or None if no axes.\n    \"\"\"\n    axes_list = [a for a in self.figure.get_axes() if a.patch.contains_point(xy) and a.get_visible()]\n    if axes_list:\n        axes = cbook._topmost_artist(axes_list)\n    else:\n        axes = None\n    return axes",
                            "def grab_mouse(self, ax):\n    \"\"\"\n    Set the child `~.axes.Axes` which is grabbing the mouse events.\n\n    Usually called by the widgets themselves. It is an error to call this\n    if the mouse is already grabbed by another axes.\n    \"\"\"\n    if self.mouse_grabber not in (None, ax):\n        raise RuntimeError('Another Axes already grabs mouse input')\n    self.mouse_grabber = ax",
                            "def release_mouse(self, ax):\n    \"\"\"\n    Release the mouse grab held by the `~.axes.Axes` *ax*.\n\n    Usually called by the widgets. It is ok to call this even if *ax*\n    doesn't have the mouse grab currently.\n    \"\"\"\n    if self.mouse_grabber is ax:\n        self.mouse_grabber = None",
                            "def draw(self, *args, **kwargs):\n    \"\"\"Render the `.Figure`.\"\"\"",
                            "def draw_idle(self, *args, **kwargs):\n    \"\"\"\n    Request a widget redraw once control returns to the GUI event loop.\n\n    Even if multiple calls to `draw_idle` occur before control returns\n    to the GUI event loop, the figure will only be rendered once.\n\n    Notes\n    -----\n    Backends may choose to override the method and implement their own\n    strategy to prevent multiple renderings.\n\n    \"\"\"\n    if not self._is_idle_drawing:\n        with self._idle_draw_cntx():\n            self.draw(*args, **kwargs)",
                            "@cbook.deprecated('3.2')\ndef draw_cursor(self, event):\n    \"\"\"\n    Draw a cursor in the event.axes if inaxes is not None.  Use\n    native GUI drawing for efficiency if possible\n    \"\"\"",
                            "def get_width_height(self):\n    \"\"\"\n    Return the figure width and height in points or pixels\n    (depending on the backend), truncated to integers.\n    \"\"\"\n    return (int(self.figure.bbox.width), int(self.figure.bbox.height))",
                            "@classmethod\ndef get_supported_filetypes(cls):\n    \"\"\"Return dict of savefig file formats supported by this backend.\"\"\"\n    return cls.filetypes",
                            "@classmethod\ndef get_supported_filetypes_grouped(cls):\n    \"\"\"\n    Return a dict of savefig file formats supported by this backend,\n    where the keys are a file type name, such as 'Joint Photographic\n    Experts Group', and the values are a list of filename extensions used\n    for that filetype, such as ['jpg', 'jpeg'].\n    \"\"\"\n    groupings = {}\n    for ext, name in cls.filetypes.items():\n        groupings.setdefault(name, []).append(ext)\n        groupings[name].sort()\n    return groupings",
                            "def _get_output_canvas(self, backend, fmt):\n    \"\"\"\n    Set the canvas in preparation for saving the figure.\n\n    Parameters\n    ----------\n    backend : str or None\n        If not None, switch the figure canvas to the ``FigureCanvas`` class\n        of the given backend.\n    fmt : str\n        If *backend* is None, then determine a suitable canvas class for\n        saving to format *fmt* -- either the current canvas class, if it\n        supports *fmt*, or whatever `get_registered_canvas_class` returns;\n        switch the figure canvas to that canvas class.\n    \"\"\"\n    if backend is not None:\n        canvas_class = importlib.import_module(cbook._backend_module_name(backend)).FigureCanvas\n        if not hasattr(canvas_class, f'print_{fmt}'):\n            raise ValueError(f'The {backend!r} backend does not support {fmt} output')\n    elif hasattr(self, f'print_{fmt}'):\n        return self\n    else:\n        canvas_class = get_registered_canvas_class(fmt)\n    if canvas_class:\n        return self.switch_backends(canvas_class)\n    raise ValueError('Format {!r} is not supported (supported formats: {})'.format(fmt, ', '.join(sorted(self.get_supported_filetypes()))))",
                            "def print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, *, bbox_inches=None, pad_inches=None, bbox_extra_artists=None, backend=None, **kwargs):\n    \"\"\"\n    Render the figure to hardcopy. Set the figure patch face and edge\n    colors.  This is useful because some of the GUIs have a gray figure\n    face color background and you'll probably want to override this on\n    hardcopy.\n\n    Parameters\n    ----------\n    filename : str or path-like or file-like\n        The file where the figure is saved.\n\n    dpi : float, default: :rc:`savefig.dpi`\n        The dots per inch to save the figure in.\n\n    facecolor : color or 'auto', default: :rc:`savefig.facecolor`\n        The facecolor of the figure.  If 'auto', use the current figure\n        facecolor.\n\n    edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`\n        The edgecolor of the figure.  If 'auto', use the current figure\n        edgecolor.\n\n    orientation : {'landscape', 'portrait'}, default: 'portrait'\n        Only currently applies to PostScript printing.\n\n    format : str, optional\n        Force a specific file format. If not given, the format is inferred\n        from the *filename* extension, and if that fails from\n        :rc:`savefig.format`.\n\n    bbox_inches : 'tight' or `.Bbox`, default: :rc:`savefig.bbox`\n        Bounding box in inches: only the given portion of the figure is\n        saved.  If 'tight', try to figure out the tight bbox of the figure.\n\n    pad_inches : float, default: :rc:`savefig.pad_inches`\n        Amount of padding around the figure when *bbox_inches* is 'tight'.\n\n    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n        A list of extra artists that will be considered when the\n        tight bbox is calculated.\n\n    backend : str, optional\n        Use a non-default backend to render the file, e.g. to render a\n        png file with the \"cairo\" backend rather than the default \"agg\",\n        or a pdf file with the \"pgf\" backend rather than the default\n        \"pdf\".  Note that the default backend is normally sufficient.  See\n        :ref:`the-builtin-backends` for a list of valid backends for each\n        file format.  Custom backends can be referenced as \"module://...\".\n    \"\"\"\n    if format is None:\n        if isinstance(filename, os.PathLike):\n            filename = os.fspath(filename)\n        if isinstance(filename, str):\n            format = os.path.splitext(filename)[1][1:]\n        if format is None or format == '':\n            format = self.get_default_filetype()\n            if isinstance(filename, str):\n                filename = filename.rstrip('.') + '.' + format\n    format = format.lower()\n    canvas = self._get_output_canvas(backend, format)\n    print_method = getattr(canvas, 'print_%s' % format)\n    if dpi is None:\n        dpi = rcParams['savefig.dpi']\n    if dpi == 'figure':\n        dpi = getattr(self.figure, '_original_dpi', self.figure.dpi)\n    with cbook._setattr_cm(self, _is_saving=True, manager=None), cbook._setattr_cm(self.figure, dpi=dpi):\n        origfacecolor = self.figure.get_facecolor()\n        origedgecolor = self.figure.get_edgecolor()\n        if facecolor is None:\n            facecolor = rcParams['savefig.facecolor']\n        if cbook._str_equal(facecolor, 'auto'):\n            facecolor = origfacecolor\n        if edgecolor is None:\n            edgecolor = rcParams['savefig.edgecolor']\n        if cbook._str_equal(edgecolor, 'auto'):\n            edgecolor = origedgecolor\n        self.figure.set_facecolor(facecolor)\n        self.figure.set_edgecolor(edgecolor)\n        if bbox_inches is None:\n            bbox_inches = rcParams['savefig.bbox']\n        if bbox_inches:\n            if bbox_inches == 'tight':\n                renderer = _get_renderer(self.figure, functools.partial(print_method, orientation=orientation), draw_disabled=True)\n                self.figure.draw(renderer)\n                bbox_inches = self.figure.get_tightbbox(renderer, bbox_extra_artists=bbox_extra_artists)\n                if pad_inches is None:\n                    pad_inches = rcParams['savefig.pad_inches']\n                bbox_inches = bbox_inches.padded(pad_inches)\n            restore_bbox = tight_bbox.adjust_bbox(self.figure, bbox_inches, canvas.fixed_dpi)\n            _bbox_inches_restore = (bbox_inches, restore_bbox)\n        else:\n            _bbox_inches_restore = None\n        try:\n            result = print_method(filename, dpi=dpi, facecolor=facecolor, edgecolor=edgecolor, orientation=orientation, bbox_inches_restore=_bbox_inches_restore, **kwargs)\n        finally:\n            if bbox_inches and restore_bbox:\n                restore_bbox()\n            self.figure.set_facecolor(origfacecolor)\n            self.figure.set_edgecolor(origedgecolor)\n            self.figure.set_canvas(self)\n        return result",
                            "@classmethod\ndef get_default_filetype(cls):\n    \"\"\"\n    Return the default savefig file format as specified in\n    :rc:`savefig.format`.\n\n    The returned string does not include a period. This method is\n    overridden in backends that only support a single file type.\n    \"\"\"\n    return rcParams['savefig.format']",
                            "def get_window_title(self):\n    \"\"\"\n    Return the title text of the window containing the figure, or None\n    if there is no window (e.g., a PS backend).\n    \"\"\"\n    if self.manager:\n        return self.manager.get_window_title()",
                            "def set_window_title(self, title):\n    \"\"\"\n    Set the title text of the window containing the figure.  Note that\n    this has no effect if there is no window (e.g., a PS backend).\n    \"\"\"\n    if hasattr(self, 'manager'):\n        self.manager.set_window_title(title)",
                            "def get_default_filename(self):\n    \"\"\"\n    Return a string, which includes extension, suitable for use as\n    a default filename.\n    \"\"\"\n    default_basename = self.get_window_title() or 'image'\n    default_basename = default_basename.replace(' ', '_')\n    default_filetype = self.get_default_filetype()\n    default_filename = default_basename + '.' + default_filetype\n    return default_filename",
                            "def switch_backends(self, FigureCanvasClass):\n    \"\"\"\n    Instantiate an instance of FigureCanvasClass\n\n    This is used for backend switching, e.g., to instantiate a\n    FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is\n    not done, so any changes to one of the instances (e.g., setting\n    figure size or line props), will be reflected in the other\n    \"\"\"\n    newCanvas = FigureCanvasClass(self.figure)\n    newCanvas._is_saving = self._is_saving\n    return newCanvas",
                            "def mpl_connect(self, s, func):\n    \"\"\"\n    Bind function *func* to event *s*.\n\n    Parameters\n    ----------\n    s : str\n        One of the following events ids:\n\n        - 'button_press_event'\n        - 'button_release_event'\n        - 'draw_event'\n        - 'key_press_event'\n        - 'key_release_event'\n        - 'motion_notify_event'\n        - 'pick_event'\n        - 'resize_event'\n        - 'scroll_event'\n        - 'figure_enter_event',\n        - 'figure_leave_event',\n        - 'axes_enter_event',\n        - 'axes_leave_event'\n        - 'close_event'.\n\n    func : callable\n        The callback function to be executed, which must have the\n        signature::\n\n            def func(event: Event) -> Any\n\n        For the location events (button and key press/release), if the\n        mouse is over the axes, the ``inaxes`` attribute of the event will\n        be set to the `~matplotlib.axes.Axes` the event occurs is over, and\n        additionally, the variables ``xdata`` and ``ydata`` attributes will\n        be set to the mouse location in data coordinates.  See `.KeyEvent`\n        and `.MouseEvent` for more info.\n\n    Returns\n    -------\n    cid\n        A connection id that can be used with\n        `.FigureCanvasBase.mpl_disconnect`.\n\n    Examples\n    --------\n    ::\n\n        def on_press(event):\n            print('you pressed', event.button, event.xdata, event.ydata)\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n    \"\"\"\n    return self.callbacks.connect(s, func)",
                            "def mpl_disconnect(self, cid):\n    \"\"\"\n    Disconnect the callback with id *cid*.\n\n    Examples\n    --------\n    ::\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n        # ... later\n        canvas.mpl_disconnect(cid)\n    \"\"\"\n    return self.callbacks.disconnect(cid)",
                            "def new_timer(self, interval=None, callbacks=None):\n    \"\"\"\n    Create a new backend-specific subclass of `.Timer`.\n\n    This is useful for getting periodic events through the backend's native\n    event loop.  Implemented only for backends with GUIs.\n\n    Parameters\n    ----------\n    interval : int\n        Timer interval in milliseconds.\n\n    callbacks : List[Tuple[callable, Tuple, Dict]]\n        Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n        will be executed by the timer every *interval*.\n\n        Callbacks which return ``False`` or ``0`` will be removed from the\n        timer.\n\n    Examples\n    --------\n    >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1,), {'a': 3})])\n    \"\"\"\n    return self._timer_cls(interval=interval, callbacks=callbacks)",
                            "def flush_events(self):\n    \"\"\"\n    Flush the GUI events for the figure.\n\n    Interactive backends need to reimplement this method.\n    \"\"\"",
                            "def start_event_loop(self, timeout=0):\n    \"\"\"\n    Start a blocking event loop.\n\n    Such an event loop is used by interactive functions, such as\n    `~.Figure.ginput` and `~.Figure.waitforbuttonpress`, to wait for\n    events.\n\n    The event loop blocks until a callback function triggers\n    `stop_event_loop`, or *timeout* is reached.\n\n    If *timeout* is negative, never timeout.\n\n    Only interactive backends need to reimplement this method and it relies\n    on `flush_events` being properly implemented.\n\n    Interactive backends should implement this in a more native way.\n    \"\"\"\n    if timeout <= 0:\n        timeout = np.inf\n    timestep = 0.01\n    counter = 0\n    self._looping = True\n    while self._looping and counter * timestep < timeout:\n        self.flush_events()\n        time.sleep(timestep)\n        counter += 1",
                            "def stop_event_loop(self):\n    \"\"\"\n    Stop the current blocking event loop.\n\n    Interactive backends need to reimplement this to match\n    `start_event_loop`\n    \"\"\"\n    self._looping = False"
                        ],
                        "constructor_variables": [
                            "widgetlock",
                            "_is_saving",
                            "manager",
                            "mouse_grabber",
                            "_button",
                            "figure",
                            "button_pick_id",
                            "_key",
                            "callbacks",
                            "scroll_pick_id",
                            "toolbar",
                            "_is_idle_drawing"
                        ],
                        "class_level_variables": [
                            "required_interactive_framework",
                            "events",
                            "fixed_dpi",
                            "filetypes",
                            "_timer_cls"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "supports_blit(cls)",
                            "__init__(self, figure)",
                            "_fix_ipython_backend2gui(cls)",
                            "_idle_draw_cntx(self)",
                            "is_saving(self)",
                            "pick(self, mouseevent)",
                            "blit(self, bbox=None)",
                            "resize(self, w, h)",
                            "draw_event(self, renderer)",
                            "resize_event(self)",
                            "close_event(self, guiEvent=None)",
                            "key_press_event(self, key, guiEvent=None)",
                            "key_release_event(self, key, guiEvent=None)",
                            "pick_event(self, mouseevent, artist, **kwargs)",
                            "scroll_event(self, x, y, step, guiEvent=None)",
                            "button_press_event(self, x, y, button, dblclick=False, guiEvent=None)",
                            "button_release_event(self, x, y, button, guiEvent=None)",
                            "motion_notify_event(self, x, y, guiEvent=None)",
                            "leave_notify_event(self, guiEvent=None)",
                            "enter_notify_event(self, guiEvent=None, xy=None)",
                            "inaxes(self, xy)",
                            "grab_mouse(self, ax)",
                            "release_mouse(self, ax)",
                            "draw(self, *args, **kwargs)",
                            "draw_idle(self, *args, **kwargs)",
                            "draw_cursor(self, event)",
                            "get_width_height(self)",
                            "get_supported_filetypes(cls)",
                            "get_supported_filetypes_grouped(cls)",
                            "_get_output_canvas(self, backend, fmt)",
                            "print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, **kwargs)",
                            "get_default_filetype(cls)",
                            "get_window_title(self)",
                            "set_window_title(self, title)",
                            "get_default_filename(self)",
                            "switch_backends(self, FigureCanvasClass)",
                            "mpl_connect(self, s, func)",
                            "mpl_disconnect(self, cid)",
                            "new_timer(self, interval=None, callbacks=None)",
                            "flush_events(self)",
                            "start_event_loop(self, timeout=0)",
                            "stop_event_loop(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "filename": {
                                    "variable_value": "<_io.BytesIO object at 0x1148146d0>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "os.PathLike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.fspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_default_filetype": {
                                    "variable_value": "<bound method FigureCanvasBase.get_default_filetype of <class 'matplotlib.backends.backend_agg.FigureCanvasAgg'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11479b280>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "filename.rstrip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_output_canvas": {
                                    "variable_value": "<bound method FigureCanvasBase._get_output_canvas of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11479b280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "backend": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dpi": {
                                    "variable_value": "100.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure.dpi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "origfacecolor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "origedgecolor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._str_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.set_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.set_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_inches": {
                                    "variable_value": "'tight'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "'portrait'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.figure.draw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.get_tightbbox": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_extra_artists": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pad_inches": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "bbox_inches.padded": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "restore_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tight_bbox.adjust_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tight_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canvas.fixed_dpi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_bbox_inches_restore": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.figure.set_canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "filename": {
                                    "variable_value": "<_io.BytesIO object at 0x1148146d0>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "os.PathLike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.fspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_default_filetype": {
                                    "variable_value": "<bound method FigureCanvasBase.get_default_filetype of <class 'matplotlib.backends.backend_agg.FigureCanvasAgg'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11479b280>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "filename.rstrip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x11481a1f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "canvas": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11479b280>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "self._get_output_canvas": {
                                    "variable_value": "<bound method FigureCanvasBase._get_output_canvas of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11479b280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "backend": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": "<bound method FigureCanvasAgg.print_png of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11479b280>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "dpi": {
                                    "variable_value": "100.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure.dpi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "origfacecolor": {
                                    "variable_value": "(0.75, 0.75, 0.75, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self.figure.get_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "origedgecolor": {
                                    "variable_value": "(1.0, 1.0, 1.0, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self.figure.get_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "facecolor": {
                                    "variable_value": "'w'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "cbook._str_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "edgecolor": {
                                    "variable_value": "'w'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.figure.set_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.set_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_inches": {
                                    "variable_value": "Bbox([[0.0, 3.885780586188048e-18], [0.1, 0.07]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x114813910>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "_get_renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "'portrait'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "self.figure.draw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.get_tightbbox": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_extra_artists": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pad_inches": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "bbox_inches.padded": {
                                    "variable_value": "<bound method BboxBase.padded of Bbox([[0.0, 3.885780586188048e-18], [0.1, 0.07]])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "restore_bbox": {
                                    "variable_value": "<function adjust_bbox.<locals>.restore_bbox at 0x1148311f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tight_bbox.adjust_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tight_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canvas.fixed_dpi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_bbox_inches_restore": {
                                    "variable_value": "(Bbox([[0.0, 3.885780586188048e-18], [0.1, 0.07]]), <function adjust_bbox.<locals>.restore_bbox at 0x1148311f0>)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.figure.set_canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "filename": {
                                    "variable_value": "<_io.BytesIO object at 0x10d723680>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "os.PathLike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.fspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_default_filetype": {
                                    "variable_value": "<bound method FigureCanvasBase.get_default_filetype of <class 'matplotlib.backends.backend_agg.FigureCanvasAgg'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10d6a7130>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "filename.rstrip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format.lower": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_output_canvas": {
                                    "variable_value": "<bound method FigureCanvasBase._get_output_canvas of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10d6a7130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "backend": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dpi": {
                                    "variable_value": "100.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure.dpi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "origfacecolor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "origedgecolor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._str_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.set_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.set_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_inches": {
                                    "variable_value": "'tight'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_get_renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "'portrait'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "no_ops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meth_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RendererBase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meth_name.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.draw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.get_tightbbox": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_extra_artists": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pad_inches": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "bbox_inches.padded": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "restore_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tight_bbox.adjust_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tight_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canvas.fixed_dpi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_bbox_inches_restore": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.figure.set_canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "filename": {
                                    "variable_value": "<_io.BytesIO object at 0x10d723680>",
                                    "variable_type": "BytesIO",
                                    "variable_shape": null
                                },
                                "os.PathLike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.fspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.splitext": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_default_filetype": {
                                    "variable_value": "<bound method FigureCanvasBase.get_default_filetype of <class 'matplotlib.backends.backend_agg.FigureCanvasAgg'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10d6a7130>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "filename.rstrip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "format.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x10d728770>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "canvas": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10d6a7130>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "self._get_output_canvas": {
                                    "variable_value": "<bound method FigureCanvasBase._get_output_canvas of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10d6a7130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "backend": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "print_method": {
                                    "variable_value": "<bound method FigureCanvasAgg.print_png of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10d6a7130>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "dpi": {
                                    "variable_value": "100.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "rcParams": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 10x7 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure.dpi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "origfacecolor": {
                                    "variable_value": "(0.75, 0.75, 0.75, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self.figure.get_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "origedgecolor": {
                                    "variable_value": "(1.0, 1.0, 1.0, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self.figure.get_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "facecolor": {
                                    "variable_value": "'w'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "cbook._str_equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "edgecolor": {
                                    "variable_value": "'w'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.figure.set_facecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.set_edgecolor": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_inches": {
                                    "variable_value": "Bbox([[0.0, 3.885780586188048e-18], [0.1, 0.07]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x10d71fa30>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "_get_renderer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools.partial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "functools": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "orientation": {
                                    "variable_value": "'portrait'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "no_ops": {
                                    "variable_value": "{'close_group': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71a8b0>, 'draw_gouraud_triangle': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71a940>, 'draw_gouraud_triangles': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71a9d0>, 'draw_image': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71aa60>, 'draw_markers': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71aaf0>, 'draw_path': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71ab80>, 'draw_path_collection': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71ac10>, 'draw_quad_mesh': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71aca0>, 'draw_tex': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71ad30>, 'draw_text': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71adc0>, 'open_group': <function FigureCanvasBase.print_figure.<locals>.<dictcomp>.<lambda> at 0x10d71ae50>}",
                                    "variable_type": "dict",
                                    "variable_shape": "11"
                                },
                                "meth_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RendererBase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "meth_name.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_setattr_cm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.draw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure.get_tightbbox": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "bbox_extra_artists": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "pad_inches": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "bbox_inches.padded": {
                                    "variable_value": "<bound method BboxBase.padded of Bbox([[0.0, 3.885780586188048e-18], [0.1, 0.07]])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "restore_bbox": {
                                    "variable_value": "<function adjust_bbox.<locals>.restore_bbox at 0x10d742160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "tight_bbox.adjust_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tight_bbox": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "canvas.fixed_dpi": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_bbox_inches_restore": {
                                    "variable_value": "(Bbox([[0.0, 3.885780586188048e-18], [0.1, 0.07]]), <function adjust_bbox.<locals>.restore_bbox at 0x10d742160>)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.figure.set_canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from matplotlib.path import Path",
                    "start_line": 48,
                    "end_line": 49
                }
            ],
            "inscope_functions": [
                "def register_backend(format, backend, description=None):\n    \"\"\"\n    Register a backend for saving to a given file format.\n\n    Parameters\n    ----------\n    format : str\n        File extension\n    backend : module string or canvas class\n        Backend for handling file output\n    description : str, default: \"\"\n        Description of the file type.\n    \"\"\"\n    if description is None:\n        description = ''\n    _default_backends[format] = backend\n    _default_filetypes[format] = description",
                "def get_registered_canvas_class(format):\n    \"\"\"\n    Return the registered default canvas for given file format.\n    Handles deferred import of required backend.\n    \"\"\"\n    if format not in _default_backends:\n        return None\n    backend_class = _default_backends[format]\n    if isinstance(backend_class, str):\n        backend_class = importlib.import_module(backend_class).FigureCanvas\n        _default_backends[format] = backend_class\n    return backend_class",
                "def _get_renderer(figure, print_method=None, *, draw_disabled=False):\n    \"\"\"\n    Get the renderer that would be used to save a `~.Figure`, and cache it on\n    the figure.\n\n    If *draw_disabled* is True, additionally replace drawing methods on\n    *renderer* by no-ops.  This is used by the tight-bbox-saving renderer,\n    which needs to walk through the artist tree to compute the tight-bbox, but\n    for which the output file may be closed early.\n    \"\"\"\n    # This is implemented by triggering a draw, then immediately jumping out of\n    # Figure.draw() by raising an exception.\n\n    class Done(Exception):\n        pass\n\n    def _draw(renderer): raise Done(renderer)\n\n    with cbook._setattr_cm(figure, draw=_draw):\n        if print_method is None:\n            fmt = figure.canvas.get_default_filetype()\n            print_method = getattr(figure.canvas, f\"print_{fmt}\")\n        try:\n            print_method(io.BytesIO(), dpi=figure.dpi)\n        except Done as exc:\n            renderer, = figure._cachedRenderer, = exc.args\n\n    if draw_disabled:\n        for meth_name in dir(RendererBase):\n            if (meth_name.startswith(\"draw_\")\n                    or meth_name in [\"open_group\", \"close_group\"]):\n                setattr(renderer, meth_name, lambda *args, **kwargs: None)\n\n    return renderer",
                "def _is_non_interactive_terminal_ipython(ip):\n    \"\"\"\n    Return whether we are in a a terminal IPython, but non interactive.\n\n    When in _terminal_ IPython, ip.parent will have and `interact` attribute,\n    if this attribute is False we do not setup eventloop integration as the\n    user will _not_ interact with IPython. In all other case (ZMQKernel, or is\n    interactive), we do.\n    \"\"\"\n    return (hasattr(ip, 'parent')\n            and (ip.parent is not None)\n            and getattr(ip.parent, 'interact', None) is False)",
                "def key_press_handler(event, canvas=None, toolbar=None):\n    \"\"\"\n    Implement the default Matplotlib key bindings for the canvas and toolbar\n    described at :ref:`key-event-handling`.\n\n    Parameters\n    ----------\n    event : `KeyEvent`\n        A key press/release event.\n    canvas : `FigureCanvasBase`, default: ``event.canvas``\n        The backend-specific canvas instance.  This parameter is kept for\n        back-compatibility, but, if set, should always be equal to\n        ``event.canvas``.\n    toolbar : `NavigationToolbar2`, default: ``event.canvas.toolbar``\n        The navigation cursor toolbar.  This parameter is kept for\n        back-compatibility, but, if set, should always be equal to\n        ``event.canvas.toolbar``.\n    \"\"\"\n    # these bindings happen whether you are over an axes or not\n\n    if event.key is None:\n        return\n    if canvas is None:\n        canvas = event.canvas\n    if toolbar is None:\n        toolbar = canvas.toolbar\n\n    # Load key-mappings from rcParams.\n    fullscreen_keys = rcParams['keymap.fullscreen']\n    home_keys = rcParams['keymap.home']\n    back_keys = rcParams['keymap.back']\n    forward_keys = rcParams['keymap.forward']\n    pan_keys = rcParams['keymap.pan']\n    zoom_keys = rcParams['keymap.zoom']\n    save_keys = rcParams['keymap.save']\n    quit_keys = rcParams['keymap.quit']\n    quit_all_keys = rcParams['keymap.quit_all']\n    grid_keys = rcParams['keymap.grid']\n    grid_minor_keys = rcParams['keymap.grid_minor']\n    toggle_yscale_keys = rcParams['keymap.yscale']\n    toggle_xscale_keys = rcParams['keymap.xscale']\n    all_keys = dict.__getitem__(rcParams, 'keymap.all_axes')\n\n    # toggle fullscreen mode ('f', 'ctrl + f')\n    if event.key in fullscreen_keys:\n        try:\n            canvas.manager.full_screen_toggle()\n        except AttributeError:\n            pass\n\n    # quit the figure (default key 'ctrl+w')\n    if event.key in quit_keys:\n        Gcf.destroy_fig(canvas.figure)\n    if event.key in quit_all_keys:\n        Gcf.destroy_all()\n\n    if toolbar is not None:\n        # home or reset mnemonic  (default key 'h', 'home' and 'r')\n        if event.key in home_keys:\n            toolbar.home()\n        # forward / backward keys to enable left handed quick navigation\n        # (default key for backward: 'left', 'backspace' and 'c')\n        elif event.key in back_keys:\n            toolbar.back()\n        # (default key for forward: 'right' and 'v')\n        elif event.key in forward_keys:\n            toolbar.forward()\n        # pan mnemonic (default key 'p')\n        elif event.key in pan_keys:\n            toolbar.pan()\n            toolbar._update_cursor(event)\n        # zoom mnemonic (default key 'o')\n        elif event.key in zoom_keys:\n            toolbar.zoom()\n            toolbar._update_cursor(event)\n        # saving current figure (default key 's')\n        elif event.key in save_keys:\n            toolbar.save_figure()\n\n    if event.inaxes is None:\n        return\n\n    # these bindings require the mouse to be over an axes to trigger\n    def _get_uniform_gridstate(ticks):\n        # Return True/False if all grid lines are on or off, None if they are\n        # not all in the same state.\n        if all(tick.gridline.get_visible() for tick in ticks):\n            return True\n        elif not any(tick.gridline.get_visible() for tick in ticks):\n            return False\n        else:\n            return None\n\n    ax = event.inaxes\n    # toggle major grids in current axes (default key 'g')\n    # Both here and below (for 'G'), we do nothing if *any* grid (major or\n    # minor, x or y) is not in a uniform state, to avoid messing up user\n    # customization.\n    if (event.key in grid_keys\n            # Exclude minor grids not in a uniform state.\n            and None not in [_get_uniform_gridstate(ax.xaxis.minorTicks),\n                             _get_uniform_gridstate(ax.yaxis.minorTicks)]):\n        x_state = _get_uniform_gridstate(ax.xaxis.majorTicks)\n        y_state = _get_uniform_gridstate(ax.yaxis.majorTicks)\n        cycle = [(False, False), (True, False), (True, True), (False, True)]\n        try:\n            x_state, y_state = (\n                cycle[(cycle.index((x_state, y_state)) + 1) % len(cycle)])\n        except ValueError:\n            # Exclude major grids not in a uniform state.\n            pass\n        else:\n            # If turning major grids off, also turn minor grids off.\n            ax.grid(x_state, which=\"major\" if x_state else \"both\", axis=\"x\")\n            ax.grid(y_state, which=\"major\" if y_state else \"both\", axis=\"y\")\n            canvas.draw_idle()\n    # toggle major and minor grids in current axes (default key 'G')\n    if (event.key in grid_minor_keys\n            # Exclude major grids not in a uniform state.\n            and None not in [_get_uniform_gridstate(ax.xaxis.majorTicks),\n                             _get_uniform_gridstate(ax.yaxis.majorTicks)]):\n        x_state = _get_uniform_gridstate(ax.xaxis.minorTicks)\n        y_state = _get_uniform_gridstate(ax.yaxis.minorTicks)\n        cycle = [(False, False), (True, False), (True, True), (False, True)]\n        try:\n            x_state, y_state = (\n                cycle[(cycle.index((x_state, y_state)) + 1) % len(cycle)])\n        except ValueError:\n            # Exclude minor grids not in a uniform state.\n            pass\n        else:\n            ax.grid(x_state, which=\"both\", axis=\"x\")\n            ax.grid(y_state, which=\"both\", axis=\"y\")\n            canvas.draw_idle()\n    # toggle scaling of y-axes between 'log and 'linear' (default key 'l')\n    elif event.key in toggle_yscale_keys:\n        scale = ax.get_yscale()\n        if scale == 'log':\n            ax.set_yscale('linear')\n            ax.figure.canvas.draw_idle()\n        elif scale == 'linear':\n            try:\n                ax.set_yscale('log')\n            except ValueError as exc:\n                _log.warning(str(exc))\n                ax.set_yscale('linear')\n            ax.figure.canvas.draw_idle()\n    # toggle scaling of x-axes between 'log and 'linear' (default key 'k')\n    elif event.key in toggle_xscale_keys:\n        scalex = ax.get_xscale()\n        if scalex == 'log':\n            ax.set_xscale('linear')\n            ax.figure.canvas.draw_idle()\n        elif scalex == 'linear':\n            try:\n                ax.set_xscale('log')\n            except ValueError as exc:\n                _log.warning(str(exc))\n                ax.set_xscale('linear')\n            ax.figure.canvas.draw_idle()\n    # enable nagivation for all axes that contain the event (default key 'a')\n    elif event.key in all_keys:\n        for a in canvas.figure.get_axes():\n            if (event.x is not None and event.y is not None\n                    and a.in_axes(event)):  # FIXME: Why only these?\n                cbook.warn_deprecated(\n                    \"3.3\", message=\"Toggling axes navigation from the \"\n                    \"keyboard is deprecated since %(since)s and will be \"\n                    \"removed %(removal)s.\")\n                a.set_navigate(True)\n    # enable navigation only for axes with this index (if such an axes exist,\n    # otherwise do nothing)\n    elif event.key.isdigit() and event.key != '0':\n        n = int(event.key) - 1\n        if n < len(canvas.figure.get_axes()):\n            for i, a in enumerate(canvas.figure.get_axes()):\n                if (event.x is not None and event.y is not None\n                        and a.in_axes(event)):  # FIXME: Why only these?\n                    cbook.warn_deprecated(\n                        \"3.3\", message=\"Toggling axes navigation from the \"\n                        \"keyboard is deprecated since %(since)s and will be \"\n                        \"removed %(removal)s.\")\n                    a.set_navigate(i == n)",
                "def button_press_handler(event, canvas=None, toolbar=None):\n    \"\"\"\n    The default Matplotlib button actions for extra mouse buttons.\n\n    Parameters are as for `key_press_handler`, except that *event* is a\n    `MouseEvent`.\n    \"\"\"\n    if canvas is None:\n        canvas = event.canvas\n    if toolbar is None:\n        toolbar = canvas.toolbar\n    if toolbar is not None:\n        button_name = str(MouseButton(event.button))\n        if button_name in rcParams['keymap.back']:\n            toolbar.back()\n        elif button_name in rcParams['keymap.forward']:\n            toolbar.forward()",
                "def __init__(self):\n    super().__init__()\n    self._texmanager = None\n    self._text2path = textpath.TextToPath()",
                "def open_group(self, s, gid=None):\n    \"\"\"\n    Open a grouping element with label *s* and *gid* (if set) as id.\n\n    Only used by the SVG renderer.\n    \"\"\"",
                "def close_group(self, s):\n    \"\"\"\n    Close a grouping element with label *s*.\n\n    Only used by the SVG renderer.\n    \"\"\"",
                "def draw_path(self, gc, path, transform, rgbFace=None):\n    \"\"\"Draw a `~.path.Path` instance using the given affine transform.\"\"\"\n    raise NotImplementedError",
                "def draw_markers(self, gc, marker_path, marker_trans, path,\n                 trans, rgbFace=None):\n    \"\"\"\n    Draw a marker at each of the vertices in path.\n\n    This includes all vertices, including control points on curves.\n    To avoid that behavior, those vertices should be removed before\n    calling this function.\n\n    This provides a fallback implementation of draw_markers that\n    makes multiple calls to :meth:`draw_path`.  Some backends may\n    want to override this method in order to draw the marker only\n    once and reuse it multiple times.\n\n    Parameters\n    ----------\n    gc : `.GraphicsContextBase`\n        The graphics context.\n\n    marker_trans : `matplotlib.transforms.Transform`\n        An affine transform applied to the marker.\n\n    trans : `matplotlib.transforms.Transform`\n        An affine transform applied to the path.\n\n    \"\"\"\n    for vertices, codes in path.iter_segments(trans, simplify=False):\n        if len(vertices):\n            x, y = vertices[-2:]\n            self.draw_path(gc, marker_path,\n                           marker_trans +\n                           transforms.Affine2D().translate(x, y),\n                           rgbFace)",
                "def draw_path_collection(self, gc, master_transform, paths, all_transforms,\n                         offsets, offsetTrans, facecolors, edgecolors,\n                         linewidths, linestyles, antialiaseds, urls,\n                         offset_position):\n    \"\"\"\n    Draw a collection of paths selecting drawing properties from\n    the lists *facecolors*, *edgecolors*, *linewidths*,\n    *linestyles* and *antialiaseds*. *offsets* is a list of\n    offsets to apply to each of the paths.  The offsets in\n    *offsets* are first transformed by *offsetTrans* before being\n    applied.\n\n    *offset_position* may be either \"screen\" or \"data\" depending on the\n    space that the offsets are in; \"data\" is deprecated.\n\n    This provides a fallback implementation of\n    :meth:`draw_path_collection` that makes multiple calls to\n    :meth:`draw_path`.  Some backends may want to override this in\n    order to render each set of path data only once, and then\n    reference that path multiple times with the different offsets,\n    colors, styles etc.  The generator methods\n    :meth:`_iter_collection_raw_paths` and\n    :meth:`_iter_collection` are provided to help with (and\n    standardize) the implementation across backends.  It is highly\n    recommended to use those generators, so that changes to the\n    behavior of :meth:`draw_path_collection` can be made globally.\n    \"\"\"\n    path_ids = self._iter_collection_raw_paths(master_transform,\n                                               paths, all_transforms)\n\n    for xo, yo, path_id, gc0, rgbFace in self._iter_collection(\n            gc, master_transform, all_transforms, list(path_ids), offsets,\n            offsetTrans, facecolors, edgecolors, linewidths, linestyles,\n            antialiaseds, urls, offset_position):\n        path, transform = path_id\n        # Only apply another translation if we have an offset, else we\n        # resuse the inital transform.\n        if xo != 0 or yo != 0:\n            # The transformation can be used by multiple paths. Since\n            # translate is a inplace operation, we need to copy the\n            # transformation by .frozen() before applying the translation.\n            transform = transform.frozen()\n            transform.translate(xo, yo)\n        self.draw_path(gc0, path, transform, rgbFace)",
                "def draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight,\n                   coordinates, offsets, offsetTrans, facecolors,\n                   antialiased, edgecolors):\n    \"\"\"\n    Fallback implementation of :meth:`draw_quad_mesh` that generates paths\n    and then calls :meth:`draw_path_collection`.\n    \"\"\"\n\n    from matplotlib.collections import QuadMesh\n    paths = QuadMesh.convert_mesh_to_paths(\n        meshWidth, meshHeight, coordinates)\n\n    if edgecolors is None:\n        edgecolors = facecolors\n    linewidths = np.array([gc.get_linewidth()], float)\n\n    return self.draw_path_collection(\n        gc, master_transform, paths, [], offsets, offsetTrans, facecolors,\n        edgecolors, linewidths, [], [antialiased], [None], 'screen')",
                "def draw_gouraud_triangle(self, gc, points, colors, transform):\n    \"\"\"\n    Draw a Gouraud-shaded triangle.\n\n    Parameters\n    ----------\n    gc : `.GraphicsContextBase`\n        The graphics context.\n\n    points : array-like, shape=(3, 2)\n        Array of (x, y) points for the triangle.\n\n    colors : array-like, shape=(3, 4)\n        RGBA colors for each point of the triangle.\n\n    transform : `matplotlib.transforms.Transform`\n        An affine transform to apply to the points.\n\n    \"\"\"\n    raise NotImplementedError",
                "def draw_gouraud_triangles(self, gc, triangles_array, colors_array,\n                           transform):\n    \"\"\"\n    Draw a series of Gouraud triangles.\n\n    Parameters\n    ----------\n    points : array-like, shape=(N, 3, 2)\n        Array of *N* (x, y) points for the triangles.\n\n    colors : array-like, shape=(N, 3, 4)\n        Array of *N* RGBA colors for each point of the triangles.\n\n    transform : `matplotlib.transforms.Transform`\n        An affine transform to apply to the points.\n    \"\"\"\n    transform = transform.frozen()\n    for tri, col in zip(triangles_array, colors_array):\n        self.draw_gouraud_triangle(gc, tri, col, transform)",
                "def _iter_collection_raw_paths(self, master_transform, paths,\n                               all_transforms):\n    \"\"\"\n    Helper method (along with :meth:`_iter_collection`) to implement\n    :meth:`draw_path_collection` in a space-efficient manner.\n\n    This method yields all of the base path/transform\n    combinations, given a master transform, a list of paths and\n    list of transforms.\n\n    The arguments should be exactly what is passed in to\n    :meth:`draw_path_collection`.\n\n    The backend should take each yielded path and transform and\n    create an object that can be referenced (reused) later.\n    \"\"\"\n    Npaths = len(paths)\n    Ntransforms = len(all_transforms)\n    N = max(Npaths, Ntransforms)\n\n    if Npaths == 0:\n        return\n\n    transform = transforms.IdentityTransform()\n    for i in range(N):\n        path = paths[i % Npaths]\n        if Ntransforms:\n            transform = Affine2D(all_transforms[i % Ntransforms])\n        yield path, transform + master_transform",
                "def _iter_collection_uses_per_path(self, paths, all_transforms,\n                                   offsets, facecolors, edgecolors):\n    \"\"\"\n    Compute how many times each raw path object returned by\n    _iter_collection_raw_paths would be used when calling\n    _iter_collection. This is intended for the backend to decide\n    on the tradeoff between using the paths in-line and storing\n    them once and reusing. Rounds up in case the number of uses\n    is not the same for every path.\n    \"\"\"\n    Npaths = len(paths)\n    if Npaths == 0 or len(facecolors) == len(edgecolors) == 0:\n        return 0\n    Npath_ids = max(Npaths, len(all_transforms))\n    N = max(Npath_ids, len(offsets))\n    return (N + Npath_ids - 1) // Npath_ids",
                "def _iter_collection(self, gc, master_transform, all_transforms,\n                     path_ids, offsets, offsetTrans, facecolors,\n                     edgecolors, linewidths, linestyles,\n                     antialiaseds, urls, offset_position):\n    \"\"\"\n    Helper method (along with :meth:`_iter_collection_raw_paths`) to\n    implement :meth:`draw_path_collection` in a space-efficient manner.\n\n    This method yields all of the path, offset and graphics\n    context combinations to draw the path collection.  The caller\n    should already have looped over the results of\n    :meth:`_iter_collection_raw_paths` to draw this collection.\n\n    The arguments should be the same as that passed into\n    :meth:`draw_path_collection`, with the exception of\n    *path_ids*, which is a list of arbitrary objects that the\n    backend will use to reference one of the paths created in the\n    :meth:`_iter_collection_raw_paths` stage.\n\n    Each yielded result is of the form::\n\n       xo, yo, path_id, gc, rgbFace\n\n    where *xo*, *yo* is an offset; *path_id* is one of the elements of\n    *path_ids*; *gc* is a graphics context and *rgbFace* is a color to\n    use for filling the path.\n    \"\"\"\n    Ntransforms = len(all_transforms)\n    Npaths = len(path_ids)\n    Noffsets = len(offsets)\n    N = max(Npaths, Noffsets)\n    Nfacecolors = len(facecolors)\n    Nedgecolors = len(edgecolors)\n    Nlinewidths = len(linewidths)\n    Nlinestyles = len(linestyles)\n    Naa = len(antialiaseds)\n    Nurls = len(urls)\n\n    if offset_position == \"data\":\n        cbook.warn_deprecated(\n            \"3.3\", message=\"Support for offset_position='data' is \"\n            \"deprecated since %(since)s and will be removed %(removal)s.\")\n\n    if (Nfacecolors == 0 and Nedgecolors == 0) or Npaths == 0:\n        return\n    if Noffsets:\n        toffsets = offsetTrans.transform(offsets)\n\n    gc0 = self.new_gc()\n    gc0.copy_properties(gc)\n\n    if Nfacecolors == 0:\n        rgbFace = None\n\n    if Nedgecolors == 0:\n        gc0.set_linewidth(0.0)\n\n    xo, yo = 0, 0\n    for i in range(N):\n        path_id = path_ids[i % Npaths]\n        if Noffsets:\n            xo, yo = toffsets[i % Noffsets]\n            if offset_position == 'data':\n                if Ntransforms:\n                    transform = (\n                        Affine2D(all_transforms[i % Ntransforms]) +\n                        master_transform)\n                else:\n                    transform = master_transform\n                (xo, yo), (xp, yp) = transform.transform(\n                    [(xo, yo), (0, 0)])\n                xo = -(xp - xo)\n                yo = -(yp - yo)\n        if not (np.isfinite(xo) and np.isfinite(yo)):\n            continue\n        if Nfacecolors:\n            rgbFace = facecolors[i % Nfacecolors]\n        if Nedgecolors:\n            if Nlinewidths:\n                gc0.set_linewidth(linewidths[i % Nlinewidths])\n            if Nlinestyles:\n                gc0.set_dashes(*linestyles[i % Nlinestyles])\n            fg = edgecolors[i % Nedgecolors]\n            if len(fg) == 4:\n                if fg[3] == 0.0:\n                    gc0.set_linewidth(0)\n                else:\n                    gc0.set_foreground(fg)\n            else:\n                gc0.set_foreground(fg)\n        if rgbFace is not None and len(rgbFace) == 4:\n            if rgbFace[3] == 0:\n                rgbFace = None\n        gc0.set_antialiased(antialiaseds[i % Naa])\n        if Nurls:\n            gc0.set_url(urls[i % Nurls])\n\n        yield xo, yo, path_id, gc0, rgbFace\n    gc0.restore()",
                "def get_image_magnification(self):\n    \"\"\"\n    Get the factor by which to magnify images passed to :meth:`draw_image`.\n    Allows a backend to have images at a different resolution to other\n    artists.\n    \"\"\"\n    return 1.0",
                "def draw_image(self, gc, x, y, im, transform=None):\n    \"\"\"\n    Draw an RGBA image.\n\n    Parameters\n    ----------\n    gc : `.GraphicsContextBase`\n        A graphics context with clipping information.\n\n    x : scalar\n        The distance in physical units (i.e., dots or pixels) from the left\n        hand side of the canvas.\n\n    y : scalar\n        The distance in physical units (i.e., dots or pixels) from the\n        bottom side of the canvas.\n\n    im : array-like, shape=(N, M, 4), dtype=np.uint8\n        An array of RGBA pixels.\n\n    transform : `matplotlib.transforms.Affine2DBase`\n        If and only if the concrete backend is written such that\n        :meth:`option_scale_image` returns ``True``, an affine\n        transformation (i.e., an `.Affine2DBase`) *may* be passed to\n        :meth:`draw_image`.  The translation vector of the transformation\n        is given in physical units (i.e., dots or pixels). Note that\n        the transformation does not override *x* and *y*, and has to be\n        applied *before* translating the result by *x* and *y* (this can\n        be accomplished by adding *x* and *y* to the translation vector\n        defined by *transform*).\n    \"\"\"\n    raise NotImplementedError",
                "def option_image_nocomposite(self):\n    \"\"\"\n    Return whether image composition by Matplotlib should be skipped.\n\n    Raster backends should usually return False (letting the C-level\n    rasterizer take care of image composition); vector backends should\n    usually return ``not rcParams[\"image.composite_image\"]``.\n    \"\"\"\n    return False",
                "def option_scale_image(self):\n    \"\"\"\n    Return whether arbitrary affine transformations in :meth:`draw_image`\n    are supported (True for most vector backends).\n    \"\"\"\n    return False",
                "@cbook._delete_parameter(\"3.3\", \"ismath\")\ndef draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None):\n    \"\"\"\n    \"\"\"\n    self._draw_text_as_path(gc, x, y, s, prop, angle, ismath=\"TeX\")",
                "def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):\n    \"\"\"\n    Draw the text instance.\n\n    Parameters\n    ----------\n    gc : `.GraphicsContextBase`\n        The graphics context.\n    x : float\n        The x location of the text in display coords.\n    y : float\n        The y location of the text baseline in display coords.\n    s : str\n        The text string.\n    prop : `matplotlib.font_manager.FontProperties`\n        The font properties.\n    angle : float\n        The rotation angle in degrees anti-clockwise.\n    mtext : `matplotlib.text.Text`\n        The original text object to be rendered.\n\n    Notes\n    -----\n    **Note for backend implementers:**\n\n    When you are trying to determine if you have gotten your bounding box\n    right (which is what enables the text layout/alignment to work\n    properly), it helps to change the line in text.py::\n\n        if 0: bbox_artist(self, renderer)\n\n    to if 1, and then the actual bounding box will be plotted along with\n    your text.\n    \"\"\"\n\n    self._draw_text_as_path(gc, x, y, s, prop, angle, ismath)",
                "def _get_text_path_transform(self, x, y, s, prop, angle, ismath):\n    \"\"\"\n    Return the text path and transform.\n\n    Parameters\n    ----------\n    prop : `matplotlib.font_manager.FontProperties`\n        The font property.\n    s : str\n        The text to be converted.\n    ismath : bool or \"TeX\"\n        If True, use mathtext parser. If \"TeX\", use *usetex* mode.\n    \"\"\"\n\n    text2path = self._text2path\n    fontsize = self.points_to_pixels(prop.get_size_in_points())\n    verts, codes = text2path.get_text_path(prop, s, ismath=ismath)\n\n    path = Path(verts, codes)\n    angle = np.deg2rad(angle)\n    if self.flipy():\n        width, height = self.get_canvas_width_height()\n        transform = (Affine2D()\n                     .scale(fontsize / text2path.FONT_SCALE)\n                     .rotate(angle)\n                     .translate(x, height - y))\n    else:\n        transform = (Affine2D()\n                     .scale(fontsize / text2path.FONT_SCALE)\n                     .rotate(angle)\n                     .translate(x, y))\n\n    return path, transform",
                "def _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath):\n    \"\"\"\n    Draw the text by converting them to paths using textpath module.\n\n    Parameters\n    ----------\n    prop : `matplotlib.font_manager.FontProperties`\n        The font property.\n    s : str\n        The text to be converted.\n    usetex : bool\n        Whether to use usetex mode.\n    ismath : bool or \"TeX\"\n        If True, use mathtext parser. If \"TeX\", use *usetex* mode.\n    \"\"\"\n    path, transform = self._get_text_path_transform(\n        x, y, s, prop, angle, ismath)\n    color = gc.get_rgb()\n    gc.set_linewidth(0.0)\n    self.draw_path(gc, path, transform, rgbFace=color)",
                "def get_text_width_height_descent(self, s, prop, ismath):\n    \"\"\"\n    Get the width, height, and descent (offset from the bottom\n    to the baseline), in display coords, of the string *s* with\n    `.FontProperties` *prop*.\n    \"\"\"\n    if ismath == 'TeX':\n        # todo: handle props\n        texmanager = self._text2path.get_texmanager()\n        fontsize = prop.get_size_in_points()\n        w, h, d = texmanager.get_text_width_height_descent(\n            s, fontsize, renderer=self)\n        return w, h, d\n\n    dpi = self.points_to_pixels(72)\n    if ismath:\n        dims = self._text2path.mathtext_parser.parse(s, dpi, prop)\n        return dims[0:3]  # return width, height, descent\n\n    flags = self._text2path._get_hinting_flag()\n    font = self._text2path._get_font(prop)\n    size = prop.get_size_in_points()\n    font.set_size(size, dpi)\n    # the width and height of unrotated string\n    font.set_text(s, 0.0, flags=flags)\n    w, h = font.get_width_height()\n    d = font.get_descent()\n    w /= 64.0  # convert from subpixels\n    h /= 64.0\n    d /= 64.0\n    return w, h, d",
                "def flipy(self):\n    \"\"\"\n    Return whether y values increase from top to bottom.\n\n    Note that this only affects drawing of texts and images.\n    \"\"\"\n    return True",
                "def get_canvas_width_height(self):\n    \"\"\"Return the canvas width and height in display coords.\"\"\"\n    return 1, 1",
                "def get_texmanager(self):\n    \"\"\"Return the `.TexManager` instance.\"\"\"\n    if self._texmanager is None:\n        from matplotlib.texmanager import TexManager\n        self._texmanager = TexManager()\n    return self._texmanager",
                "def new_gc(self):\n    \"\"\"Return an instance of a `.GraphicsContextBase`.\"\"\"\n    return GraphicsContextBase()",
                "def points_to_pixels(self, points):\n    \"\"\"\n    Convert points to display units.\n\n    You need to override this function (unless your backend\n    doesn't have a dpi, e.g., postscript or svg).  Some imaging\n    systems assume some value for pixels per inch::\n\n        points to pixels = points * pixels_per_inch/72 * dpi/72\n\n    Parameters\n    ----------\n    points : float or array-like\n        a float or a numpy array of float\n\n    Returns\n    -------\n    Points converted to pixels\n    \"\"\"\n    return points",
                "def start_rasterizing(self):\n    \"\"\"\n    Switch to the raster renderer.\n\n    Used by `.MixedModeRenderer`.\n    \"\"\"",
                "def stop_rasterizing(self):\n    \"\"\"\n    Switch back to the vector renderer and draw the contents of the raster\n    renderer as an image on the vector renderer.\n\n    Used by `.MixedModeRenderer`.\n    \"\"\"",
                "def start_filter(self):\n    \"\"\"\n    Switch to a temporary renderer for image filtering effects.\n\n    Currently only supported by the agg renderer.\n    \"\"\"",
                "def stop_filter(self, filter_func):\n    \"\"\"\n    Switch back to the original renderer.  The contents of the temporary\n    renderer is processed with the *filter_func* and is drawn on the\n    original renderer as an image.\n\n    Currently only supported by the agg renderer.\n    \"\"\"",
                "def __init__(self):\n    self._alpha = 1.0\n    self._forced_alpha = False  # if True, _alpha overrides A from RGBA\n    self._antialiased = 1  # use 0, 1 not True, False for extension code\n    self._capstyle = 'butt'\n    self._cliprect = None\n    self._clippath = None\n    self._dashes = 0, None\n    self._joinstyle = 'round'\n    self._linestyle = 'solid'\n    self._linewidth = 1\n    self._rgb = (0.0, 0.0, 0.0, 1.0)\n    self._hatch = None\n    self._hatch_color = colors.to_rgba(rcParams['hatch.color'])\n    self._hatch_linewidth = rcParams['hatch.linewidth']\n    self._url = None\n    self._gid = None\n    self._snap = None\n    self._sketch = None",
                "def copy_properties(self, gc):\n    \"\"\"Copy properties from *gc* to self.\"\"\"\n    self._alpha = gc._alpha\n    self._forced_alpha = gc._forced_alpha\n    self._antialiased = gc._antialiased\n    self._capstyle = gc._capstyle\n    self._cliprect = gc._cliprect\n    self._clippath = gc._clippath\n    self._dashes = gc._dashes\n    self._joinstyle = gc._joinstyle\n    self._linestyle = gc._linestyle\n    self._linewidth = gc._linewidth\n    self._rgb = gc._rgb\n    self._hatch = gc._hatch\n    self._hatch_color = gc._hatch_color\n    self._hatch_linewidth = gc._hatch_linewidth\n    self._url = gc._url\n    self._gid = gc._gid\n    self._snap = gc._snap\n    self._sketch = gc._sketch",
                "def restore(self):\n    \"\"\"\n    Restore the graphics context from the stack - needed only\n    for backends that save graphics contexts on a stack.\n    \"\"\"",
                "def get_alpha(self):\n    \"\"\"\n    Return the alpha value used for blending - not supported on all\n    backends.\n    \"\"\"\n    return self._alpha",
                "def get_antialiased(self):\n    \"\"\"Return whether the object should try to do antialiased rendering.\"\"\"\n    return self._antialiased",
                "def get_capstyle(self):\n    \"\"\"\n    Return the capstyle as a string in ('butt', 'round', 'projecting').\n    \"\"\"\n    return self._capstyle",
                "def get_clip_rectangle(self):\n    \"\"\"\n    Return the clip rectangle as a `~matplotlib.transforms.Bbox` instance.\n    \"\"\"\n    return self._cliprect",
                "def get_clip_path(self):\n    \"\"\"\n    Return the clip path in the form (path, transform), where path\n    is a `~.path.Path` instance, and transform is\n    an affine transform to apply to the path before clipping.\n    \"\"\"\n    if self._clippath is not None:\n        return self._clippath.get_transformed_path_and_affine()\n    return None, None",
                "def get_dashes(self):\n    \"\"\"\n    Return the dash style as an (offset, dash-list) pair.\n\n    The dash list is a even-length list that gives the ink on, ink off in\n    points.  See p. 107 of to PostScript `blue book`_ for more info.\n\n    Default value is (None, None).\n\n    .. _blue book: https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF\n    \"\"\"\n    return self._dashes",
                "def get_forced_alpha(self):\n    \"\"\"\n    Return whether the value given by get_alpha() should be used to\n    override any other alpha-channel values.\n    \"\"\"\n    return self._forced_alpha",
                "def get_joinstyle(self):\n    \"\"\"Return the line join style as one of ('miter', 'round', 'bevel').\"\"\"\n    return self._joinstyle",
                "def get_linewidth(self):\n    \"\"\"Return the line width in points.\"\"\"\n    return self._linewidth",
                "def get_rgb(self):\n    \"\"\"Return a tuple of three or four floats from 0-1.\"\"\"\n    return self._rgb",
                "def get_url(self):\n    \"\"\"Return a url if one is set, None otherwise.\"\"\"\n    return self._url",
                "def get_gid(self):\n    \"\"\"Return the object identifier if one is set, None otherwise.\"\"\"\n    return self._gid",
                "def get_snap(self):\n    \"\"\"\n    Return the snap setting, which can be:\n\n    * True: snap vertices to the nearest pixel center\n    * False: leave vertices as-is\n    * None: (auto) If the path contains only rectilinear line segments,\n      round to the nearest pixel center\n    \"\"\"\n    return self._snap",
                "def set_alpha(self, alpha):\n    \"\"\"\n    Set the alpha value used for blending - not supported on all backends.\n\n    If ``alpha=None`` (the default), the alpha components of the\n    foreground and fill colors will be used to set their respective\n    transparencies (where applicable); otherwise, ``alpha`` will override\n    them.\n    \"\"\"\n    if alpha is not None:\n        self._alpha = alpha\n        self._forced_alpha = True\n    else:\n        self._alpha = 1.0\n        self._forced_alpha = False\n    self.set_foreground(self._rgb, isRGBA=True)",
                "def set_antialiased(self, b):\n    \"\"\"Set whether object should be drawn with antialiased rendering.\"\"\"\n    # Use ints to make life easier on extension code trying to read the gc.\n    self._antialiased = int(bool(b))",
                "def set_capstyle(self, cs):\n    \"\"\"Set the capstyle to be one of ('butt', 'round', 'projecting').\"\"\"\n    cbook._check_in_list(['butt', 'round', 'projecting'], cs=cs)\n    self._capstyle = cs",
                "def set_clip_rectangle(self, rectangle):\n    \"\"\"\n    Set the clip rectangle with sequence (left, bottom, width, height)\n    \"\"\"\n    self._cliprect = rectangle",
                "def set_clip_path(self, path):\n    \"\"\"\n    Set the clip path and transformation.\n\n    Parameters\n    ----------\n    path : `~matplotlib.transforms.TransformedPath` or None\n    \"\"\"\n    cbook._check_isinstance((transforms.TransformedPath, None), path=path)\n    self._clippath = path",
                "def set_dashes(self, dash_offset, dash_list):\n    \"\"\"\n    Set the dash style for the gc.\n\n    Parameters\n    ----------\n    dash_offset : float or None\n        The offset (usually 0).\n    dash_list : array-like or None\n        The on-off sequence as points.\n\n    Notes\n    -----\n    ``(None, None)`` specifies a solid line.\n\n    See p. 107 of to PostScript `blue book`_ for more info.\n\n    .. _blue book: https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF\n    \"\"\"\n    if dash_list is not None:\n        dl = np.asarray(dash_list)\n        if np.any(dl < 0.0):\n            raise ValueError(\n                \"All values in the dash list must be positive\")\n    self._dashes = dash_offset, dash_list",
                "def set_foreground(self, fg, isRGBA=False):\n    \"\"\"\n    Set the foreground color.\n\n    Parameters\n    ----------\n    fg : color\n    isRGBA : bool\n        If *fg* is known to be an ``(r, g, b, a)`` tuple, *isRGBA* can be\n        set to True to improve performance.\n    \"\"\"\n    if self._forced_alpha and isRGBA:\n        self._rgb = fg[:3] + (self._alpha,)\n    elif self._forced_alpha:\n        self._rgb = colors.to_rgba(fg, self._alpha)\n    elif isRGBA:\n        self._rgb = fg\n    else:\n        self._rgb = colors.to_rgba(fg)",
                "def set_joinstyle(self, js):\n    \"\"\"Set the join style to be one of ('miter', 'round', 'bevel').\"\"\"\n    cbook._check_in_list(['miter', 'round', 'bevel'], js=js)\n    self._joinstyle = js",
                "def set_linewidth(self, w):\n    \"\"\"Set the linewidth in points.\"\"\"\n    self._linewidth = float(w)",
                "def set_url(self, url):\n    \"\"\"Set the url for links in compatible backends.\"\"\"\n    self._url = url",
                "def set_gid(self, id):\n    \"\"\"Set the id.\"\"\"\n    self._gid = id",
                "def set_snap(self, snap):\n    \"\"\"\n    Set the snap setting which may be:\n\n    * True: snap vertices to the nearest pixel center\n    * False: leave vertices as-is\n    * None: (auto) If the path contains only rectilinear line segments,\n      round to the nearest pixel center\n    \"\"\"\n    self._snap = snap",
                "def set_hatch(self, hatch):\n    \"\"\"Set the hatch style (for fills).\"\"\"\n    self._hatch = hatch",
                "def get_hatch(self):\n    \"\"\"Get the current hatch style.\"\"\"\n    return self._hatch",
                "def get_hatch_path(self, density=6.0):\n    \"\"\"Return a `.Path` for the current hatch.\"\"\"\n    hatch = self.get_hatch()\n    if hatch is None:\n        return None\n    return Path.hatch(hatch, density)",
                "def get_hatch_color(self):\n    \"\"\"Get the hatch color.\"\"\"\n    return self._hatch_color",
                "def set_hatch_color(self, hatch_color):\n    \"\"\"Set the hatch color.\"\"\"\n    self._hatch_color = hatch_color",
                "def get_hatch_linewidth(self):\n    \"\"\"Get the hatch linewidth.\"\"\"\n    return self._hatch_linewidth",
                "def get_sketch_params(self):\n    \"\"\"\n    Return the sketch parameters for the artist.\n\n    Returns\n    -------\n    tuple or `None`\n\n        A 3-tuple with the following elements:\n\n        * ``scale``: The amplitude of the wiggle perpendicular to the\n          source line.\n        * ``length``: The length of the wiggle along the line.\n        * ``randomness``: The scale factor by which the length is\n          shrunken or expanded.\n\n        May return `None` if no sketch parameters were set.\n    \"\"\"\n    return self._sketch",
                "def set_sketch_params(self, scale=None, length=None, randomness=None):\n    \"\"\"\n    Set the sketch parameters.\n\n    Parameters\n    ----------\n    scale : float, optional\n        The amplitude of the wiggle perpendicular to the source line, in\n        pixels.  If scale is `None`, or not provided, no sketch filter will\n        be provided.\n    length : float, default: 128\n         The length of the wiggle along the line, in pixels.\n    randomness : float, default: 16\n        The scale factor by which the length is shrunken or expanded.\n    \"\"\"\n    self._sketch = (\n        None if scale is None\n        else (scale, length or 128., randomness or 16.))",
                "def __init__(self, interval=None, callbacks=None):\n    \"\"\"\n    Parameters\n    ----------\n    interval : int, default: 1000ms\n        The time between timer events in milliseconds.  Will be stored as\n        ``timer.interval``.\n    callbacks : List[Tuple[callable, Tuple, Dict]]\n        List of (func, args, kwargs) tuples that will be called upon\n        timer events.  This list is accessible as ``timer.callbacks`` and\n        can be manipulated directly, or the functions `add_callback` and\n        `remove_callback` can be used.\n    \"\"\"\n    self.callbacks = [] if callbacks is None else callbacks.copy()\n    # Set .interval and not ._interval to go through the property setter.\n    self.interval = 1000 if interval is None else interval\n    self.single_shot = False",
                "def __del__(self):\n    \"\"\"Need to stop timer and possibly disconnect timer.\"\"\"\n    self._timer_stop()",
                "def start(self, interval=None):\n    \"\"\"\n    Start the timer object.\n\n    Parameters\n    ----------\n    interval : int, optional\n        Timer interval in milliseconds; overrides a previously set interval\n        if provided.\n    \"\"\"\n    if interval is not None:\n        self.interval = interval\n    self._timer_start()",
                "def stop(self):\n    \"\"\"Stop the timer.\"\"\"\n    self._timer_stop()",
                "def _timer_start(self):\n    pass",
                "def _timer_stop(self):\n    pass",
                "@property\ndef interval(self):\n    \"\"\"The time between timer events, in milliseconds.\"\"\"\n    return self._interval",
                "@interval.setter\ndef interval(self, interval):\n    # Force to int since none of the backends actually support fractional\n    # milliseconds, and some error or give warnings.\n    interval = int(interval)\n    self._interval = interval\n    self._timer_set_interval()",
                "@property\ndef single_shot(self):\n    \"\"\"Whether this timer should stop after a single run.\"\"\"\n    return self._single",
                "@single_shot.setter\ndef single_shot(self, ss):\n    self._single = ss\n    self._timer_set_single_shot()",
                "def add_callback(self, func, *args, **kwargs):\n    \"\"\"\n    Register *func* to be called by timer when the event fires. Any\n    additional arguments provided will be passed to *func*.\n\n    This function returns *func*, which makes it possible to use it as a\n    decorator.\n    \"\"\"\n    self.callbacks.append((func, args, kwargs))\n    return func",
                "def remove_callback(self, func, *args, **kwargs):\n    \"\"\"\n    Remove *func* from list of callbacks.\n\n    *args* and *kwargs* are optional and used to distinguish between copies\n    of the same function registered to be called with different arguments.\n    This behavior is deprecated.  In the future, ``*args, **kwargs`` won't\n    be considered anymore; to keep a specific callback removable by itself,\n    pass it to `add_callback` as a `functools.partial` object.\n    \"\"\"\n    if args or kwargs:\n        cbook.warn_deprecated(\n            \"3.1\", message=\"In a future version, Timer.remove_callback \"\n            \"will not take *args, **kwargs anymore, but remove all \"\n            \"callbacks where the callable matches; to keep a specific \"\n            \"callback removable by itself, pass it to add_callback as a \"\n            \"functools.partial object.\")\n        self.callbacks.remove((func, args, kwargs))\n    else:\n        funcs = [c[0] for c in self.callbacks]\n        if func in funcs:\n            self.callbacks.pop(funcs.index(func))",
                "def _timer_set_interval(self):\n    \"\"\"Used to set interval on underlying timer object.\"\"\"",
                "def _timer_set_single_shot(self):\n    \"\"\"Used to set single shot on underlying timer object.\"\"\"",
                "def _on_timer(self):\n    \"\"\"\n    Runs all function that have been registered as callbacks. Functions\n    can return False (or 0) if they should not be called any more. If there\n    are no callbacks, the timer is automatically stopped.\n    \"\"\"\n    for func, args, kwargs in self.callbacks:\n        ret = func(*args, **kwargs)\n        # docstring above explains why we use `if ret == 0` here,\n        # instead of `if not ret`.\n        # This will also catch `ret == False` as `False == 0`\n        # but does not annoy the linters\n        # https://docs.python.org/3/library/stdtypes.html#boolean-values\n        if ret == 0:\n            self.callbacks.remove((func, args, kwargs))\n\n    if len(self.callbacks) == 0:\n        self.stop()",
                "def __init__(self, name, canvas, guiEvent=None):\n    self.name = name\n    self.canvas = canvas\n    self.guiEvent = guiEvent",
                "def __init__(self, name, canvas, renderer):\n    Event.__init__(self, name, canvas)\n    self.renderer = renderer",
                "def __init__(self, name, canvas):\n    Event.__init__(self, name, canvas)\n    self.width, self.height = canvas.get_width_height()",
                "def __init__(self, name, canvas, x, y, guiEvent=None):\n    \"\"\"\n    (*x*, *y*) in figure coords ((0, 0) = bottom left).\n    \"\"\"\n    Event.__init__(self, name, canvas, guiEvent=guiEvent)\n    # x position - pixels from left of canvas\n    self.x = int(x) if x is not None else x\n    # y position - pixels from right of canvas\n    self.y = int(y) if y is not None else y\n    self.inaxes = None  # the Axes instance if mouse us over axes\n    self.xdata = None   # x coord of mouse in data coords\n    self.ydata = None   # y coord of mouse in data coords\n\n    if x is None or y is None:\n        # cannot check if event was in axes if no (x, y) info\n        self._update_enter_leave()\n        return\n\n    if self.canvas.mouse_grabber is None:\n        self.inaxes = self.canvas.inaxes((x, y))\n    else:\n        self.inaxes = self.canvas.mouse_grabber\n\n    if self.inaxes is not None:\n        try:\n            trans = self.inaxes.transData.inverted()\n            xdata, ydata = trans.transform((x, y))\n        except ValueError:\n            pass\n        else:\n            self.xdata = xdata\n            self.ydata = ydata\n\n    self._update_enter_leave()",
                "def _update_enter_leave(self):\n    \"\"\"Process the figure/axes enter leave events.\"\"\"\n    if LocationEvent.lastevent is not None:\n        last = LocationEvent.lastevent\n        if last.inaxes != self.inaxes:\n            # process axes enter/leave events\n            try:\n                if last.inaxes is not None:\n                    last.canvas.callbacks.process('axes_leave_event', last)\n            except Exception:\n                pass\n                # See ticket 2901582.\n                # I think this is a valid exception to the rule\n                # against catching all exceptions; if anything goes\n                # wrong, we simply want to move on and process the\n                # current event.\n            if self.inaxes is not None:\n                self.canvas.callbacks.process('axes_enter_event', self)\n\n    else:\n        # process a figure enter event\n        if self.inaxes is not None:\n            self.canvas.callbacks.process('axes_enter_event', self)\n\n    LocationEvent.lastevent = self",
                "def __init__(self, name, canvas, x, y, button=None, key=None,\n             step=0, dblclick=False, guiEvent=None):\n    \"\"\"\n    (*x*, *y*) in figure coords ((0, 0) = bottom left)\n    button pressed None, 1, 2, 3, 'up', 'down'\n    \"\"\"\n    LocationEvent.__init__(self, name, canvas, x, y, guiEvent=guiEvent)\n    if button in MouseButton.__members__.values():\n        button = MouseButton(button)\n    self.button = button\n    self.key = key\n    self.step = step\n    self.dblclick = dblclick",
                "def __str__(self):\n    return (f\"{self.name}: \"\n            f\"xy=({self.x}, {self.y}) xydata=({self.xdata}, {self.ydata}) \"\n            f\"button={self.button} dblclick={self.dblclick} \"\n            f\"inaxes={self.inaxes}\")",
                "def __init__(self, name, canvas, mouseevent, artist,\n             guiEvent=None, **kwargs):\n    Event.__init__(self, name, canvas, guiEvent)\n    self.mouseevent = mouseevent\n    self.artist = artist\n    self.__dict__.update(kwargs)",
                "def __init__(self, name, canvas, key, x=0, y=0, guiEvent=None):\n    LocationEvent.__init__(self, name, canvas, x, y, guiEvent=guiEvent)\n    self.key = key",
                "def _draw(renderer): raise Done(renderer)",
                "@cbook._classproperty\ndef supports_blit(cls):\n    return (hasattr(cls, \"copy_from_bbox\")\n            and hasattr(cls, \"restore_region\"))",
                "def __init__(self, figure):\n    self._fix_ipython_backend2gui()\n    self._is_idle_drawing = True\n    self._is_saving = False\n    figure.set_canvas(self)\n    self.figure = figure\n    self.manager = None\n    # a dictionary from event name to a dictionary that maps cid->func\n    self.callbacks = cbook.CallbackRegistry()\n    self.widgetlock = widgets.LockDraw()\n    self._button = None  # the button pressed\n    self._key = None  # the key pressed\n    self._lastx, self._lasty = None, None\n    self.button_pick_id = self.mpl_connect('button_press_event', self.pick)\n    self.scroll_pick_id = self.mpl_connect('scroll_event', self.pick)\n    self.mouse_grabber = None  # the axes currently grabbing mouse\n    self.toolbar = None  # NavigationToolbar2 will set me\n    self._is_idle_drawing = False",
                "@classmethod\n@functools.lru_cache()\ndef _fix_ipython_backend2gui(cls):\n    # Fix hard-coded module -> toolkit mapping in IPython (used for\n    # `ipython --auto`).  This cannot be done at import time due to\n    # ordering issues, so we do it when creating a canvas, and should only\n    # be done once per class (hence the `lru_cache(1)`).\n    if \"IPython\" not in sys.modules:\n        return\n    import IPython\n    ip = IPython.get_ipython()\n    if not ip:\n        return\n    from IPython.core import pylabtools as pt\n    if (not hasattr(pt, \"backend2gui\")\n            or not hasattr(ip, \"enable_matplotlib\")):\n        # In case we ever move the patch to IPython and remove these APIs,\n        # don't break on our side.\n        return\n    rif = getattr(cls, \"required_interactive_framework\", None)\n    backend2gui_rif = {\"qt5\": \"qt\", \"qt4\": \"qt\", \"gtk3\": \"gtk3\",\n                       \"wx\": \"wx\", \"macosx\": \"osx\"}.get(rif)\n    if backend2gui_rif:\n        if _is_non_interactive_terminal_ipython(ip):\n            ip.enable_gui(backend2gui_rif)",
                "@contextmanager\ndef _idle_draw_cntx(self):\n    self._is_idle_drawing = True\n    try:\n        yield\n    finally:\n        self._is_idle_drawing = False",
                "def is_saving(self):\n    \"\"\"\n    Return whether the renderer is in the process of saving\n    to a file, rather than rendering for an on-screen buffer.\n    \"\"\"\n    return self._is_saving",
                "def pick(self, mouseevent):\n    if not self.widgetlock.locked():\n        self.figure.pick(mouseevent)",
                "def blit(self, bbox=None):\n    \"\"\"Blit the canvas in bbox (default entire canvas).\"\"\"",
                "def resize(self, w, h):\n    \"\"\"Set the canvas size in pixels.\"\"\"",
                "def draw_event(self, renderer):\n    \"\"\"Pass a `DrawEvent` to all functions connected to ``draw_event``.\"\"\"\n    s = 'draw_event'\n    event = DrawEvent(s, self, renderer)\n    self.callbacks.process(s, event)",
                "def resize_event(self):\n    \"\"\"\n    Pass a `ResizeEvent` to all functions connected to ``resize_event``.\n    \"\"\"\n    s = 'resize_event'\n    event = ResizeEvent(s, self)\n    self.callbacks.process(s, event)\n    self.draw_idle()",
                "def close_event(self, guiEvent=None):\n    \"\"\"\n    Pass a `CloseEvent` to all functions connected to ``close_event``.\n    \"\"\"\n    s = 'close_event'\n    try:\n        event = CloseEvent(s, self, guiEvent=guiEvent)\n        self.callbacks.process(s, event)\n    except (TypeError, AttributeError):\n        pass",
                "def key_press_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_press_event``.\n    \"\"\"\n    self._key = key\n    s = 'key_press_event'\n    event = KeyEvent(\n        s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                "def key_release_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_release_event``.\n    \"\"\"\n    s = 'key_release_event'\n    event = KeyEvent(\n        s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._key = None",
                "def pick_event(self, mouseevent, artist, **kwargs):\n    \"\"\"\n    Callback processing for pick events.\n\n    This method will be called by artists who are picked and will\n    fire off `PickEvent` callbacks registered listeners.\n    \"\"\"\n    s = 'pick_event'\n    event = PickEvent(s, self, mouseevent, artist,\n                      guiEvent=mouseevent.guiEvent,\n                      **kwargs)\n    self.callbacks.process(s, event)",
                "def scroll_event(self, x, y, step, guiEvent=None):\n    \"\"\"\n    Callback processing for scroll events.\n\n    Backend derived classes should call this function on any\n    scroll wheel event.  (*x*, *y*) are the canvas coords ((0, 0) is lower\n    left).  button and key are as defined in `MouseEvent`.\n\n    This method will call all functions connected to the 'scroll_event'\n    with a `MouseEvent` instance.\n    \"\"\"\n    if step >= 0:\n        self._button = 'up'\n    else:\n        self._button = 'down'\n    s = 'scroll_event'\n    mouseevent = MouseEvent(s, self, x, y, self._button, self._key,\n                            step=step, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                "def button_press_event(self, x, y, button, dblclick=False, guiEvent=None):\n    \"\"\"\n    Callback processing for mouse button press events.\n\n    Backend derived classes should call this function on any mouse\n    button press.  (*x*, *y*) are the canvas coords ((0, 0) is lower left).\n    button and key are as defined in `MouseEvent`.\n\n    This method will call all functions connected to the\n    'button_press_event' with a `MouseEvent` instance.\n    \"\"\"\n    self._button = button\n    s = 'button_press_event'\n    mouseevent = MouseEvent(s, self, x, y, button, self._key,\n                            dblclick=dblclick, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                "def button_release_event(self, x, y, button, guiEvent=None):\n    \"\"\"\n    Callback processing for mouse button release events.\n\n    Backend derived classes should call this function on any mouse\n    button release.\n\n    This method will call all functions connected to the\n    'button_release_event' with a `MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    s = 'button_release_event'\n    event = MouseEvent(s, self, x, y, button, self._key, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._button = None",
                "def motion_notify_event(self, x, y, guiEvent=None):\n    \"\"\"\n    Callback processing for mouse movement events.\n\n    Backend derived classes should call this function on any\n    motion-notify-event.\n\n    This method will call all functions connected to the\n    'motion_notify_event' with a `MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self._lastx, self._lasty = x, y\n    s = 'motion_notify_event'\n    event = MouseEvent(s, self, x, y, self._button, self._key,\n                       guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                "def leave_notify_event(self, guiEvent=None):\n    \"\"\"\n    Callback processing for the mouse cursor leaving the canvas.\n\n    Backend derived classes should call this function when leaving\n    canvas.\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self.callbacks.process('figure_leave_event', LocationEvent.lastevent)\n    LocationEvent.lastevent = None\n    self._lastx, self._lasty = None, None",
                "def enter_notify_event(self, guiEvent=None, xy=None):\n    \"\"\"\n    Callback processing for the mouse cursor entering the canvas.\n\n    Backend derived classes should call this function when entering\n    canvas.\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    xy : (float, float)\n        The coordinate location of the pointer when the canvas is entered.\n    \"\"\"\n    if xy is not None:\n        x, y = xy\n        self._lastx, self._lasty = x, y\n    else:\n        x = None\n        y = None\n        cbook.warn_deprecated(\n            '3.0', removal='3.5', name='enter_notify_event',\n            message='Since %(since)s, %(name)s expects a location but '\n            'your backend did not pass one. This will become an error '\n            '%(removal)s.')\n\n    event = LocationEvent('figure_enter_event', self, x, y, guiEvent)\n    self.callbacks.process('figure_enter_event', event)",
                "def inaxes(self, xy):\n    \"\"\"\n    Return the topmost visible `~.axes.Axes` containing the point *xy*.\n\n    Parameters\n    ----------\n    xy : (float, float)\n        (x, y) pixel positions from left/bottom of the canvas.\n\n    Returns\n    -------\n    `~matplotlib.axes.Axes` or None\n        The topmost visible axes containing the point, or None if no axes.\n    \"\"\"\n    axes_list = [a for a in self.figure.get_axes()\n                 if a.patch.contains_point(xy) and a.get_visible()]\n    if axes_list:\n        axes = cbook._topmost_artist(axes_list)\n    else:\n        axes = None\n\n    return axes",
                "def grab_mouse(self, ax):\n    \"\"\"\n    Set the child `~.axes.Axes` which is grabbing the mouse events.\n\n    Usually called by the widgets themselves. It is an error to call this\n    if the mouse is already grabbed by another axes.\n    \"\"\"\n    if self.mouse_grabber not in (None, ax):\n        raise RuntimeError(\"Another Axes already grabs mouse input\")\n    self.mouse_grabber = ax",
                "def release_mouse(self, ax):\n    \"\"\"\n    Release the mouse grab held by the `~.axes.Axes` *ax*.\n\n    Usually called by the widgets. It is ok to call this even if *ax*\n    doesn't have the mouse grab currently.\n    \"\"\"\n    if self.mouse_grabber is ax:\n        self.mouse_grabber = None",
                "def draw(self, *args, **kwargs):\n    \"\"\"Render the `.Figure`.\"\"\"",
                "def draw_idle(self, *args, **kwargs):\n    \"\"\"\n    Request a widget redraw once control returns to the GUI event loop.\n\n    Even if multiple calls to `draw_idle` occur before control returns\n    to the GUI event loop, the figure will only be rendered once.\n\n    Notes\n    -----\n    Backends may choose to override the method and implement their own\n    strategy to prevent multiple renderings.\n\n    \"\"\"\n    if not self._is_idle_drawing:\n        with self._idle_draw_cntx():\n            self.draw(*args, **kwargs)",
                "@cbook.deprecated(\"3.2\")\ndef draw_cursor(self, event):\n    \"\"\"\n    Draw a cursor in the event.axes if inaxes is not None.  Use\n    native GUI drawing for efficiency if possible\n    \"\"\"",
                "def get_width_height(self):\n    \"\"\"\n    Return the figure width and height in points or pixels\n    (depending on the backend), truncated to integers.\n    \"\"\"\n    return int(self.figure.bbox.width), int(self.figure.bbox.height)",
                "@classmethod\ndef get_supported_filetypes(cls):\n    \"\"\"Return dict of savefig file formats supported by this backend.\"\"\"\n    return cls.filetypes",
                "@classmethod\ndef get_supported_filetypes_grouped(cls):\n    \"\"\"\n    Return a dict of savefig file formats supported by this backend,\n    where the keys are a file type name, such as 'Joint Photographic\n    Experts Group', and the values are a list of filename extensions used\n    for that filetype, such as ['jpg', 'jpeg'].\n    \"\"\"\n    groupings = {}\n    for ext, name in cls.filetypes.items():\n        groupings.setdefault(name, []).append(ext)\n        groupings[name].sort()\n    return groupings",
                "def _get_output_canvas(self, backend, fmt):\n    \"\"\"\n    Set the canvas in preparation for saving the figure.\n\n    Parameters\n    ----------\n    backend : str or None\n        If not None, switch the figure canvas to the ``FigureCanvas`` class\n        of the given backend.\n    fmt : str\n        If *backend* is None, then determine a suitable canvas class for\n        saving to format *fmt* -- either the current canvas class, if it\n        supports *fmt*, or whatever `get_registered_canvas_class` returns;\n        switch the figure canvas to that canvas class.\n    \"\"\"\n    if backend is not None:\n        # Return a specific canvas class, if requested.\n        canvas_class = (\n            importlib.import_module(cbook._backend_module_name(backend))\n            .FigureCanvas)\n        if not hasattr(canvas_class, f\"print_{fmt}\"):\n            raise ValueError(\n                f\"The {backend!r} backend does not support {fmt} output\")\n    elif hasattr(self, f\"print_{fmt}\"):\n        # Return the current canvas if it supports the requested format.\n        return self\n    else:\n        # Return a default canvas for the requested format, if it exists.\n        canvas_class = get_registered_canvas_class(fmt)\n    if canvas_class:\n        return self.switch_backends(canvas_class)\n    # Else report error for unsupported format.\n    raise ValueError(\n        \"Format {!r} is not supported (supported formats: {})\"\n        .format(fmt, \", \".join(sorted(self.get_supported_filetypes()))))",
                "def print_figure(\n        self, filename, dpi=None, facecolor=None, edgecolor=None,\n        orientation='portrait', format=None, *,\n        bbox_inches=None, pad_inches=None, bbox_extra_artists=None,\n        backend=None, **kwargs):\n    \"\"\"\n    Render the figure to hardcopy. Set the figure patch face and edge\n    colors.  This is useful because some of the GUIs have a gray figure\n    face color background and you'll probably want to override this on\n    hardcopy.\n\n    Parameters\n    ----------\n    filename : str or path-like or file-like\n        The file where the figure is saved.\n\n    dpi : float, default: :rc:`savefig.dpi`\n        The dots per inch to save the figure in.\n\n    facecolor : color or 'auto', default: :rc:`savefig.facecolor`\n        The facecolor of the figure.  If 'auto', use the current figure\n        facecolor.\n\n    edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`\n        The edgecolor of the figure.  If 'auto', use the current figure\n        edgecolor.\n\n    orientation : {'landscape', 'portrait'}, default: 'portrait'\n        Only currently applies to PostScript printing.\n\n    format : str, optional\n        Force a specific file format. If not given, the format is inferred\n        from the *filename* extension, and if that fails from\n        :rc:`savefig.format`.\n\n    bbox_inches : 'tight' or `.Bbox`, default: :rc:`savefig.bbox`\n        Bounding box in inches: only the given portion of the figure is\n        saved.  If 'tight', try to figure out the tight bbox of the figure.\n\n    pad_inches : float, default: :rc:`savefig.pad_inches`\n        Amount of padding around the figure when *bbox_inches* is 'tight'.\n\n    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n        A list of extra artists that will be considered when the\n        tight bbox is calculated.\n\n    backend : str, optional\n        Use a non-default backend to render the file, e.g. to render a\n        png file with the \"cairo\" backend rather than the default \"agg\",\n        or a pdf file with the \"pgf\" backend rather than the default\n        \"pdf\".  Note that the default backend is normally sufficient.  See\n        :ref:`the-builtin-backends` for a list of valid backends for each\n        file format.  Custom backends can be referenced as \"module://...\".\n    \"\"\"\n    if format is None:\n        # get format from filename, or from backend's default filetype\n        if isinstance(filename, os.PathLike):\n            filename = os.fspath(filename)\n        if isinstance(filename, str):\n            format = os.path.splitext(filename)[1][1:]\n        if format is None or format == '':\n            format = self.get_default_filetype()\n            if isinstance(filename, str):\n                filename = filename.rstrip('.') + '.' + format\n    format = format.lower()\n\n    # get canvas object and print method for format\n    canvas = self._get_output_canvas(backend, format)\n    print_method = getattr(canvas, 'print_%s' % format)\n\n    if dpi is None:\n        dpi = rcParams['savefig.dpi']\n    if dpi == 'figure':\n        dpi = getattr(self.figure, '_original_dpi', self.figure.dpi)\n\n    # Remove the figure manager, if any, to avoid resizing the GUI widget.\n    # Some code (e.g. Figure.show) differentiates between having *no*\n    # manager and a *None* manager, which should be fixed at some point,\n    # but this should be fine.\n    with cbook._setattr_cm(self, _is_saving=True, manager=None), \\\n            cbook._setattr_cm(self.figure, dpi=dpi):\n        origfacecolor = self.figure.get_facecolor()\n        origedgecolor = self.figure.get_edgecolor()\n\n        if facecolor is None:\n            facecolor = rcParams['savefig.facecolor']\n        if cbook._str_equal(facecolor, 'auto'):\n            facecolor = origfacecolor\n        if edgecolor is None:\n            edgecolor = rcParams['savefig.edgecolor']\n        if cbook._str_equal(edgecolor, 'auto'):\n            edgecolor = origedgecolor\n\n        self.figure.set_facecolor(facecolor)\n        self.figure.set_edgecolor(edgecolor)\n\n        if bbox_inches is None:\n            bbox_inches = rcParams['savefig.bbox']\n        if bbox_inches:\n            if bbox_inches == \"tight\":\n                renderer = _get_renderer(\n                    self.figure,\n                    functools.partial(\n                        print_method, orientation=orientation),\n                    draw_disabled=True)\n                self.figure.draw(renderer)\n                bbox_inches = self.figure.get_tightbbox(\n                    renderer, bbox_extra_artists=bbox_extra_artists)\n                if pad_inches is None:\n                    pad_inches = rcParams['savefig.pad_inches']\n                bbox_inches = bbox_inches.padded(pad_inches)\n\n            # call adjust_bbox to save only the given area\n            restore_bbox = tight_bbox.adjust_bbox(self.figure, bbox_inches,\n                                                  canvas.fixed_dpi)\n\n            _bbox_inches_restore = (bbox_inches, restore_bbox)\n        else:\n            _bbox_inches_restore = None\n\n        try:\n            result = print_method(\n                filename,\n                dpi=dpi,\n                facecolor=facecolor,\n                edgecolor=edgecolor,\n                orientation=orientation,\n                bbox_inches_restore=_bbox_inches_restore,\n                **kwargs)\n        finally:\n            if bbox_inches and restore_bbox:\n                restore_bbox()\n\n            self.figure.set_facecolor(origfacecolor)\n            self.figure.set_edgecolor(origedgecolor)\n            self.figure.set_canvas(self)\n        return result",
                "@classmethod\ndef get_default_filetype(cls):\n    \"\"\"\n    Return the default savefig file format as specified in\n    :rc:`savefig.format`.\n\n    The returned string does not include a period. This method is\n    overridden in backends that only support a single file type.\n    \"\"\"\n    return rcParams['savefig.format']",
                "def get_window_title(self):\n    \"\"\"\n    Return the title text of the window containing the figure, or None\n    if there is no window (e.g., a PS backend).\n    \"\"\"\n    if self.manager:\n        return self.manager.get_window_title()",
                "def set_window_title(self, title):\n    \"\"\"\n    Set the title text of the window containing the figure.  Note that\n    this has no effect if there is no window (e.g., a PS backend).\n    \"\"\"\n    if hasattr(self, \"manager\"):\n        self.manager.set_window_title(title)",
                "def get_default_filename(self):\n    \"\"\"\n    Return a string, which includes extension, suitable for use as\n    a default filename.\n    \"\"\"\n    default_basename = self.get_window_title() or 'image'\n    default_basename = default_basename.replace(' ', '_')\n    default_filetype = self.get_default_filetype()\n    default_filename = default_basename + '.' + default_filetype\n    return default_filename",
                "def switch_backends(self, FigureCanvasClass):\n    \"\"\"\n    Instantiate an instance of FigureCanvasClass\n\n    This is used for backend switching, e.g., to instantiate a\n    FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is\n    not done, so any changes to one of the instances (e.g., setting\n    figure size or line props), will be reflected in the other\n    \"\"\"\n    newCanvas = FigureCanvasClass(self.figure)\n    newCanvas._is_saving = self._is_saving\n    return newCanvas",
                "def mpl_connect(self, s, func):\n    \"\"\"\n    Bind function *func* to event *s*.\n\n    Parameters\n    ----------\n    s : str\n        One of the following events ids:\n\n        - 'button_press_event'\n        - 'button_release_event'\n        - 'draw_event'\n        - 'key_press_event'\n        - 'key_release_event'\n        - 'motion_notify_event'\n        - 'pick_event'\n        - 'resize_event'\n        - 'scroll_event'\n        - 'figure_enter_event',\n        - 'figure_leave_event',\n        - 'axes_enter_event',\n        - 'axes_leave_event'\n        - 'close_event'.\n\n    func : callable\n        The callback function to be executed, which must have the\n        signature::\n\n            def func(event: Event) -> Any\n\n        For the location events (button and key press/release), if the\n        mouse is over the axes, the ``inaxes`` attribute of the event will\n        be set to the `~matplotlib.axes.Axes` the event occurs is over, and\n        additionally, the variables ``xdata`` and ``ydata`` attributes will\n        be set to the mouse location in data coordinates.  See `.KeyEvent`\n        and `.MouseEvent` for more info.\n\n    Returns\n    -------\n    cid\n        A connection id that can be used with\n        `.FigureCanvasBase.mpl_disconnect`.\n\n    Examples\n    --------\n    ::\n\n        def on_press(event):\n            print('you pressed', event.button, event.xdata, event.ydata)\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n    \"\"\"\n\n    return self.callbacks.connect(s, func)",
                "def mpl_disconnect(self, cid):\n    \"\"\"\n    Disconnect the callback with id *cid*.\n\n    Examples\n    --------\n    ::\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n        # ... later\n        canvas.mpl_disconnect(cid)\n    \"\"\"\n    return self.callbacks.disconnect(cid)",
                "def new_timer(self, interval=None, callbacks=None):\n    \"\"\"\n    Create a new backend-specific subclass of `.Timer`.\n\n    This is useful for getting periodic events through the backend's native\n    event loop.  Implemented only for backends with GUIs.\n\n    Parameters\n    ----------\n    interval : int\n        Timer interval in milliseconds.\n\n    callbacks : List[Tuple[callable, Tuple, Dict]]\n        Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n        will be executed by the timer every *interval*.\n\n        Callbacks which return ``False`` or ``0`` will be removed from the\n        timer.\n\n    Examples\n    --------\n    >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1,), {'a': 3})])\n    \"\"\"\n    return self._timer_cls(interval=interval, callbacks=callbacks)",
                "def flush_events(self):\n    \"\"\"\n    Flush the GUI events for the figure.\n\n    Interactive backends need to reimplement this method.\n    \"\"\"",
                "def start_event_loop(self, timeout=0):\n    \"\"\"\n    Start a blocking event loop.\n\n    Such an event loop is used by interactive functions, such as\n    `~.Figure.ginput` and `~.Figure.waitforbuttonpress`, to wait for\n    events.\n\n    The event loop blocks until a callback function triggers\n    `stop_event_loop`, or *timeout* is reached.\n\n    If *timeout* is negative, never timeout.\n\n    Only interactive backends need to reimplement this method and it relies\n    on `flush_events` being properly implemented.\n\n    Interactive backends should implement this in a more native way.\n    \"\"\"\n    if timeout <= 0:\n        timeout = np.inf\n    timestep = 0.01\n    counter = 0\n    self._looping = True\n    while self._looping and counter * timestep < timeout:\n        self.flush_events()\n        time.sleep(timestep)\n        counter += 1",
                "def stop_event_loop(self):\n    \"\"\"\n    Stop the current blocking event loop.\n\n    Interactive backends need to reimplement this to match\n    `start_event_loop`\n    \"\"\"\n    self._looping = False",
                "def _get_uniform_gridstate(ticks):\n    # Return True/False if all grid lines are on or off, None if they are\n    # not all in the same state.\n    if all(tick.gridline.get_visible() for tick in ticks):\n        return True\n    elif not any(tick.gridline.get_visible() for tick in ticks):\n        return False\n    else:\n        return None",
                "def __init__(self, canvas, num):\n    self.canvas = canvas\n    canvas.manager = self  # store a pointer to parent\n    self.num = num\n\n    self.key_press_handler_id = None\n    self.button_press_handler_id = None\n    if rcParams['toolbar'] != 'toolmanager':\n        self.key_press_handler_id = self.canvas.mpl_connect(\n            'key_press_event',\n            self.key_press)\n        self.button_press_handler_id = self.canvas.mpl_connect(\n            'button_press_event',\n            self.button_press)\n\n    self.toolmanager = (ToolManager(canvas.figure)\n                        if mpl.rcParams['toolbar'] == 'toolmanager'\n                        else None)\n    self.toolbar = None\n\n    @self.canvas.figure.add_axobserver\n    def notify_axes_change(fig):\n        # Called whenever the current axes is changed.\n        if self.toolmanager is None and self.toolbar is not None:\n            self.toolbar.update()",
                "@cbook.deprecated(\"3.3\")\n@property\ndef statusbar(self):\n    return None",
                "def show(self):\n    \"\"\"\n    For GUI backends, show the figure window and redraw.\n    For non-GUI backends, raise an exception, unless running headless (i.e.\n    on Linux with an unset DISPLAY); this exception is converted to a\n    warning in `.Figure.show`.\n    \"\"\"\n    # This should be overridden in GUI backends.\n    if cbook._get_running_interactive_framework() != \"headless\":\n        raise NonGuiException(\n            f\"Matplotlib is currently using {get_backend()}, which is \"\n            f\"a non-GUI backend, so cannot show the figure.\")",
                "def destroy(self):\n    pass",
                "def full_screen_toggle(self):\n    pass",
                "def resize(self, w, h):\n    \"\"\"For GUI backends, resize the window (in pixels).\"\"\"",
                "def key_press(self, event):\n    \"\"\"\n    Implement the default Matplotlib key bindings defined at\n    :ref:`key-event-handling`.\n    \"\"\"\n    if rcParams['toolbar'] != 'toolmanager':\n        key_press_handler(event)",
                "def button_press(self, event):\n    \"\"\"The default Matplotlib button actions for extra mouse buttons.\"\"\"\n    if rcParams['toolbar'] != 'toolmanager':\n        button_press_handler(event)",
                "def get_window_title(self):\n    \"\"\"\n    Return the title text of the window containing the figure, or None\n    if there is no window (e.g., a PS backend).\n    \"\"\"\n    return 'image'",
                "def set_window_title(self, title):\n    \"\"\"\n    Set the title text of the window containing the figure.\n\n    This has no effect for non-GUI (e.g., PS) backends.\n    \"\"\"",
                "def __str__(self):\n    return self.value",
                "def __init__(self, canvas):\n    self.canvas = canvas\n    canvas.toolbar = self\n    self._nav_stack = cbook.Stack()\n    self._xypress = None  # location and axis info at the time of the press\n    # This cursor will be set after the initial draw.\n    self._lastCursor = cursors.POINTER\n\n    init = cbook._deprecate_method_override(\n        __class__._init_toolbar, self, allow_empty=True, since=\"3.3\",\n        addendum=\"Please fully initialize the toolbar in your subclass' \"\n        \"__init__; a fully empty _init_toolbar implementation may be kept \"\n        \"for compatibility with earlier versions of Matplotlib.\")\n    if init:\n        init()\n\n    self._id_press = self.canvas.mpl_connect(\n        'button_press_event', self._zoom_pan_handler)\n    self._id_release = self.canvas.mpl_connect(\n        'button_release_event', self._zoom_pan_handler)\n    self._id_drag = self.canvas.mpl_connect(\n        'motion_notify_event', self.mouse_move)\n    self._zoom_info = None\n\n    self._button_pressed = None  # determined by button pressed at start\n\n    self.mode = _Mode.NONE  # a mode string for the status bar\n    self.set_history_buttons()",
                "def set_message(self, s):\n    \"\"\"Display a message on toolbar or in status bar.\"\"\"",
                "def back(self, *args):\n    \"\"\"\n    Move back up the view lim stack.\n\n    For convenience of being directly connected as a GUI callback, which\n    often get passed additional parameters, this method accepts arbitrary\n    parameters, but does not use them.\n    \"\"\"\n    self._nav_stack.back()\n    self.set_history_buttons()\n    self._update_view()",
                "def draw_rubberband(self, event, x0, y0, x1, y1):\n    \"\"\"\n    Draw a rectangle rubberband to indicate zoom limits.\n\n    Note that it is not guaranteed that ``x0 <= x1`` and ``y0 <= y1``.\n    \"\"\"",
                "def remove_rubberband(self):\n    \"\"\"Remove the rubberband.\"\"\"",
                "def forward(self, *args):\n    \"\"\"\n    Move forward in the view lim stack.\n\n    For convenience of being directly connected as a GUI callback, which\n    often get passed additional parameters, this method accepts arbitrary\n    parameters, but does not use them.\n    \"\"\"\n    self._nav_stack.forward()\n    self.set_history_buttons()\n    self._update_view()",
                "def home(self, *args):\n    \"\"\"\n    Restore the original view.\n\n    For convenience of being directly connected as a GUI callback, which\n    often get passed additional parameters, this method accepts arbitrary\n    parameters, but does not use them.\n    \"\"\"\n    self._nav_stack.home()\n    self.set_history_buttons()\n    self._update_view()",
                "@cbook.deprecated(\"3.3\", alternative=\"__init__\")\ndef _init_toolbar(self):\n    \"\"\"\n    This is where you actually build the GUI widgets (called by\n    __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,\n    ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard\n    across backends (there are ppm versions in CVS also).\n\n    You just need to set the callbacks\n\n    home         : self.home\n    back         : self.back\n    forward      : self.forward\n    hand         : self.pan\n    zoom_to_rect : self.zoom\n    filesave     : self.save_figure\n\n    You only need to define the last one - the others are in the base\n    class implementation.\n\n    \"\"\"\n    raise NotImplementedError",
                "def _update_cursor(self, event):\n    \"\"\"\n    Update the cursor after a mouse move event or a tool (de)activation.\n    \"\"\"\n    if not event.inaxes or not self.mode:\n        if self._lastCursor != cursors.POINTER:\n            self.set_cursor(cursors.POINTER)\n            self._lastCursor = cursors.POINTER\n    else:\n        if (self.mode == _Mode.ZOOM\n                and self._lastCursor != cursors.SELECT_REGION):\n            self.set_cursor(cursors.SELECT_REGION)\n            self._lastCursor = cursors.SELECT_REGION\n        elif (self.mode == _Mode.PAN\n              and self._lastCursor != cursors.MOVE):\n            self.set_cursor(cursors.MOVE)\n            self._lastCursor = cursors.MOVE",
                "@contextmanager\ndef _wait_cursor_for_draw_cm(self):\n    \"\"\"\n    Set the cursor to a wait cursor when drawing the canvas.\n\n    In order to avoid constantly changing the cursor when the canvas\n    changes frequently, do nothing if this context was triggered during the\n    last second.  (Optimally we'd prefer only setting the wait cursor if\n    the *current* draw takes too long, but the current draw blocks the GUI\n    thread).\n    \"\"\"\n    self._draw_time, last_draw_time = (\n        time.time(), getattr(self, \"_draw_time\", -np.inf))\n    if self._draw_time - last_draw_time > 1:\n        try:\n            self.set_cursor(cursors.WAIT)\n            yield\n        finally:\n            self.set_cursor(self._lastCursor)\n    else:\n        yield",
                "def mouse_move(self, event):\n    self._update_cursor(event)\n\n    if event.inaxes and event.inaxes.get_navigate():\n\n        try:\n            s = event.inaxes.format_coord(event.xdata, event.ydata)\n        except (ValueError, OverflowError):\n            pass\n        else:\n            s = s.rstrip()\n            artists = [a for a in event.inaxes._mouseover_set\n                       if a.contains(event)[0] and a.get_visible()]\n            if artists:\n                a = cbook._topmost_artist(artists)\n                if a is not event.inaxes.patch:\n                    data = a.get_cursor_data(event)\n                    if data is not None:\n                        data_str = a.format_cursor_data(data).rstrip()\n                        if data_str:\n                            s = s + '\\n' + data_str\n            self.set_message(s)\n    else:\n        self.set_message(self.mode)",
                "def _zoom_pan_handler(self, event):\n    if self.mode == _Mode.PAN:\n        if event.name == \"button_press_event\":\n            self.press_pan(event)\n        elif event.name == \"button_release_event\":\n            self.release_pan(event)\n    if self.mode == _Mode.ZOOM:\n        if event.name == \"button_press_event\":\n            self.press_zoom(event)\n        elif event.name == \"button_release_event\":\n            self.release_zoom(event)",
                "def pan(self, *args):\n    \"\"\"\n    Toggle the pan/zoom tool.\n\n    Pan with left button, zoom with right.\n    \"\"\"\n    if self.mode == _Mode.PAN:\n        self.mode = _Mode.NONE\n        self.canvas.widgetlock.release(self)\n    else:\n        self.mode = _Mode.PAN\n        self.canvas.widgetlock(self)\n    for a in self.canvas.figure.get_axes():\n        a.set_navigate_mode(self.mode)\n    self.set_message(self.mode)",
                "@cbook.deprecated(\"3.3\")\ndef press(self, event):\n    \"\"\"Called whenever a mouse button is pressed.\"\"\"",
                "def press_pan(self, event):\n    \"\"\"Callback for mouse button press in pan/zoom mode.\"\"\"\n    if event.button in [1, 3]:\n        self._button_pressed = event.button\n    else:\n        self._button_pressed = None\n        return\n    if self._nav_stack() is None:\n        # set the home button to this view\n        self.push_current()\n    x, y = event.x, event.y\n    self._xypress = []\n    for i, a in enumerate(self.canvas.figure.get_axes()):\n        if (x is not None and y is not None and a.in_axes(event) and\n                a.get_navigate() and a.can_pan()):\n            a.start_pan(x, y, event.button)\n            self._xypress.append((a, i))\n            self.canvas.mpl_disconnect(self._id_drag)\n            self._id_drag = self.canvas.mpl_connect(\n                'motion_notify_event', self.drag_pan)\n    press = cbook._deprecate_method_override(\n        __class__.press, self, since=\"3.3\", message=\"Calling an \"\n        \"overridden press() at pan start is deprecated since %(since)s \"\n        \"and will be removed %(removal)s; override press_pan() instead.\")\n    if press is not None:\n        press(event)",
                "def press_zoom(self, event):\n    \"\"\"Callback for mouse button press in zoom to rect mode.\"\"\"\n    if event.button not in [1, 3]:\n        return\n    if event.x is None or event.y is None:\n        return\n    axes = [a for a in self.canvas.figure.get_axes()\n            if a.in_axes(event) and a.get_navigate() and a.can_zoom()]\n    if not axes:\n        return\n    if self._nav_stack() is None:\n        self.push_current()  # set the home button to this view\n    id_zoom = self.canvas.mpl_connect(\n        \"motion_notify_event\", self.drag_zoom)\n    self._zoom_info = {\n        \"direction\": \"in\" if event.button == 1 else \"out\",\n        \"start_xy\": (event.x, event.y),\n        \"axes\": axes,\n        \"cid\": id_zoom,\n    }\n    press = cbook._deprecate_method_override(\n        __class__.press, self, since=\"3.3\", message=\"Calling an \"\n        \"overridden press() at zoom start is deprecated since %(since)s \"\n        \"and will be removed %(removal)s; override press_zoom() instead.\")\n    if press is not None:\n        press(event)",
                "def push_current(self):\n    \"\"\"Push the current view limits and position onto the stack.\"\"\"\n    self._nav_stack.push(\n        WeakKeyDictionary(\n            {ax: (ax._get_view(),\n                  # Store both the original and modified positions.\n                  (ax.get_position(True).frozen(),\n                   ax.get_position().frozen()))\n             for ax in self.canvas.figure.axes}))\n    self.set_history_buttons()",
                "@cbook.deprecated(\"3.3\")\ndef release(self, event):\n    \"\"\"Callback for mouse button release.\"\"\"",
                "def release_pan(self, event):\n    \"\"\"Callback for mouse button release in pan/zoom mode.\"\"\"\n\n    if self._button_pressed is None:\n        return\n    self.canvas.mpl_disconnect(self._id_drag)\n    self._id_drag = self.canvas.mpl_connect(\n        'motion_notify_event', self.mouse_move)\n    for a, ind in self._xypress:\n        a.end_pan()\n    if not self._xypress:\n        return\n    self._xypress = []\n    self._button_pressed = None\n    self.push_current()\n    release = cbook._deprecate_method_override(\n        __class__.press, self, since=\"3.3\", message=\"Calling an \"\n        \"overridden release() at pan stop is deprecated since %(since)s \"\n        \"and will be removed %(removal)s; override release_pan() instead.\")\n    if release is not None:\n        release(event)\n    self._draw()",
                "def drag_pan(self, event):\n    \"\"\"Callback for dragging in pan/zoom mode.\"\"\"\n    for a, ind in self._xypress:\n        #safer to use the recorded button at the press than current button:\n        #multiple button can get pressed during motion...\n        a.drag_pan(self._button_pressed, event.key, event.x, event.y)\n    self.canvas.draw_idle()",
                "def drag_zoom(self, event):\n    \"\"\"Callback for dragging in zoom mode.\"\"\"\n    start_xy = self._zoom_info[\"start_xy\"]\n    ax = self._zoom_info[\"axes\"][0]\n    (x1, y1), (x2, y2) = np.clip(\n        [start_xy, [event.x, event.y]], ax.bbox.min, ax.bbox.max)\n    if event.key == \"x\":\n        y1, y2 = ax.bbox.intervaly\n    elif event.key == \"y\":\n        x1, x2 = ax.bbox.intervalx\n    self.draw_rubberband(event, x1, y1, x2, y2)",
                "def release_zoom(self, event):\n    \"\"\"Callback for mouse button release in zoom to rect mode.\"\"\"\n    if self._zoom_info is None:\n        return\n\n    # We don't check the event button here, so that zooms can be cancelled\n    # by (pressing and) releasing another mouse button.\n    self.canvas.mpl_disconnect(self._zoom_info[\"cid\"])\n    self.remove_rubberband()\n\n    start_x, start_y = self._zoom_info[\"start_xy\"]\n\n    for i, ax in enumerate(self._zoom_info[\"axes\"]):\n        x, y = event.x, event.y\n        # ignore singular clicks - 5 pixels is a threshold\n        # allows the user to \"cancel\" a zoom action\n        # by zooming by less than 5 pixels\n        if ((abs(x - start_x) < 5 and event.key != \"y\") or\n                (abs(y - start_y) < 5 and event.key != \"x\")):\n            self._xypress = None\n            release = cbook._deprecate_method_override(\n                __class__.press, self, since=\"3.3\", message=\"Calling an \"\n                \"overridden release() at zoom stop is deprecated since \"\n                \"%(since)s and will be removed %(removal)s; override \"\n                \"release_zoom() instead.\")\n            if release is not None:\n                release(event)\n            self._draw()\n            return\n\n        # Detect whether this axes is twinned with an earlier axes in the\n        # list of zoomed axes, to avoid double zooming.\n        twinx = any(ax.get_shared_x_axes().joined(ax, prev)\n                    for prev in self._zoom_info[\"axes\"][:i])\n        twiny = any(ax.get_shared_y_axes().joined(ax, prev)\n                    for prev in self._zoom_info[\"axes\"][:i])\n\n        ax._set_view_from_bbox(\n            (start_x, start_y, x, y), self._zoom_info[\"direction\"],\n            event.key, twinx, twiny)\n\n    self._draw()\n    self._zoom_info = None\n\n    self.push_current()\n    release = cbook._deprecate_method_override(\n        __class__.release, self, since=\"3.3\", message=\"Calling an \"\n        \"overridden release() at zoom stop is deprecated since %(since)s \"\n        \"and will be removed %(removal)s; override release_zoom() \"\n        \"instead.\")\n    if release is not None:\n        release(event)",
                "@cbook.deprecated(\"3.3\", alternative=\"toolbar.canvas.draw_idle()\")\ndef draw(self):\n    \"\"\"Redraw the canvases, update the locators.\"\"\"\n    self._draw()",
                "def _draw(self):\n    for a in self.canvas.figure.get_axes():\n        xaxis = getattr(a, 'xaxis', None)\n        yaxis = getattr(a, 'yaxis', None)\n        locators = []\n        if xaxis is not None:\n            locators.append(xaxis.get_major_locator())\n            locators.append(xaxis.get_minor_locator())\n        if yaxis is not None:\n            locators.append(yaxis.get_major_locator())\n            locators.append(yaxis.get_minor_locator())\n\n        for loc in locators:\n            mpl.ticker._if_refresh_overridden_call_and_emit_deprec(loc)\n    self.canvas.draw_idle()",
                "def _update_view(self):\n    \"\"\"\n    Update the viewlim and position from the view and position stack for\n    each axes.\n    \"\"\"\n    nav_info = self._nav_stack()\n    if nav_info is None:\n        return\n    # Retrieve all items at once to avoid any risk of GC deleting an Axes\n    # while in the middle of the loop below.\n    items = list(nav_info.items())\n    for ax, (view, (pos_orig, pos_active)) in items:\n        ax._set_view(view)\n        # Restore both the original and modified positions\n        ax._set_position(pos_orig, 'original')\n        ax._set_position(pos_active, 'active')\n    self.canvas.draw_idle()",
                "def save_figure(self, *args):\n    \"\"\"Save the current figure.\"\"\"\n    raise NotImplementedError",
                "def set_cursor(self, cursor):\n    \"\"\"\n    Set the current cursor to one of the :class:`Cursors` enums values.\n\n    If required by the backend, this method should trigger an update in\n    the backend event loop after the cursor is set, as this method may be\n    called e.g. before a long-running task during which the GUI is not\n    updated.\n    \"\"\"",
                "def update(self):\n    \"\"\"Reset the axes stack.\"\"\"\n    self._nav_stack.clear()\n    self.set_history_buttons()",
                "def zoom(self, *args):\n    \"\"\"Toggle zoom to rect mode.\"\"\"\n    if self.mode == _Mode.ZOOM:\n        self.mode = _Mode.NONE\n        self.canvas.widgetlock.release(self)\n    else:\n        self.mode = _Mode.ZOOM\n        self.canvas.widgetlock(self)\n    for a in self.canvas.figure.get_axes():\n        a.set_navigate_mode(self.mode)\n    self.set_message(self.mode)",
                "def set_history_buttons(self):\n    \"\"\"Enable or disable the back/forward button.\"\"\"",
                "def __init__(self, toolmanager):\n    self.toolmanager = toolmanager\n    toolmanager.toolmanager_connect(\n        'tool_message_event',\n        lambda event: self.set_message(event.message))\n    toolmanager.toolmanager_connect(\n        'tool_removed_event',\n        lambda event: self.remove_toolitem(event.tool.name))",
                "def _tool_toggled_cbk(self, event):\n    \"\"\"\n    Capture the 'tool_trigger_[name]'\n\n    This only gets used for toggled tools.\n    \"\"\"\n    self.toggle_toolitem(event.tool.name, event.tool.toggled)",
                "def add_tool(self, tool, group, position=-1):\n    \"\"\"\n    Add a tool to this container.\n\n    Parameters\n    ----------\n    tool : tool_like\n        The tool to add, see `.ToolManager.get_tool`.\n    group : str\n        The name of the group to add this tool to.\n    position : int, default: -1\n        The position within the group to place this tool.\n    \"\"\"\n    tool = self.toolmanager.get_tool(tool)\n    image = self._get_image_filename(tool.image)\n    toggle = getattr(tool, 'toggled', None) is not None\n    self.add_toolitem(tool.name, group, position,\n                      image, tool.description, toggle)\n    if toggle:\n        self.toolmanager.toolmanager_connect('tool_trigger_%s' % tool.name,\n                                             self._tool_toggled_cbk)\n        # If initially toggled\n        if tool.toggled:\n            self.toggle_toolitem(tool.name, True)",
                "def _get_image_filename(self, image):\n    \"\"\"Find the image based on its name.\"\"\"\n    if not image:\n        return None\n\n    basedir = cbook._get_data_path(\"images\")\n    for fname in [\n        image,\n        image + self._icon_extension,\n        str(basedir / image),\n        str(basedir / (image + self._icon_extension)),\n    ]:\n        if os.path.isfile(fname):\n            return fname",
                "def trigger_tool(self, name):\n    \"\"\"\n    Trigger the tool.\n\n    Parameters\n    ----------\n    name : str\n        Name (id) of the tool triggered from within the container.\n    \"\"\"\n    self.toolmanager.trigger_tool(name, sender=self)",
                "def add_toolitem(self, name, group, position, image, description, toggle):\n    \"\"\"\n    Add a toolitem to the container.\n\n    This method must be implemented per backend.\n\n    The callback associated with the button click event,\n    must be *exactly* ``self.trigger_tool(name)``.\n\n    Parameters\n    ----------\n    name : str\n        Name of the tool to add, this gets used as the tool's ID and as the\n        default label of the buttons.\n    group : str\n        Name of the group that this tool belongs to.\n    position : int\n        Position of the tool within its group, if -1 it goes at the end.\n    image_file : str\n        Filename of the image for the button or `None`.\n    description : str\n        Description of the tool, used for the tooltips.\n    toggle : bool\n        * `True` : The button is a toggle (change the pressed/unpressed\n          state between consecutive clicks).\n        * `False` : The button is a normal button (returns to unpressed\n          state after release).\n    \"\"\"\n    raise NotImplementedError",
                "def toggle_toolitem(self, name, toggled):\n    \"\"\"\n    Toggle the toolitem without firing event.\n\n    Parameters\n    ----------\n    name : str\n        Id of the tool to toggle.\n    toggled : bool\n        Whether to set this tool as toggled or not.\n    \"\"\"\n    raise NotImplementedError",
                "def remove_toolitem(self, name):\n    \"\"\"\n    Remove a toolitem from the `ToolContainer`.\n\n    This method must get implemented per backend.\n\n    Called when `.ToolManager` emits a `tool_removed_event`.\n\n    Parameters\n    ----------\n    name : str\n        Name of the tool to remove.\n    \"\"\"\n    raise NotImplementedError",
                "def set_message(self, s):\n    \"\"\"\n    Display a message on the toolbar.\n\n    Parameters\n    ----------\n    s : str\n        Message text.\n    \"\"\"\n    raise NotImplementedError",
                "def __init__(self, toolmanager):\n    self.toolmanager = toolmanager\n    self.toolmanager.toolmanager_connect('tool_message_event',\n                                         self._message_cbk)",
                "def _message_cbk(self, event):\n    \"\"\"Capture the 'tool_message_event' and set the message.\"\"\"\n    self.set_message(event.message)",
                "def set_message(self, s):\n    \"\"\"\n    Display a message on toolbar or in status bar.\n\n    Parameters\n    ----------\n    s : str\n        Message text.\n    \"\"\"",
                "@classmethod\ndef new_figure_manager(cls, num, *args, **kwargs):\n    \"\"\"Create a new figure manager instance.\"\"\"\n    # This import needs to happen here due to circular imports.\n    from matplotlib.figure import Figure\n    fig_cls = kwargs.pop('FigureClass', Figure)\n    fig = fig_cls(*args, **kwargs)\n    return cls.new_figure_manager_given_figure(num, fig)",
                "@classmethod\ndef new_figure_manager_given_figure(cls, num, figure):\n    \"\"\"Create a new figure manager instance for the given figure.\"\"\"\n    canvas = cls.FigureCanvas(figure)\n    manager = cls.FigureManager(canvas, num)\n    return manager",
                "@classmethod\ndef draw_if_interactive(cls):\n    if cls.trigger_manager_draw is not None and is_interactive():\n        manager = Gcf.get_active()\n        if manager:\n            cls.trigger_manager_draw(manager)",
                "@classmethod\ndef show(cls, *, block=None):\n    \"\"\"\n    Show all figures.\n\n    `show` blocks by calling `mainloop` if *block* is ``True``, or if it\n    is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in\n    `interactive` mode.\n    \"\"\"\n    managers = Gcf.get_all_fig_managers()\n    if not managers:\n        return\n    for manager in managers:\n        try:\n            manager.show()  # Emits a warning for non-interactive backend.\n        except NonGuiException as exc:\n            cbook._warn_external(str(exc))\n    if cls.mainloop is None:\n        return\n    if block is None:\n        # Hack: Are we in IPython's pylab mode?\n        from matplotlib import pyplot\n        try:\n            # IPython versions >= 0.10 tack the _needmain attribute onto\n            # pyplot.show, and always set it to False, when in %pylab mode.\n            ipython_pylab = not pyplot.show._needmain\n        except AttributeError:\n            ipython_pylab = False\n        block = not ipython_pylab and not is_interactive()\n        # TODO: The above is a hack to get the WebAgg backend working with\n        # ipython's `%pylab` mode until proper integration is implemented.\n        if get_backend() == \"WebAgg\":\n            block = True\n    if block:\n        cls.mainloop()",
                "@staticmethod\ndef export(cls):\n    for name in [\n            \"backend_version\",\n            \"FigureCanvas\",\n            \"FigureManager\",\n            \"new_figure_manager\",\n            \"new_figure_manager_given_figure\",\n            \"draw_if_interactive\",\n            \"show\",\n    ]:\n        setattr(sys.modules[cls.__module__], name, getattr(cls, name))\n\n    # For back-compatibility, generate a shim `Show` class.\n\n    class Show(ShowBase):\n        def mainloop(self):\n            return cls.mainloop()\n\n    setattr(sys.modules[cls.__module__], \"Show\", Show)\n    return cls",
                "def __call__(self, block=None):\n    return self.show(block=block)",
                "@self.canvas.figure.add_axobserver\ndef notify_axes_change(fig):\n    # Called whenever the current axes is changed.\n    if self.toolmanager is None and self.toolbar is not None:\n        self.toolbar.update()",
                "def mainloop(self):\n    return cls.mainloop()"
            ],
            "inscope_function_signatures": [
                "register_backend(format, backend, description=None)",
                "get_registered_canvas_class(format)",
                "_get_renderer(figure, print_method=None)",
                "_is_non_interactive_terminal_ipython(ip)",
                "key_press_handler(event, canvas=None, toolbar=None)",
                "button_press_handler(event, canvas=None, toolbar=None)",
                "__init__(self)",
                "open_group(self, s, gid=None)",
                "close_group(self, s)",
                "draw_path(self, gc, path, transform, rgbFace=None)",
                "draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None)",
                "draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)",
                "draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)",
                "draw_gouraud_triangle(self, gc, points, colors, transform)",
                "draw_gouraud_triangles(self, gc, triangles_array, colors_array, transform)",
                "_iter_collection_raw_paths(self, master_transform, paths, all_transforms)",
                "_iter_collection_uses_per_path(self, paths, all_transforms, offsets, facecolors, edgecolors)",
                "_iter_collection(self, gc, master_transform, all_transforms, path_ids, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)",
                "get_image_magnification(self)",
                "draw_image(self, gc, x, y, im, transform=None)",
                "option_image_nocomposite(self)",
                "option_scale_image(self)",
                "draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None)",
                "draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None)",
                "_get_text_path_transform(self, x, y, s, prop, angle, ismath)",
                "_draw_text_as_path(self, gc, x, y, s, prop, angle, ismath)",
                "get_text_width_height_descent(self, s, prop, ismath)",
                "flipy(self)",
                "get_canvas_width_height(self)",
                "get_texmanager(self)",
                "new_gc(self)",
                "points_to_pixels(self, points)",
                "start_rasterizing(self)",
                "stop_rasterizing(self)",
                "start_filter(self)",
                "stop_filter(self, filter_func)",
                "__init__(self)",
                "copy_properties(self, gc)",
                "restore(self)",
                "get_alpha(self)",
                "get_antialiased(self)",
                "get_capstyle(self)",
                "get_clip_rectangle(self)",
                "get_clip_path(self)",
                "get_dashes(self)",
                "get_forced_alpha(self)",
                "get_joinstyle(self)",
                "get_linewidth(self)",
                "get_rgb(self)",
                "get_url(self)",
                "get_gid(self)",
                "get_snap(self)",
                "set_alpha(self, alpha)",
                "set_antialiased(self, b)",
                "set_capstyle(self, cs)",
                "set_clip_rectangle(self, rectangle)",
                "set_clip_path(self, path)",
                "set_dashes(self, dash_offset, dash_list)",
                "set_foreground(self, fg, isRGBA=False)",
                "set_joinstyle(self, js)",
                "set_linewidth(self, w)",
                "set_url(self, url)",
                "set_gid(self, id)",
                "set_snap(self, snap)",
                "set_hatch(self, hatch)",
                "get_hatch(self)",
                "get_hatch_path(self, density=6.0)",
                "get_hatch_color(self)",
                "set_hatch_color(self, hatch_color)",
                "get_hatch_linewidth(self)",
                "get_sketch_params(self)",
                "set_sketch_params(self, scale=None, length=None, randomness=None)",
                "__init__(self, interval=None, callbacks=None)",
                "__del__(self)",
                "start(self, interval=None)",
                "stop(self)",
                "_timer_start(self)",
                "_timer_stop(self)",
                "interval(self)",
                "interval(self, interval)",
                "single_shot(self)",
                "single_shot(self, ss)",
                "add_callback(self, func, *args, **kwargs)",
                "remove_callback(self, func, *args, **kwargs)",
                "_timer_set_interval(self)",
                "_timer_set_single_shot(self)",
                "_on_timer(self)",
                "__init__(self, name, canvas, guiEvent=None)",
                "__init__(self, name, canvas, renderer)",
                "__init__(self, name, canvas)",
                "__init__(self, name, canvas, x, y, guiEvent=None)",
                "_update_enter_leave(self)",
                "__init__(self, name, canvas, x, y, button=None, key=None, step=0, dblclick=False, guiEvent=None)",
                "__str__(self)",
                "__init__(self, name, canvas, mouseevent, artist, guiEvent=None, **kwargs)",
                "__init__(self, name, canvas, key, x=0, y=0, guiEvent=None)",
                "_draw(renderer)",
                "supports_blit(cls)",
                "__init__(self, figure)",
                "_fix_ipython_backend2gui(cls)",
                "_idle_draw_cntx(self)",
                "is_saving(self)",
                "pick(self, mouseevent)",
                "blit(self, bbox=None)",
                "resize(self, w, h)",
                "draw_event(self, renderer)",
                "resize_event(self)",
                "close_event(self, guiEvent=None)",
                "key_press_event(self, key, guiEvent=None)",
                "key_release_event(self, key, guiEvent=None)",
                "pick_event(self, mouseevent, artist, **kwargs)",
                "scroll_event(self, x, y, step, guiEvent=None)",
                "button_press_event(self, x, y, button, dblclick=False, guiEvent=None)",
                "button_release_event(self, x, y, button, guiEvent=None)",
                "motion_notify_event(self, x, y, guiEvent=None)",
                "leave_notify_event(self, guiEvent=None)",
                "enter_notify_event(self, guiEvent=None, xy=None)",
                "inaxes(self, xy)",
                "grab_mouse(self, ax)",
                "release_mouse(self, ax)",
                "draw(self, *args, **kwargs)",
                "draw_idle(self, *args, **kwargs)",
                "draw_cursor(self, event)",
                "get_width_height(self)",
                "get_supported_filetypes(cls)",
                "get_supported_filetypes_grouped(cls)",
                "_get_output_canvas(self, backend, fmt)",
                "print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, **kwargs)",
                "get_default_filetype(cls)",
                "get_window_title(self)",
                "set_window_title(self, title)",
                "get_default_filename(self)",
                "switch_backends(self, FigureCanvasClass)",
                "mpl_connect(self, s, func)",
                "mpl_disconnect(self, cid)",
                "new_timer(self, interval=None, callbacks=None)",
                "flush_events(self)",
                "start_event_loop(self, timeout=0)",
                "stop_event_loop(self)",
                "_get_uniform_gridstate(ticks)",
                "__init__(self, canvas, num)",
                "statusbar(self)",
                "show(self)",
                "destroy(self)",
                "full_screen_toggle(self)",
                "resize(self, w, h)",
                "key_press(self, event)",
                "button_press(self, event)",
                "get_window_title(self)",
                "set_window_title(self, title)",
                "__str__(self)",
                "__init__(self, canvas)",
                "set_message(self, s)",
                "back(self, *args)",
                "draw_rubberband(self, event, x0, y0, x1, y1)",
                "remove_rubberband(self)",
                "forward(self, *args)",
                "home(self, *args)",
                "_init_toolbar(self)",
                "_update_cursor(self, event)",
                "_wait_cursor_for_draw_cm(self)",
                "mouse_move(self, event)",
                "_zoom_pan_handler(self, event)",
                "pan(self, *args)",
                "press(self, event)",
                "press_pan(self, event)",
                "press_zoom(self, event)",
                "push_current(self)",
                "release(self, event)",
                "release_pan(self, event)",
                "drag_pan(self, event)",
                "drag_zoom(self, event)",
                "release_zoom(self, event)",
                "draw(self)",
                "_draw(self)",
                "_update_view(self)",
                "save_figure(self, *args)",
                "set_cursor(self, cursor)",
                "update(self)",
                "zoom(self, *args)",
                "set_history_buttons(self)",
                "__init__(self, toolmanager)",
                "_tool_toggled_cbk(self, event)",
                "add_tool(self, tool, group, position=-1)",
                "_get_image_filename(self, image)",
                "trigger_tool(self, name)",
                "add_toolitem(self, name, group, position, image, description, toggle)",
                "toggle_toolitem(self, name, toggled)",
                "remove_toolitem(self, name)",
                "set_message(self, s)",
                "__init__(self, toolmanager)",
                "_message_cbk(self, event)",
                "set_message(self, s)",
                "new_figure_manager(cls, num, *args, **kwargs)",
                "new_figure_manager_given_figure(cls, num, figure)",
                "draw_if_interactive(cls)",
                "show(cls)",
                "export(cls)",
                "__call__(self, block=None)",
                "notify_axes_change(fig)",
                "mainloop(self)"
            ],
            "variables_in_file": {
                "_log": [
                    2482,
                    51,
                    2469
                ],
                "logging.getLogger": [
                    51
                ],
                "logging": [
                    51
                ],
                "__name__": [
                    51
                ],
                "_default_filetypes": [
                    100,
                    52,
                    1588
                ],
                "_default_backends": [
                    99,
                    67,
                    108,
                    110,
                    113
                ],
                "description": [
                    97,
                    98,
                    100
                ],
                "format": [
                    99,
                    100,
                    2052,
                    1990,
                    2053,
                    2054,
                    2056,
                    2057,
                    108,
                    2060,
                    110,
                    2061,
                    113,
                    2047
                ],
                "backend": [
                    99,
                    2060,
                    1972,
                    1975,
                    1979
                ],
                "backend_class": [
                    110,
                    111,
                    112,
                    113,
                    114
                ],
                "isinstance": [
                    2049,
                    2051,
                    2055,
                    111
                ],
                "str": [
                    2051,
                    2469,
                    2055,
                    3246,
                    111,
                    3247,
                    2482,
                    2676,
                    2522,
                    3422
                ],
                "FigureCanvas": [
                    112,
                    3367,
                    1975
                ],
                "importlib.import_module": [
                    112,
                    1975
                ],
                "importlib": [
                    112,
                    1975
                ],
                "__init__": [
                    139
                ],
                "super": [
                    139
                ],
                "self._texmanager": [
                    652,
                    650,
                    140,
                    653
                ],
                "self": [
                    2054,
                    2060,
                    2066,
                    2072,
                    2073,
                    2074,
                    2075,
                    2086,
                    2087,
                    2094,
                    2098,
                    2099,
                    2106,
                    2126,
                    2127,
                    2128,
                    2147,
                    2148,
                    2155,
                    2156,
                    2163,
                    2165,
                    2178,
                    2179,
                    140,
                    141,
                    2235,
                    190,
                    2249,
                    222,
                    225,
                    2278,
                    238,
                    256,
                    2309,
                    2310,
                    2311,
                    2322,
                    299,
                    396,
                    510,
                    2593,
                    2594,
                    547,
                    2595,
                    2597,
                    2598,
                    2600,
                    2602,
                    2603,
                    2605,
                    2607,
                    2610,
                    563,
                    564,
                    2612,
                    2615,
                    2616,
                    569,
                    570,
                    598,
                    602,
                    612,
                    615,
                    618,
                    620,
                    623,
                    624,
                    2682,
                    650,
                    652,
                    653,
                    2740,
                    2741,
                    2742,
                    2743,
                    2745,
                    2748,
                    2755,
                    2756,
                    2757,
                    2758,
                    2759,
                    2760,
                    2761,
                    2763,
                    716,
                    2765,
                    2766,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    2780,
                    2781,
                    730,
                    731,
                    732,
                    733,
                    2779,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    2801,
                    2802,
                    2803,
                    2813,
                    2814,
                    767,
                    2815,
                    771,
                    777,
                    783,
                    791,
                    792,
                    2844,
                    2845,
                    2846,
                    2847,
                    2849,
                    2850,
                    2851,
                    2852,
                    2853,
                    806,
                    2854,
                    2855,
                    2856,
                    813,
                    817,
                    821,
                    2869,
                    2870,
                    2871,
                    825,
                    2873,
                    2876,
                    829,
                    833,
                    2881,
                    844,
                    2901,
                    2903,
                    856,
                    857,
                    2906,
                    859,
                    860,
                    861,
                    2908,
                    2910,
                    2911,
                    2913,
                    866,
                    2915,
                    871,
                    2923,
                    2924,
                    877,
                    2925,
                    2927,
                    2928,
                    2929,
                    2930,
                    2931,
                    888,
                    2940,
                    2942,
                    2944,
                    2946,
                    2948,
                    2949,
                    2953,
                    2954,
                    2955,
                    2956,
                    2958,
                    914,
                    2970,
                    2974,
                    927,
                    928,
                    929,
                    930,
                    2975,
                    932,
                    2976,
                    934,
                    2977,
                    2978,
                    2985,
                    939,
                    943,
                    2993,
                    947,
                    951,
                    2999,
                    3000,
                    3009,
                    962,
                    3011,
                    3012,
                    3013,
                    966,
                    3014,
                    3016,
                    970,
                    3018,
                    3019,
                    3020,
                    974,
                    3022,
                    3027,
                    981,
                    3031,
                    985,
                    3034,
                    3035,
                    989,
                    3039,
                    3040,
                    3047,
                    3051,
                    3056,
                    1009,
                    3057,
                    3059,
                    3061,
                    3068,
                    3070,
                    1026,
                    3076,
                    3082,
                    3084,
                    3087,
                    3090,
                    3091,
                    3093,
                    3095,
                    3105,
                    3110,
                    1070,
                    1072,
                    1073,
                    3123,
                    1077,
                    3130,
                    1090,
                    1091,
                    3141,
                    1095,
                    1106,
                    3159,
                    3160,
                    1113,
                    1114,
                    3164,
                    3165,
                    3166,
                    1119,
                    3168,
                    3169,
                    3170,
                    1123,
                    1124,
                    3171,
                    3172,
                    1134,
                    3196,
                    3199,
                    1154,
                    3202,
                    1156,
                    1158,
                    3210,
                    1172,
                    3225,
                    3226,
                    1180,
                    3228,
                    1182,
                    1183,
                    3231,
                    3232,
                    3235,
                    3245,
                    3247,
                    1202,
                    1203,
                    1204,
                    3261,
                    1230,
                    1231,
                    1249,
                    1250,
                    1287,
                    1289,
                    3337,
                    1291,
                    1292,
                    1293,
                    1294,
                    3338,
                    3339,
                    3343,
                    1298,
                    1301,
                    1302,
                    1304,
                    1306,
                    1308,
                    1313,
                    1314,
                    1316,
                    1322,
                    1334,
                    1335,
                    1339,
                    1340,
                    1342,
                    1410,
                    1413,
                    1414,
                    1415,
                    1416,
                    1419,
                    1420,
                    1421,
                    1422,
                    3475,
                    1460,
                    1461,
                    1462,
                    1463,
                    1501,
                    1502,
                    1596,
                    1597,
                    1598,
                    1599,
                    1600,
                    1601,
                    1603,
                    1604,
                    1605,
                    1606,
                    1607,
                    1608,
                    1609,
                    1610,
                    1611,
                    1612,
                    1642,
                    1646,
                    1653,
                    1656,
                    1657,
                    1668,
                    1669,
                    1676,
                    1677,
                    1678,
                    1686,
                    1687,
                    1700,
                    1703,
                    1704,
                    1712,
                    1713,
                    1714,
                    1724,
                    1727,
                    1741,
                    1743,
                    1745,
                    1747,
                    1760,
                    1762,
                    1764,
                    1786,
                    1787,
                    1788,
                    1809,
                    1811,
                    1813,
                    1827,
                    1829,
                    1847,
                    1857,
                    1858,
                    1874,
                    1890,
                    1892,
                    1901,
                    1902,
                    1920,
                    1921,
                    1922,
                    1936,
                    1980,
                    1982,
                    1987,
                    1991
                ],
                "self._text2path": [
                    612,
                    620,
                    141,
                    623,
                    624,
                    563
                ],
                "textpath.TextToPath": [
                    141
                ],
                "textpath": [
                    141
                ],
                "NotImplementedError": [
                    3330,
                    487,
                    3304,
                    3145,
                    3319,
                    2838,
                    279,
                    3291,
                    159
                ],
                "vertices": [
                    187,
                    188,
                    189
                ],
                "codes": [
                    187,
                    565,
                    567
                ],
                "path.iter_segments": [
                    187
                ],
                "path": [
                    229,
                    326,
                    581,
                    329,
                    238,
                    887,
                    598,
                    567,
                    888,
                    602,
                    187
                ],
                "trans": [
                    187,
                    1308,
                    1309
                ],
                "len": [
                    384,
                    2432,
                    2451,
                    1182,
                    431,
                    438,
                    188,
                    317,
                    318,
                    2499,
                    341,
                    342,
                    344,
                    345,
                    375,
                    376,
                    377,
                    379,
                    380,
                    381,
                    382,
                    383
                ],
                "x": [
                    1410,
                    2947,
                    2950,
                    2952,
                    1289,
                    3087,
                    1296,
                    1809,
                    1811,
                    1302,
                    1309,
                    547,
                    1846,
                    1847,
                    1849,
                    189,
                    574,
                    192,
                    1857,
                    3066,
                    579,
                    1745,
                    599,
                    1501,
                    1762,
                    3062,
                    1786,
                    510
                ],
                "y": [
                    1410,
                    2947,
                    2950,
                    2952,
                    1291,
                    3087,
                    1296,
                    1809,
                    1811,
                    1302,
                    1309,
                    547,
                    1846,
                    1847,
                    1850,
                    189,
                    574,
                    192,
                    1857,
                    579,
                    1745,
                    599,
                    1501,
                    1762,
                    3062,
                    1786,
                    3067,
                    510
                ],
                "self.draw_path": [
                    602,
                    190,
                    238
                ],
                "gc": [
                    257,
                    397,
                    547,
                    299,
                    190,
                    600,
                    601,
                    602,
                    737,
                    226,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    254,
                    510
                ],
                "marker_path": [
                    190
                ],
                "marker_trans": [
                    191
                ],
                "translate": [
                    192,
                    576,
                    571
                ],
                "transforms.Affine2D": [
                    192
                ],
                "transforms": [
                    192,
                    324,
                    887
                ],
                "rgbFace": [
                    193,
                    225,
                    424,
                    238,
                    400,
                    438,
                    439,
                    440,
                    445
                ],
                "path_ids": [
                    376,
                    226,
                    222,
                    407
                ],
                "self._iter_collection_raw_paths": [
                    222
                ],
                "master_transform": [
                    416,
                    257,
                    226,
                    329,
                    222,
                    414
                ],
                "paths": [
                    257,
                    326,
                    341,
                    249,
                    317,
                    223
                ],
                "all_transforms": [
                    226,
                    328,
                    375,
                    344,
                    413,
                    318,
                    223
                ],
                "xo": [
                    225,
                    417,
                    418,
                    419,
                    421,
                    232,
                    237,
                    405,
                    409,
                    445
                ],
                "yo": [
                    225,
                    417,
                    418,
                    420,
                    421,
                    232,
                    237,
                    405,
                    409,
                    445
                ],
                "path_id": [
                    225,
                    445,
                    229,
                    407
                ],
                "gc0": [
                    225,
                    427,
                    396,
                    397,
                    238,
                    429,
                    433,
                    403,
                    435,
                    437,
                    441,
                    443,
                    445,
                    446
                ],
                "self._iter_collection": [
                    225
                ],
                "list": [
                    226,
                    3135
                ],
                "offsets": [
                    257,
                    226,
                    377,
                    394,
                    345
                ],
                "offsetTrans": [
                    257,
                    394,
                    227
                ],
                "facecolors": [
                    257,
                    227,
                    424,
                    342,
                    379,
                    253
                ],
                "edgecolors": [
                    258,
                    227,
                    430,
                    342,
                    380,
                    252,
                    253
                ],
                "linewidths": [
                    258,
                    227,
                    427,
                    381,
                    254
                ],
                "linestyles": [
                    227,
                    429,
                    382
                ],
                "antialiaseds": [
                    441,
                    228,
                    383
                ],
                "urls": [
                    384,
                    443,
                    228
                ],
                "offset_position": [
                    386,
                    228,
                    410
                ],
                "transform": [
                    416,
                    417,
                    576,
                    324,
                    229,
                    581,
                    328,
                    297,
                    329,
                    299,
                    236,
                    237,
                    238,
                    598,
                    602,
                    571,
                    412
                ],
                "transform.frozen": [
                    297,
                    236
                ],
                "transform.translate": [
                    237
                ],
                "QuadMesh.convert_mesh_to_paths": [
                    249
                ],
                "QuadMesh": [
                    249
                ],
                "meshWidth": [
                    250
                ],
                "meshHeight": [
                    250
                ],
                "coordinates": [
                    250
                ],
                "np.array": [
                    254
                ],
                "np": [
                    3041,
                    2306,
                    421,
                    910,
                    911,
                    2870,
                    568,
                    254
                ],
                "gc.get_linewidth": [
                    254
                ],
                "float": [
                    254,
                    943
                ],
                "self.draw_path_collection": [
                    256
                ],
                "antialiased": [
                    258
                ],
                "tri": [
                    298,
                    299
                ],
                "col": [
                    298,
                    299
                ],
                "zip": [
                    298
                ],
                "triangles_array": [
                    298
                ],
                "colors_array": [
                    298
                ],
                "self.draw_gouraud_triangle": [
                    299
                ],
                "Npaths": [
                    321,
                    376,
                    326,
                    391,
                    341,
                    342,
                    407,
                    344,
                    378,
                    317,
                    319
                ],
                "Ntransforms": [
                    327,
                    328,
                    375,
                    411,
                    413,
                    318,
                    319
                ],
                "N": [
                    325,
                    378,
                    406,
                    345,
                    346,
                    319
                ],
                "max": [
                    344,
                    345,
                    378,
                    319
                ],
                "transforms.IdentityTransform": [
                    324
                ],
                "i": [
                    2949,
                    2953,
                    3082,
                    3084,
                    406,
                    407,
                    409,
                    413,
                    424,
                    427,
                    429,
                    430,
                    441,
                    443,
                    2500,
                    325,
                    326,
                    328,
                    2507,
                    3061
                ],
                "range": [
                    325,
                    406
                ],
                "Affine2D": [
                    328,
                    576,
                    571,
                    413
                ],
                "Npath_ids": [
                    344,
                    345,
                    346
                ],
                "Noffsets": [
                    393,
                    409,
                    408,
                    377,
                    378
                ],
                "Nfacecolors": [
                    423,
                    424,
                    391,
                    399,
                    379
                ],
                "Nedgecolors": [
                    391,
                    425,
                    430,
                    402,
                    380
                ],
                "Nlinewidths": [
                    426,
                    427,
                    381
                ],
                "Nlinestyles": [
                    428,
                    429,
                    382
                ],
                "Naa": [
                    441,
                    383
                ],
                "Nurls": [
                    384,
                    442,
                    443
                ],
                "cbook.warn_deprecated": [
                    387,
                    2503,
                    2490,
                    1851,
                    1148
                ],
                "cbook": [
                    2817,
                    387,
                    1924,
                    3333,
                    2957,
                    3094,
                    2072,
                    2073,
                    3102,
                    2079,
                    2083,
                    2984,
                    938,
                    3242,
                    1590,
                    1975,
                    2742,
                    2490,
                    1851,
                    2618,
                    2747,
                    3002,
                    1603,
                    2503,
                    2631,
                    3021,
                    2894,
                    1877,
                    3422,
                    870,
                    1523,
                    2933,
                    887,
                    506,
                    1148,
                    3069
                ],
                "toffsets": [
                    409,
                    394
                ],
                "offsetTrans.transform": [
                    394
                ],
                "self.new_gc": [
                    396
                ],
                "gc0.copy_properties": [
                    397
                ],
                "gc0.set_linewidth": [
                    433,
                    403,
                    427
                ],
                "xp": [
                    417,
                    419
                ],
                "yp": [
                    417,
                    420
                ],
                "transform.transform": [
                    417
                ],
                "np.isfinite": [
                    421
                ],
                "gc0.set_dashes": [
                    429
                ],
                "fg": [
                    928,
                    930,
                    932,
                    934,
                    430,
                    431,
                    432,
                    435,
                    437
                ],
                "gc0.set_foreground": [
                    435,
                    437
                ],
                "gc0.set_antialiased": [
                    441
                ],
                "gc0.set_url": [
                    443
                ],
                "gc0.restore": [
                    446
                ],
                "self._draw_text_as_path": [
                    547,
                    510
                ],
                "s": [
                    1667,
                    1668,
                    1669,
                    1675,
                    1676,
                    1677,
                    1810,
                    1811,
                    1684,
                    1813,
                    1686,
                    1687,
                    547,
                    1701,
                    1703,
                    1704,
                    1710,
                    1712,
                    1713,
                    565,
                    1723,
                    1724,
                    2235,
                    1727,
                    2886,
                    2890,
                    1744,
                    1745,
                    1747,
                    2900,
                    2901,
                    599,
                    1761,
                    1762,
                    1764,
                    615,
                    620,
                    628,
                    1785,
                    1786,
                    1787,
                    510
                ],
                "prop": [
                    547,
                    613,
                    620,
                    624,
                    625,
                    564,
                    565,
                    599,
                    510
                ],
                "angle": [
                    578,
                    547,
                    599,
                    568,
                    573,
                    510
                ],
                "cbook._delete_parameter": [
                    506
                ],
                "ismath": [
                    610,
                    547,
                    619,
                    565,
                    599
                ],
                "text2path": [
                    577,
                    563,
                    572,
                    565
                ],
                "fontsize": [
                    577,
                    613,
                    615,
                    564,
                    572
                ],
                "self.points_to_pixels": [
                    618,
                    564
                ],
                "prop.get_size_in_points": [
                    625,
                    564,
                    613
                ],
                "verts": [
                    565,
                    567
                ],
                "text2path.get_text_path": [
                    565
                ],
                "Path": [
                    977,
                    567
                ],
                "np.deg2rad": [
                    568
                ],
                "self.flipy": [
                    569
                ],
                "width": [
                    570
                ],
                "height": [
                    570,
                    574
                ],
                "self.get_canvas_width_height": [
                    570
                ],
                "rotate": [
                    576,
                    571
                ],
                "scale": [
                    576,
                    2465,
                    1027,
                    1028,
                    571,
                    2461,
                    2462
                ],
                "text2path.FONT_SCALE": [
                    577,
                    572
                ],
                "self._get_text_path_transform": [
                    598
                ],
                "color": [
                    600,
                    602
                ],
                "gc.get_rgb": [
                    600
                ],
                "gc.set_linewidth": [
                    601
                ],
                "texmanager": [
                    612,
                    614
                ],
                "self._text2path.get_texmanager": [
                    612
                ],
                "w": [
                    614,
                    616,
                    943,
                    629,
                    631,
                    634
                ],
                "h": [
                    614,
                    616,
                    629,
                    632,
                    634
                ],
                "d": [
                    614,
                    616,
                    630,
                    633,
                    634
                ],
                "texmanager.get_text_width_height_descent": [
                    614
                ],
                "dpi": [
                    2116,
                    618,
                    620,
                    2063,
                    2064,
                    2065,
                    626,
                    2066,
                    2073
                ],
                "dims": [
                    620,
                    621
                ],
                "self._text2path.mathtext_parser.parse": [
                    620
                ],
                "self._text2path.mathtext_parser": [
                    620
                ],
                "flags": [
                    628,
                    623
                ],
                "self._text2path._get_hinting_flag": [
                    623
                ],
                "font": [
                    624,
                    626,
                    628,
                    629,
                    630
                ],
                "self._text2path._get_font": [
                    624
                ],
                "size": [
                    625,
                    626
                ],
                "font.set_size": [
                    626
                ],
                "font.set_text": [
                    628
                ],
                "font.get_width_height": [
                    629
                ],
                "font.get_descent": [
                    630
                ],
                "TexManager": [
                    652
                ],
                "GraphicsContextBase": [
                    657
                ],
                "points": [
                    678
                ],
                "self._alpha": [
                    928,
                    737,
                    930,
                    716,
                    856,
                    859,
                    767
                ],
                "self._forced_alpha": [
                    929,
                    738,
                    813,
                    717,
                    857,
                    860,
                    927
                ],
                "self._antialiased": [
                    771,
                    866,
                    739,
                    718
                ],
                "self._capstyle": [
                    777,
                    740,
                    871,
                    719
                ],
                "self._cliprect": [
                    720,
                    877,
                    741,
                    783
                ],
                "self._clippath": [
                    742,
                    721,
                    888,
                    791,
                    792
                ],
                "self._dashes": [
                    722,
                    914,
                    806,
                    743
                ],
                "self._joinstyle": [
                    744,
                    817,
                    723,
                    939
                ],
                "self._linestyle": [
                    745,
                    724
                ],
                "self._linewidth": [
                    746,
                    821,
                    725,
                    943
                ],
                "self._rgb": [
                    928,
                    930,
                    932,
                    934,
                    747,
                    726,
                    825,
                    861
                ],
                "self._hatch": [
                    970,
                    748,
                    966,
                    727
                ],
                "self._hatch_color": [
                    728,
                    981,
                    985,
                    749
                ],
                "colors.to_rgba": [
                    728,
                    930,
                    934
                ],
                "colors": [
                    728,
                    930,
                    934
                ],
                "rcParams": [
                    2064,
                    2078,
                    2082,
                    2599,
                    2090,
                    2353,
                    2354,
                    2355,
                    2356,
                    2357,
                    2102,
                    2358,
                    2360,
                    2361,
                    2362,
                    2363,
                    2359,
                    2364,
                    2365,
                    2366,
                    728,
                    729,
                    2650,
                    2523,
                    2140,
                    2525,
                    2655
                ],
                "self._hatch_linewidth": [
                    729,
                    989,
                    750
                ],
                "self._url": [
                    730,
                    947,
                    829,
                    751
                ],
                "self._gid": [
                    752,
                    833,
                    731,
                    951
                ],
                "self._snap": [
                    753,
                    962,
                    732,
                    844
                ],
                "self._sketch": [
                    1009,
                    754,
                    1026,
                    733
                ],
                "gc._alpha": [
                    737
                ],
                "gc._forced_alpha": [
                    738
                ],
                "gc._antialiased": [
                    739
                ],
                "gc._capstyle": [
                    740
                ],
                "gc._cliprect": [
                    741
                ],
                "gc._clippath": [
                    742
                ],
                "gc._dashes": [
                    743
                ],
                "gc._joinstyle": [
                    744
                ],
                "gc._linestyle": [
                    745
                ],
                "gc._linewidth": [
                    746
                ],
                "gc._rgb": [
                    747
                ],
                "gc._hatch": [
                    748
                ],
                "gc._hatch_color": [
                    749
                ],
                "gc._hatch_linewidth": [
                    750
                ],
                "gc._url": [
                    751
                ],
                "gc._gid": [
                    752
                ],
                "gc._snap": [
                    753
                ],
                "gc._sketch": [
                    754
                ],
                "self._clippath.get_transformed_path_and_affine": [
                    792
                ],
                "alpha": [
                    856,
                    855
                ],
                "self.set_foreground": [
                    861
                ],
                "int": [
                    866,
                    2498,
                    1289,
                    1291,
                    1936,
                    1112
                ],
                "bool": [
                    866
                ],
                "b": [
                    866
                ],
                "cbook._check_in_list": [
                    938,
                    870
                ],
                "cs": [
                    870,
                    871
                ],
                "rectangle": [
                    877
                ],
                "cbook._check_isinstance": [
                    887
                ],
                "transforms.TransformedPath": [
                    887
                ],
                "dash_list": [
                    914,
                    909,
                    910
                ],
                "dl": [
                    910,
                    911
                ],
                "np.asarray": [
                    910
                ],
                "np.any": [
                    911
                ],
                "ValueError": [
                    2433,
                    2468,
                    1989,
                    2887,
                    912,
                    2481,
                    2452,
                    1978,
                    1310
                ],
                "dash_offset": [
                    914
                ],
                "isRGBA": [
                    931,
                    927
                ],
                "js": [
                    938,
                    939
                ],
                "url": [
                    947
                ],
                "id": [
                    951
                ],
                "snap": [
                    962
                ],
                "hatch": [
                    977,
                    974,
                    966,
                    975
                ],
                "self.get_hatch": [
                    974
                ],
                "Path.hatch": [
                    977
                ],
                "density": [
                    977
                ],
                "hatch_color": [
                    985
                ],
                "length": [
                    1028
                ],
                "randomness": [
                    1028
                ],
                "self.callbacks": [
                    1154,
                    1156,
                    1669,
                    1158,
                    1677,
                    1172,
                    1813,
                    1687,
                    1180,
                    1182,
                    1827,
                    1704,
                    1070,
                    1713,
                    2235,
                    1727,
                    1858,
                    1603,
                    2249,
                    1747,
                    1764,
                    1134,
                    1787
                ],
                "callbacks": [
                    2278,
                    1070
                ],
                "callbacks.copy": [
                    1070
                ],
                "self.interval": [
                    1072,
                    1090
                ],
                "interval": [
                    1089,
                    1090,
                    2278,
                    1072,
                    1108,
                    1112,
                    1113
                ],
                "self.single_shot": [
                    1073
                ],
                "self._timer_stop": [
                    1077,
                    1095
                ],
                "self._timer_start": [
                    1091
                ],
                "self._interval": [
                    1113,
                    1106
                ],
                "property": [
                    2619,
                    1116,
                    1103
                ],
                "self._timer_set_interval": [
                    1114
                ],
                "interval.setter": [
                    1108
                ],
                "self._single": [
                    1123,
                    1119
                ],
                "ss": [
                    1123
                ],
                "self._timer_set_single_shot": [
                    1124
                ],
                "single_shot.setter": [
                    1121
                ],
                "single_shot": [
                    1121
                ],
                "self.callbacks.append": [
                    1134
                ],
                "func": [
                    1154,
                    1157,
                    1158,
                    1134,
                    1135,
                    1172,
                    1173,
                    2235,
                    1180
                ],
                "args": [
                    1154,
                    1922,
                    1134,
                    1172,
                    1173,
                    1147,
                    1180,
                    3389
                ],
                "kwargs": [
                    1154,
                    1922,
                    2121,
                    1134,
                    1172,
                    1173,
                    3388,
                    1463,
                    1147,
                    1180,
                    3389,
                    1726
                ],
                "self.callbacks.remove": [
                    1154,
                    1180
                ],
                "funcs": [
                    1156,
                    1157,
                    1158
                ],
                "c": [
                    1156
                ],
                "self.callbacks.pop": [
                    1158
                ],
                "funcs.index": [
                    1158
                ],
                "ret": [
                    1179,
                    1173
                ],
                "self.stop": [
                    1183
                ],
                "self.name": [
                    1202,
                    1419
                ],
                "name": [
                    1952,
                    1249,
                    1410,
                    1953,
                    1954,
                    1287,
                    1230,
                    1202,
                    1460,
                    3446,
                    3261,
                    1501,
                    3455
                ],
                "self.canvas": [
                    2949,
                    2954,
                    2955,
                    1301,
                    1302,
                    1304,
                    2970,
                    2976,
                    2593,
                    3110,
                    2600,
                    2603,
                    1203,
                    2612,
                    2740,
                    3123,
                    1335,
                    2999,
                    1340,
                    2755,
                    3011,
                    2757,
                    3012,
                    2759,
                    3141,
                    3035,
                    3166,
                    3169,
                    3170,
                    2925,
                    2928,
                    2929,
                    3056
                ],
                "canvas": [
                    1410,
                    1287,
                    2440,
                    2060,
                    2061,
                    2458,
                    2593,
                    2594,
                    2347,
                    2348,
                    2350,
                    2607,
                    1203,
                    1460,
                    2740,
                    2741,
                    2487,
                    2107,
                    2371,
                    2499,
                    2500,
                    3395,
                    3396,
                    2377,
                    1230,
                    2517,
                    2518,
                    2520,
                    1501,
                    1249,
                    1250
                ],
                "self.guiEvent": [
                    1204
                ],
                "guiEvent": [
                    1857,
                    1410,
                    1763,
                    1287,
                    1703,
                    1712,
                    1746,
                    1204,
                    1460,
                    1686,
                    1812,
                    1786,
                    1501
                ],
                "Event": [
                    1249,
                    1253,
                    1287,
                    1257,
                    1230,
                    1425,
                    1234,
                    1460,
                    1207
                ],
                "Event.__init__": [
                    1249,
                    1460,
                    1230,
                    1287
                ],
                "self.renderer": [
                    1231
                ],
                "renderer": [
                    1536,
                    1538,
                    1668,
                    2093,
                    1231,
                    1521,
                    2098,
                    2100,
                    1530
                ],
                "self.width": [
                    1250
                ],
                "self.height": [
                    1250
                ],
                "canvas.get_width_height": [
                    1250
                ],
                "lastevent": [
                    1281
                ],
                "self.x": [
                    1289,
                    1420
                ],
                "self.y": [
                    1291,
                    1420
                ],
                "self.inaxes": [
                    1322,
                    1292,
                    1422,
                    1302,
                    1334,
                    1304,
                    1306,
                    1339,
                    1308
                ],
                "self.xdata": [
                    1313,
                    1420,
                    1293
                ],
                "self.ydata": [
                    1314,
                    1420,
                    1294
                ],
                "self._update_enter_leave": [
                    1298,
                    1316
                ],
                "self.canvas.mouse_grabber": [
                    1304,
                    1301
                ],
                "self.canvas.inaxes": [
                    1302
                ],
                "self.inaxes.transData.inverted": [
                    1308
                ],
                "self.inaxes.transData": [
                    1308
                ],
                "xdata": [
                    1313,
                    1309
                ],
                "ydata": [
                    1314,
                    1309
                ],
                "trans.transform": [
                    1309
                ],
                "LocationEvent.lastevent": [
                    1827,
                    1828,
                    1320,
                    1321,
                    1342
                ],
                "LocationEvent": [
                    1857,
                    1410,
                    1827,
                    1828,
                    1320,
                    1321,
                    1353,
                    1466,
                    1501,
                    1342
                ],
                "last": [
                    1321,
                    1322,
                    1325,
                    1326
                ],
                "last.inaxes": [
                    1322,
                    1325
                ],
                "last.canvas.callbacks.process": [
                    1326
                ],
                "last.canvas.callbacks": [
                    1326
                ],
                "last.canvas": [
                    1326
                ],
                "Exception": [
                    2529,
                    1518,
                    1327
                ],
                "self.canvas.callbacks.process": [
                    1340,
                    1335
                ],
                "self.canvas.callbacks": [
                    1340,
                    1335
                ],
                "IntEnum": [
                    1345
                ],
                "LEFT": [
                    1346
                ],
                "MIDDLE": [
                    1347
                ],
                "RIGHT": [
                    1348
                ],
                "BACK": [
                    1349
                ],
                "FORWARD": [
                    1350
                ],
                "LocationEvent.__init__": [
                    1410,
                    1501
                ],
                "button": [
                    1760,
                    1762,
                    1411,
                    1412,
                    1413,
                    1786
                ],
                "MouseButton.__members__.values": [
                    1411
                ],
                "MouseButton.__members__": [
                    1411
                ],
                "MouseButton": [
                    2522,
                    1411,
                    1412
                ],
                "self.button": [
                    1413,
                    1421
                ],
                "self.key": [
                    1502,
                    1414
                ],
                "key": [
                    1700,
                    1414,
                    1703,
                    1712,
                    1502
                ],
                "self.step": [
                    1415
                ],
                "step": [
                    1746,
                    1740,
                    1415
                ],
                "self.dblclick": [
                    1416,
                    1421
                ],
                "dblclick": [
                    1416,
                    1763
                ],
                "self.mouseevent": [
                    1461
                ],
                "mouseevent": [
                    1762,
                    1764,
                    1745,
                    1747,
                    1461,
                    1657,
                    1724,
                    1725
                ],
                "self.artist": [
                    1462
                ],
                "artist": [
                    1724,
                    1462
                ],
                "self.__dict__.update": [
                    1463
                ],
                "self.__dict__": [
                    1463
                ],
                "Done": [
                    1521,
                    1529
                ],
                "cbook._setattr_cm": [
                    2072,
                    2073,
                    1523
                ],
                "figure": [
                    1600,
                    3395,
                    1523,
                    1525,
                    1526,
                    1528,
                    1530,
                    1599
                ],
                "_draw": [
                    1523
                ],
                "print_method": [
                    2114,
                    2061,
                    2096,
                    1524,
                    1526,
                    1528
                ],
                "fmt": [
                    1985,
                    1991,
                    1525,
                    1526,
                    1977,
                    1979,
                    1980
                ],
                "figure.canvas.get_default_filetype": [
                    1525
                ],
                "figure.canvas": [
                    1525,
                    1526
                ],
                "getattr": [
                    1633,
                    3111,
                    3112,
                    2061,
                    1552,
                    2066,
                    1526,
                    2870,
                    3227,
                    3455
                ],
                "io.BytesIO": [
                    1528
                ],
                "io": [
                    1528
                ],
                "figure.dpi": [
                    1528
                ],
                "figure._cachedRenderer": [
                    1530
                ],
                "exc.args": [
                    1530
                ],
                "exc": [
                    2482,
                    1530,
                    2469,
                    3422
                ],
                "draw_disabled": [
                    1532
                ],
                "meth_name": [
                    1536,
                    1533,
                    1534,
                    1535
                ],
                "dir": [
                    1533
                ],
                "RendererBase": [
                    1533
                ],
                "meth_name.startswith": [
                    1534
                ],
                "setattr": [
                    1536,
                    3463,
                    3455
                ],
                "hasattr": [
                    1980,
                    2155,
                    1550,
                    1592,
                    1593,
                    1977,
                    1628,
                    1629
                ],
                "ip": [
                    1637,
                    1638,
                    1550,
                    1551,
                    1552,
                    1624,
                    1625,
                    1629
                ],
                "ip.parent": [
                    1552,
                    1551
                ],
                "required_interactive_framework": [
                    1567
                ],
                "events": [
                    1569
                ],
                "fixed_dpi": [
                    1586
                ],
                "filetypes": [
                    1588
                ],
                "cls": [
                    1952,
                    1633,
                    3395,
                    3396,
                    3461,
                    3455,
                    3463,
                    3401,
                    3464,
                    3404,
                    3440,
                    1941,
                    1592,
                    1593,
                    3390,
                    3423
                ],
                "cbook._classproperty": [
                    1590
                ],
                "self._fix_ipython_backend2gui": [
                    1596
                ],
                "self._is_idle_drawing": [
                    1920,
                    1642,
                    1612,
                    1646,
                    1597
                ],
                "self._is_saving": [
                    2179,
                    1653,
                    1598
                ],
                "figure.set_canvas": [
                    1599
                ],
                "self.figure": [
                    1600,
                    2178,
                    2106,
                    2086,
                    2087,
                    2094,
                    2126,
                    1936,
                    2127,
                    1874,
                    2066,
                    2098,
                    2099,
                    2128,
                    1657,
                    2074,
                    2075,
                    2073
                ],
                "self.manager": [
                    2156,
                    1601,
                    2147,
                    2148
                ],
                "cbook.CallbackRegistry": [
                    1603
                ],
                "self.widgetlock": [
                    1656,
                    1604
                ],
                "widgets.LockDraw": [
                    1604
                ],
                "widgets": [
                    1604
                ],
                "self._button": [
                    1760,
                    1605,
                    1741,
                    1743,
                    1745,
                    1811,
                    1788
                ],
                "self._key": [
                    1762,
                    1700,
                    1606,
                    1745,
                    1714,
                    1811,
                    1786
                ],
                "self._lastx": [
                    1829,
                    1703,
                    1607,
                    1712,
                    1809,
                    1847
                ],
                "self._lasty": [
                    1829,
                    1703,
                    1607,
                    1712,
                    1809,
                    1847
                ],
                "self.button_pick_id": [
                    1608
                ],
                "self.mpl_connect": [
                    1608,
                    1609
                ],
                "self.pick": [
                    1608,
                    1609
                ],
                "self.scroll_pick_id": [
                    1609
                ],
                "self.mouse_grabber": [
                    1890,
                    1892,
                    1610,
                    1901,
                    1902
                ],
                "self.toolbar": [
                    2616,
                    2610,
                    1611,
                    2615
                ],
                "sys.modules": [
                    3463,
                    1621,
                    3455
                ],
                "sys": [
                    3463,
                    1621,
                    3455
                ],
                "IPython.get_ipython": [
                    1624
                ],
                "IPython": [
                    1624
                ],
                "pt": [
                    1628
                ],
                "rif": [
                    1633,
                    1635
                ],
                "backend2gui_rif": [
                    1634,
                    1636,
                    1638
                ],
                "get": [
                    1634
                ],
                "_is_non_interactive_terminal_ipython": [
                    1637
                ],
                "ip.enable_gui": [
                    1638
                ],
                "classmethod": [
                    3392,
                    3399,
                    1614,
                    3406,
                    1943,
                    1938,
                    2131,
                    3383
                ],
                "functools.lru_cache": [
                    1615
                ],
                "functools": [
                    2095,
                    1615
                ],
                "contextmanager": [
                    1640,
                    2858
                ],
                "self.widgetlock.locked": [
                    1656
                ],
                "self.figure.pick": [
                    1657
                ],
                "event": [
                    3075,
                    3088,
                    3100,
                    2651,
                    2656,
                    3199,
                    3202,
                    1668,
                    1669,
                    3210,
                    1676,
                    1677,
                    1686,
                    1687,
                    1702,
                    1704,
                    1711,
                    1713,
                    1724,
                    1727,
                    1786,
                    1787,
                    3343,
                    1811,
                    1813,
                    2844,
                    2345,
                    2348,
                    1857,
                    1858,
                    2369,
                    2881,
                    2883,
                    2886,
                    2376,
                    2378,
                    2891,
                    2892,
                    2383,
                    2895,
                    2896,
                    2387,
                    2390,
                    2393,
                    2395,
                    2907,
                    2397,
                    2908,
                    2399,
                    2909,
                    2401,
                    2910,
                    2912,
                    2404,
                    2913,
                    2914,
                    2915,
                    2418,
                    2423,
                    2939,
                    2940,
                    2947,
                    2950,
                    2952,
                    2442,
                    2962,
                    2966,
                    2968,
                    2971,
                    2460,
                    2979,
                    2980,
                    2473,
                    2989,
                    2486,
                    2488,
                    2489,
                    2497,
                    2498,
                    2501,
                    2502,
                    3026,
                    2518,
                    2522,
                    3034,
                    3042,
                    3043,
                    3045,
                    3047,
                    3062,
                    3066,
                    3067
                ],
                "DrawEvent": [
                    1668
                ],
                "self.callbacks.process": [
                    1858,
                    1827,
                    1764,
                    1669,
                    1704,
                    1677,
                    1713,
                    1747,
                    1813,
                    1687,
                    1787,
                    1727
                ],
                "ResizeEvent": [
                    1676
                ],
                "self.draw_idle": [
                    1678
                ],
                "CloseEvent": [
                    1686
                ],
                "TypeError": [
                    1688
                ],
                "AttributeError": [
                    1688,
                    3432,
                    2372
                ],
                "KeyEvent": [
                    1702,
                    1711
                ],
                "PickEvent": [
                    1724
                ],
                "mouseevent.guiEvent": [
                    1725
                ],
                "MouseEvent": [
                    1745,
                    1762,
                    1811,
                    1786
                ],
                "xy": [
                    1875,
                    1845,
                    1846
                ],
                "axes_list": [
                    1874,
                    1876,
                    1877
                ],
                "a": [
                    2949,
                    2950,
                    2951,
                    2952,
                    2953,
                    2970,
                    2971,
                    3110,
                    3111,
                    3112,
                    2487,
                    2489,
                    2494,
                    2500,
                    2502,
                    3014,
                    3015,
                    2507,
                    2891,
                    2892,
                    2894,
                    2895,
                    2896,
                    1874,
                    1875,
                    2898,
                    3031,
                    3034,
                    3170,
                    3171,
                    2929,
                    2930
                ],
                "self.figure.get_axes": [
                    1874
                ],
                "a.patch.contains_point": [
                    1875
                ],
                "a.patch": [
                    1875
                ],
                "a.get_visible": [
                    1875,
                    2892
                ],
                "axes": [
                    2981,
                    1877,
                    1879,
                    1881,
                    2970,
                    2972
                ],
                "cbook._topmost_artist": [
                    1877,
                    2894
                ],
                "ax": [
                    2438,
                    2439,
                    3081,
                    3083,
                    2444,
                    2445,
                    2446,
                    2447,
                    3086,
                    2456,
                    2457,
                    2461,
                    2463,
                    2464,
                    2467,
                    2470,
                    2471,
                    2474,
                    2476,
                    2477,
                    2480,
                    2483,
                    2484,
                    2995,
                    2997,
                    2998,
                    2999,
                    3136,
                    3137,
                    3139,
                    3140,
                    3040,
                    1890,
                    3042,
                    1892,
                    3044,
                    3046,
                    1901,
                    2418,
                    3061,
                    2425,
                    2426,
                    2427,
                    2428
                ],
                "RuntimeError": [
                    1891
                ],
                "self._idle_draw_cntx": [
                    1921
                ],
                "self.draw": [
                    1922
                ],
                "cbook.deprecated": [
                    2817,
                    1924,
                    3333,
                    2618,
                    2933,
                    3002,
                    3102
                ],
                "self.figure.bbox.width": [
                    1936
                ],
                "self.figure.bbox": [
                    1936
                ],
                "self.figure.bbox.height": [
                    1936
                ],
                "cls.filetypes": [
                    1952,
                    1941
                ],
                "groupings": [
                    1953,
                    1954,
                    1955,
                    1951
                ],
                "ext": [
                    1952,
                    1953
                ],
                "cls.filetypes.items": [
                    1952
                ],
                "append": [
                    1953
                ],
                "groupings.setdefault": [
                    1953
                ],
                "sort": [
                    1954
                ],
                "canvas_class": [
                    1985,
                    1986,
                    1987,
                    1974,
                    1977
                ],
                "cbook._backend_module_name": [
                    1975
                ],
                "get_registered_canvas_class": [
                    1985
                ],
                "self.switch_backends": [
                    1987
                ],
                "join": [
                    1991
                ],
                "sorted": [
                    1991
                ],
                "self.get_supported_filetypes": [
                    1991
                ],
                "filename": [
                    2049,
                    2050,
                    2051,
                    2052,
                    2115,
                    2055,
                    2056
                ],
                "os.PathLike": [
                    2049
                ],
                "os": [
                    2049,
                    2050,
                    3249,
                    2052
                ],
                "os.fspath": [
                    2050
                ],
                "os.path.splitext": [
                    2052
                ],
                "os.path": [
                    3249,
                    2052
                ],
                "self.get_default_filetype": [
                    2165,
                    2054
                ],
                "filename.rstrip": [
                    2056
                ],
                "format.lower": [
                    2057
                ],
                "self._get_output_canvas": [
                    2060
                ],
                "self.figure.dpi": [
                    2066
                ],
                "origfacecolor": [
                    2080,
                    2074,
                    2126
                ],
                "self.figure.get_facecolor": [
                    2074
                ],
                "origedgecolor": [
                    2075,
                    2084,
                    2127
                ],
                "self.figure.get_edgecolor": [
                    2075
                ],
                "facecolor": [
                    2080,
                    2117,
                    2086,
                    2077,
                    2078,
                    2079
                ],
                "cbook._str_equal": [
                    2083,
                    2079
                ],
                "edgecolor": [
                    2081,
                    2082,
                    2083,
                    2084,
                    2118,
                    2087
                ],
                "self.figure.set_facecolor": [
                    2126,
                    2086
                ],
                "self.figure.set_edgecolor": [
                    2127,
                    2087
                ],
                "bbox_inches": [
                    2089,
                    2090,
                    2091,
                    2092,
                    2123,
                    2099,
                    2103,
                    2106,
                    2109
                ],
                "_get_renderer": [
                    2093
                ],
                "functools.partial": [
                    2095
                ],
                "orientation": [
                    2096,
                    2119
                ],
                "self.figure.draw": [
                    2098
                ],
                "self.figure.get_tightbbox": [
                    2099
                ],
                "bbox_extra_artists": [
                    2100
                ],
                "pad_inches": [
                    2101,
                    2102,
                    2103
                ],
                "bbox_inches.padded": [
                    2103
                ],
                "restore_bbox": [
                    2106,
                    2123,
                    2124,
                    2109
                ],
                "tight_bbox.adjust_bbox": [
                    2106
                ],
                "tight_bbox": [
                    2106
                ],
                "canvas.fixed_dpi": [
                    2107
                ],
                "_bbox_inches_restore": [
                    2120,
                    2109,
                    2111
                ],
                "result": [
                    2129,
                    2114
                ],
                "self.figure.set_canvas": [
                    2128
                ],
                "self.manager.get_window_title": [
                    2148
                ],
                "self.manager.set_window_title": [
                    2156
                ],
                "title": [
                    2156
                ],
                "default_basename": [
                    2163,
                    2164,
                    2166
                ],
                "self.get_window_title": [
                    2163
                ],
                "default_basename.replace": [
                    2164
                ],
                "default_filetype": [
                    2165,
                    2166
                ],
                "default_filename": [
                    2166,
                    2167
                ],
                "newCanvas": [
                    2178,
                    2179,
                    2180
                ],
                "FigureCanvasClass": [
                    2178
                ],
                "newCanvas._is_saving": [
                    2179
                ],
                "self.callbacks.connect": [
                    2235
                ],
                "self.callbacks.disconnect": [
                    2249
                ],
                "cid": [
                    2249
                ],
                "_timer_cls": [
                    2253
                ],
                "TimerBase": [
                    2253
                ],
                "self._timer_cls": [
                    2278
                ],
                "timeout": [
                    2305,
                    2306,
                    2310
                ],
                "np.inf": [
                    2306,
                    2870
                ],
                "timestep": [
                    2312,
                    2307,
                    2310
                ],
                "counter": [
                    2313,
                    2308,
                    2310
                ],
                "self._looping": [
                    2322,
                    2309,
                    2310
                ],
                "self.flush_events": [
                    2311
                ],
                "time.sleep": [
                    2312
                ],
                "time": [
                    2312,
                    2870
                ],
                "event.key": [
                    2442,
                    3088,
                    2460,
                    2345,
                    2473,
                    2486,
                    2369,
                    2497,
                    2498,
                    2376,
                    2378,
                    2383,
                    2387,
                    2390,
                    2393,
                    3034,
                    2397,
                    2401,
                    3043,
                    3045,
                    2423,
                    3066,
                    3067
                ],
                "event.canvas": [
                    2348,
                    2518
                ],
                "toolbar": [
                    2402,
                    2519,
                    2526,
                    2381,
                    2349,
                    2350,
                    2384,
                    2388,
                    2391,
                    2520,
                    2521,
                    2394,
                    2395,
                    2524,
                    2398,
                    2399
                ],
                "canvas.toolbar": [
                    2520,
                    2741,
                    2350
                ],
                "fullscreen_keys": [
                    2369,
                    2353
                ],
                "home_keys": [
                    2354,
                    2383
                ],
                "back_keys": [
                    2387,
                    2355
                ],
                "forward_keys": [
                    2356,
                    2390
                ],
                "pan_keys": [
                    2393,
                    2357
                ],
                "zoom_keys": [
                    2397,
                    2358
                ],
                "save_keys": [
                    2401,
                    2359
                ],
                "quit_keys": [
                    2360,
                    2376
                ],
                "quit_all_keys": [
                    2361,
                    2378
                ],
                "grid_keys": [
                    2362,
                    2423
                ],
                "grid_minor_keys": [
                    2442,
                    2363
                ],
                "toggle_yscale_keys": [
                    2460,
                    2364
                ],
                "toggle_xscale_keys": [
                    2473,
                    2365
                ],
                "all_keys": [
                    2486,
                    2366
                ],
                "dict.__getitem__": [
                    2366
                ],
                "dict": [
                    2366
                ],
                "canvas.manager.full_screen_toggle": [
                    2371
                ],
                "canvas.manager": [
                    2594,
                    2371
                ],
                "Gcf.destroy_fig": [
                    2377
                ],
                "Gcf": [
                    2377,
                    3402,
                    2379,
                    3415
                ],
                "canvas.figure": [
                    2499,
                    2500,
                    2377,
                    2607,
                    2487
                ],
                "Gcf.destroy_all": [
                    2379
                ],
                "toolbar.home": [
                    2384
                ],
                "toolbar.back": [
                    2524,
                    2388
                ],
                "toolbar.forward": [
                    2526,
                    2391
                ],
                "toolbar.pan": [
                    2394
                ],
                "toolbar._update_cursor": [
                    2395,
                    2399
                ],
                "toolbar.zoom": [
                    2398
                ],
                "toolbar.save_figure": [
                    2402
                ],
                "event.inaxes": [
                    2883,
                    2404,
                    2886,
                    2891,
                    2895,
                    2418,
                    2844
                ],
                "all": [
                    2411
                ],
                "tick.gridline.get_visible": [
                    2411,
                    2413
                ],
                "tick.gridline": [
                    2411,
                    2413
                ],
                "tick": [
                    2411,
                    2413
                ],
                "ticks": [
                    2411,
                    2413
                ],
                "any": [
                    3081,
                    3083,
                    2413
                ],
                "_get_uniform_gridstate": [
                    2444,
                    2445,
                    2446,
                    2447,
                    2425,
                    2426,
                    2427,
                    2428
                ],
                "ax.xaxis.minorTicks": [
                    2425,
                    2446
                ],
                "ax.xaxis": [
                    2425,
                    2427,
                    2444,
                    2446
                ],
                "ax.yaxis.minorTicks": [
                    2426,
                    2447
                ],
                "ax.yaxis": [
                    2426,
                    2428,
                    2445,
                    2447
                ],
                "x_state": [
                    2432,
                    2438,
                    2446,
                    2450,
                    2451,
                    2456,
                    2427,
                    2431
                ],
                "ax.xaxis.majorTicks": [
                    2427,
                    2444
                ],
                "y_state": [
                    2432,
                    2439,
                    2447,
                    2450,
                    2451,
                    2457,
                    2428,
                    2431
                ],
                "ax.yaxis.majorTicks": [
                    2428,
                    2445
                ],
                "cycle": [
                    2432,
                    2451,
                    2448,
                    2429
                ],
                "cycle.index": [
                    2432,
                    2451
                ],
                "ax.grid": [
                    2456,
                    2457,
                    2438,
                    2439
                ],
                "canvas.draw_idle": [
                    2440,
                    2458
                ],
                "ax.get_yscale": [
                    2461
                ],
                "ax.set_yscale": [
                    2467,
                    2470,
                    2463
                ],
                "ax.figure.canvas.draw_idle": [
                    2464,
                    2484,
                    2477,
                    2471
                ],
                "ax.figure.canvas": [
                    2464,
                    2484,
                    2477,
                    2471
                ],
                "ax.figure": [
                    2464,
                    2484,
                    2477,
                    2471
                ],
                "_log.warning": [
                    2482,
                    2469
                ],
                "scalex": [
                    2474,
                    2475,
                    2478
                ],
                "ax.get_xscale": [
                    2474
                ],
                "ax.set_xscale": [
                    2480,
                    2483,
                    2476
                ],
                "canvas.figure.get_axes": [
                    2499,
                    2500,
                    2487
                ],
                "event.x": [
                    3042,
                    2947,
                    2980,
                    2501,
                    2968,
                    3062,
                    2488,
                    3034
                ],
                "event.y": [
                    3042,
                    2947,
                    2980,
                    2501,
                    2968,
                    3062,
                    2488,
                    3034
                ],
                "a.in_axes": [
                    2489,
                    2950,
                    2971,
                    2502
                ],
                "a.set_navigate": [
                    2507,
                    2494
                ],
                "event.key.isdigit": [
                    2497
                ],
                "n": [
                    2498,
                    2499,
                    2507
                ],
                "enumerate": [
                    3061,
                    2500,
                    2949
                ],
                "button_name": [
                    2522,
                    2523,
                    2525
                ],
                "event.button": [
                    2979,
                    2952,
                    2966,
                    2522,
                    2939,
                    2940
                ],
                "self.num": [
                    2595
                ],
                "num": [
                    2595,
                    3396,
                    3390
                ],
                "self.key_press_handler_id": [
                    2600,
                    2597
                ],
                "self.button_press_handler_id": [
                    2603,
                    2598
                ],
                "self.canvas.mpl_connect": [
                    2976,
                    2755,
                    3012,
                    2757,
                    2759,
                    2600,
                    2603,
                    2955
                ],
                "self.key_press": [
                    2602
                ],
                "self.button_press": [
                    2605
                ],
                "self.toolmanager": [
                    3337,
                    3338,
                    2607,
                    2615,
                    3225,
                    3196,
                    3261,
                    3231
                ],
                "mpl.rcParams": [
                    2608
                ],
                "mpl": [
                    2608,
                    3122
                ],
                "ToolManager": [
                    2607
                ],
                "self.toolbar.update": [
                    2616
                ],
                "self.canvas.figure.add_axobserver": [
                    2612
                ],
                "self.canvas.figure": [
                    3170,
                    2949,
                    3110,
                    2929,
                    2612,
                    2999,
                    2970
                ],
                "cbook._get_running_interactive_framework": [
                    2631
                ],
                "NonGuiException": [
                    2632,
                    3421
                ],
                "get_backend": [
                    2633,
                    3437
                ],
                "key_press_handler": [
                    2651
                ],
                "button_press_handler": [
                    2656
                ],
                "cursors": [
                    2850,
                    2851,
                    2852,
                    2854,
                    2855,
                    2856,
                    2673,
                    2873,
                    2745,
                    2845,
                    2846,
                    2847
                ],
                "tools.cursors": [
                    2673
                ],
                "tools": [
                    2673
                ],
                "Enum": [
                    2676
                ],
                "NONE": [
                    2677
                ],
                "PAN": [
                    2678
                ],
                "ZOOM": [
                    2679
                ],
                "self.value": [
                    2682
                ],
                "toolitems": [
                    2727
                ],
                "self._nav_stack": [
                    2944,
                    2801,
                    2993,
                    2742,
                    3159,
                    3130,
                    2779,
                    2813,
                    2974
                ],
                "cbook.Stack": [
                    2742
                ],
                "self._xypress": [
                    2948,
                    3014,
                    3016,
                    2953,
                    3018,
                    3031,
                    2743,
                    3068
                ],
                "self._lastCursor": [
                    2850,
                    2852,
                    2854,
                    2856,
                    2745,
                    2876,
                    2845,
                    2847
                ],
                "cursors.POINTER": [
                    2745,
                    2845,
                    2846,
                    2847
                ],
                "init": [
                    2752,
                    2753,
                    2747
                ],
                "cbook._deprecate_method_override": [
                    2984,
                    3021,
                    2957,
                    3094,
                    2747,
                    3069
                ],
                "__class__._init_toolbar": [
                    2748
                ],
                "__class__": [
                    2985,
                    3022,
                    2958,
                    3095,
                    2748,
                    3070
                ],
                "self._id_press": [
                    2755
                ],
                "self._zoom_pan_handler": [
                    2756,
                    2758
                ],
                "self._id_release": [
                    2757
                ],
                "self._id_drag": [
                    3011,
                    3012,
                    2759,
                    2954,
                    2955
                ],
                "self.mouse_move": [
                    2760,
                    3013
                ],
                "self._zoom_info": [
                    3040,
                    2978,
                    2761,
                    3082,
                    3051,
                    3084,
                    3087,
                    3056,
                    3059,
                    3091,
                    3061,
                    3039
                ],
                "self._button_pressed": [
                    3009,
                    2763,
                    3019,
                    3034,
                    2940,
                    2942
                ],
                "self.mode": [
                    3168,
                    2849,
                    3171,
                    3172,
                    2853,
                    2923,
                    2924,
                    2765,
                    2927,
                    3164,
                    2930,
                    2931,
                    2903,
                    2906,
                    2844,
                    3165,
                    2911
                ],
                "_Mode.NONE": [
                    3165,
                    2924,
                    2765
                ],
                "_Mode": [
                    3168,
                    2849,
                    2853,
                    2923,
                    2924,
                    2765,
                    2927,
                    2906,
                    3164,
                    3165,
                    2911
                ],
                "self.set_history_buttons": [
                    2766,
                    2802,
                    3000,
                    3160,
                    2780,
                    2814
                ],
                "self._nav_stack.back": [
                    2779
                ],
                "self._update_view": [
                    2803,
                    2781,
                    2815
                ],
                "self._nav_stack.forward": [
                    2801
                ],
                "self._nav_stack.home": [
                    2813
                ],
                "self.set_cursor": [
                    2851,
                    2855,
                    2873,
                    2876,
                    2846
                ],
                "_Mode.ZOOM": [
                    3168,
                    2849,
                    3164,
                    2911
                ],
                "cursors.SELECT_REGION": [
                    2850,
                    2851,
                    2852
                ],
                "_Mode.PAN": [
                    2906,
                    2923,
                    2853,
                    2927
                ],
                "cursors.MOVE": [
                    2856,
                    2854,
                    2855
                ],
                "self._draw_time": [
                    2869,
                    2871
                ],
                "last_draw_time": [
                    2869,
                    2871
                ],
                "time.time": [
                    2870
                ],
                "cursors.WAIT": [
                    2873
                ],
                "self._update_cursor": [
                    2881
                ],
                "event.inaxes.get_navigate": [
                    2883
                ],
                "event.inaxes.format_coord": [
                    2886
                ],
                "event.xdata": [
                    2886
                ],
                "event.ydata": [
                    2886
                ],
                "OverflowError": [
                    2887
                ],
                "s.rstrip": [
                    2890
                ],
                "artists": [
                    2891,
                    2893,
                    2894
                ],
                "event.inaxes._mouseover_set": [
                    2891
                ],
                "a.contains": [
                    2892
                ],
                "event.inaxes.patch": [
                    2895
                ],
                "data": [
                    2896,
                    2897,
                    2898
                ],
                "a.get_cursor_data": [
                    2896
                ],
                "data_str": [
                    2898,
                    2899,
                    2900
                ],
                "rstrip": [
                    2898
                ],
                "a.format_cursor_data": [
                    2898
                ],
                "self.set_message": [
                    3172,
                    3343,
                    2931,
                    2901,
                    2903,
                    3199
                ],
                "event.name": [
                    2912,
                    2914,
                    2907,
                    2909
                ],
                "self.press_pan": [
                    2908
                ],
                "self.release_pan": [
                    2910
                ],
                "self.press_zoom": [
                    2913
                ],
                "self.release_zoom": [
                    2915
                ],
                "self.canvas.widgetlock.release": [
                    2925,
                    3166
                ],
                "self.canvas.widgetlock": [
                    2928,
                    3169,
                    2925,
                    3166
                ],
                "self.canvas.figure.get_axes": [
                    3170,
                    2949,
                    3110,
                    2929,
                    2970
                ],
                "a.set_navigate_mode": [
                    2930,
                    3171
                ],
                "self.push_current": [
                    2946,
                    3020,
                    3093,
                    2975
                ],
                "a.get_navigate": [
                    2971,
                    2951
                ],
                "a.can_pan": [
                    2951
                ],
                "a.start_pan": [
                    2952
                ],
                "self._xypress.append": [
                    2953
                ],
                "self.canvas.mpl_disconnect": [
                    3056,
                    2954,
                    3011
                ],
                "self.drag_pan": [
                    2956
                ],
                "press": [
                    2984,
                    2988,
                    2957,
                    2989,
                    2961,
                    2962
                ],
                "__class__.press": [
                    2985,
                    3022,
                    2958,
                    3070
                ],
                "a.can_zoom": [
                    2971
                ],
                "id_zoom": [
                    2976,
                    2982
                ],
                "self.drag_zoom": [
                    2977
                ],
                "self._nav_stack.push": [
                    2993
                ],
                "WeakKeyDictionary": [
                    2994
                ],
                "ax._get_view": [
                    2995
                ],
                "frozen": [
                    2997,
                    2998
                ],
                "ax.get_position": [
                    2997,
                    2998
                ],
                "self.canvas.figure.axes": [
                    2999
                ],
                "ind": [
                    3014,
                    3031
                ],
                "a.end_pan": [
                    3015
                ],
                "release": [
                    3074,
                    3075,
                    3021,
                    3025,
                    3026,
                    3094,
                    3099,
                    3100,
                    3069
                ],
                "self._draw": [
                    3105,
                    3090,
                    3027,
                    3076
                ],
                "a.drag_pan": [
                    3034
                ],
                "self.canvas.draw_idle": [
                    3123,
                    3035,
                    3141
                ],
                "start_xy": [
                    3042,
                    3039
                ],
                "x1": [
                    3041,
                    3046,
                    3047
                ],
                "y1": [
                    3041,
                    3044,
                    3047
                ],
                "x2": [
                    3041,
                    3046,
                    3047
                ],
                "y2": [
                    3041,
                    3044,
                    3047
                ],
                "np.clip": [
                    3041
                ],
                "ax.bbox.min": [
                    3042
                ],
                "ax.bbox": [
                    3042,
                    3044,
                    3046
                ],
                "ax.bbox.max": [
                    3042
                ],
                "ax.bbox.intervaly": [
                    3044
                ],
                "ax.bbox.intervalx": [
                    3046
                ],
                "self.draw_rubberband": [
                    3047
                ],
                "self.remove_rubberband": [
                    3057
                ],
                "start_x": [
                    3066,
                    3059,
                    3087
                ],
                "start_y": [
                    3059,
                    3087,
                    3067
                ],
                "abs": [
                    3066,
                    3067
                ],
                "twinx": [
                    3088,
                    3081
                ],
                "joined": [
                    3081,
                    3083
                ],
                "ax.get_shared_x_axes": [
                    3081
                ],
                "prev": [
                    3081,
                    3082,
                    3083,
                    3084
                ],
                "twiny": [
                    3088,
                    3083
                ],
                "ax.get_shared_y_axes": [
                    3083
                ],
                "ax._set_view_from_bbox": [
                    3086
                ],
                "__class__.release": [
                    3095
                ],
                "xaxis": [
                    3114,
                    3115,
                    3116,
                    3111
                ],
                "yaxis": [
                    3112,
                    3117,
                    3118,
                    3119
                ],
                "locators": [
                    3113,
                    3115,
                    3116,
                    3118,
                    3119,
                    3121
                ],
                "locators.append": [
                    3115,
                    3116,
                    3118,
                    3119
                ],
                "xaxis.get_major_locator": [
                    3115
                ],
                "xaxis.get_minor_locator": [
                    3116
                ],
                "yaxis.get_major_locator": [
                    3118
                ],
                "yaxis.get_minor_locator": [
                    3119
                ],
                "loc": [
                    3121,
                    3122
                ],
                "mpl.ticker._if_refresh_overridden_call_and_emit_deprec": [
                    3122
                ],
                "mpl.ticker": [
                    3122
                ],
                "nav_info": [
                    3130,
                    3131,
                    3135
                ],
                "items": [
                    3136,
                    3135
                ],
                "nav_info.items": [
                    3135
                ],
                "view": [
                    3136,
                    3137
                ],
                "pos_orig": [
                    3136,
                    3139
                ],
                "pos_active": [
                    3136,
                    3140
                ],
                "ax._set_view": [
                    3137
                ],
                "ax._set_position": [
                    3139,
                    3140
                ],
                "self._nav_stack.clear": [
                    3159
                ],
                "_icon_extension": [
                    3188
                ],
                "toolmanager": [
                    3200,
                    3337,
                    3196,
                    3197
                ],
                "toolmanager.toolmanager_connect": [
                    3200,
                    3197
                ],
                "event.message": [
                    3343,
                    3199
                ],
                "self.remove_toolitem": [
                    3202
                ],
                "event.tool.name": [
                    3202,
                    3210
                ],
                "event.tool": [
                    3202,
                    3210
                ],
                "self.toggle_toolitem": [
                    3210,
                    3235
                ],
                "event.tool.toggled": [
                    3210
                ],
                "tool": [
                    3234,
                    3235,
                    3225,
                    3226,
                    3227,
                    3228,
                    3229,
                    3231
                ],
                "self.toolmanager.get_tool": [
                    3225
                ],
                "image": [
                    3239,
                    3244,
                    3245,
                    3246,
                    3247,
                    3226,
                    3229
                ],
                "self._get_image_filename": [
                    3226
                ],
                "tool.image": [
                    3226
                ],
                "toggle": [
                    3227,
                    3229,
                    3230
                ],
                "self.add_toolitem": [
                    3228
                ],
                "tool.name": [
                    3235,
                    3228,
                    3231
                ],
                "group": [
                    3228
                ],
                "position": [
                    3228
                ],
                "tool.description": [
                    3229
                ],
                "self.toolmanager.toolmanager_connect": [
                    3338,
                    3231
                ],
                "self._tool_toggled_cbk": [
                    3232
                ],
                "tool.toggled": [
                    3234
                ],
                "basedir": [
                    3242,
                    3246,
                    3247
                ],
                "cbook._get_data_path": [
                    3242
                ],
                "fname": [
                    3249,
                    3250,
                    3243
                ],
                "self._icon_extension": [
                    3245,
                    3247
                ],
                "os.path.isfile": [
                    3249
                ],
                "self.toolmanager.trigger_tool": [
                    3261
                ],
                "self._message_cbk": [
                    3339
                ],
                "backend_version": [
                    3364
                ],
                "FigureManager": [
                    3370
                ],
                "FigureManagerBase": [
                    3370
                ],
                "trigger_manager_draw": [
                    3377
                ],
                "mainloop": [
                    3378
                ],
                "fig_cls": [
                    3388,
                    3389
                ],
                "kwargs.pop": [
                    3388
                ],
                "Figure": [
                    3388
                ],
                "fig": [
                    3389,
                    3390
                ],
                "cls.new_figure_manager_given_figure": [
                    3390
                ],
                "cls.FigureCanvas": [
                    3395
                ],
                "manager": [
                    3396,
                    3397,
                    3402,
                    3403,
                    3404,
                    3418,
                    3420
                ],
                "cls.FigureManager": [
                    3396
                ],
                "cls.trigger_manager_draw": [
                    3401,
                    3404
                ],
                "is_interactive": [
                    3401,
                    3434
                ],
                "Gcf.get_active": [
                    3402
                ],
                "managers": [
                    3416,
                    3418,
                    3415
                ],
                "Gcf.get_all_fig_managers": [
                    3415
                ],
                "manager.show": [
                    3420
                ],
                "cbook._warn_external": [
                    3422
                ],
                "cls.mainloop": [
                    3440,
                    3461,
                    3423
                ],
                "block": [
                    3425,
                    3434,
                    3438,
                    3439,
                    3475
                ],
                "ipython_pylab": [
                    3433,
                    3434,
                    3431
                ],
                "pyplot.show._needmain": [
                    3431
                ],
                "pyplot.show": [
                    3431
                ],
                "pyplot": [
                    3431
                ],
                "cls.__module__": [
                    3463,
                    3455
                ],
                "ShowBase": [
                    3459
                ],
                "Show": [
                    3463
                ],
                "staticmethod": [
                    3444
                ],
                "_Backend": [
                    3467
                ],
                "self.show": [
                    3475
                ]
            },
            "filtered_variables_in_file": {
                "_log": [
                    2482,
                    51,
                    2469
                ],
                "logging.getLogger": [
                    51
                ],
                "logging": [
                    51
                ],
                "_default_filetypes": [
                    100,
                    52,
                    1588
                ],
                "_default_backends": [
                    99,
                    67,
                    108,
                    110,
                    113
                ],
                "description": [
                    97,
                    98,
                    100
                ],
                "backend": [
                    99,
                    2060,
                    1972,
                    1975,
                    1979
                ],
                "backend_class": [
                    110,
                    111,
                    112,
                    113,
                    114
                ],
                "FigureCanvas": [
                    112,
                    3367,
                    1975
                ],
                "importlib.import_module": [
                    112,
                    1975
                ],
                "importlib": [
                    112,
                    1975
                ],
                "__init__": [
                    139
                ],
                "self._texmanager": [
                    652,
                    650,
                    140,
                    653
                ],
                "self": [
                    2054,
                    2060,
                    2066,
                    2072,
                    2073,
                    2074,
                    2075,
                    2086,
                    2087,
                    2094,
                    2098,
                    2099,
                    2106,
                    2126,
                    2127,
                    2128,
                    2147,
                    2148,
                    2155,
                    2156,
                    2163,
                    2165,
                    2178,
                    2179,
                    140,
                    141,
                    2235,
                    190,
                    2249,
                    222,
                    225,
                    2278,
                    238,
                    256,
                    2309,
                    2310,
                    2311,
                    2322,
                    299,
                    396,
                    510,
                    2593,
                    2594,
                    547,
                    2595,
                    2597,
                    2598,
                    2600,
                    2602,
                    2603,
                    2605,
                    2607,
                    2610,
                    563,
                    564,
                    2612,
                    2615,
                    2616,
                    569,
                    570,
                    598,
                    602,
                    612,
                    615,
                    618,
                    620,
                    623,
                    624,
                    2682,
                    650,
                    652,
                    653,
                    2740,
                    2741,
                    2742,
                    2743,
                    2745,
                    2748,
                    2755,
                    2756,
                    2757,
                    2758,
                    2759,
                    2760,
                    2761,
                    2763,
                    716,
                    2765,
                    2766,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    2780,
                    2781,
                    730,
                    731,
                    732,
                    733,
                    2779,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    2801,
                    2802,
                    2803,
                    2813,
                    2814,
                    767,
                    2815,
                    771,
                    777,
                    783,
                    791,
                    792,
                    2844,
                    2845,
                    2846,
                    2847,
                    2849,
                    2850,
                    2851,
                    2852,
                    2853,
                    806,
                    2854,
                    2855,
                    2856,
                    813,
                    817,
                    821,
                    2869,
                    2870,
                    2871,
                    825,
                    2873,
                    2876,
                    829,
                    833,
                    2881,
                    844,
                    2901,
                    2903,
                    856,
                    857,
                    2906,
                    859,
                    860,
                    861,
                    2908,
                    2910,
                    2911,
                    2913,
                    866,
                    2915,
                    871,
                    2923,
                    2924,
                    877,
                    2925,
                    2927,
                    2928,
                    2929,
                    2930,
                    2931,
                    888,
                    2940,
                    2942,
                    2944,
                    2946,
                    2948,
                    2949,
                    2953,
                    2954,
                    2955,
                    2956,
                    2958,
                    914,
                    2970,
                    2974,
                    927,
                    928,
                    929,
                    930,
                    2975,
                    932,
                    2976,
                    934,
                    2977,
                    2978,
                    2985,
                    939,
                    943,
                    2993,
                    947,
                    951,
                    2999,
                    3000,
                    3009,
                    962,
                    3011,
                    3012,
                    3013,
                    966,
                    3014,
                    3016,
                    970,
                    3018,
                    3019,
                    3020,
                    974,
                    3022,
                    3027,
                    981,
                    3031,
                    985,
                    3034,
                    3035,
                    989,
                    3039,
                    3040,
                    3047,
                    3051,
                    3056,
                    1009,
                    3057,
                    3059,
                    3061,
                    3068,
                    3070,
                    1026,
                    3076,
                    3082,
                    3084,
                    3087,
                    3090,
                    3091,
                    3093,
                    3095,
                    3105,
                    3110,
                    1070,
                    1072,
                    1073,
                    3123,
                    1077,
                    3130,
                    1090,
                    1091,
                    3141,
                    1095,
                    1106,
                    3159,
                    3160,
                    1113,
                    1114,
                    3164,
                    3165,
                    3166,
                    1119,
                    3168,
                    3169,
                    3170,
                    1123,
                    1124,
                    3171,
                    3172,
                    1134,
                    3196,
                    3199,
                    1154,
                    3202,
                    1156,
                    1158,
                    3210,
                    1172,
                    3225,
                    3226,
                    1180,
                    3228,
                    1182,
                    1183,
                    3231,
                    3232,
                    3235,
                    3245,
                    3247,
                    1202,
                    1203,
                    1204,
                    3261,
                    1230,
                    1231,
                    1249,
                    1250,
                    1287,
                    1289,
                    3337,
                    1291,
                    1292,
                    1293,
                    1294,
                    3338,
                    3339,
                    3343,
                    1298,
                    1301,
                    1302,
                    1304,
                    1306,
                    1308,
                    1313,
                    1314,
                    1316,
                    1322,
                    1334,
                    1335,
                    1339,
                    1340,
                    1342,
                    1410,
                    1413,
                    1414,
                    1415,
                    1416,
                    1419,
                    1420,
                    1421,
                    1422,
                    3475,
                    1460,
                    1461,
                    1462,
                    1463,
                    1501,
                    1502,
                    1596,
                    1597,
                    1598,
                    1599,
                    1600,
                    1601,
                    1603,
                    1604,
                    1605,
                    1606,
                    1607,
                    1608,
                    1609,
                    1610,
                    1611,
                    1612,
                    1642,
                    1646,
                    1653,
                    1656,
                    1657,
                    1668,
                    1669,
                    1676,
                    1677,
                    1678,
                    1686,
                    1687,
                    1700,
                    1703,
                    1704,
                    1712,
                    1713,
                    1714,
                    1724,
                    1727,
                    1741,
                    1743,
                    1745,
                    1747,
                    1760,
                    1762,
                    1764,
                    1786,
                    1787,
                    1788,
                    1809,
                    1811,
                    1813,
                    1827,
                    1829,
                    1847,
                    1857,
                    1858,
                    1874,
                    1890,
                    1892,
                    1901,
                    1902,
                    1920,
                    1921,
                    1922,
                    1936,
                    1980,
                    1982,
                    1987,
                    1991
                ],
                "self._text2path": [
                    612,
                    620,
                    141,
                    623,
                    624,
                    563
                ],
                "textpath.TextToPath": [
                    141
                ],
                "textpath": [
                    141
                ],
                "vertices": [
                    187,
                    188,
                    189
                ],
                "codes": [
                    187,
                    565,
                    567
                ],
                "path.iter_segments": [
                    187
                ],
                "path": [
                    229,
                    326,
                    581,
                    329,
                    238,
                    887,
                    598,
                    567,
                    888,
                    602,
                    187
                ],
                "trans": [
                    187,
                    1308,
                    1309
                ],
                "x": [
                    1410,
                    2947,
                    2950,
                    2952,
                    1289,
                    3087,
                    1296,
                    1809,
                    1811,
                    1302,
                    1309,
                    547,
                    1846,
                    1847,
                    1849,
                    189,
                    574,
                    192,
                    1857,
                    3066,
                    579,
                    1745,
                    599,
                    1501,
                    1762,
                    3062,
                    1786,
                    510
                ],
                "y": [
                    1410,
                    2947,
                    2950,
                    2952,
                    1291,
                    3087,
                    1296,
                    1809,
                    1811,
                    1302,
                    1309,
                    547,
                    1846,
                    1847,
                    1850,
                    189,
                    574,
                    192,
                    1857,
                    579,
                    1745,
                    599,
                    1501,
                    1762,
                    3062,
                    1786,
                    3067,
                    510
                ],
                "self.draw_path": [
                    602,
                    190,
                    238
                ],
                "gc": [
                    257,
                    397,
                    547,
                    299,
                    190,
                    600,
                    601,
                    602,
                    737,
                    226,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    254,
                    510
                ],
                "marker_path": [
                    190
                ],
                "marker_trans": [
                    191
                ],
                "translate": [
                    192,
                    576,
                    571
                ],
                "transforms.Affine2D": [
                    192
                ],
                "transforms": [
                    192,
                    324,
                    887
                ],
                "rgbFace": [
                    193,
                    225,
                    424,
                    238,
                    400,
                    438,
                    439,
                    440,
                    445
                ],
                "path_ids": [
                    376,
                    226,
                    222,
                    407
                ],
                "self._iter_collection_raw_paths": [
                    222
                ],
                "master_transform": [
                    416,
                    257,
                    226,
                    329,
                    222,
                    414
                ],
                "paths": [
                    257,
                    326,
                    341,
                    249,
                    317,
                    223
                ],
                "all_transforms": [
                    226,
                    328,
                    375,
                    344,
                    413,
                    318,
                    223
                ],
                "xo": [
                    225,
                    417,
                    418,
                    419,
                    421,
                    232,
                    237,
                    405,
                    409,
                    445
                ],
                "yo": [
                    225,
                    417,
                    418,
                    420,
                    421,
                    232,
                    237,
                    405,
                    409,
                    445
                ],
                "path_id": [
                    225,
                    445,
                    229,
                    407
                ],
                "gc0": [
                    225,
                    427,
                    396,
                    397,
                    238,
                    429,
                    433,
                    403,
                    435,
                    437,
                    441,
                    443,
                    445,
                    446
                ],
                "self._iter_collection": [
                    225
                ],
                "offsets": [
                    257,
                    226,
                    377,
                    394,
                    345
                ],
                "offsetTrans": [
                    257,
                    394,
                    227
                ],
                "facecolors": [
                    257,
                    227,
                    424,
                    342,
                    379,
                    253
                ],
                "edgecolors": [
                    258,
                    227,
                    430,
                    342,
                    380,
                    252,
                    253
                ],
                "linewidths": [
                    258,
                    227,
                    427,
                    381,
                    254
                ],
                "linestyles": [
                    227,
                    429,
                    382
                ],
                "antialiaseds": [
                    441,
                    228,
                    383
                ],
                "urls": [
                    384,
                    443,
                    228
                ],
                "offset_position": [
                    386,
                    228,
                    410
                ],
                "transform": [
                    416,
                    417,
                    576,
                    324,
                    229,
                    581,
                    328,
                    297,
                    329,
                    299,
                    236,
                    237,
                    238,
                    598,
                    602,
                    571,
                    412
                ],
                "transform.frozen": [
                    297,
                    236
                ],
                "transform.translate": [
                    237
                ],
                "QuadMesh.convert_mesh_to_paths": [
                    249
                ],
                "QuadMesh": [
                    249
                ],
                "meshWidth": [
                    250
                ],
                "meshHeight": [
                    250
                ],
                "coordinates": [
                    250
                ],
                "np.array": [
                    254
                ],
                "np": [
                    3041,
                    2306,
                    421,
                    910,
                    911,
                    2870,
                    568,
                    254
                ],
                "gc.get_linewidth": [
                    254
                ],
                "self.draw_path_collection": [
                    256
                ],
                "antialiased": [
                    258
                ],
                "tri": [
                    298,
                    299
                ],
                "col": [
                    298,
                    299
                ],
                "triangles_array": [
                    298
                ],
                "colors_array": [
                    298
                ],
                "self.draw_gouraud_triangle": [
                    299
                ],
                "Npaths": [
                    321,
                    376,
                    326,
                    391,
                    341,
                    342,
                    407,
                    344,
                    378,
                    317,
                    319
                ],
                "Ntransforms": [
                    327,
                    328,
                    375,
                    411,
                    413,
                    318,
                    319
                ],
                "N": [
                    325,
                    378,
                    406,
                    345,
                    346,
                    319
                ],
                "transforms.IdentityTransform": [
                    324
                ],
                "i": [
                    2949,
                    2953,
                    3082,
                    3084,
                    406,
                    407,
                    409,
                    413,
                    424,
                    427,
                    429,
                    430,
                    441,
                    443,
                    2500,
                    325,
                    326,
                    328,
                    2507,
                    3061
                ],
                "Affine2D": [
                    328,
                    576,
                    571,
                    413
                ],
                "Npath_ids": [
                    344,
                    345,
                    346
                ],
                "Noffsets": [
                    393,
                    409,
                    408,
                    377,
                    378
                ],
                "Nfacecolors": [
                    423,
                    424,
                    391,
                    399,
                    379
                ],
                "Nedgecolors": [
                    391,
                    425,
                    430,
                    402,
                    380
                ],
                "Nlinewidths": [
                    426,
                    427,
                    381
                ],
                "Nlinestyles": [
                    428,
                    429,
                    382
                ],
                "Naa": [
                    441,
                    383
                ],
                "Nurls": [
                    384,
                    442,
                    443
                ],
                "cbook.warn_deprecated": [
                    387,
                    2503,
                    2490,
                    1851,
                    1148
                ],
                "cbook": [
                    2817,
                    387,
                    1924,
                    3333,
                    2957,
                    3094,
                    2072,
                    2073,
                    3102,
                    2079,
                    2083,
                    2984,
                    938,
                    3242,
                    1590,
                    1975,
                    2742,
                    2490,
                    1851,
                    2618,
                    2747,
                    3002,
                    1603,
                    2503,
                    2631,
                    3021,
                    2894,
                    1877,
                    3422,
                    870,
                    1523,
                    2933,
                    887,
                    506,
                    1148,
                    3069
                ],
                "toffsets": [
                    409,
                    394
                ],
                "offsetTrans.transform": [
                    394
                ],
                "self.new_gc": [
                    396
                ],
                "gc0.copy_properties": [
                    397
                ],
                "gc0.set_linewidth": [
                    433,
                    403,
                    427
                ],
                "xp": [
                    417,
                    419
                ],
                "yp": [
                    417,
                    420
                ],
                "transform.transform": [
                    417
                ],
                "np.isfinite": [
                    421
                ],
                "gc0.set_dashes": [
                    429
                ],
                "fg": [
                    928,
                    930,
                    932,
                    934,
                    430,
                    431,
                    432,
                    435,
                    437
                ],
                "gc0.set_foreground": [
                    435,
                    437
                ],
                "gc0.set_antialiased": [
                    441
                ],
                "gc0.set_url": [
                    443
                ],
                "gc0.restore": [
                    446
                ],
                "self._draw_text_as_path": [
                    547,
                    510
                ],
                "s": [
                    1667,
                    1668,
                    1669,
                    1675,
                    1676,
                    1677,
                    1810,
                    1811,
                    1684,
                    1813,
                    1686,
                    1687,
                    547,
                    1701,
                    1703,
                    1704,
                    1710,
                    1712,
                    1713,
                    565,
                    1723,
                    1724,
                    2235,
                    1727,
                    2886,
                    2890,
                    1744,
                    1745,
                    1747,
                    2900,
                    2901,
                    599,
                    1761,
                    1762,
                    1764,
                    615,
                    620,
                    628,
                    1785,
                    1786,
                    1787,
                    510
                ],
                "prop": [
                    547,
                    613,
                    620,
                    624,
                    625,
                    564,
                    565,
                    599,
                    510
                ],
                "angle": [
                    578,
                    547,
                    599,
                    568,
                    573,
                    510
                ],
                "cbook._delete_parameter": [
                    506
                ],
                "ismath": [
                    610,
                    547,
                    619,
                    565,
                    599
                ],
                "text2path": [
                    577,
                    563,
                    572,
                    565
                ],
                "fontsize": [
                    577,
                    613,
                    615,
                    564,
                    572
                ],
                "self.points_to_pixels": [
                    618,
                    564
                ],
                "prop.get_size_in_points": [
                    625,
                    564,
                    613
                ],
                "verts": [
                    565,
                    567
                ],
                "text2path.get_text_path": [
                    565
                ],
                "Path": [
                    977,
                    567
                ],
                "np.deg2rad": [
                    568
                ],
                "self.flipy": [
                    569
                ],
                "width": [
                    570
                ],
                "height": [
                    570,
                    574
                ],
                "self.get_canvas_width_height": [
                    570
                ],
                "rotate": [
                    576,
                    571
                ],
                "scale": [
                    576,
                    2465,
                    1027,
                    1028,
                    571,
                    2461,
                    2462
                ],
                "text2path.FONT_SCALE": [
                    577,
                    572
                ],
                "self._get_text_path_transform": [
                    598
                ],
                "color": [
                    600,
                    602
                ],
                "gc.get_rgb": [
                    600
                ],
                "gc.set_linewidth": [
                    601
                ],
                "texmanager": [
                    612,
                    614
                ],
                "self._text2path.get_texmanager": [
                    612
                ],
                "w": [
                    614,
                    616,
                    943,
                    629,
                    631,
                    634
                ],
                "h": [
                    614,
                    616,
                    629,
                    632,
                    634
                ],
                "d": [
                    614,
                    616,
                    630,
                    633,
                    634
                ],
                "texmanager.get_text_width_height_descent": [
                    614
                ],
                "dpi": [
                    2116,
                    618,
                    620,
                    2063,
                    2064,
                    2065,
                    626,
                    2066,
                    2073
                ],
                "dims": [
                    620,
                    621
                ],
                "self._text2path.mathtext_parser.parse": [
                    620
                ],
                "self._text2path.mathtext_parser": [
                    620
                ],
                "flags": [
                    628,
                    623
                ],
                "self._text2path._get_hinting_flag": [
                    623
                ],
                "font": [
                    624,
                    626,
                    628,
                    629,
                    630
                ],
                "self._text2path._get_font": [
                    624
                ],
                "size": [
                    625,
                    626
                ],
                "font.set_size": [
                    626
                ],
                "font.set_text": [
                    628
                ],
                "font.get_width_height": [
                    629
                ],
                "font.get_descent": [
                    630
                ],
                "TexManager": [
                    652
                ],
                "GraphicsContextBase": [
                    657
                ],
                "points": [
                    678
                ],
                "self._alpha": [
                    928,
                    737,
                    930,
                    716,
                    856,
                    859,
                    767
                ],
                "self._forced_alpha": [
                    929,
                    738,
                    813,
                    717,
                    857,
                    860,
                    927
                ],
                "self._antialiased": [
                    771,
                    866,
                    739,
                    718
                ],
                "self._capstyle": [
                    777,
                    740,
                    871,
                    719
                ],
                "self._cliprect": [
                    720,
                    877,
                    741,
                    783
                ],
                "self._clippath": [
                    742,
                    721,
                    888,
                    791,
                    792
                ],
                "self._dashes": [
                    722,
                    914,
                    806,
                    743
                ],
                "self._joinstyle": [
                    744,
                    817,
                    723,
                    939
                ],
                "self._linestyle": [
                    745,
                    724
                ],
                "self._linewidth": [
                    746,
                    821,
                    725,
                    943
                ],
                "self._rgb": [
                    928,
                    930,
                    932,
                    934,
                    747,
                    726,
                    825,
                    861
                ],
                "self._hatch": [
                    970,
                    748,
                    966,
                    727
                ],
                "self._hatch_color": [
                    728,
                    981,
                    985,
                    749
                ],
                "colors.to_rgba": [
                    728,
                    930,
                    934
                ],
                "colors": [
                    728,
                    930,
                    934
                ],
                "rcParams": [
                    2064,
                    2078,
                    2082,
                    2599,
                    2090,
                    2353,
                    2354,
                    2355,
                    2356,
                    2357,
                    2102,
                    2358,
                    2360,
                    2361,
                    2362,
                    2363,
                    2359,
                    2364,
                    2365,
                    2366,
                    728,
                    729,
                    2650,
                    2523,
                    2140,
                    2525,
                    2655
                ],
                "self._hatch_linewidth": [
                    729,
                    989,
                    750
                ],
                "self._url": [
                    730,
                    947,
                    829,
                    751
                ],
                "self._gid": [
                    752,
                    833,
                    731,
                    951
                ],
                "self._snap": [
                    753,
                    962,
                    732,
                    844
                ],
                "self._sketch": [
                    1009,
                    754,
                    1026,
                    733
                ],
                "gc._alpha": [
                    737
                ],
                "gc._forced_alpha": [
                    738
                ],
                "gc._antialiased": [
                    739
                ],
                "gc._capstyle": [
                    740
                ],
                "gc._cliprect": [
                    741
                ],
                "gc._clippath": [
                    742
                ],
                "gc._dashes": [
                    743
                ],
                "gc._joinstyle": [
                    744
                ],
                "gc._linestyle": [
                    745
                ],
                "gc._linewidth": [
                    746
                ],
                "gc._rgb": [
                    747
                ],
                "gc._hatch": [
                    748
                ],
                "gc._hatch_color": [
                    749
                ],
                "gc._hatch_linewidth": [
                    750
                ],
                "gc._url": [
                    751
                ],
                "gc._gid": [
                    752
                ],
                "gc._snap": [
                    753
                ],
                "gc._sketch": [
                    754
                ],
                "self._clippath.get_transformed_path_and_affine": [
                    792
                ],
                "alpha": [
                    856,
                    855
                ],
                "self.set_foreground": [
                    861
                ],
                "b": [
                    866
                ],
                "cbook._check_in_list": [
                    938,
                    870
                ],
                "cs": [
                    870,
                    871
                ],
                "rectangle": [
                    877
                ],
                "cbook._check_isinstance": [
                    887
                ],
                "transforms.TransformedPath": [
                    887
                ],
                "dash_list": [
                    914,
                    909,
                    910
                ],
                "dl": [
                    910,
                    911
                ],
                "np.asarray": [
                    910
                ],
                "np.any": [
                    911
                ],
                "dash_offset": [
                    914
                ],
                "isRGBA": [
                    931,
                    927
                ],
                "js": [
                    938,
                    939
                ],
                "url": [
                    947
                ],
                "snap": [
                    962
                ],
                "hatch": [
                    977,
                    974,
                    966,
                    975
                ],
                "self.get_hatch": [
                    974
                ],
                "Path.hatch": [
                    977
                ],
                "density": [
                    977
                ],
                "hatch_color": [
                    985
                ],
                "length": [
                    1028
                ],
                "randomness": [
                    1028
                ],
                "self.callbacks": [
                    1154,
                    1156,
                    1669,
                    1158,
                    1677,
                    1172,
                    1813,
                    1687,
                    1180,
                    1182,
                    1827,
                    1704,
                    1070,
                    1713,
                    2235,
                    1727,
                    1858,
                    1603,
                    2249,
                    1747,
                    1764,
                    1134,
                    1787
                ],
                "callbacks": [
                    2278,
                    1070
                ],
                "callbacks.copy": [
                    1070
                ],
                "self.interval": [
                    1072,
                    1090
                ],
                "interval": [
                    1089,
                    1090,
                    2278,
                    1072,
                    1108,
                    1112,
                    1113
                ],
                "self.single_shot": [
                    1073
                ],
                "self._timer_stop": [
                    1077,
                    1095
                ],
                "self._timer_start": [
                    1091
                ],
                "self._interval": [
                    1113,
                    1106
                ],
                "self._timer_set_interval": [
                    1114
                ],
                "interval.setter": [
                    1108
                ],
                "self._single": [
                    1123,
                    1119
                ],
                "ss": [
                    1123
                ],
                "self._timer_set_single_shot": [
                    1124
                ],
                "single_shot.setter": [
                    1121
                ],
                "single_shot": [
                    1121
                ],
                "self.callbacks.append": [
                    1134
                ],
                "func": [
                    1154,
                    1157,
                    1158,
                    1134,
                    1135,
                    1172,
                    1173,
                    2235,
                    1180
                ],
                "args": [
                    1154,
                    1922,
                    1134,
                    1172,
                    1173,
                    1147,
                    1180,
                    3389
                ],
                "kwargs": [
                    1154,
                    1922,
                    2121,
                    1134,
                    1172,
                    1173,
                    3388,
                    1463,
                    1147,
                    1180,
                    3389,
                    1726
                ],
                "self.callbacks.remove": [
                    1154,
                    1180
                ],
                "funcs": [
                    1156,
                    1157,
                    1158
                ],
                "c": [
                    1156
                ],
                "self.callbacks.pop": [
                    1158
                ],
                "funcs.index": [
                    1158
                ],
                "ret": [
                    1179,
                    1173
                ],
                "self.stop": [
                    1183
                ],
                "self.name": [
                    1202,
                    1419
                ],
                "name": [
                    1952,
                    1249,
                    1410,
                    1953,
                    1954,
                    1287,
                    1230,
                    1202,
                    1460,
                    3446,
                    3261,
                    1501,
                    3455
                ],
                "self.canvas": [
                    2949,
                    2954,
                    2955,
                    1301,
                    1302,
                    1304,
                    2970,
                    2976,
                    2593,
                    3110,
                    2600,
                    2603,
                    1203,
                    2612,
                    2740,
                    3123,
                    1335,
                    2999,
                    1340,
                    2755,
                    3011,
                    2757,
                    3012,
                    2759,
                    3141,
                    3035,
                    3166,
                    3169,
                    3170,
                    2925,
                    2928,
                    2929,
                    3056
                ],
                "canvas": [
                    1410,
                    1287,
                    2440,
                    2060,
                    2061,
                    2458,
                    2593,
                    2594,
                    2347,
                    2348,
                    2350,
                    2607,
                    1203,
                    1460,
                    2740,
                    2741,
                    2487,
                    2107,
                    2371,
                    2499,
                    2500,
                    3395,
                    3396,
                    2377,
                    1230,
                    2517,
                    2518,
                    2520,
                    1501,
                    1249,
                    1250
                ],
                "self.guiEvent": [
                    1204
                ],
                "guiEvent": [
                    1857,
                    1410,
                    1763,
                    1287,
                    1703,
                    1712,
                    1746,
                    1204,
                    1460,
                    1686,
                    1812,
                    1786,
                    1501
                ],
                "Event": [
                    1249,
                    1253,
                    1287,
                    1257,
                    1230,
                    1425,
                    1234,
                    1460,
                    1207
                ],
                "Event.__init__": [
                    1249,
                    1460,
                    1230,
                    1287
                ],
                "self.renderer": [
                    1231
                ],
                "renderer": [
                    1536,
                    1538,
                    1668,
                    2093,
                    1231,
                    1521,
                    2098,
                    2100,
                    1530
                ],
                "self.width": [
                    1250
                ],
                "self.height": [
                    1250
                ],
                "canvas.get_width_height": [
                    1250
                ],
                "lastevent": [
                    1281
                ],
                "self.x": [
                    1289,
                    1420
                ],
                "self.y": [
                    1291,
                    1420
                ],
                "self.inaxes": [
                    1322,
                    1292,
                    1422,
                    1302,
                    1334,
                    1304,
                    1306,
                    1339,
                    1308
                ],
                "self.xdata": [
                    1313,
                    1420,
                    1293
                ],
                "self.ydata": [
                    1314,
                    1420,
                    1294
                ],
                "self._update_enter_leave": [
                    1298,
                    1316
                ],
                "self.canvas.mouse_grabber": [
                    1304,
                    1301
                ],
                "self.canvas.inaxes": [
                    1302
                ],
                "self.inaxes.transData.inverted": [
                    1308
                ],
                "self.inaxes.transData": [
                    1308
                ],
                "xdata": [
                    1313,
                    1309
                ],
                "ydata": [
                    1314,
                    1309
                ],
                "trans.transform": [
                    1309
                ],
                "LocationEvent.lastevent": [
                    1827,
                    1828,
                    1320,
                    1321,
                    1342
                ],
                "LocationEvent": [
                    1857,
                    1410,
                    1827,
                    1828,
                    1320,
                    1321,
                    1353,
                    1466,
                    1501,
                    1342
                ],
                "last": [
                    1321,
                    1322,
                    1325,
                    1326
                ],
                "last.inaxes": [
                    1322,
                    1325
                ],
                "last.canvas.callbacks.process": [
                    1326
                ],
                "last.canvas.callbacks": [
                    1326
                ],
                "last.canvas": [
                    1326
                ],
                "self.canvas.callbacks.process": [
                    1340,
                    1335
                ],
                "self.canvas.callbacks": [
                    1340,
                    1335
                ],
                "IntEnum": [
                    1345
                ],
                "LEFT": [
                    1346
                ],
                "MIDDLE": [
                    1347
                ],
                "RIGHT": [
                    1348
                ],
                "BACK": [
                    1349
                ],
                "FORWARD": [
                    1350
                ],
                "LocationEvent.__init__": [
                    1410,
                    1501
                ],
                "button": [
                    1760,
                    1762,
                    1411,
                    1412,
                    1413,
                    1786
                ],
                "MouseButton.__members__.values": [
                    1411
                ],
                "MouseButton.__members__": [
                    1411
                ],
                "MouseButton": [
                    2522,
                    1411,
                    1412
                ],
                "self.button": [
                    1413,
                    1421
                ],
                "self.key": [
                    1502,
                    1414
                ],
                "key": [
                    1700,
                    1414,
                    1703,
                    1712,
                    1502
                ],
                "self.step": [
                    1415
                ],
                "step": [
                    1746,
                    1740,
                    1415
                ],
                "self.dblclick": [
                    1416,
                    1421
                ],
                "dblclick": [
                    1416,
                    1763
                ],
                "self.mouseevent": [
                    1461
                ],
                "mouseevent": [
                    1762,
                    1764,
                    1745,
                    1747,
                    1461,
                    1657,
                    1724,
                    1725
                ],
                "self.artist": [
                    1462
                ],
                "artist": [
                    1724,
                    1462
                ],
                "self.__dict__.update": [
                    1463
                ],
                "self.__dict__": [
                    1463
                ],
                "Done": [
                    1521,
                    1529
                ],
                "cbook._setattr_cm": [
                    2072,
                    2073,
                    1523
                ],
                "figure": [
                    1600,
                    3395,
                    1523,
                    1525,
                    1526,
                    1528,
                    1530,
                    1599
                ],
                "_draw": [
                    1523
                ],
                "print_method": [
                    2114,
                    2061,
                    2096,
                    1524,
                    1526,
                    1528
                ],
                "fmt": [
                    1985,
                    1991,
                    1525,
                    1526,
                    1977,
                    1979,
                    1980
                ],
                "figure.canvas.get_default_filetype": [
                    1525
                ],
                "figure.canvas": [
                    1525,
                    1526
                ],
                "io.BytesIO": [
                    1528
                ],
                "io": [
                    1528
                ],
                "figure.dpi": [
                    1528
                ],
                "figure._cachedRenderer": [
                    1530
                ],
                "exc.args": [
                    1530
                ],
                "exc": [
                    2482,
                    1530,
                    2469,
                    3422
                ],
                "draw_disabled": [
                    1532
                ],
                "meth_name": [
                    1536,
                    1533,
                    1534,
                    1535
                ],
                "RendererBase": [
                    1533
                ],
                "meth_name.startswith": [
                    1534
                ],
                "ip": [
                    1637,
                    1638,
                    1550,
                    1551,
                    1552,
                    1624,
                    1625,
                    1629
                ],
                "ip.parent": [
                    1552,
                    1551
                ],
                "required_interactive_framework": [
                    1567
                ],
                "events": [
                    1569
                ],
                "fixed_dpi": [
                    1586
                ],
                "filetypes": [
                    1588
                ],
                "cls": [
                    1952,
                    1633,
                    3395,
                    3396,
                    3461,
                    3455,
                    3463,
                    3401,
                    3464,
                    3404,
                    3440,
                    1941,
                    1592,
                    1593,
                    3390,
                    3423
                ],
                "cbook._classproperty": [
                    1590
                ],
                "self._fix_ipython_backend2gui": [
                    1596
                ],
                "self._is_idle_drawing": [
                    1920,
                    1642,
                    1612,
                    1646,
                    1597
                ],
                "self._is_saving": [
                    2179,
                    1653,
                    1598
                ],
                "figure.set_canvas": [
                    1599
                ],
                "self.figure": [
                    1600,
                    2178,
                    2106,
                    2086,
                    2087,
                    2094,
                    2126,
                    1936,
                    2127,
                    1874,
                    2066,
                    2098,
                    2099,
                    2128,
                    1657,
                    2074,
                    2075,
                    2073
                ],
                "self.manager": [
                    2156,
                    1601,
                    2147,
                    2148
                ],
                "cbook.CallbackRegistry": [
                    1603
                ],
                "self.widgetlock": [
                    1656,
                    1604
                ],
                "widgets.LockDraw": [
                    1604
                ],
                "widgets": [
                    1604
                ],
                "self._button": [
                    1760,
                    1605,
                    1741,
                    1743,
                    1745,
                    1811,
                    1788
                ],
                "self._key": [
                    1762,
                    1700,
                    1606,
                    1745,
                    1714,
                    1811,
                    1786
                ],
                "self._lastx": [
                    1829,
                    1703,
                    1607,
                    1712,
                    1809,
                    1847
                ],
                "self._lasty": [
                    1829,
                    1703,
                    1607,
                    1712,
                    1809,
                    1847
                ],
                "self.button_pick_id": [
                    1608
                ],
                "self.mpl_connect": [
                    1608,
                    1609
                ],
                "self.pick": [
                    1608,
                    1609
                ],
                "self.scroll_pick_id": [
                    1609
                ],
                "self.mouse_grabber": [
                    1890,
                    1892,
                    1610,
                    1901,
                    1902
                ],
                "self.toolbar": [
                    2616,
                    2610,
                    1611,
                    2615
                ],
                "sys.modules": [
                    3463,
                    1621,
                    3455
                ],
                "sys": [
                    3463,
                    1621,
                    3455
                ],
                "IPython.get_ipython": [
                    1624
                ],
                "IPython": [
                    1624
                ],
                "pt": [
                    1628
                ],
                "rif": [
                    1633,
                    1635
                ],
                "backend2gui_rif": [
                    1634,
                    1636,
                    1638
                ],
                "get": [
                    1634
                ],
                "_is_non_interactive_terminal_ipython": [
                    1637
                ],
                "ip.enable_gui": [
                    1638
                ],
                "functools.lru_cache": [
                    1615
                ],
                "functools": [
                    2095,
                    1615
                ],
                "contextmanager": [
                    1640,
                    2858
                ],
                "self.widgetlock.locked": [
                    1656
                ],
                "self.figure.pick": [
                    1657
                ],
                "event": [
                    3075,
                    3088,
                    3100,
                    2651,
                    2656,
                    3199,
                    3202,
                    1668,
                    1669,
                    3210,
                    1676,
                    1677,
                    1686,
                    1687,
                    1702,
                    1704,
                    1711,
                    1713,
                    1724,
                    1727,
                    1786,
                    1787,
                    3343,
                    1811,
                    1813,
                    2844,
                    2345,
                    2348,
                    1857,
                    1858,
                    2369,
                    2881,
                    2883,
                    2886,
                    2376,
                    2378,
                    2891,
                    2892,
                    2383,
                    2895,
                    2896,
                    2387,
                    2390,
                    2393,
                    2395,
                    2907,
                    2397,
                    2908,
                    2399,
                    2909,
                    2401,
                    2910,
                    2912,
                    2404,
                    2913,
                    2914,
                    2915,
                    2418,
                    2423,
                    2939,
                    2940,
                    2947,
                    2950,
                    2952,
                    2442,
                    2962,
                    2966,
                    2968,
                    2971,
                    2460,
                    2979,
                    2980,
                    2473,
                    2989,
                    2486,
                    2488,
                    2489,
                    2497,
                    2498,
                    2501,
                    2502,
                    3026,
                    2518,
                    2522,
                    3034,
                    3042,
                    3043,
                    3045,
                    3047,
                    3062,
                    3066,
                    3067
                ],
                "DrawEvent": [
                    1668
                ],
                "self.callbacks.process": [
                    1858,
                    1827,
                    1764,
                    1669,
                    1704,
                    1677,
                    1713,
                    1747,
                    1813,
                    1687,
                    1787,
                    1727
                ],
                "ResizeEvent": [
                    1676
                ],
                "self.draw_idle": [
                    1678
                ],
                "CloseEvent": [
                    1686
                ],
                "KeyEvent": [
                    1702,
                    1711
                ],
                "PickEvent": [
                    1724
                ],
                "mouseevent.guiEvent": [
                    1725
                ],
                "MouseEvent": [
                    1745,
                    1762,
                    1811,
                    1786
                ],
                "xy": [
                    1875,
                    1845,
                    1846
                ],
                "axes_list": [
                    1874,
                    1876,
                    1877
                ],
                "a": [
                    2949,
                    2950,
                    2951,
                    2952,
                    2953,
                    2970,
                    2971,
                    3110,
                    3111,
                    3112,
                    2487,
                    2489,
                    2494,
                    2500,
                    2502,
                    3014,
                    3015,
                    2507,
                    2891,
                    2892,
                    2894,
                    2895,
                    2896,
                    1874,
                    1875,
                    2898,
                    3031,
                    3034,
                    3170,
                    3171,
                    2929,
                    2930
                ],
                "self.figure.get_axes": [
                    1874
                ],
                "a.patch.contains_point": [
                    1875
                ],
                "a.patch": [
                    1875
                ],
                "a.get_visible": [
                    1875,
                    2892
                ],
                "axes": [
                    2981,
                    1877,
                    1879,
                    1881,
                    2970,
                    2972
                ],
                "cbook._topmost_artist": [
                    1877,
                    2894
                ],
                "ax": [
                    2438,
                    2439,
                    3081,
                    3083,
                    2444,
                    2445,
                    2446,
                    2447,
                    3086,
                    2456,
                    2457,
                    2461,
                    2463,
                    2464,
                    2467,
                    2470,
                    2471,
                    2474,
                    2476,
                    2477,
                    2480,
                    2483,
                    2484,
                    2995,
                    2997,
                    2998,
                    2999,
                    3136,
                    3137,
                    3139,
                    3140,
                    3040,
                    1890,
                    3042,
                    1892,
                    3044,
                    3046,
                    1901,
                    2418,
                    3061,
                    2425,
                    2426,
                    2427,
                    2428
                ],
                "self._idle_draw_cntx": [
                    1921
                ],
                "self.draw": [
                    1922
                ],
                "cbook.deprecated": [
                    2817,
                    1924,
                    3333,
                    2618,
                    2933,
                    3002,
                    3102
                ],
                "self.figure.bbox.width": [
                    1936
                ],
                "self.figure.bbox": [
                    1936
                ],
                "self.figure.bbox.height": [
                    1936
                ],
                "cls.filetypes": [
                    1952,
                    1941
                ],
                "groupings": [
                    1953,
                    1954,
                    1955,
                    1951
                ],
                "ext": [
                    1952,
                    1953
                ],
                "cls.filetypes.items": [
                    1952
                ],
                "append": [
                    1953
                ],
                "groupings.setdefault": [
                    1953
                ],
                "sort": [
                    1954
                ],
                "canvas_class": [
                    1985,
                    1986,
                    1987,
                    1974,
                    1977
                ],
                "cbook._backend_module_name": [
                    1975
                ],
                "get_registered_canvas_class": [
                    1985
                ],
                "self.switch_backends": [
                    1987
                ],
                "join": [
                    1991
                ],
                "self.get_supported_filetypes": [
                    1991
                ],
                "filename": [
                    2049,
                    2050,
                    2051,
                    2052,
                    2115,
                    2055,
                    2056
                ],
                "os.PathLike": [
                    2049
                ],
                "os": [
                    2049,
                    2050,
                    3249,
                    2052
                ],
                "os.fspath": [
                    2050
                ],
                "os.path.splitext": [
                    2052
                ],
                "os.path": [
                    3249,
                    2052
                ],
                "self.get_default_filetype": [
                    2165,
                    2054
                ],
                "filename.rstrip": [
                    2056
                ],
                "format.lower": [
                    2057
                ],
                "self._get_output_canvas": [
                    2060
                ],
                "self.figure.dpi": [
                    2066
                ],
                "origfacecolor": [
                    2080,
                    2074,
                    2126
                ],
                "self.figure.get_facecolor": [
                    2074
                ],
                "origedgecolor": [
                    2075,
                    2084,
                    2127
                ],
                "self.figure.get_edgecolor": [
                    2075
                ],
                "facecolor": [
                    2080,
                    2117,
                    2086,
                    2077,
                    2078,
                    2079
                ],
                "cbook._str_equal": [
                    2083,
                    2079
                ],
                "edgecolor": [
                    2081,
                    2082,
                    2083,
                    2084,
                    2118,
                    2087
                ],
                "self.figure.set_facecolor": [
                    2126,
                    2086
                ],
                "self.figure.set_edgecolor": [
                    2127,
                    2087
                ],
                "bbox_inches": [
                    2089,
                    2090,
                    2091,
                    2092,
                    2123,
                    2099,
                    2103,
                    2106,
                    2109
                ],
                "_get_renderer": [
                    2093
                ],
                "functools.partial": [
                    2095
                ],
                "orientation": [
                    2096,
                    2119
                ],
                "self.figure.draw": [
                    2098
                ],
                "self.figure.get_tightbbox": [
                    2099
                ],
                "bbox_extra_artists": [
                    2100
                ],
                "pad_inches": [
                    2101,
                    2102,
                    2103
                ],
                "bbox_inches.padded": [
                    2103
                ],
                "restore_bbox": [
                    2106,
                    2123,
                    2124,
                    2109
                ],
                "tight_bbox.adjust_bbox": [
                    2106
                ],
                "tight_bbox": [
                    2106
                ],
                "canvas.fixed_dpi": [
                    2107
                ],
                "_bbox_inches_restore": [
                    2120,
                    2109,
                    2111
                ],
                "result": [
                    2129,
                    2114
                ],
                "self.figure.set_canvas": [
                    2128
                ],
                "self.manager.get_window_title": [
                    2148
                ],
                "self.manager.set_window_title": [
                    2156
                ],
                "title": [
                    2156
                ],
                "default_basename": [
                    2163,
                    2164,
                    2166
                ],
                "self.get_window_title": [
                    2163
                ],
                "default_basename.replace": [
                    2164
                ],
                "default_filetype": [
                    2165,
                    2166
                ],
                "default_filename": [
                    2166,
                    2167
                ],
                "newCanvas": [
                    2178,
                    2179,
                    2180
                ],
                "FigureCanvasClass": [
                    2178
                ],
                "newCanvas._is_saving": [
                    2179
                ],
                "self.callbacks.connect": [
                    2235
                ],
                "self.callbacks.disconnect": [
                    2249
                ],
                "cid": [
                    2249
                ],
                "_timer_cls": [
                    2253
                ],
                "TimerBase": [
                    2253
                ],
                "self._timer_cls": [
                    2278
                ],
                "timeout": [
                    2305,
                    2306,
                    2310
                ],
                "np.inf": [
                    2306,
                    2870
                ],
                "timestep": [
                    2312,
                    2307,
                    2310
                ],
                "counter": [
                    2313,
                    2308,
                    2310
                ],
                "self._looping": [
                    2322,
                    2309,
                    2310
                ],
                "self.flush_events": [
                    2311
                ],
                "time.sleep": [
                    2312
                ],
                "time": [
                    2312,
                    2870
                ],
                "event.key": [
                    2442,
                    3088,
                    2460,
                    2345,
                    2473,
                    2486,
                    2369,
                    2497,
                    2498,
                    2376,
                    2378,
                    2383,
                    2387,
                    2390,
                    2393,
                    3034,
                    2397,
                    2401,
                    3043,
                    3045,
                    2423,
                    3066,
                    3067
                ],
                "event.canvas": [
                    2348,
                    2518
                ],
                "toolbar": [
                    2402,
                    2519,
                    2526,
                    2381,
                    2349,
                    2350,
                    2384,
                    2388,
                    2391,
                    2520,
                    2521,
                    2394,
                    2395,
                    2524,
                    2398,
                    2399
                ],
                "canvas.toolbar": [
                    2520,
                    2741,
                    2350
                ],
                "fullscreen_keys": [
                    2369,
                    2353
                ],
                "home_keys": [
                    2354,
                    2383
                ],
                "back_keys": [
                    2387,
                    2355
                ],
                "forward_keys": [
                    2356,
                    2390
                ],
                "pan_keys": [
                    2393,
                    2357
                ],
                "zoom_keys": [
                    2397,
                    2358
                ],
                "save_keys": [
                    2401,
                    2359
                ],
                "quit_keys": [
                    2360,
                    2376
                ],
                "quit_all_keys": [
                    2361,
                    2378
                ],
                "grid_keys": [
                    2362,
                    2423
                ],
                "grid_minor_keys": [
                    2442,
                    2363
                ],
                "toggle_yscale_keys": [
                    2460,
                    2364
                ],
                "toggle_xscale_keys": [
                    2473,
                    2365
                ],
                "all_keys": [
                    2486,
                    2366
                ],
                "dict.__getitem__": [
                    2366
                ],
                "canvas.manager.full_screen_toggle": [
                    2371
                ],
                "canvas.manager": [
                    2594,
                    2371
                ],
                "Gcf.destroy_fig": [
                    2377
                ],
                "Gcf": [
                    2377,
                    3402,
                    2379,
                    3415
                ],
                "canvas.figure": [
                    2499,
                    2500,
                    2377,
                    2607,
                    2487
                ],
                "Gcf.destroy_all": [
                    2379
                ],
                "toolbar.home": [
                    2384
                ],
                "toolbar.back": [
                    2524,
                    2388
                ],
                "toolbar.forward": [
                    2526,
                    2391
                ],
                "toolbar.pan": [
                    2394
                ],
                "toolbar._update_cursor": [
                    2395,
                    2399
                ],
                "toolbar.zoom": [
                    2398
                ],
                "toolbar.save_figure": [
                    2402
                ],
                "event.inaxes": [
                    2883,
                    2404,
                    2886,
                    2891,
                    2895,
                    2418,
                    2844
                ],
                "tick.gridline.get_visible": [
                    2411,
                    2413
                ],
                "tick.gridline": [
                    2411,
                    2413
                ],
                "tick": [
                    2411,
                    2413
                ],
                "ticks": [
                    2411,
                    2413
                ],
                "_get_uniform_gridstate": [
                    2444,
                    2445,
                    2446,
                    2447,
                    2425,
                    2426,
                    2427,
                    2428
                ],
                "ax.xaxis.minorTicks": [
                    2425,
                    2446
                ],
                "ax.xaxis": [
                    2425,
                    2427,
                    2444,
                    2446
                ],
                "ax.yaxis.minorTicks": [
                    2426,
                    2447
                ],
                "ax.yaxis": [
                    2426,
                    2428,
                    2445,
                    2447
                ],
                "x_state": [
                    2432,
                    2438,
                    2446,
                    2450,
                    2451,
                    2456,
                    2427,
                    2431
                ],
                "ax.xaxis.majorTicks": [
                    2427,
                    2444
                ],
                "y_state": [
                    2432,
                    2439,
                    2447,
                    2450,
                    2451,
                    2457,
                    2428,
                    2431
                ],
                "ax.yaxis.majorTicks": [
                    2428,
                    2445
                ],
                "cycle": [
                    2432,
                    2451,
                    2448,
                    2429
                ],
                "cycle.index": [
                    2432,
                    2451
                ],
                "ax.grid": [
                    2456,
                    2457,
                    2438,
                    2439
                ],
                "canvas.draw_idle": [
                    2440,
                    2458
                ],
                "ax.get_yscale": [
                    2461
                ],
                "ax.set_yscale": [
                    2467,
                    2470,
                    2463
                ],
                "ax.figure.canvas.draw_idle": [
                    2464,
                    2484,
                    2477,
                    2471
                ],
                "ax.figure.canvas": [
                    2464,
                    2484,
                    2477,
                    2471
                ],
                "ax.figure": [
                    2464,
                    2484,
                    2477,
                    2471
                ],
                "_log.warning": [
                    2482,
                    2469
                ],
                "scalex": [
                    2474,
                    2475,
                    2478
                ],
                "ax.get_xscale": [
                    2474
                ],
                "ax.set_xscale": [
                    2480,
                    2483,
                    2476
                ],
                "canvas.figure.get_axes": [
                    2499,
                    2500,
                    2487
                ],
                "event.x": [
                    3042,
                    2947,
                    2980,
                    2501,
                    2968,
                    3062,
                    2488,
                    3034
                ],
                "event.y": [
                    3042,
                    2947,
                    2980,
                    2501,
                    2968,
                    3062,
                    2488,
                    3034
                ],
                "a.in_axes": [
                    2489,
                    2950,
                    2971,
                    2502
                ],
                "a.set_navigate": [
                    2507,
                    2494
                ],
                "event.key.isdigit": [
                    2497
                ],
                "n": [
                    2498,
                    2499,
                    2507
                ],
                "button_name": [
                    2522,
                    2523,
                    2525
                ],
                "event.button": [
                    2979,
                    2952,
                    2966,
                    2522,
                    2939,
                    2940
                ],
                "self.num": [
                    2595
                ],
                "num": [
                    2595,
                    3396,
                    3390
                ],
                "self.key_press_handler_id": [
                    2600,
                    2597
                ],
                "self.button_press_handler_id": [
                    2603,
                    2598
                ],
                "self.canvas.mpl_connect": [
                    2976,
                    2755,
                    3012,
                    2757,
                    2759,
                    2600,
                    2603,
                    2955
                ],
                "self.key_press": [
                    2602
                ],
                "self.button_press": [
                    2605
                ],
                "self.toolmanager": [
                    3337,
                    3338,
                    2607,
                    2615,
                    3225,
                    3196,
                    3261,
                    3231
                ],
                "mpl.rcParams": [
                    2608
                ],
                "mpl": [
                    2608,
                    3122
                ],
                "ToolManager": [
                    2607
                ],
                "self.toolbar.update": [
                    2616
                ],
                "self.canvas.figure.add_axobserver": [
                    2612
                ],
                "self.canvas.figure": [
                    3170,
                    2949,
                    3110,
                    2929,
                    2612,
                    2999,
                    2970
                ],
                "cbook._get_running_interactive_framework": [
                    2631
                ],
                "NonGuiException": [
                    2632,
                    3421
                ],
                "get_backend": [
                    2633,
                    3437
                ],
                "key_press_handler": [
                    2651
                ],
                "button_press_handler": [
                    2656
                ],
                "cursors": [
                    2850,
                    2851,
                    2852,
                    2854,
                    2855,
                    2856,
                    2673,
                    2873,
                    2745,
                    2845,
                    2846,
                    2847
                ],
                "tools.cursors": [
                    2673
                ],
                "tools": [
                    2673
                ],
                "Enum": [
                    2676
                ],
                "NONE": [
                    2677
                ],
                "PAN": [
                    2678
                ],
                "ZOOM": [
                    2679
                ],
                "self.value": [
                    2682
                ],
                "toolitems": [
                    2727
                ],
                "self._nav_stack": [
                    2944,
                    2801,
                    2993,
                    2742,
                    3159,
                    3130,
                    2779,
                    2813,
                    2974
                ],
                "cbook.Stack": [
                    2742
                ],
                "self._xypress": [
                    2948,
                    3014,
                    3016,
                    2953,
                    3018,
                    3031,
                    2743,
                    3068
                ],
                "self._lastCursor": [
                    2850,
                    2852,
                    2854,
                    2856,
                    2745,
                    2876,
                    2845,
                    2847
                ],
                "cursors.POINTER": [
                    2745,
                    2845,
                    2846,
                    2847
                ],
                "init": [
                    2752,
                    2753,
                    2747
                ],
                "cbook._deprecate_method_override": [
                    2984,
                    3021,
                    2957,
                    3094,
                    2747,
                    3069
                ],
                "__class__._init_toolbar": [
                    2748
                ],
                "__class__": [
                    2985,
                    3022,
                    2958,
                    3095,
                    2748,
                    3070
                ],
                "self._id_press": [
                    2755
                ],
                "self._zoom_pan_handler": [
                    2756,
                    2758
                ],
                "self._id_release": [
                    2757
                ],
                "self._id_drag": [
                    3011,
                    3012,
                    2759,
                    2954,
                    2955
                ],
                "self.mouse_move": [
                    2760,
                    3013
                ],
                "self._zoom_info": [
                    3040,
                    2978,
                    2761,
                    3082,
                    3051,
                    3084,
                    3087,
                    3056,
                    3059,
                    3091,
                    3061,
                    3039
                ],
                "self._button_pressed": [
                    3009,
                    2763,
                    3019,
                    3034,
                    2940,
                    2942
                ],
                "self.mode": [
                    3168,
                    2849,
                    3171,
                    3172,
                    2853,
                    2923,
                    2924,
                    2765,
                    2927,
                    3164,
                    2930,
                    2931,
                    2903,
                    2906,
                    2844,
                    3165,
                    2911
                ],
                "_Mode.NONE": [
                    3165,
                    2924,
                    2765
                ],
                "_Mode": [
                    3168,
                    2849,
                    2853,
                    2923,
                    2924,
                    2765,
                    2927,
                    2906,
                    3164,
                    3165,
                    2911
                ],
                "self.set_history_buttons": [
                    2766,
                    2802,
                    3000,
                    3160,
                    2780,
                    2814
                ],
                "self._nav_stack.back": [
                    2779
                ],
                "self._update_view": [
                    2803,
                    2781,
                    2815
                ],
                "self._nav_stack.forward": [
                    2801
                ],
                "self._nav_stack.home": [
                    2813
                ],
                "self.set_cursor": [
                    2851,
                    2855,
                    2873,
                    2876,
                    2846
                ],
                "_Mode.ZOOM": [
                    3168,
                    2849,
                    3164,
                    2911
                ],
                "cursors.SELECT_REGION": [
                    2850,
                    2851,
                    2852
                ],
                "_Mode.PAN": [
                    2906,
                    2923,
                    2853,
                    2927
                ],
                "cursors.MOVE": [
                    2856,
                    2854,
                    2855
                ],
                "self._draw_time": [
                    2869,
                    2871
                ],
                "last_draw_time": [
                    2869,
                    2871
                ],
                "time.time": [
                    2870
                ],
                "cursors.WAIT": [
                    2873
                ],
                "self._update_cursor": [
                    2881
                ],
                "event.inaxes.get_navigate": [
                    2883
                ],
                "event.inaxes.format_coord": [
                    2886
                ],
                "event.xdata": [
                    2886
                ],
                "event.ydata": [
                    2886
                ],
                "s.rstrip": [
                    2890
                ],
                "artists": [
                    2891,
                    2893,
                    2894
                ],
                "event.inaxes._mouseover_set": [
                    2891
                ],
                "a.contains": [
                    2892
                ],
                "event.inaxes.patch": [
                    2895
                ],
                "data": [
                    2896,
                    2897,
                    2898
                ],
                "a.get_cursor_data": [
                    2896
                ],
                "data_str": [
                    2898,
                    2899,
                    2900
                ],
                "rstrip": [
                    2898
                ],
                "a.format_cursor_data": [
                    2898
                ],
                "self.set_message": [
                    3172,
                    3343,
                    2931,
                    2901,
                    2903,
                    3199
                ],
                "event.name": [
                    2912,
                    2914,
                    2907,
                    2909
                ],
                "self.press_pan": [
                    2908
                ],
                "self.release_pan": [
                    2910
                ],
                "self.press_zoom": [
                    2913
                ],
                "self.release_zoom": [
                    2915
                ],
                "self.canvas.widgetlock.release": [
                    2925,
                    3166
                ],
                "self.canvas.widgetlock": [
                    2928,
                    3169,
                    2925,
                    3166
                ],
                "self.canvas.figure.get_axes": [
                    3170,
                    2949,
                    3110,
                    2929,
                    2970
                ],
                "a.set_navigate_mode": [
                    2930,
                    3171
                ],
                "self.push_current": [
                    2946,
                    3020,
                    3093,
                    2975
                ],
                "a.get_navigate": [
                    2971,
                    2951
                ],
                "a.can_pan": [
                    2951
                ],
                "a.start_pan": [
                    2952
                ],
                "self._xypress.append": [
                    2953
                ],
                "self.canvas.mpl_disconnect": [
                    3056,
                    2954,
                    3011
                ],
                "self.drag_pan": [
                    2956
                ],
                "press": [
                    2984,
                    2988,
                    2957,
                    2989,
                    2961,
                    2962
                ],
                "__class__.press": [
                    2985,
                    3022,
                    2958,
                    3070
                ],
                "a.can_zoom": [
                    2971
                ],
                "id_zoom": [
                    2976,
                    2982
                ],
                "self.drag_zoom": [
                    2977
                ],
                "self._nav_stack.push": [
                    2993
                ],
                "WeakKeyDictionary": [
                    2994
                ],
                "ax._get_view": [
                    2995
                ],
                "frozen": [
                    2997,
                    2998
                ],
                "ax.get_position": [
                    2997,
                    2998
                ],
                "self.canvas.figure.axes": [
                    2999
                ],
                "ind": [
                    3014,
                    3031
                ],
                "a.end_pan": [
                    3015
                ],
                "release": [
                    3074,
                    3075,
                    3021,
                    3025,
                    3026,
                    3094,
                    3099,
                    3100,
                    3069
                ],
                "self._draw": [
                    3105,
                    3090,
                    3027,
                    3076
                ],
                "a.drag_pan": [
                    3034
                ],
                "self.canvas.draw_idle": [
                    3123,
                    3035,
                    3141
                ],
                "start_xy": [
                    3042,
                    3039
                ],
                "x1": [
                    3041,
                    3046,
                    3047
                ],
                "y1": [
                    3041,
                    3044,
                    3047
                ],
                "x2": [
                    3041,
                    3046,
                    3047
                ],
                "y2": [
                    3041,
                    3044,
                    3047
                ],
                "np.clip": [
                    3041
                ],
                "ax.bbox.min": [
                    3042
                ],
                "ax.bbox": [
                    3042,
                    3044,
                    3046
                ],
                "ax.bbox.max": [
                    3042
                ],
                "ax.bbox.intervaly": [
                    3044
                ],
                "ax.bbox.intervalx": [
                    3046
                ],
                "self.draw_rubberband": [
                    3047
                ],
                "self.remove_rubberband": [
                    3057
                ],
                "start_x": [
                    3066,
                    3059,
                    3087
                ],
                "start_y": [
                    3059,
                    3087,
                    3067
                ],
                "twinx": [
                    3088,
                    3081
                ],
                "joined": [
                    3081,
                    3083
                ],
                "ax.get_shared_x_axes": [
                    3081
                ],
                "prev": [
                    3081,
                    3082,
                    3083,
                    3084
                ],
                "twiny": [
                    3088,
                    3083
                ],
                "ax.get_shared_y_axes": [
                    3083
                ],
                "ax._set_view_from_bbox": [
                    3086
                ],
                "__class__.release": [
                    3095
                ],
                "xaxis": [
                    3114,
                    3115,
                    3116,
                    3111
                ],
                "yaxis": [
                    3112,
                    3117,
                    3118,
                    3119
                ],
                "locators": [
                    3113,
                    3115,
                    3116,
                    3118,
                    3119,
                    3121
                ],
                "locators.append": [
                    3115,
                    3116,
                    3118,
                    3119
                ],
                "xaxis.get_major_locator": [
                    3115
                ],
                "xaxis.get_minor_locator": [
                    3116
                ],
                "yaxis.get_major_locator": [
                    3118
                ],
                "yaxis.get_minor_locator": [
                    3119
                ],
                "loc": [
                    3121,
                    3122
                ],
                "mpl.ticker._if_refresh_overridden_call_and_emit_deprec": [
                    3122
                ],
                "mpl.ticker": [
                    3122
                ],
                "nav_info": [
                    3130,
                    3131,
                    3135
                ],
                "items": [
                    3136,
                    3135
                ],
                "nav_info.items": [
                    3135
                ],
                "view": [
                    3136,
                    3137
                ],
                "pos_orig": [
                    3136,
                    3139
                ],
                "pos_active": [
                    3136,
                    3140
                ],
                "ax._set_view": [
                    3137
                ],
                "ax._set_position": [
                    3139,
                    3140
                ],
                "self._nav_stack.clear": [
                    3159
                ],
                "_icon_extension": [
                    3188
                ],
                "toolmanager": [
                    3200,
                    3337,
                    3196,
                    3197
                ],
                "toolmanager.toolmanager_connect": [
                    3200,
                    3197
                ],
                "event.message": [
                    3343,
                    3199
                ],
                "self.remove_toolitem": [
                    3202
                ],
                "event.tool.name": [
                    3202,
                    3210
                ],
                "event.tool": [
                    3202,
                    3210
                ],
                "self.toggle_toolitem": [
                    3210,
                    3235
                ],
                "event.tool.toggled": [
                    3210
                ],
                "tool": [
                    3234,
                    3235,
                    3225,
                    3226,
                    3227,
                    3228,
                    3229,
                    3231
                ],
                "self.toolmanager.get_tool": [
                    3225
                ],
                "image": [
                    3239,
                    3244,
                    3245,
                    3246,
                    3247,
                    3226,
                    3229
                ],
                "self._get_image_filename": [
                    3226
                ],
                "tool.image": [
                    3226
                ],
                "toggle": [
                    3227,
                    3229,
                    3230
                ],
                "self.add_toolitem": [
                    3228
                ],
                "tool.name": [
                    3235,
                    3228,
                    3231
                ],
                "group": [
                    3228
                ],
                "position": [
                    3228
                ],
                "tool.description": [
                    3229
                ],
                "self.toolmanager.toolmanager_connect": [
                    3338,
                    3231
                ],
                "self._tool_toggled_cbk": [
                    3232
                ],
                "tool.toggled": [
                    3234
                ],
                "basedir": [
                    3242,
                    3246,
                    3247
                ],
                "cbook._get_data_path": [
                    3242
                ],
                "fname": [
                    3249,
                    3250,
                    3243
                ],
                "self._icon_extension": [
                    3245,
                    3247
                ],
                "os.path.isfile": [
                    3249
                ],
                "self.toolmanager.trigger_tool": [
                    3261
                ],
                "self._message_cbk": [
                    3339
                ],
                "backend_version": [
                    3364
                ],
                "FigureManager": [
                    3370
                ],
                "FigureManagerBase": [
                    3370
                ],
                "trigger_manager_draw": [
                    3377
                ],
                "mainloop": [
                    3378
                ],
                "fig_cls": [
                    3388,
                    3389
                ],
                "kwargs.pop": [
                    3388
                ],
                "Figure": [
                    3388
                ],
                "fig": [
                    3389,
                    3390
                ],
                "cls.new_figure_manager_given_figure": [
                    3390
                ],
                "cls.FigureCanvas": [
                    3395
                ],
                "manager": [
                    3396,
                    3397,
                    3402,
                    3403,
                    3404,
                    3418,
                    3420
                ],
                "cls.FigureManager": [
                    3396
                ],
                "cls.trigger_manager_draw": [
                    3401,
                    3404
                ],
                "is_interactive": [
                    3401,
                    3434
                ],
                "Gcf.get_active": [
                    3402
                ],
                "managers": [
                    3416,
                    3418,
                    3415
                ],
                "Gcf.get_all_fig_managers": [
                    3415
                ],
                "manager.show": [
                    3420
                ],
                "cbook._warn_external": [
                    3422
                ],
                "cls.mainloop": [
                    3440,
                    3461,
                    3423
                ],
                "block": [
                    3425,
                    3434,
                    3438,
                    3439,
                    3475
                ],
                "ipython_pylab": [
                    3433,
                    3434,
                    3431
                ],
                "pyplot.show._needmain": [
                    3431
                ],
                "pyplot.show": [
                    3431
                ],
                "pyplot": [
                    3431
                ],
                "cls.__module__": [
                    3463,
                    3455
                ],
                "ShowBase": [
                    3459
                ],
                "Show": [
                    3463
                ],
                "_Backend": [
                    3467
                ],
                "self.show": [
                    3475
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_1/lib/matplotlib/figure.py": {
            "buggy_functions": [
                {
                    "function_name": "tight_layout",
                    "function_code": "@cbook._delete_parameter(\"3.2\", \"renderer\")\ndef tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None,\n                 rect=None):\n    \"\"\"\n    Adjust the padding between and around subplots.\n\n    To exclude an artist on the axes from the bounding box calculation\n    that determines the subplot parameters (i.e. legend, or annotation),\n    set ``a.set_in_layout(False)`` for that artist.\n\n    Parameters\n    ----------\n    renderer : subclass of `~.backend_bases.RendererBase`, optional\n        Defaults to the renderer for the figure.  Deprecated.\n    pad : float, default: 1.08\n        Padding between the figure edge and the edges of subplots,\n        as a fraction of the font size.\n    h_pad, w_pad : float, default: *pad*\n        Padding (height/width) between edges of adjacent subplots,\n        as a fraction of the font size.\n    rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)\n        A rectangle in normalized figure coordinates into which the whole\n        subplots area (including labels) will fit.\n\n    See Also\n    --------\n    .Figure.set_tight_layout\n    .pyplot.tight_layout\n    \"\"\"\n\n    from .tight_layout import (\n        get_renderer, get_subplotspec_list, get_tight_layout_figure)\n\n    subplotspec_list = get_subplotspec_list(self.axes)\n    if None in subplotspec_list:\n        cbook._warn_external(\"This figure includes Axes that are not \"\n                             \"compatible with tight_layout, so results \"\n                             \"might be incorrect.\")\n\n    if renderer is None:\n        renderer = get_renderer(self)\n\n    kwargs = get_tight_layout_figure(\n        self, self.axes, subplotspec_list, renderer,\n        pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n    if kwargs:\n        self.subplots_adjust(**kwargs)\n",
                    "decorators": [
                        "cbook._delete_parameter('3.2', 'renderer')"
                    ],
                    "docstring": "Adjust the padding between and around subplots.\n\nTo exclude an artist on the axes from the bounding box calculation\nthat determines the subplot parameters (i.e. legend, or annotation),\nset ``a.set_in_layout(False)`` for that artist.\n\nParameters\n----------\nrenderer : subclass of `~.backend_bases.RendererBase`, optional\n    Defaults to the renderer for the figure.  Deprecated.\npad : float, default: 1.08\n    Padding between the figure edge and the edges of subplots,\n    as a fraction of the font size.\nh_pad, w_pad : float, default: *pad*\n    Padding (height/width) between edges of adjacent subplots,\n    as a fraction of the font size.\nrect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)\n    A rectangle in normalized figure coordinates into which the whole\n    subplots area (including labels) will fit.\n\nSee Also\n--------\n.Figure.set_tight_layout\n.pyplot.tight_layout",
                    "start_line": 2363,
                    "end_line": 2409,
                    "variables": {
                        "subplotspec_list": [
                            2396,
                            2397,
                            2406
                        ],
                        "get_subplotspec_list": [
                            2396
                        ],
                        "self.axes": [
                            2396,
                            2406
                        ],
                        "self": [
                            2409,
                            2403,
                            2396,
                            2406
                        ],
                        "cbook._warn_external": [
                            2398
                        ],
                        "cbook": [
                            2363,
                            2398
                        ],
                        "renderer": [
                            2402,
                            2403,
                            2406
                        ],
                        "get_renderer": [
                            2403
                        ],
                        "kwargs": [
                            2408,
                            2409,
                            2405
                        ],
                        "get_tight_layout_figure": [
                            2405
                        ],
                        "pad": [
                            2407
                        ],
                        "h_pad": [
                            2407
                        ],
                        "w_pad": [
                            2407
                        ],
                        "rect": [
                            2407
                        ],
                        "self.subplots_adjust": [
                            2409
                        ],
                        "cbook._delete_parameter": [
                            2363
                        ]
                    },
                    "filtered_variables": {
                        "subplotspec_list": [
                            2396,
                            2397,
                            2406
                        ],
                        "get_subplotspec_list": [
                            2396
                        ],
                        "self.axes": [
                            2396,
                            2406
                        ],
                        "self": [
                            2409,
                            2403,
                            2396,
                            2406
                        ],
                        "cbook._warn_external": [
                            2398
                        ],
                        "cbook": [
                            2363,
                            2398
                        ],
                        "renderer": [
                            2402,
                            2403,
                            2406
                        ],
                        "get_renderer": [
                            2403
                        ],
                        "kwargs": [
                            2408,
                            2409,
                            2405
                        ],
                        "get_tight_layout_figure": [
                            2405
                        ],
                        "pad": [
                            2407
                        ],
                        "h_pad": [
                            2407
                        ],
                        "w_pad": [
                            2407
                        ],
                        "rect": [
                            2407
                        ],
                        "self.subplots_adjust": [
                            2409
                        ],
                        "cbook._delete_parameter": [
                            2363
                        ]
                    },
                    "diff_line_number": 2394,
                    "class_data": {
                        "signature": "class Figure(Artist)",
                        "docstring": "The top level container for all the plot elements.\n\nThe Figure instance supports callbacks through a *callbacks* attribute\nwhich is a `.CallbackRegistry` instance.  The events you can connect to\nare 'dpi_changed', and the callback will be called with ``func(fig)`` where\nfig is the `Figure` instance.\n\nAttributes\n----------\npatch\n    The `.Rectangle` instance representing the figure background patch.\n\nsuppressComposite\n    For multiple figure images, the figure will make composite images\n    depending on the renderer option_image_nocomposite function.  If\n    *suppressComposite* is a boolean, this will override the renderer.",
                        "constructor_docstring": "Parameters\n----------\nfigsize : 2-tuple of floats, default: :rc:`figure.figsize`\n    Figure dimension ``(width, height)`` in inches.\n\ndpi : float, default: :rc:`figure.dpi`\n    Dots per inch.\n\nfacecolor : default: :rc:`figure.facecolor`\n    The figure patch facecolor.\n\nedgecolor : default: :rc:`figure.edgecolor`\n    The figure patch edge color.\n\nlinewidth : float\n    The linewidth of the frame (i.e. the edge linewidth of the figure\n    patch).\n\nframeon : bool, default: :rc:`figure.frameon`\n    If ``False``, suppress drawing the figure background patch.\n\nsubplotpars : `SubplotParams`\n    Subplot parameters. If not given, the default subplot\n    parameters :rc:`figure.subplot.*` are used.\n\ntight_layout : bool or dict, default: :rc:`figure.autolayout`\n    If ``False`` use *subplotpars*. If ``True`` adjust subplot\n    parameters using `.tight_layout` with default padding.\n    When providing a dict containing the keys ``pad``, ``w_pad``,\n    ``h_pad``, and ``rect``, the default `.tight_layout` paddings\n    will be overridden.\n\nconstrained_layout : bool, default: :rc:`figure.constrained_layout.use`\n    If ``True`` use constrained layout to adjust positioning of plot\n    elements.  Like ``tight_layout``, but designed to be more\n    flexible.  See\n    :doc:`/tutorials/intermediate/constrainedlayout_guide`\n    for examples.  (Note: does not work with `add_subplot` or\n    `~.pyplot.subplot2grid`.)",
                        "functions": [
                            "def __str__(self):\n    return 'Figure(%gx%g)' % tuple(self.bbox.size)",
                            "def __repr__(self):\n    return '<{clsname} size {h:g}x{w:g} with {naxes} Axes>'.format(clsname=self.__class__.__name__, h=self.bbox.size[0], w=self.bbox.size[1], naxes=len(self.axes))",
                            "def __init__(self, figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None, tight_layout=None, constrained_layout=None):\n    \"\"\"\n    Parameters\n    ----------\n    figsize : 2-tuple of floats, default: :rc:`figure.figsize`\n        Figure dimension ``(width, height)`` in inches.\n\n    dpi : float, default: :rc:`figure.dpi`\n        Dots per inch.\n\n    facecolor : default: :rc:`figure.facecolor`\n        The figure patch facecolor.\n\n    edgecolor : default: :rc:`figure.edgecolor`\n        The figure patch edge color.\n\n    linewidth : float\n        The linewidth of the frame (i.e. the edge linewidth of the figure\n        patch).\n\n    frameon : bool, default: :rc:`figure.frameon`\n        If ``False``, suppress drawing the figure background patch.\n\n    subplotpars : `SubplotParams`\n        Subplot parameters. If not given, the default subplot\n        parameters :rc:`figure.subplot.*` are used.\n\n    tight_layout : bool or dict, default: :rc:`figure.autolayout`\n        If ``False`` use *subplotpars*. If ``True`` adjust subplot\n        parameters using `.tight_layout` with default padding.\n        When providing a dict containing the keys ``pad``, ``w_pad``,\n        ``h_pad``, and ``rect``, the default `.tight_layout` paddings\n        will be overridden.\n\n    constrained_layout : bool, default: :rc:`figure.constrained_layout.use`\n        If ``True`` use constrained layout to adjust positioning of plot\n        elements.  Like ``tight_layout``, but designed to be more\n        flexible.  See\n        :doc:`/tutorials/intermediate/constrainedlayout_guide`\n        for examples.  (Note: does not work with `add_subplot` or\n        `~.pyplot.subplot2grid`.)\n    \"\"\"\n    super().__init__()\n    del self._axes\n    self.callbacks = cbook.CallbackRegistry()\n    if figsize is None:\n        figsize = mpl.rcParams['figure.figsize']\n    if dpi is None:\n        dpi = mpl.rcParams['figure.dpi']\n    if facecolor is None:\n        facecolor = mpl.rcParams['figure.facecolor']\n    if edgecolor is None:\n        edgecolor = mpl.rcParams['figure.edgecolor']\n    if frameon is None:\n        frameon = mpl.rcParams['figure.frameon']\n    if not np.isfinite(figsize).all() or (np.array(figsize) <= 0).any():\n        raise ValueError(f'figure size must be positive finite not {figsize}')\n    self.bbox_inches = Bbox.from_bounds(0, 0, *figsize)\n    self.dpi_scale_trans = Affine2D().scale(dpi)\n    self._dpi = dpi\n    self.bbox = TransformedBbox(self.bbox_inches, self.dpi_scale_trans)\n    self.transFigure = BboxTransformTo(self.bbox)\n    self.patch = Rectangle(xy=(0, 0), width=1, height=1, visible=frameon, facecolor=facecolor, edgecolor=edgecolor, linewidth=linewidth, in_layout=False)\n    self._set_artist_props(self.patch)\n    self.patch.set_antialiased(False)\n    FigureCanvasBase(self)\n    self._suptitle = None\n    if subplotpars is None:\n        subplotpars = SubplotParams()\n    self.subplotpars = subplotpars\n    self._layoutbox = None\n    self.set_constrained_layout(constrained_layout)\n    self.set_tight_layout(tight_layout)\n    self._axstack = _AxesStack()\n    self.clf()\n    self._cachedRenderer = None\n    self._align_xlabel_grp = cbook.Grouper()\n    self._align_ylabel_grp = cbook.Grouper()\n    self._gridspecs = []",
                            "def _repr_html_(self):\n    if 'WebAgg' in type(self.canvas).__name__:\n        from matplotlib.backends import backend_webagg\n        return backend_webagg.ipython_inline_display(self)",
                            "def show(self, warn=True):\n    \"\"\"\n    If using a GUI backend with pyplot, display the figure window.\n\n    If the figure was not created using `~.pyplot.figure`, it will lack\n    a `~.backend_bases.FigureManagerBase`, and this method will raise an\n    AttributeError.\n\n    .. warning::\n\n        This does not manage an GUI event loop. Consequently, the figure\n        may only be shown briefly or not shown at all if you or your\n        environment are not managing an event loop.\n\n        Proper use cases for `.Figure.show` include running this from a\n        GUI application or an IPython shell.\n\n        If you're running a pure python shell or executing a non-GUI\n        python script, you should use `matplotlib.pyplot.show` instead,\n        which takes care of managing the event loop for you.\n\n    Parameters\n    ----------\n    warn : bool, default: True\n        If ``True`` and we are not running headless (i.e. on Linux with an\n        unset DISPLAY), issue warning when called on a non-GUI backend.\n    \"\"\"\n    if self.canvas.manager is None:\n        raise AttributeError('Figure.show works only for figures managed by pyplot, normally created by pyplot.figure()')\n    try:\n        self.canvas.manager.show()\n    except NonGuiException as exc:\n        cbook._warn_external(str(exc))",
                            "def get_axes(self):\n    \"\"\"\n    Return a list of axes in the Figure. You can access and modify the\n    axes in the Figure through this list.\n\n    Do not modify the list itself. Instead, use `~Figure.add_axes`,\n    `~.Figure.add_subplot` or `~.Figure.delaxes` to add or remove an axes.\n\n    Note: This is equivalent to the property `~.Figure.axes`.\n    \"\"\"\n    return self._axstack.as_list()",
                            "def _get_dpi(self):\n    return self._dpi",
                            "def _set_dpi(self, dpi, forward=True):\n    \"\"\"\n    Parameters\n    ----------\n    dpi : float\n\n    forward : bool\n        Passed on to `~.Figure.set_size_inches`\n    \"\"\"\n    if dpi == self._dpi:\n        return\n    self._dpi = dpi\n    self.dpi_scale_trans.clear().scale(dpi)\n    w, h = self.get_size_inches()\n    self.set_size_inches(w, h, forward=forward)\n    self.callbacks.process('dpi_changed', self)",
                            "def get_tight_layout(self):\n    \"\"\"Return whether `.tight_layout` is called when drawing.\"\"\"\n    return self._tight",
                            "def set_tight_layout(self, tight):\n    \"\"\"\n    Set whether and how `.tight_layout` is called when drawing.\n\n    Parameters\n    ----------\n    tight : bool or dict with keys \"pad\", \"w_pad\", \"h_pad\", \"rect\" or None\n        If a bool, sets whether to call `.tight_layout` upon drawing.\n        If ``None``, use the ``figure.autolayout`` rcparam instead.\n        If a dict, pass it as kwargs to `.tight_layout`, overriding the\n        default paddings.\n    \"\"\"\n    if tight is None:\n        tight = mpl.rcParams['figure.autolayout']\n    self._tight = bool(tight)\n    self._tight_parameters = tight if isinstance(tight, dict) else {}\n    self.stale = True",
                            "def get_constrained_layout(self):\n    \"\"\"\n    Return whether constrained layout is being used.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n    \"\"\"\n    return self._constrained",
                            "def set_constrained_layout(self, constrained):\n    \"\"\"\n    Set whether ``constrained_layout`` is used upon drawing. If None,\n    :rc:`figure.constrained_layout.use` value will be used.\n\n    When providing a dict containing the keys `w_pad`, `h_pad`\n    the default ``constrained_layout`` paddings will be\n    overridden.  These pads are in inches and default to 3.0/72.0.\n    ``w_pad`` is the width padding and ``h_pad`` is the height padding.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n\n    Parameters\n    ----------\n    constrained : bool or dict or None\n    \"\"\"\n    self._constrained_layout_pads = dict()\n    self._constrained_layout_pads['w_pad'] = None\n    self._constrained_layout_pads['h_pad'] = None\n    self._constrained_layout_pads['wspace'] = None\n    self._constrained_layout_pads['hspace'] = None\n    if constrained is None:\n        constrained = mpl.rcParams['figure.constrained_layout.use']\n    self._constrained = bool(constrained)\n    if isinstance(constrained, dict):\n        self.set_constrained_layout_pads(**constrained)\n    else:\n        self.set_constrained_layout_pads()\n    self.stale = True",
                            "def set_constrained_layout_pads(self, **kwargs):\n    \"\"\"\n    Set padding for ``constrained_layout``.  Note the kwargs can be passed\n    as a dictionary ``fig.set_constrained_layout(**paddict)``.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n\n    Parameters\n    ----------\n    w_pad : float\n        Width padding in inches.  This is the pad around axes\n        and is meant to make sure there is enough room for fonts to\n        look good.  Defaults to 3 pts = 0.04167 inches\n\n    h_pad : float\n        Height padding in inches. Defaults to 3 pts.\n\n    wspace : float\n        Width padding between subplots, expressed as a fraction of the\n        subplot width.  The total padding ends up being w_pad + wspace.\n\n    hspace : float\n        Height padding between subplots, expressed as a fraction of the\n        subplot width. The total padding ends up being h_pad + hspace.\n\n    \"\"\"\n    todo = ['w_pad', 'h_pad', 'wspace', 'hspace']\n    for td in todo:\n        if td in kwargs and kwargs[td] is not None:\n            self._constrained_layout_pads[td] = kwargs[td]\n        else:\n            self._constrained_layout_pads[td] = mpl.rcParams['figure.constrained_layout.' + td]",
                            "def get_constrained_layout_pads(self, relative=False):\n    \"\"\"\n    Get padding for ``constrained_layout``.\n\n    Returns a list of ``w_pad, h_pad`` in inches and\n    ``wspace`` and ``hspace`` as fractions of the subplot.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n\n    Parameters\n    ----------\n    relative : bool\n        If `True`, then convert from inches to figure relative.\n    \"\"\"\n    w_pad = self._constrained_layout_pads['w_pad']\n    h_pad = self._constrained_layout_pads['h_pad']\n    wspace = self._constrained_layout_pads['wspace']\n    hspace = self._constrained_layout_pads['hspace']\n    if relative and (w_pad is not None or h_pad is not None):\n        renderer0 = layoutbox.get_renderer(self)\n        dpi = renderer0.dpi\n        w_pad = w_pad * dpi / renderer0.width\n        h_pad = h_pad * dpi / renderer0.height\n    return (w_pad, h_pad, wspace, hspace)",
                            "def autofmt_xdate(self, bottom=0.2, rotation=30, ha='right', which='major'):\n    \"\"\"\n    Date ticklabels often overlap, so it is useful to rotate them\n    and right align them.  Also, a common use case is a number of\n    subplots with shared xaxes where the x-axis is date data.  The\n    ticklabels are often long, and it helps to rotate them on the\n    bottom subplot and turn them off on other subplots, as well as\n    turn off xlabels.\n\n    Parameters\n    ----------\n    bottom : float, default: 0.2\n        The bottom of the subplots for `subplots_adjust`.\n    rotation : float, default: 30 degrees\n        The rotation angle of the xtick labels in degrees.\n    ha : {'left', 'center', 'right'}, default: 'right'\n        The horizontal alignment of the xticklabels.\n    which : {'major', 'minor', 'both'}, default: 'major'\n        Selects which ticklabels to rotate.\n    \"\"\"\n    if which is None:\n        cbook.warn_deprecated('3.3', message=\"Support for passing which=None to mean which='major' is deprecated since %(since)s and will be removed %(removal)s.\")\n    allsubplots = all((hasattr(ax, 'is_last_row') for ax in self.axes))\n    if len(self.axes) == 1:\n        for label in self.axes[0].get_xticklabels(which=which):\n            label.set_ha(ha)\n            label.set_rotation(rotation)\n    elif allsubplots:\n        for ax in self.get_axes():\n            if ax.is_last_row():\n                for label in ax.get_xticklabels(which=which):\n                    label.set_ha(ha)\n                    label.set_rotation(rotation)\n            else:\n                for label in ax.get_xticklabels(which=which):\n                    label.set_visible(False)\n                ax.set_xlabel('')\n    if allsubplots:\n        self.subplots_adjust(bottom=bottom)\n    self.stale = True",
                            "def get_children(self):\n    \"\"\"Get a list of artists contained in the figure.\"\"\"\n    return [self.patch, *self.artists, *self.axes, *self.lines, *self.patches, *self.texts, *self.images, *self.legends]",
                            "def contains(self, mouseevent):\n    \"\"\"\n    Test whether the mouse event occurred on the figure.\n\n    Returns\n    -------\n        bool, {}\n    \"\"\"\n    inside, info = self._default_contains(mouseevent, figure=self)\n    if inside is not None:\n        return (inside, info)\n    inside = self.bbox.contains(mouseevent.x, mouseevent.y)\n    return (inside, {})",
                            "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the figure bounding box in display space. Arguments are ignored.\n    \"\"\"\n    return self.bbox",
                            "def suptitle(self, t, **kwargs):\n    \"\"\"\n    Add a centered title to the figure.\n\n    Parameters\n    ----------\n    t : str\n        The title text.\n\n    x : float, default 0.5\n        The x location of the text in figure coordinates.\n\n    y : float, default 0.98\n        The y location of the text in figure coordinates.\n\n    horizontalalignment, ha : {'center', 'left', right'}, default: 'center'\n        The horizontal alignment of the text relative to (*x*, *y*).\n\n    verticalalignment, va : {'top', 'center', 'bottom', 'baseline'}, default: 'top'\n        The vertical alignment of the text relative to (*x*, *y*).\n\n    fontsize, size : default: :rc:`figure.titlesize`\n        The font size of the text. See `.Text.set_size` for possible\n        values.\n\n    fontweight, weight : default: :rc:`figure.titleweight`\n        The font weight of the text. See `.Text.set_weight` for possible\n        values.\n\n    Returns\n    -------\n    text\n        The `.Text` instance of the title.\n\n    Other Parameters\n    ----------------\n    fontproperties : None or dict, optional\n        A dict of font properties. If *fontproperties* is given the\n        default values for font size and weight are taken from the\n        `.FontProperties` defaults. :rc:`figure.titlesize` and\n        :rc:`figure.titleweight` are ignored in this case.\n\n    **kwargs\n        Additional kwargs are `matplotlib.text.Text` properties.\n\n    Examples\n    --------\n    >>> fig.suptitle('This is the figure title', fontsize=12)\n    \"\"\"\n    manual_position = 'x' in kwargs or 'y' in kwargs\n    x = kwargs.pop('x', 0.5)\n    y = kwargs.pop('y', 0.98)\n    if 'horizontalalignment' not in kwargs and 'ha' not in kwargs:\n        kwargs['horizontalalignment'] = 'center'\n    if 'verticalalignment' not in kwargs and 'va' not in kwargs:\n        kwargs['verticalalignment'] = 'top'\n    if 'fontproperties' not in kwargs:\n        if 'fontsize' not in kwargs and 'size' not in kwargs:\n            kwargs['size'] = mpl.rcParams['figure.titlesize']\n        if 'fontweight' not in kwargs and 'weight' not in kwargs:\n            kwargs['weight'] = mpl.rcParams['figure.titleweight']\n    sup = self.text(x, y, t, **kwargs)\n    if self._suptitle is not None:\n        self._suptitle.set_text(t)\n        self._suptitle.set_position((x, y))\n        self._suptitle.update_from(sup)\n        sup.remove()\n    else:\n        self._suptitle = sup\n        self._suptitle._layoutbox = None\n        if self._layoutbox is not None and (not manual_position):\n            w_pad, h_pad, wspace, hspace = self.get_constrained_layout_pads(relative=True)\n            figlb = self._layoutbox\n            self._suptitle._layoutbox = layoutbox.LayoutBox(parent=figlb, artist=self._suptitle, name=figlb.name + '.suptitle')\n            for child in figlb.children:\n                if child is not self._suptitle._layoutbox:\n                    layoutbox.vstack([self._suptitle._layoutbox, child], padding=h_pad * 2.0, strength='required')\n    self.stale = True\n    return self._suptitle",
                            "def set_canvas(self, canvas):\n    \"\"\"\n    Set the canvas that contains the figure\n\n    Parameters\n    ----------\n    canvas : FigureCanvas\n    \"\"\"\n    self.canvas = canvas",
                            "def figimage(self, X, xo=0, yo=0, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, origin=None, resize=False, **kwargs):\n    \"\"\"\n    Add a non-resampled image to the figure.\n\n    The image is attached to the lower or upper left corner depending on\n    *origin*.\n\n    Parameters\n    ----------\n    X\n        The image data. This is an array of one of the following shapes:\n\n        - MxN: luminance (grayscale) values\n        - MxNx3: RGB values\n        - MxNx4: RGBA values\n\n    xo, yo : int\n        The *x*/*y* image offset in pixels.\n\n    alpha : None or float\n        The alpha blending value.\n\n    norm : `matplotlib.colors.Normalize`\n        A `.Normalize` instance to map the luminance to the\n        interval [0, 1].\n\n    cmap : str or `matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n        The colormap to use.\n\n    vmin, vmax : float\n        If *norm* is not given, these values set the data limits for the\n        colormap.\n\n    origin : {'upper', 'lower'}, default: :rc:`image.origin`\n        Indicates where the [0, 0] index of the array is in the upper left\n        or lower left corner of the axes.\n\n    resize : bool\n        If *True*, resize the figure to match the given image size.\n\n    Returns\n    -------\n    `matplotlib.image.FigureImage`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additional kwargs are `.Artist` kwargs passed on to `.FigureImage`.\n\n    Notes\n    -----\n    figimage complements the axes image (`~matplotlib.axes.Axes.imshow`)\n    which will be resampled to fit the current axes.  If you want\n    a resampled image to fill the entire figure, you can define an\n    `~matplotlib.axes.Axes` with extent [0, 0, 1, 1].\n\n    Examples\n    --------\n    ::\n\n        f = plt.figure()\n        nx = int(f.get_figwidth() * f.dpi)\n        ny = int(f.get_figheight() * f.dpi)\n        data = np.random.random((ny, nx))\n        f.figimage(data)\n        plt.show()\n    \"\"\"\n    if resize:\n        dpi = self.get_dpi()\n        figsize = [x / dpi for x in (X.shape[1], X.shape[0])]\n        self.set_size_inches(figsize, forward=True)\n    im = mimage.FigureImage(self, cmap, norm, xo, yo, origin, **kwargs)\n    im.stale_callback = _stale_figure_callback\n    im.set_array(X)\n    im.set_alpha(alpha)\n    if norm is None:\n        im.set_clim(vmin, vmax)\n    self.images.append(im)\n    im._remove_method = self.images.remove\n    self.stale = True\n    return im",
                            "def set_size_inches(self, w, h=None, forward=True):\n    \"\"\"\n    Set the figure size in inches.\n\n    Call signatures::\n\n         fig.set_size_inches(w, h)  # OR\n         fig.set_size_inches((w, h))\n\n    Parameters\n    ----------\n    w : (float, float) or float\n        Width and height in inches (if height not specified as a separate\n        argument) or width.\n    h : float\n        Height in inches.\n    forward : bool, default: True\n        If ``True``, the canvas size is automatically updated, e.g.,\n        you can resize the figure window from the shell.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.get_size_inches\n    matplotlib.figure.Figure.set_figwidth\n    matplotlib.figure.Figure.set_figheight\n\n    Notes\n    -----\n    To transform from pixels to inches divide by `Figure.dpi`.\n    \"\"\"\n    if h is None:\n        w, h = w\n    size = np.array([w, h])\n    if not np.isfinite(size).all() or (size <= 0).any():\n        raise ValueError(f'figure size must be positive finite not {size}')\n    self.bbox_inches.p1 = size\n    if forward:\n        canvas = getattr(self, 'canvas')\n        if canvas is not None:\n            dpi_ratio = getattr(canvas, '_dpi_ratio', 1)\n            manager = getattr(canvas, 'manager', None)\n            if manager is not None:\n                manager.resize(*(size * self.dpi / dpi_ratio).astype(int))\n    self.stale = True",
                            "def get_size_inches(self):\n    \"\"\"\n    Return the current size of the figure in inches.\n\n    Returns\n    -------\n    ndarray\n       The size (width, height) of the figure in inches.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.set_size_inches\n    matplotlib.figure.Figure.get_figwidth\n    matplotlib.figure.Figure.get_figheight\n\n    Notes\n    -----\n    The size in pixels can be obtained by multiplying with `Figure.dpi`.\n    \"\"\"\n    return np.array(self.bbox_inches.p1)",
                            "def get_edgecolor(self):\n    \"\"\"Get the edge color of the Figure rectangle.\"\"\"\n    return self.patch.get_edgecolor()",
                            "def get_facecolor(self):\n    \"\"\"Get the face color of the Figure rectangle.\"\"\"\n    return self.patch.get_facecolor()",
                            "def get_figwidth(self):\n    \"\"\"Return the figure width in inches.\"\"\"\n    return self.bbox_inches.width",
                            "def get_figheight(self):\n    \"\"\"Return the figure height in inches.\"\"\"\n    return self.bbox_inches.height",
                            "def get_dpi(self):\n    \"\"\"Return the resolution in dots per inch as a float.\"\"\"\n    return self.dpi",
                            "def get_frameon(self):\n    \"\"\"\n    Return the figure's background patch visibility, i.e.\n    whether the figure background will be drawn. Equivalent to\n    ``Figure.patch.get_visible()``.\n    \"\"\"\n    return self.patch.get_visible()",
                            "def set_edgecolor(self, color):\n    \"\"\"\n    Set the edge color of the Figure rectangle.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self.patch.set_edgecolor(color)",
                            "def set_facecolor(self, color):\n    \"\"\"\n    Set the face color of the Figure rectangle.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self.patch.set_facecolor(color)",
                            "def set_dpi(self, val):\n    \"\"\"\n    Set the resolution of the figure in dots-per-inch.\n\n    Parameters\n    ----------\n    val : float\n    \"\"\"\n    self.dpi = val\n    self.stale = True",
                            "def set_figwidth(self, val, forward=True):\n    \"\"\"\n    Set the width of the figure in inches.\n\n    Parameters\n    ----------\n    val : float\n    forward : bool\n        See `set_size_inches`.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.set_figheight\n    matplotlib.figure.Figure.set_size_inches\n    \"\"\"\n    self.set_size_inches(val, self.get_figheight(), forward=forward)",
                            "def set_figheight(self, val, forward=True):\n    \"\"\"\n    Set the height of the figure in inches.\n\n    Parameters\n    ----------\n    val : float\n    forward : bool\n        See `set_size_inches`.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.set_figwidth\n    matplotlib.figure.Figure.set_size_inches\n    \"\"\"\n    self.set_size_inches(self.get_figwidth(), val, forward=forward)",
                            "def set_frameon(self, b):\n    \"\"\"\n    Set the figure's background patch visibility, i.e.\n    whether the figure background will be drawn. Equivalent to\n    ``Figure.patch.set_visible()``.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self.patch.set_visible(b)\n    self.stale = True",
                            "def add_artist(self, artist, clip=False):\n    \"\"\"\n    Add an `.Artist` to the figure.\n\n    Usually artists are added to axes objects using `.Axes.add_artist`;\n    this method can be used in the rare cases where one needs to add\n    artists directly to the figure instead.\n\n    Parameters\n    ----------\n    artist : `~matplotlib.artist.Artist`\n        The artist to add to the figure. If the added artist has no\n        transform previously set, its transform will be set to\n        ``figure.transFigure``.\n    clip : bool, default: False\n        Whether the added artist should be clipped by the figure patch.\n\n    Returns\n    -------\n    `~matplotlib.artist.Artist`\n        The added artist.\n    \"\"\"\n    artist.set_figure(self)\n    self.artists.append(artist)\n    artist._remove_method = self.artists.remove\n    if not artist.is_transform_set():\n        artist.set_transform(self.transFigure)\n    if clip:\n        artist.set_clip_path(self.patch)\n    self.stale = True\n    return artist",
                            "def _make_key(self, *args, **kwargs):\n    \"\"\"Make a hashable key out of args and kwargs.\"\"\"\n\n    def fixitems(items):\n        ret = []\n        for k, v in items:\n            try:\n                v = tuple(v)\n            except Exception:\n                pass\n            ret.append((k, v))\n        return tuple(ret)\n\n    def fixlist(args):\n        ret = []\n        for a in args:\n            if np.iterable(a):\n                a = tuple(a)\n            ret.append(a)\n        return tuple(ret)\n    key = (fixlist(args), fixitems(kwargs.items()))\n    return key",
                            "def _process_projection_requirements(self, *args, polar=False, projection=None, **kwargs):\n    \"\"\"\n    Handle the args/kwargs to add_axes/add_subplot/gca, returning::\n\n        (axes_proj_class, proj_class_kwargs, proj_stack_key)\n\n    which can be used for new axes initialization/identification.\n    \"\"\"\n    if polar:\n        if projection is not None and projection != 'polar':\n            raise ValueError('polar=True, yet projection=%r. Only one of these arguments should be supplied.' % projection)\n        projection = 'polar'\n    if isinstance(projection, str) or projection is None:\n        projection_class = projections.get_projection_class(projection)\n    elif hasattr(projection, '_as_mpl_axes'):\n        projection_class, extra_kwargs = projection._as_mpl_axes()\n        kwargs.update(**extra_kwargs)\n    else:\n        raise TypeError('projection must be a string, None or implement a _as_mpl_axes method. Got %r' % projection)\n    key = self._make_key(*args, **kwargs)\n    return (projection_class, kwargs, key)",
                            "@docstring.dedent_interpd\ndef add_axes(self, *args, **kwargs):\n    \"\"\"\n    Add an axes to the figure.\n\n    Call signatures::\n\n        add_axes(rect, projection=None, polar=False, **kwargs)\n        add_axes(ax)\n\n    Parameters\n    ----------\n    rect : sequence of float\n        The dimensions [left, bottom, width, height] of the new axes. All\n        quantities are in fractions of figure width and height.\n\n    projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional\n        The projection type of the `~.axes.Axes`. *str* is the name of\n        a custom projection, see `~matplotlib.projections`. The default\n        None results in a 'rectilinear' projection.\n\n    polar : bool, default: False\n        If True, equivalent to projection='polar'.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        Share the x or y `~matplotlib.axis` with sharex and/or sharey.\n        The axis will have the same limits, ticks, and scale as the axis\n        of the shared axes.\n\n    label : str\n        A label for the returned axes.\n\n    Returns\n    -------\n    `~.axes.Axes`, or a subclass of `~.axes.Axes`\n        The returned axes class depends on the projection used. It is\n        `~.axes.Axes` if rectilinear projection is used and\n        `.projections.polar.PolarAxes` if polar projection is used.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        This method also takes the keyword arguments for\n        the returned axes class. The keyword arguments for the\n        rectilinear axes class `~.axes.Axes` can be found in\n        the following table but there might also be other keyword\n        arguments if another projection is used, see the actual axes\n        class.\n\n        %(Axes)s\n\n    Notes\n    -----\n    If the figure already has an axes with key (*args*,\n    *kwargs*) then it will simply make that axes current and\n    return it.  This behavior is deprecated. Meanwhile, if you do\n    not want this behavior (i.e., you want to force the creation of a\n    new axes), you must use a unique set of args and kwargs.  The axes\n    *label* attribute has been exposed for this purpose: if you want\n    two axes that are otherwise identical to be added to the figure,\n    make sure you give them unique labels.\n\n    In rare circumstances, `.add_axes` may be called with a single\n    argument, a axes instance already created in the present figure but\n    not in the figure's list of axes.\n\n    See Also\n    --------\n    .Figure.add_subplot\n    .pyplot.subplot\n    .pyplot.axes\n    .Figure.subplots\n    .pyplot.subplots\n\n    Examples\n    --------\n    Some simple examples::\n\n        rect = l, b, w, h\n        fig = plt.figure()\n        fig.add_axes(rect, label=label1)\n        fig.add_axes(rect, label=label2)\n        fig.add_axes(rect, frameon=False, facecolor='g')\n        fig.add_axes(rect, polar=True)\n        ax = fig.add_axes(rect, projection='polar')\n        fig.delaxes(ax)\n        fig.add_axes(ax)\n    \"\"\"\n    if not len(args) and 'rect' not in kwargs:\n        cbook.warn_deprecated('3.3', message='Calling add_axes() without argument is deprecated since %(since)s and will be removed %(removal)s. You may want to use add_subplot() instead.')\n        return\n    elif 'rect' in kwargs:\n        if len(args):\n            raise TypeError(\"add_axes() got multiple values for argument 'rect'\")\n        args = (kwargs.pop('rect'),)\n    key = self._make_key(*args, **kwargs)\n    ax = self._axstack.get(key)\n    if ax is not None:\n        self.sca(ax)\n        return ax\n    if isinstance(args[0], Axes):\n        a = args[0]\n        if a.get_figure() is not self:\n            raise ValueError('The Axes must have been created in the present figure')\n    else:\n        rect = args[0]\n        if not np.isfinite(rect).all():\n            raise ValueError('all entries in rect must be finite not {}'.format(rect))\n        projection_class, kwargs, key = self._process_projection_requirements(*args, **kwargs)\n        ax = self._axstack.get(key)\n        if isinstance(ax, projection_class):\n            self.sca(ax)\n            return ax\n        a = projection_class(self, rect, **kwargs)\n    return self._add_axes_internal(key, a)",
                            "@docstring.dedent_interpd\ndef add_subplot(self, *args, **kwargs):\n    \"\"\"\n    Add an `~.axes.Axes` to the figure as part of a subplot arrangement.\n\n    Call signatures::\n\n       add_subplot(nrows, ncols, index, **kwargs)\n       add_subplot(pos, **kwargs)\n       add_subplot(ax)\n       add_subplot()\n\n    Parameters\n    ----------\n    *args : int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)\n        The position of the subplot described by one of\n\n        - Three integers (*nrows*, *ncols*, *index*). The subplot will\n          take the *index* position on a grid with *nrows* rows and\n          *ncols* columns. *index* starts at 1 in the upper left corner\n          and increases to the right.  *index* can also be a two-tuple\n          specifying the (*first*, *last*) indices (1-based, and including\n          *last*) of the subplot, e.g., ``fig.add_subplot(3, 1, (1, 2))``\n          makes a subplot that spans the upper 2/3 of the figure.\n        - A 3-digit integer. The digits are interpreted as if given\n          separately as three single-digit integers, i.e.\n          ``fig.add_subplot(235)`` is the same as\n          ``fig.add_subplot(2, 3, 5)``. Note that this can only be used\n          if there are no more than 9 subplots.\n        - A `.SubplotSpec`.\n\n        In rare circumstances, `.add_subplot` may be called with a single\n        argument, a subplot axes instance already created in the\n        present figure but not in the figure's list of axes.\n\n    projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional\n        The projection type of the subplot (`~.axes.Axes`). *str* is the\n        name of a custom projection, see `~matplotlib.projections`. The\n        default None results in a 'rectilinear' projection.\n\n    polar : bool, default: False\n        If True, equivalent to projection='polar'.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        Share the x or y `~matplotlib.axis` with sharex and/or sharey.\n        The axis will have the same limits, ticks, and scale as the axis\n        of the shared axes.\n\n    label : str\n        A label for the returned axes.\n\n    Returns\n    -------\n    `.axes.SubplotBase`, or another subclass of `~.axes.Axes`\n\n        The axes of the subplot. The returned axes base class depends on\n        the projection used. It is `~.axes.Axes` if rectilinear projection\n        is used and `.projections.polar.PolarAxes` if polar projection\n        is used. The returned axes is then a subplot subclass of the\n        base class.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        This method also takes the keyword arguments for the returned axes\n        base class; except for the *figure* argument. The keyword arguments\n        for the rectilinear base class `~.axes.Axes` can be found in\n        the following table but there might also be other keyword\n        arguments if another projection is used.\n\n        %(Axes)s\n\n    Notes\n    -----\n    If the figure already has a subplot with key (*args*,\n    *kwargs*) then it will simply make that subplot current and\n    return it.  This behavior is deprecated. Meanwhile, if you do\n    not want this behavior (i.e., you want to force the creation of a\n    new subplot), you must use a unique set of args and kwargs.  The axes\n    *label* attribute has been exposed for this purpose: if you want\n    two subplots that are otherwise identical to be added to the figure,\n    make sure you give them unique labels.\n\n    See Also\n    --------\n    .Figure.add_axes\n    .pyplot.subplot\n    .pyplot.axes\n    .Figure.subplots\n    .pyplot.subplots\n\n    Examples\n    --------\n    ::\n\n        fig = plt.figure()\n\n        fig.add_subplot(231)\n        ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general\n\n        fig.add_subplot(232, frameon=False)  # subplot with no frame\n        fig.add_subplot(233, projection='polar')  # polar subplot\n        fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1\n        fig.add_subplot(235, facecolor=\"red\")  # red subplot\n\n        ax1.remove()  # delete ax1 from the figure\n        fig.add_subplot(ax1)  # add ax1 back to the figure\n    \"\"\"\n    if 'figure' in kwargs:\n        raise TypeError(\"add_subplot() got an unexpected keyword argument 'figure'\")\n    if len(args) == 1 and isinstance(args[0], SubplotBase):\n        ax = args[0]\n        if ax.get_figure() is not self:\n            raise ValueError('The Subplot must have been created in the present figure')\n        key = self._make_key(*args, **kwargs)\n    else:\n        if not args:\n            args = (1, 1, 1)\n        if len(args) == 1 and isinstance(args[0], Integral) and (100 <= args[0] <= 999):\n            args = tuple(map(int, str(args[0])))\n        projection_class, kwargs, key = self._process_projection_requirements(*args, **kwargs)\n        ax = self._axstack.get(key)\n        if ax is not None:\n            if isinstance(ax, projection_class):\n                self.sca(ax)\n                return ax\n            else:\n                self._axstack.remove(ax)\n        ax = subplot_class_factory(projection_class)(self, *args, **kwargs)\n    return self._add_axes_internal(key, ax)",
                            "def _add_axes_internal(self, key, ax):\n    \"\"\"Private helper for `add_axes` and `add_subplot`.\"\"\"\n    self._axstack.add(key, ax)\n    self.sca(ax)\n    ax._remove_method = self.delaxes\n    self.stale = True\n    ax.stale_callback = _stale_figure_callback\n    return ax",
                            "@cbook._make_keyword_only('3.3', 'sharex')\ndef subplots(self, nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None):\n    \"\"\"\n    Add a set of subplots to this figure.\n\n    This utility wrapper makes it convenient to create common layouts of\n    subplots in a single call.\n\n    Parameters\n    ----------\n    nrows, ncols : int, default: 1\n        Number of rows/columns of the subplot grid.\n\n    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n        Controls sharing of properties among x (*sharex*) or y (*sharey*)\n        axes:\n\n        - True or 'all': x- or y-axis will be shared among all subplots.\n        - False or 'none': each subplot x- or y-axis will be independent.\n        - 'row': each subplot row will share an x- or y-axis.\n        - 'col': each subplot column will share an x- or y-axis.\n\n        When subplots have a shared x-axis along a column, only the x tick\n        labels of the bottom subplot are created. Similarly, when subplots\n        have a shared y-axis along a row, only the y tick labels of the\n        first column subplot are created. To later turn other subplots'\n        ticklabels on, use `~matplotlib.axes.Axes.tick_params`.\n\n    squeeze : bool, default: True\n        - If True, extra dimensions are squeezed out from the returned\n          array of Axes:\n\n          - if only one subplot is constructed (nrows=ncols=1), the\n            resulting single Axes object is returned as a scalar.\n          - for Nx1 or 1xM subplots, the returned object is a 1D numpy\n            object array of Axes objects.\n          - for NxM, subplots with N>1 and M>1 are returned as a 2D array.\n\n        - If False, no squeezing at all is done: the returned Axes object\n          is always a 2D array containing Axes instances, even if it ends\n          up being 1x1.\n\n    subplot_kw : dict, optional\n        Dict with keywords passed to the `.Figure.add_subplot` call used to\n        create each subplot.\n\n    gridspec_kw : dict, optional\n        Dict with keywords passed to the\n        `~matplotlib.gridspec.GridSpec` constructor used to create\n        the grid the subplots are placed on.\n\n    Returns\n    -------\n    `~.axes.Axes` or array of Axes\n        Either a single `~matplotlib.axes.Axes` object or an array of Axes\n        objects if more than one subplot was created. The dimensions of the\n        resulting array can be controlled with the *squeeze* keyword, see\n        above.\n\n    See Also\n    --------\n    .pyplot.subplots\n    .Figure.add_subplot\n    .pyplot.subplot\n\n    Examples\n    --------\n    ::\n\n        # First create some toy data:\n        x = np.linspace(0, 2*np.pi, 400)\n        y = np.sin(x**2)\n\n        # Create a figure\n        plt.figure()\n\n        # Create a subplot\n        ax = fig.subplots()\n        ax.plot(x, y)\n        ax.set_title('Simple plot')\n\n        # Create two subplots and unpack the output array immediately\n        ax1, ax2 = fig.subplots(1, 2, sharey=True)\n        ax1.plot(x, y)\n        ax1.set_title('Sharing Y axis')\n        ax2.scatter(x, y)\n\n        # Create four polar axes and access them through the returned array\n        axes = fig.subplots(2, 2, subplot_kw=dict(polar=True))\n        axes[0, 0].plot(x, y)\n        axes[1, 1].scatter(x, y)\n\n        # Share a X axis with each column of subplots\n        fig.subplots(2, 2, sharex='col')\n\n        # Share a Y axis with each row of subplots\n        fig.subplots(2, 2, sharey='row')\n\n        # Share both X and Y axes with all subplots\n        fig.subplots(2, 2, sharex='all', sharey='all')\n\n        # Note that this is the same as\n        fig.subplots(2, 2, sharex=True, sharey=True)\n    \"\"\"\n    if gridspec_kw is None:\n        gridspec_kw = {}\n    return self.add_gridspec(nrows, ncols, figure=self, **gridspec_kw).subplots(sharex=sharex, sharey=sharey, squeeze=squeeze, subplot_kw=subplot_kw)",
                            "def delaxes(self, ax):\n    \"\"\"\n    Remove the `~.axes.Axes` *ax* from the figure; update the current axes.\n    \"\"\"\n\n    def _reset_locators_and_formatters(axis):\n        majfmt = axis.get_major_formatter()\n        isDefault = majfmt.axis.isDefault_majfmt\n        axis.set_major_formatter(majfmt)\n        if isDefault:\n            majfmt.axis.isDefault_majfmt = True\n        majloc = axis.get_major_locator()\n        isDefault = majloc.axis.isDefault_majloc\n        axis.set_major_locator(majloc)\n        if isDefault:\n            majloc.axis.isDefault_majloc = True\n        minfmt = axis.get_minor_formatter()\n        isDefault = majloc.axis.isDefault_minfmt\n        axis.set_minor_formatter(minfmt)\n        if isDefault:\n            minfmt.axis.isDefault_minfmt = True\n        minloc = axis.get_minor_locator()\n        isDefault = majloc.axis.isDefault_minloc\n        axis.set_minor_locator(minloc)\n        if isDefault:\n            minloc.axis.isDefault_minloc = True\n\n    def _break_share_link(ax, grouper):\n        siblings = grouper.get_siblings(ax)\n        if len(siblings) > 1:\n            grouper.remove(ax)\n            for last_ax in siblings:\n                if ax is not last_ax:\n                    return last_ax\n        return None\n    self._axstack.remove(ax)\n    self._axobservers.process('_axes_change_event', self)\n    self.stale = True\n    last_ax = _break_share_link(ax, ax._shared_y_axes)\n    if last_ax is not None:\n        _reset_locators_and_formatters(last_ax.yaxis)\n    last_ax = _break_share_link(ax, ax._shared_x_axes)\n    if last_ax is not None:\n        _reset_locators_and_formatters(last_ax.xaxis)",
                            "def clf(self, keep_observers=False):\n    \"\"\"\n    Clear the figure.\n\n    Set *keep_observers* to True if, for example,\n    a gui widget is tracking the axes in the figure.\n    \"\"\"\n    self.suppressComposite = None\n    self.callbacks = cbook.CallbackRegistry()\n    for ax in tuple(self.axes):\n        ax.cla()\n        self.delaxes(ax)\n    toolbar = getattr(self.canvas, 'toolbar', None)\n    if toolbar is not None:\n        toolbar.update()\n    self._axstack.clear()\n    self.artists = []\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.images = []\n    self.legends = []\n    if not keep_observers:\n        self._axobservers = cbook.CallbackRegistry()\n    self._suptitle = None\n    if self.get_constrained_layout():\n        layoutbox.nonetree(self._layoutbox)\n    self.stale = True",
                            "def clear(self, keep_observers=False):\n    \"\"\"Clear the figure -- synonym for `clf`.\"\"\"\n    self.clf(keep_observers=keep_observers)",
                            "@allow_rasterization\ndef draw(self, renderer):\n    self._cachedRenderer = renderer\n    if not self.get_visible():\n        return\n    artists = self.get_children()\n    artists.remove(self.patch)\n    artists = sorted((artist for artist in artists if not artist.get_animated()), key=lambda artist: artist.get_zorder())\n    for ax in self.axes:\n        locator = ax.get_axes_locator()\n        if locator:\n            pos = locator(ax, renderer)\n            ax.apply_aspect(pos)\n        else:\n            ax.apply_aspect()\n        for child in ax.get_children():\n            if hasattr(child, 'apply_aspect'):\n                locator = child.get_axes_locator()\n                if locator:\n                    pos = locator(child, renderer)\n                    child.apply_aspect(pos)\n                else:\n                    child.apply_aspect()\n    try:\n        renderer.open_group('figure', gid=self.get_gid())\n        if self.get_constrained_layout() and self.axes:\n            self.execute_constrained_layout(renderer)\n        if self.get_tight_layout() and self.axes:\n            try:\n                self.tight_layout(**self._tight_parameters)\n            except ValueError:\n                pass\n        self.patch.draw(renderer)\n        mimage._draw_list_compositing_images(renderer, self, artists, self.suppressComposite)\n        renderer.close_group('figure')\n    finally:\n        self.stale = False\n    self.canvas.draw_event(renderer)",
                            "def draw_artist(self, a):\n    \"\"\"\n    Draw `.Artist` instance *a* only.\n\n    This can only be called after the figure has been drawn.\n    \"\"\"\n    if self._cachedRenderer is None:\n        raise AttributeError('draw_artist can only be used after an initial draw which caches the renderer')\n    a.draw(self._cachedRenderer)",
                            "@docstring.dedent_interpd\ndef legend(self, *args, **kwargs):\n    \"\"\"\n    Place a legend on the figure.\n\n    To make a legend from existing artists on every axes::\n\n      legend()\n\n    To make a legend for a list of lines and labels::\n\n      legend(\n          (line1, line2, line3),\n          ('label1', 'label2', 'label3'),\n          loc='upper right')\n\n    These can also be specified by keyword::\n\n      legend(\n          handles=(line1, line2, line3),\n          labels=('label1', 'label2', 'label3'),\n          loc='upper right')\n\n    Parameters\n    ----------\n    handles : list of `.Artist`, optional\n        A list of Artists (lines, patches) to be added to the legend.\n        Use this together with *labels*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n        The length of handles and labels should be the same in this\n        case. If they are not, they are truncated to the smaller length.\n\n    labels : list of str, optional\n        A list of labels to show next to the artists.\n        Use this together with *handles*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n    Returns\n    -------\n    `~matplotlib.legend.Legend`\n\n    Other Parameters\n    ----------------\n    %(_legend_kw_doc)s\n\n    Notes\n    -----\n    Some artists are not supported by this function.  See\n    :doc:`/tutorials/intermediate/legend_guide` for details.\n    \"\"\"\n    handles, labels, extra_args, kwargs = mlegend._parse_legend_args(self.axes, *args, **kwargs)\n    if len(extra_args):\n        pass\n    transform = kwargs.pop('bbox_transform', self.transFigure)\n    l = mlegend.Legend(self, handles, labels, *extra_args, bbox_transform=transform, **kwargs)\n    self.legends.append(l)\n    l._remove_method = self.legends.remove\n    self.stale = True\n    return l",
                            "@docstring.dedent_interpd\ndef text(self, x, y, s, fontdict=None, **kwargs):\n    \"\"\"\n    Add text to figure.\n\n    Parameters\n    ----------\n    x, y : float\n        The position to place the text. By default, this is in figure\n        coordinates, floats in [0, 1]. The coordinate system can be changed\n        using the *transform* keyword.\n\n    s : str\n        The text string.\n\n    fontdict : dict, optional\n        A dictionary to override the default text properties. If not given,\n        the defaults are determined by :rc:`font.*`. Properties passed as\n        *kwargs* override the corresponding ones given in *fontdict*.\n\n    Returns\n    -------\n    `~.text.Text`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.text.Text` properties\n        Other miscellaneous text parameters.\n\n        %(Text)s\n\n    See Also\n    --------\n    .Axes.text\n    .pyplot.text\n    \"\"\"\n    effective_kwargs = {'transform': self.transFigure, **(fontdict if fontdict is not None else {}), **kwargs}\n    text = Text(x=x, y=y, text=s, **effective_kwargs)\n    text.set_figure(self)\n    text.stale_callback = _stale_figure_callback\n    self.texts.append(text)\n    text._remove_method = self.texts.remove\n    self.stale = True\n    return text",
                            "def _set_artist_props(self, a):\n    if a != self:\n        a.set_figure(self)\n    a.stale_callback = _stale_figure_callback\n    a.set_transform(self.transFigure)",
                            "@docstring.dedent_interpd\ndef gca(self, **kwargs):\n    \"\"\"\n    Get the current axes, creating one if necessary.\n\n    The following kwargs are supported for ensuring the returned axes\n    adheres to the given projection etc., and for axes creation if\n    the active axes does not exist:\n\n    %(Axes)s\n\n    \"\"\"\n    ckey, cax = self._axstack.current_key_axes()\n    if cax is not None:\n        if not kwargs:\n            return cax\n        else:\n            projection_class, _, key = self._process_projection_requirements(**kwargs)\n            ckey = ckey[1:]\n            key = key[1:]\n            if key == ckey and isinstance(cax, projection_class):\n                return cax\n            else:\n                cbook._warn_external('Requested projection is different from current axis projection, creating new axis with requested projection.')\n    return self.add_subplot(1, 1, 1, **kwargs)",
                            "def sca(self, a):\n    \"\"\"Set the current axes to be *a* and return *a*.\"\"\"\n    self._axstack.bubble(a)\n    self._axobservers.process('_axes_change_event', self)\n    return a",
                            "def _gci(self):\n    \"\"\"\n    Get the current colorable artist.\n\n    Specifically, returns the current `.ScalarMappable` instance (`.Image`\n    created by `imshow` or `figimage`, `.Collection` created by `pcolor` or\n    `scatter`, etc.), or *None* if no such instance has been defined.\n\n    The current image is an attribute of the current axes, or the nearest\n    earlier axes in the current figure that contains an image.\n\n    Notes\n    -----\n    Historically, the only colorable artists were images; hence the name\n    ``gci`` (get current image).\n    \"\"\"\n    cax = self._axstack.current_key_axes()[1]\n    if cax is None:\n        return None\n    im = cax._gci()\n    if im is not None:\n        return im\n    for ax in reversed(self.axes):\n        im = ax._gci()\n        if im is not None:\n            return im\n    return None",
                            "def __getstate__(self):\n    state = super().__getstate__()\n    for attr_to_pop in ('canvas', '_cachedRenderer'):\n        state.pop(attr_to_pop, None)\n    state['__mpl_version__'] = _mpl_version\n    from matplotlib import _pylab_helpers\n    if getattr(self.canvas, 'manager', None) in _pylab_helpers.Gcf.figs.values():\n        state['_restore_to_pylab'] = True\n    state.pop('_layoutbox', None)\n    if self._suptitle is not None:\n        self._suptitle._layoutbox = None\n    return state",
                            "def __setstate__(self, state):\n    version = state.pop('__mpl_version__')\n    restore_to_pylab = state.pop('_restore_to_pylab', False)\n    if version != _mpl_version:\n        cbook._warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n    self.__dict__ = state\n    FigureCanvasBase(self)\n    self._layoutbox = None\n    if restore_to_pylab:\n        import matplotlib.pyplot as plt\n        import matplotlib._pylab_helpers as pylab_helpers\n        allnums = plt.get_fignums()\n        num = max(allnums) + 1 if allnums else 1\n        mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\n        pylab_helpers.Gcf._set_new_active_manager(mgr)\n        plt.draw_if_interactive()\n    self.stale = True",
                            "def add_axobserver(self, func):\n    \"\"\"Whenever the axes state change, ``func(self)`` will be called.\"\"\"\n    self._axobservers.connect('_axes_change_event', lambda arg: func(arg))",
                            "def savefig(self, fname, *, transparent=None, **kwargs):\n    \"\"\"\n    Save the current figure.\n\n    Call signature::\n\n      savefig(fname, dpi=None, facecolor='w', edgecolor='w',\n              orientation='portrait', papertype=None, format=None,\n              transparent=False, bbox_inches=None, pad_inches=0.1,\n              frameon=None, metadata=None)\n\n    The available output formats depend on the backend being used.\n\n    Parameters\n    ----------\n    fname : str or path-like or file-like\n        A path, or a Python file-like object, or\n        possibly some backend-dependent object such as\n        `matplotlib.backends.backend_pdf.PdfPages`.\n\n        If *format* is set, it determines the output format, and the file\n        is saved as *fname*.  Note that *fname* is used verbatim, and there\n        is no attempt to make the extension, if any, of *fname* match\n        *format*, and no extension is appended.\n\n        If *format* is not set, then the format is inferred from the\n        extension of *fname*, if there is one.  If *format* is not\n        set and *fname* has no extension, then the file is saved with\n        :rc:`savefig.format` and the appropriate extension is appended to\n        *fname*.\n\n    Other Parameters\n    ----------------\n    dpi : float or 'figure', default: :rc:`savefig.dpi`\n        The resolution in dots per inch.  If 'figure', use the figure's\n        dpi value.\n\n    quality : int, default: :rc:`savefig.jpeg_quality`\n        Applicable only if *format* is 'jpg' or 'jpeg', ignored otherwise.\n\n        The image quality, on a scale from 1 (worst) to 95 (best).\n        Values above 95 should be avoided; 100 disables portions of\n        the JPEG compression algorithm, and results in large files\n        with hardly any gain in image quality.\n\n        This parameter is deprecated.\n\n    optimize : bool, default: False\n        Applicable only if *format* is 'jpg' or 'jpeg', ignored otherwise.\n\n        Whether the encoder should make an extra pass over the image\n        in order to select optimal encoder settings.\n\n        This parameter is deprecated.\n\n    progressive : bool, default: False\n        Applicable only if *format* is 'jpg' or 'jpeg', ignored otherwise.\n\n        Whether the image should be stored as a progressive JPEG file.\n\n        This parameter is deprecated.\n\n    facecolor : color or 'auto', default: :rc:`savefig.facecolor`\n        The facecolor of the figure.  If 'auto', use the current figure\n        facecolor.\n\n    edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`\n        The edgecolor of the figure.  If 'auto', use the current figure\n        edgecolor.\n\n    orientation : {'landscape', 'portrait'}\n        Currently only supported by the postscript backend.\n\n    papertype : str\n        One of 'letter', 'legal', 'executive', 'ledger', 'a0' through\n        'a10', 'b0' through 'b10'. Only supported for postscript\n        output.\n\n    format : str\n        The file format, e.g. 'png', 'pdf', 'svg', ... The behavior when\n        this is unset is documented under *fname*.\n\n    transparent : bool\n        If *True*, the axes patches will all be transparent; the\n        figure patch will also be transparent unless facecolor\n        and/or edgecolor are specified via kwargs.\n        This is useful, for example, for displaying\n        a plot on top of a colored background on a web page.  The\n        transparency of these patches will be restored to their\n        original values upon exit of this function.\n\n    bbox_inches : str or `.Bbox`, default: :rc:`savefig.bbox`\n        Bounding box in inches: only the given portion of the figure is\n        saved.  If 'tight', try to figure out the tight bbox of the figure.\n\n    pad_inches : float, default: :rc:`savefig.pad_inches`\n        Amount of padding around the figure when bbox_inches is 'tight'.\n\n    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n        A list of extra artists that will be considered when the\n        tight bbox is calculated.\n\n    backend : str, optional\n        Use a non-default backend to render the file, e.g. to render a\n        png file with the \"cairo\" backend rather than the default \"agg\",\n        or a pdf file with the \"pgf\" backend rather than the default\n        \"pdf\".  Note that the default backend is normally sufficient.  See\n        :ref:`the-builtin-backends` for a list of valid backends for each\n        file format.  Custom backends can be referenced as \"module://...\".\n\n    metadata : dict, optional\n        Key/value pairs to store in the image metadata. The supported keys\n        and defaults depend on the image format and backend:\n\n        - 'png' with Agg backend: See the parameter ``metadata`` of\n          `~.FigureCanvasAgg.print_png`.\n        - 'pdf' with pdf backend: See the parameter ``metadata`` of\n          `~.backend_pdf.PdfPages`.\n        - 'eps' and 'ps' with PS backend: Only 'Creator' is supported.\n\n    pil_kwargs : dict, optional\n        Additional keyword arguments that are passed to\n        `PIL.Image.Image.save` when saving the figure.\n    \"\"\"\n    kwargs.setdefault('dpi', mpl.rcParams['savefig.dpi'])\n    if transparent is None:\n        transparent = mpl.rcParams['savefig.transparent']\n    if transparent:\n        kwargs.setdefault('facecolor', 'none')\n        kwargs.setdefault('edgecolor', 'none')\n        original_axes_colors = []\n        for ax in self.axes:\n            patch = ax.patch\n            original_axes_colors.append((patch.get_facecolor(), patch.get_edgecolor()))\n            patch.set_facecolor('none')\n            patch.set_edgecolor('none')\n    self.canvas.print_figure(fname, **kwargs)\n    if transparent:\n        for ax, cc in zip(self.axes, original_axes_colors):\n            ax.patch.set_facecolor(cc[0])\n            ax.patch.set_edgecolor(cc[1])",
                            "@docstring.dedent_interpd\ndef colorbar(self, mappable, cax=None, ax=None, use_gridspec=True, **kw):\n    \"\"\"\n    Create a colorbar for a ScalarMappable instance, *mappable*.\n\n    Documentation for the pyplot thin wrapper:\n    %(colorbar_doc)s\n    \"\"\"\n    if ax is None:\n        ax = self.gca()\n    current_ax = self.gca()\n    if cax is None:\n        if use_gridspec and isinstance(ax, SubplotBase) and (not self.get_constrained_layout()):\n            cax, kw = cbar.make_axes_gridspec(ax, **kw)\n        else:\n            cax, kw = cbar.make_axes(ax, **kw)\n    NON_COLORBAR_KEYS = ['fraction', 'pad', 'shrink', 'aspect', 'anchor', 'panchor']\n    cb_kw = {k: v for k, v in kw.items() if k not in NON_COLORBAR_KEYS}\n    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)\n    self.sca(current_ax)\n    self.stale = True\n    return cb",
                            "def subplots_adjust(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None):\n    \"\"\"\n    Adjust the subplot layout parameters.\n\n    Unset parameters are left unmodified; initial values are given by\n    :rc:`figure.subplot.[name]`.\n\n    Parameters\n    ----------\n    left : float, optional\n        The position of the left edge of the subplots,\n        as a fraction of the figure width.\n    right : float, optional\n        The position of the right edge of the subplots,\n        as a fraction of the figure width.\n    bottom : float, optional\n        The position of the bottom edge of the subplots,\n        as a fraction of the figure height.\n    top : float, optional\n        The position of the top edge of the subplots,\n        as a fraction of the figure height.\n    wspace : float, optional\n        The width of the padding between subplots,\n        as a fraction of the average axes width.\n    hspace : float, optional\n        The height of the padding between subplots,\n        as a fraction of the average axes height.\n    \"\"\"\n    if self.get_constrained_layout():\n        self.set_constrained_layout(False)\n        cbook._warn_external('This figure was using constrained_layout==True, but that is incompatible with subplots_adjust and or tight_layout: setting constrained_layout==False. ')\n    self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n    for ax in self.axes:\n        if not isinstance(ax, SubplotBase):\n            if isinstance(ax._sharex, SubplotBase):\n                ax._sharex.update_params()\n                ax.set_position(ax._sharex.figbox)\n            elif isinstance(ax._sharey, SubplotBase):\n                ax._sharey.update_params()\n                ax.set_position(ax._sharey.figbox)\n        else:\n            ax.update_params()\n            ax.set_position(ax.figbox)\n    self.stale = True",
                            "def ginput(self, n=1, timeout=30, show_clicks=True, mouse_add=MouseButton.LEFT, mouse_pop=MouseButton.RIGHT, mouse_stop=MouseButton.MIDDLE):\n    \"\"\"\n    Blocking call to interact with a figure.\n\n    Wait until the user clicks *n* times on the figure, and return the\n    coordinates of each click in a list.\n\n    There are three possible interactions:\n\n    - Add a point.\n    - Remove the most recently added point.\n    - Stop the interaction and return the points added so far.\n\n    The actions are assigned to mouse buttons via the arguments\n    *mouse_add*, *mouse_pop* and *mouse_stop*.\n\n    Parameters\n    ----------\n    n : int, default: 1\n        Number of mouse clicks to accumulate. If negative, accumulate\n        clicks until the input is terminated manually.\n    timeout : float, default: 30 seconds\n        Number of seconds to wait before timing out. If zero or negative\n        will never timeout.\n    show_clicks : bool, default: True\n        If True, show a red cross at the location of each click.\n    mouse_add : `.MouseButton` or None, default: `.MouseButton.LEFT`\n        Mouse button used to add points.\n    mouse_pop : `.MouseButton` or None, default: `.MouseButton.RIGHT`\n        Mouse button used to remove the most recently added point.\n    mouse_stop : `.MouseButton` or None, default: `.MouseButton.MIDDLE`\n        Mouse button used to stop input.\n\n    Returns\n    -------\n    list of tuples\n        A list of the clicked (x, y) coordinates.\n\n    Notes\n    -----\n    The keyboard can also be used to select points in case your mouse\n    does not have one or more of the buttons.  The delete and backspace\n    keys act like right clicking (i.e., remove last point), the enter key\n    terminates input and any other key (not already used by the window\n    manager) selects a point.\n    \"\"\"\n    blocking_mouse_input = BlockingMouseInput(self, mouse_add=mouse_add, mouse_pop=mouse_pop, mouse_stop=mouse_stop)\n    return blocking_mouse_input(n=n, timeout=timeout, show_clicks=show_clicks)",
                            "def waitforbuttonpress(self, timeout=-1):\n    \"\"\"\n    Blocking call to interact with the figure.\n\n    Wait for user input and return True if a key was pressed, False if a\n    mouse button was pressed and None if no input was given within\n    *timeout* seconds.  Negative values deactivate *timeout*.\n    \"\"\"\n    blocking_input = BlockingKeyMouseInput(self)\n    return blocking_input(timeout=timeout)",
                            "def get_default_bbox_extra_artists(self):\n    bbox_artists = [artist for artist in self.get_children() if artist.get_visible() and artist.get_in_layout()]\n    for ax in self.axes:\n        if ax.get_visible():\n            bbox_artists.extend(ax.get_default_bbox_extra_artists())\n    return bbox_artists",
                            "def get_tightbbox(self, renderer, bbox_extra_artists=None):\n    \"\"\"\n    Return a (tight) bounding box of the figure in inches.\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` subclass\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of each axes are\n        included in the tight bounding box.\n\n    Returns\n    -------\n    `.BboxBase`\n        containing the bounding box (in figure inches).\n    \"\"\"\n    bb = []\n    if bbox_extra_artists is None:\n        artists = self.get_default_bbox_extra_artists()\n    else:\n        artists = bbox_extra_artists\n    for a in artists:\n        bbox = a.get_tightbbox(renderer)\n        if bbox is not None and (bbox.width != 0 or bbox.height != 0):\n            bb.append(bbox)\n    for ax in self.axes:\n        if ax.get_visible():\n            try:\n                bbox = ax.get_tightbbox(renderer, bbox_extra_artists=bbox_extra_artists)\n            except TypeError:\n                bbox = ax.get_tightbbox(renderer)\n            bb.append(bbox)\n    bb = [b for b in bb if np.isfinite(b.width) and np.isfinite(b.height) and (b.width != 0 or b.height != 0)]\n    if len(bb) == 0:\n        return self.bbox_inches\n    _bbox = Bbox.union(bb)\n    bbox_inches = TransformedBbox(_bbox, Affine2D().scale(1 / self.dpi))\n    return bbox_inches",
                            "def init_layoutbox(self):\n    \"\"\"Initialize the layoutbox for use in constrained_layout.\"\"\"\n    if self._layoutbox is None:\n        self._layoutbox = layoutbox.LayoutBox(parent=None, name='figlb', artist=self)\n        self._layoutbox.constrain_geometry(0.0, 0.0, 1.0, 1.0)",
                            "def execute_constrained_layout(self, renderer=None):\n    \"\"\"\n    Use ``layoutbox`` to determine pos positions within axes.\n\n    See also `.set_constrained_layout_pads`.\n    \"\"\"\n    from matplotlib._constrained_layout import do_constrained_layout\n    _log.debug('Executing constrainedlayout')\n    if self._layoutbox is None:\n        cbook._warn_external('Calling figure.constrained_layout, but figure not setup to do constrained layout.  You either called GridSpec without the fig keyword, you are using plt.subplot, or you need to call figure or subplots with the constrained_layout=True kwarg.')\n        return\n    w_pad, h_pad, wspace, hspace = self.get_constrained_layout_pads()\n    fig = self\n    width, height = fig.get_size_inches()\n    w_pad = w_pad / width\n    h_pad = h_pad / height\n    if renderer is None:\n        renderer = layoutbox.get_renderer(fig)\n    do_constrained_layout(fig, renderer, h_pad, w_pad, hspace, wspace)",
                            "@cbook._delete_parameter('3.2', 'renderer')\ndef tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None, rect=None):\n    \"\"\"\n    Adjust the padding between and around subplots.\n\n    To exclude an artist on the axes from the bounding box calculation\n    that determines the subplot parameters (i.e. legend, or annotation),\n    set ``a.set_in_layout(False)`` for that artist.\n\n    Parameters\n    ----------\n    renderer : subclass of `~.backend_bases.RendererBase`, optional\n        Defaults to the renderer for the figure.  Deprecated.\n    pad : float, default: 1.08\n        Padding between the figure edge and the edges of subplots,\n        as a fraction of the font size.\n    h_pad, w_pad : float, default: *pad*\n        Padding (height/width) between edges of adjacent subplots,\n        as a fraction of the font size.\n    rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)\n        A rectangle in normalized figure coordinates into which the whole\n        subplots area (including labels) will fit.\n\n    See Also\n    --------\n    .Figure.set_tight_layout\n    .pyplot.tight_layout\n    \"\"\"\n    from .tight_layout import get_renderer, get_subplotspec_list, get_tight_layout_figure\n    subplotspec_list = get_subplotspec_list(self.axes)\n    if None in subplotspec_list:\n        cbook._warn_external('This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.')\n    if renderer is None:\n        renderer = get_renderer(self)\n    kwargs = get_tight_layout_figure(self, self.axes, subplotspec_list, renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n    if kwargs:\n        self.subplots_adjust(**kwargs)",
                            "def align_xlabels(self, axs=None):\n    \"\"\"\n    Align the ylabels of subplots in the same subplot column if label\n    alignment is being done automatically (i.e. the label position is\n    not manually set).\n\n    Alignment persists for draw events after this is called.\n\n    If a label is on the bottom, it is aligned with labels on axes that\n    also have their label on the bottom and that have the same\n    bottom-most subplot row.  If the label is on the top,\n    it is aligned with labels on axes with the same top-most row.\n\n    Parameters\n    ----------\n    axs : list of `~matplotlib.axes.Axes`\n        Optional list of (or ndarray) `~matplotlib.axes.Axes`\n        to align the xlabels.\n        Default is to align all axes on the figure.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.align_ylabels\n    matplotlib.figure.Figure.align_labels\n\n    Notes\n    -----\n    This assumes that ``axs`` are from the same `.GridSpec`, so that\n    their `.SubplotSpec` positions correspond to figure positions.\n\n    Examples\n    --------\n    Example with rotated xtick labels::\n\n        fig, axs = plt.subplots(1, 2)\n        for tick in axs[0].get_xticklabels():\n            tick.set_rotation(55)\n        axs[0].set_xlabel('XLabel 0')\n        axs[1].set_xlabel('XLabel 1')\n        fig.align_xlabels()\n    \"\"\"\n    if axs is None:\n        axs = self.axes\n    axs = np.ravel(axs)\n    for ax in axs:\n        _log.debug(' Working on: %s', ax.get_xlabel())\n        rowspan = ax.get_subplotspec().rowspan\n        pos = ax.xaxis.get_label_position()\n        for axc in axs:\n            if axc.xaxis.get_label_position() == pos:\n                rowspanc = axc.get_subplotspec().rowspan\n                if pos == 'top' and rowspan.start == rowspanc.start or (pos == 'bottom' and rowspan.stop == rowspanc.stop):\n                    self._align_xlabel_grp.join(ax, axc)",
                            "def align_ylabels(self, axs=None):\n    \"\"\"\n    Align the ylabels of subplots in the same subplot column if label\n    alignment is being done automatically (i.e. the label position is\n    not manually set).\n\n    Alignment persists for draw events after this is called.\n\n    If a label is on the left, it is aligned with labels on axes that\n    also have their label on the left and that have the same\n    left-most subplot column.  If the label is on the right,\n    it is aligned with labels on axes with the same right-most column.\n\n    Parameters\n    ----------\n    axs : list of `~matplotlib.axes.Axes`\n        Optional list (or ndarray) of `~matplotlib.axes.Axes`\n        to align the ylabels.\n        Default is to align all axes on the figure.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.align_xlabels\n    matplotlib.figure.Figure.align_labels\n\n    Notes\n    -----\n    This assumes that ``axs`` are from the same `.GridSpec`, so that\n    their `.SubplotSpec` positions correspond to figure positions.\n\n    Examples\n    --------\n    Example with large yticks labels::\n\n        fig, axs = plt.subplots(2, 1)\n        axs[0].plot(np.arange(0, 1000, 50))\n        axs[0].set_ylabel('YLabel 0')\n        axs[1].set_ylabel('YLabel 1')\n        fig.align_ylabels()\n    \"\"\"\n    if axs is None:\n        axs = self.axes\n    axs = np.ravel(axs)\n    for ax in axs:\n        _log.debug(' Working on: %s', ax.get_ylabel())\n        colspan = ax.get_subplotspec().colspan\n        pos = ax.yaxis.get_label_position()\n        for axc in axs:\n            if axc.yaxis.get_label_position() == pos:\n                colspanc = axc.get_subplotspec().colspan\n                if pos == 'left' and colspan.start == colspanc.start or (pos == 'right' and colspan.stop == colspanc.stop):\n                    self._align_ylabel_grp.join(ax, axc)",
                            "def align_labels(self, axs=None):\n    \"\"\"\n    Align the xlabels and ylabels of subplots with the same subplots\n    row or column (respectively) if label alignment is being\n    done automatically (i.e. the label position is not manually set).\n\n    Alignment persists for draw events after this is called.\n\n    Parameters\n    ----------\n    axs : list of `~matplotlib.axes.Axes`\n        Optional list (or ndarray) of `~matplotlib.axes.Axes`\n        to align the labels.\n        Default is to align all axes on the figure.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.align_xlabels\n\n    matplotlib.figure.Figure.align_ylabels\n    \"\"\"\n    self.align_xlabels(axs=axs)\n    self.align_ylabels(axs=axs)",
                            "def add_gridspec(self, nrows=1, ncols=1, **kwargs):\n    \"\"\"\n    Return a `.GridSpec` that has this figure as a parent.  This allows\n    complex layout of axes in the figure.\n\n    Parameters\n    ----------\n    nrows : int, default: 1\n        Number of rows in grid.\n\n    ncols : int, default: 1\n        Number or columns in grid.\n\n    Returns\n    -------\n    `.GridSpec`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments are passed to `.GridSpec`.\n\n    See Also\n    --------\n    matplotlib.pyplot.subplots\n\n    Examples\n    --------\n    Adding a subplot that spans two rows::\n\n        fig = plt.figure()\n        gs = fig.add_gridspec(2, 2)\n        ax1 = fig.add_subplot(gs[0, 0])\n        ax2 = fig.add_subplot(gs[1, 0])\n        # spans two rows:\n        ax3 = fig.add_subplot(gs[:, 1])\n\n    \"\"\"\n    _ = kwargs.pop('figure', None)\n    gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, **kwargs)\n    self._gridspecs.append(gs)\n    return gs",
                            "def fixitems(items):\n    ret = []\n    for k, v in items:\n        try:\n            v = tuple(v)\n        except Exception:\n            pass\n        ret.append((k, v))\n    return tuple(ret)",
                            "def fixlist(args):\n    ret = []\n    for a in args:\n        if np.iterable(a):\n            a = tuple(a)\n        ret.append(a)\n    return tuple(ret)",
                            "def _reset_locators_and_formatters(axis):\n    majfmt = axis.get_major_formatter()\n    isDefault = majfmt.axis.isDefault_majfmt\n    axis.set_major_formatter(majfmt)\n    if isDefault:\n        majfmt.axis.isDefault_majfmt = True\n    majloc = axis.get_major_locator()\n    isDefault = majloc.axis.isDefault_majloc\n    axis.set_major_locator(majloc)\n    if isDefault:\n        majloc.axis.isDefault_majloc = True\n    minfmt = axis.get_minor_formatter()\n    isDefault = majloc.axis.isDefault_minfmt\n    axis.set_minor_formatter(minfmt)\n    if isDefault:\n        minfmt.axis.isDefault_minfmt = True\n    minloc = axis.get_minor_locator()\n    isDefault = majloc.axis.isDefault_minloc\n    axis.set_minor_locator(minloc)\n    if isDefault:\n        minloc.axis.isDefault_minloc = True",
                            "def _break_share_link(ax, grouper):\n    siblings = grouper.get_siblings(ax)\n    if len(siblings) > 1:\n        grouper.remove(ax)\n        for last_ax in siblings:\n            if ax is not last_ax:\n                return last_ax\n    return None"
                        ],
                        "constructor_variables": [
                            "edgecolor",
                            "bbox",
                            "transFigure",
                            "callbacks",
                            "dpi",
                            "subplotpars",
                            "_suptitle",
                            "frameon",
                            "_dpi",
                            "facecolor",
                            "_axstack",
                            "patch",
                            "_layoutbox",
                            "bbox_inches",
                            "dpi_scale_trans",
                            "_align_ylabel_grp",
                            "_gridspecs",
                            "_cachedRenderer",
                            "figsize",
                            "_align_xlabel_grp"
                        ],
                        "class_level_variables": [
                            "axes",
                            "dpi",
                            "frameon"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__str__(self)",
                            "__repr__(self)",
                            "__init__(self, figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None, tight_layout=None, constrained_layout=None)",
                            "_repr_html_(self)",
                            "show(self, warn=True)",
                            "get_axes(self)",
                            "_get_dpi(self)",
                            "_set_dpi(self, dpi, forward=True)",
                            "get_tight_layout(self)",
                            "set_tight_layout(self, tight)",
                            "get_constrained_layout(self)",
                            "set_constrained_layout(self, constrained)",
                            "set_constrained_layout_pads(self, **kwargs)",
                            "get_constrained_layout_pads(self, relative=False)",
                            "autofmt_xdate(self, bottom=0.2, rotation=30, ha='right', which='major')",
                            "get_children(self)",
                            "contains(self, mouseevent)",
                            "get_window_extent(self, *args, **kwargs)",
                            "suptitle(self, t, **kwargs)",
                            "set_canvas(self, canvas)",
                            "figimage(self, X, xo=0, yo=0, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, origin=None, resize=False, **kwargs)",
                            "set_size_inches(self, w, h=None, forward=True)",
                            "get_size_inches(self)",
                            "get_edgecolor(self)",
                            "get_facecolor(self)",
                            "get_figwidth(self)",
                            "get_figheight(self)",
                            "get_dpi(self)",
                            "get_frameon(self)",
                            "set_edgecolor(self, color)",
                            "set_facecolor(self, color)",
                            "set_dpi(self, val)",
                            "set_figwidth(self, val, forward=True)",
                            "set_figheight(self, val, forward=True)",
                            "set_frameon(self, b)",
                            "add_artist(self, artist, clip=False)",
                            "_make_key(self, *args, **kwargs)",
                            "_process_projection_requirements(self, *args, **kwargs)",
                            "add_axes(self, *args, **kwargs)",
                            "add_subplot(self, *args, **kwargs)",
                            "_add_axes_internal(self, key, ax)",
                            "subplots(self, nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None)",
                            "delaxes(self, ax)",
                            "clf(self, keep_observers=False)",
                            "clear(self, keep_observers=False)",
                            "draw(self, renderer)",
                            "draw_artist(self, a)",
                            "legend(self, *args, **kwargs)",
                            "text(self, x, y, s, fontdict=None, **kwargs)",
                            "_set_artist_props(self, a)",
                            "gca(self, **kwargs)",
                            "sca(self, a)",
                            "_gci(self)",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "add_axobserver(self, func)",
                            "savefig(self, fname, **kwargs)",
                            "colorbar(self, mappable, cax=None, ax=None, use_gridspec=True, **kw)",
                            "subplots_adjust(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)",
                            "ginput(self, n=1, timeout=30, show_clicks=True, mouse_add=MouseButton.LEFT, mouse_pop=MouseButton.RIGHT, mouse_stop=MouseButton.MIDDLE)",
                            "waitforbuttonpress(self, timeout=-1)",
                            "get_default_bbox_extra_artists(self)",
                            "get_tightbbox(self, renderer, bbox_extra_artists=None)",
                            "init_layoutbox(self)",
                            "execute_constrained_layout(self, renderer=None)",
                            "tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None, rect=None)",
                            "align_xlabels(self, axs=None)",
                            "align_ylabels(self, axs=None)",
                            "align_labels(self, axs=None)",
                            "add_gridspec(self, nrows=1, ncols=1, **kwargs)",
                            "fixitems(items)",
                            "fixlist(args)",
                            "_reset_locators_and_formatters(axis)",
                            "_break_share_link(ax, grouper)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _stale_figure_callback(self, val):\n    if self.figure:\n        self.figure.stale = val",
                "def figaspect(arg):\n    \"\"\"\n    Calculate the width and height for a figure with a specified aspect ratio.\n\n    While the height is taken from :rc:`figure.figsize`, the width is\n    adjusted to match the desired aspect ratio. Additionally, it is ensured\n    that the width is in the range [4., 16.] and the height is in the range\n    [2., 16.]. If necessary, the default height is adjusted to ensure this.\n\n    Parameters\n    ----------\n    arg : float or 2d array\n        If a float, this defines the aspect ratio (i.e. the ratio height /\n        width).\n        In case of an array the aspect ratio is number of rows / number of\n        columns, so that the array could be fitted in the figure undistorted.\n\n    Returns\n    -------\n    width, height\n        The figure size in inches.\n\n    Notes\n    -----\n    If you want to create an axes within the figure, that still preserves the\n    aspect ratio, be sure to create it with equal width and height. See\n    examples below.\n\n    Thanks to Fernando Perez for this function.\n\n    Examples\n    --------\n    Make a figure twice as tall as it is wide::\n\n        w, h = figaspect(2.)\n        fig = Figure(figsize=(w, h))\n        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n        ax.imshow(A, **kwargs)\n\n    Make a figure with the proper aspect for an array::\n\n        A = rand(5, 3)\n        w, h = figaspect(A)\n        fig = Figure(figsize=(w, h))\n        ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n        ax.imshow(A, **kwargs)\n    \"\"\"\n\n    isarray = hasattr(arg, 'shape') and not np.isscalar(arg)\n\n    # min/max sizes to respect when autoscaling.  If John likes the idea, they\n    # could become rc parameters, for now they're hardwired.\n    figsize_min = np.array((4.0, 2.0))  # min length for width/height\n    figsize_max = np.array((16.0, 16.0))  # max length for width/height\n\n    # Extract the aspect ratio of the array\n    if isarray:\n        nr, nc = arg.shape[:2]\n        arr_ratio = nr / nc\n    else:\n        arr_ratio = arg\n\n    # Height of user figure defaults\n    fig_height = mpl.rcParams['figure.figsize'][1]\n\n    # New size for the figure, keeping the aspect ratio of the caller\n    newsize = np.array((fig_height / arr_ratio, fig_height))\n\n    # Sanity checks, don't drop either dimension below figsize_min\n    newsize /= min(1.0, *(newsize / figsize_min))\n\n    # Avoid humongous windows as well\n    newsize /= max(1.0, *(newsize / figsize_max))\n\n    # Finally, if we have a really funky aspect ratio, break it but respect\n    # the min/max dimensions (we don't want figures 10 feet tall!)\n    newsize = np.clip(newsize, figsize_min, figsize_max)\n    return newsize",
                "def __init__(self):\n    super().__init__()\n    self._ind = 0",
                "def as_list(self):\n    \"\"\"\n    Return a list of the Axes instances that have been added to the figure.\n    \"\"\"\n    ia_list = [a for k, a in self._elements]\n    ia_list.sort()\n    return [a for i, a in ia_list]",
                "def get(self, key):\n    \"\"\"\n    Return the Axes instance that was added with *key*.\n    If it is not present, return *None*.\n    \"\"\"\n    item = dict(self._elements).get(key)\n    if item is None:\n        return None\n    cbook.warn_deprecated(\n        \"2.1\",\n        message=\"Adding an axes using the same arguments as a previous \"\n        \"axes currently reuses the earlier instance.  In a future \"\n        \"version, a new instance will always be created and returned.  \"\n        \"Meanwhile, this warning can be suppressed, and the future \"\n        \"behavior ensured, by passing a unique label to each axes \"\n        \"instance.\")\n    return item[1]",
                "def _entry_from_axes(self, e):\n    ind, k = {a: (ind, k) for k, (ind, a) in self._elements}[e]\n    return (k, (ind, e))",
                "def remove(self, a):\n    \"\"\"Remove the axes from the stack.\"\"\"\n    super().remove(self._entry_from_axes(a))",
                "def bubble(self, a):\n    \"\"\"\n    Move the given axes, which must already exist in the\n    stack, to the top.\n    \"\"\"\n    return super().bubble(self._entry_from_axes(a))",
                "def add(self, key, a):\n    \"\"\"\n    Add Axes *a*, with key *key*, to the stack, and return the stack.\n\n    If *key* is unhashable, replace it by a unique, arbitrary object.\n\n    If *a* is already on the stack, don't add it again, but\n    return *None*.\n    \"\"\"\n    # All the error checking may be unnecessary; but this method\n    # is called so seldom that the overhead is negligible.\n    cbook._check_isinstance(Axes, a=a)\n    try:\n        hash(key)\n    except TypeError:\n        key = object()\n\n    a_existing = self.get(key)\n    if a_existing is not None:\n        super().remove((key, a_existing))\n        cbook._warn_external(\n            \"key {!r} already existed; Axes is being replaced\".format(key))\n        # I don't think the above should ever happen.\n\n    if a in self:\n        return None\n    self._ind += 1\n    return super().push((key, (self._ind, a)))",
                "def current_key_axes(self):\n    \"\"\"\n    Return a tuple of ``(key, axes)`` for the active axes.\n\n    If no axes exists on the stack, then returns ``(None, None)``.\n    \"\"\"\n    if not len(self._elements):\n        return self._default, self._default\n    else:\n        key, (index, axes) = self._elements[self._pos]\n        return key, axes",
                "def __call__(self):\n    return self.current_key_axes()[1]",
                "def __contains__(self, a):\n    return a in self.as_list()",
                "def __init__(self, left=None, bottom=None, right=None, top=None,\n             wspace=None, hspace=None):\n    \"\"\"\n    Defaults are given by :rc:`figure.subplot.[name]`.\n\n    Parameters\n    ----------\n    left : float\n        The position of the left edge of the subplots,\n        as a fraction of the figure width.\n    right : float\n        The position of the right edge of the subplots,\n        as a fraction of the figure width.\n    bottom : float\n        The position of the bottom edge of the subplots,\n        as a fraction of the figure height.\n    top : float\n        The position of the top edge of the subplots,\n        as a fraction of the figure height.\n    wspace : float\n        The width of the padding between subplots,\n        as a fraction of the average axes width.\n    hspace : float\n        The height of the padding between subplots,\n        as a fraction of the average axes height.\n    \"\"\"\n    self.validate = True\n    for key in [\"left\", \"bottom\", \"right\", \"top\", \"wspace\", \"hspace\"]:\n        setattr(self, key, mpl.rcParams[f\"figure.subplot.{key}\"])\n    self.update(left, bottom, right, top, wspace, hspace)",
                "def update(self, left=None, bottom=None, right=None, top=None,\n           wspace=None, hspace=None):\n    \"\"\"\n    Update the dimensions of the passed parameters. *None* means unchanged.\n    \"\"\"\n    if self.validate:\n        if ((left if left is not None else self.left)\n                >= (right if right is not None else self.right)):\n            raise ValueError('left cannot be >= right')\n        if ((bottom if bottom is not None else self.bottom)\n                >= (top if top is not None else self.top)):\n            raise ValueError('bottom cannot be >= top')\n    if left is not None:\n        self.left = left\n    if right is not None:\n        self.right = right\n    if bottom is not None:\n        self.bottom = bottom\n    if top is not None:\n        self.top = top\n    if wspace is not None:\n        self.wspace = wspace\n    if hspace is not None:\n        self.hspace = hspace",
                "def __str__(self):\n    return \"Figure(%gx%g)\" % tuple(self.bbox.size)",
                "def __repr__(self):\n    return \"<{clsname} size {h:g}x{w:g} with {naxes} Axes>\".format(\n        clsname=self.__class__.__name__,\n        h=self.bbox.size[0], w=self.bbox.size[1],\n        naxes=len(self.axes),\n    )",
                "def __init__(self,\n             figsize=None,\n             dpi=None,\n             facecolor=None,\n             edgecolor=None,\n             linewidth=0.0,\n             frameon=None,\n             subplotpars=None,  # rc figure.subplot.*\n             tight_layout=None,  # rc figure.autolayout\n             constrained_layout=None,  # rc figure.constrained_layout.use\n             ):\n    \"\"\"\n    Parameters\n    ----------\n    figsize : 2-tuple of floats, default: :rc:`figure.figsize`\n        Figure dimension ``(width, height)`` in inches.\n\n    dpi : float, default: :rc:`figure.dpi`\n        Dots per inch.\n\n    facecolor : default: :rc:`figure.facecolor`\n        The figure patch facecolor.\n\n    edgecolor : default: :rc:`figure.edgecolor`\n        The figure patch edge color.\n\n    linewidth : float\n        The linewidth of the frame (i.e. the edge linewidth of the figure\n        patch).\n\n    frameon : bool, default: :rc:`figure.frameon`\n        If ``False``, suppress drawing the figure background patch.\n\n    subplotpars : `SubplotParams`\n        Subplot parameters. If not given, the default subplot\n        parameters :rc:`figure.subplot.*` are used.\n\n    tight_layout : bool or dict, default: :rc:`figure.autolayout`\n        If ``False`` use *subplotpars*. If ``True`` adjust subplot\n        parameters using `.tight_layout` with default padding.\n        When providing a dict containing the keys ``pad``, ``w_pad``,\n        ``h_pad``, and ``rect``, the default `.tight_layout` paddings\n        will be overridden.\n\n    constrained_layout : bool, default: :rc:`figure.constrained_layout.use`\n        If ``True`` use constrained layout to adjust positioning of plot\n        elements.  Like ``tight_layout``, but designed to be more\n        flexible.  See\n        :doc:`/tutorials/intermediate/constrainedlayout_guide`\n        for examples.  (Note: does not work with `add_subplot` or\n        `~.pyplot.subplot2grid`.)\n    \"\"\"\n    super().__init__()\n    # remove the non-figure artist _axes property\n    # as it makes no sense for a figure to be _in_ an axes\n    # this is used by the property methods in the artist base class\n    # which are over-ridden in this class\n    del self._axes\n    self.callbacks = cbook.CallbackRegistry()\n\n    if figsize is None:\n        figsize = mpl.rcParams['figure.figsize']\n    if dpi is None:\n        dpi = mpl.rcParams['figure.dpi']\n    if facecolor is None:\n        facecolor = mpl.rcParams['figure.facecolor']\n    if edgecolor is None:\n        edgecolor = mpl.rcParams['figure.edgecolor']\n    if frameon is None:\n        frameon = mpl.rcParams['figure.frameon']\n\n    if not np.isfinite(figsize).all() or (np.array(figsize) <= 0).any():\n        raise ValueError('figure size must be positive finite not '\n                         f'{figsize}')\n    self.bbox_inches = Bbox.from_bounds(0, 0, *figsize)\n\n    self.dpi_scale_trans = Affine2D().scale(dpi)\n    # do not use property as it will trigger\n    self._dpi = dpi\n    self.bbox = TransformedBbox(self.bbox_inches, self.dpi_scale_trans)\n\n    self.transFigure = BboxTransformTo(self.bbox)\n\n    self.patch = Rectangle(\n        xy=(0, 0), width=1, height=1, visible=frameon,\n        facecolor=facecolor, edgecolor=edgecolor, linewidth=linewidth,\n        # Don't let the figure patch influence bbox calculation.\n        in_layout=False)\n    self._set_artist_props(self.patch)\n    self.patch.set_antialiased(False)\n\n    FigureCanvasBase(self)  # Set self.canvas.\n    self._suptitle = None\n\n    if subplotpars is None:\n        subplotpars = SubplotParams()\n\n    self.subplotpars = subplotpars\n    # constrained_layout:\n    self._layoutbox = None\n    # set in set_constrained_layout_pads()\n    self.set_constrained_layout(constrained_layout)\n\n    self.set_tight_layout(tight_layout)\n\n    self._axstack = _AxesStack()  # track all figure axes and current axes\n    self.clf()\n    self._cachedRenderer = None\n\n    # groupers to keep track of x and y labels we want to align.\n    # see self.align_xlabels and self.align_ylabels and\n    # axis._get_tick_boxes_siblings\n    self._align_xlabel_grp = cbook.Grouper()\n    self._align_ylabel_grp = cbook.Grouper()\n\n    # list of child gridspecs for this figure\n    self._gridspecs = []",
                "def _repr_html_(self):\n    # We can't use \"isinstance\" here, because then we'd end up importing\n    # webagg unconditionally.\n    if 'WebAgg' in type(self.canvas).__name__:\n        from matplotlib.backends import backend_webagg\n        return backend_webagg.ipython_inline_display(self)",
                "def show(self, warn=True):\n    \"\"\"\n    If using a GUI backend with pyplot, display the figure window.\n\n    If the figure was not created using `~.pyplot.figure`, it will lack\n    a `~.backend_bases.FigureManagerBase`, and this method will raise an\n    AttributeError.\n\n    .. warning::\n\n        This does not manage an GUI event loop. Consequently, the figure\n        may only be shown briefly or not shown at all if you or your\n        environment are not managing an event loop.\n\n        Proper use cases for `.Figure.show` include running this from a\n        GUI application or an IPython shell.\n\n        If you're running a pure python shell or executing a non-GUI\n        python script, you should use `matplotlib.pyplot.show` instead,\n        which takes care of managing the event loop for you.\n\n    Parameters\n    ----------\n    warn : bool, default: True\n        If ``True`` and we are not running headless (i.e. on Linux with an\n        unset DISPLAY), issue warning when called on a non-GUI backend.\n    \"\"\"\n    if self.canvas.manager is None:\n        raise AttributeError(\n            \"Figure.show works only for figures managed by pyplot, \"\n            \"normally created by pyplot.figure()\")\n    try:\n        self.canvas.manager.show()\n    except NonGuiException as exc:\n        cbook._warn_external(str(exc))",
                "def get_axes(self):\n    \"\"\"\n    Return a list of axes in the Figure. You can access and modify the\n    axes in the Figure through this list.\n\n    Do not modify the list itself. Instead, use `~Figure.add_axes`,\n    `~.Figure.add_subplot` or `~.Figure.delaxes` to add or remove an axes.\n\n    Note: This is equivalent to the property `~.Figure.axes`.\n    \"\"\"\n    return self._axstack.as_list()",
                "def _get_dpi(self):\n    return self._dpi",
                "def _set_dpi(self, dpi, forward=True):\n    \"\"\"\n    Parameters\n    ----------\n    dpi : float\n\n    forward : bool\n        Passed on to `~.Figure.set_size_inches`\n    \"\"\"\n    if dpi == self._dpi:\n        # We don't want to cause undue events in backends.\n        return\n    self._dpi = dpi\n    self.dpi_scale_trans.clear().scale(dpi)\n    w, h = self.get_size_inches()\n    self.set_size_inches(w, h, forward=forward)\n    self.callbacks.process('dpi_changed', self)",
                "def get_tight_layout(self):\n    \"\"\"Return whether `.tight_layout` is called when drawing.\"\"\"\n    return self._tight",
                "def set_tight_layout(self, tight):\n    \"\"\"\n    Set whether and how `.tight_layout` is called when drawing.\n\n    Parameters\n    ----------\n    tight : bool or dict with keys \"pad\", \"w_pad\", \"h_pad\", \"rect\" or None\n        If a bool, sets whether to call `.tight_layout` upon drawing.\n        If ``None``, use the ``figure.autolayout`` rcparam instead.\n        If a dict, pass it as kwargs to `.tight_layout`, overriding the\n        default paddings.\n    \"\"\"\n    if tight is None:\n        tight = mpl.rcParams['figure.autolayout']\n    self._tight = bool(tight)\n    self._tight_parameters = tight if isinstance(tight, dict) else {}\n    self.stale = True",
                "def get_constrained_layout(self):\n    \"\"\"\n    Return whether constrained layout is being used.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n    \"\"\"\n    return self._constrained",
                "def set_constrained_layout(self, constrained):\n    \"\"\"\n    Set whether ``constrained_layout`` is used upon drawing. If None,\n    :rc:`figure.constrained_layout.use` value will be used.\n\n    When providing a dict containing the keys `w_pad`, `h_pad`\n    the default ``constrained_layout`` paddings will be\n    overridden.  These pads are in inches and default to 3.0/72.0.\n    ``w_pad`` is the width padding and ``h_pad`` is the height padding.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n\n    Parameters\n    ----------\n    constrained : bool or dict or None\n    \"\"\"\n    self._constrained_layout_pads = dict()\n    self._constrained_layout_pads['w_pad'] = None\n    self._constrained_layout_pads['h_pad'] = None\n    self._constrained_layout_pads['wspace'] = None\n    self._constrained_layout_pads['hspace'] = None\n    if constrained is None:\n        constrained = mpl.rcParams['figure.constrained_layout.use']\n    self._constrained = bool(constrained)\n    if isinstance(constrained, dict):\n        self.set_constrained_layout_pads(**constrained)\n    else:\n        self.set_constrained_layout_pads()\n\n    self.stale = True",
                "def set_constrained_layout_pads(self, **kwargs):\n    \"\"\"\n    Set padding for ``constrained_layout``.  Note the kwargs can be passed\n    as a dictionary ``fig.set_constrained_layout(**paddict)``.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n\n    Parameters\n    ----------\n    w_pad : float\n        Width padding in inches.  This is the pad around axes\n        and is meant to make sure there is enough room for fonts to\n        look good.  Defaults to 3 pts = 0.04167 inches\n\n    h_pad : float\n        Height padding in inches. Defaults to 3 pts.\n\n    wspace : float\n        Width padding between subplots, expressed as a fraction of the\n        subplot width.  The total padding ends up being w_pad + wspace.\n\n    hspace : float\n        Height padding between subplots, expressed as a fraction of the\n        subplot width. The total padding ends up being h_pad + hspace.\n\n    \"\"\"\n\n    todo = ['w_pad', 'h_pad', 'wspace', 'hspace']\n    for td in todo:\n        if td in kwargs and kwargs[td] is not None:\n            self._constrained_layout_pads[td] = kwargs[td]\n        else:\n            self._constrained_layout_pads[td] = (\n                mpl.rcParams['figure.constrained_layout.' + td])",
                "def get_constrained_layout_pads(self, relative=False):\n    \"\"\"\n    Get padding for ``constrained_layout``.\n\n    Returns a list of ``w_pad, h_pad`` in inches and\n    ``wspace`` and ``hspace`` as fractions of the subplot.\n\n    See :doc:`/tutorials/intermediate/constrainedlayout_guide`.\n\n    Parameters\n    ----------\n    relative : bool\n        If `True`, then convert from inches to figure relative.\n    \"\"\"\n    w_pad = self._constrained_layout_pads['w_pad']\n    h_pad = self._constrained_layout_pads['h_pad']\n    wspace = self._constrained_layout_pads['wspace']\n    hspace = self._constrained_layout_pads['hspace']\n\n    if relative and (w_pad is not None or h_pad is not None):\n        renderer0 = layoutbox.get_renderer(self)\n        dpi = renderer0.dpi\n        w_pad = w_pad * dpi / renderer0.width\n        h_pad = h_pad * dpi / renderer0.height\n\n    return w_pad, h_pad, wspace, hspace",
                "def autofmt_xdate(\n        self, bottom=0.2, rotation=30, ha='right', which='major'):\n    \"\"\"\n    Date ticklabels often overlap, so it is useful to rotate them\n    and right align them.  Also, a common use case is a number of\n    subplots with shared xaxes where the x-axis is date data.  The\n    ticklabels are often long, and it helps to rotate them on the\n    bottom subplot and turn them off on other subplots, as well as\n    turn off xlabels.\n\n    Parameters\n    ----------\n    bottom : float, default: 0.2\n        The bottom of the subplots for `subplots_adjust`.\n    rotation : float, default: 30 degrees\n        The rotation angle of the xtick labels in degrees.\n    ha : {'left', 'center', 'right'}, default: 'right'\n        The horizontal alignment of the xticklabels.\n    which : {'major', 'minor', 'both'}, default: 'major'\n        Selects which ticklabels to rotate.\n    \"\"\"\n    if which is None:\n        cbook.warn_deprecated(\n            \"3.3\", message=\"Support for passing which=None to mean \"\n            \"which='major' is deprecated since %(since)s and will be \"\n            \"removed %(removal)s.\")\n    allsubplots = all(hasattr(ax, 'is_last_row') for ax in self.axes)\n    if len(self.axes) == 1:\n        for label in self.axes[0].get_xticklabels(which=which):\n            label.set_ha(ha)\n            label.set_rotation(rotation)\n    else:\n        if allsubplots:\n            for ax in self.get_axes():\n                if ax.is_last_row():\n                    for label in ax.get_xticklabels(which=which):\n                        label.set_ha(ha)\n                        label.set_rotation(rotation)\n                else:\n                    for label in ax.get_xticklabels(which=which):\n                        label.set_visible(False)\n                    ax.set_xlabel('')\n\n    if allsubplots:\n        self.subplots_adjust(bottom=bottom)\n    self.stale = True",
                "def get_children(self):\n    \"\"\"Get a list of artists contained in the figure.\"\"\"\n    return [self.patch,\n            *self.artists,\n            *self.axes,\n            *self.lines,\n            *self.patches,\n            *self.texts,\n            *self.images,\n            *self.legends]",
                "def contains(self, mouseevent):\n    \"\"\"\n    Test whether the mouse event occurred on the figure.\n\n    Returns\n    -------\n        bool, {}\n    \"\"\"\n    inside, info = self._default_contains(mouseevent, figure=self)\n    if inside is not None:\n        return inside, info\n    inside = self.bbox.contains(mouseevent.x, mouseevent.y)\n    return inside, {}",
                "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the figure bounding box in display space. Arguments are ignored.\n    \"\"\"\n    return self.bbox",
                "    def suptitle(self, t, **kwargs):\n        \"\"\"\n        Add a centered title to the figure.\n\n        Parameters\n        ----------\n        t : str\n            The title text.\n\n        x : float, default 0.5\n            The x location of the text in figure coordinates.\n\n        y : float, default 0.98\n            The y location of the text in figure coordinates.\n\n        horizontalalignment, ha : {'center', 'left', right'}, default: 'center'\n            The horizontal alignment of the text relative to (*x*, *y*).\n\n        verticalalignment, va : {'top', 'center', 'bottom', 'baseline'}, \\\ndefault: 'top'\n            The vertical alignment of the text relative to (*x*, *y*).\n\n        fontsize, size : default: :rc:`figure.titlesize`\n            The font size of the text. See `.Text.set_size` for possible\n            values.\n\n        fontweight, weight : default: :rc:`figure.titleweight`\n            The font weight of the text. See `.Text.set_weight` for possible\n            values.\n\n        Returns\n        -------\n        text\n            The `.Text` instance of the title.\n\n        Other Parameters\n        ----------------\n        fontproperties : None or dict, optional\n            A dict of font properties. If *fontproperties* is given the\n            default values for font size and weight are taken from the\n            `.FontProperties` defaults. :rc:`figure.titlesize` and\n            :rc:`figure.titleweight` are ignored in this case.\n\n        **kwargs\n            Additional kwargs are `matplotlib.text.Text` properties.\n\n        Examples\n        --------\n        >>> fig.suptitle('This is the figure title', fontsize=12)\n        \"\"\"\n        manual_position = ('x' in kwargs or 'y' in kwargs)\n\n        x = kwargs.pop('x', 0.5)\n        y = kwargs.pop('y', 0.98)\n\n        if 'horizontalalignment' not in kwargs and 'ha' not in kwargs:\n            kwargs['horizontalalignment'] = 'center'\n        if 'verticalalignment' not in kwargs and 'va' not in kwargs:\n            kwargs['verticalalignment'] = 'top'\n\n        if 'fontproperties' not in kwargs:\n            if 'fontsize' not in kwargs and 'size' not in kwargs:\n                kwargs['size'] = mpl.rcParams['figure.titlesize']\n            if 'fontweight' not in kwargs and 'weight' not in kwargs:\n                kwargs['weight'] = mpl.rcParams['figure.titleweight']\n\n        sup = self.text(x, y, t, **kwargs)\n        if self._suptitle is not None:\n            self._suptitle.set_text(t)\n            self._suptitle.set_position((x, y))\n            self._suptitle.update_from(sup)\n            sup.remove()\n        else:\n            self._suptitle = sup\n            self._suptitle._layoutbox = None\n            if self._layoutbox is not None and not manual_position:\n                w_pad, h_pad, wspace, hspace =  \\\n                        self.get_constrained_layout_pads(relative=True)\n                figlb = self._layoutbox\n                self._suptitle._layoutbox = layoutbox.LayoutBox(\n                        parent=figlb, artist=self._suptitle,\n                        name=figlb.name+'.suptitle')\n                # stack the suptitle on top of all the children.\n                # Some day this should be on top of all the children in the\n                # gridspec only.\n                for child in figlb.children:\n                    if child is not self._suptitle._layoutbox:\n                        layoutbox.vstack([self._suptitle._layoutbox,\n                                          child],\n                                         padding=h_pad*2., strength='required')\n        self.stale = True\n        return self._suptitle",
                "def set_canvas(self, canvas):\n    \"\"\"\n    Set the canvas that contains the figure\n\n    Parameters\n    ----------\n    canvas : FigureCanvas\n    \"\"\"\n    self.canvas = canvas",
                "def figimage(self, X, xo=0, yo=0, alpha=None, norm=None, cmap=None,\n             vmin=None, vmax=None, origin=None, resize=False, **kwargs):\n    \"\"\"\n    Add a non-resampled image to the figure.\n\n    The image is attached to the lower or upper left corner depending on\n    *origin*.\n\n    Parameters\n    ----------\n    X\n        The image data. This is an array of one of the following shapes:\n\n        - MxN: luminance (grayscale) values\n        - MxNx3: RGB values\n        - MxNx4: RGBA values\n\n    xo, yo : int\n        The *x*/*y* image offset in pixels.\n\n    alpha : None or float\n        The alpha blending value.\n\n    norm : `matplotlib.colors.Normalize`\n        A `.Normalize` instance to map the luminance to the\n        interval [0, 1].\n\n    cmap : str or `matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n        The colormap to use.\n\n    vmin, vmax : float\n        If *norm* is not given, these values set the data limits for the\n        colormap.\n\n    origin : {'upper', 'lower'}, default: :rc:`image.origin`\n        Indicates where the [0, 0] index of the array is in the upper left\n        or lower left corner of the axes.\n\n    resize : bool\n        If *True*, resize the figure to match the given image size.\n\n    Returns\n    -------\n    `matplotlib.image.FigureImage`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Additional kwargs are `.Artist` kwargs passed on to `.FigureImage`.\n\n    Notes\n    -----\n    figimage complements the axes image (`~matplotlib.axes.Axes.imshow`)\n    which will be resampled to fit the current axes.  If you want\n    a resampled image to fill the entire figure, you can define an\n    `~matplotlib.axes.Axes` with extent [0, 0, 1, 1].\n\n    Examples\n    --------\n    ::\n\n        f = plt.figure()\n        nx = int(f.get_figwidth() * f.dpi)\n        ny = int(f.get_figheight() * f.dpi)\n        data = np.random.random((ny, nx))\n        f.figimage(data)\n        plt.show()\n    \"\"\"\n    if resize:\n        dpi = self.get_dpi()\n        figsize = [x / dpi for x in (X.shape[1], X.shape[0])]\n        self.set_size_inches(figsize, forward=True)\n\n    im = mimage.FigureImage(self, cmap, norm, xo, yo, origin, **kwargs)\n    im.stale_callback = _stale_figure_callback\n\n    im.set_array(X)\n    im.set_alpha(alpha)\n    if norm is None:\n        im.set_clim(vmin, vmax)\n    self.images.append(im)\n    im._remove_method = self.images.remove\n    self.stale = True\n    return im",
                "def set_size_inches(self, w, h=None, forward=True):\n    \"\"\"\n    Set the figure size in inches.\n\n    Call signatures::\n\n         fig.set_size_inches(w, h)  # OR\n         fig.set_size_inches((w, h))\n\n    Parameters\n    ----------\n    w : (float, float) or float\n        Width and height in inches (if height not specified as a separate\n        argument) or width.\n    h : float\n        Height in inches.\n    forward : bool, default: True\n        If ``True``, the canvas size is automatically updated, e.g.,\n        you can resize the figure window from the shell.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.get_size_inches\n    matplotlib.figure.Figure.set_figwidth\n    matplotlib.figure.Figure.set_figheight\n\n    Notes\n    -----\n    To transform from pixels to inches divide by `Figure.dpi`.\n    \"\"\"\n    if h is None:  # Got called with a single pair as argument.\n        w, h = w\n    size = np.array([w, h])\n    if not np.isfinite(size).all() or (size <= 0).any():\n        raise ValueError(f'figure size must be positive finite not {size}')\n    self.bbox_inches.p1 = size\n    if forward:\n        canvas = getattr(self, 'canvas')\n        if canvas is not None:\n            dpi_ratio = getattr(canvas, '_dpi_ratio', 1)\n            manager = getattr(canvas, 'manager', None)\n            if manager is not None:\n                manager.resize(*(size * self.dpi / dpi_ratio).astype(int))\n    self.stale = True",
                "def get_size_inches(self):\n    \"\"\"\n    Return the current size of the figure in inches.\n\n    Returns\n    -------\n    ndarray\n       The size (width, height) of the figure in inches.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.set_size_inches\n    matplotlib.figure.Figure.get_figwidth\n    matplotlib.figure.Figure.get_figheight\n\n    Notes\n    -----\n    The size in pixels can be obtained by multiplying with `Figure.dpi`.\n    \"\"\"\n    return np.array(self.bbox_inches.p1)",
                "def get_edgecolor(self):\n    \"\"\"Get the edge color of the Figure rectangle.\"\"\"\n    return self.patch.get_edgecolor()",
                "def get_facecolor(self):\n    \"\"\"Get the face color of the Figure rectangle.\"\"\"\n    return self.patch.get_facecolor()",
                "def get_figwidth(self):\n    \"\"\"Return the figure width in inches.\"\"\"\n    return self.bbox_inches.width",
                "def get_figheight(self):\n    \"\"\"Return the figure height in inches.\"\"\"\n    return self.bbox_inches.height",
                "def get_dpi(self):\n    \"\"\"Return the resolution in dots per inch as a float.\"\"\"\n    return self.dpi",
                "def get_frameon(self):\n    \"\"\"\n    Return the figure's background patch visibility, i.e.\n    whether the figure background will be drawn. Equivalent to\n    ``Figure.patch.get_visible()``.\n    \"\"\"\n    return self.patch.get_visible()",
                "def set_edgecolor(self, color):\n    \"\"\"\n    Set the edge color of the Figure rectangle.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self.patch.set_edgecolor(color)",
                "def set_facecolor(self, color):\n    \"\"\"\n    Set the face color of the Figure rectangle.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self.patch.set_facecolor(color)",
                "def set_dpi(self, val):\n    \"\"\"\n    Set the resolution of the figure in dots-per-inch.\n\n    Parameters\n    ----------\n    val : float\n    \"\"\"\n    self.dpi = val\n    self.stale = True",
                "def set_figwidth(self, val, forward=True):\n    \"\"\"\n    Set the width of the figure in inches.\n\n    Parameters\n    ----------\n    val : float\n    forward : bool\n        See `set_size_inches`.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.set_figheight\n    matplotlib.figure.Figure.set_size_inches\n    \"\"\"\n    self.set_size_inches(val, self.get_figheight(), forward=forward)",
                "def set_figheight(self, val, forward=True):\n    \"\"\"\n    Set the height of the figure in inches.\n\n    Parameters\n    ----------\n    val : float\n    forward : bool\n        See `set_size_inches`.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.set_figwidth\n    matplotlib.figure.Figure.set_size_inches\n    \"\"\"\n    self.set_size_inches(self.get_figwidth(), val, forward=forward)",
                "def set_frameon(self, b):\n    \"\"\"\n    Set the figure's background patch visibility, i.e.\n    whether the figure background will be drawn. Equivalent to\n    ``Figure.patch.set_visible()``.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self.patch.set_visible(b)\n    self.stale = True",
                "def add_artist(self, artist, clip=False):\n    \"\"\"\n    Add an `.Artist` to the figure.\n\n    Usually artists are added to axes objects using `.Axes.add_artist`;\n    this method can be used in the rare cases where one needs to add\n    artists directly to the figure instead.\n\n    Parameters\n    ----------\n    artist : `~matplotlib.artist.Artist`\n        The artist to add to the figure. If the added artist has no\n        transform previously set, its transform will be set to\n        ``figure.transFigure``.\n    clip : bool, default: False\n        Whether the added artist should be clipped by the figure patch.\n\n    Returns\n    -------\n    `~matplotlib.artist.Artist`\n        The added artist.\n    \"\"\"\n    artist.set_figure(self)\n    self.artists.append(artist)\n    artist._remove_method = self.artists.remove\n\n    if not artist.is_transform_set():\n        artist.set_transform(self.transFigure)\n\n    if clip:\n        artist.set_clip_path(self.patch)\n\n    self.stale = True\n    return artist",
                "def _make_key(self, *args, **kwargs):\n    \"\"\"Make a hashable key out of args and kwargs.\"\"\"\n\n    def fixitems(items):\n        # items may have arrays and lists in them, so convert them\n        # to tuples for the key\n        ret = []\n        for k, v in items:\n            # some objects can define __getitem__ without being\n            # iterable and in those cases the conversion to tuples\n            # will fail. So instead of using the np.iterable(v) function\n            # we simply try and convert to a tuple, and proceed if not.\n            try:\n                v = tuple(v)\n            except Exception:\n                pass\n            ret.append((k, v))\n        return tuple(ret)\n\n    def fixlist(args):\n        ret = []\n        for a in args:\n            if np.iterable(a):\n                a = tuple(a)\n            ret.append(a)\n        return tuple(ret)\n\n    key = fixlist(args), fixitems(kwargs.items())\n    return key",
                "def _process_projection_requirements(\n        self, *args, polar=False, projection=None, **kwargs):\n    \"\"\"\n    Handle the args/kwargs to add_axes/add_subplot/gca, returning::\n\n        (axes_proj_class, proj_class_kwargs, proj_stack_key)\n\n    which can be used for new axes initialization/identification.\n    \"\"\"\n    if polar:\n        if projection is not None and projection != 'polar':\n            raise ValueError(\n                \"polar=True, yet projection=%r. \"\n                \"Only one of these arguments should be supplied.\" %\n                projection)\n        projection = 'polar'\n\n    if isinstance(projection, str) or projection is None:\n        projection_class = projections.get_projection_class(projection)\n    elif hasattr(projection, '_as_mpl_axes'):\n        projection_class, extra_kwargs = projection._as_mpl_axes()\n        kwargs.update(**extra_kwargs)\n    else:\n        raise TypeError('projection must be a string, None or implement a '\n                        '_as_mpl_axes method. Got %r' % projection)\n\n    # Make the key without projection kwargs, this is used as a unique\n    # lookup for axes instances\n    key = self._make_key(*args, **kwargs)\n\n    return projection_class, kwargs, key",
                "    @docstring.dedent_interpd\n    def add_axes(self, *args, **kwargs):\n        \"\"\"\n        Add an axes to the figure.\n\n        Call signatures::\n\n            add_axes(rect, projection=None, polar=False, **kwargs)\n            add_axes(ax)\n\n        Parameters\n        ----------\n        rect : sequence of float\n            The dimensions [left, bottom, width, height] of the new axes. All\n            quantities are in fractions of figure width and height.\n\n        projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', \\\n'polar', 'rectilinear', str}, optional\n            The projection type of the `~.axes.Axes`. *str* is the name of\n            a custom projection, see `~matplotlib.projections`. The default\n            None results in a 'rectilinear' projection.\n\n        polar : bool, default: False\n            If True, equivalent to projection='polar'.\n\n        sharex, sharey : `~.axes.Axes`, optional\n            Share the x or y `~matplotlib.axis` with sharex and/or sharey.\n            The axis will have the same limits, ticks, and scale as the axis\n            of the shared axes.\n\n        label : str\n            A label for the returned axes.\n\n        Returns\n        -------\n        `~.axes.Axes`, or a subclass of `~.axes.Axes`\n            The returned axes class depends on the projection used. It is\n            `~.axes.Axes` if rectilinear projection is used and\n            `.projections.polar.PolarAxes` if polar projection is used.\n\n        Other Parameters\n        ----------------\n        **kwargs\n            This method also takes the keyword arguments for\n            the returned axes class. The keyword arguments for the\n            rectilinear axes class `~.axes.Axes` can be found in\n            the following table but there might also be other keyword\n            arguments if another projection is used, see the actual axes\n            class.\n\n            %(Axes)s\n\n        Notes\n        -----\n        If the figure already has an axes with key (*args*,\n        *kwargs*) then it will simply make that axes current and\n        return it.  This behavior is deprecated. Meanwhile, if you do\n        not want this behavior (i.e., you want to force the creation of a\n        new axes), you must use a unique set of args and kwargs.  The axes\n        *label* attribute has been exposed for this purpose: if you want\n        two axes that are otherwise identical to be added to the figure,\n        make sure you give them unique labels.\n\n        In rare circumstances, `.add_axes` may be called with a single\n        argument, a axes instance already created in the present figure but\n        not in the figure's list of axes.\n\n        See Also\n        --------\n        .Figure.add_subplot\n        .pyplot.subplot\n        .pyplot.axes\n        .Figure.subplots\n        .pyplot.subplots\n\n        Examples\n        --------\n        Some simple examples::\n\n            rect = l, b, w, h\n            fig = plt.figure()\n            fig.add_axes(rect, label=label1)\n            fig.add_axes(rect, label=label2)\n            fig.add_axes(rect, frameon=False, facecolor='g')\n            fig.add_axes(rect, polar=True)\n            ax = fig.add_axes(rect, projection='polar')\n            fig.delaxes(ax)\n            fig.add_axes(ax)\n        \"\"\"\n\n        if not len(args) and 'rect' not in kwargs:\n            cbook.warn_deprecated(\n                \"3.3\",\n                message=\"Calling add_axes() without argument is \"\n                \"deprecated since %(since)s and will be removed %(removal)s. \"\n                \"You may want to use add_subplot() instead.\")\n            return\n        elif 'rect' in kwargs:\n            if len(args):\n                raise TypeError(\n                    \"add_axes() got multiple values for argument 'rect'\")\n            args = (kwargs.pop('rect'), )\n\n        # shortcut the projection \"key\" modifications later on, if an axes\n        # with the exact args/kwargs exists, return it immediately.\n        key = self._make_key(*args, **kwargs)\n        ax = self._axstack.get(key)\n        if ax is not None:\n            self.sca(ax)\n            return ax\n\n        if isinstance(args[0], Axes):\n            a = args[0]\n            if a.get_figure() is not self:\n                raise ValueError(\n                    \"The Axes must have been created in the present figure\")\n        else:\n            rect = args[0]\n            if not np.isfinite(rect).all():\n                raise ValueError('all entries in rect must be finite '\n                                 'not {}'.format(rect))\n            projection_class, kwargs, key = \\\n                self._process_projection_requirements(*args, **kwargs)\n\n            # check that an axes of this type doesn't already exist, if it\n            # does, set it as active and return it\n            ax = self._axstack.get(key)\n            if isinstance(ax, projection_class):\n                self.sca(ax)\n                return ax\n\n            # create the new axes using the axes class given\n            a = projection_class(self, rect, **kwargs)\n\n        return self._add_axes_internal(key, a)",
                "    @docstring.dedent_interpd\n    def add_subplot(self, *args, **kwargs):\n        \"\"\"\n        Add an `~.axes.Axes` to the figure as part of a subplot arrangement.\n\n        Call signatures::\n\n           add_subplot(nrows, ncols, index, **kwargs)\n           add_subplot(pos, **kwargs)\n           add_subplot(ax)\n           add_subplot()\n\n        Parameters\n        ----------\n        *args : int, (int, int, *index*), or `.SubplotSpec`, default: (1, 1, 1)\n            The position of the subplot described by one of\n\n            - Three integers (*nrows*, *ncols*, *index*). The subplot will\n              take the *index* position on a grid with *nrows* rows and\n              *ncols* columns. *index* starts at 1 in the upper left corner\n              and increases to the right.  *index* can also be a two-tuple\n              specifying the (*first*, *last*) indices (1-based, and including\n              *last*) of the subplot, e.g., ``fig.add_subplot(3, 1, (1, 2))``\n              makes a subplot that spans the upper 2/3 of the figure.\n            - A 3-digit integer. The digits are interpreted as if given\n              separately as three single-digit integers, i.e.\n              ``fig.add_subplot(235)`` is the same as\n              ``fig.add_subplot(2, 3, 5)``. Note that this can only be used\n              if there are no more than 9 subplots.\n            - A `.SubplotSpec`.\n\n            In rare circumstances, `.add_subplot` may be called with a single\n            argument, a subplot axes instance already created in the\n            present figure but not in the figure's list of axes.\n\n        projection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', \\\n'polar', 'rectilinear', str}, optional\n            The projection type of the subplot (`~.axes.Axes`). *str* is the\n            name of a custom projection, see `~matplotlib.projections`. The\n            default None results in a 'rectilinear' projection.\n\n        polar : bool, default: False\n            If True, equivalent to projection='polar'.\n\n        sharex, sharey : `~.axes.Axes`, optional\n            Share the x or y `~matplotlib.axis` with sharex and/or sharey.\n            The axis will have the same limits, ticks, and scale as the axis\n            of the shared axes.\n\n        label : str\n            A label for the returned axes.\n\n        Returns\n        -------\n        `.axes.SubplotBase`, or another subclass of `~.axes.Axes`\n\n            The axes of the subplot. The returned axes base class depends on\n            the projection used. It is `~.axes.Axes` if rectilinear projection\n            is used and `.projections.polar.PolarAxes` if polar projection\n            is used. The returned axes is then a subplot subclass of the\n            base class.\n\n        Other Parameters\n        ----------------\n        **kwargs\n            This method also takes the keyword arguments for the returned axes\n            base class; except for the *figure* argument. The keyword arguments\n            for the rectilinear base class `~.axes.Axes` can be found in\n            the following table but there might also be other keyword\n            arguments if another projection is used.\n\n            %(Axes)s\n\n        Notes\n        -----\n        If the figure already has a subplot with key (*args*,\n        *kwargs*) then it will simply make that subplot current and\n        return it.  This behavior is deprecated. Meanwhile, if you do\n        not want this behavior (i.e., you want to force the creation of a\n        new subplot), you must use a unique set of args and kwargs.  The axes\n        *label* attribute has been exposed for this purpose: if you want\n        two subplots that are otherwise identical to be added to the figure,\n        make sure you give them unique labels.\n\n        See Also\n        --------\n        .Figure.add_axes\n        .pyplot.subplot\n        .pyplot.axes\n        .Figure.subplots\n        .pyplot.subplots\n\n        Examples\n        --------\n        ::\n\n            fig = plt.figure()\n\n            fig.add_subplot(231)\n            ax1 = fig.add_subplot(2, 3, 1)  # equivalent but more general\n\n            fig.add_subplot(232, frameon=False)  # subplot with no frame\n            fig.add_subplot(233, projection='polar')  # polar subplot\n            fig.add_subplot(234, sharex=ax1)  # subplot sharing x-axis with ax1\n            fig.add_subplot(235, facecolor=\"red\")  # red subplot\n\n            ax1.remove()  # delete ax1 from the figure\n            fig.add_subplot(ax1)  # add ax1 back to the figure\n        \"\"\"\n        if 'figure' in kwargs:\n            # Axes itself allows for a 'figure' kwarg, but since we want to\n            # bind the created Axes to self, it is not allowed here.\n            raise TypeError(\n                \"add_subplot() got an unexpected keyword argument 'figure'\")\n\n        if len(args) == 1 and isinstance(args[0], SubplotBase):\n            ax = args[0]\n            if ax.get_figure() is not self:\n                raise ValueError(\"The Subplot must have been created in \"\n                                 \"the present figure\")\n            # make a key for the subplot (which includes the axes object id\n            # in the hash)\n            key = self._make_key(*args, **kwargs)\n\n        else:\n            if not args:\n                args = (1, 1, 1)\n            # Normalize correct ijk values to (i, j, k) here so that\n            # add_subplot(111) == add_subplot(1, 1, 1).  Invalid values will\n            # trigger errors later (via SubplotSpec._from_subplot_args).\n            if (len(args) == 1 and isinstance(args[0], Integral)\n                    and 100 <= args[0] <= 999):\n                args = tuple(map(int, str(args[0])))\n            projection_class, kwargs, key = \\\n                self._process_projection_requirements(*args, **kwargs)\n            ax = self._axstack.get(key)  # search axes with this key in stack\n            if ax is not None:\n                if isinstance(ax, projection_class):\n                    # the axes already existed, so set it as active & return\n                    self.sca(ax)\n                    return ax\n                else:\n                    # Undocumented convenience behavior:\n                    # subplot(111); subplot(111, projection='polar')\n                    # will replace the first with the second.\n                    # Without this, add_subplot would be simpler and\n                    # more similar to add_axes.\n                    self._axstack.remove(ax)\n            ax = subplot_class_factory(projection_class)(self, *args, **kwargs)\n\n        return self._add_axes_internal(key, ax)",
                "def _add_axes_internal(self, key, ax):\n    \"\"\"Private helper for `add_axes` and `add_subplot`.\"\"\"\n    self._axstack.add(key, ax)\n    self.sca(ax)\n    ax._remove_method = self.delaxes\n    self.stale = True\n    ax.stale_callback = _stale_figure_callback\n    return ax",
                "@cbook._make_keyword_only(\"3.3\", \"sharex\")\ndef subplots(self, nrows=1, ncols=1, sharex=False, sharey=False,\n             squeeze=True, subplot_kw=None, gridspec_kw=None):\n    \"\"\"\n    Add a set of subplots to this figure.\n\n    This utility wrapper makes it convenient to create common layouts of\n    subplots in a single call.\n\n    Parameters\n    ----------\n    nrows, ncols : int, default: 1\n        Number of rows/columns of the subplot grid.\n\n    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n        Controls sharing of properties among x (*sharex*) or y (*sharey*)\n        axes:\n\n        - True or 'all': x- or y-axis will be shared among all subplots.\n        - False or 'none': each subplot x- or y-axis will be independent.\n        - 'row': each subplot row will share an x- or y-axis.\n        - 'col': each subplot column will share an x- or y-axis.\n\n        When subplots have a shared x-axis along a column, only the x tick\n        labels of the bottom subplot are created. Similarly, when subplots\n        have a shared y-axis along a row, only the y tick labels of the\n        first column subplot are created. To later turn other subplots'\n        ticklabels on, use `~matplotlib.axes.Axes.tick_params`.\n\n    squeeze : bool, default: True\n        - If True, extra dimensions are squeezed out from the returned\n          array of Axes:\n\n          - if only one subplot is constructed (nrows=ncols=1), the\n            resulting single Axes object is returned as a scalar.\n          - for Nx1 or 1xM subplots, the returned object is a 1D numpy\n            object array of Axes objects.\n          - for NxM, subplots with N>1 and M>1 are returned as a 2D array.\n\n        - If False, no squeezing at all is done: the returned Axes object\n          is always a 2D array containing Axes instances, even if it ends\n          up being 1x1.\n\n    subplot_kw : dict, optional\n        Dict with keywords passed to the `.Figure.add_subplot` call used to\n        create each subplot.\n\n    gridspec_kw : dict, optional\n        Dict with keywords passed to the\n        `~matplotlib.gridspec.GridSpec` constructor used to create\n        the grid the subplots are placed on.\n\n    Returns\n    -------\n    `~.axes.Axes` or array of Axes\n        Either a single `~matplotlib.axes.Axes` object or an array of Axes\n        objects if more than one subplot was created. The dimensions of the\n        resulting array can be controlled with the *squeeze* keyword, see\n        above.\n\n    See Also\n    --------\n    .pyplot.subplots\n    .Figure.add_subplot\n    .pyplot.subplot\n\n    Examples\n    --------\n    ::\n\n        # First create some toy data:\n        x = np.linspace(0, 2*np.pi, 400)\n        y = np.sin(x**2)\n\n        # Create a figure\n        plt.figure()\n\n        # Create a subplot\n        ax = fig.subplots()\n        ax.plot(x, y)\n        ax.set_title('Simple plot')\n\n        # Create two subplots and unpack the output array immediately\n        ax1, ax2 = fig.subplots(1, 2, sharey=True)\n        ax1.plot(x, y)\n        ax1.set_title('Sharing Y axis')\n        ax2.scatter(x, y)\n\n        # Create four polar axes and access them through the returned array\n        axes = fig.subplots(2, 2, subplot_kw=dict(polar=True))\n        axes[0, 0].plot(x, y)\n        axes[1, 1].scatter(x, y)\n\n        # Share a X axis with each column of subplots\n        fig.subplots(2, 2, sharex='col')\n\n        # Share a Y axis with each row of subplots\n        fig.subplots(2, 2, sharey='row')\n\n        # Share both X and Y axes with all subplots\n        fig.subplots(2, 2, sharex='all', sharey='all')\n\n        # Note that this is the same as\n        fig.subplots(2, 2, sharex=True, sharey=True)\n    \"\"\"\n    if gridspec_kw is None:\n        gridspec_kw = {}\n    return (self.add_gridspec(nrows, ncols, figure=self, **gridspec_kw)\n            .subplots(sharex=sharex, sharey=sharey, squeeze=squeeze,\n                      subplot_kw=subplot_kw))",
                "def delaxes(self, ax):\n    \"\"\"\n    Remove the `~.axes.Axes` *ax* from the figure; update the current axes.\n    \"\"\"\n\n    def _reset_locators_and_formatters(axis):\n        # Set the formatters and locators to be associated with axis\n        # (where previously they may have been associated with another\n        # Axis instance)\n        #\n        # Because set_major_formatter() etc. force isDefault_* to be False,\n        # we have to manually check if the original formatter was a\n        # default and manually set isDefault_* if that was the case.\n        majfmt = axis.get_major_formatter()\n        isDefault = majfmt.axis.isDefault_majfmt\n        axis.set_major_formatter(majfmt)\n        if isDefault:\n            majfmt.axis.isDefault_majfmt = True\n\n        majloc = axis.get_major_locator()\n        isDefault = majloc.axis.isDefault_majloc\n        axis.set_major_locator(majloc)\n        if isDefault:\n            majloc.axis.isDefault_majloc = True\n\n        minfmt = axis.get_minor_formatter()\n        isDefault = majloc.axis.isDefault_minfmt\n        axis.set_minor_formatter(minfmt)\n        if isDefault:\n            minfmt.axis.isDefault_minfmt = True\n\n        minloc = axis.get_minor_locator()\n        isDefault = majloc.axis.isDefault_minloc\n        axis.set_minor_locator(minloc)\n        if isDefault:\n            minloc.axis.isDefault_minloc = True\n\n    def _break_share_link(ax, grouper):\n        siblings = grouper.get_siblings(ax)\n        if len(siblings) > 1:\n            grouper.remove(ax)\n            for last_ax in siblings:\n                if ax is not last_ax:\n                    return last_ax\n        return None\n\n    self._axstack.remove(ax)\n    self._axobservers.process(\"_axes_change_event\", self)\n    self.stale = True\n\n    last_ax = _break_share_link(ax, ax._shared_y_axes)\n    if last_ax is not None:\n        _reset_locators_and_formatters(last_ax.yaxis)\n\n    last_ax = _break_share_link(ax, ax._shared_x_axes)\n    if last_ax is not None:\n        _reset_locators_and_formatters(last_ax.xaxis)",
                "def clf(self, keep_observers=False):\n    \"\"\"\n    Clear the figure.\n\n    Set *keep_observers* to True if, for example,\n    a gui widget is tracking the axes in the figure.\n    \"\"\"\n    self.suppressComposite = None\n    self.callbacks = cbook.CallbackRegistry()\n\n    for ax in tuple(self.axes):  # Iterate over the copy.\n        ax.cla()\n        self.delaxes(ax)         # removes ax from self._axstack\n\n    toolbar = getattr(self.canvas, 'toolbar', None)\n    if toolbar is not None:\n        toolbar.update()\n    self._axstack.clear()\n    self.artists = []\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.images = []\n    self.legends = []\n    if not keep_observers:\n        self._axobservers = cbook.CallbackRegistry()\n    self._suptitle = None\n    if self.get_constrained_layout():\n        layoutbox.nonetree(self._layoutbox)\n    self.stale = True",
                "def clear(self, keep_observers=False):\n    \"\"\"Clear the figure -- synonym for `clf`.\"\"\"\n    self.clf(keep_observers=keep_observers)",
                "@allow_rasterization\ndef draw(self, renderer):\n    # docstring inherited\n    self._cachedRenderer = renderer\n\n    # draw the figure bounding box, perhaps none for white figure\n    if not self.get_visible():\n        return\n\n    artists = self.get_children()\n    artists.remove(self.patch)\n    artists = sorted(\n        (artist for artist in artists if not artist.get_animated()),\n        key=lambda artist: artist.get_zorder())\n\n    for ax in self.axes:\n        locator = ax.get_axes_locator()\n        if locator:\n            pos = locator(ax, renderer)\n            ax.apply_aspect(pos)\n        else:\n            ax.apply_aspect()\n\n        for child in ax.get_children():\n            if hasattr(child, 'apply_aspect'):\n                locator = child.get_axes_locator()\n                if locator:\n                    pos = locator(child, renderer)\n                    child.apply_aspect(pos)\n                else:\n                    child.apply_aspect()\n\n    try:\n        renderer.open_group('figure', gid=self.get_gid())\n        if self.get_constrained_layout() and self.axes:\n            self.execute_constrained_layout(renderer)\n        if self.get_tight_layout() and self.axes:\n            try:\n                self.tight_layout(**self._tight_parameters)\n            except ValueError:\n                pass\n                # ValueError can occur when resizing a window.\n\n        self.patch.draw(renderer)\n        mimage._draw_list_compositing_images(\n            renderer, self, artists, self.suppressComposite)\n\n        renderer.close_group('figure')\n    finally:\n        self.stale = False\n\n    self.canvas.draw_event(renderer)",
                "def draw_artist(self, a):\n    \"\"\"\n    Draw `.Artist` instance *a* only.\n\n    This can only be called after the figure has been drawn.\n    \"\"\"\n    if self._cachedRenderer is None:\n        raise AttributeError(\"draw_artist can only be used after an \"\n                             \"initial draw which caches the renderer\")\n    a.draw(self._cachedRenderer)",
                "@docstring.dedent_interpd\ndef legend(self, *args, **kwargs):\n    \"\"\"\n    Place a legend on the figure.\n\n    To make a legend from existing artists on every axes::\n\n      legend()\n\n    To make a legend for a list of lines and labels::\n\n      legend(\n          (line1, line2, line3),\n          ('label1', 'label2', 'label3'),\n          loc='upper right')\n\n    These can also be specified by keyword::\n\n      legend(\n          handles=(line1, line2, line3),\n          labels=('label1', 'label2', 'label3'),\n          loc='upper right')\n\n    Parameters\n    ----------\n    handles : list of `.Artist`, optional\n        A list of Artists (lines, patches) to be added to the legend.\n        Use this together with *labels*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n        The length of handles and labels should be the same in this\n        case. If they are not, they are truncated to the smaller length.\n\n    labels : list of str, optional\n        A list of labels to show next to the artists.\n        Use this together with *handles*, if you need full control on what\n        is shown in the legend and the automatic mechanism described above\n        is not sufficient.\n\n    Returns\n    -------\n    `~matplotlib.legend.Legend`\n\n    Other Parameters\n    ----------------\n    %(_legend_kw_doc)s\n\n    Notes\n    -----\n    Some artists are not supported by this function.  See\n    :doc:`/tutorials/intermediate/legend_guide` for details.\n    \"\"\"\n\n    handles, labels, extra_args, kwargs = mlegend._parse_legend_args(\n            self.axes,\n            *args,\n            **kwargs)\n    # check for third arg\n    if len(extra_args):\n        # cbook.warn_deprecated(\n        #     \"2.1\",\n        #     message=\"Figure.legend will accept no more than two \"\n        #     \"positional arguments in the future.  Use \"\n        #     \"'fig.legend(handles, labels, loc=location)' \"\n        #     \"instead.\")\n        # kwargs['loc'] = extra_args[0]\n        # extra_args = extra_args[1:]\n        pass\n    transform = kwargs.pop('bbox_transform', self.transFigure)\n    # explicitly set the bbox transform if the user hasn't.\n    l = mlegend.Legend(self, handles, labels, *extra_args,\n                       bbox_transform=transform, **kwargs)\n    self.legends.append(l)\n    l._remove_method = self.legends.remove\n    self.stale = True\n    return l",
                "@docstring.dedent_interpd\ndef text(self, x, y, s, fontdict=None, **kwargs):\n    \"\"\"\n    Add text to figure.\n\n    Parameters\n    ----------\n    x, y : float\n        The position to place the text. By default, this is in figure\n        coordinates, floats in [0, 1]. The coordinate system can be changed\n        using the *transform* keyword.\n\n    s : str\n        The text string.\n\n    fontdict : dict, optional\n        A dictionary to override the default text properties. If not given,\n        the defaults are determined by :rc:`font.*`. Properties passed as\n        *kwargs* override the corresponding ones given in *fontdict*.\n\n    Returns\n    -------\n    `~.text.Text`\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.text.Text` properties\n        Other miscellaneous text parameters.\n\n        %(Text)s\n\n    See Also\n    --------\n    .Axes.text\n    .pyplot.text\n    \"\"\"\n    effective_kwargs = {\n        'transform': self.transFigure,\n        **(fontdict if fontdict is not None else {}),\n        **kwargs,\n    }\n    text = Text(x=x, y=y, text=s, **effective_kwargs)\n    text.set_figure(self)\n    text.stale_callback = _stale_figure_callback\n\n    self.texts.append(text)\n    text._remove_method = self.texts.remove\n    self.stale = True\n    return text",
                "def _set_artist_props(self, a):\n    if a != self:\n        a.set_figure(self)\n    a.stale_callback = _stale_figure_callback\n    a.set_transform(self.transFigure)",
                "@docstring.dedent_interpd\ndef gca(self, **kwargs):\n    \"\"\"\n    Get the current axes, creating one if necessary.\n\n    The following kwargs are supported for ensuring the returned axes\n    adheres to the given projection etc., and for axes creation if\n    the active axes does not exist:\n\n    %(Axes)s\n\n    \"\"\"\n    ckey, cax = self._axstack.current_key_axes()\n    # if there exists an axes on the stack see if it matches\n    # the desired axes configuration\n    if cax is not None:\n\n        # if no kwargs are given just return the current axes\n        # this is a convenience for gca() on axes such as polar etc.\n        if not kwargs:\n            return cax\n\n        # if the user has specified particular projection detail\n        # then build up a key which can represent this\n        else:\n            projection_class, _, key = \\\n                self._process_projection_requirements(**kwargs)\n\n            # let the returned axes have any gridspec by removing it from\n            # the key\n            ckey = ckey[1:]\n            key = key[1:]\n\n            # if the cax matches this key then return the axes, otherwise\n            # continue and a new axes will be created\n            if key == ckey and isinstance(cax, projection_class):\n                return cax\n            else:\n                cbook._warn_external('Requested projection is different '\n                                     'from current axis projection, '\n                                     'creating new axis with requested '\n                                     'projection.')\n\n    # no axes found, so create one which spans the figure\n    return self.add_subplot(1, 1, 1, **kwargs)",
                "def sca(self, a):\n    \"\"\"Set the current axes to be *a* and return *a*.\"\"\"\n    self._axstack.bubble(a)\n    self._axobservers.process(\"_axes_change_event\", self)\n    return a",
                "def _gci(self):\n    # Helper for `~matplotlib.pyplot.gci`.  Do not use elsewhere.\n    \"\"\"\n    Get the current colorable artist.\n\n    Specifically, returns the current `.ScalarMappable` instance (`.Image`\n    created by `imshow` or `figimage`, `.Collection` created by `pcolor` or\n    `scatter`, etc.), or *None* if no such instance has been defined.\n\n    The current image is an attribute of the current axes, or the nearest\n    earlier axes in the current figure that contains an image.\n\n    Notes\n    -----\n    Historically, the only colorable artists were images; hence the name\n    ``gci`` (get current image).\n    \"\"\"\n    # Look first for an image in the current Axes:\n    cax = self._axstack.current_key_axes()[1]\n    if cax is None:\n        return None\n    im = cax._gci()\n    if im is not None:\n        return im\n\n    # If there is no image in the current Axes, search for\n    # one in a previously created Axes.  Whether this makes\n    # sense is debatable, but it is the documented behavior.\n    for ax in reversed(self.axes):\n        im = ax._gci()\n        if im is not None:\n            return im\n    return None",
                "def __getstate__(self):\n    state = super().__getstate__()\n\n    # The canvas cannot currently be pickled, but this has the benefit\n    # of meaning that a figure can be detached from one canvas, and\n    # re-attached to another.\n    for attr_to_pop in ('canvas', '_cachedRenderer'):\n        state.pop(attr_to_pop, None)\n\n    # add version information to the state\n    state['__mpl_version__'] = _mpl_version\n\n    # check whether the figure manager (if any) is registered with pyplot\n    from matplotlib import _pylab_helpers\n    if getattr(self.canvas, 'manager', None) \\\n            in _pylab_helpers.Gcf.figs.values():\n        state['_restore_to_pylab'] = True\n\n    # set all the layoutbox information to None.  kiwisolver objects can't\n    # be pickled, so we lose the layout options at this point.\n    state.pop('_layoutbox', None)\n    # suptitle:\n    if self._suptitle is not None:\n        self._suptitle._layoutbox = None\n\n    return state",
                "def __setstate__(self, state):\n    version = state.pop('__mpl_version__')\n    restore_to_pylab = state.pop('_restore_to_pylab', False)\n\n    if version != _mpl_version:\n        cbook._warn_external(\n            f\"This figure was saved with matplotlib version {version} and \"\n            f\"is unlikely to function correctly.\")\n\n    self.__dict__ = state\n\n    # re-initialise some of the unstored state information\n    FigureCanvasBase(self)  # Set self.canvas.\n    self._layoutbox = None\n\n    if restore_to_pylab:\n        # lazy import to avoid circularity\n        import matplotlib.pyplot as plt\n        import matplotlib._pylab_helpers as pylab_helpers\n        allnums = plt.get_fignums()\n        num = max(allnums) + 1 if allnums else 1\n        mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\n        pylab_helpers.Gcf._set_new_active_manager(mgr)\n        plt.draw_if_interactive()\n\n    self.stale = True",
                "def add_axobserver(self, func):\n    \"\"\"Whenever the axes state change, ``func(self)`` will be called.\"\"\"\n    # Connect a wrapper lambda and not func itself, to avoid it being\n    # weakref-collected.\n    self._axobservers.connect(\"_axes_change_event\", lambda arg: func(arg))",
                "def savefig(self, fname, *, transparent=None, **kwargs):\n    \"\"\"\n    Save the current figure.\n\n    Call signature::\n\n      savefig(fname, dpi=None, facecolor='w', edgecolor='w',\n              orientation='portrait', papertype=None, format=None,\n              transparent=False, bbox_inches=None, pad_inches=0.1,\n              frameon=None, metadata=None)\n\n    The available output formats depend on the backend being used.\n\n    Parameters\n    ----------\n    fname : str or path-like or file-like\n        A path, or a Python file-like object, or\n        possibly some backend-dependent object such as\n        `matplotlib.backends.backend_pdf.PdfPages`.\n\n        If *format* is set, it determines the output format, and the file\n        is saved as *fname*.  Note that *fname* is used verbatim, and there\n        is no attempt to make the extension, if any, of *fname* match\n        *format*, and no extension is appended.\n\n        If *format* is not set, then the format is inferred from the\n        extension of *fname*, if there is one.  If *format* is not\n        set and *fname* has no extension, then the file is saved with\n        :rc:`savefig.format` and the appropriate extension is appended to\n        *fname*.\n\n    Other Parameters\n    ----------------\n    dpi : float or 'figure', default: :rc:`savefig.dpi`\n        The resolution in dots per inch.  If 'figure', use the figure's\n        dpi value.\n\n    quality : int, default: :rc:`savefig.jpeg_quality`\n        Applicable only if *format* is 'jpg' or 'jpeg', ignored otherwise.\n\n        The image quality, on a scale from 1 (worst) to 95 (best).\n        Values above 95 should be avoided; 100 disables portions of\n        the JPEG compression algorithm, and results in large files\n        with hardly any gain in image quality.\n\n        This parameter is deprecated.\n\n    optimize : bool, default: False\n        Applicable only if *format* is 'jpg' or 'jpeg', ignored otherwise.\n\n        Whether the encoder should make an extra pass over the image\n        in order to select optimal encoder settings.\n\n        This parameter is deprecated.\n\n    progressive : bool, default: False\n        Applicable only if *format* is 'jpg' or 'jpeg', ignored otherwise.\n\n        Whether the image should be stored as a progressive JPEG file.\n\n        This parameter is deprecated.\n\n    facecolor : color or 'auto', default: :rc:`savefig.facecolor`\n        The facecolor of the figure.  If 'auto', use the current figure\n        facecolor.\n\n    edgecolor : color or 'auto', default: :rc:`savefig.edgecolor`\n        The edgecolor of the figure.  If 'auto', use the current figure\n        edgecolor.\n\n    orientation : {'landscape', 'portrait'}\n        Currently only supported by the postscript backend.\n\n    papertype : str\n        One of 'letter', 'legal', 'executive', 'ledger', 'a0' through\n        'a10', 'b0' through 'b10'. Only supported for postscript\n        output.\n\n    format : str\n        The file format, e.g. 'png', 'pdf', 'svg', ... The behavior when\n        this is unset is documented under *fname*.\n\n    transparent : bool\n        If *True*, the axes patches will all be transparent; the\n        figure patch will also be transparent unless facecolor\n        and/or edgecolor are specified via kwargs.\n        This is useful, for example, for displaying\n        a plot on top of a colored background on a web page.  The\n        transparency of these patches will be restored to their\n        original values upon exit of this function.\n\n    bbox_inches : str or `.Bbox`, default: :rc:`savefig.bbox`\n        Bounding box in inches: only the given portion of the figure is\n        saved.  If 'tight', try to figure out the tight bbox of the figure.\n\n    pad_inches : float, default: :rc:`savefig.pad_inches`\n        Amount of padding around the figure when bbox_inches is 'tight'.\n\n    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n        A list of extra artists that will be considered when the\n        tight bbox is calculated.\n\n    backend : str, optional\n        Use a non-default backend to render the file, e.g. to render a\n        png file with the \"cairo\" backend rather than the default \"agg\",\n        or a pdf file with the \"pgf\" backend rather than the default\n        \"pdf\".  Note that the default backend is normally sufficient.  See\n        :ref:`the-builtin-backends` for a list of valid backends for each\n        file format.  Custom backends can be referenced as \"module://...\".\n\n    metadata : dict, optional\n        Key/value pairs to store in the image metadata. The supported keys\n        and defaults depend on the image format and backend:\n\n        - 'png' with Agg backend: See the parameter ``metadata`` of\n          `~.FigureCanvasAgg.print_png`.\n        - 'pdf' with pdf backend: See the parameter ``metadata`` of\n          `~.backend_pdf.PdfPages`.\n        - 'eps' and 'ps' with PS backend: Only 'Creator' is supported.\n\n    pil_kwargs : dict, optional\n        Additional keyword arguments that are passed to\n        `PIL.Image.Image.save` when saving the figure.\n    \"\"\"\n\n    kwargs.setdefault('dpi', mpl.rcParams['savefig.dpi'])\n    if transparent is None:\n        transparent = mpl.rcParams['savefig.transparent']\n\n    if transparent:\n        kwargs.setdefault('facecolor', 'none')\n        kwargs.setdefault('edgecolor', 'none')\n        original_axes_colors = []\n        for ax in self.axes:\n            patch = ax.patch\n            original_axes_colors.append((patch.get_facecolor(),\n                                         patch.get_edgecolor()))\n            patch.set_facecolor('none')\n            patch.set_edgecolor('none')\n\n    self.canvas.print_figure(fname, **kwargs)\n\n    if transparent:\n        for ax, cc in zip(self.axes, original_axes_colors):\n            ax.patch.set_facecolor(cc[0])\n            ax.patch.set_edgecolor(cc[1])",
                "@docstring.dedent_interpd\ndef colorbar(self, mappable, cax=None, ax=None, use_gridspec=True, **kw):\n    \"\"\"\n    Create a colorbar for a ScalarMappable instance, *mappable*.\n\n    Documentation for the pyplot thin wrapper:\n    %(colorbar_doc)s\n    \"\"\"\n    if ax is None:\n        ax = self.gca()\n\n    # Store the value of gca so that we can set it back later on.\n    current_ax = self.gca()\n\n    if cax is None:\n        if use_gridspec and isinstance(ax, SubplotBase)  \\\n                 and (not self.get_constrained_layout()):\n            cax, kw = cbar.make_axes_gridspec(ax, **kw)\n        else:\n            cax, kw = cbar.make_axes(ax, **kw)\n\n    # need to remove kws that cannot be passed to Colorbar\n    NON_COLORBAR_KEYS = ['fraction', 'pad', 'shrink', 'aspect', 'anchor',\n                         'panchor']\n    cb_kw = {k: v for k, v in kw.items() if k not in NON_COLORBAR_KEYS}\n    cb = cbar.colorbar_factory(cax, mappable, **cb_kw)\n\n    self.sca(current_ax)\n    self.stale = True\n    return cb",
                "def subplots_adjust(self, left=None, bottom=None, right=None, top=None,\n                    wspace=None, hspace=None):\n    \"\"\"\n    Adjust the subplot layout parameters.\n\n    Unset parameters are left unmodified; initial values are given by\n    :rc:`figure.subplot.[name]`.\n\n    Parameters\n    ----------\n    left : float, optional\n        The position of the left edge of the subplots,\n        as a fraction of the figure width.\n    right : float, optional\n        The position of the right edge of the subplots,\n        as a fraction of the figure width.\n    bottom : float, optional\n        The position of the bottom edge of the subplots,\n        as a fraction of the figure height.\n    top : float, optional\n        The position of the top edge of the subplots,\n        as a fraction of the figure height.\n    wspace : float, optional\n        The width of the padding between subplots,\n        as a fraction of the average axes width.\n    hspace : float, optional\n        The height of the padding between subplots,\n        as a fraction of the average axes height.\n    \"\"\"\n    if self.get_constrained_layout():\n        self.set_constrained_layout(False)\n        cbook._warn_external(\"This figure was using \"\n                             \"constrained_layout==True, but that is \"\n                             \"incompatible with subplots_adjust and or \"\n                             \"tight_layout: setting \"\n                             \"constrained_layout==False. \")\n    self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n    for ax in self.axes:\n        if not isinstance(ax, SubplotBase):\n            # Check if sharing a subplots axis\n            if isinstance(ax._sharex, SubplotBase):\n                ax._sharex.update_params()\n                ax.set_position(ax._sharex.figbox)\n            elif isinstance(ax._sharey, SubplotBase):\n                ax._sharey.update_params()\n                ax.set_position(ax._sharey.figbox)\n        else:\n            ax.update_params()\n            ax.set_position(ax.figbox)\n    self.stale = True",
                "def ginput(self, n=1, timeout=30, show_clicks=True,\n           mouse_add=MouseButton.LEFT,\n           mouse_pop=MouseButton.RIGHT,\n           mouse_stop=MouseButton.MIDDLE):\n    \"\"\"\n    Blocking call to interact with a figure.\n\n    Wait until the user clicks *n* times on the figure, and return the\n    coordinates of each click in a list.\n\n    There are three possible interactions:\n\n    - Add a point.\n    - Remove the most recently added point.\n    - Stop the interaction and return the points added so far.\n\n    The actions are assigned to mouse buttons via the arguments\n    *mouse_add*, *mouse_pop* and *mouse_stop*.\n\n    Parameters\n    ----------\n    n : int, default: 1\n        Number of mouse clicks to accumulate. If negative, accumulate\n        clicks until the input is terminated manually.\n    timeout : float, default: 30 seconds\n        Number of seconds to wait before timing out. If zero or negative\n        will never timeout.\n    show_clicks : bool, default: True\n        If True, show a red cross at the location of each click.\n    mouse_add : `.MouseButton` or None, default: `.MouseButton.LEFT`\n        Mouse button used to add points.\n    mouse_pop : `.MouseButton` or None, default: `.MouseButton.RIGHT`\n        Mouse button used to remove the most recently added point.\n    mouse_stop : `.MouseButton` or None, default: `.MouseButton.MIDDLE`\n        Mouse button used to stop input.\n\n    Returns\n    -------\n    list of tuples\n        A list of the clicked (x, y) coordinates.\n\n    Notes\n    -----\n    The keyboard can also be used to select points in case your mouse\n    does not have one or more of the buttons.  The delete and backspace\n    keys act like right clicking (i.e., remove last point), the enter key\n    terminates input and any other key (not already used by the window\n    manager) selects a point.\n    \"\"\"\n    blocking_mouse_input = BlockingMouseInput(self,\n                                              mouse_add=mouse_add,\n                                              mouse_pop=mouse_pop,\n                                              mouse_stop=mouse_stop)\n    return blocking_mouse_input(n=n, timeout=timeout,\n                                show_clicks=show_clicks)",
                "def waitforbuttonpress(self, timeout=-1):\n    \"\"\"\n    Blocking call to interact with the figure.\n\n    Wait for user input and return True if a key was pressed, False if a\n    mouse button was pressed and None if no input was given within\n    *timeout* seconds.  Negative values deactivate *timeout*.\n    \"\"\"\n    blocking_input = BlockingKeyMouseInput(self)\n    return blocking_input(timeout=timeout)",
                "def get_default_bbox_extra_artists(self):\n    bbox_artists = [artist for artist in self.get_children()\n                    if (artist.get_visible() and artist.get_in_layout())]\n    for ax in self.axes:\n        if ax.get_visible():\n            bbox_artists.extend(ax.get_default_bbox_extra_artists())\n    return bbox_artists",
                "def get_tightbbox(self, renderer, bbox_extra_artists=None):\n    \"\"\"\n    Return a (tight) bounding box of the figure in inches.\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` subclass\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of each axes are\n        included in the tight bounding box.\n\n    Returns\n    -------\n    `.BboxBase`\n        containing the bounding box (in figure inches).\n    \"\"\"\n\n    bb = []\n    if bbox_extra_artists is None:\n        artists = self.get_default_bbox_extra_artists()\n    else:\n        artists = bbox_extra_artists\n\n    for a in artists:\n        bbox = a.get_tightbbox(renderer)\n        if bbox is not None and (bbox.width != 0 or bbox.height != 0):\n            bb.append(bbox)\n\n    for ax in self.axes:\n        if ax.get_visible():\n            # some axes don't take the bbox_extra_artists kwarg so we\n            # need this conditional....\n            try:\n                bbox = ax.get_tightbbox(\n                    renderer, bbox_extra_artists=bbox_extra_artists)\n            except TypeError:\n                bbox = ax.get_tightbbox(renderer)\n            bb.append(bbox)\n    bb = [b for b in bb\n          if (np.isfinite(b.width) and np.isfinite(b.height)\n              and (b.width != 0 or b.height != 0))]\n\n    if len(bb) == 0:\n        return self.bbox_inches\n\n    _bbox = Bbox.union(bb)\n\n    bbox_inches = TransformedBbox(_bbox, Affine2D().scale(1 / self.dpi))\n\n    return bbox_inches",
                "def init_layoutbox(self):\n    \"\"\"Initialize the layoutbox for use in constrained_layout.\"\"\"\n    if self._layoutbox is None:\n        self._layoutbox = layoutbox.LayoutBox(\n            parent=None, name='figlb', artist=self)\n        self._layoutbox.constrain_geometry(0., 0., 1., 1.)",
                "def execute_constrained_layout(self, renderer=None):\n    \"\"\"\n    Use ``layoutbox`` to determine pos positions within axes.\n\n    See also `.set_constrained_layout_pads`.\n    \"\"\"\n\n    from matplotlib._constrained_layout import do_constrained_layout\n\n    _log.debug('Executing constrainedlayout')\n    if self._layoutbox is None:\n        cbook._warn_external(\"Calling figure.constrained_layout, but \"\n                             \"figure not setup to do constrained layout. \"\n                             \" You either called GridSpec without the \"\n                             \"fig keyword, you are using plt.subplot, \"\n                             \"or you need to call figure or subplots \"\n                             \"with the constrained_layout=True kwarg.\")\n        return\n    w_pad, h_pad, wspace, hspace = self.get_constrained_layout_pads()\n    # convert to unit-relative lengths\n    fig = self\n    width, height = fig.get_size_inches()\n    w_pad = w_pad / width\n    h_pad = h_pad / height\n    if renderer is None:\n        renderer = layoutbox.get_renderer(fig)\n    do_constrained_layout(fig, renderer, h_pad, w_pad, hspace, wspace)",
                "@cbook._delete_parameter(\"3.2\", \"renderer\")\ndef tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None,\n                 rect=None):\n    \"\"\"\n    Adjust the padding between and around subplots.\n\n    To exclude an artist on the axes from the bounding box calculation\n    that determines the subplot parameters (i.e. legend, or annotation),\n    set ``a.set_in_layout(False)`` for that artist.\n\n    Parameters\n    ----------\n    renderer : subclass of `~.backend_bases.RendererBase`, optional\n        Defaults to the renderer for the figure.  Deprecated.\n    pad : float, default: 1.08\n        Padding between the figure edge and the edges of subplots,\n        as a fraction of the font size.\n    h_pad, w_pad : float, default: *pad*\n        Padding (height/width) between edges of adjacent subplots,\n        as a fraction of the font size.\n    rect : tuple (left, bottom, right, top), default: (0, 0, 1, 1)\n        A rectangle in normalized figure coordinates into which the whole\n        subplots area (including labels) will fit.\n\n    See Also\n    --------\n    .Figure.set_tight_layout\n    .pyplot.tight_layout\n    \"\"\"\n\n    from .tight_layout import (\n        get_renderer, get_subplotspec_list, get_tight_layout_figure)\n\n    subplotspec_list = get_subplotspec_list(self.axes)\n    if None in subplotspec_list:\n        cbook._warn_external(\"This figure includes Axes that are not \"\n                             \"compatible with tight_layout, so results \"\n                             \"might be incorrect.\")\n\n    if renderer is None:\n        renderer = get_renderer(self)\n\n    kwargs = get_tight_layout_figure(\n        self, self.axes, subplotspec_list, renderer,\n        pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n    if kwargs:\n        self.subplots_adjust(**kwargs)",
                "def align_xlabels(self, axs=None):\n    \"\"\"\n    Align the ylabels of subplots in the same subplot column if label\n    alignment is being done automatically (i.e. the label position is\n    not manually set).\n\n    Alignment persists for draw events after this is called.\n\n    If a label is on the bottom, it is aligned with labels on axes that\n    also have their label on the bottom and that have the same\n    bottom-most subplot row.  If the label is on the top,\n    it is aligned with labels on axes with the same top-most row.\n\n    Parameters\n    ----------\n    axs : list of `~matplotlib.axes.Axes`\n        Optional list of (or ndarray) `~matplotlib.axes.Axes`\n        to align the xlabels.\n        Default is to align all axes on the figure.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.align_ylabels\n    matplotlib.figure.Figure.align_labels\n\n    Notes\n    -----\n    This assumes that ``axs`` are from the same `.GridSpec`, so that\n    their `.SubplotSpec` positions correspond to figure positions.\n\n    Examples\n    --------\n    Example with rotated xtick labels::\n\n        fig, axs = plt.subplots(1, 2)\n        for tick in axs[0].get_xticklabels():\n            tick.set_rotation(55)\n        axs[0].set_xlabel('XLabel 0')\n        axs[1].set_xlabel('XLabel 1')\n        fig.align_xlabels()\n    \"\"\"\n    if axs is None:\n        axs = self.axes\n    axs = np.ravel(axs)\n    for ax in axs:\n        _log.debug(' Working on: %s', ax.get_xlabel())\n        rowspan = ax.get_subplotspec().rowspan\n        pos = ax.xaxis.get_label_position()  # top or bottom\n        # Search through other axes for label positions that are same as\n        # this one and that share the appropriate row number.\n        # Add to a grouper associated with each axes of siblings.\n        # This list is inspected in `axis.draw` by\n        # `axis._update_label_position`.\n        for axc in axs:\n            if axc.xaxis.get_label_position() == pos:\n                rowspanc = axc.get_subplotspec().rowspan\n                if (pos == 'top' and rowspan.start == rowspanc.start or\n                        pos == 'bottom' and rowspan.stop == rowspanc.stop):\n                    # grouper for groups of xlabels to align\n                    self._align_xlabel_grp.join(ax, axc)",
                "def align_ylabels(self, axs=None):\n    \"\"\"\n    Align the ylabels of subplots in the same subplot column if label\n    alignment is being done automatically (i.e. the label position is\n    not manually set).\n\n    Alignment persists for draw events after this is called.\n\n    If a label is on the left, it is aligned with labels on axes that\n    also have their label on the left and that have the same\n    left-most subplot column.  If the label is on the right,\n    it is aligned with labels on axes with the same right-most column.\n\n    Parameters\n    ----------\n    axs : list of `~matplotlib.axes.Axes`\n        Optional list (or ndarray) of `~matplotlib.axes.Axes`\n        to align the ylabels.\n        Default is to align all axes on the figure.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.align_xlabels\n    matplotlib.figure.Figure.align_labels\n\n    Notes\n    -----\n    This assumes that ``axs`` are from the same `.GridSpec`, so that\n    their `.SubplotSpec` positions correspond to figure positions.\n\n    Examples\n    --------\n    Example with large yticks labels::\n\n        fig, axs = plt.subplots(2, 1)\n        axs[0].plot(np.arange(0, 1000, 50))\n        axs[0].set_ylabel('YLabel 0')\n        axs[1].set_ylabel('YLabel 1')\n        fig.align_ylabels()\n    \"\"\"\n    if axs is None:\n        axs = self.axes\n    axs = np.ravel(axs)\n    for ax in axs:\n        _log.debug(' Working on: %s', ax.get_ylabel())\n        colspan = ax.get_subplotspec().colspan\n        pos = ax.yaxis.get_label_position()  # left or right\n        # Search through other axes for label positions that are same as\n        # this one and that share the appropriate column number.\n        # Add to a list associated with each axes of siblings.\n        # This list is inspected in `axis.draw` by\n        # `axis._update_label_position`.\n        for axc in axs:\n            if axc.yaxis.get_label_position() == pos:\n                colspanc = axc.get_subplotspec().colspan\n                if (pos == 'left' and colspan.start == colspanc.start or\n                        pos == 'right' and colspan.stop == colspanc.stop):\n                    # grouper for groups of ylabels to align\n                    self._align_ylabel_grp.join(ax, axc)",
                "def align_labels(self, axs=None):\n    \"\"\"\n    Align the xlabels and ylabels of subplots with the same subplots\n    row or column (respectively) if label alignment is being\n    done automatically (i.e. the label position is not manually set).\n\n    Alignment persists for draw events after this is called.\n\n    Parameters\n    ----------\n    axs : list of `~matplotlib.axes.Axes`\n        Optional list (or ndarray) of `~matplotlib.axes.Axes`\n        to align the labels.\n        Default is to align all axes on the figure.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.align_xlabels\n\n    matplotlib.figure.Figure.align_ylabels\n    \"\"\"\n    self.align_xlabels(axs=axs)\n    self.align_ylabels(axs=axs)",
                "def add_gridspec(self, nrows=1, ncols=1, **kwargs):\n    \"\"\"\n    Return a `.GridSpec` that has this figure as a parent.  This allows\n    complex layout of axes in the figure.\n\n    Parameters\n    ----------\n    nrows : int, default: 1\n        Number of rows in grid.\n\n    ncols : int, default: 1\n        Number or columns in grid.\n\n    Returns\n    -------\n    `.GridSpec`\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Keyword arguments are passed to `.GridSpec`.\n\n    See Also\n    --------\n    matplotlib.pyplot.subplots\n\n    Examples\n    --------\n    Adding a subplot that spans two rows::\n\n        fig = plt.figure()\n        gs = fig.add_gridspec(2, 2)\n        ax1 = fig.add_subplot(gs[0, 0])\n        ax2 = fig.add_subplot(gs[1, 0])\n        # spans two rows:\n        ax3 = fig.add_subplot(gs[:, 1])\n\n    \"\"\"\n\n    _ = kwargs.pop('figure', None)  # pop in case user has added this...\n    gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, **kwargs)\n    self._gridspecs.append(gs)\n    return gs",
                "def fixitems(items):\n    # items may have arrays and lists in them, so convert them\n    # to tuples for the key\n    ret = []\n    for k, v in items:\n        # some objects can define __getitem__ without being\n        # iterable and in those cases the conversion to tuples\n        # will fail. So instead of using the np.iterable(v) function\n        # we simply try and convert to a tuple, and proceed if not.\n        try:\n            v = tuple(v)\n        except Exception:\n            pass\n        ret.append((k, v))\n    return tuple(ret)",
                "def fixlist(args):\n    ret = []\n    for a in args:\n        if np.iterable(a):\n            a = tuple(a)\n        ret.append(a)\n    return tuple(ret)",
                "def _reset_locators_and_formatters(axis):\n    # Set the formatters and locators to be associated with axis\n    # (where previously they may have been associated with another\n    # Axis instance)\n    #\n    # Because set_major_formatter() etc. force isDefault_* to be False,\n    # we have to manually check if the original formatter was a\n    # default and manually set isDefault_* if that was the case.\n    majfmt = axis.get_major_formatter()\n    isDefault = majfmt.axis.isDefault_majfmt\n    axis.set_major_formatter(majfmt)\n    if isDefault:\n        majfmt.axis.isDefault_majfmt = True\n\n    majloc = axis.get_major_locator()\n    isDefault = majloc.axis.isDefault_majloc\n    axis.set_major_locator(majloc)\n    if isDefault:\n        majloc.axis.isDefault_majloc = True\n\n    minfmt = axis.get_minor_formatter()\n    isDefault = majloc.axis.isDefault_minfmt\n    axis.set_minor_formatter(minfmt)\n    if isDefault:\n        minfmt.axis.isDefault_minfmt = True\n\n    minloc = axis.get_minor_locator()\n    isDefault = majloc.axis.isDefault_minloc\n    axis.set_minor_locator(minloc)\n    if isDefault:\n        minloc.axis.isDefault_minloc = True",
                "def _break_share_link(ax, grouper):\n    siblings = grouper.get_siblings(ax)\n    if len(siblings) > 1:\n        grouper.remove(ax)\n        for last_ax in siblings:\n            if ax is not last_ax:\n                return last_ax\n    return None"
            ],
            "inscope_function_signatures": [
                "_stale_figure_callback(self, val)",
                "figaspect(arg)",
                "__init__(self)",
                "as_list(self)",
                "get(self, key)",
                "_entry_from_axes(self, e)",
                "remove(self, a)",
                "bubble(self, a)",
                "add(self, key, a)",
                "current_key_axes(self)",
                "__call__(self)",
                "__contains__(self, a)",
                "__init__(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)",
                "update(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)",
                "__str__(self)",
                "__repr__(self)",
                "__init__(self, figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None, tight_layout=None, constrained_layout=None)",
                "_repr_html_(self)",
                "show(self, warn=True)",
                "get_axes(self)",
                "_get_dpi(self)",
                "_set_dpi(self, dpi, forward=True)",
                "get_tight_layout(self)",
                "set_tight_layout(self, tight)",
                "get_constrained_layout(self)",
                "set_constrained_layout(self, constrained)",
                "set_constrained_layout_pads(self, **kwargs)",
                "get_constrained_layout_pads(self, relative=False)",
                "autofmt_xdate(self, bottom=0.2, rotation=30, ha='right', which='major')",
                "get_children(self)",
                "contains(self, mouseevent)",
                "get_window_extent(self, *args, **kwargs)",
                "suptitle(self, t, **kwargs)",
                "set_canvas(self, canvas)",
                "figimage(self, X, xo=0, yo=0, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, origin=None, resize=False, **kwargs)",
                "set_size_inches(self, w, h=None, forward=True)",
                "get_size_inches(self)",
                "get_edgecolor(self)",
                "get_facecolor(self)",
                "get_figwidth(self)",
                "get_figheight(self)",
                "get_dpi(self)",
                "get_frameon(self)",
                "set_edgecolor(self, color)",
                "set_facecolor(self, color)",
                "set_dpi(self, val)",
                "set_figwidth(self, val, forward=True)",
                "set_figheight(self, val, forward=True)",
                "set_frameon(self, b)",
                "add_artist(self, artist, clip=False)",
                "_make_key(self, *args, **kwargs)",
                "_process_projection_requirements(self, *args, **kwargs)",
                "add_axes(self, *args, **kwargs)",
                "add_subplot(self, *args, **kwargs)",
                "_add_axes_internal(self, key, ax)",
                "subplots(self, nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None)",
                "delaxes(self, ax)",
                "clf(self, keep_observers=False)",
                "clear(self, keep_observers=False)",
                "draw(self, renderer)",
                "draw_artist(self, a)",
                "legend(self, *args, **kwargs)",
                "text(self, x, y, s, fontdict=None, **kwargs)",
                "_set_artist_props(self, a)",
                "gca(self, **kwargs)",
                "sca(self, a)",
                "_gci(self)",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "add_axobserver(self, func)",
                "savefig(self, fname, **kwargs)",
                "colorbar(self, mappable, cax=None, ax=None, use_gridspec=True, **kw)",
                "subplots_adjust(self, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)",
                "ginput(self, n=1, timeout=30, show_clicks=True, mouse_add=MouseButton.LEFT, mouse_pop=MouseButton.RIGHT, mouse_stop=MouseButton.MIDDLE)",
                "waitforbuttonpress(self, timeout=-1)",
                "get_default_bbox_extra_artists(self)",
                "get_tightbbox(self, renderer, bbox_extra_artists=None)",
                "init_layoutbox(self)",
                "execute_constrained_layout(self, renderer=None)",
                "tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None, rect=None)",
                "align_xlabels(self, axs=None)",
                "align_ylabels(self, axs=None)",
                "align_labels(self, axs=None)",
                "add_gridspec(self, nrows=1, ncols=1, **kwargs)",
                "fixitems(items)",
                "fixlist(args)",
                "_reset_locators_and_formatters(axis)",
                "_break_share_link(ax, grouper)"
            ],
            "variables_in_file": {
                "_log": [
                    2344,
                    2516,
                    2456,
                    38
                ],
                "logging.getLogger": [
                    38
                ],
                "logging": [
                    38
                ],
                "__name__": [
                    374,
                    38
                ],
                "self.figure": [
                    42,
                    43
                ],
                "self": [
                    512,
                    514,
                    516,
                    1042,
                    1043,
                    1044,
                    1047,
                    1050,
                    1052,
                    1571,
                    548,
                    1572,
                    550,
                    1573,
                    2596,
                    2597,
                    42,
                    43,
                    2553,
                    2554,
                    2099,
                    1590,
                    567,
                    568,
                    569,
                    570,
                    1591,
                    1593,
                    573,
                    62,
                    1595,
                    1597,
                    1600,
                    1601,
                    1602,
                    68,
                    1603,
                    1604,
                    1605,
                    1606,
                    1608,
                    1609,
                    1610,
                    1611,
                    77,
                    1612,
                    2122,
                    1616,
                    2125,
                    2129,
                    1621,
                    1624,
                    1113,
                    1239,
                    91,
                    1627,
                    1628,
                    606,
                    607,
                    96,
                    608,
                    1633,
                    2140,
                    2141,
                    613,
                    2263,
                    103,
                    624,
                    625,
                    1651,
                    1652,
                    629,
                    630,
                    631,
                    632,
                    633,
                    122,
                    634,
                    635,
                    636,
                    1653,
                    1654,
                    1656,
                    129,
                    1661,
                    131,
                    132,
                    1663,
                    646,
                    1667,
                    1669,
                    649,
                    1757,
                    2180,
                    140,
                    141,
                    1677,
                    143,
                    656,
                    1680,
                    2193,
                    147,
                    150,
                    2265,
                    1760,
                    2173,
                    2174,
                    188,
                    190,
                    191,
                    2244,
                    198,
                    199,
                    200,
                    1222,
                    202,
                    203,
                    1223,
                    1225,
                    206,
                    1230,
                    208,
                    1741,
                    210,
                    2259,
                    212,
                    724,
                    214,
                    725,
                    216,
                    726,
                    727,
                    728,
                    731,
                    732,
                    733,
                    735,
                    736,
                    737,
                    738,
                    1243,
                    1245,
                    1249,
                    1251,
                    1759,
                    744,
                    745,
                    1761,
                    748,
                    749,
                    240,
                    244,
                    245,
                    246,
                    759,
                    2296,
                    2305,
                    1801,
                    1806,
                    2320,
                    1809,
                    1810,
                    1811,
                    2324,
                    1815,
                    1816,
                    1818,
                    2330,
                    2331,
                    2332,
                    2333,
                    1832,
                    2345,
                    2353,
                    306,
                    307,
                    2355,
                    1846,
                    830,
                    832,
                    834,
                    323,
                    325,
                    327,
                    328,
                    841,
                    330,
                    842,
                    332,
                    843,
                    1864,
                    1868,
                    1869,
                    337,
                    338,
                    340,
                    341,
                    346,
                    1370,
                    348,
                    2396,
                    350,
                    1375,
                    352,
                    354,
                    355,
                    356,
                    1890,
                    2106,
                    2403,
                    2406,
                    361,
                    362,
                    1387,
                    1388,
                    365,
                    1900,
                    2409,
                    1392,
                    881,
                    883,
                    2109,
                    374,
                    376,
                    888,
                    889,
                    1400,
                    1401,
                    1403,
                    1407,
                    1408,
                    1409,
                    1410,
                    1920,
                    1928,
                    1929,
                    910,
                    914,
                    405,
                    918,
                    1942,
                    2453,
                    1945,
                    410,
                    922,
                    1946,
                    926,
                    930,
                    1954,
                    1958,
                    2470,
                    424,
                    938,
                    1964,
                    435,
                    948,
                    446,
                    958,
                    1755,
                    449,
                    450,
                    451,
                    452,
                    453,
                    2181,
                    968,
                    969,
                    459,
                    2513,
                    1016,
                    986,
                    475,
                    476,
                    477,
                    2530,
                    485,
                    1003,
                    1521,
                    1015,
                    503,
                    504,
                    505,
                    506,
                    507,
                    510
                ],
                "self.figure.stale": [
                    43
                ],
                "val": [
                    968,
                    986,
                    43,
                    1003
                ],
                "cbook.Stack": [
                    46
                ],
                "cbook": [
                    1414,
                    1938,
                    153,
                    412,
                    2346,
                    46,
                    307,
                    1591,
                    1208,
                    2363,
                    1858,
                    1608,
                    80,
                    602,
                    2398,
                    361,
                    362,
                    116,
                    125,
                    2175
                ],
                "__init__": [
                    301,
                    61
                ],
                "super": [
                    96,
                    132,
                    103,
                    301,
                    1907,
                    124,
                    61
                ],
                "self._ind": [
                    131,
                    132,
                    62
                ],
                "ia_list": [
                    68,
                    69,
                    70
                ],
                "a": [
                    129,
                    132,
                    1680,
                    150,
                    1815,
                    1816,
                    1817,
                    1818,
                    1076,
                    1077,
                    1078,
                    1079,
                    68,
                    70,
                    1868,
                    1229,
                    1230,
                    1870,
                    91,
                    96,
                    1249,
                    1251,
                    103,
                    116,
                    2300,
                    2301
                ],
                "k": [
                    68,
                    1062,
                    1071,
                    2137,
                    91,
                    92
                ],
                "self._elements": [
                    68,
                    140,
                    77,
                    143,
                    91
                ],
                "ia_list.sort": [
                    69
                ],
                "i": [
                    70
                ],
                "item": [
                    88,
                    77,
                    78
                ],
                "get": [
                    77
                ],
                "dict": [
                    511,
                    476,
                    77,
                    503
                ],
                "key": [
                    132,
                    143,
                    144,
                    1845,
                    1082,
                    1083,
                    1851,
                    189,
                    190,
                    1855,
                    1222,
                    1223,
                    77,
                    1238,
                    1113,
                    1115,
                    1243,
                    1375,
                    1251,
                    1386,
                    1388,
                    118,
                    120,
                    122,
                    1403,
                    124,
                    126,
                    1407
                ],
                "cbook.warn_deprecated": [
                    80,
                    602,
                    1208
                ],
                "ind": [
                    91,
                    92
                ],
                "e": [
                    91,
                    92
                ],
                "remove": [
                    96,
                    124
                ],
                "self._entry_from_axes": [
                    96,
                    103
                ],
                "bubble": [
                    103
                ],
                "cbook._check_isinstance": [
                    116
                ],
                "Axes": [
                    1228,
                    116
                ],
                "hash": [
                    118
                ],
                "TypeError": [
                    1216,
                    2312,
                    1108,
                    1365,
                    119
                ],
                "object": [
                    120
                ],
                "a_existing": [
                    122,
                    123,
                    124
                ],
                "self.get": [
                    122
                ],
                "cbook._warn_external": [
                    1858,
                    2346,
                    1938,
                    412,
                    125,
                    2398,
                    2175
                ],
                "format": [
                    243,
                    1236,
                    126
                ],
                "push": [
                    132
                ],
                "len": [
                    1383,
                    140,
                    607,
                    2319,
                    1745,
                    246,
                    1207,
                    1368,
                    1564,
                    1215
                ],
                "self._default": [
                    141
                ],
                "index": [
                    143
                ],
                "axes": [
                    144,
                    426,
                    143
                ],
                "self._pos": [
                    143
                ],
                "self.current_key_axes": [
                    147
                ],
                "self.as_list": [
                    150
                ],
                "_AxesStack": [
                    154,
                    354
                ],
                "cbook.deprecated": [
                    153
                ],
                "self.validate": [
                    188,
                    198
                ],
                "setattr": [
                    190
                ],
                "mpl.rcParams": [
                    318,
                    551,
                    2664,
                    2091,
                    2093,
                    720,
                    474,
                    722,
                    310,
                    312,
                    314,
                    316,
                    509,
                    190
                ],
                "mpl": [
                    318,
                    551,
                    2664,
                    2091,
                    2093,
                    720,
                    474,
                    722,
                    310,
                    312,
                    314,
                    316,
                    509,
                    190
                ],
                "self.update": [
                    191
                ],
                "left": [
                    2180,
                    199,
                    205,
                    206,
                    191
                ],
                "bottom": [
                    2180,
                    202,
                    624,
                    209,
                    210,
                    191
                ],
                "right": [
                    2180,
                    200,
                    207,
                    208,
                    191
                ],
                "top": [
                    2180,
                    203,
                    211,
                    212,
                    191
                ],
                "wspace": [
                    578,
                    2180,
                    2361,
                    2353,
                    213,
                    214,
                    569,
                    734,
                    191
                ],
                "hspace": [
                    578,
                    2180,
                    2353,
                    215,
                    216,
                    2361,
                    570,
                    734,
                    191
                ],
                "self.left": [
                    206,
                    199
                ],
                "self.right": [
                    200,
                    208
                ],
                "ValueError": [
                    321,
                    1096,
                    201,
                    204,
                    1231,
                    880,
                    1236,
                    1657,
                    1371
                ],
                "self.bottom": [
                    210,
                    202
                ],
                "self.top": [
                    203,
                    212
                ],
                "self.wspace": [
                    214
                ],
                "self.hspace": [
                    216
                ],
                "Artist": [
                    219
                ],
                "tuple": [
                    1385,
                    1068,
                    240,
                    1072,
                    1078,
                    1080,
                    1593
                ],
                "self.bbox.size": [
                    240,
                    245
                ],
                "self.bbox": [
                    328,
                    649,
                    330,
                    240,
                    656,
                    245
                ],
                "self.__class__.__name__": [
                    244
                ],
                "self.__class__": [
                    244
                ],
                "self.axes": [
                    2305,
                    2181,
                    2453,
                    2099,
                    1593,
                    2109,
                    1741,
                    2513,
                    2265,
                    2396,
                    606,
                    607,
                    608,
                    1633,
                    2406,
                    1900,
                    1652,
                    246,
                    631,
                    1654
                ],
                "self._axes": [
                    306
                ],
                "self.callbacks": [
                    307,
                    453,
                    1591
                ],
                "cbook.CallbackRegistry": [
                    1608,
                    307,
                    1591
                ],
                "figsize": [
                    320,
                    832,
                    322,
                    323,
                    309,
                    310,
                    831
                ],
                "dpi": [
                    576,
                    449,
                    450,
                    325,
                    327,
                    455,
                    574,
                    830,
                    831,
                    311,
                    312,
                    446,
                    575
                ],
                "facecolor": [
                    313,
                    314,
                    334
                ],
                "edgecolor": [
                    315,
                    316,
                    334
                ],
                "frameon": [
                    1018,
                    333,
                    317,
                    318
                ],
                "all": [
                    320,
                    1235,
                    606,
                    879
                ],
                "np.isfinite": [
                    320,
                    1235,
                    2316,
                    879
                ],
                "np": [
                    320,
                    2667,
                    2316,
                    910,
                    878,
                    879,
                    2514,
                    1235,
                    1077,
                    2454,
                    2677,
                    2649,
                    2653,
                    2654
                ],
                "any": [
                    320,
                    879
                ],
                "np.array": [
                    320,
                    2667,
                    910,
                    878,
                    2653,
                    2654
                ],
                "self.bbox_inches": [
                    323,
                    328,
                    910,
                    2320,
                    881,
                    922,
                    926
                ],
                "Bbox.from_bounds": [
                    323
                ],
                "Bbox": [
                    2322,
                    323
                ],
                "self.dpi_scale_trans": [
                    328,
                    450,
                    325
                ],
                "scale": [
                    450,
                    2324,
                    325
                ],
                "Affine2D": [
                    2324,
                    325
                ],
                "self._dpi": [
                    449,
                    435,
                    446,
                    327
                ],
                "TransformedBbox": [
                    328,
                    2324
                ],
                "self.transFigure": [
                    1801,
                    330,
                    1047,
                    1818,
                    1755
                ],
                "BboxTransformTo": [
                    330
                ],
                "self.patch": [
                    938,
                    332,
                    337,
                    338,
                    914,
                    948,
                    629,
                    918,
                    1015,
                    1050,
                    1628,
                    1661,
                    958
                ],
                "Rectangle": [
                    332
                ],
                "linewidth": [
                    334
                ],
                "self._set_artist_props": [
                    337
                ],
                "self.patch.set_antialiased": [
                    338
                ],
                "FigureCanvasBase": [
                    1945,
                    340
                ],
                "self._suptitle": [
                    737,
                    738,
                    744,
                    745,
                    727,
                    1609,
                    1928,
                    749,
                    1929,
                    725,
                    341,
                    726,
                    728,
                    731,
                    732
                ],
                "subplotpars": [
                    344,
                    346,
                    343
                ],
                "SubplotParams": [
                    344
                ],
                "self.subplotpars": [
                    346,
                    2180
                ],
                "self._layoutbox": [
                    736,
                    2333,
                    2345,
                    1611,
                    2330,
                    1946,
                    2331,
                    348,
                    733
                ],
                "self.set_constrained_layout": [
                    2174,
                    350
                ],
                "constrained_layout": [
                    350
                ],
                "self.set_tight_layout": [
                    352
                ],
                "tight_layout": [
                    352
                ],
                "self._axstack": [
                    1600,
                    354,
                    1571,
                    1890,
                    1223,
                    424,
                    1832,
                    1388,
                    1868,
                    1400,
                    1243,
                    1407
                ],
                "self.clf": [
                    1616,
                    355
                ],
                "self._cachedRenderer": [
                    1680,
                    356,
                    1621,
                    1677
                ],
                "self._align_xlabel_grp": [
                    361,
                    2470
                ],
                "cbook.Grouper": [
                    361,
                    362
                ],
                "self._align_ylabel_grp": [
                    362,
                    2530
                ],
                "self._gridspecs": [
                    2597,
                    365
                ],
                "type": [
                    374
                ],
                "self.canvas": [
                    1920,
                    2106,
                    1669,
                    405,
                    374,
                    759,
                    410,
                    1597
                ],
                "backend_webagg.ipython_inline_display": [
                    376
                ],
                "backend_webagg": [
                    376
                ],
                "self.canvas.manager": [
                    410,
                    405
                ],
                "AttributeError": [
                    1678,
                    406
                ],
                "self.canvas.manager.show": [
                    410
                ],
                "NonGuiException": [
                    411
                ],
                "str": [
                    1385,
                    412,
                    1102
                ],
                "exc": [
                    412
                ],
                "self._axstack.as_list": [
                    424
                ],
                "property": [
                    426,
                    1018,
                    455
                ],
                "get_axes": [
                    426
                ],
                "self.dpi_scale_trans.clear": [
                    450
                ],
                "w": [
                    451,
                    452,
                    877,
                    878
                ],
                "h": [
                    451,
                    452,
                    876,
                    877,
                    878
                ],
                "self.get_size_inches": [
                    451
                ],
                "self.set_size_inches": [
                    832,
                    986,
                    1003,
                    452
                ],
                "forward": [
                    986,
                    882,
                    1003,
                    452
                ],
                "self.callbacks.process": [
                    453
                ],
                "_get_dpi": [
                    455
                ],
                "_set_dpi": [
                    455
                ],
                "self._tight": [
                    459,
                    475
                ],
                "tight": [
                    473,
                    474,
                    475,
                    476
                ],
                "bool": [
                    475,
                    510
                ],
                "self._tight_parameters": [
                    1656,
                    476
                ],
                "isinstance": [
                    2182,
                    1383,
                    2184,
                    2187,
                    1228,
                    1102,
                    1390,
                    2128,
                    1855,
                    1368,
                    476,
                    1244,
                    511
                ],
                "self.stale": [
                    1761,
                    1410,
                    1667,
                    516,
                    1573,
                    1958,
                    969,
                    843,
                    748,
                    1612,
                    625,
                    2193,
                    1811,
                    2141,
                    1016,
                    889,
                    1052,
                    477
                ],
                "self._constrained": [
                    485,
                    510
                ],
                "self._constrained_layout_pads": [
                    548,
                    567,
                    550,
                    568,
                    569,
                    570,
                    503,
                    504,
                    505,
                    506,
                    507
                ],
                "constrained": [
                    512,
                    508,
                    509,
                    510,
                    511
                ],
                "self.set_constrained_layout_pads": [
                    512,
                    514
                ],
                "todo": [
                    545,
                    546
                ],
                "td": [
                    546,
                    547,
                    548,
                    550,
                    551
                ],
                "kwargs": [
                    1803,
                    547,
                    548,
                    1864,
                    2595,
                    2596,
                    2091,
                    1839,
                    2096,
                    2097,
                    1846,
                    1207,
                    1082,
                    2106,
                    1214,
                    834,
                    1218,
                    708,
                    710,
                    711,
                    1222,
                    713,
                    714,
                    715,
                    716,
                    1740,
                    718,
                    719,
                    720,
                    721,
                    722,
                    1106,
                    724,
                    1362,
                    1238,
                    1239,
                    1743,
                    1113,
                    1115,
                    1755,
                    1758,
                    1375,
                    1249,
                    2405,
                    2408,
                    2409,
                    1386,
                    1387,
                    1401
                ],
                "w_pad": [
                    578,
                    2407,
                    2353,
                    2357,
                    567,
                    2361,
                    572,
                    734,
                    575
                ],
                "h_pad": [
                    576,
                    578,
                    2407,
                    747,
                    2353,
                    2358,
                    568,
                    2361,
                    572,
                    734
                ],
                "relative": [
                    572
                ],
                "renderer0": [
                    576,
                    573,
                    574,
                    575
                ],
                "layoutbox.get_renderer": [
                    2360,
                    573
                ],
                "layoutbox": [
                    737,
                    745,
                    1611,
                    2360,
                    2331,
                    573
                ],
                "renderer0.dpi": [
                    574
                ],
                "renderer0.width": [
                    575
                ],
                "renderer0.height": [
                    576
                ],
                "which": [
                    608,
                    601,
                    619,
                    615
                ],
                "allsubplots": [
                    612,
                    606,
                    623
                ],
                "hasattr": [
                    1104,
                    2649,
                    1642,
                    606
                ],
                "ax": [
                    1563,
                    1565,
                    1567,
                    1571,
                    1575,
                    1579,
                    2099,
                    2100,
                    1593,
                    1594,
                    1595,
                    2109,
                    2110,
                    2111,
                    2121,
                    2122,
                    2128,
                    2130,
                    2132,
                    606,
                    1633,
                    1634,
                    1636,
                    613,
                    614,
                    615,
                    1637,
                    1639,
                    1641,
                    619,
                    621,
                    2181,
                    2182,
                    2184,
                    2185,
                    2186,
                    2187,
                    2188,
                    2189,
                    2191,
                    2192,
                    1223,
                    1224,
                    1225,
                    1226,
                    2265,
                    2266,
                    2267,
                    1243,
                    1244,
                    1245,
                    1246,
                    2305,
                    2306,
                    2310,
                    2313,
                    1369,
                    1370,
                    1388,
                    1389,
                    1390,
                    1900,
                    1392,
                    1393,
                    1901,
                    1400,
                    1401,
                    1403,
                    1407,
                    1408,
                    1409,
                    1411,
                    1412,
                    2455,
                    2456,
                    2457,
                    2458,
                    2470,
                    2515,
                    2516,
                    2517,
                    2518,
                    2530
                ],
                "label": [
                    608,
                    609,
                    610,
                    615,
                    616,
                    617,
                    619,
                    620
                ],
                "get_xticklabels": [
                    608
                ],
                "label.set_ha": [
                    616,
                    609
                ],
                "ha": [
                    616,
                    609
                ],
                "label.set_rotation": [
                    617,
                    610
                ],
                "rotation": [
                    617,
                    610
                ],
                "self.get_axes": [
                    613
                ],
                "ax.is_last_row": [
                    614
                ],
                "ax.get_xticklabels": [
                    619,
                    615
                ],
                "label.set_visible": [
                    620
                ],
                "ax.set_xlabel": [
                    621
                ],
                "self.subplots_adjust": [
                    624,
                    2409
                ],
                "self.artists": [
                    1601,
                    1043,
                    1044,
                    630
                ],
                "self.lines": [
                    632,
                    1602
                ],
                "self.patches": [
                    633,
                    1603
                ],
                "self.texts": [
                    1809,
                    634,
                    1810,
                    1604
                ],
                "self.images": [
                    841,
                    842,
                    635,
                    1605
                ],
                "self.legends": [
                    1760,
                    636,
                    1606,
                    1759
                ],
                "inside": [
                    646,
                    647,
                    648,
                    649,
                    650
                ],
                "info": [
                    648,
                    646
                ],
                "self._default_contains": [
                    646
                ],
                "mouseevent": [
                    649,
                    646
                ],
                "self.bbox.contains": [
                    649
                ],
                "mouseevent.x": [
                    649
                ],
                "mouseevent.y": [
                    649
                ],
                "manual_position": [
                    708,
                    733
                ],
                "x": [
                    710,
                    1805,
                    724,
                    727,
                    831
                ],
                "kwargs.pop": [
                    1218,
                    2595,
                    710,
                    711,
                    1755
                ],
                "y": [
                    727,
                    724,
                    1805,
                    711
                ],
                "sup": [
                    728,
                    729,
                    731,
                    724
                ],
                "self.text": [
                    724
                ],
                "t": [
                    724,
                    726
                ],
                "self._suptitle.set_text": [
                    726
                ],
                "self._suptitle.set_position": [
                    727
                ],
                "self._suptitle.update_from": [
                    728
                ],
                "sup.remove": [
                    729
                ],
                "self._suptitle._layoutbox": [
                    737,
                    744,
                    1929,
                    745,
                    732
                ],
                "self.get_constrained_layout_pads": [
                    2353,
                    735
                ],
                "figlb": [
                    736,
                    738,
                    739,
                    743
                ],
                "layoutbox.LayoutBox": [
                    737,
                    2331
                ],
                "figlb.name": [
                    739
                ],
                "child": [
                    743,
                    744,
                    1641,
                    746,
                    1642,
                    1643,
                    1645,
                    1646,
                    1648
                ],
                "figlb.children": [
                    743
                ],
                "layoutbox.vstack": [
                    745
                ],
                "canvas": [
                    883,
                    884,
                    885,
                    886,
                    759
                ],
                "resize": [
                    829
                ],
                "self.get_dpi": [
                    830
                ],
                "X.shape": [
                    831
                ],
                "X": [
                    837,
                    831
                ],
                "im": [
                    834,
                    835,
                    837,
                    838,
                    1893,
                    840,
                    841,
                    842,
                    1894,
                    844,
                    1895,
                    1901,
                    1902,
                    1903
                ],
                "mimage.FigureImage": [
                    834
                ],
                "mimage": [
                    834,
                    1662
                ],
                "cmap": [
                    834
                ],
                "norm": [
                    834,
                    839
                ],
                "xo": [
                    834
                ],
                "yo": [
                    834
                ],
                "origin": [
                    834
                ],
                "im.stale_callback": [
                    835
                ],
                "_stale_figure_callback": [
                    1817,
                    835,
                    1411,
                    1807
                ],
                "im.set_array": [
                    837
                ],
                "im.set_alpha": [
                    838
                ],
                "alpha": [
                    838
                ],
                "im.set_clim": [
                    840
                ],
                "vmin": [
                    840
                ],
                "vmax": [
                    840
                ],
                "self.images.append": [
                    841
                ],
                "im._remove_method": [
                    842
                ],
                "self.images.remove": [
                    842
                ],
                "size": [
                    878,
                    879,
                    880,
                    881,
                    888
                ],
                "self.bbox_inches.p1": [
                    881,
                    910
                ],
                "getattr": [
                    1920,
                    883,
                    885,
                    886,
                    1597
                ],
                "dpi_ratio": [
                    888,
                    885
                ],
                "manager": [
                    888,
                    886,
                    887
                ],
                "manager.resize": [
                    888
                ],
                "astype": [
                    888
                ],
                "self.dpi": [
                    888,
                    930,
                    2324,
                    968
                ],
                "int": [
                    888,
                    1385
                ],
                "self.patch.get_edgecolor": [
                    914
                ],
                "self.patch.get_facecolor": [
                    918
                ],
                "self.bbox_inches.width": [
                    922
                ],
                "self.bbox_inches.height": [
                    926
                ],
                "self.patch.get_visible": [
                    938
                ],
                "self.patch.set_edgecolor": [
                    948
                ],
                "color": [
                    948,
                    958
                ],
                "self.patch.set_facecolor": [
                    958
                ],
                "self.get_figheight": [
                    986
                ],
                "self.get_figwidth": [
                    1003
                ],
                "self.patch.set_visible": [
                    1015
                ],
                "b": [
                    2315,
                    2316,
                    2317,
                    1015
                ],
                "get_frameon": [
                    1018
                ],
                "set_frameon": [
                    1018
                ],
                "artist.set_figure": [
                    1042
                ],
                "artist": [
                    2263,
                    1042,
                    1043,
                    1044,
                    1046,
                    1047,
                    2264,
                    1050,
                    1053,
                    1630,
                    1631
                ],
                "self.artists.append": [
                    1043
                ],
                "artist._remove_method": [
                    1044
                ],
                "self.artists.remove": [
                    1044
                ],
                "artist.is_transform_set": [
                    1046
                ],
                "artist.set_transform": [
                    1047
                ],
                "clip": [
                    1049
                ],
                "artist.set_clip_path": [
                    1050
                ],
                "ret": [
                    1061,
                    1071,
                    1072,
                    1075,
                    1079,
                    1080
                ],
                "v": [
                    2137,
                    1068,
                    1062,
                    1071
                ],
                "items": [
                    1062
                ],
                "Exception": [
                    1069
                ],
                "ret.append": [
                    1079,
                    1071
                ],
                "args": [
                    1076,
                    1207,
                    1082,
                    1215,
                    1218,
                    1222,
                    1228,
                    1229,
                    1742,
                    1234,
                    1239,
                    1368,
                    1369,
                    1113,
                    1375,
                    1378,
                    1379,
                    1383,
                    1384,
                    1385,
                    1387,
                    1401
                ],
                "np.iterable": [
                    1077
                ],
                "fixlist": [
                    1082
                ],
                "fixitems": [
                    1082
                ],
                "kwargs.items": [
                    1082
                ],
                "polar": [
                    1094
                ],
                "projection": [
                    1095,
                    1099,
                    1100,
                    1102,
                    1103,
                    1104,
                    1105,
                    1109
                ],
                "projection_class": [
                    1249,
                    1386,
                    1390,
                    1103,
                    1105,
                    1845,
                    1238,
                    1401,
                    1115,
                    1244,
                    1855
                ],
                "projections.get_projection_class": [
                    1103
                ],
                "projections": [
                    1103
                ],
                "extra_kwargs": [
                    1105,
                    1106
                ],
                "projection._as_mpl_axes": [
                    1105
                ],
                "kwargs.update": [
                    1106
                ],
                "self._make_key": [
                    1113,
                    1222,
                    1375
                ],
                "self._axstack.get": [
                    1243,
                    1388,
                    1223
                ],
                "self.sca": [
                    1408,
                    1225,
                    1392,
                    2140,
                    1245
                ],
                "a.get_figure": [
                    1230
                ],
                "rect": [
                    1249,
                    2407,
                    1234,
                    1235,
                    1237
                ],
                "self._process_projection_requirements": [
                    1387,
                    1846,
                    1239
                ],
                "self._add_axes_internal": [
                    1403,
                    1251
                ],
                "docstring.dedent_interpd": [
                    2113,
                    1764,
                    1253,
                    1686,
                    1820,
                    1117
                ],
                "docstring": [
                    2113,
                    1764,
                    1253,
                    1686,
                    2680,
                    1820,
                    1117
                ],
                "SubplotBase": [
                    2182,
                    2184,
                    2187,
                    2128,
                    1368
                ],
                "ax.get_figure": [
                    1370
                ],
                "Integral": [
                    1383
                ],
                "map": [
                    1385
                ],
                "self._axstack.remove": [
                    1400,
                    1571
                ],
                "subplot_class_factory": [
                    1401
                ],
                "self._axstack.add": [
                    1407
                ],
                "ax._remove_method": [
                    1409
                ],
                "self.delaxes": [
                    1409,
                    1595
                ],
                "ax.stale_callback": [
                    1411
                ],
                "gridspec_kw": [
                    1520,
                    1521,
                    1519
                ],
                "subplots": [
                    1521
                ],
                "self.add_gridspec": [
                    1521
                ],
                "nrows": [
                    1521,
                    2596
                ],
                "ncols": [
                    1521,
                    2596
                ],
                "sharex": [
                    1522
                ],
                "sharey": [
                    1522
                ],
                "squeeze": [
                    1522
                ],
                "subplot_kw": [
                    1523
                ],
                "cbook._make_keyword_only": [
                    1414
                ],
                "majfmt": [
                    1538,
                    1539,
                    1540,
                    1542
                ],
                "axis.get_major_formatter": [
                    1538
                ],
                "axis": [
                    1538,
                    1540,
                    1544,
                    1546,
                    1550,
                    1552,
                    1556,
                    1558
                ],
                "isDefault": [
                    1539,
                    1541,
                    1545,
                    1547,
                    1551,
                    1553,
                    1557,
                    1559
                ],
                "majfmt.axis.isDefault_majfmt": [
                    1539,
                    1542
                ],
                "majfmt.axis": [
                    1539,
                    1542
                ],
                "axis.set_major_formatter": [
                    1540
                ],
                "majloc": [
                    1544,
                    1545,
                    1546,
                    1548,
                    1551,
                    1557
                ],
                "axis.get_major_locator": [
                    1544
                ],
                "majloc.axis.isDefault_majloc": [
                    1545,
                    1548
                ],
                "majloc.axis": [
                    1545,
                    1548,
                    1557,
                    1551
                ],
                "axis.set_major_locator": [
                    1546
                ],
                "minfmt": [
                    1552,
                    1554,
                    1550
                ],
                "axis.get_minor_formatter": [
                    1550
                ],
                "majloc.axis.isDefault_minfmt": [
                    1551
                ],
                "axis.set_minor_formatter": [
                    1552
                ],
                "minfmt.axis.isDefault_minfmt": [
                    1554
                ],
                "minfmt.axis": [
                    1554
                ],
                "minloc": [
                    1560,
                    1556,
                    1558
                ],
                "axis.get_minor_locator": [
                    1556
                ],
                "majloc.axis.isDefault_minloc": [
                    1557
                ],
                "axis.set_minor_locator": [
                    1558
                ],
                "minloc.axis.isDefault_minloc": [
                    1560
                ],
                "minloc.axis": [
                    1560
                ],
                "siblings": [
                    1563,
                    1564,
                    1566
                ],
                "grouper.get_siblings": [
                    1563
                ],
                "grouper": [
                    1563,
                    1565
                ],
                "grouper.remove": [
                    1565
                ],
                "last_ax": [
                    1568,
                    1575,
                    1576,
                    1577,
                    1579,
                    1580,
                    1581,
                    1566,
                    1567
                ],
                "self._axobservers.process": [
                    1572,
                    1869
                ],
                "self._axobservers": [
                    1608,
                    1964,
                    1572,
                    1869
                ],
                "_break_share_link": [
                    1579,
                    1575
                ],
                "ax._shared_y_axes": [
                    1575
                ],
                "_reset_locators_and_formatters": [
                    1577,
                    1581
                ],
                "last_ax.yaxis": [
                    1577
                ],
                "ax._shared_x_axes": [
                    1579
                ],
                "last_ax.xaxis": [
                    1581
                ],
                "self.suppressComposite": [
                    1590,
                    1663
                ],
                "ax.cla": [
                    1594
                ],
                "toolbar": [
                    1597,
                    1598,
                    1599
                ],
                "toolbar.update": [
                    1599
                ],
                "self._axstack.clear": [
                    1600
                ],
                "keep_observers": [
                    1616,
                    1607
                ],
                "self.get_constrained_layout": [
                    2129,
                    1610,
                    1652,
                    2173
                ],
                "layoutbox.nonetree": [
                    1611
                ],
                "renderer": [
                    1665,
                    2402,
                    2403,
                    1636,
                    1669,
                    2406,
                    2311,
                    2361,
                    2313,
                    1645,
                    1651,
                    1653,
                    1621,
                    2359,
                    2360,
                    2301,
                    1661,
                    1663
                ],
                "self.get_visible": [
                    1624
                ],
                "artists": [
                    2300,
                    2296,
                    2298,
                    1627,
                    1628,
                    1629,
                    1630,
                    1663
                ],
                "self.get_children": [
                    1627,
                    2263
                ],
                "artists.remove": [
                    1628
                ],
                "sorted": [
                    1629
                ],
                "artist.get_animated": [
                    1630
                ],
                "artist.get_zorder": [
                    1631
                ],
                "locator": [
                    1634,
                    1635,
                    1636,
                    1643,
                    1644,
                    1645
                ],
                "ax.get_axes_locator": [
                    1634
                ],
                "pos": [
                    2528,
                    2465,
                    2467,
                    1636,
                    1637,
                    2468,
                    1645,
                    1646,
                    2518,
                    2458,
                    2525,
                    2527
                ],
                "ax.apply_aspect": [
                    1637,
                    1639
                ],
                "ax.get_children": [
                    1641
                ],
                "child.get_axes_locator": [
                    1643
                ],
                "child.apply_aspect": [
                    1648,
                    1646
                ],
                "renderer.open_group": [
                    1651
                ],
                "self.get_gid": [
                    1651
                ],
                "self.execute_constrained_layout": [
                    1653
                ],
                "self.get_tight_layout": [
                    1654
                ],
                "self.tight_layout": [
                    1656
                ],
                "self.patch.draw": [
                    1661
                ],
                "mimage._draw_list_compositing_images": [
                    1662
                ],
                "renderer.close_group": [
                    1665
                ],
                "self.canvas.draw_event": [
                    1669
                ],
                "allow_rasterization": [
                    1618
                ],
                "a.draw": [
                    1680
                ],
                "handles": [
                    1740,
                    1757
                ],
                "labels": [
                    1740,
                    1757
                ],
                "extra_args": [
                    1745,
                    1740,
                    1757
                ],
                "mlegend._parse_legend_args": [
                    1740
                ],
                "mlegend": [
                    1740,
                    1757
                ],
                "transform": [
                    1755,
                    1758
                ],
                "l": [
                    1760,
                    1762,
                    1757,
                    1759
                ],
                "mlegend.Legend": [
                    1757
                ],
                "self.legends.append": [
                    1759
                ],
                "l._remove_method": [
                    1760
                ],
                "self.legends.remove": [
                    1760
                ],
                "effective_kwargs": [
                    1800,
                    1805
                ],
                "fontdict": [
                    1802
                ],
                "text": [
                    1805,
                    1806,
                    1807,
                    1809,
                    1810,
                    1812
                ],
                "Text": [
                    1805
                ],
                "s": [
                    1805
                ],
                "text.set_figure": [
                    1806
                ],
                "text.stale_callback": [
                    1807
                ],
                "self.texts.append": [
                    1809
                ],
                "text._remove_method": [
                    1810
                ],
                "self.texts.remove": [
                    1810
                ],
                "a.set_figure": [
                    1816
                ],
                "a.stale_callback": [
                    1817
                ],
                "a.set_transform": [
                    1818
                ],
                "ckey": [
                    1832,
                    1850,
                    1855
                ],
                "cax": [
                    1856,
                    1890,
                    1891,
                    1893,
                    1832,
                    1835,
                    2127,
                    1840,
                    2130,
                    2132,
                    2138,
                    1855
                ],
                "self._axstack.current_key_axes": [
                    1832,
                    1890
                ],
                "_": [
                    2595,
                    1845
                ],
                "self.add_subplot": [
                    1864
                ],
                "self._axstack.bubble": [
                    1868
                ],
                "cax._gci": [
                    1893
                ],
                "reversed": [
                    1900
                ],
                "ax._gci": [
                    1901
                ],
                "state": [
                    1922,
                    1926,
                    1931,
                    1934,
                    1935,
                    1907,
                    1942,
                    1913,
                    1916
                ],
                "__getstate__": [
                    1907
                ],
                "attr_to_pop": [
                    1912,
                    1913
                ],
                "state.pop": [
                    1913,
                    1934,
                    1926,
                    1935
                ],
                "_mpl_version": [
                    1937,
                    1916
                ],
                "_pylab_helpers.Gcf.figs.values": [
                    1921
                ],
                "_pylab_helpers.Gcf.figs": [
                    1921
                ],
                "_pylab_helpers.Gcf": [
                    1921
                ],
                "_pylab_helpers": [
                    1921
                ],
                "version": [
                    1937,
                    1939,
                    1934
                ],
                "restore_to_pylab": [
                    1948,
                    1935
                ],
                "self.__dict__": [
                    1942
                ],
                "allnums": [
                    1952,
                    1953
                ],
                "plt.get_fignums": [
                    1952
                ],
                "plt": [
                    1952,
                    1954,
                    1956
                ],
                "num": [
                    1953,
                    1954
                ],
                "max": [
                    2673,
                    1953
                ],
                "mgr": [
                    1954,
                    1955
                ],
                "plt._backend_mod.new_figure_manager_given_figure": [
                    1954
                ],
                "plt._backend_mod": [
                    1954
                ],
                "pylab_helpers.Gcf._set_new_active_manager": [
                    1955
                ],
                "pylab_helpers.Gcf": [
                    1955
                ],
                "pylab_helpers": [
                    1955
                ],
                "plt.draw_if_interactive": [
                    1956
                ],
                "self._axobservers.connect": [
                    1964
                ],
                "func": [
                    1964
                ],
                "arg": [
                    2649,
                    2658,
                    1964,
                    2661
                ],
                "kwargs.setdefault": [
                    2096,
                    2097,
                    2091
                ],
                "transparent": [
                    2092,
                    2093,
                    2108,
                    2095
                ],
                "original_axes_colors": [
                    2098,
                    2109,
                    2101
                ],
                "patch": [
                    2100,
                    2101,
                    2102,
                    2103,
                    2104
                ],
                "ax.patch": [
                    2100,
                    2110,
                    2111
                ],
                "original_axes_colors.append": [
                    2101
                ],
                "patch.get_facecolor": [
                    2101
                ],
                "patch.get_edgecolor": [
                    2102
                ],
                "patch.set_facecolor": [
                    2103
                ],
                "patch.set_edgecolor": [
                    2104
                ],
                "self.canvas.print_figure": [
                    2106
                ],
                "fname": [
                    2106
                ],
                "cc": [
                    2109,
                    2110,
                    2111
                ],
                "zip": [
                    2109
                ],
                "ax.patch.set_facecolor": [
                    2110
                ],
                "ax.patch.set_edgecolor": [
                    2111
                ],
                "self.gca": [
                    2122,
                    2125
                ],
                "current_ax": [
                    2140,
                    2125
                ],
                "use_gridspec": [
                    2128
                ],
                "kw": [
                    2137,
                    2130,
                    2132
                ],
                "cbar.make_axes_gridspec": [
                    2130
                ],
                "cbar": [
                    2130,
                    2132,
                    2138
                ],
                "cbar.make_axes": [
                    2132
                ],
                "NON_COLORBAR_KEYS": [
                    2137,
                    2135
                ],
                "cb_kw": [
                    2137,
                    2138
                ],
                "kw.items": [
                    2137
                ],
                "cb": [
                    2138,
                    2142
                ],
                "cbar.colorbar_factory": [
                    2138
                ],
                "mappable": [
                    2138
                ],
                "self.subplotpars.update": [
                    2180
                ],
                "ax._sharex": [
                    2184,
                    2185,
                    2186
                ],
                "ax._sharex.update_params": [
                    2185
                ],
                "ax.set_position": [
                    2192,
                    2186,
                    2189
                ],
                "ax._sharex.figbox": [
                    2186
                ],
                "ax._sharey": [
                    2187,
                    2188,
                    2189
                ],
                "ax._sharey.update_params": [
                    2188
                ],
                "ax._sharey.figbox": [
                    2189
                ],
                "ax.update_params": [
                    2191
                ],
                "ax.figbox": [
                    2192
                ],
                "MouseButton.LEFT": [
                    2196
                ],
                "MouseButton": [
                    2196,
                    2197,
                    2198
                ],
                "MouseButton.RIGHT": [
                    2197
                ],
                "MouseButton.MIDDLE": [
                    2198
                ],
                "blocking_mouse_input": [
                    2248,
                    2244
                ],
                "BlockingMouseInput": [
                    2244
                ],
                "mouse_add": [
                    2245
                ],
                "mouse_pop": [
                    2246
                ],
                "mouse_stop": [
                    2247
                ],
                "n": [
                    2248
                ],
                "timeout": [
                    2248,
                    2260
                ],
                "show_clicks": [
                    2249
                ],
                "blocking_input": [
                    2259,
                    2260
                ],
                "BlockingKeyMouseInput": [
                    2259
                ],
                "bbox_artists": [
                    2267,
                    2268,
                    2263
                ],
                "artist.get_visible": [
                    2264
                ],
                "artist.get_in_layout": [
                    2264
                ],
                "ax.get_visible": [
                    2266,
                    2306
                ],
                "bbox_artists.extend": [
                    2267
                ],
                "ax.get_default_bbox_extra_artists": [
                    2267
                ],
                "bb": [
                    2314,
                    2315,
                    2319,
                    2322,
                    2294,
                    2303
                ],
                "bbox_extra_artists": [
                    2298,
                    2311,
                    2295
                ],
                "self.get_default_bbox_extra_artists": [
                    2296
                ],
                "bbox": [
                    2310,
                    2313,
                    2314,
                    2301,
                    2302,
                    2303
                ],
                "a.get_tightbbox": [
                    2301
                ],
                "bbox.width": [
                    2302
                ],
                "bbox.height": [
                    2302
                ],
                "bb.append": [
                    2314,
                    2303
                ],
                "ax.get_tightbbox": [
                    2313,
                    2310
                ],
                "b.width": [
                    2316,
                    2317
                ],
                "b.height": [
                    2316,
                    2317
                ],
                "_bbox": [
                    2322,
                    2324
                ],
                "Bbox.union": [
                    2322
                ],
                "bbox_inches": [
                    2324,
                    2326
                ],
                "self._layoutbox.constrain_geometry": [
                    2333
                ],
                "_log.debug": [
                    2344,
                    2516,
                    2456
                ],
                "fig": [
                    2360,
                    2361,
                    2355,
                    2356
                ],
                "width": [
                    2356,
                    2357
                ],
                "height": [
                    2356,
                    2358
                ],
                "fig.get_size_inches": [
                    2356
                ],
                "do_constrained_layout": [
                    2361
                ],
                "subplotspec_list": [
                    2396,
                    2397,
                    2406
                ],
                "get_subplotspec_list": [
                    2396
                ],
                "get_renderer": [
                    2403
                ],
                "get_tight_layout_figure": [
                    2405
                ],
                "pad": [
                    2407
                ],
                "cbook._delete_parameter": [
                    2363
                ],
                "axs": [
                    2464,
                    2512,
                    2513,
                    2514,
                    2515,
                    2452,
                    2453,
                    2454,
                    2455,
                    2553,
                    2554,
                    2524
                ],
                "np.ravel": [
                    2514,
                    2454
                ],
                "ax.get_xlabel": [
                    2456
                ],
                "rowspan": [
                    2457,
                    2466,
                    2467,
                    2468
                ],
                "ax.get_subplotspec": [
                    2457,
                    2517
                ],
                "ax.xaxis.get_label_position": [
                    2458
                ],
                "ax.xaxis": [
                    2458
                ],
                "axc": [
                    2464,
                    2465,
                    2466,
                    2530,
                    2470,
                    2524,
                    2525,
                    2526
                ],
                "axc.xaxis.get_label_position": [
                    2465
                ],
                "axc.xaxis": [
                    2465
                ],
                "rowspanc": [
                    2466,
                    2467,
                    2468
                ],
                "axc.get_subplotspec": [
                    2466,
                    2526
                ],
                "rowspan.start": [
                    2467
                ],
                "rowspanc.start": [
                    2467
                ],
                "rowspan.stop": [
                    2468
                ],
                "rowspanc.stop": [
                    2468
                ],
                "self._align_xlabel_grp.join": [
                    2470
                ],
                "ax.get_ylabel": [
                    2516
                ],
                "colspan": [
                    2528,
                    2517,
                    2526,
                    2527
                ],
                "ax.yaxis.get_label_position": [
                    2518
                ],
                "ax.yaxis": [
                    2518
                ],
                "axc.yaxis.get_label_position": [
                    2525
                ],
                "axc.yaxis": [
                    2525
                ],
                "colspanc": [
                    2528,
                    2526,
                    2527
                ],
                "colspan.start": [
                    2527
                ],
                "colspanc.start": [
                    2527
                ],
                "colspan.stop": [
                    2528
                ],
                "colspanc.stop": [
                    2528
                ],
                "self._align_ylabel_grp.join": [
                    2530
                ],
                "self.align_xlabels": [
                    2553
                ],
                "self.align_ylabels": [
                    2554
                ],
                "gs": [
                    2596,
                    2597,
                    2598
                ],
                "GridSpec": [
                    2596
                ],
                "self._gridspecs.append": [
                    2597
                ],
                "isarray": [
                    2657,
                    2649
                ],
                "np.isscalar": [
                    2649
                ],
                "figsize_min": [
                    2677,
                    2653,
                    2670
                ],
                "figsize_max": [
                    2673,
                    2677,
                    2654
                ],
                "nr": [
                    2658,
                    2659
                ],
                "nc": [
                    2658,
                    2659
                ],
                "arg.shape": [
                    2658
                ],
                "arr_ratio": [
                    2667,
                    2659,
                    2661
                ],
                "fig_height": [
                    2664,
                    2667
                ],
                "newsize": [
                    2667,
                    2670,
                    2673,
                    2677,
                    2678
                ],
                "min": [
                    2670
                ],
                "np.clip": [
                    2677
                ],
                "docstring.interpd.update": [
                    2680
                ],
                "docstring.interpd": [
                    2680
                ],
                "martist.kwdoc": [
                    2680
                ],
                "martist": [
                    2680
                ],
                "Figure": [
                    2680
                ]
            },
            "filtered_variables_in_file": {
                "_log": [
                    2344,
                    2516,
                    2456,
                    38
                ],
                "logging.getLogger": [
                    38
                ],
                "logging": [
                    38
                ],
                "self.figure": [
                    42,
                    43
                ],
                "self": [
                    512,
                    514,
                    516,
                    1042,
                    1043,
                    1044,
                    1047,
                    1050,
                    1052,
                    1571,
                    548,
                    1572,
                    550,
                    1573,
                    2596,
                    2597,
                    42,
                    43,
                    2553,
                    2554,
                    2099,
                    1590,
                    567,
                    568,
                    569,
                    570,
                    1591,
                    1593,
                    573,
                    62,
                    1595,
                    1597,
                    1600,
                    1601,
                    1602,
                    68,
                    1603,
                    1604,
                    1605,
                    1606,
                    1608,
                    1609,
                    1610,
                    1611,
                    77,
                    1612,
                    2122,
                    1616,
                    2125,
                    2129,
                    1621,
                    1624,
                    1113,
                    1239,
                    91,
                    1627,
                    1628,
                    606,
                    607,
                    96,
                    608,
                    1633,
                    2140,
                    2141,
                    613,
                    2263,
                    103,
                    624,
                    625,
                    1651,
                    1652,
                    629,
                    630,
                    631,
                    632,
                    633,
                    122,
                    634,
                    635,
                    636,
                    1653,
                    1654,
                    1656,
                    129,
                    1661,
                    131,
                    132,
                    1663,
                    646,
                    1667,
                    1669,
                    649,
                    1757,
                    2180,
                    140,
                    141,
                    1677,
                    143,
                    656,
                    1680,
                    2193,
                    147,
                    150,
                    2265,
                    1760,
                    2173,
                    2174,
                    188,
                    190,
                    191,
                    2244,
                    198,
                    199,
                    200,
                    1222,
                    202,
                    203,
                    1223,
                    1225,
                    206,
                    1230,
                    208,
                    1741,
                    210,
                    2259,
                    212,
                    724,
                    214,
                    725,
                    216,
                    726,
                    727,
                    728,
                    731,
                    732,
                    733,
                    735,
                    736,
                    737,
                    738,
                    1243,
                    1245,
                    1249,
                    1251,
                    1759,
                    744,
                    745,
                    1761,
                    748,
                    749,
                    240,
                    244,
                    245,
                    246,
                    759,
                    2296,
                    2305,
                    1801,
                    1806,
                    2320,
                    1809,
                    1810,
                    1811,
                    2324,
                    1815,
                    1816,
                    1818,
                    2330,
                    2331,
                    2332,
                    2333,
                    1832,
                    2345,
                    2353,
                    306,
                    307,
                    2355,
                    1846,
                    830,
                    832,
                    834,
                    323,
                    325,
                    327,
                    328,
                    841,
                    330,
                    842,
                    332,
                    843,
                    1864,
                    1868,
                    1869,
                    337,
                    338,
                    340,
                    341,
                    346,
                    1370,
                    348,
                    2396,
                    350,
                    1375,
                    352,
                    354,
                    355,
                    356,
                    1890,
                    2106,
                    2403,
                    2406,
                    361,
                    362,
                    1387,
                    1388,
                    365,
                    1900,
                    2409,
                    1392,
                    881,
                    883,
                    2109,
                    374,
                    376,
                    888,
                    889,
                    1400,
                    1401,
                    1403,
                    1407,
                    1408,
                    1409,
                    1410,
                    1920,
                    1928,
                    1929,
                    910,
                    914,
                    405,
                    918,
                    1942,
                    2453,
                    1945,
                    410,
                    922,
                    1946,
                    926,
                    930,
                    1954,
                    1958,
                    2470,
                    424,
                    938,
                    1964,
                    435,
                    948,
                    446,
                    958,
                    1755,
                    449,
                    450,
                    451,
                    452,
                    453,
                    2181,
                    968,
                    969,
                    459,
                    2513,
                    1016,
                    986,
                    475,
                    476,
                    477,
                    2530,
                    485,
                    1003,
                    1521,
                    1015,
                    503,
                    504,
                    505,
                    506,
                    507,
                    510
                ],
                "self.figure.stale": [
                    43
                ],
                "val": [
                    968,
                    986,
                    43,
                    1003
                ],
                "cbook.Stack": [
                    46
                ],
                "cbook": [
                    1414,
                    1938,
                    153,
                    412,
                    2346,
                    46,
                    307,
                    1591,
                    1208,
                    2363,
                    1858,
                    1608,
                    80,
                    602,
                    2398,
                    361,
                    362,
                    116,
                    125,
                    2175
                ],
                "__init__": [
                    301,
                    61
                ],
                "self._ind": [
                    131,
                    132,
                    62
                ],
                "ia_list": [
                    68,
                    69,
                    70
                ],
                "a": [
                    129,
                    132,
                    1680,
                    150,
                    1815,
                    1816,
                    1817,
                    1818,
                    1076,
                    1077,
                    1078,
                    1079,
                    68,
                    70,
                    1868,
                    1229,
                    1230,
                    1870,
                    91,
                    96,
                    1249,
                    1251,
                    103,
                    116,
                    2300,
                    2301
                ],
                "k": [
                    68,
                    1062,
                    1071,
                    2137,
                    91,
                    92
                ],
                "self._elements": [
                    68,
                    140,
                    77,
                    143,
                    91
                ],
                "ia_list.sort": [
                    69
                ],
                "i": [
                    70
                ],
                "item": [
                    88,
                    77,
                    78
                ],
                "get": [
                    77
                ],
                "key": [
                    132,
                    143,
                    144,
                    1845,
                    1082,
                    1083,
                    1851,
                    189,
                    190,
                    1855,
                    1222,
                    1223,
                    77,
                    1238,
                    1113,
                    1115,
                    1243,
                    1375,
                    1251,
                    1386,
                    1388,
                    118,
                    120,
                    122,
                    1403,
                    124,
                    126,
                    1407
                ],
                "cbook.warn_deprecated": [
                    80,
                    602,
                    1208
                ],
                "ind": [
                    91,
                    92
                ],
                "e": [
                    91,
                    92
                ],
                "remove": [
                    96,
                    124
                ],
                "self._entry_from_axes": [
                    96,
                    103
                ],
                "bubble": [
                    103
                ],
                "cbook._check_isinstance": [
                    116
                ],
                "Axes": [
                    1228,
                    116
                ],
                "a_existing": [
                    122,
                    123,
                    124
                ],
                "self.get": [
                    122
                ],
                "cbook._warn_external": [
                    1858,
                    2346,
                    1938,
                    412,
                    125,
                    2398,
                    2175
                ],
                "push": [
                    132
                ],
                "self._default": [
                    141
                ],
                "index": [
                    143
                ],
                "axes": [
                    144,
                    426,
                    143
                ],
                "self._pos": [
                    143
                ],
                "self.current_key_axes": [
                    147
                ],
                "self.as_list": [
                    150
                ],
                "_AxesStack": [
                    154,
                    354
                ],
                "cbook.deprecated": [
                    153
                ],
                "self.validate": [
                    188,
                    198
                ],
                "mpl.rcParams": [
                    318,
                    551,
                    2664,
                    2091,
                    2093,
                    720,
                    474,
                    722,
                    310,
                    312,
                    314,
                    316,
                    509,
                    190
                ],
                "mpl": [
                    318,
                    551,
                    2664,
                    2091,
                    2093,
                    720,
                    474,
                    722,
                    310,
                    312,
                    314,
                    316,
                    509,
                    190
                ],
                "self.update": [
                    191
                ],
                "left": [
                    2180,
                    199,
                    205,
                    206,
                    191
                ],
                "bottom": [
                    2180,
                    202,
                    624,
                    209,
                    210,
                    191
                ],
                "right": [
                    2180,
                    200,
                    207,
                    208,
                    191
                ],
                "top": [
                    2180,
                    203,
                    211,
                    212,
                    191
                ],
                "wspace": [
                    578,
                    2180,
                    2361,
                    2353,
                    213,
                    214,
                    569,
                    734,
                    191
                ],
                "hspace": [
                    578,
                    2180,
                    2353,
                    215,
                    216,
                    2361,
                    570,
                    734,
                    191
                ],
                "self.left": [
                    206,
                    199
                ],
                "self.right": [
                    200,
                    208
                ],
                "self.bottom": [
                    210,
                    202
                ],
                "self.top": [
                    203,
                    212
                ],
                "self.wspace": [
                    214
                ],
                "self.hspace": [
                    216
                ],
                "Artist": [
                    219
                ],
                "self.bbox.size": [
                    240,
                    245
                ],
                "self.bbox": [
                    328,
                    649,
                    330,
                    240,
                    656,
                    245
                ],
                "self.__class__.__name__": [
                    244
                ],
                "self.__class__": [
                    244
                ],
                "self.axes": [
                    2305,
                    2181,
                    2453,
                    2099,
                    1593,
                    2109,
                    1741,
                    2513,
                    2265,
                    2396,
                    606,
                    607,
                    608,
                    1633,
                    2406,
                    1900,
                    1652,
                    246,
                    631,
                    1654
                ],
                "self._axes": [
                    306
                ],
                "self.callbacks": [
                    307,
                    453,
                    1591
                ],
                "cbook.CallbackRegistry": [
                    1608,
                    307,
                    1591
                ],
                "figsize": [
                    320,
                    832,
                    322,
                    323,
                    309,
                    310,
                    831
                ],
                "dpi": [
                    576,
                    449,
                    450,
                    325,
                    327,
                    455,
                    574,
                    830,
                    831,
                    311,
                    312,
                    446,
                    575
                ],
                "facecolor": [
                    313,
                    314,
                    334
                ],
                "edgecolor": [
                    315,
                    316,
                    334
                ],
                "frameon": [
                    1018,
                    333,
                    317,
                    318
                ],
                "np.isfinite": [
                    320,
                    1235,
                    2316,
                    879
                ],
                "np": [
                    320,
                    2667,
                    2316,
                    910,
                    878,
                    879,
                    2514,
                    1235,
                    1077,
                    2454,
                    2677,
                    2649,
                    2653,
                    2654
                ],
                "np.array": [
                    320,
                    2667,
                    910,
                    878,
                    2653,
                    2654
                ],
                "self.bbox_inches": [
                    323,
                    328,
                    910,
                    2320,
                    881,
                    922,
                    926
                ],
                "Bbox.from_bounds": [
                    323
                ],
                "Bbox": [
                    2322,
                    323
                ],
                "self.dpi_scale_trans": [
                    328,
                    450,
                    325
                ],
                "scale": [
                    450,
                    2324,
                    325
                ],
                "Affine2D": [
                    2324,
                    325
                ],
                "self._dpi": [
                    449,
                    435,
                    446,
                    327
                ],
                "TransformedBbox": [
                    328,
                    2324
                ],
                "self.transFigure": [
                    1801,
                    330,
                    1047,
                    1818,
                    1755
                ],
                "BboxTransformTo": [
                    330
                ],
                "self.patch": [
                    938,
                    332,
                    337,
                    338,
                    914,
                    948,
                    629,
                    918,
                    1015,
                    1050,
                    1628,
                    1661,
                    958
                ],
                "Rectangle": [
                    332
                ],
                "linewidth": [
                    334
                ],
                "self._set_artist_props": [
                    337
                ],
                "self.patch.set_antialiased": [
                    338
                ],
                "FigureCanvasBase": [
                    1945,
                    340
                ],
                "self._suptitle": [
                    737,
                    738,
                    744,
                    745,
                    727,
                    1609,
                    1928,
                    749,
                    1929,
                    725,
                    341,
                    726,
                    728,
                    731,
                    732
                ],
                "subplotpars": [
                    344,
                    346,
                    343
                ],
                "SubplotParams": [
                    344
                ],
                "self.subplotpars": [
                    346,
                    2180
                ],
                "self._layoutbox": [
                    736,
                    2333,
                    2345,
                    1611,
                    2330,
                    1946,
                    2331,
                    348,
                    733
                ],
                "self.set_constrained_layout": [
                    2174,
                    350
                ],
                "constrained_layout": [
                    350
                ],
                "self.set_tight_layout": [
                    352
                ],
                "tight_layout": [
                    352
                ],
                "self._axstack": [
                    1600,
                    354,
                    1571,
                    1890,
                    1223,
                    424,
                    1832,
                    1388,
                    1868,
                    1400,
                    1243,
                    1407
                ],
                "self.clf": [
                    1616,
                    355
                ],
                "self._cachedRenderer": [
                    1680,
                    356,
                    1621,
                    1677
                ],
                "self._align_xlabel_grp": [
                    361,
                    2470
                ],
                "cbook.Grouper": [
                    361,
                    362
                ],
                "self._align_ylabel_grp": [
                    362,
                    2530
                ],
                "self._gridspecs": [
                    2597,
                    365
                ],
                "self.canvas": [
                    1920,
                    2106,
                    1669,
                    405,
                    374,
                    759,
                    410,
                    1597
                ],
                "backend_webagg.ipython_inline_display": [
                    376
                ],
                "backend_webagg": [
                    376
                ],
                "self.canvas.manager": [
                    410,
                    405
                ],
                "self.canvas.manager.show": [
                    410
                ],
                "NonGuiException": [
                    411
                ],
                "exc": [
                    412
                ],
                "self._axstack.as_list": [
                    424
                ],
                "get_axes": [
                    426
                ],
                "self.dpi_scale_trans.clear": [
                    450
                ],
                "w": [
                    451,
                    452,
                    877,
                    878
                ],
                "h": [
                    451,
                    452,
                    876,
                    877,
                    878
                ],
                "self.get_size_inches": [
                    451
                ],
                "self.set_size_inches": [
                    832,
                    986,
                    1003,
                    452
                ],
                "forward": [
                    986,
                    882,
                    1003,
                    452
                ],
                "self.callbacks.process": [
                    453
                ],
                "_get_dpi": [
                    455
                ],
                "_set_dpi": [
                    455
                ],
                "self._tight": [
                    459,
                    475
                ],
                "tight": [
                    473,
                    474,
                    475,
                    476
                ],
                "self._tight_parameters": [
                    1656,
                    476
                ],
                "self.stale": [
                    1761,
                    1410,
                    1667,
                    516,
                    1573,
                    1958,
                    969,
                    843,
                    748,
                    1612,
                    625,
                    2193,
                    1811,
                    2141,
                    1016,
                    889,
                    1052,
                    477
                ],
                "self._constrained": [
                    485,
                    510
                ],
                "self._constrained_layout_pads": [
                    548,
                    567,
                    550,
                    568,
                    569,
                    570,
                    503,
                    504,
                    505,
                    506,
                    507
                ],
                "constrained": [
                    512,
                    508,
                    509,
                    510,
                    511
                ],
                "self.set_constrained_layout_pads": [
                    512,
                    514
                ],
                "todo": [
                    545,
                    546
                ],
                "td": [
                    546,
                    547,
                    548,
                    550,
                    551
                ],
                "kwargs": [
                    1803,
                    547,
                    548,
                    1864,
                    2595,
                    2596,
                    2091,
                    1839,
                    2096,
                    2097,
                    1846,
                    1207,
                    1082,
                    2106,
                    1214,
                    834,
                    1218,
                    708,
                    710,
                    711,
                    1222,
                    713,
                    714,
                    715,
                    716,
                    1740,
                    718,
                    719,
                    720,
                    721,
                    722,
                    1106,
                    724,
                    1362,
                    1238,
                    1239,
                    1743,
                    1113,
                    1115,
                    1755,
                    1758,
                    1375,
                    1249,
                    2405,
                    2408,
                    2409,
                    1386,
                    1387,
                    1401
                ],
                "w_pad": [
                    578,
                    2407,
                    2353,
                    2357,
                    567,
                    2361,
                    572,
                    734,
                    575
                ],
                "h_pad": [
                    576,
                    578,
                    2407,
                    747,
                    2353,
                    2358,
                    568,
                    2361,
                    572,
                    734
                ],
                "relative": [
                    572
                ],
                "renderer0": [
                    576,
                    573,
                    574,
                    575
                ],
                "layoutbox.get_renderer": [
                    2360,
                    573
                ],
                "layoutbox": [
                    737,
                    745,
                    1611,
                    2360,
                    2331,
                    573
                ],
                "renderer0.dpi": [
                    574
                ],
                "renderer0.width": [
                    575
                ],
                "renderer0.height": [
                    576
                ],
                "which": [
                    608,
                    601,
                    619,
                    615
                ],
                "allsubplots": [
                    612,
                    606,
                    623
                ],
                "ax": [
                    1563,
                    1565,
                    1567,
                    1571,
                    1575,
                    1579,
                    2099,
                    2100,
                    1593,
                    1594,
                    1595,
                    2109,
                    2110,
                    2111,
                    2121,
                    2122,
                    2128,
                    2130,
                    2132,
                    606,
                    1633,
                    1634,
                    1636,
                    613,
                    614,
                    615,
                    1637,
                    1639,
                    1641,
                    619,
                    621,
                    2181,
                    2182,
                    2184,
                    2185,
                    2186,
                    2187,
                    2188,
                    2189,
                    2191,
                    2192,
                    1223,
                    1224,
                    1225,
                    1226,
                    2265,
                    2266,
                    2267,
                    1243,
                    1244,
                    1245,
                    1246,
                    2305,
                    2306,
                    2310,
                    2313,
                    1369,
                    1370,
                    1388,
                    1389,
                    1390,
                    1900,
                    1392,
                    1393,
                    1901,
                    1400,
                    1401,
                    1403,
                    1407,
                    1408,
                    1409,
                    1411,
                    1412,
                    2455,
                    2456,
                    2457,
                    2458,
                    2470,
                    2515,
                    2516,
                    2517,
                    2518,
                    2530
                ],
                "label": [
                    608,
                    609,
                    610,
                    615,
                    616,
                    617,
                    619,
                    620
                ],
                "get_xticklabels": [
                    608
                ],
                "label.set_ha": [
                    616,
                    609
                ],
                "ha": [
                    616,
                    609
                ],
                "label.set_rotation": [
                    617,
                    610
                ],
                "rotation": [
                    617,
                    610
                ],
                "self.get_axes": [
                    613
                ],
                "ax.is_last_row": [
                    614
                ],
                "ax.get_xticklabels": [
                    619,
                    615
                ],
                "label.set_visible": [
                    620
                ],
                "ax.set_xlabel": [
                    621
                ],
                "self.subplots_adjust": [
                    624,
                    2409
                ],
                "self.artists": [
                    1601,
                    1043,
                    1044,
                    630
                ],
                "self.lines": [
                    632,
                    1602
                ],
                "self.patches": [
                    633,
                    1603
                ],
                "self.texts": [
                    1809,
                    634,
                    1810,
                    1604
                ],
                "self.images": [
                    841,
                    842,
                    635,
                    1605
                ],
                "self.legends": [
                    1760,
                    636,
                    1606,
                    1759
                ],
                "inside": [
                    646,
                    647,
                    648,
                    649,
                    650
                ],
                "info": [
                    648,
                    646
                ],
                "self._default_contains": [
                    646
                ],
                "mouseevent": [
                    649,
                    646
                ],
                "self.bbox.contains": [
                    649
                ],
                "mouseevent.x": [
                    649
                ],
                "mouseevent.y": [
                    649
                ],
                "manual_position": [
                    708,
                    733
                ],
                "x": [
                    710,
                    1805,
                    724,
                    727,
                    831
                ],
                "kwargs.pop": [
                    1218,
                    2595,
                    710,
                    711,
                    1755
                ],
                "y": [
                    727,
                    724,
                    1805,
                    711
                ],
                "sup": [
                    728,
                    729,
                    731,
                    724
                ],
                "self.text": [
                    724
                ],
                "t": [
                    724,
                    726
                ],
                "self._suptitle.set_text": [
                    726
                ],
                "self._suptitle.set_position": [
                    727
                ],
                "self._suptitle.update_from": [
                    728
                ],
                "sup.remove": [
                    729
                ],
                "self._suptitle._layoutbox": [
                    737,
                    744,
                    1929,
                    745,
                    732
                ],
                "self.get_constrained_layout_pads": [
                    2353,
                    735
                ],
                "figlb": [
                    736,
                    738,
                    739,
                    743
                ],
                "layoutbox.LayoutBox": [
                    737,
                    2331
                ],
                "figlb.name": [
                    739
                ],
                "child": [
                    743,
                    744,
                    1641,
                    746,
                    1642,
                    1643,
                    1645,
                    1646,
                    1648
                ],
                "figlb.children": [
                    743
                ],
                "layoutbox.vstack": [
                    745
                ],
                "canvas": [
                    883,
                    884,
                    885,
                    886,
                    759
                ],
                "resize": [
                    829
                ],
                "self.get_dpi": [
                    830
                ],
                "X.shape": [
                    831
                ],
                "X": [
                    837,
                    831
                ],
                "im": [
                    834,
                    835,
                    837,
                    838,
                    1893,
                    840,
                    841,
                    842,
                    1894,
                    844,
                    1895,
                    1901,
                    1902,
                    1903
                ],
                "mimage.FigureImage": [
                    834
                ],
                "mimage": [
                    834,
                    1662
                ],
                "cmap": [
                    834
                ],
                "norm": [
                    834,
                    839
                ],
                "xo": [
                    834
                ],
                "yo": [
                    834
                ],
                "origin": [
                    834
                ],
                "im.stale_callback": [
                    835
                ],
                "_stale_figure_callback": [
                    1817,
                    835,
                    1411,
                    1807
                ],
                "im.set_array": [
                    837
                ],
                "im.set_alpha": [
                    838
                ],
                "alpha": [
                    838
                ],
                "im.set_clim": [
                    840
                ],
                "vmin": [
                    840
                ],
                "vmax": [
                    840
                ],
                "self.images.append": [
                    841
                ],
                "im._remove_method": [
                    842
                ],
                "self.images.remove": [
                    842
                ],
                "size": [
                    878,
                    879,
                    880,
                    881,
                    888
                ],
                "self.bbox_inches.p1": [
                    881,
                    910
                ],
                "dpi_ratio": [
                    888,
                    885
                ],
                "manager": [
                    888,
                    886,
                    887
                ],
                "manager.resize": [
                    888
                ],
                "astype": [
                    888
                ],
                "self.dpi": [
                    888,
                    930,
                    2324,
                    968
                ],
                "self.patch.get_edgecolor": [
                    914
                ],
                "self.patch.get_facecolor": [
                    918
                ],
                "self.bbox_inches.width": [
                    922
                ],
                "self.bbox_inches.height": [
                    926
                ],
                "self.patch.get_visible": [
                    938
                ],
                "self.patch.set_edgecolor": [
                    948
                ],
                "color": [
                    948,
                    958
                ],
                "self.patch.set_facecolor": [
                    958
                ],
                "self.get_figheight": [
                    986
                ],
                "self.get_figwidth": [
                    1003
                ],
                "self.patch.set_visible": [
                    1015
                ],
                "b": [
                    2315,
                    2316,
                    2317,
                    1015
                ],
                "get_frameon": [
                    1018
                ],
                "set_frameon": [
                    1018
                ],
                "artist.set_figure": [
                    1042
                ],
                "artist": [
                    2263,
                    1042,
                    1043,
                    1044,
                    1046,
                    1047,
                    2264,
                    1050,
                    1053,
                    1630,
                    1631
                ],
                "self.artists.append": [
                    1043
                ],
                "artist._remove_method": [
                    1044
                ],
                "self.artists.remove": [
                    1044
                ],
                "artist.is_transform_set": [
                    1046
                ],
                "artist.set_transform": [
                    1047
                ],
                "clip": [
                    1049
                ],
                "artist.set_clip_path": [
                    1050
                ],
                "ret": [
                    1061,
                    1071,
                    1072,
                    1075,
                    1079,
                    1080
                ],
                "v": [
                    2137,
                    1068,
                    1062,
                    1071
                ],
                "items": [
                    1062
                ],
                "ret.append": [
                    1079,
                    1071
                ],
                "args": [
                    1076,
                    1207,
                    1082,
                    1215,
                    1218,
                    1222,
                    1228,
                    1229,
                    1742,
                    1234,
                    1239,
                    1368,
                    1369,
                    1113,
                    1375,
                    1378,
                    1379,
                    1383,
                    1384,
                    1385,
                    1387,
                    1401
                ],
                "np.iterable": [
                    1077
                ],
                "fixlist": [
                    1082
                ],
                "fixitems": [
                    1082
                ],
                "kwargs.items": [
                    1082
                ],
                "polar": [
                    1094
                ],
                "projection": [
                    1095,
                    1099,
                    1100,
                    1102,
                    1103,
                    1104,
                    1105,
                    1109
                ],
                "projection_class": [
                    1249,
                    1386,
                    1390,
                    1103,
                    1105,
                    1845,
                    1238,
                    1401,
                    1115,
                    1244,
                    1855
                ],
                "projections.get_projection_class": [
                    1103
                ],
                "projections": [
                    1103
                ],
                "extra_kwargs": [
                    1105,
                    1106
                ],
                "projection._as_mpl_axes": [
                    1105
                ],
                "kwargs.update": [
                    1106
                ],
                "self._make_key": [
                    1113,
                    1222,
                    1375
                ],
                "self._axstack.get": [
                    1243,
                    1388,
                    1223
                ],
                "self.sca": [
                    1408,
                    1225,
                    1392,
                    2140,
                    1245
                ],
                "a.get_figure": [
                    1230
                ],
                "rect": [
                    1249,
                    2407,
                    1234,
                    1235,
                    1237
                ],
                "self._process_projection_requirements": [
                    1387,
                    1846,
                    1239
                ],
                "self._add_axes_internal": [
                    1403,
                    1251
                ],
                "docstring.dedent_interpd": [
                    2113,
                    1764,
                    1253,
                    1686,
                    1820,
                    1117
                ],
                "docstring": [
                    2113,
                    1764,
                    1253,
                    1686,
                    2680,
                    1820,
                    1117
                ],
                "SubplotBase": [
                    2182,
                    2184,
                    2187,
                    2128,
                    1368
                ],
                "ax.get_figure": [
                    1370
                ],
                "Integral": [
                    1383
                ],
                "self._axstack.remove": [
                    1400,
                    1571
                ],
                "subplot_class_factory": [
                    1401
                ],
                "self._axstack.add": [
                    1407
                ],
                "ax._remove_method": [
                    1409
                ],
                "self.delaxes": [
                    1409,
                    1595
                ],
                "ax.stale_callback": [
                    1411
                ],
                "gridspec_kw": [
                    1520,
                    1521,
                    1519
                ],
                "subplots": [
                    1521
                ],
                "self.add_gridspec": [
                    1521
                ],
                "nrows": [
                    1521,
                    2596
                ],
                "ncols": [
                    1521,
                    2596
                ],
                "sharex": [
                    1522
                ],
                "sharey": [
                    1522
                ],
                "squeeze": [
                    1522
                ],
                "subplot_kw": [
                    1523
                ],
                "cbook._make_keyword_only": [
                    1414
                ],
                "majfmt": [
                    1538,
                    1539,
                    1540,
                    1542
                ],
                "axis.get_major_formatter": [
                    1538
                ],
                "axis": [
                    1538,
                    1540,
                    1544,
                    1546,
                    1550,
                    1552,
                    1556,
                    1558
                ],
                "isDefault": [
                    1539,
                    1541,
                    1545,
                    1547,
                    1551,
                    1553,
                    1557,
                    1559
                ],
                "majfmt.axis.isDefault_majfmt": [
                    1539,
                    1542
                ],
                "majfmt.axis": [
                    1539,
                    1542
                ],
                "axis.set_major_formatter": [
                    1540
                ],
                "majloc": [
                    1544,
                    1545,
                    1546,
                    1548,
                    1551,
                    1557
                ],
                "axis.get_major_locator": [
                    1544
                ],
                "majloc.axis.isDefault_majloc": [
                    1545,
                    1548
                ],
                "majloc.axis": [
                    1545,
                    1548,
                    1557,
                    1551
                ],
                "axis.set_major_locator": [
                    1546
                ],
                "minfmt": [
                    1552,
                    1554,
                    1550
                ],
                "axis.get_minor_formatter": [
                    1550
                ],
                "majloc.axis.isDefault_minfmt": [
                    1551
                ],
                "axis.set_minor_formatter": [
                    1552
                ],
                "minfmt.axis.isDefault_minfmt": [
                    1554
                ],
                "minfmt.axis": [
                    1554
                ],
                "minloc": [
                    1560,
                    1556,
                    1558
                ],
                "axis.get_minor_locator": [
                    1556
                ],
                "majloc.axis.isDefault_minloc": [
                    1557
                ],
                "axis.set_minor_locator": [
                    1558
                ],
                "minloc.axis.isDefault_minloc": [
                    1560
                ],
                "minloc.axis": [
                    1560
                ],
                "siblings": [
                    1563,
                    1564,
                    1566
                ],
                "grouper.get_siblings": [
                    1563
                ],
                "grouper": [
                    1563,
                    1565
                ],
                "grouper.remove": [
                    1565
                ],
                "last_ax": [
                    1568,
                    1575,
                    1576,
                    1577,
                    1579,
                    1580,
                    1581,
                    1566,
                    1567
                ],
                "self._axobservers.process": [
                    1572,
                    1869
                ],
                "self._axobservers": [
                    1608,
                    1964,
                    1572,
                    1869
                ],
                "_break_share_link": [
                    1579,
                    1575
                ],
                "ax._shared_y_axes": [
                    1575
                ],
                "_reset_locators_and_formatters": [
                    1577,
                    1581
                ],
                "last_ax.yaxis": [
                    1577
                ],
                "ax._shared_x_axes": [
                    1579
                ],
                "last_ax.xaxis": [
                    1581
                ],
                "self.suppressComposite": [
                    1590,
                    1663
                ],
                "ax.cla": [
                    1594
                ],
                "toolbar": [
                    1597,
                    1598,
                    1599
                ],
                "toolbar.update": [
                    1599
                ],
                "self._axstack.clear": [
                    1600
                ],
                "keep_observers": [
                    1616,
                    1607
                ],
                "self.get_constrained_layout": [
                    2129,
                    1610,
                    1652,
                    2173
                ],
                "layoutbox.nonetree": [
                    1611
                ],
                "renderer": [
                    1665,
                    2402,
                    2403,
                    1636,
                    1669,
                    2406,
                    2311,
                    2361,
                    2313,
                    1645,
                    1651,
                    1653,
                    1621,
                    2359,
                    2360,
                    2301,
                    1661,
                    1663
                ],
                "self.get_visible": [
                    1624
                ],
                "artists": [
                    2300,
                    2296,
                    2298,
                    1627,
                    1628,
                    1629,
                    1630,
                    1663
                ],
                "self.get_children": [
                    1627,
                    2263
                ],
                "artists.remove": [
                    1628
                ],
                "artist.get_animated": [
                    1630
                ],
                "artist.get_zorder": [
                    1631
                ],
                "locator": [
                    1634,
                    1635,
                    1636,
                    1643,
                    1644,
                    1645
                ],
                "ax.get_axes_locator": [
                    1634
                ],
                "pos": [
                    2528,
                    2465,
                    2467,
                    1636,
                    1637,
                    2468,
                    1645,
                    1646,
                    2518,
                    2458,
                    2525,
                    2527
                ],
                "ax.apply_aspect": [
                    1637,
                    1639
                ],
                "ax.get_children": [
                    1641
                ],
                "child.get_axes_locator": [
                    1643
                ],
                "child.apply_aspect": [
                    1648,
                    1646
                ],
                "renderer.open_group": [
                    1651
                ],
                "self.get_gid": [
                    1651
                ],
                "self.execute_constrained_layout": [
                    1653
                ],
                "self.get_tight_layout": [
                    1654
                ],
                "self.tight_layout": [
                    1656
                ],
                "self.patch.draw": [
                    1661
                ],
                "mimage._draw_list_compositing_images": [
                    1662
                ],
                "renderer.close_group": [
                    1665
                ],
                "self.canvas.draw_event": [
                    1669
                ],
                "allow_rasterization": [
                    1618
                ],
                "a.draw": [
                    1680
                ],
                "handles": [
                    1740,
                    1757
                ],
                "labels": [
                    1740,
                    1757
                ],
                "extra_args": [
                    1745,
                    1740,
                    1757
                ],
                "mlegend._parse_legend_args": [
                    1740
                ],
                "mlegend": [
                    1740,
                    1757
                ],
                "transform": [
                    1755,
                    1758
                ],
                "l": [
                    1760,
                    1762,
                    1757,
                    1759
                ],
                "mlegend.Legend": [
                    1757
                ],
                "self.legends.append": [
                    1759
                ],
                "l._remove_method": [
                    1760
                ],
                "self.legends.remove": [
                    1760
                ],
                "effective_kwargs": [
                    1800,
                    1805
                ],
                "fontdict": [
                    1802
                ],
                "text": [
                    1805,
                    1806,
                    1807,
                    1809,
                    1810,
                    1812
                ],
                "Text": [
                    1805
                ],
                "s": [
                    1805
                ],
                "text.set_figure": [
                    1806
                ],
                "text.stale_callback": [
                    1807
                ],
                "self.texts.append": [
                    1809
                ],
                "text._remove_method": [
                    1810
                ],
                "self.texts.remove": [
                    1810
                ],
                "a.set_figure": [
                    1816
                ],
                "a.stale_callback": [
                    1817
                ],
                "a.set_transform": [
                    1818
                ],
                "ckey": [
                    1832,
                    1850,
                    1855
                ],
                "cax": [
                    1856,
                    1890,
                    1891,
                    1893,
                    1832,
                    1835,
                    2127,
                    1840,
                    2130,
                    2132,
                    2138,
                    1855
                ],
                "self._axstack.current_key_axes": [
                    1832,
                    1890
                ],
                "_": [
                    2595,
                    1845
                ],
                "self.add_subplot": [
                    1864
                ],
                "self._axstack.bubble": [
                    1868
                ],
                "cax._gci": [
                    1893
                ],
                "ax._gci": [
                    1901
                ],
                "state": [
                    1922,
                    1926,
                    1931,
                    1934,
                    1935,
                    1907,
                    1942,
                    1913,
                    1916
                ],
                "__getstate__": [
                    1907
                ],
                "attr_to_pop": [
                    1912,
                    1913
                ],
                "state.pop": [
                    1913,
                    1934,
                    1926,
                    1935
                ],
                "_mpl_version": [
                    1937,
                    1916
                ],
                "_pylab_helpers.Gcf.figs.values": [
                    1921
                ],
                "_pylab_helpers.Gcf.figs": [
                    1921
                ],
                "_pylab_helpers.Gcf": [
                    1921
                ],
                "_pylab_helpers": [
                    1921
                ],
                "version": [
                    1937,
                    1939,
                    1934
                ],
                "restore_to_pylab": [
                    1948,
                    1935
                ],
                "self.__dict__": [
                    1942
                ],
                "allnums": [
                    1952,
                    1953
                ],
                "plt.get_fignums": [
                    1952
                ],
                "plt": [
                    1952,
                    1954,
                    1956
                ],
                "num": [
                    1953,
                    1954
                ],
                "mgr": [
                    1954,
                    1955
                ],
                "plt._backend_mod.new_figure_manager_given_figure": [
                    1954
                ],
                "plt._backend_mod": [
                    1954
                ],
                "pylab_helpers.Gcf._set_new_active_manager": [
                    1955
                ],
                "pylab_helpers.Gcf": [
                    1955
                ],
                "pylab_helpers": [
                    1955
                ],
                "plt.draw_if_interactive": [
                    1956
                ],
                "self._axobservers.connect": [
                    1964
                ],
                "func": [
                    1964
                ],
                "arg": [
                    2649,
                    2658,
                    1964,
                    2661
                ],
                "kwargs.setdefault": [
                    2096,
                    2097,
                    2091
                ],
                "transparent": [
                    2092,
                    2093,
                    2108,
                    2095
                ],
                "original_axes_colors": [
                    2098,
                    2109,
                    2101
                ],
                "patch": [
                    2100,
                    2101,
                    2102,
                    2103,
                    2104
                ],
                "ax.patch": [
                    2100,
                    2110,
                    2111
                ],
                "original_axes_colors.append": [
                    2101
                ],
                "patch.get_facecolor": [
                    2101
                ],
                "patch.get_edgecolor": [
                    2102
                ],
                "patch.set_facecolor": [
                    2103
                ],
                "patch.set_edgecolor": [
                    2104
                ],
                "self.canvas.print_figure": [
                    2106
                ],
                "fname": [
                    2106
                ],
                "cc": [
                    2109,
                    2110,
                    2111
                ],
                "ax.patch.set_facecolor": [
                    2110
                ],
                "ax.patch.set_edgecolor": [
                    2111
                ],
                "self.gca": [
                    2122,
                    2125
                ],
                "current_ax": [
                    2140,
                    2125
                ],
                "use_gridspec": [
                    2128
                ],
                "kw": [
                    2137,
                    2130,
                    2132
                ],
                "cbar.make_axes_gridspec": [
                    2130
                ],
                "cbar": [
                    2130,
                    2132,
                    2138
                ],
                "cbar.make_axes": [
                    2132
                ],
                "NON_COLORBAR_KEYS": [
                    2137,
                    2135
                ],
                "cb_kw": [
                    2137,
                    2138
                ],
                "kw.items": [
                    2137
                ],
                "cb": [
                    2138,
                    2142
                ],
                "cbar.colorbar_factory": [
                    2138
                ],
                "mappable": [
                    2138
                ],
                "self.subplotpars.update": [
                    2180
                ],
                "ax._sharex": [
                    2184,
                    2185,
                    2186
                ],
                "ax._sharex.update_params": [
                    2185
                ],
                "ax.set_position": [
                    2192,
                    2186,
                    2189
                ],
                "ax._sharex.figbox": [
                    2186
                ],
                "ax._sharey": [
                    2187,
                    2188,
                    2189
                ],
                "ax._sharey.update_params": [
                    2188
                ],
                "ax._sharey.figbox": [
                    2189
                ],
                "ax.update_params": [
                    2191
                ],
                "ax.figbox": [
                    2192
                ],
                "MouseButton.LEFT": [
                    2196
                ],
                "MouseButton": [
                    2196,
                    2197,
                    2198
                ],
                "MouseButton.RIGHT": [
                    2197
                ],
                "MouseButton.MIDDLE": [
                    2198
                ],
                "blocking_mouse_input": [
                    2248,
                    2244
                ],
                "BlockingMouseInput": [
                    2244
                ],
                "mouse_add": [
                    2245
                ],
                "mouse_pop": [
                    2246
                ],
                "mouse_stop": [
                    2247
                ],
                "n": [
                    2248
                ],
                "timeout": [
                    2248,
                    2260
                ],
                "show_clicks": [
                    2249
                ],
                "blocking_input": [
                    2259,
                    2260
                ],
                "BlockingKeyMouseInput": [
                    2259
                ],
                "bbox_artists": [
                    2267,
                    2268,
                    2263
                ],
                "artist.get_visible": [
                    2264
                ],
                "artist.get_in_layout": [
                    2264
                ],
                "ax.get_visible": [
                    2266,
                    2306
                ],
                "bbox_artists.extend": [
                    2267
                ],
                "ax.get_default_bbox_extra_artists": [
                    2267
                ],
                "bb": [
                    2314,
                    2315,
                    2319,
                    2322,
                    2294,
                    2303
                ],
                "bbox_extra_artists": [
                    2298,
                    2311,
                    2295
                ],
                "self.get_default_bbox_extra_artists": [
                    2296
                ],
                "bbox": [
                    2310,
                    2313,
                    2314,
                    2301,
                    2302,
                    2303
                ],
                "a.get_tightbbox": [
                    2301
                ],
                "bbox.width": [
                    2302
                ],
                "bbox.height": [
                    2302
                ],
                "bb.append": [
                    2314,
                    2303
                ],
                "ax.get_tightbbox": [
                    2313,
                    2310
                ],
                "b.width": [
                    2316,
                    2317
                ],
                "b.height": [
                    2316,
                    2317
                ],
                "_bbox": [
                    2322,
                    2324
                ],
                "Bbox.union": [
                    2322
                ],
                "bbox_inches": [
                    2324,
                    2326
                ],
                "self._layoutbox.constrain_geometry": [
                    2333
                ],
                "_log.debug": [
                    2344,
                    2516,
                    2456
                ],
                "fig": [
                    2360,
                    2361,
                    2355,
                    2356
                ],
                "width": [
                    2356,
                    2357
                ],
                "height": [
                    2356,
                    2358
                ],
                "fig.get_size_inches": [
                    2356
                ],
                "do_constrained_layout": [
                    2361
                ],
                "subplotspec_list": [
                    2396,
                    2397,
                    2406
                ],
                "get_subplotspec_list": [
                    2396
                ],
                "get_renderer": [
                    2403
                ],
                "get_tight_layout_figure": [
                    2405
                ],
                "pad": [
                    2407
                ],
                "cbook._delete_parameter": [
                    2363
                ],
                "axs": [
                    2464,
                    2512,
                    2513,
                    2514,
                    2515,
                    2452,
                    2453,
                    2454,
                    2455,
                    2553,
                    2554,
                    2524
                ],
                "np.ravel": [
                    2514,
                    2454
                ],
                "ax.get_xlabel": [
                    2456
                ],
                "rowspan": [
                    2457,
                    2466,
                    2467,
                    2468
                ],
                "ax.get_subplotspec": [
                    2457,
                    2517
                ],
                "ax.xaxis.get_label_position": [
                    2458
                ],
                "ax.xaxis": [
                    2458
                ],
                "axc": [
                    2464,
                    2465,
                    2466,
                    2530,
                    2470,
                    2524,
                    2525,
                    2526
                ],
                "axc.xaxis.get_label_position": [
                    2465
                ],
                "axc.xaxis": [
                    2465
                ],
                "rowspanc": [
                    2466,
                    2467,
                    2468
                ],
                "axc.get_subplotspec": [
                    2466,
                    2526
                ],
                "rowspan.start": [
                    2467
                ],
                "rowspanc.start": [
                    2467
                ],
                "rowspan.stop": [
                    2468
                ],
                "rowspanc.stop": [
                    2468
                ],
                "self._align_xlabel_grp.join": [
                    2470
                ],
                "ax.get_ylabel": [
                    2516
                ],
                "colspan": [
                    2528,
                    2517,
                    2526,
                    2527
                ],
                "ax.yaxis.get_label_position": [
                    2518
                ],
                "ax.yaxis": [
                    2518
                ],
                "axc.yaxis.get_label_position": [
                    2525
                ],
                "axc.yaxis": [
                    2525
                ],
                "colspanc": [
                    2528,
                    2526,
                    2527
                ],
                "colspan.start": [
                    2527
                ],
                "colspanc.start": [
                    2527
                ],
                "colspan.stop": [
                    2528
                ],
                "colspanc.stop": [
                    2528
                ],
                "self._align_ylabel_grp.join": [
                    2530
                ],
                "self.align_xlabels": [
                    2553
                ],
                "self.align_ylabels": [
                    2554
                ],
                "gs": [
                    2596,
                    2597,
                    2598
                ],
                "GridSpec": [
                    2596
                ],
                "self._gridspecs.append": [
                    2597
                ],
                "isarray": [
                    2657,
                    2649
                ],
                "np.isscalar": [
                    2649
                ],
                "figsize_min": [
                    2677,
                    2653,
                    2670
                ],
                "figsize_max": [
                    2673,
                    2677,
                    2654
                ],
                "nr": [
                    2658,
                    2659
                ],
                "nc": [
                    2658,
                    2659
                ],
                "arg.shape": [
                    2658
                ],
                "arr_ratio": [
                    2667,
                    2659,
                    2661
                ],
                "fig_height": [
                    2664,
                    2667
                ],
                "newsize": [
                    2667,
                    2670,
                    2673,
                    2677,
                    2678
                ],
                "np.clip": [
                    2677
                ],
                "docstring.interpd.update": [
                    2680
                ],
                "docstring.interpd": [
                    2680
                ],
                "martist.kwdoc": [
                    2680
                ],
                "martist": [
                    2680
                ],
                "Figure": [
                    2680
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_1/lib/matplotlib/tight_layout.py": {
            "buggy_functions": [
                {
                    "function_name": "get_renderer",
                    "function_code": "def get_renderer(fig):\n    if fig._cachedRenderer:\n        return fig._cachedRenderer\n    else:\n        canvas = fig.canvas\n        if canvas and hasattr(canvas, \"get_renderer\"):\n            return canvas.get_renderer()\n        else:\n            from . import backend_bases\n            return backend_bases._get_renderer(fig, draw_disabled=True)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 167,
                    "end_line": 176,
                    "variables": {
                        "fig._cachedRenderer": [
                            168,
                            169
                        ],
                        "fig": [
                            168,
                            169,
                            171,
                            176
                        ],
                        "canvas": [
                            171,
                            172,
                            173
                        ],
                        "fig.canvas": [
                            171
                        ],
                        "hasattr": [
                            172
                        ],
                        "canvas.get_renderer": [
                            173
                        ],
                        "backend_bases._get_renderer": [
                            176
                        ],
                        "backend_bases": [
                            176
                        ]
                    },
                    "filtered_variables": {
                        "fig._cachedRenderer": [
                            168,
                            169
                        ],
                        "fig": [
                            168,
                            169,
                            171,
                            176
                        ],
                        "canvas": [
                            171,
                            172,
                            173
                        ],
                        "fig.canvas": [
                            171
                        ],
                        "canvas.get_renderer": [
                            173
                        ],
                        "backend_bases._get_renderer": [
                            176
                        ],
                        "backend_bases": [
                            176
                        ]
                    },
                    "diff_line_number": 176,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def auto_adjust_subplotpars(\n        fig, renderer, nrows_ncols, num1num2_list, subplot_list,\n        ax_bbox_list=None, pad=1.08, h_pad=None, w_pad=None, rect=None):\n    \"\"\"\n    Return a dict of subplot parameters to adjust spacing between subplots\n    or ``None`` if resulting axes would have zero height or width.\n\n    Note that this function ignores geometry information of subplot\n    itself, but uses what is given by the *nrows_ncols* and *num1num2_list*\n    parameters.  Also, the results could be incorrect if some subplots have\n    ``adjustable=datalim``.\n\n    Parameters\n    ----------\n    nrows_ncols : Tuple[int, int]\n        Number of rows and number of columns of the grid.\n    num1num2_list : List[int]\n        List of numbers specifying the area occupied by the subplot\n    subplot_list : list of subplots\n        List of subplots that will be used to calculate optimal subplot_params.\n    pad : float\n        Padding between the figure edge and the edges of subplots, as a\n        fraction of the font size.\n    h_pad, w_pad : float\n        Padding (height/width) between edges of adjacent subplots, as a\n        fraction of the font size.  Defaults to *pad*.\n    rect : Tuple[float, float, float, float]\n        [left, bottom, right, top] in normalized (0, 1) figure coordinates.\n    \"\"\"\n    rows, cols = nrows_ncols\n\n    font_size_inches = (\n        FontProperties(size=rcParams[\"font.size\"]).get_size_in_points() / 72)\n    pad_inches = pad * font_size_inches\n    vpad_inches = h_pad * font_size_inches if h_pad is not None else pad_inches\n    hpad_inches = w_pad * font_size_inches if w_pad is not None else pad_inches\n\n    if len(num1num2_list) != len(subplot_list) or len(subplot_list) == 0:\n        raise ValueError\n\n    if rect is None:\n        margin_left = margin_bottom = margin_right = margin_top = None\n    else:\n        margin_left, margin_bottom, _right, _top = rect\n        margin_right = 1 - _right if _right else None\n        margin_top = 1 - _top if _top else None\n\n    vspaces = np.zeros((rows + 1, cols))\n    hspaces = np.zeros((rows, cols + 1))\n\n    if ax_bbox_list is None:\n        ax_bbox_list = [\n            Bbox.union([ax.get_position(original=True) for ax in subplots])\n            for subplots in subplot_list]\n\n    for subplots, ax_bbox, (num1, num2) in zip(subplot_list,\n                                               ax_bbox_list,\n                                               num1num2_list):\n        if all(not ax.get_visible() for ax in subplots):\n            continue\n\n        bb = []\n        for ax in subplots:\n            if ax.get_visible():\n                try:\n                    bb += [ax.get_tightbbox(renderer, for_layout_only=True)]\n                except TypeError:\n                    bb += [ax.get_tightbbox(renderer)]\n\n        tight_bbox_raw = Bbox.union(bb)\n        tight_bbox = TransformedBbox(tight_bbox_raw,\n                                     fig.transFigure.inverted())\n\n        row1, col1 = divmod(num1, cols)\n        if num2 is None:\n            num2 = num1\n        row2, col2 = divmod(num2, cols)\n\n        for row_i in range(row1, row2 + 1):\n            hspaces[row_i, col1] += ax_bbox.xmin - tight_bbox.xmin  # left\n            hspaces[row_i, col2 + 1] += tight_bbox.xmax - ax_bbox.xmax  # right\n        for col_i in range(col1, col2 + 1):\n            vspaces[row1, col_i] += tight_bbox.ymax - ax_bbox.ymax  # top\n            vspaces[row2 + 1, col_i] += ax_bbox.ymin - tight_bbox.ymin  # bot.\n\n    fig_width_inch, fig_height_inch = fig.get_size_inches()\n\n    # margins can be negative for axes with aspect applied, so use max(, 0) to\n    # make them nonnegative.\n    if not margin_left:\n        margin_left = (max(hspaces[:, 0].max(), 0)\n                       + pad_inches / fig_width_inch)\n    if not margin_right:\n        margin_right = (max(hspaces[:, -1].max(), 0)\n                        + pad_inches / fig_width_inch)\n    if not margin_top:\n        margin_top = (max(vspaces[0, :].max(), 0)\n                      + pad_inches / fig_height_inch)\n        suptitle = fig._suptitle\n        if suptitle and suptitle.get_in_layout():\n            rel_suptitle_height = fig.transFigure.inverted().transform_bbox(\n                suptitle.get_window_extent(renderer)).height\n            margin_top += rel_suptitle_height + pad_inches / fig_height_inch\n    if not margin_bottom:\n        margin_bottom = (max(vspaces[-1, :].max(), 0)\n                         + pad_inches / fig_height_inch)\n\n    if margin_left + margin_right >= 1:\n        cbook._warn_external('Tight layout not applied. The left and right '\n                             'margins cannot be made large enough to '\n                             'accommodate all axes decorations. ')\n        return None\n    if margin_bottom + margin_top >= 1:\n        cbook._warn_external('Tight layout not applied. The bottom and top '\n                             'margins cannot be made large enough to '\n                             'accommodate all axes decorations. ')\n        return None\n\n    kwargs = dict(left=margin_left,\n                  right=1 - margin_right,\n                  bottom=margin_bottom,\n                  top=1 - margin_top)\n\n    if cols > 1:\n        hspace = hspaces[:, 1:-1].max() + hpad_inches / fig_width_inch\n        # axes widths:\n        h_axes = (1 - margin_right - margin_left - hspace * (cols - 1)) / cols\n        if h_axes < 0:\n            cbook._warn_external('Tight layout not applied. tight_layout '\n                                 'cannot make axes width small enough to '\n                                 'accommodate all axes decorations')\n            return None\n        else:\n            kwargs[\"wspace\"] = hspace / h_axes\n    if rows > 1:\n        vspace = vspaces[1:-1, :].max() + vpad_inches / fig_height_inch\n        v_axes = (1 - margin_top - margin_bottom - vspace * (rows - 1)) / rows\n        if v_axes < 0:\n            cbook._warn_external('Tight layout not applied. tight_layout '\n                                 'cannot make axes height small enough to '\n                                 'accommodate all axes decorations')\n            return None\n        else:\n            kwargs[\"hspace\"] = vspace / v_axes\n\n    return kwargs",
                "def get_renderer(fig):\n    if fig._cachedRenderer:\n        return fig._cachedRenderer\n    else:\n        canvas = fig.canvas\n        if canvas and hasattr(canvas, \"get_renderer\"):\n            return canvas.get_renderer()\n        else:\n            from . import backend_bases\n            return backend_bases._get_renderer(fig, draw_disabled=True)",
                "def get_subplotspec_list(axes_list, grid_spec=None):\n    \"\"\"\n    Return a list of subplotspec from the given list of axes.\n\n    For an instance of axes that does not support subplotspec, None is inserted\n    in the list.\n\n    If grid_spec is given, None is inserted for those not from the given\n    grid_spec.\n    \"\"\"\n    subplotspec_list = []\n    for ax in axes_list:\n        axes_or_locator = ax.get_axes_locator()\n        if axes_or_locator is None:\n            axes_or_locator = ax\n\n        if hasattr(axes_or_locator, \"get_subplotspec\"):\n            subplotspec = axes_or_locator.get_subplotspec()\n            subplotspec = subplotspec.get_topmost_subplotspec()\n            gs = subplotspec.get_gridspec()\n            if grid_spec is not None:\n                if gs != grid_spec:\n                    subplotspec = None\n            elif gs.locally_modified_subplot_params():\n                subplotspec = None\n        else:\n            subplotspec = None\n\n        subplotspec_list.append(subplotspec)\n\n    return subplotspec_list",
                "def get_tight_layout_figure(fig, axes_list, subplotspec_list, renderer,\n                            pad=1.08, h_pad=None, w_pad=None, rect=None):\n    \"\"\"\n    Return subplot parameters for tight-layouted-figure with specified padding.\n\n    Parameters\n    ----------\n    fig : Figure\n    axes_list : list of Axes\n    subplotspec_list : list of `.SubplotSpec`\n        The subplotspecs of each axes.\n    renderer : renderer\n    pad : float\n        Padding between the figure edge and the edges of subplots, as a\n        fraction of the font size.\n    h_pad, w_pad : float\n        Padding (height/width) between edges of adjacent subplots.  Defaults to\n        *pad*.\n    rect : Tuple[float, float, float, float], optional\n        (left, bottom, right, top) rectangle in normalized figure coordinates\n        that the whole subplots area (including labels) will fit into.\n        Defaults to using the entire figure.\n\n    Returns\n    -------\n    subplotspec or None\n        subplotspec kwargs to be passed to `.Figure.subplots_adjust` or\n        None if tight_layout could not be accomplished.\n\n    \"\"\"\n\n    subplot_list = []\n    nrows_list = []\n    ncols_list = []\n    ax_bbox_list = []\n\n    # Multiple axes can share same subplot_interface (e.g., axes_grid1); thus\n    # we need to join them together.\n    subplot_dict = {}\n\n    subplotspec_list2 = []\n\n    for ax, subplotspec in zip(axes_list, subplotspec_list):\n        if subplotspec is None:\n            continue\n\n        subplots = subplot_dict.setdefault(subplotspec, [])\n\n        if not subplots:\n            myrows, mycols, _, _ = subplotspec.get_geometry()\n            nrows_list.append(myrows)\n            ncols_list.append(mycols)\n            subplotspec_list2.append(subplotspec)\n            subplot_list.append(subplots)\n            ax_bbox_list.append(subplotspec.get_position(fig))\n\n        subplots.append(ax)\n\n    if len(nrows_list) == 0 or len(ncols_list) == 0:\n        return {}\n\n    max_nrows = max(nrows_list)\n    max_ncols = max(ncols_list)\n\n    num1num2_list = []\n    for subplotspec in subplotspec_list2:\n        rows, cols, num1, num2 = subplotspec.get_geometry()\n        div_row, mod_row = divmod(max_nrows, rows)\n        div_col, mod_col = divmod(max_ncols, cols)\n        if mod_row != 0:\n            cbook._warn_external('tight_layout not applied: number of rows '\n                                 'in subplot specifications must be '\n                                 'multiples of one another.')\n            return {}\n        if mod_col != 0:\n            cbook._warn_external('tight_layout not applied: number of '\n                                 'columns in subplot specifications must be '\n                                 'multiples of one another.')\n            return {}\n\n        rowNum1, colNum1 = divmod(num1, cols)\n        if num2 is None:\n            rowNum2, colNum2 = rowNum1, colNum1\n        else:\n            rowNum2, colNum2 = divmod(num2, cols)\n\n        num1num2_list.append((rowNum1 * div_row * max_ncols +\n                              colNum1 * div_col,\n                              ((rowNum2 + 1) * div_row - 1) * max_ncols +\n                              (colNum2 + 1) * div_col - 1))\n\n    kwargs = auto_adjust_subplotpars(fig, renderer,\n                                     nrows_ncols=(max_nrows, max_ncols),\n                                     num1num2_list=num1num2_list,\n                                     subplot_list=subplot_list,\n                                     ax_bbox_list=ax_bbox_list,\n                                     pad=pad, h_pad=h_pad, w_pad=w_pad)\n\n    # kwargs can be none if tight_layout fails...\n    if rect is not None and kwargs is not None:\n        # if rect is given, the whole subplots area (including\n        # labels) will fit into the rect instead of the\n        # figure. Note that the rect argument of\n        # *auto_adjust_subplotpars* specify the area that will be\n        # covered by the total area of axes.bbox. Thus we call\n        # auto_adjust_subplotpars twice, where the second run\n        # with adjusted rect parameters.\n\n        left, bottom, right, top = rect\n        if left is not None:\n            left += kwargs[\"left\"]\n        if bottom is not None:\n            bottom += kwargs[\"bottom\"]\n        if right is not None:\n            right -= (1 - kwargs[\"right\"])\n        if top is not None:\n            top -= (1 - kwargs[\"top\"])\n\n        kwargs = auto_adjust_subplotpars(fig, renderer,\n                                         nrows_ncols=(max_nrows, max_ncols),\n                                         num1num2_list=num1num2_list,\n                                         subplot_list=subplot_list,\n                                         ax_bbox_list=ax_bbox_list,\n                                         pad=pad, h_pad=h_pad, w_pad=w_pad,\n                                         rect=(left, bottom, right, top))\n\n    return kwargs"
            ],
            "inscope_function_signatures": [
                "auto_adjust_subplotpars(fig, renderer, nrows_ncols, num1num2_list, subplot_list, ax_bbox_list=None, pad=1.08, h_pad=None, w_pad=None, rect=None)",
                "get_renderer(fig)",
                "get_subplotspec_list(axes_list, grid_spec=None)",
                "get_tight_layout_figure(fig, axes_list, subplotspec_list, renderer, pad=1.08, h_pad=None, w_pad=None, rect=None)"
            ],
            "variables_in_file": {
                "rows": [
                    66,
                    67,
                    48,
                    278,
                    279,
                    153,
                    155
                ],
                "cols": [
                    66,
                    67,
                    292,
                    296,
                    142,
                    48,
                    145,
                    278,
                    280,
                    92,
                    95
                ],
                "nrows_ncols": [
                    48
                ],
                "font_size_inches": [
                    50,
                    52,
                    53,
                    54
                ],
                "get_size_in_points": [
                    51
                ],
                "FontProperties": [
                    51
                ],
                "rcParams": [
                    51
                ],
                "pad_inches": [
                    110,
                    113,
                    52,
                    53,
                    54,
                    116,
                    121,
                    124
                ],
                "pad": [
                    52,
                    308,
                    335
                ],
                "vpad_inches": [
                    154,
                    53
                ],
                "h_pad": [
                    308,
                    53,
                    335
                ],
                "hpad_inches": [
                    54,
                    143
                ],
                "w_pad": [
                    308,
                    54,
                    335
                ],
                "len": [
                    56,
                    270
                ],
                "num1num2_list": [
                    298,
                    76,
                    332,
                    305,
                    276,
                    56
                ],
                "subplot_list": [
                    72,
                    265,
                    74,
                    333,
                    306,
                    243,
                    56
                ],
                "ValueError": [
                    57
                ],
                "rect": [
                    320,
                    59,
                    62,
                    311
                ],
                "margin_left": [
                    137,
                    108,
                    109,
                    145,
                    62,
                    60,
                    126
                ],
                "margin_bottom": [
                    131,
                    139,
                    155,
                    122,
                    123,
                    60,
                    62
                ],
                "margin_right": [
                    138,
                    111,
                    112,
                    145,
                    60,
                    126,
                    63
                ],
                "margin_top": [
                    64,
                    131,
                    140,
                    114,
                    115,
                    121,
                    155,
                    60
                ],
                "_right": [
                    62,
                    63
                ],
                "_top": [
                    64,
                    62
                ],
                "vspaces": [
                    66,
                    101,
                    102,
                    115,
                    154,
                    123
                ],
                "np.zeros": [
                    66,
                    67
                ],
                "np": [
                    66,
                    67
                ],
                "hspaces": [
                    98,
                    99,
                    67,
                    109,
                    143,
                    112
                ],
                "ax_bbox_list": [
                    69,
                    70,
                    266,
                    75,
                    334,
                    307,
                    246
                ],
                "Bbox.union": [
                    88,
                    71
                ],
                "Bbox": [
                    88,
                    71
                ],
                "ax.get_position": [
                    71
                ],
                "ax": [
                    193,
                    71,
                    268,
                    77,
                    81,
                    82,
                    84,
                    86,
                    254,
                    190,
                    191
                ],
                "subplots": [
                    258,
                    260,
                    71,
                    72,
                    265,
                    74,
                    268,
                    77,
                    81
                ],
                "ax_bbox": [
                    98,
                    99,
                    101,
                    102,
                    74
                ],
                "num1": [
                    292,
                    74,
                    278,
                    92,
                    94
                ],
                "num2": [
                    293,
                    296,
                    74,
                    278,
                    93,
                    94,
                    95
                ],
                "zip": [
                    74,
                    254
                ],
                "all": [
                    77
                ],
                "ax.get_visible": [
                    82,
                    77
                ],
                "bb": [
                    80,
                    88,
                    84,
                    86
                ],
                "ax.get_tightbbox": [
                    84,
                    86
                ],
                "renderer": [
                    330,
                    303,
                    84,
                    86,
                    120
                ],
                "TypeError": [
                    85
                ],
                "tight_bbox_raw": [
                    88,
                    89
                ],
                "tight_bbox": [
                    98,
                    99,
                    101,
                    102,
                    89
                ],
                "TransformedBbox": [
                    89
                ],
                "fig.transFigure.inverted": [
                    90,
                    119
                ],
                "fig.transFigure": [
                    90,
                    119
                ],
                "fig": [
                    104,
                    168,
                    169,
                    171,
                    266,
                    330,
                    303,
                    176,
                    117,
                    119,
                    90
                ],
                "row1": [
                    97,
                    92,
                    101
                ],
                "col1": [
                    100,
                    98,
                    92
                ],
                "divmod": [
                    292,
                    296,
                    279,
                    280,
                    92,
                    95
                ],
                "row2": [
                    97,
                    102,
                    95
                ],
                "col2": [
                    99,
                    100,
                    95
                ],
                "row_i": [
                    97,
                    98,
                    99
                ],
                "range": [
                    97,
                    100
                ],
                "ax_bbox.xmin": [
                    98
                ],
                "tight_bbox.xmin": [
                    98
                ],
                "tight_bbox.xmax": [
                    99
                ],
                "ax_bbox.xmax": [
                    99
                ],
                "col_i": [
                    100,
                    101,
                    102
                ],
                "tight_bbox.ymax": [
                    101
                ],
                "ax_bbox.ymax": [
                    101
                ],
                "ax_bbox.ymin": [
                    102
                ],
                "tight_bbox.ymin": [
                    102
                ],
                "fig_width_inch": [
                    104,
                    113,
                    110,
                    143
                ],
                "fig_height_inch": [
                    104,
                    116,
                    121,
                    154,
                    124
                ],
                "fig.get_size_inches": [
                    104
                ],
                "max": [
                    109,
                    143,
                    112,
                    273,
                    274,
                    115,
                    154,
                    123
                ],
                "suptitle": [
                    120,
                    117,
                    118
                ],
                "fig._suptitle": [
                    117
                ],
                "suptitle.get_in_layout": [
                    118
                ],
                "rel_suptitle_height": [
                    121,
                    119
                ],
                "height": [
                    119
                ],
                "transform_bbox": [
                    119
                ],
                "suptitle.get_window_extent": [
                    120
                ],
                "cbook._warn_external": [
                    132,
                    287,
                    147,
                    282,
                    157,
                    127
                ],
                "cbook": [
                    132,
                    287,
                    147,
                    282,
                    157,
                    127
                ],
                "kwargs": [
                    162,
                    322,
                    164,
                    324,
                    326,
                    328,
                    137,
                    330,
                    303,
                    338,
                    311,
                    152
                ],
                "dict": [
                    137
                ],
                "hspace": [
                    152,
                    145,
                    143
                ],
                "h_axes": [
                    152,
                    145,
                    146
                ],
                "vspace": [
                    162,
                    154,
                    155
                ],
                "v_axes": [
                    162,
                    155,
                    156
                ],
                "fig._cachedRenderer": [
                    168,
                    169
                ],
                "canvas": [
                    171,
                    172,
                    173
                ],
                "fig.canvas": [
                    171
                ],
                "hasattr": [
                    195,
                    172
                ],
                "canvas.get_renderer": [
                    173
                ],
                "backend_bases._get_renderer": [
                    176
                ],
                "backend_bases": [
                    176
                ],
                "subplotspec_list": [
                    209,
                    189,
                    254,
                    207
                ],
                "axes_list": [
                    190,
                    254
                ],
                "axes_or_locator": [
                    192,
                    193,
                    195,
                    196,
                    191
                ],
                "ax.get_axes_locator": [
                    191
                ],
                "subplotspec": [
                    258,
                    196,
                    197,
                    198,
                    261,
                    264,
                    201,
                    266,
                    203,
                    205,
                    207,
                    277,
                    278,
                    254,
                    255
                ],
                "axes_or_locator.get_subplotspec": [
                    196
                ],
                "subplotspec.get_topmost_subplotspec": [
                    197
                ],
                "gs": [
                    200,
                    202,
                    198
                ],
                "subplotspec.get_gridspec": [
                    198
                ],
                "grid_spec": [
                    200,
                    199
                ],
                "gs.locally_modified_subplot_params": [
                    202
                ],
                "subplotspec_list.append": [
                    207
                ],
                "nrows_list": [
                    273,
                    244,
                    262,
                    270
                ],
                "ncols_list": [
                    274,
                    245,
                    270,
                    263
                ],
                "subplot_dict": [
                    250,
                    258
                ],
                "subplotspec_list2": [
                    264,
                    252,
                    277
                ],
                "subplot_dict.setdefault": [
                    258
                ],
                "myrows": [
                    261,
                    262
                ],
                "mycols": [
                    261,
                    263
                ],
                "_": [
                    261
                ],
                "subplotspec.get_geometry": [
                    261,
                    278
                ],
                "nrows_list.append": [
                    262
                ],
                "ncols_list.append": [
                    263
                ],
                "subplotspec_list2.append": [
                    264
                ],
                "subplot_list.append": [
                    265
                ],
                "ax_bbox_list.append": [
                    266
                ],
                "subplotspec.get_position": [
                    266
                ],
                "subplots.append": [
                    268
                ],
                "max_nrows": [
                    304,
                    273,
                    331,
                    279
                ],
                "max_ncols": [
                    298,
                    331,
                    300,
                    304,
                    274,
                    280
                ],
                "div_row": [
                    298,
                    300,
                    279
                ],
                "mod_row": [
                    281,
                    279
                ],
                "div_col": [
                    280,
                    299,
                    301
                ],
                "mod_col": [
                    280,
                    286
                ],
                "rowNum1": [
                    298,
                    292,
                    294
                ],
                "colNum1": [
                    299,
                    292,
                    294
                ],
                "rowNum2": [
                    296,
                    300,
                    294
                ],
                "colNum2": [
                    296,
                    301,
                    294
                ],
                "num1num2_list.append": [
                    298
                ],
                "auto_adjust_subplotpars": [
                    330,
                    303
                ],
                "left": [
                    320,
                    321,
                    322,
                    336
                ],
                "bottom": [
                    320,
                    336,
                    323,
                    324
                ],
                "right": [
                    320,
                    336,
                    325,
                    326
                ],
                "top": [
                    320,
                    336,
                    328,
                    327
                ]
            },
            "filtered_variables_in_file": {
                "rows": [
                    66,
                    67,
                    48,
                    278,
                    279,
                    153,
                    155
                ],
                "cols": [
                    66,
                    67,
                    292,
                    296,
                    142,
                    48,
                    145,
                    278,
                    280,
                    92,
                    95
                ],
                "nrows_ncols": [
                    48
                ],
                "font_size_inches": [
                    50,
                    52,
                    53,
                    54
                ],
                "get_size_in_points": [
                    51
                ],
                "FontProperties": [
                    51
                ],
                "rcParams": [
                    51
                ],
                "pad_inches": [
                    110,
                    113,
                    52,
                    53,
                    54,
                    116,
                    121,
                    124
                ],
                "pad": [
                    52,
                    308,
                    335
                ],
                "vpad_inches": [
                    154,
                    53
                ],
                "h_pad": [
                    308,
                    53,
                    335
                ],
                "hpad_inches": [
                    54,
                    143
                ],
                "w_pad": [
                    308,
                    54,
                    335
                ],
                "num1num2_list": [
                    298,
                    76,
                    332,
                    305,
                    276,
                    56
                ],
                "subplot_list": [
                    72,
                    265,
                    74,
                    333,
                    306,
                    243,
                    56
                ],
                "rect": [
                    320,
                    59,
                    62,
                    311
                ],
                "margin_left": [
                    137,
                    108,
                    109,
                    145,
                    62,
                    60,
                    126
                ],
                "margin_bottom": [
                    131,
                    139,
                    155,
                    122,
                    123,
                    60,
                    62
                ],
                "margin_right": [
                    138,
                    111,
                    112,
                    145,
                    60,
                    126,
                    63
                ],
                "margin_top": [
                    64,
                    131,
                    140,
                    114,
                    115,
                    121,
                    155,
                    60
                ],
                "_right": [
                    62,
                    63
                ],
                "_top": [
                    64,
                    62
                ],
                "vspaces": [
                    66,
                    101,
                    102,
                    115,
                    154,
                    123
                ],
                "np.zeros": [
                    66,
                    67
                ],
                "np": [
                    66,
                    67
                ],
                "hspaces": [
                    98,
                    99,
                    67,
                    109,
                    143,
                    112
                ],
                "ax_bbox_list": [
                    69,
                    70,
                    266,
                    75,
                    334,
                    307,
                    246
                ],
                "Bbox.union": [
                    88,
                    71
                ],
                "Bbox": [
                    88,
                    71
                ],
                "ax.get_position": [
                    71
                ],
                "ax": [
                    193,
                    71,
                    268,
                    77,
                    81,
                    82,
                    84,
                    86,
                    254,
                    190,
                    191
                ],
                "subplots": [
                    258,
                    260,
                    71,
                    72,
                    265,
                    74,
                    268,
                    77,
                    81
                ],
                "ax_bbox": [
                    98,
                    99,
                    101,
                    102,
                    74
                ],
                "num1": [
                    292,
                    74,
                    278,
                    92,
                    94
                ],
                "num2": [
                    293,
                    296,
                    74,
                    278,
                    93,
                    94,
                    95
                ],
                "ax.get_visible": [
                    82,
                    77
                ],
                "bb": [
                    80,
                    88,
                    84,
                    86
                ],
                "ax.get_tightbbox": [
                    84,
                    86
                ],
                "renderer": [
                    330,
                    303,
                    84,
                    86,
                    120
                ],
                "tight_bbox_raw": [
                    88,
                    89
                ],
                "tight_bbox": [
                    98,
                    99,
                    101,
                    102,
                    89
                ],
                "TransformedBbox": [
                    89
                ],
                "fig.transFigure.inverted": [
                    90,
                    119
                ],
                "fig.transFigure": [
                    90,
                    119
                ],
                "fig": [
                    104,
                    168,
                    169,
                    171,
                    266,
                    330,
                    303,
                    176,
                    117,
                    119,
                    90
                ],
                "row1": [
                    97,
                    92,
                    101
                ],
                "col1": [
                    100,
                    98,
                    92
                ],
                "row2": [
                    97,
                    102,
                    95
                ],
                "col2": [
                    99,
                    100,
                    95
                ],
                "row_i": [
                    97,
                    98,
                    99
                ],
                "ax_bbox.xmin": [
                    98
                ],
                "tight_bbox.xmin": [
                    98
                ],
                "tight_bbox.xmax": [
                    99
                ],
                "ax_bbox.xmax": [
                    99
                ],
                "col_i": [
                    100,
                    101,
                    102
                ],
                "tight_bbox.ymax": [
                    101
                ],
                "ax_bbox.ymax": [
                    101
                ],
                "ax_bbox.ymin": [
                    102
                ],
                "tight_bbox.ymin": [
                    102
                ],
                "fig_width_inch": [
                    104,
                    113,
                    110,
                    143
                ],
                "fig_height_inch": [
                    104,
                    116,
                    121,
                    154,
                    124
                ],
                "fig.get_size_inches": [
                    104
                ],
                "suptitle": [
                    120,
                    117,
                    118
                ],
                "fig._suptitle": [
                    117
                ],
                "suptitle.get_in_layout": [
                    118
                ],
                "rel_suptitle_height": [
                    121,
                    119
                ],
                "height": [
                    119
                ],
                "transform_bbox": [
                    119
                ],
                "suptitle.get_window_extent": [
                    120
                ],
                "cbook._warn_external": [
                    132,
                    287,
                    147,
                    282,
                    157,
                    127
                ],
                "cbook": [
                    132,
                    287,
                    147,
                    282,
                    157,
                    127
                ],
                "kwargs": [
                    162,
                    322,
                    164,
                    324,
                    326,
                    328,
                    137,
                    330,
                    303,
                    338,
                    311,
                    152
                ],
                "hspace": [
                    152,
                    145,
                    143
                ],
                "h_axes": [
                    152,
                    145,
                    146
                ],
                "vspace": [
                    162,
                    154,
                    155
                ],
                "v_axes": [
                    162,
                    155,
                    156
                ],
                "fig._cachedRenderer": [
                    168,
                    169
                ],
                "canvas": [
                    171,
                    172,
                    173
                ],
                "fig.canvas": [
                    171
                ],
                "canvas.get_renderer": [
                    173
                ],
                "backend_bases._get_renderer": [
                    176
                ],
                "backend_bases": [
                    176
                ],
                "subplotspec_list": [
                    209,
                    189,
                    254,
                    207
                ],
                "axes_list": [
                    190,
                    254
                ],
                "axes_or_locator": [
                    192,
                    193,
                    195,
                    196,
                    191
                ],
                "ax.get_axes_locator": [
                    191
                ],
                "subplotspec": [
                    258,
                    196,
                    197,
                    198,
                    261,
                    264,
                    201,
                    266,
                    203,
                    205,
                    207,
                    277,
                    278,
                    254,
                    255
                ],
                "axes_or_locator.get_subplotspec": [
                    196
                ],
                "subplotspec.get_topmost_subplotspec": [
                    197
                ],
                "gs": [
                    200,
                    202,
                    198
                ],
                "subplotspec.get_gridspec": [
                    198
                ],
                "grid_spec": [
                    200,
                    199
                ],
                "gs.locally_modified_subplot_params": [
                    202
                ],
                "subplotspec_list.append": [
                    207
                ],
                "nrows_list": [
                    273,
                    244,
                    262,
                    270
                ],
                "ncols_list": [
                    274,
                    245,
                    270,
                    263
                ],
                "subplot_dict": [
                    250,
                    258
                ],
                "subplotspec_list2": [
                    264,
                    252,
                    277
                ],
                "subplot_dict.setdefault": [
                    258
                ],
                "myrows": [
                    261,
                    262
                ],
                "mycols": [
                    261,
                    263
                ],
                "_": [
                    261
                ],
                "subplotspec.get_geometry": [
                    261,
                    278
                ],
                "nrows_list.append": [
                    262
                ],
                "ncols_list.append": [
                    263
                ],
                "subplotspec_list2.append": [
                    264
                ],
                "subplot_list.append": [
                    265
                ],
                "ax_bbox_list.append": [
                    266
                ],
                "subplotspec.get_position": [
                    266
                ],
                "subplots.append": [
                    268
                ],
                "max_nrows": [
                    304,
                    273,
                    331,
                    279
                ],
                "max_ncols": [
                    298,
                    331,
                    300,
                    304,
                    274,
                    280
                ],
                "div_row": [
                    298,
                    300,
                    279
                ],
                "mod_row": [
                    281,
                    279
                ],
                "div_col": [
                    280,
                    299,
                    301
                ],
                "mod_col": [
                    280,
                    286
                ],
                "rowNum1": [
                    298,
                    292,
                    294
                ],
                "colNum1": [
                    299,
                    292,
                    294
                ],
                "rowNum2": [
                    296,
                    300,
                    294
                ],
                "colNum2": [
                    296,
                    301,
                    294
                ],
                "num1num2_list.append": [
                    298
                ],
                "auto_adjust_subplotpars": [
                    330,
                    303
                ],
                "left": [
                    320,
                    321,
                    322,
                    336
                ],
                "bottom": [
                    320,
                    336,
                    323,
                    324
                ],
                "right": [
                    320,
                    336,
                    325,
                    326
                ],
                "top": [
                    320,
                    336,
                    328,
                    327
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_1/lib/matplotlib/tests/test_bbox_tight.py",
                "test_function": "test_noop_tight_bbox",
                "test_function_code": "def test_noop_tight_bbox():\n    from PIL import Image\n    x_size, y_size = (10, 7)\n    dpi = 100\n    # make the figure just the right size up front\n    fig = plt.figure(frameon=False, dpi=dpi, figsize=(x_size/dpi, y_size/dpi))\n    ax = plt.Axes(fig, [0., 0., 1., 1.])\n    fig.add_axes(ax)\n    ax.set_axis_off()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\n    data = np.arange(x_size * y_size).reshape(y_size, x_size)\n    ax.imshow(data)\n    out = BytesIO()\n    fig.savefig(out, bbox_inches='tight', pad_inches=0)\n    out.seek(0)\n    im = np.asarray(Image.open(out))\n    assert (im[:, :, 3] == 255).all()\n    assert not (im[:, :, :3] == 255).all()\n    assert im.shape == (7, 10, 4)",
                "test_error": "assert False\n +  where False = <built-in method all of numpy.ndarray object at 0x111f7ccf0>()\n +    where <built-in method all of numpy.ndarray object at 0x111f7ccf0> = array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8) == 255.all",
                "full_test_error": "def test_noop_tight_bbox():\n        from PIL import Image\n        x_size, y_size = (10, 7)\n        dpi = 100\n        # make the figure just the right size up front\n        fig = plt.figure(frameon=False, dpi=dpi, figsize=(x_size/dpi, y_size/dpi))\n        ax = plt.Axes(fig, [0., 0., 1., 1.])\n        fig.add_axes(ax)\n        ax.set_axis_off()\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n    \n        data = np.arange(x_size * y_size).reshape(y_size, x_size)\n        ax.imshow(data)\n        out = BytesIO()\n        fig.savefig(out, bbox_inches='tight', pad_inches=0)\n        out.seek(0)\n        im = np.asarray(Image.open(out))\n>       assert (im[:, :, 3] == 255).all()\nE       assert False\nE        +  where False = <built-in method all of numpy.ndarray object at 0x111f7ccf0>()\nE        +    where <built-in method all of numpy.ndarray object at 0x111f7ccf0> = array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8) == 255.all\n\nlib/matplotlib/tests/test_bbox_tight.py:133: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}