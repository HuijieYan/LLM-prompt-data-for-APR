{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 4328,
            "file_name": "axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                vmin=None, vmax=None, alpha=None, linewidths=None,\n                verts=None, edgecolors=None, *, plotnonfinite=False,\n                **kwargs):\n\n            \"\"\"\n            A scatter plot of *y* vs. *x* with varying marker size and/or color.\n    \n            Parameters\n            ----------\n            x, y : float or array-like, shape (n, )\n                The data positions.\n    \n            s : float or array-like, shape (n, ), optional\n                The marker size in points**2.\n                Default is ``rcParams['lines.markersize'] ** 2``.\n    \n            c : array-like or list of colors or color, optional\n                The marker colors. Possible values:\n    \n                - A scalar or sequence of n numbers to be mapped to colors using\n                  *cmap* and *norm*.\n                - A 2-D array in which the rows are RGB or RGBA.\n                - A sequence of colors of length n.\n                - A single color format string.\n    \n                Note that *c* should not be a single numeric RGB or RGBA sequence\n                because that is indistinguishable from an array of values to be\n                colormapped. If you want to specify the same RGB or RGBA value for\n                all points, use a 2-D array with a single row.  Otherwise, value-\n                matching will have precedence in case of a size matching with *x*\n                and *y*.\n    \n                If you wish to specify a single color for all points\n                prefer the *color* keyword argument.\n    \n                Defaults to `None`. In that case the marker color is determined\n                by the value of *color*, *facecolor* or *facecolors*. In case\n                those are not specified or `None`, the marker color is determined\n                by the next color of the ``Axes``' current \"shape and fill\" color\n                cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n    \n            marker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n                The marker style. *marker* can be either an instance of the class\n                or the text shorthand for a particular marker.\n                See :mod:`matplotlib.markers` for more information about marker\n                styles.\n    \n            cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n                A `.Colormap` instance or registered colormap name. *cmap* is only\n                used if *c* is an array of floats.\n    \n            norm : `~matplotlib.colors.Normalize`, default: None\n                If *c* is an array of floats, *norm* is used to scale the color\n                data, *c*, in the range 0 to 1, in order to map into the colormap\n                *cmap*.\n                If *None*, use the default `.colors.Normalize`.\n    \n            vmin, vmax : float, default: None\n                *vmin* and *vmax* are used in conjunction with the default norm to\n                map the color array *c* to the colormap *cmap*. If None, the\n                respective min and max of the color array is used.\n                It is deprecated to use *vmin*/*vmax* when *norm* is given.\n    \n            alpha : float, default: None\n                The alpha blending value, between 0 (transparent) and 1 (opaque).\n    \n            linewidths : float or array-like, default: :rc:`lines.linewidth`\n                The linewidth of the marker edges. Note: The default *edgecolors*\n                is 'face'. You may want to change this as well.\n    \n            verts : sequence of (x, y), default: None\n                If not *None*, the vertices used for the marker paths.\n    \n            edgecolors : {'face', 'none', *None*} or color or sequence of color, \\\n    default: :rc:`scatter.edgecolors`\n                The edge color of the marker. Possible values:\n    \n                - 'face': The edge color will always be the same as the face color.\n                - 'none': No patch boundary will be drawn.\n                - A color or sequence of colors.\n    \n                For non-filled markers, the *edgecolors* kwarg is ignored and\n                forced to 'face' internally.\n    \n            plotnonfinite : bool, default: False\n                Set to plot points with nonfinite *c*, in conjunction with\n                `~matplotlib.colors.Colormap.set_bad`.\n    \n            Returns\n            -------\n            `~matplotlib.collections.PathCollection`\n    \n            Other Parameters\n            ----------------\n            **kwargs : `~matplotlib.collections.Collection` properties\n    \n            See Also\n            --------\n            plot : To plot scatter plots when markers are identical in size and\n                color.\n    \n            Notes\n            -----\n            * The `.plot` function will be faster for scatterplots where markers\n              don't vary in size or color.\n    \n            * Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n              case all masks will be combined and only unmasked points will be\n              plotted.\n    \n            * Fundamentally, scatter works with 1-D arrays; *x*, *y*, *s*, and *c*\n              may be input as N-D arrays, but within scatter they will be\n              flattened. The exception is *c*, which will be flattened only if its\n              size matches the size of *x* and *y.\n            \"\"\"\n    \n            # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n    \n            self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n            x = self.convert_xunits(x)\n            y = self.convert_yunits(y)\n    \n            # np.ma.ravel yields an ndarray, not a masked array,\n            # unless its argument is a masked array.\n            x = np.ma.ravel(x)\n            y = np.ma.ravel(y)\n    \n            if x.size != y.size:\n                raise ValueError(\"x and y must be the same size\")\n    \n            if s is None:\n                s = (20 if rcParams['_internal.classic_mode'] else\n                     rcParams['lines.markersize'] ** 2.0)\n            s = np.ma.ravel(s)\n            if len(s) not in (1, x.size):\n                raise ValueError(\"s must be a scalar, or the same size as x and y\")\n    \n            c, colors, edgecolors = \\\n                self._parse_scatter_color_args(\n                    c, edgecolors, kwargs, x.size,\n                    get_next_color_func=self._get_patches_for_fill.get_next_color)\n    \n            if plotnonfinite and colors is None:\n                c = np.ma.masked_invalid(c)\n                x, y, s, edgecolors, linewidths = \\\n                    cbook._combine_masks(x, y, s, edgecolors, linewidths)\n            else:\n                x, y, s, c, colors, edgecolors, linewidths = \\\n                    cbook._combine_masks(\n                        x, y, s, c, colors, edgecolors, linewidths)\n    \n            scales = s   # Renamed for readability below.\n            \n            # load default marker from rcParams\n            if marker is None:\n                marker = rcParams['scatter.marker']\n    \n            if isinstance(marker, mmarkers.MarkerStyle):\n                marker_obj = marker\n            else:\n                marker_obj = mmarkers.MarkerStyle(marker)\n    \n            path = marker_obj.get_path().transformed(\n                marker_obj.get_transform())\n            if not marker_obj.is_filled():\n                edgecolors = 'face'\n                linewidths = rcParams['lines.linewidth']\n    \n            offsets = np.ma.column_stack([x, y])\n    \n            collection = mcoll.PathCollection(\n                    (path,), scales,\n                    facecolors=colors,\n                    edgecolors=edgecolors,\n                    linewidths=linewidths,\n                    offsets=offsets,\n                    transOffset=kwargs.pop('transform', self.transData),\n                    alpha=alpha\n                    )\n            collection.set_transform(mtransforms.IdentityTransform())\n            collection.update(kwargs)\n    \n            if colors is None:\n                collection.set_array(c)\n                collection.set_cmap(cmap)\n                collection.set_norm(norm)\n                collection._scale_norm(norm, vmin, vmax)\n    \n            # Classic mode only:\n            # ensure there are margins to allow for the\n            # finite size of the symbols.  In v2.x, margins\n            # are present by default, so we disable this\n            # scatter-specific override.\n            if rcParams['_internal.classic_mode']:\n                if self._xmargin < 0.05:\n                    self.set_xmargin(0.05)\n                if self._ymargin < 0.05:\n                    self.set_ymargin(0.05)\n    \n            self.add_collection(collection)\n            self._request_autoscale_view()\n    \n            return collection"
        }
    ]
}