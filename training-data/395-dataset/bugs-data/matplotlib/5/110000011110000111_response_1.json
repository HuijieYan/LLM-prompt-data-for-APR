{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4328,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n                vmin=None, vmax=None, alpha=None, linewidths=None,\n                edgecolors=None, plotnonfinite=False, **kwargs):\n        # ... <Rest of the code>\n        \n        # Renamed for readability below.\n    import numpy as np\n    import matplotlib\n    import matplotlib.collections as mcoll\n    import matplotlib.markers as mmarkers\n    import matplotlib.transforms as mtransforms\n    import matplotlib.cbook as cbook\n    from matplotlib.transforms import IdentityTransform\n    scales = s\n    \n    # load default marker from rcParams\n    if marker is None:\n        marker = matplotlib.rcParams['scatter.marker']\n    \n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n    \n    path = marker_obj.get_path().transformed(\n        marker_obj.get_transform())\n    if not marker_obj.is_filled():\n        edgecolors = 'face'\n        linewidths = matplotlib.rcParams['lines.linewidth']\n    \n    offsets = np.column_stack([x, y])\n    \n    collection = mcoll.PathCollection(\n            (path,), scales,\n            facecolors=colors,\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            offsets=offsets,\n            transOffset=kwargs.pop('transform', IdentityTransform()),\n            alpha=alpha\n            )\n    collection.set_transform(IdentityTransform())\n    collection.update(kwargs)\n    \n    if colors is None:\n        collection.set_array(c)\n        collection.set_cmap(cmap)\n        collection.set_norm(norm)\n        collection._scale_norm(norm, vmin, vmax)\n    \n    # Classic mode only:\n    # ensure there are margins to allow for the\n    # finite size of the symbols.  In v2.x, margins\n    # are present by default, so we disable this\n    # scatter-specific override.\n    if matplotlib.rcParams['_internal.classic_mode']:\n        if self._xmargin < 0.05 and x.size > 0:\n            self.set_xmargin(0.05)\n        if self._ymargin < 0.05 and x.size > 0:\n            self.set_ymargin(0.05)\n    \n    self.add_collection(collection)\n    self._request_autoscale_view()\n    \n    return collection"
        }
    ]
}