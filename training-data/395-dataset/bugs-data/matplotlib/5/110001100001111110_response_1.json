{
    "matplotlib": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 4328,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n    \n\n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    \n    if not isinstance(x, np.ma.MaskedArray):\n        x = np.ma.array(x, mask=False)\n    if not isinstance(y, np.ma.MaskedArray):\n        y = np.ma.array(y, mask=False)\n    \n    original_s = s\n    original_c = c\n    colors, c, edgecolors = _parse_scatter_color_args(c, edgecolors, kwargs, x.size,\n                                                      self._get_patches_for_fill.get_next_color)\n    \n    if s is None:\n        s = (20 if rcParams['_internal.classic_mode'] else rcParams['lines.markersize'] ** 2.0)\n    else:\n        s = np.asanyarray(s).ravel()\n    \n    if c is not None:\n        c = np.asanyarray(c)\n    else:\n        c = np.ravel(np.ma.asarray(orig_c))\n    \n    size = s.size\n    x, y, c, offsets, transOffset, path, transforms = \\\n    cbook._combine_masks(\n        x, y, c, size,\n        silent=True)\n    \n    if linewidths is not None:\n        linewidths = np.broadcast_to(linewidths, size)\n    \n    # more code related to scatter plot, markers, etc.\n    \n    return collection"
        }
    ]
}