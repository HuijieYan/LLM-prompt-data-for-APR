{
    "matplotlib:15": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/matplotlib/examples/userdemo/colormap_normalizations.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "pcm = ax[0].pcolormesh(X, Y, Z1,\n                       norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,\n                                              vmin=-1.0, vmax=1.0),\n                       cmap='RdBu_r')",
                    "start_line": 70,
                    "end_line": 73
                }
            ],
            "inscope_functions": [
                "def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):\n    self.midpoint = midpoint\n    colors.Normalize.__init__(self, vmin, vmax, clip)",
                "def __call__(self, value, clip=None):\n    # I'm ignoring masked values and all kinds of edge cases to make a\n    # simple example...\n    x, y = [self.vmin, self.midpoint, self.vmax], [0, 0.5, 1]\n    return np.ma.masked_array(np.interp(value, x, y))"
            ],
            "inscope_function_signatures": [
                "__init__(self, vmin=None, vmax=None, midpoint=None, clip=False)",
                "__call__(self, value, clip=None)"
            ],
            "variables_in_file": {
                "N": [
                    43,
                    17,
                    18,
                    85,
                    63
                ],
                "X": [
                    135,
                    138,
                    18,
                    24,
                    25,
                    30,
                    35,
                    43,
                    44,
                    48,
                    52,
                    63,
                    64,
                    65,
                    70,
                    76,
                    85,
                    86,
                    87,
                    109,
                    114,
                    127
                ],
                "Y": [
                    135,
                    138,
                    18,
                    24,
                    25,
                    30,
                    35,
                    43,
                    44,
                    48,
                    52,
                    63,
                    64,
                    65,
                    70,
                    76,
                    85,
                    86,
                    87,
                    109,
                    114,
                    127
                ],
                "np.mgrid": [
                    18,
                    43,
                    85,
                    63
                ],
                "np": [
                    64,
                    65,
                    133,
                    103,
                    138,
                    43,
                    44,
                    76,
                    18,
                    114,
                    85,
                    86,
                    87,
                    24,
                    25,
                    125,
                    63
                ],
                "complex": [
                    18,
                    43,
                    85,
                    63
                ],
                "Z1": [
                    64,
                    66,
                    70,
                    138,
                    44,
                    76,
                    48,
                    52,
                    86,
                    24,
                    26,
                    88
                ],
                "np.exp": [
                    64,
                    65,
                    86,
                    87,
                    24,
                    25
                ],
                "Z2": [
                    65,
                    66,
                    87,
                    88,
                    25,
                    26
                ],
                "Z": [
                    66,
                    35,
                    135,
                    138,
                    109,
                    114,
                    88,
                    26,
                    127,
                    30,
                    31
                ],
                "fig": [
                    33,
                    130,
                    36,
                    68,
                    136,
                    74,
                    107,
                    139,
                    77,
                    46,
                    112,
                    50,
                    115,
                    53,
                    122,
                    28
                ],
                "ax": [
                    130,
                    135,
                    136,
                    138,
                    139,
                    28,
                    30,
                    33,
                    35,
                    36,
                    46,
                    48,
                    50,
                    52,
                    53,
                    68,
                    70,
                    74,
                    76,
                    77,
                    107,
                    109,
                    112,
                    114,
                    115,
                    122,
                    123,
                    127
                ],
                "plt.subplots": [
                    68,
                    107,
                    46,
                    122,
                    28
                ],
                "plt": [
                    68,
                    107,
                    141,
                    46,
                    122,
                    28
                ],
                "pcm": [
                    130,
                    135,
                    136,
                    138,
                    139,
                    30,
                    33,
                    35,
                    36,
                    48,
                    50,
                    52,
                    53,
                    70,
                    74,
                    76,
                    77,
                    109,
                    112,
                    114,
                    115,
                    127
                ],
                "pcolor": [
                    35,
                    30
                ],
                "colors.LogNorm": [
                    31
                ],
                "colors": [
                    97,
                    134,
                    71,
                    48,
                    126,
                    94,
                    31
                ],
                "Z.min": [
                    31
                ],
                "Z.max": [
                    31
                ],
                "fig.colorbar": [
                    33,
                    130,
                    36,
                    136,
                    74,
                    139,
                    77,
                    112,
                    50,
                    115,
                    53
                ],
                "np.sin": [
                    44
                ],
                "pcolormesh": [
                    70,
                    135,
                    138,
                    76,
                    109,
                    48,
                    114,
                    52,
                    127
                ],
                "colors.PowerNorm": [
                    48
                ],
                "colors.SymLogNorm": [
                    71
                ],
                "np.max": [
                    114,
                    76,
                    138
                ],
                "colors.Normalize": [
                    97,
                    94
                ],
                "self.midpoint": [
                    96,
                    102
                ],
                "self": [
                    96,
                    97,
                    102
                ],
                "midpoint": [
                    96
                ],
                "colors.Normalize.__init__": [
                    97
                ],
                "vmin": [
                    97
                ],
                "vmax": [
                    97
                ],
                "clip": [
                    97
                ],
                "x": [
                    102,
                    103
                ],
                "y": [
                    102,
                    103
                ],
                "self.vmin": [
                    102
                ],
                "self.vmax": [
                    102
                ],
                "np.ma.masked_array": [
                    103
                ],
                "np.ma": [
                    103
                ],
                "np.interp": [
                    103
                ],
                "value": [
                    103
                ],
                "MidpointNormalize": [
                    110
                ],
                "ax.flatten": [
                    123
                ],
                "bounds": [
                    134,
                    125,
                    126,
                    133
                ],
                "np.linspace": [
                    125
                ],
                "norm": [
                    128,
                    134,
                    126,
                    135
                ],
                "colors.BoundaryNorm": [
                    134,
                    126
                ],
                "np.array": [
                    133
                ],
                "plt.show": [
                    141
                ]
            },
            "filtered_variables_in_file": {
                "N": [
                    43,
                    17,
                    18,
                    85,
                    63
                ],
                "X": [
                    135,
                    138,
                    18,
                    24,
                    25,
                    30,
                    35,
                    43,
                    44,
                    48,
                    52,
                    63,
                    64,
                    65,
                    70,
                    76,
                    85,
                    86,
                    87,
                    109,
                    114,
                    127
                ],
                "Y": [
                    135,
                    138,
                    18,
                    24,
                    25,
                    30,
                    35,
                    43,
                    44,
                    48,
                    52,
                    63,
                    64,
                    65,
                    70,
                    76,
                    85,
                    86,
                    87,
                    109,
                    114,
                    127
                ],
                "np.mgrid": [
                    18,
                    43,
                    85,
                    63
                ],
                "np": [
                    64,
                    65,
                    133,
                    103,
                    138,
                    43,
                    44,
                    76,
                    18,
                    114,
                    85,
                    86,
                    87,
                    24,
                    25,
                    125,
                    63
                ],
                "Z1": [
                    64,
                    66,
                    70,
                    138,
                    44,
                    76,
                    48,
                    52,
                    86,
                    24,
                    26,
                    88
                ],
                "np.exp": [
                    64,
                    65,
                    86,
                    87,
                    24,
                    25
                ],
                "Z2": [
                    65,
                    66,
                    87,
                    88,
                    25,
                    26
                ],
                "Z": [
                    66,
                    35,
                    135,
                    138,
                    109,
                    114,
                    88,
                    26,
                    127,
                    30,
                    31
                ],
                "fig": [
                    33,
                    130,
                    36,
                    68,
                    136,
                    74,
                    107,
                    139,
                    77,
                    46,
                    112,
                    50,
                    115,
                    53,
                    122,
                    28
                ],
                "ax": [
                    130,
                    135,
                    136,
                    138,
                    139,
                    28,
                    30,
                    33,
                    35,
                    36,
                    46,
                    48,
                    50,
                    52,
                    53,
                    68,
                    70,
                    74,
                    76,
                    77,
                    107,
                    109,
                    112,
                    114,
                    115,
                    122,
                    123,
                    127
                ],
                "plt.subplots": [
                    68,
                    107,
                    46,
                    122,
                    28
                ],
                "plt": [
                    68,
                    107,
                    141,
                    46,
                    122,
                    28
                ],
                "pcm": [
                    130,
                    135,
                    136,
                    138,
                    139,
                    30,
                    33,
                    35,
                    36,
                    48,
                    50,
                    52,
                    53,
                    70,
                    74,
                    76,
                    77,
                    109,
                    112,
                    114,
                    115,
                    127
                ],
                "pcolor": [
                    35,
                    30
                ],
                "colors.LogNorm": [
                    31
                ],
                "colors": [
                    97,
                    134,
                    71,
                    48,
                    126,
                    94,
                    31
                ],
                "Z.min": [
                    31
                ],
                "Z.max": [
                    31
                ],
                "fig.colorbar": [
                    33,
                    130,
                    36,
                    136,
                    74,
                    139,
                    77,
                    112,
                    50,
                    115,
                    53
                ],
                "np.sin": [
                    44
                ],
                "pcolormesh": [
                    70,
                    135,
                    138,
                    76,
                    109,
                    48,
                    114,
                    52,
                    127
                ],
                "colors.PowerNorm": [
                    48
                ],
                "colors.SymLogNorm": [
                    71
                ],
                "np.max": [
                    114,
                    76,
                    138
                ],
                "colors.Normalize": [
                    97,
                    94
                ],
                "self.midpoint": [
                    96,
                    102
                ],
                "self": [
                    96,
                    97,
                    102
                ],
                "midpoint": [
                    96
                ],
                "colors.Normalize.__init__": [
                    97
                ],
                "vmin": [
                    97
                ],
                "vmax": [
                    97
                ],
                "clip": [
                    97
                ],
                "x": [
                    102,
                    103
                ],
                "y": [
                    102,
                    103
                ],
                "self.vmin": [
                    102
                ],
                "self.vmax": [
                    102
                ],
                "np.ma.masked_array": [
                    103
                ],
                "np.ma": [
                    103
                ],
                "np.interp": [
                    103
                ],
                "value": [
                    103
                ],
                "MidpointNormalize": [
                    110
                ],
                "ax.flatten": [
                    123
                ],
                "bounds": [
                    134,
                    125,
                    126,
                    133
                ],
                "np.linspace": [
                    125
                ],
                "norm": [
                    128,
                    134,
                    126,
                    135
                ],
                "colors.BoundaryNorm": [
                    134,
                    126
                ],
                "np.array": [
                    133
                ],
                "plt.show": [
                    141
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/matplotlib/examples/userdemo/colormap_normalizations_symlognorm.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "pcm = ax[0].pcolormesh(X, Y, Z,\n                       norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,\n                                              vmin=-1.0, vmax=1.0),\n                       cmap='RdBu_r')",
                    "start_line": 30,
                    "end_line": 33
                }
            ],
            "inscope_functions": [],
            "inscope_function_signatures": [],
            "variables_in_file": {
                "N": [
                    22,
                    23
                ],
                "X": [
                    36,
                    23,
                    24,
                    25,
                    30
                ],
                "Y": [
                    36,
                    23,
                    24,
                    25,
                    30
                ],
                "np.mgrid": [
                    23
                ],
                "np": [
                    24,
                    25,
                    36,
                    23
                ],
                "complex": [
                    23
                ],
                "Z1": [
                    24,
                    26
                ],
                "np.exp": [
                    24,
                    25
                ],
                "Z2": [
                    25,
                    26
                ],
                "Z": [
                    26,
                    36,
                    30
                ],
                "fig": [
                    34,
                    28,
                    37
                ],
                "ax": [
                    34,
                    36,
                    37,
                    28,
                    30
                ],
                "plt.subplots": [
                    28
                ],
                "plt": [
                    28,
                    39
                ],
                "pcm": [
                    34,
                    36,
                    37,
                    30
                ],
                "pcolormesh": [
                    36,
                    30
                ],
                "colors.SymLogNorm": [
                    31
                ],
                "colors": [
                    31
                ],
                "fig.colorbar": [
                    34,
                    37
                ],
                "np.max": [
                    36
                ],
                "plt.show": [
                    39
                ]
            },
            "filtered_variables_in_file": {
                "N": [
                    22,
                    23
                ],
                "X": [
                    36,
                    23,
                    24,
                    25,
                    30
                ],
                "Y": [
                    36,
                    23,
                    24,
                    25,
                    30
                ],
                "np.mgrid": [
                    23
                ],
                "np": [
                    24,
                    25,
                    36,
                    23
                ],
                "Z1": [
                    24,
                    26
                ],
                "np.exp": [
                    24,
                    25
                ],
                "Z2": [
                    25,
                    26
                ],
                "Z": [
                    26,
                    36,
                    30
                ],
                "fig": [
                    34,
                    28,
                    37
                ],
                "ax": [
                    34,
                    36,
                    37,
                    28,
                    30
                ],
                "plt.subplots": [
                    28
                ],
                "plt": [
                    28,
                    39
                ],
                "pcm": [
                    34,
                    36,
                    37,
                    30
                ],
                "pcolormesh": [
                    36,
                    30
                ],
                "colors.SymLogNorm": [
                    31
                ],
                "colors": [
                    31
                ],
                "fig.colorbar": [
                    34,
                    37
                ],
                "np.max": [
                    36
                ],
                "plt.show": [
                    39
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/matplotlib/lib/matplotlib/colors.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, linthresh, linscale=1.0,\n             vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    linthresh : float\n        The range within which the plot is linear (to avoid having the plot\n        go to infinity around zero).\n    linscale : float, default: 1\n        This allows the linear range (-*linthresh* to *linthresh*) to be\n        stretched relative to the logarithmic range. Its value is the\n        number of decades to use for each half of the linear range. For\n        example, when *linscale* == 1.0 (the default), the space used for\n        the positive and negative halves of the linear range will be equal\n        to one decade in the logarithmic range.\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.linthresh = float(linthresh)\n    self._linscale_adj = (linscale / (1.0 - np.e ** -1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()\n",
                    "decorators": [],
                    "docstring": "Parameters\n----------\nlinthresh : float\n    The range within which the plot is linear (to avoid having the plot\n    go to infinity around zero).\nlinscale : float, default: 1\n    This allows the linear range (-*linthresh* to *linthresh*) to be\n    stretched relative to the logarithmic range. Its value is the\n    number of decades to use for each half of the linear range. For\n    example, when *linscale* == 1.0 (the default), the space used for\n    the positive and negative halves of the linear range will be equal\n    to one decade in the logarithmic range.",
                    "start_line": 1205,
                    "end_line": 1225,
                    "variables": {
                        "Normalize.__init__": [
                            1221
                        ],
                        "Normalize": [
                            1221
                        ],
                        "self": [
                            1225,
                            1221,
                            1222,
                            1223
                        ],
                        "vmin": [
                            1224,
                            1221
                        ],
                        "vmax": [
                            1224,
                            1221
                        ],
                        "clip": [
                            1221
                        ],
                        "self.linthresh": [
                            1222
                        ],
                        "float": [
                            1222
                        ],
                        "linthresh": [
                            1222
                        ],
                        "self._linscale_adj": [
                            1223
                        ],
                        "linscale": [
                            1223
                        ],
                        "np.e": [
                            1223
                        ],
                        "np": [
                            1223
                        ],
                        "self._transform_vmin_vmax": [
                            1225
                        ]
                    },
                    "filtered_variables": {
                        "Normalize.__init__": [
                            1221
                        ],
                        "Normalize": [
                            1221
                        ],
                        "self": [
                            1225,
                            1221,
                            1222,
                            1223
                        ],
                        "vmin": [
                            1224,
                            1221
                        ],
                        "vmax": [
                            1224,
                            1221
                        ],
                        "clip": [
                            1221
                        ],
                        "self.linthresh": [
                            1222
                        ],
                        "linthresh": [
                            1222
                        ],
                        "self._linscale_adj": [
                            1223
                        ],
                        "linscale": [
                            1223
                        ],
                        "np.e": [
                            1223
                        ],
                        "np": [
                            1223
                        ],
                        "self._transform_vmin_vmax": [
                            1225
                        ]
                    },
                    "diff_line_number": 1205,
                    "class_data": {
                        "signature": "class SymLogNorm(Normalize)",
                        "docstring": "The symmetrical logarithmic scale is logarithmic in both the\npositive and negative directions from the origin.\n\nSince the values close to zero tend toward infinity, there is a\nneed to have a range around zero that is linear.  The parameter\n*linthresh* allows the user to specify the size of this range\n(-*linthresh*, *linthresh*).",
                        "constructor_docstring": "Parameters\n----------\nlinthresh : float\n    The range within which the plot is linear (to avoid having the plot\n    go to infinity around zero).\nlinscale : float, default: 1\n    This allows the linear range (-*linthresh* to *linthresh*) to be\n    stretched relative to the logarithmic range. Its value is the\n    number of decades to use for each half of the linear range. For\n    example, when *linscale* == 1.0 (the default), the space used for\n    the positive and negative halves of the linear range will be equal\n    to one decade in the logarithmic range.",
                        "functions": [
                            "def __init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    linthresh : float\n        The range within which the plot is linear (to avoid having the plot\n        go to infinity around zero).\n    linscale : float, default: 1\n        This allows the linear range (-*linthresh* to *linthresh*) to be\n        stretched relative to the logarithmic range. Its value is the\n        number of decades to use for each half of the linear range. For\n        example, when *linscale* == 1.0 (the default), the space used for\n        the positive and negative halves of the linear range will be equal\n        to one decade in the logarithmic range.\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.linthresh = float(linthresh)\n    self._linscale_adj = linscale / (1.0 - np.e ** (-1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()",
                            "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)\n    vmin, vmax = (self.vmin, self.vmax)\n    if vmin > vmax:\n        raise ValueError('minvalue must be less than or equal to maxvalue')\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax), mask=mask)\n        resdat = self._transform(result.data)\n        resdat -= self._lower\n        resdat /= self._upper - self._lower\n    if is_scalar:\n        result = result[0]\n    return result",
                            "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid='ignore'):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh)\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a",
                            "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > self.linthresh * self._linscale_adj\n    sign = np.sign(a[masked])\n    exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a",
                            "def _transform_vmin_vmax(self):\n    \"\"\"Calculates vmin and vmax in the transformed system.\"\"\"\n    vmin, vmax = (self.vmin, self.vmax)\n    arr = np.array([vmax, vmin]).astype(float)\n    self._upper, self._lower = self._transform(arr)",
                            "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError('Not invertible until scaled')\n    val = np.ma.asarray(value)\n    val = val * (self._upper - self._lower) + self._lower\n    return self._inv_transform(val)",
                            "def autoscale(self, A):\n    super().autoscale(A)\n    self._transform_vmin_vmax()",
                            "def autoscale_None(self, A):\n    super().autoscale_None(A)\n    self._transform_vmin_vmax()"
                        ],
                        "constructor_variables": [
                            "_linscale_adj",
                            "linthresh"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)",
                            "__call__(self, value, clip=None)",
                            "_transform(self, a)",
                            "_inv_transform(self, a)",
                            "_transform_vmin_vmax(self)",
                            "inverse(self, value)",
                            "autoscale(self, A)",
                            "autoscale_None(self, A)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964bb0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964bb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964bb0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964bb0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964d90>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-30",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964d90>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-30",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.2",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964190>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20.085536923187664",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "20.085536923187664",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964190>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964190>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-20.085536923187664",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "20.085536923187664",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "2.718281828459045",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964190>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964220>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964220>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Normalize.__init__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Normalize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f964220>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "vmin": {
                                    "variable_value": "-1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "vmax": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "clip": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "base": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._base": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook.warn_deprecated": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linthresh": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "linscale": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._transform_vmin_vmax": {
                                    "variable_value": "<bound method SymLogNorm._transform_vmin_vmax of <matplotlib.colors.SymLogNorm object at 0x10f964220>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_transform",
                    "function_code": "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid=\"ignore\"):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = (self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh))\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a\n",
                    "decorators": [],
                    "docstring": "Inplace transformation.",
                    "start_line": 1253,
                    "end_line": 1262,
                    "variables": {
                        "np.errstate": [
                            1255
                        ],
                        "np": [
                            1256,
                            1257,
                            1258,
                            1255
                        ],
                        "masked": [
                            1256,
                            1257,
                            1258,
                            1260,
                            1261
                        ],
                        "np.abs": [
                            1256,
                            1258
                        ],
                        "a": [
                            1256,
                            1257,
                            1258,
                            1260,
                            1261,
                            1262
                        ],
                        "self.linthresh": [
                            1256,
                            1258,
                            1259
                        ],
                        "self": [
                            1256,
                            1258,
                            1259,
                            1261
                        ],
                        "sign": [
                            1257,
                            1259
                        ],
                        "np.sign": [
                            1257
                        ],
                        "log": [
                            1258,
                            1259,
                            1260
                        ],
                        "self._linscale_adj": [
                            1258,
                            1261
                        ],
                        "np.log": [
                            1258
                        ]
                    },
                    "filtered_variables": {
                        "np.errstate": [
                            1255
                        ],
                        "np": [
                            1256,
                            1257,
                            1258,
                            1255
                        ],
                        "masked": [
                            1256,
                            1257,
                            1258,
                            1260,
                            1261
                        ],
                        "np.abs": [
                            1256,
                            1258
                        ],
                        "a": [
                            1256,
                            1257,
                            1258,
                            1260,
                            1261,
                            1262
                        ],
                        "self.linthresh": [
                            1256,
                            1258,
                            1259
                        ],
                        "self": [
                            1256,
                            1258,
                            1259,
                            1261
                        ],
                        "sign": [
                            1257,
                            1259
                        ],
                        "np.sign": [
                            1257
                        ],
                        "log": [
                            1258,
                            1259,
                            1260
                        ],
                        "self._linscale_adj": [
                            1258,
                            1261
                        ],
                        "np.log": [
                            1258
                        ]
                    },
                    "diff_line_number": 1258,
                    "class_data": {
                        "signature": "class SymLogNorm(Normalize)",
                        "docstring": "The symmetrical logarithmic scale is logarithmic in both the\npositive and negative directions from the origin.\n\nSince the values close to zero tend toward infinity, there is a\nneed to have a range around zero that is linear.  The parameter\n*linthresh* allows the user to specify the size of this range\n(-*linthresh*, *linthresh*).",
                        "constructor_docstring": "Parameters\n----------\nlinthresh : float\n    The range within which the plot is linear (to avoid having the plot\n    go to infinity around zero).\nlinscale : float, default: 1\n    This allows the linear range (-*linthresh* to *linthresh*) to be\n    stretched relative to the logarithmic range. Its value is the\n    number of decades to use for each half of the linear range. For\n    example, when *linscale* == 1.0 (the default), the space used for\n    the positive and negative halves of the linear range will be equal\n    to one decade in the logarithmic range.",
                        "functions": [
                            "def __init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    linthresh : float\n        The range within which the plot is linear (to avoid having the plot\n        go to infinity around zero).\n    linscale : float, default: 1\n        This allows the linear range (-*linthresh* to *linthresh*) to be\n        stretched relative to the logarithmic range. Its value is the\n        number of decades to use for each half of the linear range. For\n        example, when *linscale* == 1.0 (the default), the space used for\n        the positive and negative halves of the linear range will be equal\n        to one decade in the logarithmic range.\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.linthresh = float(linthresh)\n    self._linscale_adj = linscale / (1.0 - np.e ** (-1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()",
                            "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)\n    vmin, vmax = (self.vmin, self.vmax)\n    if vmin > vmax:\n        raise ValueError('minvalue must be less than or equal to maxvalue')\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax), mask=mask)\n        resdat = self._transform(result.data)\n        resdat -= self._lower\n        resdat /= self._upper - self._lower\n    if is_scalar:\n        result = result[0]\n    return result",
                            "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid='ignore'):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh)\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a",
                            "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > self.linthresh * self._linscale_adj\n    sign = np.sign(a[masked])\n    exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a",
                            "def _transform_vmin_vmax(self):\n    \"\"\"Calculates vmin and vmax in the transformed system.\"\"\"\n    vmin, vmax = (self.vmin, self.vmax)\n    arr = np.array([vmax, vmin]).astype(float)\n    self._upper, self._lower = self._transform(arr)",
                            "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError('Not invertible until scaled')\n    val = np.ma.asarray(value)\n    val = val * (self._upper - self._lower) + self._lower\n    return self._inv_transform(val)",
                            "def autoscale(self, A):\n    super().autoscale(A)\n    self._transform_vmin_vmax()",
                            "def autoscale_None(self, A):\n    super().autoscale_None(A)\n    self._transform_vmin_vmax()"
                        ],
                        "constructor_variables": [
                            "_linscale_adj",
                            "linthresh"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)",
                            "__call__(self, value, clip=None)",
                            "_transform(self, a)",
                            "_inv_transform(self, a)",
                            "_transform_vmin_vmax(self)",
                            "inverse(self, value)",
                            "autoscale(self, A)",
                            "autoscale_None(self, A)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-30.,  -1.,   2.,   6.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True, False, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-12.60287142,  -1.89837205,   3.7967441 ,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-12.60287142,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-30.,  -1.,   2.,   6.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True, False, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-12.60287142,  -1.89837205,   3.7967441 ,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-12.60287142,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-1.89837205])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(0,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(0,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([2.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([3.7967441])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(0,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(0,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([6.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-30.,  -1.,   2.,   6.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True, False, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-12.60287142,  -1.89837205,   3.7967441 ,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-12.60287142,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-30.,  -1.,   2.,   6.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True, False, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-12.60287142,  -1.89837205,   3.7967441 ,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f1e8a60>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-12.60287142,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f21b6a0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f21b6a0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  5., -30.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f21b6a0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f21b6a0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([  7.22759302, -12.60287142])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-30.,  -1.,   2.,   6.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f21b6a0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True, False, False,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-12.60287142,  -1.89837205,   3.7967441 ,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "3.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f21b6a0>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-12.60287142,   7.77455769])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.8983720482431916",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 20.08553692, -20.08553692])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f20d430>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 4.58197671, -4.58197671])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f20d430>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([ 4.58197671, -4.58197671])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 20.08553692, -20.08553692])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f20d430>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 4.58197671, -4.58197671])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f20d430>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([ 4.58197671, -4.58197671])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-20.08553692,  -7.3890561 ,  -2.71828183,  -1.        ,\n         0.        ,   1.        ,   2.71828183,   7.3890561 ,\n        20.08553692])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f20d430>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True,  True, False, False, False,  True,  True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-4.58197671, -3.58197671, -2.58197671, -1.58197671,  0.        ,\n        1.58197671,  2.58197671,  3.58197671,  4.58197671])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f20d430>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1., -1., -1.,  1.,  1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-4.58197671, -3.58197671, -2.58197671,  2.58197671,  3.58197671,\n        4.58197671])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.5819767068693265",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 1000., -1000.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f221d00>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 4.11111111, -4.11111111])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f221d00>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([ 4.11111111, -4.11111111])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 1000., -1000.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f221d00>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([ 4.11111111, -4.11111111])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f221d00>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([ 1., -1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([ 4.11111111, -4.11111111])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ],
                        [
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-1000.,  -100.,   -10.,    -1.,     0.,     1.,    10.,   100.,\n        1000.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f221d00>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            },
                            {
                                "np.errstate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masked": {
                                    "variable_value": "array([ True,  True,  True, False, False, False,  True,  True,  True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.abs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "array([-4.11111111, -3.11111111, -2.11111111, -1.11111111,  0.        ,\n        1.11111111,  2.11111111,  3.11111111,  4.11111111])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "self.linthresh": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.SymLogNorm object at 0x10f221d00>",
                                    "variable_type": "SymLogNorm",
                                    "variable_shape": null
                                },
                                "sign": {
                                    "variable_value": "array([-1., -1., -1.,  1.,  1.,  1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "np.sign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "log": {
                                    "variable_value": "array([-4.11111111, -3.11111111, -2.11111111,  2.11111111,  3.11111111,\n        4.11111111])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(6,)"
                                },
                                "self._linscale_adj": {
                                    "variable_value": "1.1111111111111112",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.log": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._log_base": {
                                    "variable_value": "2.302585092994046",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_inv_transform",
                    "function_code": "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > (self.linthresh * self._linscale_adj)\n    sign = np.sign(a[masked])\n    exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a\n",
                    "decorators": [],
                    "docstring": "Inverse inplace Transformation.",
                    "start_line": 1264,
                    "end_line": 1272,
                    "variables": {
                        "masked": [
                            1266,
                            1267,
                            1268,
                            1270,
                            1271
                        ],
                        "np.abs": [
                            1266
                        ],
                        "np": [
                            1266,
                            1267,
                            1268
                        ],
                        "a": [
                            1266,
                            1267,
                            1268,
                            1270,
                            1271,
                            1272
                        ],
                        "self.linthresh": [
                            1266,
                            1268,
                            1269
                        ],
                        "self": [
                            1266,
                            1268,
                            1269,
                            1271
                        ],
                        "self._linscale_adj": [
                            1266,
                            1268,
                            1271
                        ],
                        "sign": [
                            1267,
                            1268,
                            1269
                        ],
                        "np.sign": [
                            1267
                        ],
                        "exp": [
                            1268,
                            1269,
                            1270
                        ],
                        "np.exp": [
                            1268
                        ]
                    },
                    "filtered_variables": {
                        "masked": [
                            1266,
                            1267,
                            1268,
                            1270,
                            1271
                        ],
                        "np.abs": [
                            1266
                        ],
                        "np": [
                            1266,
                            1267,
                            1268
                        ],
                        "a": [
                            1266,
                            1267,
                            1268,
                            1270,
                            1271,
                            1272
                        ],
                        "self.linthresh": [
                            1266,
                            1268,
                            1269
                        ],
                        "self": [
                            1266,
                            1268,
                            1269,
                            1271
                        ],
                        "self._linscale_adj": [
                            1266,
                            1268,
                            1271
                        ],
                        "sign": [
                            1267,
                            1268,
                            1269
                        ],
                        "np.sign": [
                            1267
                        ],
                        "exp": [
                            1268,
                            1269,
                            1270
                        ],
                        "np.exp": [
                            1268
                        ]
                    },
                    "diff_line_number": 1268,
                    "class_data": {
                        "signature": "class SymLogNorm(Normalize)",
                        "docstring": "The symmetrical logarithmic scale is logarithmic in both the\npositive and negative directions from the origin.\n\nSince the values close to zero tend toward infinity, there is a\nneed to have a range around zero that is linear.  The parameter\n*linthresh* allows the user to specify the size of this range\n(-*linthresh*, *linthresh*).",
                        "constructor_docstring": "Parameters\n----------\nlinthresh : float\n    The range within which the plot is linear (to avoid having the plot\n    go to infinity around zero).\nlinscale : float, default: 1\n    This allows the linear range (-*linthresh* to *linthresh*) to be\n    stretched relative to the logarithmic range. Its value is the\n    number of decades to use for each half of the linear range. For\n    example, when *linscale* == 1.0 (the default), the space used for\n    the positive and negative halves of the linear range will be equal\n    to one decade in the logarithmic range.",
                        "functions": [
                            "def __init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    linthresh : float\n        The range within which the plot is linear (to avoid having the plot\n        go to infinity around zero).\n    linscale : float, default: 1\n        This allows the linear range (-*linthresh* to *linthresh*) to be\n        stretched relative to the logarithmic range. Its value is the\n        number of decades to use for each half of the linear range. For\n        example, when *linscale* == 1.0 (the default), the space used for\n        the positive and negative halves of the linear range will be equal\n        to one decade in the logarithmic range.\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.linthresh = float(linthresh)\n    self._linscale_adj = linscale / (1.0 - np.e ** (-1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()",
                            "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)\n    vmin, vmax = (self.vmin, self.vmax)\n    if vmin > vmax:\n        raise ValueError('minvalue must be less than or equal to maxvalue')\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax), mask=mask)\n        resdat = self._transform(result.data)\n        resdat -= self._lower\n        resdat /= self._upper - self._lower\n    if is_scalar:\n        result = result[0]\n    return result",
                            "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid='ignore'):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh)\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a",
                            "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > self.linthresh * self._linscale_adj\n    sign = np.sign(a[masked])\n    exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a",
                            "def _transform_vmin_vmax(self):\n    \"\"\"Calculates vmin and vmax in the transformed system.\"\"\"\n    vmin, vmax = (self.vmin, self.vmax)\n    arr = np.array([vmax, vmin]).astype(float)\n    self._upper, self._lower = self._transform(arr)",
                            "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError('Not invertible until scaled')\n    val = np.ma.asarray(value)\n    val = val * (self._upper - self._lower) + self._lower\n    return self._inv_transform(val)",
                            "def autoscale(self, A):\n    super().autoscale(A)\n    self._transform_vmin_vmax()",
                            "def autoscale_None(self, A):\n    super().autoscale_None(A)\n    self._transform_vmin_vmax()"
                        ],
                        "constructor_variables": [
                            "_linscale_adj",
                            "linthresh"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)",
                            "__call__(self, value, clip=None)",
                            "_transform(self, a)",
                            "_inv_transform(self, a)",
                            "_transform_vmin_vmax(self)",
                            "inverse(self, value)",
                            "autoscale(self, A)",
                            "autoscale_None(self, A)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_named_colors_mapping():\n    \"\"\"Return the global mapping of names to named colors.\"\"\"\n    return _colors_full_map",
                "def _sanitize_extrema(ex):\n    if ex is None:\n        return ex\n    try:\n        ret = ex.item()\n    except AttributeError:\n        ret = float(ex)\n    return ret",
                "def _is_nth_color(c):\n    \"\"\"Return whether *c* can be interpreted as an item in the color cycle.\"\"\"\n    return isinstance(c, str) and re.match(r\"\\AC[0-9]+\\Z\", c)",
                "def is_color_like(c):\n    \"\"\"Return whether *c* can be interpreted as an RGB(A) color.\"\"\"\n    # Special-case nth color syntax because it cannot be parsed during setup.\n    if _is_nth_color(c):\n        return True\n    try:\n        to_rgba(c)\n    except ValueError:\n        return False\n    else:\n        return True",
                "def same_color(c1, c2):\n    \"\"\"Return whether the colors *c1* and *c2* are the same.\"\"\"\n    return (to_rgba_array(c1) == to_rgba_array(c2)).all()",
                "def to_rgba(c, alpha=None):\n    \"\"\"\n    Convert *c* to an RGBA color.\n\n    Parameters\n    ----------\n    c : Matplotlib color or ``np.ma.masked``\n\n    alpha : float, optional\n        If *alpha* is not ``None``, it forces the alpha value, except if *c* is\n        ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.\n\n    Returns\n    -------\n    tuple\n        Tuple of ``(r, g, b, a)`` scalars.\n    \"\"\"\n    # Special-case nth color syntax because it should not be cached.\n    if _is_nth_color(c):\n        from matplotlib import rcParams\n        prop_cycler = rcParams['axes.prop_cycle']\n        colors = prop_cycler.by_key().get('color', ['k'])\n        c = colors[int(c[1:]) % len(colors)]\n    try:\n        rgba = _colors_full_map.cache[c, alpha]\n    except (KeyError, TypeError):  # Not in cache, or unhashable.\n        rgba = None\n    if rgba is None:  # Suppress exception chaining of cache lookup failure.\n        rgba = _to_rgba_no_colorcycle(c, alpha)\n        try:\n            _colors_full_map.cache[c, alpha] = rgba\n        except TypeError:\n            pass\n    return rgba",
                "def _to_rgba_no_colorcycle(c, alpha=None):\n    \"\"\"\n    Convert *c* to an RGBA color, with no support for color-cycle syntax.\n\n    If *alpha* is not ``None``, it forces the alpha value, except if *c* is\n    ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.\n    \"\"\"\n    orig_c = c\n    if c is np.ma.masked:\n        return (0., 0., 0., 0.)\n    if isinstance(c, str):\n        if c.lower() == \"none\":\n            return (0., 0., 0., 0.)\n        # Named color.\n        try:\n            # This may turn c into a non-string, so we check again below.\n            c = _colors_full_map[c]\n        except KeyError:\n            try:\n                c = _colors_full_map[c.lower()]\n            except KeyError:\n                pass\n            else:\n                if len(orig_c) == 1:\n                    cbook.warn_deprecated(\n                        \"3.1\", message=\"Support for uppercase \"\n                        \"single-letter colors is deprecated since Matplotlib \"\n                        \"%(since)s and will be removed %(removal)s; please \"\n                        \"use lowercase instead.\")\n    if isinstance(c, str):\n        # hex color in #rrggbb format.\n        match = re.match(r\"\\A#[a-fA-F0-9]{6}\\Z\", c)\n        if match:\n            return (tuple(int(n, 16) / 255\n                          for n in [c[1:3], c[3:5], c[5:7]])\n                    + (alpha if alpha is not None else 1.,))\n        # hex color in #rgb format, shorthand for #rrggbb.\n        match = re.match(r\"\\A#[a-fA-F0-9]{3}\\Z\", c)\n        if match:\n            return (tuple(int(n, 16) / 255\n                          for n in [c[1]*2, c[2]*2, c[3]*2])\n                    + (alpha if alpha is not None else 1.,))\n        # hex color with alpha in #rrggbbaa format.\n        match = re.match(r\"\\A#[a-fA-F0-9]{8}\\Z\", c)\n        if match:\n            color = [int(n, 16) / 255\n                     for n in [c[1:3], c[3:5], c[5:7], c[7:9]]]\n            if alpha is not None:\n                color[-1] = alpha\n            return tuple(color)\n        # hex color with alpha in #rgba format, shorthand for #rrggbbaa.\n        match = re.match(r\"\\A#[a-fA-F0-9]{4}\\Z\", c)\n        if match:\n            color = [int(n, 16) / 255\n                     for n in [c[1]*2, c[2]*2, c[3]*2, c[4]*2]]\n            if alpha is not None:\n                color[-1] = alpha\n            return tuple(color)\n        # string gray.\n        try:\n            c = float(c)\n        except ValueError:\n            pass\n        else:\n            if not (0 <= c <= 1):\n                raise ValueError(\n                    f\"Invalid string grayscale value {orig_c!r}. \"\n                    f\"Value must be within 0-1 range\")\n            return c, c, c, alpha if alpha is not None else 1.\n        raise ValueError(f\"Invalid RGBA argument: {orig_c!r}\")\n    # tuple color.\n    if not np.iterable(c):\n        raise ValueError(f\"Invalid RGBA argument: {orig_c!r}\")\n    if len(c) not in [3, 4]:\n        raise ValueError(\"RGBA sequence should have length 3 or 4\")\n    if not all(isinstance(x, Number) for x in c):\n        # Checks that don't work: `map(float, ...)`, `np.array(..., float)` and\n        # `np.array(...).astype(float)` would all convert \"0.5\" to 0.5.\n        raise ValueError(f\"Invalid RGBA argument: {orig_c!r}\")\n    # Return a tuple to prevent the cached value from being modified.\n    c = tuple(map(float, c))\n    if len(c) == 3 and alpha is None:\n        alpha = 1\n    if alpha is not None:\n        c = c[:3] + (alpha,)\n    if any(elem < 0 or elem > 1 for elem in c):\n        raise ValueError(\"RGBA values should be within 0-1 range\")\n    return c",
                "def to_rgba_array(c, alpha=None):\n    \"\"\"\n    Convert *c* to a (n, 4) array of RGBA colors.\n\n    If *alpha* is not ``None``, it forces the alpha value.  If *c* is\n    ``\"none\"`` (case-insensitive) or an empty list, an empty array is returned.\n    If *c* is a masked array, an ndarray is returned with a (0, 0, 0, 0)\n    row for each masked value or row in *c*.\n    \"\"\"\n    # Special-case inputs that are already arrays, for performance.  (If the\n    # array has the wrong kind or shape, raise the error during one-at-a-time\n    # conversion.)\n    if (isinstance(c, np.ndarray) and c.dtype.kind in \"if\"\n            and c.ndim == 2 and c.shape[1] in [3, 4]):\n        mask = c.mask.any(axis=1) if np.ma.is_masked(c) else None\n        c = np.ma.getdata(c)\n        if c.shape[1] == 3:\n            result = np.column_stack([c, np.zeros(len(c))])\n            result[:, -1] = alpha if alpha is not None else 1.\n        elif c.shape[1] == 4:\n            result = c.copy()\n            if alpha is not None:\n                result[:, -1] = alpha\n        if mask is not None:\n            result[mask] = 0\n        if np.any((result < 0) | (result > 1)):\n            raise ValueError(\"RGBA values should be within 0-1 range\")\n        return result\n    # Handle single values.\n    # Note that this occurs *after* handling inputs that are already arrays, as\n    # `to_rgba(c, alpha)` (below) is expensive for such inputs, due to the need\n    # to format the array in the ValueError message(!).\n    if cbook._str_lower_equal(c, \"none\"):\n        return np.zeros((0, 4), float)\n    try:\n        return np.array([to_rgba(c, alpha)], float)\n    except (ValueError, TypeError):\n        pass\n\n    # Convert one at a time.\n    if isinstance(c, str):\n        # Single string as color sequence.\n        # This is deprecated and will be removed in the future.\n        try:\n            result = np.array([to_rgba(cc, alpha) for cc in c])\n        except ValueError:\n            raise ValueError(\n                \"'%s' is neither a valid single color nor a color sequence \"\n                \"consisting of single character color specifiers such as \"\n                \"'rgb'. Note also that the latter is deprecated.\" % c)\n        else:\n            cbook.warn_deprecated(\"3.2\", message=\"Using a string of single \"\n                                  \"character colors as a color sequence is \"\n                                  \"deprecated. Use an explicit list instead.\")\n            return result\n\n    if len(c) == 0:\n        return np.zeros((0, 4), float)\n    else:\n        return np.array([to_rgba(cc, alpha) for cc in c])",
                "def to_rgb(c):\n    \"\"\"Convert *c* to an RGB color, silently dropping the alpha channel.\"\"\"\n    return to_rgba(c)[:3]",
                "def to_hex(c, keep_alpha=False):\n    \"\"\"\n    Convert *c* to a hex color.\n\n    Uses the ``#rrggbb`` format if *keep_alpha* is False (the default),\n    ``#rrggbbaa`` otherwise.\n    \"\"\"\n    c = to_rgba(c)\n    if not keep_alpha:\n        c = c[:3]\n    return \"#\" + \"\".join(format(int(round(val * 255)), \"02x\") for val in c)",
                "def _create_lookup_table(N, data, gamma=1.0):\n    r\"\"\"\n    Create an *N* -element 1-d lookup table.\n\n    This assumes a mapping :math:`f : [0, 1] \\rightarrow [0, 1]`. The returned\n    data is an array of N values :math:`y = f(x)` where x is sampled from\n    [0, 1].\n\n    By default (*gamma* = 1) x is equidistantly sampled from [0, 1]. The\n    *gamma* correction factor :math:`\\gamma` distorts this equidistant\n    sampling by :math:`x \\rightarrow x^\\gamma`.\n\n    Parameters\n    ----------\n    N : int\n        The number of elements of the created lookup table.\n        This must be N >= 1.\n    data : Mx3 array-like or callable\n        Defines the mapping :math:`f`.\n\n        If a Mx3 array-like, the rows define values (x, y0, y1). The x values\n        must start with x=0, end with x=1, and all x values be in increasing\n        order.\n\n        A value between :math:`x_i` and :math:`x_{i+1}` is mapped to the range\n        :math:`y^1_{i-1} \\ldots y^0_i` by linear interpolation.\n\n        For the simple case of a y-continuous mapping, y0 and y1 are identical.\n\n        The two values of y are to allow for discontinuous mapping functions.\n        E.g. a sawtooth with a period of 0.2 and an amplitude of 1 would be::\n\n            [(0, 1, 0), (0.2, 1, 0), (0.4, 1, 0), ..., [(1, 1, 0)]\n\n        In the special case of ``N == 1``, by convention the returned value\n        is y0 for x == 1.\n\n        If *data* is a callable, it must accept and return numpy arrays::\n\n           data(x : ndarray) -> ndarray\n\n        and map values between 0 - 1 to 0 - 1.\n    gamma : float\n        Gamma correction factor for input distribution x of the mapping.\n\n        See also https://en.wikipedia.org/wiki/Gamma_correction.\n\n    Returns\n    -------\n    lut : array\n        The lookup table where ``lut[x * (N-1)]`` gives the closest value\n        for values of x between 0 and 1.\n\n    Notes\n    -----\n    This function is internally used for `.LinearSegmentedColormap`.\n    \"\"\"\n\n    if callable(data):\n        xind = np.linspace(0, 1, N) ** gamma\n        lut = np.clip(np.array(data(xind), dtype=float), 0, 1)\n        return lut\n\n    try:\n        adata = np.array(data)\n    except Exception:\n        raise TypeError(\"data must be convertible to an array\")\n    shape = adata.shape\n    if len(shape) != 2 or shape[1] != 3:\n        raise ValueError(\"data must be nx3 format\")\n\n    x = adata[:, 0]\n    y0 = adata[:, 1]\n    y1 = adata[:, 2]\n\n    if x[0] != 0. or x[-1] != 1.0:\n        raise ValueError(\n            \"data mapping points must start with x=0 and end with x=1\")\n    if (np.diff(x) < 0).any():\n        raise ValueError(\"data mapping points must have x in increasing order\")\n    # begin generation of lookup table\n    if N == 1:\n        # convention: use the y = f(x=1) value for a 1-element lookup table\n        lut = np.array(y0[-1])\n    else:\n        x = x * (N - 1)\n        xind = (N - 1) * np.linspace(0, 1, N) ** gamma\n        ind = np.searchsorted(x, xind)[1:-1]\n\n        distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])\n        lut = np.concatenate([\n            [y1[0]],\n            distance * (y0[ind] - y1[ind - 1]) + y1[ind - 1],\n            [y0[-1]],\n        ])\n    # ensure that the lut is confined to values between 0 and 1 by clipping it\n    return np.clip(lut, 0.0, 1.0)",
                "@cbook.deprecated(\"3.2\",\n                  addendum='This is not considered public API any longer.')\n@docstring.copy(_create_lookup_table)\ndef makeMappingArray(N, data, gamma=1.0):\n    return _create_lookup_table(N, data, gamma)",
                "def rgb_to_hsv(arr):\n    \"\"\"\n    Convert float rgb values (in the range [0, 1]), in a numpy array to hsv\n    values.\n\n    Parameters\n    ----------\n    arr : (..., 3) array-like\n       All values must be in the range [0, 1]\n\n    Returns\n    -------\n    hsv : (..., 3) ndarray\n       Colors converted to hsv values in range [0, 1]\n    \"\"\"\n    arr = np.asarray(arr)\n\n    # check length of the last dimension, should be _some_ sort of rgb\n    if arr.shape[-1] != 3:\n        raise ValueError(\"Last dimension of input array must be 3; \"\n                         \"shape {} was found.\".format(arr.shape))\n\n    in_shape = arr.shape\n    arr = np.array(\n        arr, copy=False,\n        dtype=np.promote_types(arr.dtype, np.float32),  # Don't work on ints.\n        ndmin=2,  # In case input was 1D.\n    )\n    out = np.zeros_like(arr)\n    arr_max = arr.max(-1)\n    ipos = arr_max > 0\n    delta = arr.ptp(-1)\n    s = np.zeros_like(delta)\n    s[ipos] = delta[ipos] / arr_max[ipos]\n    ipos = delta > 0\n    # red is max\n    idx = (arr[..., 0] == arr_max) & ipos\n    out[idx, 0] = (arr[idx, 1] - arr[idx, 2]) / delta[idx]\n    # green is max\n    idx = (arr[..., 1] == arr_max) & ipos\n    out[idx, 0] = 2. + (arr[idx, 2] - arr[idx, 0]) / delta[idx]\n    # blue is max\n    idx = (arr[..., 2] == arr_max) & ipos\n    out[idx, 0] = 4. + (arr[idx, 0] - arr[idx, 1]) / delta[idx]\n\n    out[..., 0] = (out[..., 0] / 6.0) % 1.0\n    out[..., 1] = s\n    out[..., 2] = arr_max\n\n    return out.reshape(in_shape)",
                "def hsv_to_rgb(hsv):\n    \"\"\"\n    Convert hsv values to rgb.\n\n    Parameters\n    ----------\n    hsv : (..., 3) array-like\n       All values assumed to be in range [0, 1]\n\n    Returns\n    -------\n    rgb : (..., 3) ndarray\n       Colors converted to RGB values in range [0, 1]\n    \"\"\"\n    hsv = np.asarray(hsv)\n\n    # check length of the last dimension, should be _some_ sort of rgb\n    if hsv.shape[-1] != 3:\n        raise ValueError(\"Last dimension of input array must be 3; \"\n                         \"shape {shp} was found.\".format(shp=hsv.shape))\n\n    in_shape = hsv.shape\n    hsv = np.array(\n        hsv, copy=False,\n        dtype=np.promote_types(hsv.dtype, np.float32),  # Don't work on ints.\n        ndmin=2,  # In case input was 1D.\n    )\n\n    h = hsv[..., 0]\n    s = hsv[..., 1]\n    v = hsv[..., 2]\n\n    r = np.empty_like(h)\n    g = np.empty_like(h)\n    b = np.empty_like(h)\n\n    i = (h * 6.0).astype(int)\n    f = (h * 6.0) - i\n    p = v * (1.0 - s)\n    q = v * (1.0 - s * f)\n    t = v * (1.0 - s * (1.0 - f))\n\n    idx = i % 6 == 0\n    r[idx] = v[idx]\n    g[idx] = t[idx]\n    b[idx] = p[idx]\n\n    idx = i == 1\n    r[idx] = q[idx]\n    g[idx] = v[idx]\n    b[idx] = p[idx]\n\n    idx = i == 2\n    r[idx] = p[idx]\n    g[idx] = v[idx]\n    b[idx] = t[idx]\n\n    idx = i == 3\n    r[idx] = p[idx]\n    g[idx] = q[idx]\n    b[idx] = v[idx]\n\n    idx = i == 4\n    r[idx] = t[idx]\n    g[idx] = p[idx]\n    b[idx] = v[idx]\n\n    idx = i == 5\n    r[idx] = v[idx]\n    g[idx] = p[idx]\n    b[idx] = q[idx]\n\n    idx = s == 0\n    r[idx] = v[idx]\n    g[idx] = v[idx]\n    b[idx] = v[idx]\n\n    rgb = np.stack([r, g, b], axis=-1)\n\n    return rgb.reshape(in_shape)",
                "def _vector_magnitude(arr):\n    # things that don't work here:\n    #  * np.linalg.norm: drops mask from ma.array\n    #  * np.sum: drops mask from ma.array unless entire vector is masked\n    sum_sq = 0\n    for i in range(arr.shape[-1]):\n        sum_sq += arr[..., i, np.newaxis] ** 2\n    return np.sqrt(sum_sq)",
                "def from_levels_and_colors(levels, colors, extend='neither'):\n    \"\"\"\n    A helper routine to generate a cmap and a norm instance which\n    behave similar to contourf's levels and colors arguments.\n\n    Parameters\n    ----------\n    levels : sequence of numbers\n        The quantization levels used to construct the :class:`BoundaryNorm`.\n        Value ``v`` is quantized to level ``i`` if ``lev[i] <= v < lev[i+1]``.\n    colors : sequence of colors\n        The fill color to use for each level. If *extend* is \"neither\" there\n        must be ``n_level - 1`` colors. For an *extend* of \"min\" or \"max\" add\n        one extra color, and for an *extend* of \"both\" add two colors.\n    extend : {'neither', 'min', 'max', 'both'}, optional\n        The behaviour when a value falls out of range of the given levels.\n        See :func:`~matplotlib.pyplot.contourf` for details.\n\n    Returns\n    -------\n    cmap : `~matplotlib.colors.Normalize`\n    norm : `~matplotlib.colors.Colormap`\n    \"\"\"\n    slice_map = {\n        'both': slice(1, -1),\n        'min': slice(1, None),\n        'max': slice(0, -1),\n        'neither': slice(0, None),\n    }\n    cbook._check_in_list(slice_map, extend=extend)\n    color_slice = slice_map[extend]\n\n    n_data_colors = len(levels) - 1\n    n_expected = n_data_colors + color_slice.start - (color_slice.stop or 0)\n    if len(colors) != n_expected:\n        raise ValueError(\n            f'With extend == {extend!r} and {len(levels)} levels, '\n            f'expected {n_expected} colors, but got {len(colors)}')\n\n    cmap = ListedColormap(colors[color_slice], N=n_data_colors)\n\n    if extend in ['min', 'both']:\n        cmap.set_under(colors[0])\n    else:\n        cmap.set_under('none')\n\n    if extend in ['max', 'both']:\n        cmap.set_over(colors[-1])\n    else:\n        cmap.set_over('none')\n\n    cmap.colorbar_extend = extend\n\n    norm = BoundaryNorm(levels, ncolors=n_data_colors)\n    return cmap, norm",
                "def __init__(self, mapping):\n    super().__init__(mapping)\n    self.cache = {}",
                "def __setitem__(self, key, value):\n    super().__setitem__(key, value)\n    self.cache.clear()",
                "def __delitem__(self, key):\n    super().__delitem__(key)\n    self.cache.clear()",
                "def __init__(self, name, N=256):\n    \"\"\"\n    Parameters\n    ----------\n    name : str\n        The name of the colormap.\n    N : int\n        The number of rgb quantization levels.\n\n    \"\"\"\n    self.name = name\n    self.N = int(N)  # ensure that N is always int\n    self._rgba_bad = (0.0, 0.0, 0.0, 0.0)  # If bad, don't paint anything.\n    self._rgba_under = None\n    self._rgba_over = None\n    self._i_under = self.N\n    self._i_over = self.N + 1\n    self._i_bad = self.N + 2\n    self._isinit = False\n\n    #: When this colormap exists on a scalar mappable and colorbar_extend\n    #: is not False, colorbar creation will pick up ``colorbar_extend`` as\n    #: the default value for the ``extend`` keyword in the\n    #: :class:`matplotlib.colorbar.Colorbar` constructor.\n    self.colorbar_extend = False",
                "def __call__(self, X, alpha=None, bytes=False):\n    \"\"\"\n    Parameters\n    ----------\n    X : float, ndarray\n        The data value(s) to convert to RGBA.\n        For floats, X should be in the interval ``[0.0, 1.0]`` to\n        return the RGBA values ``X*100`` percent along the Colormap line.\n        For integers, X should be in the interval ``[0, Colormap.N)`` to\n        return RGBA values *indexed* from the Colormap with index ``X``.\n    alpha : float, None\n        Alpha must be a scalar between 0 and 1, or None.\n    bytes : bool\n        If False (default), the returned RGBA values will be floats in the\n        interval ``[0, 1]`` otherwise they will be uint8s in the interval\n        ``[0, 255]``.\n\n    Returns\n    -------\n    Tuple of RGBA values if X is scalar, otherwise an array of\n    RGBA values with a shape of ``X.shape + (4, )``.\n    \"\"\"\n    if not self._isinit:\n        self._init()\n\n    mask_bad = X.mask if np.ma.is_masked(X) else np.isnan(X)  # Mask nan's.\n    xa = np.array(X, copy=True)\n    if not xa.dtype.isnative:\n        xa = xa.byteswap().newbyteorder()  # Native byteorder is faster.\n    if xa.dtype.kind == \"f\":\n        with np.errstate(invalid=\"ignore\"):\n            xa *= self.N\n            # Negative values are out of range, but astype(int) would\n            # truncate them towards zero.\n            xa[xa < 0] = -1\n            # xa == 1 (== N after multiplication) is not out of range.\n            xa[xa == self.N] = self.N - 1\n            # Avoid converting large positive values to negative integers.\n            np.clip(xa, -1, self.N, out=xa)\n            xa = xa.astype(int)\n    # Set the over-range indices before the under-range;\n    # otherwise the under-range values get converted to over-range.\n    xa[xa > self.N - 1] = self._i_over\n    xa[xa < 0] = self._i_under\n    xa[mask_bad] = self._i_bad\n\n    if bytes:\n        lut = (self._lut * 255).astype(np.uint8)\n    else:\n        lut = self._lut.copy()  # Don't let alpha modify original _lut.\n\n    if alpha is not None:\n        alpha = np.clip(alpha, 0, 1)\n        if bytes:\n            alpha = int(alpha * 255)\n        if (lut[-1] == 0).all():\n            lut[:-1, -1] = alpha\n            # All zeros is taken as a flag for the default bad\n            # color, which is no color--fully transparent.  We\n            # don't want to override this.\n        else:\n            lut[:, -1] = alpha\n            # If the bad value is set to have a color, then we\n            # override its alpha just as for any other value.\n\n    rgba = lut[xa]\n    if not np.iterable(X):\n        # Return a tuple if the input was a scalar\n        rgba = tuple(rgba)\n    return rgba",
                "def __copy__(self):\n    cls = self.__class__\n    cmapobject = cls.__new__(cls)\n    cmapobject.__dict__.update(self.__dict__)\n    if self._isinit:\n        cmapobject._lut = np.copy(self._lut)\n    return cmapobject",
                "def set_bad(self, color='k', alpha=None):\n    \"\"\"Set the color for masked values.\"\"\"\n    self._rgba_bad = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def set_under(self, color='k', alpha=None):\n    \"\"\"\n    Set the color for low out-of-range values when ``norm.clip = False``.\n    \"\"\"\n    self._rgba_under = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def set_over(self, color='k', alpha=None):\n    \"\"\"\n    Set the color for high out-of-range values when ``norm.clip = False``.\n    \"\"\"\n    self._rgba_over = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def _set_extremes(self):\n    if self._rgba_under:\n        self._lut[self._i_under] = self._rgba_under\n    else:\n        self._lut[self._i_under] = self._lut[0]\n    if self._rgba_over:\n        self._lut[self._i_over] = self._rgba_over\n    else:\n        self._lut[self._i_over] = self._lut[self.N - 1]\n    self._lut[self._i_bad] = self._rgba_bad",
                "def _init(self):\n    \"\"\"Generate the lookup table, ``self._lut``.\"\"\"\n    raise NotImplementedError(\"Abstract class only\")",
                "def is_gray(self):\n    if not self._isinit:\n        self._init()\n    return (np.all(self._lut[:, 0] == self._lut[:, 1]) and\n            np.all(self._lut[:, 0] == self._lut[:, 2]))",
                "def _resample(self, lutsize):\n    \"\"\"Return a new color map with *lutsize* entries.\"\"\"\n    raise NotImplementedError()",
                "def reversed(self, name=None):\n    \"\"\"\n    Return a reversed instance of the Colormap.\n\n    .. note:: This function is not implemented for base class.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    See Also\n    --------\n    LinearSegmentedColormap.reversed\n    ListedColormap.reversed\n    \"\"\"\n    raise NotImplementedError()",
                "def __init__(self, name, segmentdata, N=256, gamma=1.0):\n    \"\"\"\n    Create color map from linear mapping segments\n\n    segmentdata argument is a dictionary with a red, green and blue\n    entries. Each entry should be a list of *x*, *y0*, *y1* tuples,\n    forming rows in a table. Entries for alpha are optional.\n\n    Example: suppose you want red to increase from 0 to 1 over\n    the bottom half, green to do the same over the middle half,\n    and blue over the top half.  Then you would use::\n\n        cdict = {'red':   [(0.0,  0.0, 0.0),\n                           (0.5,  1.0, 1.0),\n                           (1.0,  1.0, 1.0)],\n\n                 'green': [(0.0,  0.0, 0.0),\n                           (0.25, 0.0, 0.0),\n                           (0.75, 1.0, 1.0),\n                           (1.0,  1.0, 1.0)],\n\n                 'blue':  [(0.0,  0.0, 0.0),\n                           (0.5,  0.0, 0.0),\n                           (1.0,  1.0, 1.0)]}\n\n    Each row in the table for a given color is a sequence of\n    *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase\n    monotonically from 0 to 1.  For any input value *z* falling\n    between *x[i]* and *x[i+1]*, the output value of a given color\n    will be linearly interpolated between *y1[i]* and *y0[i+1]*::\n\n        row i:   x  y0  y1\n                       /\n                      /\n        row i+1: x  y0  y1\n\n    Hence y0 in the first row and y1 in the last row are never used.\n\n    See Also\n    --------\n    LinearSegmentedColormap.from_list\n        Static method; factory function for generating a smoothly-varying\n        LinearSegmentedColormap.\n\n    makeMappingArray\n        For information about making a mapping array.\n    \"\"\"\n    # True only if all colors in map are identical; needed for contouring.\n    self.monochrome = False\n    Colormap.__init__(self, name, N)\n    self._segmentdata = segmentdata\n    self._gamma = gamma",
                "def _init(self):\n    self._lut = np.ones((self.N + 3, 4), float)\n    self._lut[:-3, 0] = _create_lookup_table(\n        self.N, self._segmentdata['red'], self._gamma)\n    self._lut[:-3, 1] = _create_lookup_table(\n        self.N, self._segmentdata['green'], self._gamma)\n    self._lut[:-3, 2] = _create_lookup_table(\n        self.N, self._segmentdata['blue'], self._gamma)\n    if 'alpha' in self._segmentdata:\n        self._lut[:-3, 3] = _create_lookup_table(\n            self.N, self._segmentdata['alpha'], 1)\n    self._isinit = True\n    self._set_extremes()",
                "def set_gamma(self, gamma):\n    \"\"\"Set a new gamma value and regenerate color map.\"\"\"\n    self._gamma = gamma\n    self._init()",
                "@staticmethod\ndef from_list(name, colors, N=256, gamma=1.0):\n    \"\"\"\n    Create a `LinearSegmentedColormap` from a list of colors.\n\n    Parameters\n    ----------\n    name : str\n        The name of the colormap.\n    colors : array-like of colors or array-like of (value, color)\n        If only colors are given, they are equidistantly mapped from the\n        range :math:`[0, 1]`; i.e. 0 maps to ``colors[0]`` and 1 maps to\n        ``colors[-1]``.\n        If (value, color) pairs are given, the mapping is from *value*\n        to *color*. This can be used to divide the range unevenly.\n    N : int\n        The number of rgb quantization levels.\n    gamma : float\n    \"\"\"\n    if not np.iterable(colors):\n        raise ValueError('colors must be iterable')\n\n    if (isinstance(colors[0], Sized) and len(colors[0]) == 2\n            and not isinstance(colors[0], str)):\n        # List of value, color pairs\n        vals, colors = zip(*colors)\n    else:\n        vals = np.linspace(0, 1, len(colors))\n\n    cdict = dict(red=[], green=[], blue=[], alpha=[])\n    for val, color in zip(vals, colors):\n        r, g, b, a = to_rgba(color)\n        cdict['red'].append((val, r, r))\n        cdict['green'].append((val, g, g))\n        cdict['blue'].append((val, b, b))\n        cdict['alpha'].append((val, a, a))\n\n    return LinearSegmentedColormap(name, cdict, N, gamma)",
                "def _resample(self, lutsize):\n    \"\"\"Return a new color map with *lutsize* entries.\"\"\"\n    return LinearSegmentedColormap(self.name, self._segmentdata, lutsize)",
                "@staticmethod\ndef _reverser(func, x):\n    return func(1 - x)",
                "def reversed(self, name=None):\n    \"\"\"\n    Return a reversed instance of the Colormap.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    Returns\n    -------\n    LinearSegmentedColormap\n        The reversed colormap.\n    \"\"\"\n    if name is None:\n        name = self.name + \"_r\"\n\n    # Using a partial object keeps the cmap picklable.\n    data_r = {key: (functools.partial(self._reverser, data)\n                    if callable(data) else\n                    [(1.0 - x, y1, y0) for x, y0, y1 in reversed(data)])\n              for key, data in self._segmentdata.items()}\n\n    return LinearSegmentedColormap(name, data_r, self.N, self._gamma)",
                "def __init__(self, colors, name='from_list', N=None):\n    self.monochrome = False  # Are all colors identical? (for contour.py)\n    if N is None:\n        self.colors = colors\n        N = len(colors)\n    else:\n        if isinstance(colors, str):\n            self.colors = [colors] * N\n            self.monochrome = True\n        elif np.iterable(colors):\n            if len(colors) == 1:\n                self.monochrome = True\n            self.colors = list(\n                itertools.islice(itertools.cycle(colors), N))\n        else:\n            try:\n                gray = float(colors)\n            except TypeError:\n                pass\n            else:\n                self.colors = [gray] * N\n            self.monochrome = True\n    Colormap.__init__(self, name, N)",
                "def _init(self):\n    self._lut = np.zeros((self.N + 3, 4), float)\n    self._lut[:-3] = to_rgba_array(self.colors)\n    self._isinit = True\n    self._set_extremes()",
                "def _resample(self, lutsize):\n    \"\"\"Return a new color map with *lutsize* entries.\"\"\"\n    colors = self(np.linspace(0, 1, lutsize))\n    return ListedColormap(colors, name=self.name)",
                "def reversed(self, name=None):\n    \"\"\"\n    Return a reversed instance of the Colormap.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    Returns\n    -------\n    ListedColormap\n        A reversed instance of the colormap.\n    \"\"\"\n    if name is None:\n        name = self.name + \"_r\"\n\n    colors_r = list(reversed(self.colors))\n    return ListedColormap(colors_r, name=name, N=self.N)",
                "def __init__(self, vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    vmin : float\n    vmax : float\n    clip : bool\n        If ``True`` values falling outside the range ``[vmin, vmax]``,\n        are mapped to 0 or 1, whichever is closer, and masked values are\n        set to 1. If ``False`` masked values remain masked.\n\n    Notes\n    -----\n    If neither *vmin* or *vmax* are given, they are initialized from the\n    minimum and maximum value respectively of the first input\n    processed.  That is, ``__call__(A)`` calls ``autoscale_None(A)``.\n    Returns 0 if::\n\n        vmin==vmax\n\n    Clipping silently defeats the purpose of setting the over, under, and\n    masked colors in a colormap, so it is likely to lead to surprises;\n    therefore the default is ``clip=False``.\n    \"\"\"\n    self.vmin = _sanitize_extrema(vmin)\n    self.vmax = _sanitize_extrema(vmax)\n    self.clip = clip",
                "@staticmethod\ndef process_value(value):\n    \"\"\"\n    Homogenize the input *value* for easy and efficient normalization.\n\n    *value* can be a scalar or sequence.\n\n    Returns\n    -------\n    result : masked array\n        Masked array with the same shape as *value*.\n    is_scalar : bool\n        ``True`` if *value* is a scalar.\n\n    Notes\n    -----\n    Float dtypes are preserved; integer types with two bytes or smaller are\n    converted to np.float32, and larger types are converted to np.float64.\n    Preserving float32 when possible, and using in-place operations,\n    greatly improves speed for large arrays.\n    \"\"\"\n    is_scalar = not np.iterable(value)\n    if is_scalar:\n        value = [value]\n    dtype = np.min_scalar_type(value)\n    if np.issubdtype(dtype, np.integer) or dtype.type is np.bool_:\n        # bool_/int8/int16 -> float32; int32/int64 -> float64\n        dtype = np.promote_types(dtype, np.float32)\n    # ensure data passed in as an ndarray subclass are interpreted as\n    # an ndarray. See issue #6622.\n    mask = np.ma.getmask(value)\n    data = np.asarray(value)\n    result = np.ma.array(data, mask=mask, dtype=dtype, copy=True)\n    return result, is_scalar",
                "def __call__(self, value, clip=None):\n    \"\"\"\n    Normalize *value* data in the ``[vmin, vmax]`` interval into the\n    ``[0.0, 1.0]`` interval and return it.\n\n    Parameters\n    ----------\n    value\n        Data to normalize.\n    clip : bool\n        If ``None``, defaults to ``self.clip`` (which defaults to\n        ``False``).\n\n    Notes\n    -----\n    If not already initialized, ``self.vmin`` and ``self.vmax`` are\n    initialized using ``self.autoscale_None(value)``.\n    \"\"\"\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    self.autoscale_None(result)\n    # Convert at least to float, without losing precision.\n    (vmin,), _ = self.process_value(self.vmin)\n    (vmax,), _ = self.process_value(self.vmax)\n    if vmin == vmax:\n        result.fill(0)   # Or should it be all masked?  Or 0.5?\n    elif vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # ma division is very slow; we can take a shortcut\n        resdat = result.data\n        resdat -= vmin\n        resdat /= (vmax - vmin)\n        result = np.ma.array(resdat, mask=result.mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until both vmin and vmax are set\")\n    (vmin,), _ = self.process_value(self.vmin)\n    (vmax,), _ = self.process_value(self.vmax)\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return vmin + val * (vmax - vmin)\n    else:\n        return vmin + value * (vmax - vmin)",
                "def autoscale(self, A):\n    \"\"\"Set *vmin*, *vmax* to min, max of *A*.\"\"\"\n    A = np.asanyarray(A)\n    self.vmin = A.min()\n    self.vmax = A.max()",
                "def autoscale_None(self, A):\n    \"\"\"If vmin or vmax are not set, use the min/max of *A* to set them.\"\"\"\n    A = np.asanyarray(A)\n    if self.vmin is None and A.size:\n        self.vmin = A.min()\n    if self.vmax is None and A.size:\n        self.vmax = A.max()",
                "def scaled(self):\n    \"\"\"Return whether vmin and vmax are set.\"\"\"\n    return self.vmin is not None and self.vmax is not None",
                "def __init__(self, vcenter, vmin=None, vmax=None):\n    \"\"\"\n    Normalize data with a set center.\n\n    Useful when mapping data with an unequal rates of change around a\n    conceptual center, e.g., data that range from -2 to 4, with 0 as\n    the midpoint.\n\n    Parameters\n    ----------\n    vcenter : float\n        The data value that defines ``0.5`` in the normalization.\n    vmin : float, optional\n        The data value that defines ``0.0`` in the normalization.\n        Defaults to the min value of the dataset.\n    vmax : float, optional\n        The data value that defines ``1.0`` in the normalization.\n        Defaults to the the max value of the dataset.\n\n    Examples\n    --------\n    This maps data value -4000 to 0., 0 to 0.5, and +10000 to 1.0; data\n    between is linearly interpolated::\n\n        >>> import matplotlib.colors as mcolors\n        >>> offset = mcolors.TwoSlopeNorm(vmin=-4000.,\n                                          vcenter=0., vmax=10000)\n        >>> data = [-4000., -2000., 0., 2500., 5000., 7500., 10000.]\n        >>> offset(data)\n        array([0., 0.25, 0.5, 0.625, 0.75, 0.875, 1.0])\n    \"\"\"\n\n    self.vcenter = vcenter\n    self.vmin = vmin\n    self.vmax = vmax\n    if vcenter is not None and vmax is not None and vcenter >= vmax:\n        raise ValueError('vmin, vcenter, and vmax must be in '\n                         'ascending order')\n    if vcenter is not None and vmin is not None and vcenter <= vmin:\n        raise ValueError('vmin, vcenter, and vmax must be in '\n                         'ascending order')",
                "def autoscale_None(self, A):\n    \"\"\"\n    Get vmin and vmax, and then clip at vcenter\n    \"\"\"\n    super().autoscale_None(A)\n    if self.vmin > self.vcenter:\n        self.vmin = self.vcenter\n    if self.vmax < self.vcenter:\n        self.vmax = self.vcenter",
                "def __call__(self, value, clip=None):\n    \"\"\"\n    Map value to the interval [0, 1]. The clip argument is unused.\n    \"\"\"\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)  # sets self.vmin, self.vmax if None\n\n    if not self.vmin <= self.vcenter <= self.vmax:\n        raise ValueError(\"vmin, vcenter, vmax must increase monotonically\")\n    result = np.ma.masked_array(\n        np.interp(result, [self.vmin, self.vcenter, self.vmax],\n                  [0, 0.5, 1.]), mask=np.ma.getmask(result))\n    if is_scalar:\n        result = np.atleast_1d(result)[0]\n    return result",
                "def _check_vmin_vmax(self):\n    if self.vmin > self.vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif self.vmin <= 0:\n        raise ValueError(\"minvalue must be positive\")",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    result = np.ma.masked_less_equal(result, 0, copy=False)\n\n    self.autoscale_None(result)\n    self._check_vmin_vmax()\n    vmin, vmax = self.vmin, self.vmax\n    if vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # in-place equivalent of above can be much faster\n        resdat = result.data\n        mask = result.mask\n        if mask is np.ma.nomask:\n            mask = (resdat <= 0)\n        else:\n            mask |= resdat <= 0\n        np.copyto(resdat, 1, where=mask)\n        np.log(resdat, resdat)\n        resdat -= np.log(vmin)\n        resdat /= (np.log(vmax) - np.log(vmin))\n        result = np.ma.array(resdat, mask=mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    self._check_vmin_vmax()\n    vmin, vmax = self.vmin, self.vmax\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return vmin * np.ma.power((vmax / vmin), val)\n    else:\n        return vmin * pow((vmax / vmin), value)",
                "def autoscale(self, A):\n    # docstring inherited.\n    super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))",
                "def autoscale_None(self, A):\n    # docstring inherited.\n    super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))",
                "def __init__(self, linthresh, linscale=1.0,\n             vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    linthresh : float\n        The range within which the plot is linear (to avoid having the plot\n        go to infinity around zero).\n    linscale : float, default: 1\n        This allows the linear range (-*linthresh* to *linthresh*) to be\n        stretched relative to the logarithmic range. Its value is the\n        number of decades to use for each half of the linear range. For\n        example, when *linscale* == 1.0 (the default), the space used for\n        the positive and negative halves of the linear range will be equal\n        to one decade in the logarithmic range.\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.linthresh = float(linthresh)\n    self._linscale_adj = (linscale / (1.0 - np.e ** -1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)\n    vmin, vmax = self.vmin, self.vmax\n\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # in-place equivalent of above can be much faster\n        resdat = self._transform(result.data)\n        resdat -= self._lower\n        resdat /= (self._upper - self._lower)\n\n    if is_scalar:\n        result = result[0]\n    return result",
                "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid=\"ignore\"):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = (self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh))\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a",
                "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > (self.linthresh * self._linscale_adj)\n    sign = np.sign(a[masked])\n    exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a",
                "def _transform_vmin_vmax(self):\n    \"\"\"Calculates vmin and vmax in the transformed system.\"\"\"\n    vmin, vmax = self.vmin, self.vmax\n    arr = np.array([vmax, vmin]).astype(float)\n    self._upper, self._lower = self._transform(arr)",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    val = np.ma.asarray(value)\n    val = val * (self._upper - self._lower) + self._lower\n    return self._inv_transform(val)",
                "def autoscale(self, A):\n    # docstring inherited.\n    super().autoscale(A)\n    self._transform_vmin_vmax()",
                "def autoscale_None(self, A):\n    # docstring inherited.\n    super().autoscale_None(A)\n    self._transform_vmin_vmax()",
                "def __init__(self, gamma, vmin=None, vmax=None, clip=False):\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.gamma = gamma",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    self.autoscale_None(result)\n    gamma = self.gamma\n    vmin, vmax = self.vmin, self.vmax\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        resdat = result.data\n        resdat -= vmin\n        resdat[resdat < 0] = 0\n        np.power(resdat, gamma, resdat)\n        resdat /= (vmax - vmin) ** gamma\n\n        result = np.ma.array(resdat, mask=result.mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    gamma = self.gamma\n    vmin, vmax = self.vmin, self.vmax\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return np.ma.power(val, 1. / gamma) * (vmax - vmin) + vmin\n    else:\n        return pow(value, 1. / gamma) * (vmax - vmin) + vmin",
                "def __init__(self, boundaries, ncolors, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    boundaries : array-like\n        Monotonically increasing sequence of boundaries\n    ncolors : int\n        Number of colors in the colormap to be used\n    clip : bool, optional\n        If clip is ``True``, out of range values are mapped to 0 if they\n        are below ``boundaries[0]`` or mapped to ncolors - 1 if they are\n        above ``boundaries[-1]``.\n\n        If clip is ``False``, out of range values are mapped to -1 if\n        they are below ``boundaries[0]`` or mapped to ncolors if they are\n        above ``boundaries[-1]``. These are then converted to valid indices\n        by :meth:`Colormap.__call__`.\n\n    Notes\n    -----\n    *boundaries* defines the edges of bins, and data falling within a bin\n    is mapped to the color with the same index.\n\n    If the number of bins doesn't equal *ncolors*, the color is chosen\n    by linear interpolation of the bin number onto color numbers.\n    \"\"\"\n    self.clip = clip\n    self.vmin = boundaries[0]\n    self.vmax = boundaries[-1]\n    self.boundaries = np.asarray(boundaries)\n    self.N = len(self.boundaries)\n    self.Ncmap = ncolors\n    if self.N - 1 == self.Ncmap:\n        self._interp = False\n    else:\n        self._interp = True",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    xx, is_scalar = self.process_value(value)\n    mask = np.ma.getmaskarray(xx)\n    xx = np.atleast_1d(xx.filled(self.vmax + 1))\n    if clip:\n        np.clip(xx, self.vmin, self.vmax, out=xx)\n        max_col = self.Ncmap - 1\n    else:\n        max_col = self.Ncmap\n    iret = np.zeros(xx.shape, dtype=np.int16)\n    for i, b in enumerate(self.boundaries):\n        iret[xx >= b] = i\n    if self._interp:\n        scalefac = (self.Ncmap - 1) / (self.N - 2)\n        iret = (iret * scalefac).astype(np.int16)\n    iret[xx < self.vmin] = -1\n    iret[xx >= self.vmax] = max_col\n    ret = np.ma.array(iret, mask=mask)\n    if is_scalar:\n        ret = int(ret[0])  # assume python scalar\n    return ret",
                "def inverse(self, value):\n    \"\"\"\n    Raises\n    ------\n    ValueError\n        BoundaryNorm is not invertible, so calling this method will always\n        raise an error\n    \"\"\"\n    raise ValueError(\"BoundaryNorm is not invertible\")",
                "def __call__(self, value, clip=None):\n    return value",
                "def inverse(self, value):\n    return value",
                "def __init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1,\n             hsv_min_sat=1, hsv_max_sat=0):\n    \"\"\"\n    Specify the azimuth (measured clockwise from south) and altitude\n    (measured up from the plane of the surface) of the light source\n    in degrees.\n\n    Parameters\n    ----------\n    azdeg : float, default: 315 degrees (from the northwest)\n        The azimuth (0-360, degrees clockwise from North) of the light\n        source.\n    altdeg : float, default: 45 degrees\n        The altitude (0-90, degrees up from horizontal) of the light\n        source.\n\n    Notes\n    -----\n    For backwards compatibility, the parameters *hsv_min_val*,\n    *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at\n    initialization as well.  However, these parameters will only be used if\n    \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.\n    See the documentation for :meth:`blend_hsv` for more details.\n    \"\"\"\n    self.azdeg = azdeg\n    self.altdeg = altdeg\n    self.hsv_min_val = hsv_min_val\n    self.hsv_max_val = hsv_max_val\n    self.hsv_min_sat = hsv_min_sat\n    self.hsv_max_sat = hsv_max_sat",
                "@property\ndef direction(self):\n    \"\"\"The unit vector direction towards the light source.\"\"\"\n    # Azimuth is in degrees clockwise from North. Convert to radians\n    # counterclockwise from East (mathematical notation).\n    az = np.radians(90 - self.azdeg)\n    alt = np.radians(self.altdeg)\n    return np.array([\n        np.cos(az) * np.cos(alt),\n        np.sin(az) * np.cos(alt),\n        np.sin(alt)\n    ])",
                "def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.):\n    \"\"\"\n    Calculates the illumination intensity for a surface using the defined\n    azimuth and elevation for the light source.\n\n    This computes the normal vectors for the surface, and then passes them\n    on to `shade_normals`\n\n    Parameters\n    ----------\n    elevation : array-like\n        A 2d array (or equivalent) of the height values used to generate an\n        illumination map\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topographic effects.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    intensity : ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n\n    # Because most image and raster GIS data has the first row in the array\n    # as the \"top\" of the image, dy is implicitly negative.  This is\n    # consistent to what `imshow` assumes, as well.\n    dy = -dy\n\n    # compute the normal vectors from the partial derivatives\n    e_dy, e_dx = np.gradient(vert_exag * elevation, dy, dx)\n\n    # .view is to keep subclasses\n    normal = np.empty(elevation.shape + (3,)).view(type(elevation))\n    normal[..., 0] = -e_dx\n    normal[..., 1] = -e_dy\n    normal[..., 2] = 1\n    normal /= _vector_magnitude(normal)\n\n    return self.shade_normals(normal, fraction)",
                "def shade_normals(self, normals, fraction=1.):\n    \"\"\"\n    Calculates the illumination intensity for the normal vectors of a\n    surface using the defined azimuth and elevation for the light source.\n\n    Imagine an artificial sun placed at infinity in some azimuth and\n    elevation position illuminating our surface. The parts of the surface\n    that slope toward the sun should brighten while those sides facing away\n    should become darker.\n\n    Parameters\n    ----------\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    intensity : ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n\n    intensity = normals.dot(self.direction)\n\n    # Apply contrast stretch\n    imin, imax = intensity.min(), intensity.max()\n    intensity *= fraction\n\n    # Rescale to 0-1, keeping range before contrast stretch\n    # If constant slope, keep relative scaling (i.e. flat should be 0.5,\n    # fully occluded 0, etc.)\n    if (imax - imin) > 1e-6:\n        # Strictly speaking, this is incorrect. Negative values should be\n        # clipped to 0 because they're fully occluded. However, rescaling\n        # in this manner is consistent with the previous implementation and\n        # visually appears better than a \"hard\" clip.\n        intensity -= imin\n        intensity /= (imax - imin)\n    intensity = np.clip(intensity, 0, 1)\n\n    return intensity",
                "def shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None,\n          vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs):\n    \"\"\"\n    Combine colormapped data values with an illumination intensity map\n    (a.k.a.  \"hillshade\") of the values.\n\n    Parameters\n    ----------\n    data : array-like\n        A 2d array (or equivalent) of the height values used to generate a\n        shaded map.\n    cmap : `~matplotlib.colors.Colormap`\n        The colormap used to color the *data* array. Note that this must be\n        a `~matplotlib.colors.Colormap` instance.  For example, rather than\n        passing in ``cmap='gist_earth'``, use\n        ``cmap=plt.get_cmap('gist_earth')`` instead.\n    norm : `~matplotlib.colors.Normalize` instance, optional\n        The normalization used to scale values before colormapping. If\n        None, the input will be linearly scaled between its min and max.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data\n        values with the illumination intensity.  Default is\n        \"overlay\".  Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to\n        combine an MxNx3 RGB array of floats (ranging 0 to 1) with\n        an MxNx1 hillshade array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``) Additional kwargs supplied\n        to this function will be passed on to the *blend_mode*\n        function.\n    vmin : scalar or None, optional\n        The minimum value used in colormapping *data*. If *None* the\n        minimum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vmax : scalar or None, optional\n        The maximum value used in colormapping *data*. If *None* the\n        maximum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    rgba : ndarray\n        An MxNx4 array of floats ranging between 0-1.\n    \"\"\"\n    if vmin is None:\n        vmin = data.min()\n    if vmax is None:\n        vmax = data.max()\n    if norm is None:\n        norm = Normalize(vmin=vmin, vmax=vmax)\n\n    rgb0 = cmap(norm(data))\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,\n                          vert_exag=vert_exag, dx=dx, dy=dy,\n                          fraction=fraction, **kwargs)\n    # Don't overwrite the alpha channel, if present.\n    rgb0[..., :3] = rgb1[..., :3]\n    return rgb0",
                "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given *elevation*.\n\n    Parameters\n    ----------\n    rgb : array-like\n        An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n    elevation : array-like\n        An (M, N) array of the height values used to generate a shaded map.\n    fraction : number\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data values\n        with the illumination intensity.  For backwards compatibility, this\n        defaults to \"hsv\". Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to combine an\n        MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n        array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``)\n        Additional kwargs supplied to this function will be passed on to\n        the *blend_mode* function.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    shaded_rgb : ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n\n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys))\n\n    # Only apply result where hillshade intensity isn't masked\n    if hasattr(intensity, 'mask'):\n        mask = intensity.mask[..., 0]\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n\n    return blend",
                "def blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None,\n              hsv_min_val=None, hsv_min_sat=None):\n    \"\"\"\n    Take the input data array, convert to HSV values in the given colormap,\n    then adjust those color values to give the impression of a shaded\n    relief map with a specified light source.  RGBA values are returned,\n    which can then be used to plot the shaded image with imshow.\n\n    The color of the resulting image will be darkened by moving the (s, v)\n    values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the\n    shaded regions, or lightened by sliding (s, v) toward (hsv_max_sat,\n    hsv_max_val) in regions that are illuminated.  The default extremes are\n    chose so that completely shaded points are nearly black (s = 1, v = 0)\n    and completely illuminated points are nearly white (s = 0, v = 1).\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n    hsv_max_sat : number, optional, default: 1\n        The maximum saturation value that the *intensity* map can shift the\n        output image to. Defaults to 1.\n    hsv_min_sat : number, optional\n        The minimum saturation value that the *intensity* map can shift the\n        output image to. Defaults to 0.\n    hsv_max_val : number, optional\n        The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 1.\n    hsv_min_val : number, optional\n        The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 0.\n\n    Returns\n    -------\n    rgb : ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    # Backward compatibility...\n    if hsv_max_sat is None:\n        hsv_max_sat = self.hsv_max_sat\n    if hsv_max_val is None:\n        hsv_max_val = self.hsv_max_val\n    if hsv_min_sat is None:\n        hsv_min_sat = self.hsv_min_sat\n    if hsv_min_val is None:\n        hsv_min_val = self.hsv_min_val\n\n    # Expects a 2D intensity array scaled between -1 to 1...\n    intensity = intensity[..., 0]\n    intensity = 2 * intensity - 1\n\n    # Convert to rgb, then rgb to hsv\n    hsv = rgb_to_hsv(rgb[:, :, 0:3])\n    hue, sat, val = np.moveaxis(hsv, -1, 0)\n\n    # Modify hsv values (in place) to simulate illumination.\n    # putmask(A, mask, B) <=> A[mask] = B[mask]\n    np.putmask(sat, (np.abs(sat) > 1.e-10) & (intensity > 0),\n               (1 - intensity) * sat + intensity * hsv_max_sat)\n    np.putmask(sat, (np.abs(sat) > 1.e-10) & (intensity < 0),\n               (1 + intensity) * sat - intensity * hsv_min_sat)\n    np.putmask(val, intensity > 0,\n               (1 - intensity) * val + intensity * hsv_max_val)\n    np.putmask(val, intensity < 0,\n               (1 + intensity) * val - intensity * hsv_min_val)\n    np.clip(hsv[:, :, 1:], 0, 1, out=hsv[:, :, 1:])\n\n    # Convert modified hsv back to rgb.\n    return hsv_to_rgb(hsv)",
                "def blend_soft_light(self, rgb, intensity):\n    \"\"\"\n    Combines an rgb image with an intensity map using \"soft light\"\n    blending.  Uses the \"pegtop\" formula.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    rgb : ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    return 2 * intensity * rgb + (1 - 2 * intensity) * rgb**2",
                "def blend_overlay(self, rgb, intensity):\n    \"\"\"\n    Combines an rgb image with an intensity map using \"overlay\" blending.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    rgb : ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    low = 2 * intensity * rgb\n    high = 1 - 2 * (1 - intensity) * (1 - rgb)\n    return np.where(rgb <= 0.5, low, high)"
            ],
            "inscope_function_signatures": [
                "get_named_colors_mapping()",
                "_sanitize_extrema(ex)",
                "_is_nth_color(c)",
                "is_color_like(c)",
                "same_color(c1, c2)",
                "to_rgba(c, alpha=None)",
                "_to_rgba_no_colorcycle(c, alpha=None)",
                "to_rgba_array(c, alpha=None)",
                "to_rgb(c)",
                "to_hex(c, keep_alpha=False)",
                "_create_lookup_table(N, data, gamma=1.0)",
                "makeMappingArray(N, data, gamma=1.0)",
                "rgb_to_hsv(arr)",
                "hsv_to_rgb(hsv)",
                "_vector_magnitude(arr)",
                "from_levels_and_colors(levels, colors, extend='neither')",
                "__init__(self, mapping)",
                "__setitem__(self, key, value)",
                "__delitem__(self, key)",
                "__init__(self, name, N=256)",
                "__call__(self, X, alpha=None, bytes=False)",
                "__copy__(self)",
                "set_bad(self, color='k', alpha=None)",
                "set_under(self, color='k', alpha=None)",
                "set_over(self, color='k', alpha=None)",
                "_set_extremes(self)",
                "_init(self)",
                "is_gray(self)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, name, segmentdata, N=256, gamma=1.0)",
                "_init(self)",
                "set_gamma(self, gamma)",
                "from_list(name, colors, N=256, gamma=1.0)",
                "_resample(self, lutsize)",
                "_reverser(func, x)",
                "reversed(self, name=None)",
                "__init__(self, colors, name='from_list', N=None)",
                "_init(self)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, vmin=None, vmax=None, clip=False)",
                "process_value(value)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "scaled(self)",
                "__init__(self, vcenter, vmin=None, vmax=None)",
                "autoscale_None(self, A)",
                "__call__(self, value, clip=None)",
                "_check_vmin_vmax(self)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)",
                "__call__(self, value, clip=None)",
                "_transform(self, a)",
                "_inv_transform(self, a)",
                "_transform_vmin_vmax(self)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "__init__(self, gamma, vmin=None, vmax=None, clip=False)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__init__(self, boundaries, ncolors, clip=False)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1, hsv_min_sat=1, hsv_max_sat=0)",
                "direction(self)",
                "hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)",
                "shade_normals(self, normals, fraction=1.0)",
                "shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None, vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs)",
                "shade_rgb(self, rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs)",
                "blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)",
                "blend_soft_light(self, rgb, intensity)",
                "blend_overlay(self, rgb, intensity)"
            ],
            "variables_in_file": {
                "dict": [
                    80,
                    781
                ],
                "__init__": [
                    82
                ],
                "super": [
                    1188,
                    1192,
                    1289,
                    1294,
                    1103,
                    82,
                    86,
                    90
                ],
                "mapping": [
                    82
                ],
                "self.cache": [
                    91,
                    83,
                    87
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    1026,
                    1028,
                    1029,
                    1629,
                    523,
                    1040,
                    1041,
                    1046,
                    1047,
                    1048,
                    1049,
                    1053,
                    547,
                    548,
                    556,
                    561,
                    563,
                    567,
                    568,
                    569,
                    572,
                    574,
                    1089,
                    1090,
                    1091,
                    1104,
                    1105,
                    1106,
                    83,
                    1107,
                    597,
                    87,
                    599,
                    600,
                    601,
                    91,
                    1113,
                    1114,
                    606,
                    607,
                    608,
                    1116,
                    1119,
                    1626,
                    1627,
                    1628,
                    614,
                    615,
                    616,
                    1636,
                    1637,
                    622,
                    623,
                    624,
                    1135,
                    1137,
                    627,
                    628,
                    630,
                    631,
                    632,
                    1142,
                    634,
                    635,
                    1144,
                    1148,
                    1149,
                    1150,
                    1246,
                    642,
                    643,
                    644,
                    645,
                    1247,
                    1175,
                    1177,
                    1178,
                    1696,
                    1724,
                    1221,
                    1222,
                    1223,
                    1225,
                    1229,
                    1231,
                    1232,
                    1233,
                    728,
                    729,
                    730,
                    731,
                    1245,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    1256,
                    1258,
                    1259,
                    749,
                    750,
                    1261,
                    1266,
                    1268,
                    1269,
                    1271,
                    1276,
                    1278,
                    1281,
                    1284,
                    1285,
                    1290,
                    1295,
                    1813,
                    1304,
                    793,
                    1305,
                    1309,
                    1311,
                    1313,
                    1314,
                    1315,
                    816,
                    819,
                    822,
                    824,
                    1337,
                    1339,
                    1340,
                    1867,
                    1872,
                    1873,
                    1874,
                    856,
                    858,
                    862,
                    863,
                    866,
                    867,
                    1386,
                    875,
                    876,
                    877,
                    1387,
                    1388,
                    880,
                    881,
                    882,
                    883,
                    1389,
                    1390,
                    1391,
                    887,
                    888,
                    1392,
                    1393,
                    1395,
                    1399,
                    1401,
                    1403,
                    1405,
                    1406,
                    1408,
                    1410,
                    1412,
                    1413,
                    1415,
                    1416,
                    906,
                    908,
                    909,
                    1934,
                    1936,
                    1938,
                    1940,
                    941,
                    942,
                    943,
                    999,
                    1001,
                    1003,
                    1624,
                    1005,
                    1006,
                    1625,
                    509,
                    510,
                    511
                ],
                "__setitem__": [
                    86
                ],
                "key": [
                    822,
                    90,
                    819,
                    86
                ],
                "value": [
                    1283,
                    1031,
                    1032,
                    1035,
                    1180,
                    1181,
                    1311,
                    1184,
                    1439,
                    1442,
                    1342,
                    1343,
                    1346,
                    966,
                    968,
                    969,
                    975,
                    976,
                    1231,
                    86,
                    1113,
                    1001,
                    1144,
                    1401
                ],
                "self.cache.clear": [
                    91,
                    87
                ],
                "__delitem__": [
                    90
                ],
                "_colors_full_map": [
                    96,
                    97,
                    100,
                    101,
                    102,
                    199,
                    105,
                    106,
                    171,
                    202,
                    111,
                    368,
                    177,
                    369,
                    94
                ],
                "_colors_full_map.update": [
                    96,
                    97,
                    100,
                    101,
                    102,
                    105
                ],
                "XKCD_COLORS": [
                    96,
                    98
                ],
                "k.replace": [
                    97,
                    102
                ],
                "k": [
                    97,
                    98,
                    99,
                    102,
                    103,
                    104
                ],
                "v": [
                    1536,
                    97,
                    98,
                    1537,
                    1540,
                    1570,
                    102,
                    103,
                    1571,
                    1572,
                    1546,
                    1551,
                    1557,
                    1527,
                    1562,
                    1565,
                    1535
                ],
                "XKCD_COLORS.items": [
                    98
                ],
                "CSS4_COLORS": [
                    356,
                    100
                ],
                "TABLEAU_COLORS": [
                    101,
                    103
                ],
                "TABLEAU_COLORS.items": [
                    103
                ],
                "BASE_COLORS": [
                    105
                ],
                "_ColorMapping": [
                    106
                ],
                "ex": [
                    120,
                    115,
                    116,
                    118
                ],
                "ret": [
                    1417,
                    1419,
                    1420,
                    118,
                    120,
                    121
                ],
                "ex.item": [
                    118
                ],
                "AttributeError": [
                    119
                ],
                "float": [
                    1222,
                    263,
                    871,
                    330,
                    880,
                    306,
                    243,
                    308,
                    120,
                    441,
                    1277,
                    734
                ],
                "isinstance": [
                    193,
                    258,
                    774,
                    775,
                    861,
                    212,
                    313,
                    285,
                    126
                ],
                "c": [
                    256,
                    258,
                    132,
                    135,
                    263,
                    264,
                    267,
                    268,
                    270,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    292,
                    165,
                    293,
                    169,
                    171,
                    175,
                    177,
                    305,
                    308,
                    313,
                    317,
                    190,
                    191,
                    193,
                    194,
                    322,
                    199,
                    329,
                    202,
                    332,
                    337,
                    212,
                    254,
                    214,
                    217,
                    347,
                    220,
                    349,
                    350,
                    223,
                    226,
                    229,
                    234,
                    237,
                    243,
                    247,
                    251,
                    126
                ],
                "str": [
                    193,
                    775,
                    212,
                    313,
                    861,
                    126
                ],
                "re.match": [
                    226,
                    234,
                    214,
                    220,
                    126
                ],
                "re": [
                    226,
                    357,
                    234,
                    214,
                    220,
                    126
                ],
                "_is_nth_color": [
                    132,
                    165
                ],
                "to_rgba": [
                    614,
                    135,
                    332,
                    622,
                    783,
                    337,
                    371,
                    308,
                    347,
                    317,
                    606
                ],
                "ValueError": [
                    257,
                    1282,
                    1027,
                    772,
                    261,
                    136,
                    269,
                    1430,
                    1176,
                    2040,
                    1317,
                    299,
                    309,
                    1464,
                    1338,
                    318,
                    319,
                    450,
                    1093,
                    1096,
                    457,
                    460,
                    1236,
                    1882,
                    1117,
                    1515,
                    1136,
                    1010,
                    1138,
                    244,
                    248,
                    252,
                    255
                ],
                "all": [
                    144,
                    258,
                    580
                ],
                "to_rgba_array": [
                    144,
                    881,
                    372
                ],
                "c1": [
                    144
                ],
                "c2": [
                    144
                ],
                "prop_cycler": [
                    168,
                    167
                ],
                "rcParams": [
                    167
                ],
                "colors": [
                    771,
                    2052,
                    774,
                    775,
                    777,
                    779,
                    782,
                    2039,
                    168,
                    169,
                    858,
                    859,
                    861,
                    862,
                    864,
                    865,
                    868,
                    871,
                    368,
                    887,
                    888,
                    2042,
                    2044,
                    2047
                ],
                "get": [
                    168
                ],
                "prop_cycler.by_key": [
                    168
                ],
                "int": [
                    350,
                    579,
                    228,
                    510,
                    169,
                    1419,
                    236,
                    564,
                    216,
                    1533,
                    222
                ],
                "len": [
                    256,
                    449,
                    290,
                    865,
                    774,
                    264,
                    169,
                    329,
                    779,
                    206,
                    1390,
                    2037,
                    2039,
                    2041,
                    2042,
                    859
                ],
                "rgba": [
                    171,
                    173,
                    174,
                    175,
                    590,
                    177,
                    593,
                    594,
                    180
                ],
                "_colors_full_map.cache": [
                    177,
                    171,
                    369
                ],
                "alpha": [
                    264,
                    265,
                    266,
                    267,
                    291,
                    294,
                    295,
                    171,
                    175,
                    177,
                    308,
                    317,
                    576,
                    577,
                    579,
                    581,
                    586,
                    332,
                    218,
                    606,
                    224,
                    230,
                    231,
                    614,
                    238,
                    239,
                    622,
                    251
                ],
                "KeyError": [
                    200,
                    203,
                    172
                ],
                "TypeError": [
                    872,
                    172,
                    178,
                    309,
                    1881,
                    447
                ],
                "_to_rgba_no_colorcycle": [
                    175
                ],
                "orig_c": [
                    261,
                    206,
                    249,
                    252,
                    190,
                    255
                ],
                "np.ma.masked": [
                    191
                ],
                "np.ma": [
                    1155,
                    1156,
                    1283,
                    1032,
                    1161,
                    1417,
                    1402,
                    1169,
                    1181,
                    1182,
                    287,
                    288,
                    1188,
                    550,
                    1192,
                    1322,
                    1323,
                    1331,
                    191,
                    1343,
                    1344,
                    975,
                    977,
                    1241,
                    1242,
                    1118,
                    1120,
                    1013,
                    1014,
                    1146,
                    1020
                ],
                "np": [
                    1031,
                    1032,
                    1039,
                    1045,
                    550,
                    551,
                    1574,
                    555,
                    1585,
                    1586,
                    563,
                    572,
                    577,
                    591,
                    601,
                    1118,
                    1119,
                    1120,
                    1122,
                    1636,
                    1637,
                    1638,
                    1639,
                    1640,
                    1641,
                    1146,
                    1155,
                    644,
                    645,
                    1156,
                    1161,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1687,
                    1690,
                    1180,
                    1181,
                    1182,
                    1188,
                    1192,
                    191,
                    1223,
                    1740,
                    1241,
                    1242,
                    734,
                    1255,
                    1256,
                    1257,
                    1258,
                    1266,
                    1267,
                    1268,
                    1277,
                    254,
                    771,
                    1283,
                    779,
                    285,
                    287,
                    288,
                    290,
                    298,
                    1322,
                    1323,
                    1328,
                    306,
                    1331,
                    308,
                    317,
                    1342,
                    1343,
                    1344,
                    330,
                    332,
                    1868,
                    864,
                    1389,
                    880,
                    887,
                    1402,
                    1403,
                    1405,
                    1409,
                    1414,
                    1417,
                    1948,
                    1952,
                    1954,
                    1956,
                    1958,
                    1960,
                    1460,
                    440,
                    441,
                    1468,
                    445,
                    1470,
                    1473,
                    1477,
                    966,
                    969,
                    970,
                    459,
                    972,
                    975,
                    464,
                    976,
                    977,
                    467,
                    468,
                    2002,
                    471,
                    477,
                    1511,
                    1519,
                    1521,
                    1013,
                    1014,
                    1529,
                    1530,
                    1531,
                    1020
                ],
                "c.lower": [
                    202,
                    194
                ],
                "cbook.warn_deprecated": [
                    324,
                    207
                ],
                "cbook": [
                    480,
                    324,
                    1126,
                    207,
                    305,
                    2034
                ],
                "match": [
                    226,
                    227,
                    234,
                    235,
                    214,
                    215,
                    220,
                    221
                ],
                "tuple": [
                    263,
                    232,
                    240,
                    593,
                    216,
                    222
                ],
                "n": [
                    228,
                    229,
                    236,
                    237,
                    216,
                    217,
                    222,
                    223
                ],
                "color": [
                    228,
                    614,
                    231,
                    232,
                    236,
                    622,
                    239,
                    240,
                    782,
                    783,
                    606
                ],
                "np.iterable": [
                    864,
                    1342,
                    771,
                    966,
                    1031,
                    591,
                    1180,
                    254
                ],
                "x": [
                    258,
                    452,
                    456,
                    459,
                    466,
                    468,
                    821,
                    470,
                    798
                ],
                "Number": [
                    258
                ],
                "map": [
                    263
                ],
                "any": [
                    459,
                    268
                ],
                "elem": [
                    268
                ],
                "np.ndarray": [
                    285
                ],
                "c.dtype.kind": [
                    285
                ],
                "c.dtype": [
                    285
                ],
                "c.ndim": [
                    286
                ],
                "c.shape": [
                    289,
                    292,
                    286
                ],
                "mask": [
                    1155,
                    1157,
                    1160,
                    1161,
                    1162,
                    1417,
                    1164,
                    1165,
                    1169,
                    287,
                    296,
                    297,
                    1322,
                    1324,
                    975,
                    977,
                    1241,
                    1243,
                    1887,
                    1889,
                    1013,
                    1015,
                    1402
                ],
                "np.ma.is_masked": [
                    550,
                    287
                ],
                "c.mask.any": [
                    287
                ],
                "c.mask": [
                    287
                ],
                "np.ma.getdata": [
                    288
                ],
                "result": [
                    1152,
                    1155,
                    1156,
                    1159,
                    1160,
                    1148,
                    1169,
                    1171,
                    1172,
                    1311,
                    1313,
                    290,
                    291,
                    293,
                    295,
                    1319,
                    297,
                    298,
                    1322,
                    300,
                    1323,
                    1325,
                    1331,
                    1333,
                    1334,
                    317,
                    327,
                    1231,
                    1232,
                    977,
                    978,
                    1238,
                    1113,
                    1114,
                    1241,
                    1242,
                    1245,
                    1118,
                    1119,
                    1120,
                    1122,
                    1123,
                    1250,
                    1251,
                    1001,
                    1003,
                    1008,
                    1013,
                    1014,
                    1144,
                    1017,
                    1146,
                    1020,
                    1022,
                    1023
                ],
                "np.column_stack": [
                    290
                ],
                "np.zeros": [
                    1409,
                    290,
                    330,
                    880,
                    306
                ],
                "c.copy": [
                    293
                ],
                "np.any": [
                    298
                ],
                "cbook._str_lower_equal": [
                    305
                ],
                "np.array": [
                    1638,
                    551,
                    332,
                    1519,
                    464,
                    308,
                    441,
                    317,
                    1468,
                    445,
                    1277
                ],
                "cc": [
                    332,
                    317
                ],
                "keep_alpha": [
                    348
                ],
                "join": [
                    350
                ],
                "format": [
                    1464,
                    1882,
                    1515,
                    350
                ],
                "round": [
                    350
                ],
                "val": [
                    1283,
                    1284,
                    1285,
                    1032,
                    1033,
                    782,
                    784,
                    785,
                    786,
                    787,
                    1948,
                    1181,
                    1182,
                    1956,
                    1957,
                    1958,
                    1959,
                    1343,
                    1344,
                    350
                ],
                "cnames": [
                    356
                ],
                "hexColorPattern": [
                    357
                ],
                "re.compile": [
                    357
                ],
                "rgb2hex": [
                    358
                ],
                "to_hex": [
                    358
                ],
                "hex2color": [
                    359
                ],
                "to_rgb": [
                    370,
                    359
                ],
                "cache": [
                    369
                ],
                "staticmethod": [
                    752,
                    945,
                    370,
                    371,
                    372,
                    796
                ],
                "colorConverter": [
                    375
                ],
                "ColorConverter": [
                    375
                ],
                "callable": [
                    820,
                    439
                ],
                "data": [
                    484,
                    1806,
                    976,
                    977,
                    1808,
                    819,
                    820,
                    821,
                    822,
                    439,
                    1812,
                    441,
                    1813,
                    445
                ],
                "xind": [
                    467,
                    468,
                    470,
                    440,
                    441
                ],
                "np.linspace": [
                    440,
                    779,
                    467,
                    887
                ],
                "N": [
                    484,
                    868,
                    875,
                    877,
                    462,
                    862,
                    466,
                    467,
                    789,
                    857,
                    440,
                    729,
                    859,
                    510
                ],
                "gamma": [
                    1344,
                    1314,
                    1346,
                    484,
                    749,
                    1328,
                    1329,
                    1339,
                    467,
                    789,
                    440,
                    1305,
                    731
                ],
                "lut": [
                    580,
                    581,
                    586,
                    590,
                    464,
                    471,
                    441,
                    442,
                    572,
                    477,
                    574
                ],
                "np.clip": [
                    577,
                    1156,
                    1960,
                    1323,
                    1740,
                    563,
                    1405,
                    1014,
                    441,
                    1242,
                    477
                ],
                "adata": [
                    448,
                    452,
                    453,
                    454,
                    445
                ],
                "Exception": [
                    446
                ],
                "shape": [
                    448,
                    449
                ],
                "adata.shape": [
                    448
                ],
                "y0": [
                    453,
                    464,
                    821,
                    473,
                    474
                ],
                "y1": [
                    472,
                    473,
                    821,
                    454
                ],
                "np.diff": [
                    459
                ],
                "ind": [
                    473,
                    468,
                    470
                ],
                "np.searchsorted": [
                    468
                ],
                "distance": [
                    473,
                    470
                ],
                "np.concatenate": [
                    471
                ],
                "_create_lookup_table": [
                    737,
                    482,
                    739,
                    484,
                    742,
                    735
                ],
                "cbook.deprecated": [
                    480
                ],
                "docstring.copy": [
                    482
                ],
                "docstring": [
                    482
                ],
                "self.name": [
                    906,
                    816,
                    888,
                    793,
                    509
                ],
                "name": [
                    905,
                    906,
                    877,
                    909,
                    815,
                    816,
                    789,
                    824,
                    729,
                    509
                ],
                "self.N": [
                    514,
                    515,
                    516,
                    1413,
                    909,
                    556,
                    561,
                    563,
                    567,
                    824,
                    734,
                    736,
                    738,
                    740,
                    743,
                    1390,
                    880,
                    1392,
                    634,
                    510
                ],
                "self._rgba_bad": [
                    635,
                    606,
                    511
                ],
                "self._rgba_under": [
                    512,
                    627,
                    628,
                    614
                ],
                "self._rgba_over": [
                    632,
                    513,
                    622,
                    631
                ],
                "self._i_under": [
                    568,
                    514,
                    628,
                    630
                ],
                "self._i_over": [
                    632,
                    634,
                    515,
                    567
                ],
                "self._i_bad": [
                    569,
                    635,
                    516
                ],
                "self._isinit": [
                    642,
                    547,
                    517,
                    615,
                    744,
                    623,
                    882,
                    600,
                    607
                ],
                "self.colorbar_extend": [
                    523
                ],
                "self._init": [
                    643,
                    548,
                    750
                ],
                "mask_bad": [
                    569,
                    550
                ],
                "X": [
                    591,
                    550,
                    551
                ],
                "X.mask": [
                    550
                ],
                "np.isnan": [
                    550
                ],
                "xa": [
                    551,
                    552,
                    553,
                    554,
                    556,
                    590,
                    559,
                    561,
                    563,
                    564,
                    567,
                    568,
                    569
                ],
                "xa.dtype.isnative": [
                    552
                ],
                "xa.dtype": [
                    552,
                    554
                ],
                "newbyteorder": [
                    553
                ],
                "xa.byteswap": [
                    553
                ],
                "xa.dtype.kind": [
                    554
                ],
                "np.errstate": [
                    555,
                    1255
                ],
                "xa.astype": [
                    564
                ],
                "bytes": [
                    578,
                    571
                ],
                "astype": [
                    1533,
                    572,
                    1277,
                    1414
                ],
                "self._lut": [
                    737,
                    739,
                    644,
                    645,
                    742,
                    734,
                    880,
                    881,
                    628,
                    630,
                    632,
                    601,
                    634,
                    635,
                    572,
                    574,
                    735
                ],
                "np.uint8": [
                    572
                ],
                "self._lut.copy": [
                    574
                ],
                "cls": [
                    597,
                    598
                ],
                "self.__class__": [
                    597
                ],
                "cmapobject": [
                    601,
                    602,
                    598,
                    599
                ],
                "cls.__new__": [
                    598
                ],
                "cmapobject.__dict__.update": [
                    599
                ],
                "cmapobject.__dict__": [
                    599
                ],
                "self.__dict__": [
                    599
                ],
                "cmapobject._lut": [
                    601
                ],
                "np.copy": [
                    601
                ],
                "self._set_extremes": [
                    608,
                    616,
                    745,
                    624,
                    883
                ],
                "NotImplementedError": [
                    649,
                    668,
                    639
                ],
                "np.all": [
                    644,
                    645
                ],
                "Colormap": [
                    729,
                    827,
                    877,
                    671
                ],
                "self.monochrome": [
                    866,
                    876,
                    856,
                    728,
                    863
                ],
                "Colormap.__init__": [
                    729,
                    877
                ],
                "self._segmentdata": [
                    736,
                    738,
                    740,
                    741,
                    743,
                    822,
                    793,
                    730
                ],
                "segmentdata": [
                    730
                ],
                "self._gamma": [
                    736,
                    738,
                    740,
                    749,
                    824,
                    731
                ],
                "np.ones": [
                    734
                ],
                "Sized": [
                    774
                ],
                "vals": [
                    777,
                    779,
                    782
                ],
                "zip": [
                    777,
                    782
                ],
                "cdict": [
                    781,
                    784,
                    785,
                    786,
                    787,
                    789
                ],
                "r": [
                    1570,
                    1540,
                    1574,
                    1545,
                    1550,
                    783,
                    784,
                    1555,
                    1560,
                    1529,
                    1565
                ],
                "g": [
                    1571,
                    1541,
                    1574,
                    1546,
                    783,
                    1551,
                    785,
                    1556,
                    1561,
                    1530,
                    1566
                ],
                "b": [
                    1410,
                    1411,
                    1572,
                    1542,
                    1574,
                    1547,
                    783,
                    1552,
                    786,
                    1557,
                    1562,
                    1531,
                    1567
                ],
                "a": [
                    1256,
                    1257,
                    1258,
                    1260,
                    1261,
                    1262,
                    783,
                    1266,
                    787,
                    1267,
                    1268,
                    1270,
                    1271,
                    1272
                ],
                "append": [
                    784,
                    785,
                    786,
                    787
                ],
                "LinearSegmentedColormap": [
                    824,
                    793,
                    789
                ],
                "lutsize": [
                    793,
                    887
                ],
                "func": [
                    798
                ],
                "data_r": [
                    824,
                    819
                ],
                "functools.partial": [
                    819
                ],
                "functools": [
                    819
                ],
                "self._reverser": [
                    819
                ],
                "reversed": [
                    908,
                    821
                ],
                "self._segmentdata.items": [
                    822
                ],
                "self.colors": [
                    867,
                    875,
                    908,
                    881,
                    858,
                    862
                ],
                "list": [
                    867,
                    908
                ],
                "itertools.islice": [
                    868
                ],
                "itertools": [
                    868
                ],
                "itertools.cycle": [
                    868
                ],
                "gray": [
                    875,
                    871
                ],
                "ListedColormap": [
                    888,
                    2044,
                    909
                ],
                "colors_r": [
                    908,
                    909
                ],
                "self.vmin": [
                    1028,
                    1415,
                    1040,
                    1046,
                    1047,
                    1178,
                    1053,
                    1315,
                    941,
                    1340,
                    1090,
                    1104,
                    1105,
                    1233,
                    1116,
                    1119,
                    1387,
                    1005,
                    1135,
                    1137,
                    1276,
                    1405,
                    1150
                ],
                "_sanitize_extrema": [
                    941,
                    942
                ],
                "vmin": [
                    1028,
                    1156,
                    1033,
                    1035,
                    1805,
                    1806,
                    1167,
                    1168,
                    1810,
                    1304,
                    1178,
                    1182,
                    1184,
                    1315,
                    1316,
                    1318,
                    1323,
                    941,
                    1326,
                    1329,
                    1340,
                    1344,
                    1090,
                    1346,
                    1221,
                    1095,
                    1224,
                    1233,
                    1235,
                    1237,
                    1242,
                    1005,
                    1007,
                    1009,
                    1014,
                    1018,
                    1019,
                    1276,
                    1277,
                    1150,
                    1151
                ],
                "self.vmax": [
                    1029,
                    1416,
                    1041,
                    1048,
                    1049,
                    1178,
                    1053,
                    1315,
                    942,
                    1340,
                    1091,
                    1233,
                    1106,
                    1107,
                    1116,
                    1119,
                    1388,
                    1006,
                    1135,
                    1403,
                    1276,
                    1405,
                    1150
                ],
                "vmax": [
                    1156,
                    1029,
                    1033,
                    1035,
                    1807,
                    1168,
                    1808,
                    1810,
                    1304,
                    1178,
                    1182,
                    1184,
                    1315,
                    1316,
                    1318,
                    1323,
                    942,
                    1329,
                    1340,
                    1344,
                    1346,
                    1091,
                    1092,
                    1221,
                    1224,
                    1233,
                    1235,
                    1237,
                    1242,
                    1006,
                    1007,
                    1009,
                    1014,
                    1019,
                    1276,
                    1277,
                    1150,
                    1151
                ],
                "self.clip": [
                    999,
                    1386,
                    1229,
                    943,
                    1142,
                    1399,
                    1309
                ],
                "clip": [
                    1154,
                    1304,
                    1308,
                    1309,
                    1321,
                    943,
                    1221,
                    1228,
                    1229,
                    1240,
                    998,
                    999,
                    1386,
                    1012,
                    1141,
                    1142,
                    1398,
                    1404,
                    1399
                ],
                "is_scalar": [
                    1121,
                    1249,
                    966,
                    967,
                    1001,
                    1401,
                    1418,
                    1231,
                    978,
                    1170,
                    1332,
                    1144,
                    1113,
                    1021,
                    1311
                ],
                "dtype": [
                    969,
                    970,
                    972,
                    977
                ],
                "np.min_scalar_type": [
                    969
                ],
                "np.issubdtype": [
                    970
                ],
                "np.integer": [
                    970
                ],
                "dtype.type": [
                    970
                ],
                "np.bool_": [
                    970
                ],
                "np.promote_types": [
                    1521,
                    972,
                    1470
                ],
                "np.float32": [
                    1521,
                    972,
                    1470
                ],
                "np.ma.getmask": [
                    1120,
                    1155,
                    1322,
                    975,
                    1013,
                    1241
                ],
                "np.asarray": [
                    976,
                    1460,
                    1389,
                    1511
                ],
                "np.ma.array": [
                    1156,
                    1417,
                    1323,
                    977,
                    1169,
                    1331,
                    1014,
                    1242,
                    1020
                ],
                "self.process_value": [
                    1028,
                    1029,
                    1001,
                    1401,
                    1005,
                    1006,
                    1231,
                    1144,
                    1113,
                    1311
                ],
                "self.autoscale_None": [
                    1313,
                    1003,
                    1232,
                    1114,
                    1148
                ],
                "_": [
                    1029,
                    1028,
                    1005,
                    1006
                ],
                "result.fill": [
                    1008,
                    1152,
                    1238,
                    1319
                ],
                "result.filled": [
                    1242,
                    1323,
                    1156,
                    1014
                ],
                "resdat": [
                    1159,
                    1162,
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1325,
                    1326,
                    1327,
                    1328,
                    1329,
                    1331,
                    1245,
                    1246,
                    1247,
                    1017,
                    1018,
                    1019,
                    1020
                ],
                "result.data": [
                    1017,
                    1325,
                    1245,
                    1159
                ],
                "result.mask": [
                    1160,
                    1331,
                    1020
                ],
                "self.scaled": [
                    1281,
                    1026,
                    1337,
                    1175
                ],
                "np.ma.asarray": [
                    1032,
                    1283,
                    1181,
                    1343
                ],
                "A": [
                    1188,
                    1192,
                    1289,
                    1294,
                    1039,
                    1040,
                    1041,
                    1103,
                    1045,
                    1046,
                    1047,
                    1048,
                    1049
                ],
                "np.asanyarray": [
                    1045,
                    1039
                ],
                "A.min": [
                    1040,
                    1047
                ],
                "A.max": [
                    1041,
                    1049
                ],
                "A.size": [
                    1048,
                    1046
                ],
                "Normalize": [
                    1056,
                    1221,
                    1349,
                    1131,
                    1195,
                    1298,
                    1810,
                    1304,
                    1433
                ],
                "self.vcenter": [
                    1089,
                    1104,
                    1105,
                    1106,
                    1107,
                    1116,
                    1119
                ],
                "vcenter": [
                    1089,
                    1092,
                    1095
                ],
                "autoscale_None": [
                    1192,
                    1294,
                    1103
                ],
                "np.ma.masked_array": [
                    1118
                ],
                "np.interp": [
                    1119
                ],
                "np.atleast_1d": [
                    1122,
                    1403
                ],
                "TwoSlopeNorm": [
                    1127
                ],
                "cbook.deprecation.deprecated": [
                    1126
                ],
                "cbook.deprecation": [
                    1126
                ],
                "np.ma.masked_less_equal": [
                    1192,
                    1146,
                    1188
                ],
                "self._check_vmin_vmax": [
                    1177,
                    1149
                ],
                "np.ma.nomask": [
                    1161
                ],
                "np.copyto": [
                    1165
                ],
                "np.log": [
                    1168,
                    1258,
                    1166,
                    1167
                ],
                "np.ma.power": [
                    1344,
                    1182
                ],
                "pow": [
                    1184,
                    1346
                ],
                "autoscale": [
                    1289,
                    1188
                ],
                "Normalize.__init__": [
                    1304,
                    1221
                ],
                "self.linthresh": [
                    1222,
                    1256,
                    1258,
                    1259,
                    1266,
                    1268,
                    1269
                ],
                "linthresh": [
                    1222
                ],
                "self._linscale_adj": [
                    1223,
                    1258,
                    1261,
                    1266,
                    1268,
                    1271
                ],
                "linscale": [
                    1223
                ],
                "np.e": [
                    1223
                ],
                "self._transform_vmin_vmax": [
                    1225,
                    1290,
                    1295
                ],
                "self._transform": [
                    1245,
                    1278
                ],
                "self._lower": [
                    1278,
                    1284,
                    1246,
                    1247
                ],
                "self._upper": [
                    1284,
                    1278,
                    1247
                ],
                "masked": [
                    1256,
                    1257,
                    1258,
                    1260,
                    1261,
                    1266,
                    1267,
                    1268,
                    1270,
                    1271
                ],
                "np.abs": [
                    1952,
                    1954,
                    1256,
                    1258,
                    1266
                ],
                "sign": [
                    1257,
                    1259,
                    1267,
                    1268,
                    1269
                ],
                "np.sign": [
                    1257,
                    1267
                ],
                "log": [
                    1258,
                    1259,
                    1260
                ],
                "exp": [
                    1268,
                    1269,
                    1270
                ],
                "np.exp": [
                    1268
                ],
                "arr": [
                    1584,
                    1585,
                    1460,
                    1463,
                    1465,
                    1467,
                    1468,
                    1469,
                    1470,
                    1473,
                    1474,
                    1476,
                    1481,
                    1482,
                    1484,
                    1485,
                    1487,
                    1488,
                    1277,
                    1278
                ],
                "self._inv_transform": [
                    1285
                ],
                "self.gamma": [
                    1305,
                    1314,
                    1339
                ],
                "np.power": [
                    1328
                ],
                "boundaries": [
                    1387,
                    1388,
                    1389
                ],
                "self.boundaries": [
                    1410,
                    1389,
                    1390
                ],
                "self.Ncmap": [
                    1408,
                    1413,
                    1391,
                    1392,
                    1406
                ],
                "ncolors": [
                    1391
                ],
                "self._interp": [
                    1393,
                    1395,
                    1412
                ],
                "xx": [
                    1409,
                    1411,
                    1415,
                    1416,
                    1401,
                    1402,
                    1403,
                    1405
                ],
                "np.ma.getmaskarray": [
                    1402
                ],
                "xx.filled": [
                    1403
                ],
                "max_col": [
                    1408,
                    1416,
                    1406
                ],
                "iret": [
                    1409,
                    1411,
                    1414,
                    1415,
                    1416,
                    1417
                ],
                "xx.shape": [
                    1409
                ],
                "np.int16": [
                    1409,
                    1414
                ],
                "i": [
                    1888,
                    1889,
                    1410,
                    1539,
                    1411,
                    1544,
                    1549,
                    1584,
                    1585,
                    1554,
                    1559,
                    1564,
                    1533,
                    1534
                ],
                "enumerate": [
                    1410
                ],
                "scalefac": [
                    1413,
                    1414
                ],
                "arr.shape": [
                    1584,
                    1465,
                    1467,
                    1463
                ],
                "in_shape": [
                    1518,
                    1576,
                    1467,
                    1494
                ],
                "arr.dtype": [
                    1470
                ],
                "out": [
                    1473,
                    1482,
                    1485,
                    1488,
                    1490,
                    1491,
                    1492,
                    1494
                ],
                "np.zeros_like": [
                    1473,
                    1477
                ],
                "arr_max": [
                    1474,
                    1475,
                    1478,
                    1481,
                    1484,
                    1487,
                    1492
                ],
                "arr.max": [
                    1474
                ],
                "ipos": [
                    1475,
                    1478,
                    1479,
                    1481,
                    1484,
                    1487
                ],
                "delta": [
                    1476,
                    1477,
                    1478,
                    1479,
                    1482,
                    1485,
                    1488
                ],
                "arr.ptp": [
                    1476
                ],
                "s": [
                    1536,
                    1537,
                    1569,
                    1477,
                    1478,
                    1491,
                    1526,
                    1535
                ],
                "idx": [
                    1539,
                    1540,
                    1541,
                    1542,
                    1544,
                    1545,
                    1546,
                    1547,
                    1549,
                    1550,
                    1551,
                    1552,
                    1554,
                    1555,
                    1556,
                    1557,
                    1559,
                    1560,
                    1561,
                    1562,
                    1564,
                    1565,
                    1566,
                    1567,
                    1569,
                    1570,
                    1571,
                    1572,
                    1481,
                    1482,
                    1484,
                    1485,
                    1487,
                    1488
                ],
                "out.reshape": [
                    1494
                ],
                "hsv": [
                    1511,
                    1960,
                    1514,
                    1963,
                    1516,
                    1518,
                    1519,
                    1520,
                    1521,
                    1525,
                    1526,
                    1527,
                    1947,
                    1948
                ],
                "hsv.shape": [
                    1514,
                    1516,
                    1518
                ],
                "hsv.dtype": [
                    1521
                ],
                "h": [
                    1525,
                    1529,
                    1530,
                    1531,
                    1533,
                    1534
                ],
                "np.empty_like": [
                    1529,
                    1530,
                    1531
                ],
                "f": [
                    1536,
                    1537,
                    1534
                ],
                "p": [
                    1542,
                    1547,
                    1550,
                    1555,
                    1561,
                    1566,
                    1535
                ],
                "q": [
                    1536,
                    1545,
                    1556,
                    1567
                ],
                "t": [
                    1552,
                    1537,
                    1541,
                    1560
                ],
                "rgb": [
                    1889,
                    1574,
                    1576,
                    2000,
                    2001,
                    2002,
                    1877,
                    1880,
                    1947,
                    1982
                ],
                "np.stack": [
                    1574
                ],
                "rgb.reshape": [
                    1576
                ],
                "sum_sq": [
                    1585,
                    1586,
                    1583
                ],
                "range": [
                    1584,
                    1888
                ],
                "np.newaxis": [
                    1585,
                    1868
                ],
                "np.sqrt": [
                    1586
                ],
                "self.azdeg": [
                    1624,
                    1636
                ],
                "azdeg": [
                    1624
                ],
                "self.altdeg": [
                    1625,
                    1637
                ],
                "altdeg": [
                    1625
                ],
                "self.hsv_min_val": [
                    1626,
                    1940
                ],
                "hsv_min_val": [
                    1626,
                    1939,
                    1940,
                    1959
                ],
                "self.hsv_max_val": [
                    1936,
                    1627
                ],
                "hsv_max_val": [
                    1936,
                    1627,
                    1957,
                    1935
                ],
                "self.hsv_min_sat": [
                    1938,
                    1628
                ],
                "hsv_min_sat": [
                    1937,
                    1938,
                    1955,
                    1628
                ],
                "self.hsv_max_sat": [
                    1629,
                    1934
                ],
                "hsv_max_sat": [
                    1953,
                    1934,
                    1629,
                    1933
                ],
                "az": [
                    1640,
                    1636,
                    1639
                ],
                "np.radians": [
                    1636,
                    1637
                ],
                "alt": [
                    1640,
                    1641,
                    1637,
                    1639
                ],
                "np.cos": [
                    1640,
                    1639
                ],
                "np.sin": [
                    1640,
                    1641
                ],
                "property": [
                    1631
                ],
                "dy": [
                    1867,
                    1684,
                    1814,
                    1687
                ],
                "e_dy": [
                    1692,
                    1687
                ],
                "e_dx": [
                    1691,
                    1687
                ],
                "np.gradient": [
                    1687
                ],
                "vert_exag": [
                    1867,
                    1814,
                    1687
                ],
                "elevation": [
                    1690,
                    1867,
                    1687
                ],
                "dx": [
                    1867,
                    1814,
                    1687
                ],
                "normal": [
                    1696,
                    1690,
                    1691,
                    1692,
                    1693,
                    1694
                ],
                "view": [
                    1690
                ],
                "np.empty": [
                    1690
                ],
                "elevation.shape": [
                    1690
                ],
                "type": [
                    1690
                ],
                "_vector_magnitude": [
                    1694
                ],
                "self.shade_normals": [
                    1696
                ],
                "fraction": [
                    1696,
                    1867,
                    1815,
                    1728
                ],
                "intensity": [
                    1943,
                    1944,
                    1952,
                    1953,
                    1954,
                    1955,
                    1956,
                    1957,
                    1958,
                    1959,
                    1724,
                    1982,
                    1727,
                    1728,
                    1738,
                    1739,
                    1740,
                    1867,
                    1742,
                    1868,
                    2000,
                    2001,
                    1877,
                    1880,
                    1886,
                    1887
                ],
                "normals.dot": [
                    1724
                ],
                "normals": [
                    1724
                ],
                "self.direction": [
                    1724
                ],
                "imin": [
                    1738,
                    1739,
                    1733,
                    1727
                ],
                "imax": [
                    1739,
                    1733,
                    1727
                ],
                "intensity.min": [
                    1727
                ],
                "intensity.max": [
                    1727
                ],
                "data.min": [
                    1806
                ],
                "data.max": [
                    1808
                ],
                "norm": [
                    2058,
                    2059,
                    1809,
                    1810,
                    1812
                ],
                "rgb0": [
                    1817,
                    1818,
                    1812,
                    1813
                ],
                "cmap": [
                    2049,
                    2052,
                    2054,
                    2056,
                    2059,
                    1812,
                    2044,
                    2047
                ],
                "rgb1": [
                    1817,
                    1813
                ],
                "self.shade_rgb": [
                    1813
                ],
                "blend_mode": [
                    1880,
                    1876,
                    1813,
                    1877
                ],
                "kwargs": [
                    1880,
                    1877,
                    1815
                ],
                "self.hillshade": [
                    1867
                ],
                "lookup": [
                    1883,
                    1876,
                    1877,
                    1871
                ],
                "self.blend_hsv": [
                    1872
                ],
                "self.blend_soft_light": [
                    1873
                ],
                "self.blend_overlay": [
                    1874
                ],
                "blend": [
                    1880,
                    1889,
                    1891,
                    1877
                ],
                "lookup.keys": [
                    1883
                ],
                "hasattr": [
                    1886
                ],
                "intensity.mask": [
                    1887
                ],
                "rgb_to_hsv": [
                    1947
                ],
                "hue": [
                    1948
                ],
                "sat": [
                    1952,
                    1953,
                    1954,
                    1955,
                    1948
                ],
                "np.moveaxis": [
                    1948
                ],
                "np.putmask": [
                    1952,
                    1954,
                    1956,
                    1958
                ],
                "hsv_to_rgb": [
                    1963
                ],
                "low": [
                    2000,
                    2002
                ],
                "high": [
                    2001,
                    2002
                ],
                "np.where": [
                    2002
                ],
                "slice_map": [
                    2034,
                    2035,
                    2028
                ],
                "slice": [
                    2032,
                    2029,
                    2030,
                    2031
                ],
                "cbook._check_in_list": [
                    2034
                ],
                "extend": [
                    2051,
                    2056,
                    2034,
                    2035,
                    2041,
                    2046
                ],
                "color_slice": [
                    2035,
                    2044,
                    2038
                ],
                "n_data_colors": [
                    2058,
                    2044,
                    2037,
                    2038
                ],
                "levels": [
                    2041,
                    2058,
                    2037
                ],
                "n_expected": [
                    2042,
                    2038,
                    2039
                ],
                "color_slice.start": [
                    2038
                ],
                "color_slice.stop": [
                    2038
                ],
                "cmap.set_under": [
                    2049,
                    2047
                ],
                "cmap.set_over": [
                    2052,
                    2054
                ],
                "cmap.colorbar_extend": [
                    2056
                ],
                "BoundaryNorm": [
                    2058
                ]
            },
            "filtered_variables_in_file": {
                "__init__": [
                    82
                ],
                "mapping": [
                    82
                ],
                "self.cache": [
                    91,
                    83,
                    87
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    517,
                    1026,
                    1028,
                    1029,
                    1629,
                    523,
                    1040,
                    1041,
                    1046,
                    1047,
                    1048,
                    1049,
                    1053,
                    547,
                    548,
                    556,
                    561,
                    563,
                    567,
                    568,
                    569,
                    572,
                    574,
                    1089,
                    1090,
                    1091,
                    1104,
                    1105,
                    1106,
                    83,
                    1107,
                    597,
                    87,
                    599,
                    600,
                    601,
                    91,
                    1113,
                    1114,
                    606,
                    607,
                    608,
                    1116,
                    1119,
                    1626,
                    1627,
                    1628,
                    614,
                    615,
                    616,
                    1636,
                    1637,
                    622,
                    623,
                    624,
                    1135,
                    1137,
                    627,
                    628,
                    630,
                    631,
                    632,
                    1142,
                    634,
                    635,
                    1144,
                    1148,
                    1149,
                    1150,
                    1246,
                    642,
                    643,
                    644,
                    645,
                    1247,
                    1175,
                    1177,
                    1178,
                    1696,
                    1724,
                    1221,
                    1222,
                    1223,
                    1225,
                    1229,
                    1231,
                    1232,
                    1233,
                    728,
                    729,
                    730,
                    731,
                    1245,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    1256,
                    1258,
                    1259,
                    749,
                    750,
                    1261,
                    1266,
                    1268,
                    1269,
                    1271,
                    1276,
                    1278,
                    1281,
                    1284,
                    1285,
                    1290,
                    1295,
                    1813,
                    1304,
                    793,
                    1305,
                    1309,
                    1311,
                    1313,
                    1314,
                    1315,
                    816,
                    819,
                    822,
                    824,
                    1337,
                    1339,
                    1340,
                    1867,
                    1872,
                    1873,
                    1874,
                    856,
                    858,
                    862,
                    863,
                    866,
                    867,
                    1386,
                    875,
                    876,
                    877,
                    1387,
                    1388,
                    880,
                    881,
                    882,
                    883,
                    1389,
                    1390,
                    1391,
                    887,
                    888,
                    1392,
                    1393,
                    1395,
                    1399,
                    1401,
                    1403,
                    1405,
                    1406,
                    1408,
                    1410,
                    1412,
                    1413,
                    1415,
                    1416,
                    906,
                    908,
                    909,
                    1934,
                    1936,
                    1938,
                    1940,
                    941,
                    942,
                    943,
                    999,
                    1001,
                    1003,
                    1624,
                    1005,
                    1006,
                    1625,
                    509,
                    510,
                    511
                ],
                "__setitem__": [
                    86
                ],
                "key": [
                    822,
                    90,
                    819,
                    86
                ],
                "value": [
                    1283,
                    1031,
                    1032,
                    1035,
                    1180,
                    1181,
                    1311,
                    1184,
                    1439,
                    1442,
                    1342,
                    1343,
                    1346,
                    966,
                    968,
                    969,
                    975,
                    976,
                    1231,
                    86,
                    1113,
                    1001,
                    1144,
                    1401
                ],
                "self.cache.clear": [
                    91,
                    87
                ],
                "__delitem__": [
                    90
                ],
                "_colors_full_map": [
                    96,
                    97,
                    100,
                    101,
                    102,
                    199,
                    105,
                    106,
                    171,
                    202,
                    111,
                    368,
                    177,
                    369,
                    94
                ],
                "_colors_full_map.update": [
                    96,
                    97,
                    100,
                    101,
                    102,
                    105
                ],
                "XKCD_COLORS": [
                    96,
                    98
                ],
                "k.replace": [
                    97,
                    102
                ],
                "k": [
                    97,
                    98,
                    99,
                    102,
                    103,
                    104
                ],
                "v": [
                    1536,
                    97,
                    98,
                    1537,
                    1540,
                    1570,
                    102,
                    103,
                    1571,
                    1572,
                    1546,
                    1551,
                    1557,
                    1527,
                    1562,
                    1565,
                    1535
                ],
                "XKCD_COLORS.items": [
                    98
                ],
                "CSS4_COLORS": [
                    356,
                    100
                ],
                "TABLEAU_COLORS": [
                    101,
                    103
                ],
                "TABLEAU_COLORS.items": [
                    103
                ],
                "BASE_COLORS": [
                    105
                ],
                "_ColorMapping": [
                    106
                ],
                "ex": [
                    120,
                    115,
                    116,
                    118
                ],
                "ret": [
                    1417,
                    1419,
                    1420,
                    118,
                    120,
                    121
                ],
                "ex.item": [
                    118
                ],
                "c": [
                    256,
                    258,
                    132,
                    135,
                    263,
                    264,
                    267,
                    268,
                    270,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    292,
                    165,
                    293,
                    169,
                    171,
                    175,
                    177,
                    305,
                    308,
                    313,
                    317,
                    190,
                    191,
                    193,
                    194,
                    322,
                    199,
                    329,
                    202,
                    332,
                    337,
                    212,
                    254,
                    214,
                    217,
                    347,
                    220,
                    349,
                    350,
                    223,
                    226,
                    229,
                    234,
                    237,
                    243,
                    247,
                    251,
                    126
                ],
                "re.match": [
                    226,
                    234,
                    214,
                    220,
                    126
                ],
                "re": [
                    226,
                    357,
                    234,
                    214,
                    220,
                    126
                ],
                "_is_nth_color": [
                    132,
                    165
                ],
                "to_rgba": [
                    614,
                    135,
                    332,
                    622,
                    783,
                    337,
                    371,
                    308,
                    347,
                    317,
                    606
                ],
                "to_rgba_array": [
                    144,
                    881,
                    372
                ],
                "c1": [
                    144
                ],
                "c2": [
                    144
                ],
                "prop_cycler": [
                    168,
                    167
                ],
                "rcParams": [
                    167
                ],
                "colors": [
                    771,
                    2052,
                    774,
                    775,
                    777,
                    779,
                    782,
                    2039,
                    168,
                    169,
                    858,
                    859,
                    861,
                    862,
                    864,
                    865,
                    868,
                    871,
                    368,
                    887,
                    888,
                    2042,
                    2044,
                    2047
                ],
                "get": [
                    168
                ],
                "prop_cycler.by_key": [
                    168
                ],
                "rgba": [
                    171,
                    173,
                    174,
                    175,
                    590,
                    177,
                    593,
                    594,
                    180
                ],
                "_colors_full_map.cache": [
                    177,
                    171,
                    369
                ],
                "alpha": [
                    264,
                    265,
                    266,
                    267,
                    291,
                    294,
                    295,
                    171,
                    175,
                    177,
                    308,
                    317,
                    576,
                    577,
                    579,
                    581,
                    586,
                    332,
                    218,
                    606,
                    224,
                    230,
                    231,
                    614,
                    238,
                    239,
                    622,
                    251
                ],
                "_to_rgba_no_colorcycle": [
                    175
                ],
                "orig_c": [
                    261,
                    206,
                    249,
                    252,
                    190,
                    255
                ],
                "np.ma.masked": [
                    191
                ],
                "np.ma": [
                    1155,
                    1156,
                    1283,
                    1032,
                    1161,
                    1417,
                    1402,
                    1169,
                    1181,
                    1182,
                    287,
                    288,
                    1188,
                    550,
                    1192,
                    1322,
                    1323,
                    1331,
                    191,
                    1343,
                    1344,
                    975,
                    977,
                    1241,
                    1242,
                    1118,
                    1120,
                    1013,
                    1014,
                    1146,
                    1020
                ],
                "np": [
                    1031,
                    1032,
                    1039,
                    1045,
                    550,
                    551,
                    1574,
                    555,
                    1585,
                    1586,
                    563,
                    572,
                    577,
                    591,
                    601,
                    1118,
                    1119,
                    1120,
                    1122,
                    1636,
                    1637,
                    1638,
                    1639,
                    1640,
                    1641,
                    1146,
                    1155,
                    644,
                    645,
                    1156,
                    1161,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1687,
                    1690,
                    1180,
                    1181,
                    1182,
                    1188,
                    1192,
                    191,
                    1223,
                    1740,
                    1241,
                    1242,
                    734,
                    1255,
                    1256,
                    1257,
                    1258,
                    1266,
                    1267,
                    1268,
                    1277,
                    254,
                    771,
                    1283,
                    779,
                    285,
                    287,
                    288,
                    290,
                    298,
                    1322,
                    1323,
                    1328,
                    306,
                    1331,
                    308,
                    317,
                    1342,
                    1343,
                    1344,
                    330,
                    332,
                    1868,
                    864,
                    1389,
                    880,
                    887,
                    1402,
                    1403,
                    1405,
                    1409,
                    1414,
                    1417,
                    1948,
                    1952,
                    1954,
                    1956,
                    1958,
                    1960,
                    1460,
                    440,
                    441,
                    1468,
                    445,
                    1470,
                    1473,
                    1477,
                    966,
                    969,
                    970,
                    459,
                    972,
                    975,
                    464,
                    976,
                    977,
                    467,
                    468,
                    2002,
                    471,
                    477,
                    1511,
                    1519,
                    1521,
                    1013,
                    1014,
                    1529,
                    1530,
                    1531,
                    1020
                ],
                "c.lower": [
                    202,
                    194
                ],
                "cbook.warn_deprecated": [
                    324,
                    207
                ],
                "cbook": [
                    480,
                    324,
                    1126,
                    207,
                    305,
                    2034
                ],
                "match": [
                    226,
                    227,
                    234,
                    235,
                    214,
                    215,
                    220,
                    221
                ],
                "n": [
                    228,
                    229,
                    236,
                    237,
                    216,
                    217,
                    222,
                    223
                ],
                "color": [
                    228,
                    614,
                    231,
                    232,
                    236,
                    622,
                    239,
                    240,
                    782,
                    783,
                    606
                ],
                "np.iterable": [
                    864,
                    1342,
                    771,
                    966,
                    1031,
                    591,
                    1180,
                    254
                ],
                "x": [
                    258,
                    452,
                    456,
                    459,
                    466,
                    468,
                    821,
                    470,
                    798
                ],
                "Number": [
                    258
                ],
                "elem": [
                    268
                ],
                "np.ndarray": [
                    285
                ],
                "c.dtype.kind": [
                    285
                ],
                "c.dtype": [
                    285
                ],
                "c.ndim": [
                    286
                ],
                "c.shape": [
                    289,
                    292,
                    286
                ],
                "mask": [
                    1155,
                    1157,
                    1160,
                    1161,
                    1162,
                    1417,
                    1164,
                    1165,
                    1169,
                    287,
                    296,
                    297,
                    1322,
                    1324,
                    975,
                    977,
                    1241,
                    1243,
                    1887,
                    1889,
                    1013,
                    1015,
                    1402
                ],
                "np.ma.is_masked": [
                    550,
                    287
                ],
                "c.mask.any": [
                    287
                ],
                "c.mask": [
                    287
                ],
                "np.ma.getdata": [
                    288
                ],
                "result": [
                    1152,
                    1155,
                    1156,
                    1159,
                    1160,
                    1148,
                    1169,
                    1171,
                    1172,
                    1311,
                    1313,
                    290,
                    291,
                    293,
                    295,
                    1319,
                    297,
                    298,
                    1322,
                    300,
                    1323,
                    1325,
                    1331,
                    1333,
                    1334,
                    317,
                    327,
                    1231,
                    1232,
                    977,
                    978,
                    1238,
                    1113,
                    1114,
                    1241,
                    1242,
                    1245,
                    1118,
                    1119,
                    1120,
                    1122,
                    1123,
                    1250,
                    1251,
                    1001,
                    1003,
                    1008,
                    1013,
                    1014,
                    1144,
                    1017,
                    1146,
                    1020,
                    1022,
                    1023
                ],
                "np.column_stack": [
                    290
                ],
                "np.zeros": [
                    1409,
                    290,
                    330,
                    880,
                    306
                ],
                "c.copy": [
                    293
                ],
                "np.any": [
                    298
                ],
                "cbook._str_lower_equal": [
                    305
                ],
                "np.array": [
                    1638,
                    551,
                    332,
                    1519,
                    464,
                    308,
                    441,
                    317,
                    1468,
                    445,
                    1277
                ],
                "cc": [
                    332,
                    317
                ],
                "keep_alpha": [
                    348
                ],
                "join": [
                    350
                ],
                "val": [
                    1283,
                    1284,
                    1285,
                    1032,
                    1033,
                    782,
                    784,
                    785,
                    786,
                    787,
                    1948,
                    1181,
                    1182,
                    1956,
                    1957,
                    1958,
                    1959,
                    1343,
                    1344,
                    350
                ],
                "cnames": [
                    356
                ],
                "hexColorPattern": [
                    357
                ],
                "re.compile": [
                    357
                ],
                "rgb2hex": [
                    358
                ],
                "to_hex": [
                    358
                ],
                "hex2color": [
                    359
                ],
                "to_rgb": [
                    370,
                    359
                ],
                "cache": [
                    369
                ],
                "colorConverter": [
                    375
                ],
                "ColorConverter": [
                    375
                ],
                "data": [
                    484,
                    1806,
                    976,
                    977,
                    1808,
                    819,
                    820,
                    821,
                    822,
                    439,
                    1812,
                    441,
                    1813,
                    445
                ],
                "xind": [
                    467,
                    468,
                    470,
                    440,
                    441
                ],
                "np.linspace": [
                    440,
                    779,
                    467,
                    887
                ],
                "N": [
                    484,
                    868,
                    875,
                    877,
                    462,
                    862,
                    466,
                    467,
                    789,
                    857,
                    440,
                    729,
                    859,
                    510
                ],
                "gamma": [
                    1344,
                    1314,
                    1346,
                    484,
                    749,
                    1328,
                    1329,
                    1339,
                    467,
                    789,
                    440,
                    1305,
                    731
                ],
                "lut": [
                    580,
                    581,
                    586,
                    590,
                    464,
                    471,
                    441,
                    442,
                    572,
                    477,
                    574
                ],
                "np.clip": [
                    577,
                    1156,
                    1960,
                    1323,
                    1740,
                    563,
                    1405,
                    1014,
                    441,
                    1242,
                    477
                ],
                "adata": [
                    448,
                    452,
                    453,
                    454,
                    445
                ],
                "shape": [
                    448,
                    449
                ],
                "adata.shape": [
                    448
                ],
                "y0": [
                    453,
                    464,
                    821,
                    473,
                    474
                ],
                "y1": [
                    472,
                    473,
                    821,
                    454
                ],
                "np.diff": [
                    459
                ],
                "ind": [
                    473,
                    468,
                    470
                ],
                "np.searchsorted": [
                    468
                ],
                "distance": [
                    473,
                    470
                ],
                "np.concatenate": [
                    471
                ],
                "_create_lookup_table": [
                    737,
                    482,
                    739,
                    484,
                    742,
                    735
                ],
                "cbook.deprecated": [
                    480
                ],
                "docstring.copy": [
                    482
                ],
                "docstring": [
                    482
                ],
                "self.name": [
                    906,
                    816,
                    888,
                    793,
                    509
                ],
                "name": [
                    905,
                    906,
                    877,
                    909,
                    815,
                    816,
                    789,
                    824,
                    729,
                    509
                ],
                "self.N": [
                    514,
                    515,
                    516,
                    1413,
                    909,
                    556,
                    561,
                    563,
                    567,
                    824,
                    734,
                    736,
                    738,
                    740,
                    743,
                    1390,
                    880,
                    1392,
                    634,
                    510
                ],
                "self._rgba_bad": [
                    635,
                    606,
                    511
                ],
                "self._rgba_under": [
                    512,
                    627,
                    628,
                    614
                ],
                "self._rgba_over": [
                    632,
                    513,
                    622,
                    631
                ],
                "self._i_under": [
                    568,
                    514,
                    628,
                    630
                ],
                "self._i_over": [
                    632,
                    634,
                    515,
                    567
                ],
                "self._i_bad": [
                    569,
                    635,
                    516
                ],
                "self._isinit": [
                    642,
                    547,
                    517,
                    615,
                    744,
                    623,
                    882,
                    600,
                    607
                ],
                "self.colorbar_extend": [
                    523
                ],
                "self._init": [
                    643,
                    548,
                    750
                ],
                "mask_bad": [
                    569,
                    550
                ],
                "X": [
                    591,
                    550,
                    551
                ],
                "X.mask": [
                    550
                ],
                "np.isnan": [
                    550
                ],
                "xa": [
                    551,
                    552,
                    553,
                    554,
                    556,
                    590,
                    559,
                    561,
                    563,
                    564,
                    567,
                    568,
                    569
                ],
                "xa.dtype.isnative": [
                    552
                ],
                "xa.dtype": [
                    552,
                    554
                ],
                "newbyteorder": [
                    553
                ],
                "xa.byteswap": [
                    553
                ],
                "xa.dtype.kind": [
                    554
                ],
                "np.errstate": [
                    555,
                    1255
                ],
                "xa.astype": [
                    564
                ],
                "astype": [
                    1533,
                    572,
                    1277,
                    1414
                ],
                "self._lut": [
                    737,
                    739,
                    644,
                    645,
                    742,
                    734,
                    880,
                    881,
                    628,
                    630,
                    632,
                    601,
                    634,
                    635,
                    572,
                    574,
                    735
                ],
                "np.uint8": [
                    572
                ],
                "self._lut.copy": [
                    574
                ],
                "cls": [
                    597,
                    598
                ],
                "self.__class__": [
                    597
                ],
                "cmapobject": [
                    601,
                    602,
                    598,
                    599
                ],
                "cls.__new__": [
                    598
                ],
                "cmapobject.__dict__.update": [
                    599
                ],
                "cmapobject.__dict__": [
                    599
                ],
                "self.__dict__": [
                    599
                ],
                "cmapobject._lut": [
                    601
                ],
                "np.copy": [
                    601
                ],
                "self._set_extremes": [
                    608,
                    616,
                    745,
                    624,
                    883
                ],
                "np.all": [
                    644,
                    645
                ],
                "Colormap": [
                    729,
                    827,
                    877,
                    671
                ],
                "self.monochrome": [
                    866,
                    876,
                    856,
                    728,
                    863
                ],
                "Colormap.__init__": [
                    729,
                    877
                ],
                "self._segmentdata": [
                    736,
                    738,
                    740,
                    741,
                    743,
                    822,
                    793,
                    730
                ],
                "segmentdata": [
                    730
                ],
                "self._gamma": [
                    736,
                    738,
                    740,
                    749,
                    824,
                    731
                ],
                "np.ones": [
                    734
                ],
                "Sized": [
                    774
                ],
                "vals": [
                    777,
                    779,
                    782
                ],
                "cdict": [
                    781,
                    784,
                    785,
                    786,
                    787,
                    789
                ],
                "r": [
                    1570,
                    1540,
                    1574,
                    1545,
                    1550,
                    783,
                    784,
                    1555,
                    1560,
                    1529,
                    1565
                ],
                "g": [
                    1571,
                    1541,
                    1574,
                    1546,
                    783,
                    1551,
                    785,
                    1556,
                    1561,
                    1530,
                    1566
                ],
                "b": [
                    1410,
                    1411,
                    1572,
                    1542,
                    1574,
                    1547,
                    783,
                    1552,
                    786,
                    1557,
                    1562,
                    1531,
                    1567
                ],
                "a": [
                    1256,
                    1257,
                    1258,
                    1260,
                    1261,
                    1262,
                    783,
                    1266,
                    787,
                    1267,
                    1268,
                    1270,
                    1271,
                    1272
                ],
                "append": [
                    784,
                    785,
                    786,
                    787
                ],
                "LinearSegmentedColormap": [
                    824,
                    793,
                    789
                ],
                "lutsize": [
                    793,
                    887
                ],
                "func": [
                    798
                ],
                "data_r": [
                    824,
                    819
                ],
                "functools.partial": [
                    819
                ],
                "functools": [
                    819
                ],
                "self._reverser": [
                    819
                ],
                "self._segmentdata.items": [
                    822
                ],
                "self.colors": [
                    867,
                    875,
                    908,
                    881,
                    858,
                    862
                ],
                "itertools.islice": [
                    868
                ],
                "itertools": [
                    868
                ],
                "itertools.cycle": [
                    868
                ],
                "gray": [
                    875,
                    871
                ],
                "ListedColormap": [
                    888,
                    2044,
                    909
                ],
                "colors_r": [
                    908,
                    909
                ],
                "self.vmin": [
                    1028,
                    1415,
                    1040,
                    1046,
                    1047,
                    1178,
                    1053,
                    1315,
                    941,
                    1340,
                    1090,
                    1104,
                    1105,
                    1233,
                    1116,
                    1119,
                    1387,
                    1005,
                    1135,
                    1137,
                    1276,
                    1405,
                    1150
                ],
                "_sanitize_extrema": [
                    941,
                    942
                ],
                "vmin": [
                    1028,
                    1156,
                    1033,
                    1035,
                    1805,
                    1806,
                    1167,
                    1168,
                    1810,
                    1304,
                    1178,
                    1182,
                    1184,
                    1315,
                    1316,
                    1318,
                    1323,
                    941,
                    1326,
                    1329,
                    1340,
                    1344,
                    1090,
                    1346,
                    1221,
                    1095,
                    1224,
                    1233,
                    1235,
                    1237,
                    1242,
                    1005,
                    1007,
                    1009,
                    1014,
                    1018,
                    1019,
                    1276,
                    1277,
                    1150,
                    1151
                ],
                "self.vmax": [
                    1029,
                    1416,
                    1041,
                    1048,
                    1049,
                    1178,
                    1053,
                    1315,
                    942,
                    1340,
                    1091,
                    1233,
                    1106,
                    1107,
                    1116,
                    1119,
                    1388,
                    1006,
                    1135,
                    1403,
                    1276,
                    1405,
                    1150
                ],
                "vmax": [
                    1156,
                    1029,
                    1033,
                    1035,
                    1807,
                    1168,
                    1808,
                    1810,
                    1304,
                    1178,
                    1182,
                    1184,
                    1315,
                    1316,
                    1318,
                    1323,
                    942,
                    1329,
                    1340,
                    1344,
                    1346,
                    1091,
                    1092,
                    1221,
                    1224,
                    1233,
                    1235,
                    1237,
                    1242,
                    1006,
                    1007,
                    1009,
                    1014,
                    1019,
                    1276,
                    1277,
                    1150,
                    1151
                ],
                "self.clip": [
                    999,
                    1386,
                    1229,
                    943,
                    1142,
                    1399,
                    1309
                ],
                "clip": [
                    1154,
                    1304,
                    1308,
                    1309,
                    1321,
                    943,
                    1221,
                    1228,
                    1229,
                    1240,
                    998,
                    999,
                    1386,
                    1012,
                    1141,
                    1142,
                    1398,
                    1404,
                    1399
                ],
                "is_scalar": [
                    1121,
                    1249,
                    966,
                    967,
                    1001,
                    1401,
                    1418,
                    1231,
                    978,
                    1170,
                    1332,
                    1144,
                    1113,
                    1021,
                    1311
                ],
                "dtype": [
                    969,
                    970,
                    972,
                    977
                ],
                "np.min_scalar_type": [
                    969
                ],
                "np.issubdtype": [
                    970
                ],
                "np.integer": [
                    970
                ],
                "dtype.type": [
                    970
                ],
                "np.bool_": [
                    970
                ],
                "np.promote_types": [
                    1521,
                    972,
                    1470
                ],
                "np.float32": [
                    1521,
                    972,
                    1470
                ],
                "np.ma.getmask": [
                    1120,
                    1155,
                    1322,
                    975,
                    1013,
                    1241
                ],
                "np.asarray": [
                    976,
                    1460,
                    1389,
                    1511
                ],
                "np.ma.array": [
                    1156,
                    1417,
                    1323,
                    977,
                    1169,
                    1331,
                    1014,
                    1242,
                    1020
                ],
                "self.process_value": [
                    1028,
                    1029,
                    1001,
                    1401,
                    1005,
                    1006,
                    1231,
                    1144,
                    1113,
                    1311
                ],
                "self.autoscale_None": [
                    1313,
                    1003,
                    1232,
                    1114,
                    1148
                ],
                "_": [
                    1029,
                    1028,
                    1005,
                    1006
                ],
                "result.fill": [
                    1008,
                    1152,
                    1238,
                    1319
                ],
                "result.filled": [
                    1242,
                    1323,
                    1156,
                    1014
                ],
                "resdat": [
                    1159,
                    1162,
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1325,
                    1326,
                    1327,
                    1328,
                    1329,
                    1331,
                    1245,
                    1246,
                    1247,
                    1017,
                    1018,
                    1019,
                    1020
                ],
                "result.data": [
                    1017,
                    1325,
                    1245,
                    1159
                ],
                "result.mask": [
                    1160,
                    1331,
                    1020
                ],
                "self.scaled": [
                    1281,
                    1026,
                    1337,
                    1175
                ],
                "np.ma.asarray": [
                    1032,
                    1283,
                    1181,
                    1343
                ],
                "A": [
                    1188,
                    1192,
                    1289,
                    1294,
                    1039,
                    1040,
                    1041,
                    1103,
                    1045,
                    1046,
                    1047,
                    1048,
                    1049
                ],
                "np.asanyarray": [
                    1045,
                    1039
                ],
                "A.min": [
                    1040,
                    1047
                ],
                "A.max": [
                    1041,
                    1049
                ],
                "A.size": [
                    1048,
                    1046
                ],
                "Normalize": [
                    1056,
                    1221,
                    1349,
                    1131,
                    1195,
                    1298,
                    1810,
                    1304,
                    1433
                ],
                "self.vcenter": [
                    1089,
                    1104,
                    1105,
                    1106,
                    1107,
                    1116,
                    1119
                ],
                "vcenter": [
                    1089,
                    1092,
                    1095
                ],
                "autoscale_None": [
                    1192,
                    1294,
                    1103
                ],
                "np.ma.masked_array": [
                    1118
                ],
                "np.interp": [
                    1119
                ],
                "np.atleast_1d": [
                    1122,
                    1403
                ],
                "TwoSlopeNorm": [
                    1127
                ],
                "cbook.deprecation.deprecated": [
                    1126
                ],
                "cbook.deprecation": [
                    1126
                ],
                "np.ma.masked_less_equal": [
                    1192,
                    1146,
                    1188
                ],
                "self._check_vmin_vmax": [
                    1177,
                    1149
                ],
                "np.ma.nomask": [
                    1161
                ],
                "np.copyto": [
                    1165
                ],
                "np.log": [
                    1168,
                    1258,
                    1166,
                    1167
                ],
                "np.ma.power": [
                    1344,
                    1182
                ],
                "autoscale": [
                    1289,
                    1188
                ],
                "Normalize.__init__": [
                    1304,
                    1221
                ],
                "self.linthresh": [
                    1222,
                    1256,
                    1258,
                    1259,
                    1266,
                    1268,
                    1269
                ],
                "linthresh": [
                    1222
                ],
                "self._linscale_adj": [
                    1223,
                    1258,
                    1261,
                    1266,
                    1268,
                    1271
                ],
                "linscale": [
                    1223
                ],
                "np.e": [
                    1223
                ],
                "self._transform_vmin_vmax": [
                    1225,
                    1290,
                    1295
                ],
                "self._transform": [
                    1245,
                    1278
                ],
                "self._lower": [
                    1278,
                    1284,
                    1246,
                    1247
                ],
                "self._upper": [
                    1284,
                    1278,
                    1247
                ],
                "masked": [
                    1256,
                    1257,
                    1258,
                    1260,
                    1261,
                    1266,
                    1267,
                    1268,
                    1270,
                    1271
                ],
                "np.abs": [
                    1952,
                    1954,
                    1256,
                    1258,
                    1266
                ],
                "sign": [
                    1257,
                    1259,
                    1267,
                    1268,
                    1269
                ],
                "np.sign": [
                    1257,
                    1267
                ],
                "log": [
                    1258,
                    1259,
                    1260
                ],
                "exp": [
                    1268,
                    1269,
                    1270
                ],
                "np.exp": [
                    1268
                ],
                "arr": [
                    1584,
                    1585,
                    1460,
                    1463,
                    1465,
                    1467,
                    1468,
                    1469,
                    1470,
                    1473,
                    1474,
                    1476,
                    1481,
                    1482,
                    1484,
                    1485,
                    1487,
                    1488,
                    1277,
                    1278
                ],
                "self._inv_transform": [
                    1285
                ],
                "self.gamma": [
                    1305,
                    1314,
                    1339
                ],
                "np.power": [
                    1328
                ],
                "boundaries": [
                    1387,
                    1388,
                    1389
                ],
                "self.boundaries": [
                    1410,
                    1389,
                    1390
                ],
                "self.Ncmap": [
                    1408,
                    1413,
                    1391,
                    1392,
                    1406
                ],
                "ncolors": [
                    1391
                ],
                "self._interp": [
                    1393,
                    1395,
                    1412
                ],
                "xx": [
                    1409,
                    1411,
                    1415,
                    1416,
                    1401,
                    1402,
                    1403,
                    1405
                ],
                "np.ma.getmaskarray": [
                    1402
                ],
                "xx.filled": [
                    1403
                ],
                "max_col": [
                    1408,
                    1416,
                    1406
                ],
                "iret": [
                    1409,
                    1411,
                    1414,
                    1415,
                    1416,
                    1417
                ],
                "xx.shape": [
                    1409
                ],
                "np.int16": [
                    1409,
                    1414
                ],
                "i": [
                    1888,
                    1889,
                    1410,
                    1539,
                    1411,
                    1544,
                    1549,
                    1584,
                    1585,
                    1554,
                    1559,
                    1564,
                    1533,
                    1534
                ],
                "scalefac": [
                    1413,
                    1414
                ],
                "arr.shape": [
                    1584,
                    1465,
                    1467,
                    1463
                ],
                "in_shape": [
                    1518,
                    1576,
                    1467,
                    1494
                ],
                "arr.dtype": [
                    1470
                ],
                "out": [
                    1473,
                    1482,
                    1485,
                    1488,
                    1490,
                    1491,
                    1492,
                    1494
                ],
                "np.zeros_like": [
                    1473,
                    1477
                ],
                "arr_max": [
                    1474,
                    1475,
                    1478,
                    1481,
                    1484,
                    1487,
                    1492
                ],
                "arr.max": [
                    1474
                ],
                "ipos": [
                    1475,
                    1478,
                    1479,
                    1481,
                    1484,
                    1487
                ],
                "delta": [
                    1476,
                    1477,
                    1478,
                    1479,
                    1482,
                    1485,
                    1488
                ],
                "arr.ptp": [
                    1476
                ],
                "s": [
                    1536,
                    1537,
                    1569,
                    1477,
                    1478,
                    1491,
                    1526,
                    1535
                ],
                "idx": [
                    1539,
                    1540,
                    1541,
                    1542,
                    1544,
                    1545,
                    1546,
                    1547,
                    1549,
                    1550,
                    1551,
                    1552,
                    1554,
                    1555,
                    1556,
                    1557,
                    1559,
                    1560,
                    1561,
                    1562,
                    1564,
                    1565,
                    1566,
                    1567,
                    1569,
                    1570,
                    1571,
                    1572,
                    1481,
                    1482,
                    1484,
                    1485,
                    1487,
                    1488
                ],
                "out.reshape": [
                    1494
                ],
                "hsv": [
                    1511,
                    1960,
                    1514,
                    1963,
                    1516,
                    1518,
                    1519,
                    1520,
                    1521,
                    1525,
                    1526,
                    1527,
                    1947,
                    1948
                ],
                "hsv.shape": [
                    1514,
                    1516,
                    1518
                ],
                "hsv.dtype": [
                    1521
                ],
                "h": [
                    1525,
                    1529,
                    1530,
                    1531,
                    1533,
                    1534
                ],
                "np.empty_like": [
                    1529,
                    1530,
                    1531
                ],
                "f": [
                    1536,
                    1537,
                    1534
                ],
                "p": [
                    1542,
                    1547,
                    1550,
                    1555,
                    1561,
                    1566,
                    1535
                ],
                "q": [
                    1536,
                    1545,
                    1556,
                    1567
                ],
                "t": [
                    1552,
                    1537,
                    1541,
                    1560
                ],
                "rgb": [
                    1889,
                    1574,
                    1576,
                    2000,
                    2001,
                    2002,
                    1877,
                    1880,
                    1947,
                    1982
                ],
                "np.stack": [
                    1574
                ],
                "rgb.reshape": [
                    1576
                ],
                "sum_sq": [
                    1585,
                    1586,
                    1583
                ],
                "np.newaxis": [
                    1585,
                    1868
                ],
                "np.sqrt": [
                    1586
                ],
                "self.azdeg": [
                    1624,
                    1636
                ],
                "azdeg": [
                    1624
                ],
                "self.altdeg": [
                    1625,
                    1637
                ],
                "altdeg": [
                    1625
                ],
                "self.hsv_min_val": [
                    1626,
                    1940
                ],
                "hsv_min_val": [
                    1626,
                    1939,
                    1940,
                    1959
                ],
                "self.hsv_max_val": [
                    1936,
                    1627
                ],
                "hsv_max_val": [
                    1936,
                    1627,
                    1957,
                    1935
                ],
                "self.hsv_min_sat": [
                    1938,
                    1628
                ],
                "hsv_min_sat": [
                    1937,
                    1938,
                    1955,
                    1628
                ],
                "self.hsv_max_sat": [
                    1629,
                    1934
                ],
                "hsv_max_sat": [
                    1953,
                    1934,
                    1629,
                    1933
                ],
                "az": [
                    1640,
                    1636,
                    1639
                ],
                "np.radians": [
                    1636,
                    1637
                ],
                "alt": [
                    1640,
                    1641,
                    1637,
                    1639
                ],
                "np.cos": [
                    1640,
                    1639
                ],
                "np.sin": [
                    1640,
                    1641
                ],
                "dy": [
                    1867,
                    1684,
                    1814,
                    1687
                ],
                "e_dy": [
                    1692,
                    1687
                ],
                "e_dx": [
                    1691,
                    1687
                ],
                "np.gradient": [
                    1687
                ],
                "vert_exag": [
                    1867,
                    1814,
                    1687
                ],
                "elevation": [
                    1690,
                    1867,
                    1687
                ],
                "dx": [
                    1867,
                    1814,
                    1687
                ],
                "normal": [
                    1696,
                    1690,
                    1691,
                    1692,
                    1693,
                    1694
                ],
                "view": [
                    1690
                ],
                "np.empty": [
                    1690
                ],
                "elevation.shape": [
                    1690
                ],
                "_vector_magnitude": [
                    1694
                ],
                "self.shade_normals": [
                    1696
                ],
                "fraction": [
                    1696,
                    1867,
                    1815,
                    1728
                ],
                "intensity": [
                    1943,
                    1944,
                    1952,
                    1953,
                    1954,
                    1955,
                    1956,
                    1957,
                    1958,
                    1959,
                    1724,
                    1982,
                    1727,
                    1728,
                    1738,
                    1739,
                    1740,
                    1867,
                    1742,
                    1868,
                    2000,
                    2001,
                    1877,
                    1880,
                    1886,
                    1887
                ],
                "normals.dot": [
                    1724
                ],
                "normals": [
                    1724
                ],
                "self.direction": [
                    1724
                ],
                "imin": [
                    1738,
                    1739,
                    1733,
                    1727
                ],
                "imax": [
                    1739,
                    1733,
                    1727
                ],
                "intensity.min": [
                    1727
                ],
                "intensity.max": [
                    1727
                ],
                "data.min": [
                    1806
                ],
                "data.max": [
                    1808
                ],
                "norm": [
                    2058,
                    2059,
                    1809,
                    1810,
                    1812
                ],
                "rgb0": [
                    1817,
                    1818,
                    1812,
                    1813
                ],
                "cmap": [
                    2049,
                    2052,
                    2054,
                    2056,
                    2059,
                    1812,
                    2044,
                    2047
                ],
                "rgb1": [
                    1817,
                    1813
                ],
                "self.shade_rgb": [
                    1813
                ],
                "blend_mode": [
                    1880,
                    1876,
                    1813,
                    1877
                ],
                "kwargs": [
                    1880,
                    1877,
                    1815
                ],
                "self.hillshade": [
                    1867
                ],
                "lookup": [
                    1883,
                    1876,
                    1877,
                    1871
                ],
                "self.blend_hsv": [
                    1872
                ],
                "self.blend_soft_light": [
                    1873
                ],
                "self.blend_overlay": [
                    1874
                ],
                "blend": [
                    1880,
                    1889,
                    1891,
                    1877
                ],
                "lookup.keys": [
                    1883
                ],
                "intensity.mask": [
                    1887
                ],
                "rgb_to_hsv": [
                    1947
                ],
                "hue": [
                    1948
                ],
                "sat": [
                    1952,
                    1953,
                    1954,
                    1955,
                    1948
                ],
                "np.moveaxis": [
                    1948
                ],
                "np.putmask": [
                    1952,
                    1954,
                    1956,
                    1958
                ],
                "hsv_to_rgb": [
                    1963
                ],
                "low": [
                    2000,
                    2002
                ],
                "high": [
                    2001,
                    2002
                ],
                "np.where": [
                    2002
                ],
                "slice_map": [
                    2034,
                    2035,
                    2028
                ],
                "cbook._check_in_list": [
                    2034
                ],
                "extend": [
                    2051,
                    2056,
                    2034,
                    2035,
                    2041,
                    2046
                ],
                "color_slice": [
                    2035,
                    2044,
                    2038
                ],
                "n_data_colors": [
                    2058,
                    2044,
                    2037,
                    2038
                ],
                "levels": [
                    2041,
                    2058,
                    2037
                ],
                "n_expected": [
                    2042,
                    2038,
                    2039
                ],
                "color_slice.start": [
                    2038
                ],
                "color_slice.stop": [
                    2038
                ],
                "cmap.set_under": [
                    2049,
                    2047
                ],
                "cmap.set_over": [
                    2052,
                    2054
                ],
                "cmap.colorbar_extend": [
                    2056
                ],
                "BoundaryNorm": [
                    2058
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/matplotlib/tutorials/colors/colormapnorms.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "pcm = ax[0].pcolormesh(X, Y, Z,\n                       norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,\n                                              vmin=-1.0, vmax=1.0),\n                       cmap='RdBu_r')",
                    "start_line": 99,
                    "end_line": 102
                }
            ],
            "inscope_functions": [
                "def __init__(self, vmin=None, vmax=None, vcenter=None, clip=False):\n    self.vcenter = vcenter\n    colors.Normalize.__init__(self, vmin, vmax, clip)",
                "def __call__(self, value, clip=None):\n    # I'm ignoring masked values and all kinds of edge cases to make a\n    # simple example...\n    x, y = [self.vmin, self.vcenter, self.vmax], [0, 0.5, 1]\n    return np.ma.masked_array(np.interp(value, x, y))"
            ],
            "inscope_function_signatures": [
                "__init__(self, vmin=None, vmax=None, vcenter=None, clip=False)",
                "__call__(self, value, clip=None)"
            ],
            "variables_in_file": {
                "N": [
                    128,
                    163,
                    164,
                    51,
                    52,
                    91,
                    92,
                    127
                ],
                "X": [
                    128,
                    129,
                    133,
                    137,
                    164,
                    165,
                    166,
                    174,
                    52,
                    182,
                    57,
                    58,
                    185,
                    63,
                    68,
                    92,
                    93,
                    94,
                    99,
                    105
                ],
                "Y": [
                    128,
                    129,
                    133,
                    137,
                    164,
                    165,
                    166,
                    174,
                    52,
                    182,
                    57,
                    58,
                    185,
                    63,
                    68,
                    92,
                    93,
                    94,
                    99,
                    105
                ],
                "np.mgrid": [
                    128,
                    164,
                    52,
                    92
                ],
                "np": [
                    128,
                    129,
                    164,
                    165,
                    166,
                    172,
                    52,
                    180,
                    185,
                    57,
                    58,
                    202,
                    210,
                    211,
                    212,
                    92,
                    93,
                    94,
                    224,
                    105,
                    245,
                    253
                ],
                "complex": [
                    128,
                    164,
                    52,
                    92
                ],
                "Z1": [
                    129,
                    133,
                    165,
                    167,
                    137,
                    57,
                    59,
                    93,
                    95
                ],
                "np.exp": [
                    165,
                    166,
                    57,
                    58,
                    93,
                    94
                ],
                "Z2": [
                    166,
                    167,
                    58,
                    59,
                    94,
                    95
                ],
                "Z": [
                    64,
                    99,
                    68,
                    167,
                    105,
                    174,
                    182,
                    185,
                    59,
                    63,
                    95
                ],
                "fig": [
                    97,
                    66,
                    131,
                    225,
                    69,
                    103,
                    135,
                    169,
                    106,
                    138,
                    207,
                    177,
                    183,
                    248,
                    186,
                    61,
                    254
                ],
                "ax": [
                    131,
                    133,
                    135,
                    137,
                    138,
                    169,
                    170,
                    174,
                    177,
                    182,
                    183,
                    185,
                    186,
                    61,
                    63,
                    66,
                    68,
                    69,
                    207,
                    220,
                    224,
                    97,
                    99,
                    103,
                    105,
                    106,
                    248,
                    251,
                    253
                ],
                "plt.subplots": [
                    97,
                    131,
                    169,
                    207,
                    248,
                    61
                ],
                "plt": [
                    97,
                    226,
                    131,
                    70,
                    169,
                    107,
                    139,
                    207,
                    210,
                    211,
                    248,
                    187,
                    61,
                    255
                ],
                "pcm": [
                    133,
                    135,
                    137,
                    138,
                    174,
                    177,
                    182,
                    183,
                    185,
                    186,
                    63,
                    66,
                    68,
                    69,
                    220,
                    225,
                    99,
                    103,
                    105,
                    106,
                    251,
                    254
                ],
                "pcolor": [
                    68,
                    63
                ],
                "colors.LogNorm": [
                    64
                ],
                "colors": [
                    64,
                    100,
                    133,
                    236,
                    173,
                    239,
                    181,
                    213,
                    218
                ],
                "Z.min": [
                    64
                ],
                "Z.max": [
                    64
                ],
                "fig.colorbar": [
                    225,
                    66,
                    69,
                    135,
                    103,
                    106,
                    138,
                    177,
                    183,
                    186,
                    254
                ],
                "plt.show": [
                    226,
                    70,
                    107,
                    139,
                    187,
                    255
                ],
                "pcolormesh": [
                    99,
                    133,
                    105,
                    137,
                    174,
                    182,
                    185
                ],
                "colors.SymLogNorm": [
                    100
                ],
                "np.max": [
                    105,
                    185
                ],
                "np.sin": [
                    129
                ],
                "colors.PowerNorm": [
                    133
                ],
                "ax.flatten": [
                    170
                ],
                "bounds": [
                    180,
                    172,
                    173,
                    181
                ],
                "np.linspace": [
                    210,
                    211,
                    172
                ],
                "norm": [
                    181,
                    173,
                    182,
                    175
                ],
                "colors.BoundaryNorm": [
                    173,
                    181
                ],
                "np.array": [
                    180
                ],
                "filename": [
                    201,
                    202
                ],
                "cbook.get_sample_data": [
                    201
                ],
                "cbook": [
                    201
                ],
                "np.load": [
                    202
                ],
                "dem": [
                    202,
                    203,
                    204,
                    205
                ],
                "topo": [
                    203,
                    220,
                    251
                ],
                "longitude": [
                    220,
                    204,
                    251
                ],
                "latitude": [
                    251,
                    220,
                    205
                ],
                "colors_undersea": [
                    210,
                    212
                ],
                "plt.cm.terrain": [
                    210,
                    211
                ],
                "plt.cm": [
                    210,
                    211
                ],
                "colors_land": [
                    211,
                    212
                ],
                "all_colors": [
                    212,
                    214
                ],
                "np.vstack": [
                    212
                ],
                "terrain_map": [
                    221,
                    252,
                    213
                ],
                "colors.LinearSegmentedColormap.from_list": [
                    213
                ],
                "colors.LinearSegmentedColormap": [
                    213
                ],
                "divnorm": [
                    218,
                    220
                ],
                "colors.TwoSlopeNorm": [
                    218
                ],
                "ax.pcolormesh": [
                    251,
                    220
                ],
                "ax.set_aspect": [
                    224,
                    253
                ],
                "np.cos": [
                    224,
                    253
                ],
                "np.deg2rad": [
                    224,
                    253
                ],
                "colors.Normalize": [
                    236,
                    239
                ],
                "self.vcenter": [
                    244,
                    238
                ],
                "self": [
                    244,
                    238,
                    239
                ],
                "vcenter": [
                    238
                ],
                "colors.Normalize.__init__": [
                    239
                ],
                "vmin": [
                    239
                ],
                "vmax": [
                    239
                ],
                "clip": [
                    239
                ],
                "x": [
                    244,
                    245
                ],
                "y": [
                    244,
                    245
                ],
                "self.vmin": [
                    244
                ],
                "self.vmax": [
                    244
                ],
                "np.ma.masked_array": [
                    245
                ],
                "np.ma": [
                    245
                ],
                "np.interp": [
                    245
                ],
                "value": [
                    245
                ],
                "midnorm": [
                    249,
                    251
                ],
                "MidpointNormalize": [
                    249
                ]
            },
            "filtered_variables_in_file": {
                "N": [
                    128,
                    163,
                    164,
                    51,
                    52,
                    91,
                    92,
                    127
                ],
                "X": [
                    128,
                    129,
                    133,
                    137,
                    164,
                    165,
                    166,
                    174,
                    52,
                    182,
                    57,
                    58,
                    185,
                    63,
                    68,
                    92,
                    93,
                    94,
                    99,
                    105
                ],
                "Y": [
                    128,
                    129,
                    133,
                    137,
                    164,
                    165,
                    166,
                    174,
                    52,
                    182,
                    57,
                    58,
                    185,
                    63,
                    68,
                    92,
                    93,
                    94,
                    99,
                    105
                ],
                "np.mgrid": [
                    128,
                    164,
                    52,
                    92
                ],
                "np": [
                    128,
                    129,
                    164,
                    165,
                    166,
                    172,
                    52,
                    180,
                    185,
                    57,
                    58,
                    202,
                    210,
                    211,
                    212,
                    92,
                    93,
                    94,
                    224,
                    105,
                    245,
                    253
                ],
                "Z1": [
                    129,
                    133,
                    165,
                    167,
                    137,
                    57,
                    59,
                    93,
                    95
                ],
                "np.exp": [
                    165,
                    166,
                    57,
                    58,
                    93,
                    94
                ],
                "Z2": [
                    166,
                    167,
                    58,
                    59,
                    94,
                    95
                ],
                "Z": [
                    64,
                    99,
                    68,
                    167,
                    105,
                    174,
                    182,
                    185,
                    59,
                    63,
                    95
                ],
                "fig": [
                    97,
                    66,
                    131,
                    225,
                    69,
                    103,
                    135,
                    169,
                    106,
                    138,
                    207,
                    177,
                    183,
                    248,
                    186,
                    61,
                    254
                ],
                "ax": [
                    131,
                    133,
                    135,
                    137,
                    138,
                    169,
                    170,
                    174,
                    177,
                    182,
                    183,
                    185,
                    186,
                    61,
                    63,
                    66,
                    68,
                    69,
                    207,
                    220,
                    224,
                    97,
                    99,
                    103,
                    105,
                    106,
                    248,
                    251,
                    253
                ],
                "plt.subplots": [
                    97,
                    131,
                    169,
                    207,
                    248,
                    61
                ],
                "plt": [
                    97,
                    226,
                    131,
                    70,
                    169,
                    107,
                    139,
                    207,
                    210,
                    211,
                    248,
                    187,
                    61,
                    255
                ],
                "pcm": [
                    133,
                    135,
                    137,
                    138,
                    174,
                    177,
                    182,
                    183,
                    185,
                    186,
                    63,
                    66,
                    68,
                    69,
                    220,
                    225,
                    99,
                    103,
                    105,
                    106,
                    251,
                    254
                ],
                "pcolor": [
                    68,
                    63
                ],
                "colors.LogNorm": [
                    64
                ],
                "colors": [
                    64,
                    100,
                    133,
                    236,
                    173,
                    239,
                    181,
                    213,
                    218
                ],
                "Z.min": [
                    64
                ],
                "Z.max": [
                    64
                ],
                "fig.colorbar": [
                    225,
                    66,
                    69,
                    135,
                    103,
                    106,
                    138,
                    177,
                    183,
                    186,
                    254
                ],
                "plt.show": [
                    226,
                    70,
                    107,
                    139,
                    187,
                    255
                ],
                "pcolormesh": [
                    99,
                    133,
                    105,
                    137,
                    174,
                    182,
                    185
                ],
                "colors.SymLogNorm": [
                    100
                ],
                "np.max": [
                    105,
                    185
                ],
                "np.sin": [
                    129
                ],
                "colors.PowerNorm": [
                    133
                ],
                "ax.flatten": [
                    170
                ],
                "bounds": [
                    180,
                    172,
                    173,
                    181
                ],
                "np.linspace": [
                    210,
                    211,
                    172
                ],
                "norm": [
                    181,
                    173,
                    182,
                    175
                ],
                "colors.BoundaryNorm": [
                    173,
                    181
                ],
                "np.array": [
                    180
                ],
                "filename": [
                    201,
                    202
                ],
                "cbook.get_sample_data": [
                    201
                ],
                "cbook": [
                    201
                ],
                "np.load": [
                    202
                ],
                "dem": [
                    202,
                    203,
                    204,
                    205
                ],
                "topo": [
                    203,
                    220,
                    251
                ],
                "longitude": [
                    220,
                    204,
                    251
                ],
                "latitude": [
                    251,
                    220,
                    205
                ],
                "colors_undersea": [
                    210,
                    212
                ],
                "plt.cm.terrain": [
                    210,
                    211
                ],
                "plt.cm": [
                    210,
                    211
                ],
                "colors_land": [
                    211,
                    212
                ],
                "all_colors": [
                    212,
                    214
                ],
                "np.vstack": [
                    212
                ],
                "terrain_map": [
                    221,
                    252,
                    213
                ],
                "colors.LinearSegmentedColormap.from_list": [
                    213
                ],
                "colors.LinearSegmentedColormap": [
                    213
                ],
                "divnorm": [
                    218,
                    220
                ],
                "colors.TwoSlopeNorm": [
                    218
                ],
                "ax.pcolormesh": [
                    251,
                    220
                ],
                "ax.set_aspect": [
                    224,
                    253
                ],
                "np.cos": [
                    224,
                    253
                ],
                "np.deg2rad": [
                    224,
                    253
                ],
                "colors.Normalize": [
                    236,
                    239
                ],
                "self.vcenter": [
                    244,
                    238
                ],
                "self": [
                    244,
                    238,
                    239
                ],
                "vcenter": [
                    238
                ],
                "colors.Normalize.__init__": [
                    239
                ],
                "vmin": [
                    239
                ],
                "vmax": [
                    239
                ],
                "clip": [
                    239
                ],
                "x": [
                    244,
                    245
                ],
                "y": [
                    244,
                    245
                ],
                "self.vmin": [
                    244
                ],
                "self.vmax": [
                    244
                ],
                "np.ma.masked_array": [
                    245
                ],
                "np.ma": [
                    245
                ],
                "np.interp": [
                    245
                ],
                "value": [
                    245
                ],
                "midnorm": [
                    249,
                    251
                ],
                "MidpointNormalize": [
                    249
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/matplotlib/lib/matplotlib/tests/test_colors.py",
                "test_function": "test_SymLogNorm",
                "test_function_code": "def test_SymLogNorm():\n    \"\"\"\n    Test SymLogNorm behavior\n    \"\"\"\n    norm = mcolors.SymLogNorm(3, vmax=5, linscale=1.2, base=np.e)\n    vals = np.array([-30, -1, 2, 6], dtype=float)\n    normed_vals = norm(vals)\n    expected = [0., 0.53980074, 0.826991, 1.02758204]\n    assert_array_almost_equal(normed_vals, expected)\n    _inverse_tester(norm, vals)\n    _scalar_tester(norm, vals)\n    _mask_tester(norm, vals)\n\n    # Ensure that specifying vmin returns the same result as above\n    norm = mcolors.SymLogNorm(3, vmin=-30, vmax=5, linscale=1.2, base=np.e)\n    normed_vals = norm(vals)\n    assert_array_almost_equal(normed_vals, expected)\n\n    # test something more easily checked.\n    norm = mcolors.SymLogNorm(1, vmin=-np.e**3, vmax=np.e**3, base=np.e)\n    nn = norm([-np.e**3, -np.e**2, -np.e**1, -1,\n              0, 1, np.e**1, np.e**2, np.e**3])\n    xx = np.array([0., 0.109123, 0.218246, 0.32737, 0.5, 0.67263,\n                   0.781754, 0.890877, 1.])\n    assert_array_almost_equal(nn, xx)\n    norm = mcolors.SymLogNorm(1, vmin=-10**3, vmax=10**3, base=10)\n    nn = norm([-10**3, -10**2, -10**1, -1,\n              0, 1, 10**1, 10**2, 10**3])\n    xx = np.array([0., 0.121622, 0.243243, 0.364865, 0.5, 0.635135,\n                   0.756757, 0.878378, 1.])\n    assert_array_almost_equal(nn, xx)",
                "test_error": "TypeError: __init__() got an unexpected keyword argument 'base'",
                "full_test_error": "def test_SymLogNorm():\n        \"\"\"\n        Test SymLogNorm behavior\n        \"\"\"\n>       norm = mcolors.SymLogNorm(3, vmax=5, linscale=1.2, base=np.e)\nE       TypeError: __init__() got an unexpected keyword argument 'base'\n\nlib/matplotlib/tests/test_colors.py:401: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}