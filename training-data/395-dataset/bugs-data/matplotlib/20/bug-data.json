{
    "matplotlib:20": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_20/lib/matplotlib/_constrained_layout.py": {
            "buggy_functions": [
                {
                    "function_name": "_make_ghost_gridspec_slots",
                    "function_code": "def _make_ghost_gridspec_slots(fig, gs):\n    \"\"\"\n    Check for unoccupied gridspec slots and make ghost axes for these\n    slots...  Do for each gs separately.  This is a pretty big kludge\n    but shouldn't have too much ill effect.  The worst is that\n    someone querying the figure will wonder why there are more\n    axes than they thought.\n    \"\"\"\n    nrows, ncols = gs.get_geometry()\n    hassubplotspec = np.zeros(nrows * ncols, dtype=bool)\n    axs = []\n    for ax in fig.axes:\n        if (hasattr(ax, 'get_subplotspec')\n                and ax._layoutbox is not None\n                and ax.get_subplotspec().get_gridspec() == gs):\n            axs += [ax]\n    for ax in axs:\n        ss0 = ax.get_subplotspec()\n        hassubplotspec[ss0.num1:(ss0.num2 + 1)] = True\n    for nn, hss in enumerate(hassubplotspec):\n        if not hss:\n            # this gridspec slot doesn't have an axis so we\n            # make a \"ghost\".\n            ax = fig.add_subplot(gs[nn])\n            ax.set_frame_on(False)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            ax.set_facecolor((1, 0, 0, 0))\n",
                    "decorators": [],
                    "docstring": "Check for unoccupied gridspec slots and make ghost axes for these\nslots...  Do for each gs separately.  This is a pretty big kludge\nbut shouldn't have too much ill effect.  The worst is that\nsomeone querying the figure will wonder why there are more\naxes than they thought.",
                    "start_line": 233,
                    "end_line": 260,
                    "variables": {
                        "nrows": [
                            241,
                            242
                        ],
                        "ncols": [
                            241,
                            242
                        ],
                        "gs.get_geometry": [
                            241
                        ],
                        "gs": [
                            256,
                            241,
                            247
                        ],
                        "hassubplotspec": [
                            242,
                            251,
                            252
                        ],
                        "np.zeros": [
                            242
                        ],
                        "np": [
                            242
                        ],
                        "bool": [
                            242
                        ],
                        "axs": [
                            248,
                            249,
                            243
                        ],
                        "ax": [
                            256,
                            257,
                            258,
                            259,
                            260,
                            244,
                            245,
                            246,
                            247,
                            248,
                            249,
                            250
                        ],
                        "fig.axes": [
                            244
                        ],
                        "fig": [
                            256,
                            244
                        ],
                        "hasattr": [
                            245
                        ],
                        "ax._layoutbox": [
                            246
                        ],
                        "get_gridspec": [
                            247
                        ],
                        "ax.get_subplotspec": [
                            250,
                            247
                        ],
                        "ss0": [
                            250,
                            251
                        ],
                        "ss0.num1": [
                            251
                        ],
                        "ss0.num2": [
                            251
                        ],
                        "nn": [
                            256,
                            252
                        ],
                        "hss": [
                            252,
                            253
                        ],
                        "enumerate": [
                            252
                        ],
                        "fig.add_subplot": [
                            256
                        ],
                        "ax.set_frame_on": [
                            257
                        ],
                        "ax.set_xticks": [
                            258
                        ],
                        "ax.set_yticks": [
                            259
                        ],
                        "ax.set_facecolor": [
                            260
                        ]
                    },
                    "filtered_variables": {
                        "nrows": [
                            241,
                            242
                        ],
                        "ncols": [
                            241,
                            242
                        ],
                        "gs.get_geometry": [
                            241
                        ],
                        "gs": [
                            256,
                            241,
                            247
                        ],
                        "hassubplotspec": [
                            242,
                            251,
                            252
                        ],
                        "np.zeros": [
                            242
                        ],
                        "np": [
                            242
                        ],
                        "axs": [
                            248,
                            249,
                            243
                        ],
                        "ax": [
                            256,
                            257,
                            258,
                            259,
                            260,
                            244,
                            245,
                            246,
                            247,
                            248,
                            249,
                            250
                        ],
                        "fig.axes": [
                            244
                        ],
                        "fig": [
                            256,
                            244
                        ],
                        "ax._layoutbox": [
                            246
                        ],
                        "get_gridspec": [
                            247
                        ],
                        "ax.get_subplotspec": [
                            250,
                            247
                        ],
                        "ss0": [
                            250,
                            251
                        ],
                        "ss0.num1": [
                            251
                        ],
                        "ss0.num2": [
                            251
                        ],
                        "nn": [
                            256,
                            252
                        ],
                        "hss": [
                            252,
                            253
                        ],
                        "fig.add_subplot": [
                            256
                        ],
                        "ax.set_frame_on": [
                            257
                        ],
                        "ax.set_xticks": [
                            258
                        ],
                        "ax.set_yticks": [
                            259
                        ],
                        "ax.set_facecolor": [
                            260
                        ]
                    },
                    "diff_line_number": 257,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _in_same_column(colnum0min, colnum0max, colnumCmin, colnumCmax):\n    return (colnumCmin <= colnum0min <= colnumCmax\n            or colnumCmin <= colnum0max <= colnumCmax)",
                "def _in_same_row(rownum0min, rownum0max, rownumCmin, rownumCmax):\n    return (rownumCmin <= rownum0min <= rownumCmax\n            or rownumCmin <= rownum0max <= rownumCmax)",
                "def _axes_all_finite_sized(fig):\n    \"\"\"Return whether all axes in the figure have a finite width and height.\"\"\"\n    for ax in fig.axes:\n        if ax._layoutbox is not None:\n            newpos = ax._poslayoutbox.get_rect()\n            if newpos[2] <= 0 or newpos[3] <= 0:\n                return False\n    return True",
                "def do_constrained_layout(fig, renderer, h_pad, w_pad,\n        hspace=None, wspace=None):\n    \"\"\"\n    Do the constrained_layout.  Called at draw time in\n     ``figure.constrained_layout()``\n\n    Parameters\n    ----------\n    fig : Figure\n      is the ``figure`` instance to do the layout in.\n\n    renderer : Renderer\n      the renderer to use.\n\n     h_pad, w_pad : float\n       are in figure-normalized units, and are a padding around the axes\n       elements.\n\n     hspace, wspace : float\n        are in fractions of the subplot sizes.\n\n    \"\"\"\n\n    # Steps:\n    #\n    # 1. get a list of unique gridspecs in this figure.  Each gridspec will be\n    # constrained separately.\n    # 2. Check for gaps in the gridspecs.  i.e. if not every axes slot in the\n    # gridspec has been filled.  If empty, add a ghost axis that is made so\n    # that it cannot be seen (though visible=True).  This is needed to make\n    # a blank spot in the layout.\n    # 3. Compare the tight_bbox of each axes to its `position`, and assume that\n    # the difference is the space needed by the elements around the edge of\n    # the axes (decorations) like the title, ticklabels, x-labels, etc.  This\n    # can include legends who overspill the axes boundaries.\n    # 4. Constrain gridspec elements to line up:\n    #     a) if colnum0 != colnumC, the two subplotspecs are stacked next to\n    #     each other, with the appropriate order.\n    #     b) if colnum0 == colnumC, line up the left or right side of the\n    #     _poslayoutbox (depending if it is the min or max num that is equal).\n    #     c) do the same for rows...\n    # 5. The above doesn't constrain relative sizes of the _poslayoutboxes\n    # at all, and indeed zero-size is a solution that the solver often finds\n    # more convenient than expanding the sizes.  Right now the solution is to\n    # compare subplotspec sizes (i.e. drowsC and drows0) and constrain the\n    # larger _poslayoutbox to be larger than the ratio of the sizes. i.e. if\n    # drows0 > drowsC, then ax._poslayoutbox > axc._poslayoutbox*drowsC/drows0.\n    # This works fine *if* the decorations are similar between the axes.\n    # If the larger subplotspec has much larger axes decorations, then the\n    # constraint above is incorrect.\n    #\n    # We need the greater than in the above, in general, rather than an equals\n    # sign.  Consider the case of the left column having 2 rows, and the right\n    # column having 1 row.  We want the top and bottom of the _poslayoutboxes\n    # to line up. So that means if there are decorations on the left column\n    # axes they will be smaller than half as large as the right hand axis.\n    #\n    # This can break down if the decoration size for the right hand axis (the\n    # margins) is very large.  There must be a math way to check for this case.\n\n    invTransFig = fig.transFigure.inverted().transform_bbox\n\n    # list of unique gridspecs that contain child axes:\n    gss = set()\n    for ax in fig.axes:\n        if hasattr(ax, 'get_subplotspec'):\n            gs = ax.get_subplotspec().get_gridspec()\n            if gs._layoutbox is not None:\n                gss.add(gs)\n    if len(gss) == 0:\n        cbook._warn_external('There are no gridspecs with layoutboxes. '\n                             'Possibly did not call parent GridSpec with the'\n                             ' figure= keyword')\n\n    if fig._layoutbox.constrained_layout_called < 1:\n        for gs in gss:\n            # fill in any empty gridspec slots w/ ghost axes...\n            _make_ghost_gridspec_slots(fig, gs)\n\n    for nnn in range(2):\n        # do the algorithm twice.  This has to be done because decorators\n        # change size after the first re-position (i.e. x/yticklabels get\n        # larger/smaller).  This second reposition tends to be much milder,\n        # so doing twice makes things work OK.\n        for ax in fig.axes:\n            _log.debug(ax._layoutbox)\n            if ax._layoutbox is not None:\n                # make margins for each layout box based on the size of\n                # the decorators.\n                _make_layout_margins(ax, renderer, h_pad, w_pad)\n\n        # do layout for suptitle.\n        suptitle = fig._suptitle\n        do_suptitle = (suptitle is not None and\n                       suptitle._layoutbox is not None and\n                       suptitle.get_in_layout())\n        if do_suptitle:\n            bbox = invTransFig(\n                suptitle.get_window_extent(renderer=renderer))\n            height = bbox.y1 - bbox.y0\n            if np.isfinite(height):\n                # reserve at top of figure include an h_pad above and below\n                suptitle._layoutbox.edit_height(height + h_pad * 2)\n\n        # OK, the above lines up ax._poslayoutbox with ax._layoutbox\n        # now we need to\n        #   1) arrange the subplotspecs.  We do it at this level because\n        #      the subplotspecs are meant to contain other dependent axes\n        #      like colorbars or legends.\n        #   2) line up the right and left side of the ax._poslayoutbox\n        #      that have the same subplotspec maxes.\n\n        if fig._layoutbox.constrained_layout_called < 1:\n            # arrange the subplotspecs...  This is all done relative to each\n            # other.  Some subplotspecs contain axes, and others contain\n            # gridspecs the ones that contain gridspecs are a set proportion\n            # of their parent gridspec.  The ones that contain axes are\n            # not so constrained.\n            figlb = fig._layoutbox\n            for child in figlb.children:\n                if child._is_gridspec_layoutbox():\n                    # This routine makes all the subplot spec containers\n                    # have the correct arrangement.  It just stacks the\n                    # subplot layoutboxes in the correct order...\n                    _arrange_subplotspecs(child, hspace=hspace, wspace=wspace)\n\n            for gs in gss:\n                _align_spines(fig, gs)\n\n        fig._layoutbox.constrained_layout_called += 1\n        fig._layoutbox.update_variables()\n\n        # check if any axes collapsed to zero.  If not, don't change positions:\n        if _axes_all_finite_sized(fig):\n            # Now set the position of the axes...\n            for ax in fig.axes:\n                if ax._layoutbox is not None:\n                    newpos = ax._poslayoutbox.get_rect()\n                    # Now set the new position.\n                    # ax.set_position will zero out the layout for\n                    # this axis, allowing users to hard-code the position,\n                    # so this does the same w/o zeroing layout.\n                    ax._set_position(newpos, which='original')\n            if do_suptitle:\n                newpos = suptitle._layoutbox.get_rect()\n                suptitle.set_y(1.0 - h_pad)\n            else:\n                if suptitle is not None and suptitle._layoutbox is not None:\n                    suptitle._layoutbox.edit_height(0)\n        else:\n            cbook._warn_external('constrained_layout not applied.  At least '\n                                 'one axes collapsed to zero width or height.')",
                "def _make_ghost_gridspec_slots(fig, gs):\n    \"\"\"\n    Check for unoccupied gridspec slots and make ghost axes for these\n    slots...  Do for each gs separately.  This is a pretty big kludge\n    but shouldn't have too much ill effect.  The worst is that\n    someone querying the figure will wonder why there are more\n    axes than they thought.\n    \"\"\"\n    nrows, ncols = gs.get_geometry()\n    hassubplotspec = np.zeros(nrows * ncols, dtype=bool)\n    axs = []\n    for ax in fig.axes:\n        if (hasattr(ax, 'get_subplotspec')\n                and ax._layoutbox is not None\n                and ax.get_subplotspec().get_gridspec() == gs):\n            axs += [ax]\n    for ax in axs:\n        ss0 = ax.get_subplotspec()\n        hassubplotspec[ss0.num1:(ss0.num2 + 1)] = True\n    for nn, hss in enumerate(hassubplotspec):\n        if not hss:\n            # this gridspec slot doesn't have an axis so we\n            # make a \"ghost\".\n            ax = fig.add_subplot(gs[nn])\n            ax.set_frame_on(False)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            ax.set_facecolor((1, 0, 0, 0))",
                "def _make_layout_margins(ax, renderer, h_pad, w_pad):\n    \"\"\"\n    For each axes, make a margin between the *pos* layoutbox and the\n    *axes* layoutbox be a minimum size that can accommodate the\n    decorations on the axis.\n    \"\"\"\n    fig = ax.figure\n    invTransFig = fig.transFigure.inverted().transform_bbox\n    pos = ax.get_position(original=True)\n    tightbbox = ax.get_tightbbox(renderer=renderer)\n    if tightbbox is None:\n        bbox = pos\n    else:\n        bbox = invTransFig(tightbbox)\n\n    # this can go wrong:\n    if not (np.isfinite(bbox.width) and np.isfinite(bbox.height)):\n        # just abort, this is likely a bad set of co-ordinates that\n        # is transitory...\n        return\n    # use stored h_pad if it exists\n    h_padt = ax._poslayoutbox.h_pad\n    if h_padt is None:\n        h_padt = h_pad\n    w_padt = ax._poslayoutbox.w_pad\n    if w_padt is None:\n        w_padt = w_pad\n    ax._poslayoutbox.edit_left_margin_min(-bbox.x0 +\n            pos.x0 + w_padt)\n    ax._poslayoutbox.edit_right_margin_min(bbox.x1 -\n            pos.x1 + w_padt)\n    ax._poslayoutbox.edit_bottom_margin_min(\n            -bbox.y0 + pos.y0 + h_padt)\n    ax._poslayoutbox.edit_top_margin_min(bbox.y1-pos.y1+h_padt)\n    _log.debug('left %f', (-bbox.x0 + pos.x0 + w_pad))\n    _log.debug('right %f', (bbox.x1 - pos.x1 + w_pad))\n    _log.debug('bottom %f', (-bbox.y0 + pos.y0 + h_padt))\n    _log.debug('bbox.y0 %f', bbox.y0)\n    _log.debug('pos.y0 %f', pos.y0)\n    # Sometimes its possible for the solver to collapse\n    # rather than expand axes, so they all have zero height\n    # or width.  This stops that...  It *should* have been\n    # taken into account w/ pref_width...\n    if fig._layoutbox.constrained_layout_called < 1:\n        ax._poslayoutbox.constrain_height_min(20, strength='weak')\n        ax._poslayoutbox.constrain_width_min(20, strength='weak')\n        ax._layoutbox.constrain_height_min(20, strength='weak')\n        ax._layoutbox.constrain_width_min(20, strength='weak')\n        ax._poslayoutbox.constrain_top_margin(0, strength='weak')\n        ax._poslayoutbox.constrain_bottom_margin(0,\n                strength='weak')\n        ax._poslayoutbox.constrain_right_margin(0, strength='weak')\n        ax._poslayoutbox.constrain_left_margin(0, strength='weak')",
                "def _align_spines(fig, gs):\n    \"\"\"\n    - Align right/left and bottom/top spines of appropriate subplots.\n    - Compare size of subplotspec including height and width ratios\n       and make sure that the axes spines are at least as large\n       as they should be.\n    \"\"\"\n    # for each gridspec...\n    nrows, ncols = gs.get_geometry()\n    width_ratios = gs.get_width_ratios()\n    height_ratios = gs.get_height_ratios()\n    if width_ratios is None:\n        width_ratios = np.ones(ncols)\n    if height_ratios is None:\n        height_ratios = np.ones(nrows)\n\n    # get axes in this gridspec....\n    axs = []\n    for ax in fig.axes:\n        if (hasattr(ax, 'get_subplotspec')\n                and ax._layoutbox is not None):\n            if ax.get_subplotspec().get_gridspec() == gs:\n                axs += [ax]\n    rownummin = np.zeros(len(axs), dtype=np.int8)\n    rownummax = np.zeros(len(axs), dtype=np.int8)\n    colnummin = np.zeros(len(axs), dtype=np.int8)\n    colnummax = np.zeros(len(axs), dtype=np.int8)\n    width = np.zeros(len(axs))\n    height = np.zeros(len(axs))\n\n    for n, ax in enumerate(axs):\n        ss0 = ax.get_subplotspec()\n        rownummin[n], colnummin[n] = divmod(ss0.num1, ncols)\n        rownummax[n], colnummax[n] = divmod(ss0.num2, ncols)\n        width[n] = np.sum(\n                width_ratios[colnummin[n]:(colnummax[n] + 1)])\n        height[n] = np.sum(\n                height_ratios[rownummin[n]:(rownummax[n] + 1)])\n\n    for nn, ax in enumerate(axs[:-1]):\n        # now compare ax to all the axs:\n        #\n        # If the subplotspecs have the same colnumXmax, then line\n        # up their right sides.  If they have the same min, then\n        # line up their left sides (and vertical equivalents).\n        rownum0min, colnum0min = rownummin[nn], colnummin[nn]\n        rownum0max, colnum0max = rownummax[nn], colnummax[nn]\n        width0, height0 = width[nn], height[nn]\n        alignleft = False\n        alignright = False\n        alignbot = False\n        aligntop = False\n        alignheight = False\n        alignwidth = False\n        for mm in range(nn+1, len(axs)):\n            axc = axs[mm]\n            rownumCmin, colnumCmin = rownummin[mm], colnummin[mm]\n            rownumCmax, colnumCmax = rownummax[mm], colnummax[mm]\n            widthC, heightC = width[mm], height[mm]\n            # Horizontally align axes spines if they have the\n            # same min or max:\n            if not alignleft and colnum0min == colnumCmin:\n                # we want the _poslayoutboxes to line up on left\n                # side of the axes spines...\n                layoutbox.align([ax._poslayoutbox,\n                                 axc._poslayoutbox],\n                                'left')\n                alignleft = True\n\n            if not alignright and colnum0max == colnumCmax:\n                # line up right sides of _poslayoutbox\n                layoutbox.align([ax._poslayoutbox,\n                                 axc._poslayoutbox],\n                                'right')\n                alignright = True\n            # Vertically align axes spines if they have the\n            # same min or max:\n            if not aligntop and rownum0min == rownumCmin:\n                # line up top of _poslayoutbox\n                _log.debug('rownum0min == rownumCmin')\n                layoutbox.align([ax._poslayoutbox, axc._poslayoutbox],\n                                'top')\n                aligntop = True\n\n            if not alignbot and rownum0max == rownumCmax:\n                # line up bottom of _poslayoutbox\n                _log.debug('rownum0max == rownumCmax')\n                layoutbox.align([ax._poslayoutbox, axc._poslayoutbox],\n                                'bottom')\n                alignbot = True\n            ###########\n            # Now we make the widths and heights of position boxes\n            # similar. (i.e the spine locations)\n            # This allows vertically stacked subplots to have\n            # different sizes if they occupy different amounts\n            # of the gridspec:  i.e.\n            # gs = gridspec.GridSpec(3, 1)\n            # ax1 = gs[0,:]\n            # ax2 = gs[1:,:]\n            # then drows0 = 1, and drowsC = 2, and ax2\n            # should be at least twice as large as ax1.\n            # But it can be more than twice as large because\n            # it needs less room for the labeling.\n            #\n            # For height, this only needs to be done if the\n            # subplots share a column.  For width if they\n            # share a row.\n\n            drowsC = (rownumCmax - rownumCmin + 1)\n            drows0 = (rownum0max - rownum0min + 1)\n            dcolsC = (colnumCmax - colnumCmin + 1)\n            dcols0 = (colnum0max - colnum0min + 1)\n\n            if not alignheight and drows0 == drowsC:\n                ax._poslayoutbox.constrain_height(\n                        axc._poslayoutbox.height * height0 / heightC)\n                alignheight = True\n            elif _in_same_column(colnum0min, colnum0max,\n                    colnumCmin, colnumCmax):\n                if height0 > heightC:\n                    ax._poslayoutbox.constrain_height_min(\n                        axc._poslayoutbox.height * height0 / heightC)\n                    # these constraints stop the smaller axes from\n                    # being allowed to go to zero height...\n                    axc._poslayoutbox.constrain_height_min(\n                        ax._poslayoutbox.height * heightC /\n                        (height0*1.8))\n                elif height0 < heightC:\n                    axc._poslayoutbox.constrain_height_min(\n                        ax._poslayoutbox.height * heightC / height0)\n                    ax._poslayoutbox.constrain_height_min(\n                        ax._poslayoutbox.height * height0 /\n                        (heightC*1.8))\n            # widths...\n            if not alignwidth and dcols0 == dcolsC:\n                ax._poslayoutbox.constrain_width(\n                        axc._poslayoutbox.width * width0 / widthC)\n                alignwidth = True\n            elif _in_same_row(rownum0min, rownum0max,\n                    rownumCmin, rownumCmax):\n                if width0 > widthC:\n                    ax._poslayoutbox.constrain_width_min(\n                            axc._poslayoutbox.width * width0 / widthC)\n                    axc._poslayoutbox.constrain_width_min(\n                            ax._poslayoutbox.width * widthC /\n                            (width0*1.8))\n                elif width0 < widthC:\n                    axc._poslayoutbox.constrain_width_min(\n                            ax._poslayoutbox.width * widthC / width0)\n                    ax._poslayoutbox.constrain_width_min(\n                            axc._poslayoutbox.width * width0 /\n                            (widthC*1.8))",
                "def _arrange_subplotspecs(gs, hspace=0, wspace=0):\n    \"\"\"Recursively arrange the subplotspec children of the given gridspec.\"\"\"\n    sschildren = []\n    for child in gs.children:\n        if child._is_subplotspec_layoutbox():\n            for child2 in child.children:\n                # check for gridspec children...\n                if child2._is_gridspec_layoutbox():\n                    _arrange_subplotspecs(child2, hspace=hspace, wspace=wspace)\n            sschildren += [child]\n    # now arrange the subplots...\n    for child0 in sschildren:\n        ss0 = child0.artist\n        nrows, ncols = ss0.get_gridspec().get_geometry()\n        rowNum0min, colNum0min = divmod(ss0.num1, ncols)\n        rowNum0max, colNum0max = divmod(ss0.num2, ncols)\n        sschildren = sschildren[1:]\n        for childc in sschildren:\n            ssc = childc.artist\n            rowNumCmin, colNumCmin = divmod(ssc.num1, ncols)\n            rowNumCmax, colNumCmax = divmod(ssc.num2, ncols)\n            # OK, this tells us the relative layout of ax\n            # with axc\n            thepad = wspace / ncols\n            if colNum0max < colNumCmin:\n                layoutbox.hstack([ss0._layoutbox, ssc._layoutbox],\n                        padding=thepad)\n            if colNumCmax < colNum0min:\n                layoutbox.hstack([ssc._layoutbox, ss0._layoutbox],\n                        padding=thepad)\n\n            ####\n            # vertical alignment\n            thepad = hspace / nrows\n            if rowNum0max < rowNumCmin:\n                layoutbox.vstack([ss0._layoutbox,\n                                 ssc._layoutbox],\n                                 padding=thepad)\n            if rowNumCmax < rowNum0min:\n                layoutbox.vstack([ssc._layoutbox,\n                                  ss0._layoutbox],\n                                  padding=thepad)",
                "def layoutcolorbarsingle(ax, cax, shrink, aspect, location, pad=0.05):\n    \"\"\"\n    Do the layout for a colorbar, to not overly pollute colorbar.py\n\n    *pad* is in fraction of the original axis size.\n    \"\"\"\n    axlb = ax._layoutbox\n    axpos = ax._poslayoutbox\n    axsslb = ax.get_subplotspec()._layoutbox\n    lb = layoutbox.LayoutBox(\n            parent=axsslb,\n            name=axsslb.name + '.cbar',\n            artist=cax)\n\n    if location in ('left', 'right'):\n        lbpos = layoutbox.LayoutBox(\n                parent=lb,\n                name=lb.name + '.pos',\n                tightwidth=False,\n                pos=True,\n                subplot=False,\n                artist=cax)\n\n        if location == 'right':\n            # arrange to right of parent axis\n            layoutbox.hstack([axlb, lb], padding=pad * axlb.width,\n                             strength='strong')\n        else:\n            layoutbox.hstack([lb, axlb], padding=pad * axlb.width)\n        # constrain the height and center...\n        layoutbox.match_heights([axpos, lbpos], [1, shrink])\n        layoutbox.align([axpos, lbpos], 'v_center')\n        # set the width of the pos box\n        lbpos.constrain_width(shrink * axpos.height * (1/aspect),\n                              strength='strong')\n    elif location in ('bottom', 'top'):\n        lbpos = layoutbox.LayoutBox(\n                parent=lb,\n                name=lb.name + '.pos',\n                tightheight=True,\n                pos=True,\n                subplot=False,\n                artist=cax)\n\n        if location == 'bottom':\n            layoutbox.vstack([axlb, lb], padding=pad * axlb.height)\n        else:\n            layoutbox.vstack([lb, axlb], padding=pad * axlb.height)\n        # constrain the height and center...\n        layoutbox.match_widths([axpos, lbpos],\n                               [1, shrink], strength='strong')\n        layoutbox.align([axpos, lbpos], 'h_center')\n        # set the height of the pos box\n        lbpos.constrain_height(axpos.width * aspect * shrink,\n                                strength='medium')\n\n    return lb, lbpos",
                "def _getmaxminrowcolumn(axs):\n    # helper to get the min/max rows and columns of a list of axes.\n    maxrow = -100000\n    minrow = 1000000\n    maxax = None\n    minax = None\n    maxcol = -100000\n    mincol = 1000000\n    maxax_col = None\n    minax_col = None\n\n    for ax in axs:\n        subspec = ax.get_subplotspec()\n        nrows, ncols, row_start, row_stop, col_start, col_stop = \\\n            subspec.get_rows_columns()\n        if row_stop > maxrow:\n            maxrow = row_stop\n            maxax = ax\n        if row_start < minrow:\n            minrow = row_start\n            minax = ax\n        if col_stop > maxcol:\n            maxcol = col_stop\n            maxax_col = ax\n        if col_start < mincol:\n            mincol = col_start\n            minax_col = ax\n    return (minrow, maxrow, minax, maxax, mincol, maxcol, minax_col, maxax_col)",
                "def layoutcolorbargridspec(parents, cax, shrink, aspect, location, pad=0.05):\n    \"\"\"\n    Do the layout for a colorbar, to not overly pollute colorbar.py\n\n    *pad* is in fraction of the original axis size.\n    \"\"\"\n\n    gs = parents[0].get_subplotspec().get_gridspec()\n    # parent layout box....\n    gslb = gs._layoutbox\n\n    lb = layoutbox.LayoutBox(parent=gslb.parent,\n                             name=gslb.parent.name + '.cbar',\n                             artist=cax)\n    # figure out the row and column extent of the parents.\n    (minrow, maxrow, minax_row, maxax_row,\n     mincol, maxcol, minax_col, maxax_col) = _getmaxminrowcolumn(parents)\n\n    if location in ('left', 'right'):\n        lbpos = layoutbox.LayoutBox(\n                parent=lb,\n                name=lb.name + '.pos',\n                tightwidth=False,\n                pos=True,\n                subplot=False,\n                artist=cax)\n        for ax in parents:\n            if location == 'right':\n                order = [ax._layoutbox, lb]\n            else:\n                order = [lb, ax._layoutbox]\n            layoutbox.hstack(order, padding=pad * gslb.width,\n                         strength='strong')\n        # constrain the height and center...\n        # This isn't quite right.  We'd like the colorbar\n        # pos to line up w/ the axes poss, not the size of the\n        # gs.\n\n        # Horizontal Layout: need to check all the axes in this gridspec\n        for ch in gslb.children:\n            subspec = ch.artist\n            nrows, ncols, row_start, row_stop, col_start, col_stop = \\\n                subspec.get_rows_columns()\n            if location == 'right':\n                if col_stop <= maxcol:\n                    order = [subspec._layoutbox, lb]\n                    # arrange to right of the parents\n                if col_start > maxcol:\n                    order = [lb, subspec._layoutbox]\n            elif location == 'left':\n                if col_start >= mincol:\n                    order = [lb, subspec._layoutbox]\n                if col_stop < mincol:\n                    order = [subspec._layoutbox, lb]\n            layoutbox.hstack(order, padding=pad * gslb.width,\n                             strength='strong')\n\n        # Vertical layout:\n        maxposlb = minax_row._poslayoutbox\n        minposlb = maxax_row._poslayoutbox\n        # now we want the height of the colorbar pos to be\n        # set by the top and bottom of the min/max axes...\n        # bottom            top\n        #     b             t\n        # h = (top-bottom)*shrink\n        # b = bottom + (top-bottom - h) / 2.\n        lbpos.constrain_height(\n                (maxposlb.top - minposlb.bottom) *\n                shrink, strength='strong')\n        lbpos.constrain_bottom(\n                (maxposlb.top - minposlb.bottom) *\n                (1 - shrink)/2 + minposlb.bottom,\n                strength='strong')\n\n        # set the width of the pos box\n        lbpos.constrain_width(lbpos.height * (shrink / aspect),\n                              strength='strong')\n    elif location in ('bottom', 'top'):\n        lbpos = layoutbox.LayoutBox(\n                parent=lb,\n                name=lb.name + '.pos',\n                tightheight=True,\n                pos=True,\n                subplot=False,\n                artist=cax)\n\n        for ax in parents:\n            if location == 'bottom':\n                order = [ax._layoutbox, lb]\n            else:\n                order = [lb, ax._layoutbox]\n            layoutbox.vstack(order, padding=pad * gslb.width,\n                         strength='strong')\n\n        # Vertical Layout: need to check all the axes in this gridspec\n        for ch in gslb.children:\n            subspec = ch.artist\n            nrows, ncols, row_start, row_stop, col_start, col_stop = \\\n                subspec.get_rows_columns()\n            if location == 'bottom':\n                if row_stop <= minrow:\n                    order = [subspec._layoutbox, lb]\n                if row_start > maxrow:\n                    order = [lb, subspec._layoutbox]\n            elif location == 'top':\n                if row_stop < minrow:\n                    order = [subspec._layoutbox, lb]\n                if row_start >= maxrow:\n                    order = [lb, subspec._layoutbox]\n            layoutbox.vstack(order, padding=pad * gslb.width,\n                             strength='strong')\n\n        # Do horizontal layout...\n        maxposlb = maxax_col._poslayoutbox\n        minposlb = minax_col._poslayoutbox\n        lbpos.constrain_width((maxposlb.right - minposlb.left) *\n                              shrink)\n        lbpos.constrain_left(\n                (maxposlb.right - minposlb.left) *\n                (1-shrink)/2 + minposlb.left)\n        # set the height of the pos box\n        lbpos.constrain_height(lbpos.width * shrink * aspect,\n                               strength='medium')\n\n    return lb, lbpos"
            ],
            "inscope_function_signatures": [
                "_in_same_column(colnum0min, colnum0max, colnumCmin, colnumCmax)",
                "_in_same_row(rownum0min, rownum0max, rownumCmin, rownumCmax)",
                "_axes_all_finite_sized(fig)",
                "do_constrained_layout(fig, renderer, h_pad, w_pad, hspace=None, wspace=None)",
                "_make_ghost_gridspec_slots(fig, gs)",
                "_make_layout_margins(ax, renderer, h_pad, w_pad)",
                "_align_spines(fig, gs)",
                "_arrange_subplotspecs(gs, hspace=0, wspace=0)",
                "layoutcolorbarsingle(ax, cax, shrink, aspect, location, pad=0.05)",
                "_getmaxminrowcolumn(axs)",
                "layoutcolorbargridspec(parents, cax, shrink, aspect, location, pad=0.05)"
            ],
            "variables_in_file": {
                "_log": [
                    164,
                    297,
                    298,
                    299,
                    300,
                    301,
                    397,
                    404,
                    55
                ],
                "logging.getLogger": [
                    55
                ],
                "logging": [
                    55
                ],
                "__name__": [
                    55
                ],
                "colnumCmin": [
                    59,
                    428,
                    436,
                    374,
                    379,
                    60
                ],
                "colnum0min": [
                    59,
                    363,
                    429,
                    435,
                    379
                ],
                "colnumCmax": [
                    387,
                    428,
                    436,
                    375,
                    59,
                    60
                ],
                "colnum0max": [
                    387,
                    364,
                    429,
                    435,
                    60
                ],
                "rownumCmin": [
                    64,
                    65,
                    457,
                    426,
                    395,
                    374
                ],
                "rownum0min": [
                    64,
                    456,
                    363,
                    395,
                    427
                ],
                "rownumCmax": [
                    64,
                    65,
                    457,
                    426,
                    402,
                    375
                ],
                "rownum0max": [
                    65,
                    456,
                    427,
                    364,
                    402
                ],
                "ax": [
                    522,
                    523,
                    524,
                    70,
                    71,
                    72,
                    586,
                    587,
                    592,
                    595,
                    598,
                    601,
                    631,
                    633,
                    635,
                    143,
                    144,
                    145,
                    163,
                    164,
                    165,
                    168,
                    691,
                    693,
                    695,
                    214,
                    215,
                    216,
                    221,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    256,
                    257,
                    258,
                    259,
                    260,
                    269,
                    271,
                    272,
                    284,
                    287,
                    290,
                    292,
                    294,
                    296,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    314,
                    315,
                    336,
                    337,
                    338,
                    339,
                    340,
                    348,
                    349,
                    357,
                    382,
                    389,
                    398,
                    405,
                    432,
                    438,
                    443,
                    447,
                    448,
                    449,
                    453,
                    459,
                    462,
                    466,
                    467
                ],
                "fig.axes": [
                    163,
                    70,
                    143,
                    336,
                    244,
                    214
                ],
                "fig": [
                    256,
                    139,
                    269,
                    270,
                    143,
                    153,
                    156,
                    163,
                    171,
                    306,
                    191,
                    197,
                    70,
                    206,
                    208,
                    209,
                    336,
                    212,
                    214,
                    244
                ],
                "ax._layoutbox": [
                    164,
                    165,
                    71,
                    695,
                    522,
                    338,
                    309,
                    246,
                    215,
                    310,
                    633,
                    693,
                    635
                ],
                "newpos": [
                    72,
                    73,
                    216,
                    221,
                    223
                ],
                "ax._poslayoutbox.get_rect": [
                    72,
                    216
                ],
                "ax._poslayoutbox": [
                    389,
                    523,
                    398,
                    405,
                    284,
                    287,
                    290,
                    292,
                    294,
                    296,
                    432,
                    307,
                    308,
                    438,
                    311,
                    312,
                    314,
                    315,
                    443,
                    447,
                    448,
                    449,
                    453,
                    72,
                    459,
                    462,
                    466,
                    467,
                    216,
                    382
                ],
                "invTransFig": [
                    176,
                    139,
                    276,
                    270
                ],
                "transform_bbox": [
                    139,
                    270
                ],
                "fig.transFigure.inverted": [
                    139,
                    270
                ],
                "fig.transFigure": [
                    139,
                    270
                ],
                "gss": [
                    205,
                    142,
                    147,
                    148,
                    154
                ],
                "set": [
                    142
                ],
                "hasattr": [
                    144,
                    337,
                    245
                ],
                "gs": [
                    256,
                    612,
                    326,
                    327,
                    328,
                    614,
                    205,
                    206,
                    145,
                    146,
                    147,
                    241,
                    339,
                    247,
                    154,
                    475,
                    156
                ],
                "get_gridspec": [
                    145,
                    339,
                    612,
                    247
                ],
                "ax.get_subplotspec": [
                    587,
                    524,
                    145,
                    339,
                    247,
                    250,
                    349
                ],
                "gs._layoutbox": [
                    146,
                    614
                ],
                "gss.add": [
                    147
                ],
                "len": [
                    148,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    372
                ],
                "cbook._warn_external": [
                    229,
                    149
                ],
                "cbook": [
                    229,
                    149
                ],
                "fig._layoutbox.constrained_layout_called": [
                    208,
                    153,
                    306,
                    191
                ],
                "fig._layoutbox": [
                    197,
                    208,
                    209,
                    306,
                    153,
                    191
                ],
                "_make_ghost_gridspec_slots": [
                    156
                ],
                "nnn": [
                    158
                ],
                "range": [
                    372,
                    158
                ],
                "_log.debug": [
                    164,
                    297,
                    298,
                    299,
                    300,
                    301,
                    397,
                    404
                ],
                "_make_layout_margins": [
                    168
                ],
                "renderer": [
                    168,
                    177,
                    272
                ],
                "h_pad": [
                    168,
                    224,
                    181,
                    286
                ],
                "w_pad": [
                    168,
                    289,
                    298,
                    297
                ],
                "suptitle": [
                    224,
                    226,
                    227,
                    171,
                    172,
                    173,
                    174,
                    177,
                    181,
                    223
                ],
                "fig._suptitle": [
                    171
                ],
                "do_suptitle": [
                    172,
                    222,
                    175
                ],
                "suptitle._layoutbox": [
                    226,
                    227,
                    173,
                    181,
                    223
                ],
                "suptitle.get_in_layout": [
                    174
                ],
                "bbox": [
                    290,
                    292,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    176,
                    178,
                    274,
                    276,
                    279
                ],
                "suptitle.get_window_extent": [
                    177
                ],
                "height": [
                    354,
                    365,
                    178,
                    179,
                    181,
                    376,
                    346
                ],
                "bbox.y1": [
                    296,
                    178
                ],
                "bbox.y0": [
                    178,
                    299,
                    300,
                    295
                ],
                "np.isfinite": [
                    179,
                    279
                ],
                "np": [
                    352,
                    354,
                    330,
                    332,
                    242,
                    179,
                    341,
                    342,
                    279,
                    344,
                    345,
                    346,
                    343
                ],
                "suptitle._layoutbox.edit_height": [
                    227,
                    181
                ],
                "figlb": [
                    197,
                    198
                ],
                "child": [
                    481,
                    198,
                    199,
                    203,
                    475,
                    476,
                    477
                ],
                "figlb.children": [
                    198
                ],
                "child._is_gridspec_layoutbox": [
                    199
                ],
                "_arrange_subplotspecs": [
                    480,
                    203
                ],
                "hspace": [
                    480,
                    505,
                    203
                ],
                "wspace": [
                    480,
                    203,
                    495
                ],
                "_align_spines": [
                    206
                ],
                "fig._layoutbox.update_variables": [
                    209
                ],
                "_axes_all_finite_sized": [
                    212
                ],
                "ax._set_position": [
                    221
                ],
                "suptitle._layoutbox.get_rect": [
                    223
                ],
                "suptitle.set_y": [
                    224
                ],
                "nrows": [
                    485,
                    326,
                    646,
                    332,
                    588,
                    241,
                    242,
                    505,
                    702
                ],
                "ncols": [
                    485,
                    326,
                    486,
                    487,
                    646,
                    330,
                    491,
                    492,
                    588,
                    702,
                    495,
                    241,
                    242,
                    350,
                    351
                ],
                "gs.get_geometry": [
                    241,
                    326
                ],
                "hassubplotspec": [
                    242,
                    251,
                    252
                ],
                "np.zeros": [
                    242,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346
                ],
                "bool": [
                    242
                ],
                "axs": [
                    344,
                    357,
                    345,
                    586,
                    335,
                    243,
                    340,
                    341,
                    342,
                    343,
                    248,
                    249,
                    346,
                    372,
                    348,
                    373
                ],
                "ss0": [
                    512,
                    484,
                    485,
                    486,
                    487,
                    497,
                    500,
                    507,
                    250,
                    251,
                    349,
                    350,
                    351
                ],
                "ss0.num1": [
                    251,
                    350,
                    486
                ],
                "ss0.num2": [
                    487,
                    251,
                    351
                ],
                "nn": [
                    256,
                    357,
                    363,
                    364,
                    365,
                    372,
                    252
                ],
                "hss": [
                    252,
                    253
                ],
                "enumerate": [
                    252,
                    357,
                    348
                ],
                "fig.add_subplot": [
                    256
                ],
                "ax.set_frame_on": [
                    257
                ],
                "ax.set_xticks": [
                    258
                ],
                "ax.set_yticks": [
                    259
                ],
                "ax.set_facecolor": [
                    260
                ],
                "ax.figure": [
                    269
                ],
                "pos": [
                    291,
                    293,
                    295,
                    296,
                    297,
                    298,
                    299,
                    301,
                    271,
                    274
                ],
                "ax.get_position": [
                    271
                ],
                "tightbbox": [
                    272,
                    273,
                    276
                ],
                "ax.get_tightbbox": [
                    272
                ],
                "bbox.width": [
                    279
                ],
                "bbox.height": [
                    279
                ],
                "h_padt": [
                    295,
                    296,
                    299,
                    284,
                    285,
                    286
                ],
                "ax._poslayoutbox.h_pad": [
                    284
                ],
                "w_padt": [
                    288,
                    289,
                    291,
                    293,
                    287
                ],
                "ax._poslayoutbox.w_pad": [
                    287
                ],
                "ax._poslayoutbox.edit_left_margin_min": [
                    290
                ],
                "bbox.x0": [
                    297,
                    290
                ],
                "pos.x0": [
                    297,
                    291
                ],
                "ax._poslayoutbox.edit_right_margin_min": [
                    292
                ],
                "bbox.x1": [
                    298,
                    292
                ],
                "pos.x1": [
                    298,
                    293
                ],
                "ax._poslayoutbox.edit_bottom_margin_min": [
                    294
                ],
                "pos.y0": [
                    299,
                    301,
                    295
                ],
                "ax._poslayoutbox.edit_top_margin_min": [
                    296
                ],
                "pos.y1": [
                    296
                ],
                "ax._poslayoutbox.constrain_height_min": [
                    448,
                    307,
                    438
                ],
                "ax._poslayoutbox.constrain_width_min": [
                    459,
                    308,
                    467
                ],
                "ax._layoutbox.constrain_height_min": [
                    309
                ],
                "ax._layoutbox.constrain_width_min": [
                    310
                ],
                "ax._poslayoutbox.constrain_top_margin": [
                    311
                ],
                "ax._poslayoutbox.constrain_bottom_margin": [
                    312
                ],
                "ax._poslayoutbox.constrain_right_margin": [
                    314
                ],
                "ax._poslayoutbox.constrain_left_margin": [
                    315
                ],
                "width_ratios": [
                    329,
                    330,
                    353,
                    327
                ],
                "gs.get_width_ratios": [
                    327
                ],
                "height_ratios": [
                    328,
                    355,
                    331,
                    332
                ],
                "gs.get_height_ratios": [
                    328
                ],
                "np.ones": [
                    330,
                    332
                ],
                "rownummin": [
                    355,
                    363,
                    341,
                    374,
                    350
                ],
                "np.int8": [
                    344,
                    341,
                    342,
                    343
                ],
                "rownummax": [
                    355,
                    364,
                    342,
                    375,
                    351
                ],
                "colnummin": [
                    353,
                    363,
                    374,
                    343,
                    350
                ],
                "colnummax": [
                    353,
                    364,
                    375,
                    344,
                    351
                ],
                "width": [
                    352,
                    345,
                    376,
                    365
                ],
                "n": [
                    352,
                    353,
                    354,
                    355,
                    348,
                    350,
                    351
                ],
                "divmod": [
                    486,
                    487,
                    491,
                    492,
                    350,
                    351
                ],
                "np.sum": [
                    352,
                    354
                ],
                "width0": [
                    454,
                    458,
                    460,
                    365,
                    463,
                    464,
                    466,
                    468
                ],
                "height0": [
                    449,
                    365,
                    433,
                    437,
                    439,
                    444,
                    445,
                    447
                ],
                "alignleft": [
                    385,
                    379,
                    366
                ],
                "alignright": [
                    392,
                    387,
                    367
                ],
                "alignbot": [
                    368,
                    402,
                    407
                ],
                "aligntop": [
                    400,
                    369,
                    395
                ],
                "alignheight": [
                    434,
                    370,
                    431
                ],
                "alignwidth": [
                    371,
                    452,
                    455
                ],
                "mm": [
                    372,
                    373,
                    374,
                    375,
                    376
                ],
                "axc": [
                    390,
                    454,
                    460,
                    461,
                    398,
                    433,
                    465,
                    468,
                    405,
                    373,
                    439,
                    442,
                    446,
                    383
                ],
                "widthC": [
                    454,
                    458,
                    460,
                    462,
                    464,
                    466,
                    469,
                    376
                ],
                "heightC": [
                    450,
                    433,
                    437,
                    439,
                    376,
                    443,
                    445,
                    447
                ],
                "layoutbox.align": [
                    547,
                    389,
                    398,
                    405,
                    567,
                    382
                ],
                "layoutbox": [
                    389,
                    525,
                    398,
                    531,
                    659,
                    405,
                    541,
                    544,
                    546,
                    547,
                    552,
                    683,
                    561,
                    563,
                    565,
                    567,
                    696,
                    714,
                    616,
                    624,
                    497,
                    500,
                    507,
                    636,
                    382,
                    511
                ],
                "axc._poslayoutbox": [
                    390,
                    454,
                    460,
                    461,
                    398,
                    433,
                    465,
                    468,
                    405,
                    439,
                    442,
                    446,
                    383
                ],
                "drowsC": [
                    426,
                    431
                ],
                "drows0": [
                    427,
                    431
                ],
                "dcolsC": [
                    452,
                    428
                ],
                "dcols0": [
                    452,
                    429
                ],
                "ax._poslayoutbox.constrain_height": [
                    432
                ],
                "axc._poslayoutbox.height": [
                    433,
                    439
                ],
                "_in_same_column": [
                    435
                ],
                "axc._poslayoutbox.constrain_height_min": [
                    442,
                    446
                ],
                "ax._poslayoutbox.height": [
                    449,
                    443,
                    447
                ],
                "ax._poslayoutbox.constrain_width": [
                    453
                ],
                "axc._poslayoutbox.width": [
                    468,
                    460,
                    454
                ],
                "_in_same_row": [
                    456
                ],
                "axc._poslayoutbox.constrain_width_min": [
                    465,
                    461
                ],
                "ax._poslayoutbox.width": [
                    466,
                    462
                ],
                "sschildren": [
                    481,
                    483,
                    488,
                    489,
                    474
                ],
                "gs.children": [
                    475
                ],
                "child._is_subplotspec_layoutbox": [
                    476
                ],
                "child2": [
                    480,
                    477,
                    479
                ],
                "child.children": [
                    477
                ],
                "child2._is_gridspec_layoutbox": [
                    479
                ],
                "child0": [
                    483,
                    484
                ],
                "child0.artist": [
                    484
                ],
                "get_geometry": [
                    485
                ],
                "ss0.get_gridspec": [
                    485
                ],
                "rowNum0min": [
                    486,
                    510
                ],
                "colNum0min": [
                    499,
                    486
                ],
                "rowNum0max": [
                    506,
                    487
                ],
                "colNum0max": [
                    496,
                    487
                ],
                "childc": [
                    489,
                    490
                ],
                "ssc": [
                    490,
                    491,
                    492,
                    497,
                    500,
                    508,
                    511
                ],
                "childc.artist": [
                    490
                ],
                "rowNumCmin": [
                    506,
                    491
                ],
                "colNumCmin": [
                    496,
                    491
                ],
                "ssc.num1": [
                    491
                ],
                "rowNumCmax": [
                    492,
                    510
                ],
                "colNumCmax": [
                    499,
                    492
                ],
                "ssc.num2": [
                    492
                ],
                "thepad": [
                    513,
                    495,
                    498,
                    501,
                    505,
                    509
                ],
                "layoutbox.hstack": [
                    544,
                    497,
                    659,
                    500,
                    636,
                    541
                ],
                "ss0._layoutbox": [
                    512,
                    497,
                    507,
                    500
                ],
                "ssc._layoutbox": [
                    497,
                    500,
                    508,
                    511
                ],
                "layoutbox.vstack": [
                    714,
                    561,
                    563,
                    696,
                    507,
                    511
                ],
                "axlb": [
                    544,
                    522,
                    561,
                    563,
                    541
                ],
                "axpos": [
                    546,
                    547,
                    549,
                    523,
                    565,
                    567,
                    569
                ],
                "axsslb": [
                    524,
                    526,
                    527
                ],
                "_layoutbox": [
                    524
                ],
                "lb": [
                    650,
                    525,
                    653,
                    656,
                    658,
                    532,
                    533,
                    541,
                    544,
                    553,
                    554,
                    684,
                    685,
                    561,
                    563,
                    693,
                    695,
                    572,
                    706,
                    708,
                    711,
                    713,
                    729,
                    616,
                    625,
                    626,
                    633,
                    635
                ],
                "layoutbox.LayoutBox": [
                    552,
                    616,
                    683,
                    525,
                    624,
                    531
                ],
                "axsslb.name": [
                    527
                ],
                "cax": [
                    618,
                    558,
                    528,
                    689,
                    630,
                    537
                ],
                "location": [
                    704,
                    709,
                    551,
                    648,
                    682,
                    654,
                    623,
                    560,
                    530,
                    692,
                    632,
                    539
                ],
                "lbpos": [
                    546,
                    547,
                    674,
                    549,
                    552,
                    680,
                    683,
                    624,
                    720,
                    722,
                    531,
                    729,
                    565,
                    726,
                    567,
                    569,
                    572,
                    671
                ],
                "lb.name": [
                    554,
                    533,
                    626,
                    685
                ],
                "pad": [
                    544,
                    714,
                    561,
                    563,
                    659,
                    696,
                    636,
                    541
                ],
                "axlb.width": [
                    544,
                    541
                ],
                "layoutbox.match_heights": [
                    546
                ],
                "shrink": [
                    673,
                    546,
                    676,
                    549,
                    680,
                    721,
                    724,
                    566,
                    726,
                    569
                ],
                "lbpos.constrain_width": [
                    680,
                    549,
                    720
                ],
                "axpos.height": [
                    549
                ],
                "aspect": [
                    680,
                    569,
                    549,
                    726
                ],
                "axlb.height": [
                    561,
                    563
                ],
                "layoutbox.match_widths": [
                    565
                ],
                "lbpos.constrain_height": [
                    569,
                    726,
                    671
                ],
                "axpos.width": [
                    569
                ],
                "maxrow": [
                    577,
                    707,
                    712,
                    620,
                    590,
                    591,
                    602
                ],
                "minrow": [
                    705,
                    578,
                    710,
                    620,
                    593,
                    594,
                    602
                ],
                "maxax": [
                    592,
                    602,
                    579
                ],
                "minax": [
                    602,
                    595,
                    580
                ],
                "maxcol": [
                    581,
                    649,
                    652,
                    621,
                    596,
                    597,
                    602
                ],
                "mincol": [
                    582,
                    621,
                    655,
                    657,
                    599,
                    600,
                    602
                ],
                "maxax_col": [
                    583,
                    621,
                    718,
                    598,
                    602
                ],
                "minax_col": [
                    584,
                    621,
                    719,
                    601,
                    602
                ],
                "subspec": [
                    706,
                    708,
                    645,
                    647,
                    711,
                    713,
                    650,
                    587,
                    589,
                    653,
                    656,
                    658,
                    701,
                    703
                ],
                "row_start": [
                    707,
                    646,
                    712,
                    588,
                    593,
                    594,
                    702
                ],
                "row_stop": [
                    705,
                    646,
                    710,
                    588,
                    590,
                    591,
                    702
                ],
                "col_start": [
                    646,
                    652,
                    588,
                    655,
                    599,
                    600,
                    702
                ],
                "col_stop": [
                    646,
                    649,
                    588,
                    657,
                    596,
                    597,
                    702
                ],
                "subspec.get_rows_columns": [
                    703,
                    589,
                    647
                ],
                "get_subplotspec": [
                    612
                ],
                "parents": [
                    691,
                    612,
                    621,
                    631
                ],
                "gslb": [
                    700,
                    644,
                    614,
                    616,
                    617,
                    714,
                    659,
                    696,
                    636
                ],
                "gslb.parent": [
                    616,
                    617
                ],
                "gslb.parent.name": [
                    617
                ],
                "minax_row": [
                    620,
                    663
                ],
                "maxax_row": [
                    664,
                    620
                ],
                "_getmaxminrowcolumn": [
                    621
                ],
                "order": [
                    706,
                    708,
                    711,
                    713,
                    650,
                    714,
                    653,
                    656,
                    658,
                    659,
                    693,
                    695,
                    696,
                    633,
                    635,
                    636
                ],
                "gslb.width": [
                    696,
                    714,
                    659,
                    636
                ],
                "ch": [
                    700,
                    644,
                    645,
                    701
                ],
                "gslb.children": [
                    700,
                    644
                ],
                "ch.artist": [
                    645,
                    701
                ],
                "subspec._layoutbox": [
                    706,
                    708,
                    711,
                    713,
                    650,
                    653,
                    656,
                    658
                ],
                "maxposlb": [
                    672,
                    675,
                    718,
                    720,
                    723,
                    663
                ],
                "minax_row._poslayoutbox": [
                    663
                ],
                "minposlb": [
                    672,
                    675,
                    676,
                    719,
                    720,
                    723,
                    724,
                    664
                ],
                "maxax_row._poslayoutbox": [
                    664
                ],
                "maxposlb.top": [
                    672,
                    675
                ],
                "minposlb.bottom": [
                    672,
                    675,
                    676
                ],
                "lbpos.constrain_bottom": [
                    674
                ],
                "lbpos.height": [
                    680
                ],
                "maxax_col._poslayoutbox": [
                    718
                ],
                "minax_col._poslayoutbox": [
                    719
                ],
                "maxposlb.right": [
                    720,
                    723
                ],
                "minposlb.left": [
                    720,
                    723,
                    724
                ],
                "lbpos.constrain_left": [
                    722
                ],
                "lbpos.width": [
                    726
                ]
            },
            "filtered_variables_in_file": {
                "_log": [
                    164,
                    297,
                    298,
                    299,
                    300,
                    301,
                    397,
                    404,
                    55
                ],
                "logging.getLogger": [
                    55
                ],
                "logging": [
                    55
                ],
                "colnumCmin": [
                    59,
                    428,
                    436,
                    374,
                    379,
                    60
                ],
                "colnum0min": [
                    59,
                    363,
                    429,
                    435,
                    379
                ],
                "colnumCmax": [
                    387,
                    428,
                    436,
                    375,
                    59,
                    60
                ],
                "colnum0max": [
                    387,
                    364,
                    429,
                    435,
                    60
                ],
                "rownumCmin": [
                    64,
                    65,
                    457,
                    426,
                    395,
                    374
                ],
                "rownum0min": [
                    64,
                    456,
                    363,
                    395,
                    427
                ],
                "rownumCmax": [
                    64,
                    65,
                    457,
                    426,
                    402,
                    375
                ],
                "rownum0max": [
                    65,
                    456,
                    427,
                    364,
                    402
                ],
                "ax": [
                    522,
                    523,
                    524,
                    70,
                    71,
                    72,
                    586,
                    587,
                    592,
                    595,
                    598,
                    601,
                    631,
                    633,
                    635,
                    143,
                    144,
                    145,
                    163,
                    164,
                    165,
                    168,
                    691,
                    693,
                    695,
                    214,
                    215,
                    216,
                    221,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    256,
                    257,
                    258,
                    259,
                    260,
                    269,
                    271,
                    272,
                    284,
                    287,
                    290,
                    292,
                    294,
                    296,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    314,
                    315,
                    336,
                    337,
                    338,
                    339,
                    340,
                    348,
                    349,
                    357,
                    382,
                    389,
                    398,
                    405,
                    432,
                    438,
                    443,
                    447,
                    448,
                    449,
                    453,
                    459,
                    462,
                    466,
                    467
                ],
                "fig.axes": [
                    163,
                    70,
                    143,
                    336,
                    244,
                    214
                ],
                "fig": [
                    256,
                    139,
                    269,
                    270,
                    143,
                    153,
                    156,
                    163,
                    171,
                    306,
                    191,
                    197,
                    70,
                    206,
                    208,
                    209,
                    336,
                    212,
                    214,
                    244
                ],
                "ax._layoutbox": [
                    164,
                    165,
                    71,
                    695,
                    522,
                    338,
                    309,
                    246,
                    215,
                    310,
                    633,
                    693,
                    635
                ],
                "newpos": [
                    72,
                    73,
                    216,
                    221,
                    223
                ],
                "ax._poslayoutbox.get_rect": [
                    72,
                    216
                ],
                "ax._poslayoutbox": [
                    389,
                    523,
                    398,
                    405,
                    284,
                    287,
                    290,
                    292,
                    294,
                    296,
                    432,
                    307,
                    308,
                    438,
                    311,
                    312,
                    314,
                    315,
                    443,
                    447,
                    448,
                    449,
                    453,
                    72,
                    459,
                    462,
                    466,
                    467,
                    216,
                    382
                ],
                "invTransFig": [
                    176,
                    139,
                    276,
                    270
                ],
                "transform_bbox": [
                    139,
                    270
                ],
                "fig.transFigure.inverted": [
                    139,
                    270
                ],
                "fig.transFigure": [
                    139,
                    270
                ],
                "gss": [
                    205,
                    142,
                    147,
                    148,
                    154
                ],
                "gs": [
                    256,
                    612,
                    326,
                    327,
                    328,
                    614,
                    205,
                    206,
                    145,
                    146,
                    147,
                    241,
                    339,
                    247,
                    154,
                    475,
                    156
                ],
                "get_gridspec": [
                    145,
                    339,
                    612,
                    247
                ],
                "ax.get_subplotspec": [
                    587,
                    524,
                    145,
                    339,
                    247,
                    250,
                    349
                ],
                "gs._layoutbox": [
                    146,
                    614
                ],
                "gss.add": [
                    147
                ],
                "cbook._warn_external": [
                    229,
                    149
                ],
                "cbook": [
                    229,
                    149
                ],
                "fig._layoutbox.constrained_layout_called": [
                    208,
                    153,
                    306,
                    191
                ],
                "fig._layoutbox": [
                    197,
                    208,
                    209,
                    306,
                    153,
                    191
                ],
                "_make_ghost_gridspec_slots": [
                    156
                ],
                "nnn": [
                    158
                ],
                "_log.debug": [
                    164,
                    297,
                    298,
                    299,
                    300,
                    301,
                    397,
                    404
                ],
                "_make_layout_margins": [
                    168
                ],
                "renderer": [
                    168,
                    177,
                    272
                ],
                "h_pad": [
                    168,
                    224,
                    181,
                    286
                ],
                "w_pad": [
                    168,
                    289,
                    298,
                    297
                ],
                "suptitle": [
                    224,
                    226,
                    227,
                    171,
                    172,
                    173,
                    174,
                    177,
                    181,
                    223
                ],
                "fig._suptitle": [
                    171
                ],
                "do_suptitle": [
                    172,
                    222,
                    175
                ],
                "suptitle._layoutbox": [
                    226,
                    227,
                    173,
                    181,
                    223
                ],
                "suptitle.get_in_layout": [
                    174
                ],
                "bbox": [
                    290,
                    292,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    176,
                    178,
                    274,
                    276,
                    279
                ],
                "suptitle.get_window_extent": [
                    177
                ],
                "height": [
                    354,
                    365,
                    178,
                    179,
                    181,
                    376,
                    346
                ],
                "bbox.y1": [
                    296,
                    178
                ],
                "bbox.y0": [
                    178,
                    299,
                    300,
                    295
                ],
                "np.isfinite": [
                    179,
                    279
                ],
                "np": [
                    352,
                    354,
                    330,
                    332,
                    242,
                    179,
                    341,
                    342,
                    279,
                    344,
                    345,
                    346,
                    343
                ],
                "suptitle._layoutbox.edit_height": [
                    227,
                    181
                ],
                "figlb": [
                    197,
                    198
                ],
                "child": [
                    481,
                    198,
                    199,
                    203,
                    475,
                    476,
                    477
                ],
                "figlb.children": [
                    198
                ],
                "child._is_gridspec_layoutbox": [
                    199
                ],
                "_arrange_subplotspecs": [
                    480,
                    203
                ],
                "hspace": [
                    480,
                    505,
                    203
                ],
                "wspace": [
                    480,
                    203,
                    495
                ],
                "_align_spines": [
                    206
                ],
                "fig._layoutbox.update_variables": [
                    209
                ],
                "_axes_all_finite_sized": [
                    212
                ],
                "ax._set_position": [
                    221
                ],
                "suptitle._layoutbox.get_rect": [
                    223
                ],
                "suptitle.set_y": [
                    224
                ],
                "nrows": [
                    485,
                    326,
                    646,
                    332,
                    588,
                    241,
                    242,
                    505,
                    702
                ],
                "ncols": [
                    485,
                    326,
                    486,
                    487,
                    646,
                    330,
                    491,
                    492,
                    588,
                    702,
                    495,
                    241,
                    242,
                    350,
                    351
                ],
                "gs.get_geometry": [
                    241,
                    326
                ],
                "hassubplotspec": [
                    242,
                    251,
                    252
                ],
                "np.zeros": [
                    242,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346
                ],
                "axs": [
                    344,
                    357,
                    345,
                    586,
                    335,
                    243,
                    340,
                    341,
                    342,
                    343,
                    248,
                    249,
                    346,
                    372,
                    348,
                    373
                ],
                "ss0": [
                    512,
                    484,
                    485,
                    486,
                    487,
                    497,
                    500,
                    507,
                    250,
                    251,
                    349,
                    350,
                    351
                ],
                "ss0.num1": [
                    251,
                    350,
                    486
                ],
                "ss0.num2": [
                    487,
                    251,
                    351
                ],
                "nn": [
                    256,
                    357,
                    363,
                    364,
                    365,
                    372,
                    252
                ],
                "hss": [
                    252,
                    253
                ],
                "fig.add_subplot": [
                    256
                ],
                "ax.set_frame_on": [
                    257
                ],
                "ax.set_xticks": [
                    258
                ],
                "ax.set_yticks": [
                    259
                ],
                "ax.set_facecolor": [
                    260
                ],
                "ax.figure": [
                    269
                ],
                "pos": [
                    291,
                    293,
                    295,
                    296,
                    297,
                    298,
                    299,
                    301,
                    271,
                    274
                ],
                "ax.get_position": [
                    271
                ],
                "tightbbox": [
                    272,
                    273,
                    276
                ],
                "ax.get_tightbbox": [
                    272
                ],
                "bbox.width": [
                    279
                ],
                "bbox.height": [
                    279
                ],
                "h_padt": [
                    295,
                    296,
                    299,
                    284,
                    285,
                    286
                ],
                "ax._poslayoutbox.h_pad": [
                    284
                ],
                "w_padt": [
                    288,
                    289,
                    291,
                    293,
                    287
                ],
                "ax._poslayoutbox.w_pad": [
                    287
                ],
                "ax._poslayoutbox.edit_left_margin_min": [
                    290
                ],
                "bbox.x0": [
                    297,
                    290
                ],
                "pos.x0": [
                    297,
                    291
                ],
                "ax._poslayoutbox.edit_right_margin_min": [
                    292
                ],
                "bbox.x1": [
                    298,
                    292
                ],
                "pos.x1": [
                    298,
                    293
                ],
                "ax._poslayoutbox.edit_bottom_margin_min": [
                    294
                ],
                "pos.y0": [
                    299,
                    301,
                    295
                ],
                "ax._poslayoutbox.edit_top_margin_min": [
                    296
                ],
                "pos.y1": [
                    296
                ],
                "ax._poslayoutbox.constrain_height_min": [
                    448,
                    307,
                    438
                ],
                "ax._poslayoutbox.constrain_width_min": [
                    459,
                    308,
                    467
                ],
                "ax._layoutbox.constrain_height_min": [
                    309
                ],
                "ax._layoutbox.constrain_width_min": [
                    310
                ],
                "ax._poslayoutbox.constrain_top_margin": [
                    311
                ],
                "ax._poslayoutbox.constrain_bottom_margin": [
                    312
                ],
                "ax._poslayoutbox.constrain_right_margin": [
                    314
                ],
                "ax._poslayoutbox.constrain_left_margin": [
                    315
                ],
                "width_ratios": [
                    329,
                    330,
                    353,
                    327
                ],
                "gs.get_width_ratios": [
                    327
                ],
                "height_ratios": [
                    328,
                    355,
                    331,
                    332
                ],
                "gs.get_height_ratios": [
                    328
                ],
                "np.ones": [
                    330,
                    332
                ],
                "rownummin": [
                    355,
                    363,
                    341,
                    374,
                    350
                ],
                "np.int8": [
                    344,
                    341,
                    342,
                    343
                ],
                "rownummax": [
                    355,
                    364,
                    342,
                    375,
                    351
                ],
                "colnummin": [
                    353,
                    363,
                    374,
                    343,
                    350
                ],
                "colnummax": [
                    353,
                    364,
                    375,
                    344,
                    351
                ],
                "width": [
                    352,
                    345,
                    376,
                    365
                ],
                "n": [
                    352,
                    353,
                    354,
                    355,
                    348,
                    350,
                    351
                ],
                "np.sum": [
                    352,
                    354
                ],
                "width0": [
                    454,
                    458,
                    460,
                    365,
                    463,
                    464,
                    466,
                    468
                ],
                "height0": [
                    449,
                    365,
                    433,
                    437,
                    439,
                    444,
                    445,
                    447
                ],
                "alignleft": [
                    385,
                    379,
                    366
                ],
                "alignright": [
                    392,
                    387,
                    367
                ],
                "alignbot": [
                    368,
                    402,
                    407
                ],
                "aligntop": [
                    400,
                    369,
                    395
                ],
                "alignheight": [
                    434,
                    370,
                    431
                ],
                "alignwidth": [
                    371,
                    452,
                    455
                ],
                "mm": [
                    372,
                    373,
                    374,
                    375,
                    376
                ],
                "axc": [
                    390,
                    454,
                    460,
                    461,
                    398,
                    433,
                    465,
                    468,
                    405,
                    373,
                    439,
                    442,
                    446,
                    383
                ],
                "widthC": [
                    454,
                    458,
                    460,
                    462,
                    464,
                    466,
                    469,
                    376
                ],
                "heightC": [
                    450,
                    433,
                    437,
                    439,
                    376,
                    443,
                    445,
                    447
                ],
                "layoutbox.align": [
                    547,
                    389,
                    398,
                    405,
                    567,
                    382
                ],
                "layoutbox": [
                    389,
                    525,
                    398,
                    531,
                    659,
                    405,
                    541,
                    544,
                    546,
                    547,
                    552,
                    683,
                    561,
                    563,
                    565,
                    567,
                    696,
                    714,
                    616,
                    624,
                    497,
                    500,
                    507,
                    636,
                    382,
                    511
                ],
                "axc._poslayoutbox": [
                    390,
                    454,
                    460,
                    461,
                    398,
                    433,
                    465,
                    468,
                    405,
                    439,
                    442,
                    446,
                    383
                ],
                "drowsC": [
                    426,
                    431
                ],
                "drows0": [
                    427,
                    431
                ],
                "dcolsC": [
                    452,
                    428
                ],
                "dcols0": [
                    452,
                    429
                ],
                "ax._poslayoutbox.constrain_height": [
                    432
                ],
                "axc._poslayoutbox.height": [
                    433,
                    439
                ],
                "_in_same_column": [
                    435
                ],
                "axc._poslayoutbox.constrain_height_min": [
                    442,
                    446
                ],
                "ax._poslayoutbox.height": [
                    449,
                    443,
                    447
                ],
                "ax._poslayoutbox.constrain_width": [
                    453
                ],
                "axc._poslayoutbox.width": [
                    468,
                    460,
                    454
                ],
                "_in_same_row": [
                    456
                ],
                "axc._poslayoutbox.constrain_width_min": [
                    465,
                    461
                ],
                "ax._poslayoutbox.width": [
                    466,
                    462
                ],
                "sschildren": [
                    481,
                    483,
                    488,
                    489,
                    474
                ],
                "gs.children": [
                    475
                ],
                "child._is_subplotspec_layoutbox": [
                    476
                ],
                "child2": [
                    480,
                    477,
                    479
                ],
                "child.children": [
                    477
                ],
                "child2._is_gridspec_layoutbox": [
                    479
                ],
                "child0": [
                    483,
                    484
                ],
                "child0.artist": [
                    484
                ],
                "get_geometry": [
                    485
                ],
                "ss0.get_gridspec": [
                    485
                ],
                "rowNum0min": [
                    486,
                    510
                ],
                "colNum0min": [
                    499,
                    486
                ],
                "rowNum0max": [
                    506,
                    487
                ],
                "colNum0max": [
                    496,
                    487
                ],
                "childc": [
                    489,
                    490
                ],
                "ssc": [
                    490,
                    491,
                    492,
                    497,
                    500,
                    508,
                    511
                ],
                "childc.artist": [
                    490
                ],
                "rowNumCmin": [
                    506,
                    491
                ],
                "colNumCmin": [
                    496,
                    491
                ],
                "ssc.num1": [
                    491
                ],
                "rowNumCmax": [
                    492,
                    510
                ],
                "colNumCmax": [
                    499,
                    492
                ],
                "ssc.num2": [
                    492
                ],
                "thepad": [
                    513,
                    495,
                    498,
                    501,
                    505,
                    509
                ],
                "layoutbox.hstack": [
                    544,
                    497,
                    659,
                    500,
                    636,
                    541
                ],
                "ss0._layoutbox": [
                    512,
                    497,
                    507,
                    500
                ],
                "ssc._layoutbox": [
                    497,
                    500,
                    508,
                    511
                ],
                "layoutbox.vstack": [
                    714,
                    561,
                    563,
                    696,
                    507,
                    511
                ],
                "axlb": [
                    544,
                    522,
                    561,
                    563,
                    541
                ],
                "axpos": [
                    546,
                    547,
                    549,
                    523,
                    565,
                    567,
                    569
                ],
                "axsslb": [
                    524,
                    526,
                    527
                ],
                "_layoutbox": [
                    524
                ],
                "lb": [
                    650,
                    525,
                    653,
                    656,
                    658,
                    532,
                    533,
                    541,
                    544,
                    553,
                    554,
                    684,
                    685,
                    561,
                    563,
                    693,
                    695,
                    572,
                    706,
                    708,
                    711,
                    713,
                    729,
                    616,
                    625,
                    626,
                    633,
                    635
                ],
                "layoutbox.LayoutBox": [
                    552,
                    616,
                    683,
                    525,
                    624,
                    531
                ],
                "axsslb.name": [
                    527
                ],
                "cax": [
                    618,
                    558,
                    528,
                    689,
                    630,
                    537
                ],
                "location": [
                    704,
                    709,
                    551,
                    648,
                    682,
                    654,
                    623,
                    560,
                    530,
                    692,
                    632,
                    539
                ],
                "lbpos": [
                    546,
                    547,
                    674,
                    549,
                    552,
                    680,
                    683,
                    624,
                    720,
                    722,
                    531,
                    729,
                    565,
                    726,
                    567,
                    569,
                    572,
                    671
                ],
                "lb.name": [
                    554,
                    533,
                    626,
                    685
                ],
                "pad": [
                    544,
                    714,
                    561,
                    563,
                    659,
                    696,
                    636,
                    541
                ],
                "axlb.width": [
                    544,
                    541
                ],
                "layoutbox.match_heights": [
                    546
                ],
                "shrink": [
                    673,
                    546,
                    676,
                    549,
                    680,
                    721,
                    724,
                    566,
                    726,
                    569
                ],
                "lbpos.constrain_width": [
                    680,
                    549,
                    720
                ],
                "axpos.height": [
                    549
                ],
                "aspect": [
                    680,
                    569,
                    549,
                    726
                ],
                "axlb.height": [
                    561,
                    563
                ],
                "layoutbox.match_widths": [
                    565
                ],
                "lbpos.constrain_height": [
                    569,
                    726,
                    671
                ],
                "axpos.width": [
                    569
                ],
                "maxrow": [
                    577,
                    707,
                    712,
                    620,
                    590,
                    591,
                    602
                ],
                "minrow": [
                    705,
                    578,
                    710,
                    620,
                    593,
                    594,
                    602
                ],
                "maxax": [
                    592,
                    602,
                    579
                ],
                "minax": [
                    602,
                    595,
                    580
                ],
                "maxcol": [
                    581,
                    649,
                    652,
                    621,
                    596,
                    597,
                    602
                ],
                "mincol": [
                    582,
                    621,
                    655,
                    657,
                    599,
                    600,
                    602
                ],
                "maxax_col": [
                    583,
                    621,
                    718,
                    598,
                    602
                ],
                "minax_col": [
                    584,
                    621,
                    719,
                    601,
                    602
                ],
                "subspec": [
                    706,
                    708,
                    645,
                    647,
                    711,
                    713,
                    650,
                    587,
                    589,
                    653,
                    656,
                    658,
                    701,
                    703
                ],
                "row_start": [
                    707,
                    646,
                    712,
                    588,
                    593,
                    594,
                    702
                ],
                "row_stop": [
                    705,
                    646,
                    710,
                    588,
                    590,
                    591,
                    702
                ],
                "col_start": [
                    646,
                    652,
                    588,
                    655,
                    599,
                    600,
                    702
                ],
                "col_stop": [
                    646,
                    649,
                    588,
                    657,
                    596,
                    597,
                    702
                ],
                "subspec.get_rows_columns": [
                    703,
                    589,
                    647
                ],
                "get_subplotspec": [
                    612
                ],
                "parents": [
                    691,
                    612,
                    621,
                    631
                ],
                "gslb": [
                    700,
                    644,
                    614,
                    616,
                    617,
                    714,
                    659,
                    696,
                    636
                ],
                "gslb.parent": [
                    616,
                    617
                ],
                "gslb.parent.name": [
                    617
                ],
                "minax_row": [
                    620,
                    663
                ],
                "maxax_row": [
                    664,
                    620
                ],
                "_getmaxminrowcolumn": [
                    621
                ],
                "order": [
                    706,
                    708,
                    711,
                    713,
                    650,
                    714,
                    653,
                    656,
                    658,
                    659,
                    693,
                    695,
                    696,
                    633,
                    635,
                    636
                ],
                "gslb.width": [
                    696,
                    714,
                    659,
                    636
                ],
                "ch": [
                    700,
                    644,
                    645,
                    701
                ],
                "gslb.children": [
                    700,
                    644
                ],
                "ch.artist": [
                    645,
                    701
                ],
                "subspec._layoutbox": [
                    706,
                    708,
                    711,
                    713,
                    650,
                    653,
                    656,
                    658
                ],
                "maxposlb": [
                    672,
                    675,
                    718,
                    720,
                    723,
                    663
                ],
                "minax_row._poslayoutbox": [
                    663
                ],
                "minposlb": [
                    672,
                    675,
                    676,
                    719,
                    720,
                    723,
                    724,
                    664
                ],
                "maxax_row._poslayoutbox": [
                    664
                ],
                "maxposlb.top": [
                    672,
                    675
                ],
                "minposlb.bottom": [
                    672,
                    675,
                    676
                ],
                "lbpos.constrain_bottom": [
                    674
                ],
                "lbpos.height": [
                    680
                ],
                "maxax_col._poslayoutbox": [
                    718
                ],
                "minax_col._poslayoutbox": [
                    719
                ],
                "maxposlb.right": [
                    720,
                    723
                ],
                "minposlb.left": [
                    720,
                    723,
                    724
                ],
                "lbpos.constrain_left": [
                    722
                ],
                "lbpos.width": [
                    726
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_20/lib/matplotlib/backend_bases.py": {
            "buggy_functions": [
                {
                    "function_name": "inaxes",
                    "function_code": "def inaxes(self, xy):\n    \"\"\"\n    Check if a point is in an axes.\n\n    Parameters\n    ----------\n    xy : tuple or list\n        (x, y) coordinates.\n        x position - pixels from left of canvas.\n        y position - pixels from bottom of canvas.\n\n    Returns\n    -------\n    axes: topmost axes containing the point, or None if no axes.\n\n    \"\"\"\n    axes_list = [a for a in self.figure.get_axes()\n                 if a.patch.contains_point(xy)]\n\n    if axes_list:\n        axes = cbook._topmost_artist(axes_list)\n    else:\n        axes = None\n\n    return axes\n",
                    "decorators": [],
                    "docstring": "Check if a point is in an axes.\n\nParameters\n----------\nxy : tuple or list\n    (x, y) coordinates.\n    x position - pixels from left of canvas.\n    y position - pixels from bottom of canvas.\n\nReturns\n-------\naxes: topmost axes containing the point, or None if no axes.",
                    "start_line": 1854,
                    "end_line": 1878,
                    "variables": {
                        "axes_list": [
                            1873,
                            1874,
                            1870
                        ],
                        "a": [
                            1870,
                            1871
                        ],
                        "self.figure.get_axes": [
                            1870
                        ],
                        "self.figure": [
                            1870
                        ],
                        "self": [
                            1870
                        ],
                        "a.patch.contains_point": [
                            1871
                        ],
                        "a.patch": [
                            1871
                        ],
                        "xy": [
                            1871
                        ],
                        "axes": [
                            1874,
                            1876,
                            1878
                        ],
                        "cbook._topmost_artist": [
                            1874
                        ],
                        "cbook": [
                            1874
                        ]
                    },
                    "filtered_variables": {
                        "axes_list": [
                            1873,
                            1874,
                            1870
                        ],
                        "a": [
                            1870,
                            1871
                        ],
                        "self.figure.get_axes": [
                            1870
                        ],
                        "self.figure": [
                            1870
                        ],
                        "self": [
                            1870
                        ],
                        "a.patch.contains_point": [
                            1871
                        ],
                        "a.patch": [
                            1871
                        ],
                        "xy": [
                            1871
                        ],
                        "axes": [
                            1874,
                            1876,
                            1878
                        ],
                        "cbook._topmost_artist": [
                            1874
                        ],
                        "cbook": [
                            1874
                        ]
                    },
                    "diff_line_number": 1856,
                    "class_data": {
                        "signature": "class FigureCanvasBase()",
                        "docstring": "The canvas the figure renders into.\n\nPublic attributes\n\nAttributes\n----------\nfigure : `matplotlib.figure.Figure`\n    A high-level figure instance",
                        "constructor_docstring": null,
                        "functions": [
                            "@cbook._classproperty\ndef supports_blit(cls):\n    return hasattr(cls, 'copy_from_bbox') and hasattr(cls, 'restore_region')",
                            "def __init__(self, figure):\n    self._fix_ipython_backend2gui()\n    self._is_idle_drawing = True\n    self._is_saving = False\n    figure.set_canvas(self)\n    self.figure = figure\n    self.callbacks = cbook.CallbackRegistry()\n    self.widgetlock = widgets.LockDraw()\n    self._button = None\n    self._key = None\n    self._lastx, self._lasty = (None, None)\n    self.button_pick_id = self.mpl_connect('button_press_event', self.pick)\n    self.scroll_pick_id = self.mpl_connect('scroll_event', self.pick)\n    self.mouse_grabber = None\n    self.toolbar = None\n    self._is_idle_drawing = False",
                            "@classmethod\n@functools.lru_cache()\ndef _fix_ipython_backend2gui(cls):\n    if 'IPython' not in sys.modules:\n        return\n    import IPython\n    ip = IPython.get_ipython()\n    if not ip:\n        return\n    from IPython.core import pylabtools as pt\n    if not hasattr(pt, 'backend2gui') or not hasattr(ip, 'enable_matplotlib'):\n        return\n    rif = getattr(cls, 'required_interactive_framework', None)\n    backend2gui_rif = {'qt5': 'qt', 'qt4': 'qt', 'gtk3': 'gtk3', 'wx': 'wx', 'macosx': 'osx'}.get(rif)\n    if backend2gui_rif:\n        if _is_non_interactive_terminal_ipython(ip):\n            ip.enable_gui(backend2gui_rif)",
                            "@contextmanager\ndef _idle_draw_cntx(self):\n    self._is_idle_drawing = True\n    yield\n    self._is_idle_drawing = False",
                            "def is_saving(self):\n    \"\"\"\n    Returns whether the renderer is in the process of saving\n    to a file, rather than rendering for an on-screen buffer.\n    \"\"\"\n    return self._is_saving",
                            "def pick(self, mouseevent):\n    if not self.widgetlock.locked():\n        self.figure.pick(mouseevent)",
                            "def blit(self, bbox=None):\n    \"\"\"Blit the canvas in bbox (default entire canvas).\"\"\"",
                            "def resize(self, w, h):\n    \"\"\"Set the canvas size in pixels.\"\"\"",
                            "def draw_event(self, renderer):\n    \"\"\"Pass a `DrawEvent` to all functions connected to ``draw_event``.\"\"\"\n    s = 'draw_event'\n    event = DrawEvent(s, self, renderer)\n    self.callbacks.process(s, event)",
                            "def resize_event(self):\n    \"\"\"\n    Pass a `ResizeEvent` to all functions connected to ``resize_event``.\n    \"\"\"\n    s = 'resize_event'\n    event = ResizeEvent(s, self)\n    self.callbacks.process(s, event)\n    self.draw_idle()",
                            "def close_event(self, guiEvent=None):\n    \"\"\"\n    Pass a `CloseEvent` to all functions connected to ``close_event``.\n    \"\"\"\n    s = 'close_event'\n    try:\n        event = CloseEvent(s, self, guiEvent=guiEvent)\n        self.callbacks.process(s, event)\n    except (TypeError, AttributeError):\n        pass",
                            "def key_press_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_press_event``.\n    \"\"\"\n    self._key = key\n    s = 'key_press_event'\n    event = KeyEvent(s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                            "def key_release_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_release_event``.\n    \"\"\"\n    s = 'key_release_event'\n    event = KeyEvent(s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._key = None",
                            "def pick_event(self, mouseevent, artist, **kwargs):\n    \"\"\"\n    This method will be called by artists who are picked and will\n    fire off :class:`PickEvent` callbacks registered listeners\n    \"\"\"\n    s = 'pick_event'\n    event = PickEvent(s, self, mouseevent, artist, guiEvent=mouseevent.guiEvent, **kwargs)\n    self.callbacks.process(s, event)",
                            "def scroll_event(self, x, y, step, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any\n    scroll wheel event.  (*x*, *y*) are the canvas coords ((0, 0) is lower\n    left).  button and key are as defined in MouseEvent.\n\n    This method will be call all functions connected to the\n    'scroll_event' with a :class:`MouseEvent` instance.\n    \"\"\"\n    if step >= 0:\n        self._button = 'up'\n    else:\n        self._button = 'down'\n    s = 'scroll_event'\n    mouseevent = MouseEvent(s, self, x, y, self._button, self._key, step=step, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                            "def button_press_event(self, x, y, button, dblclick=False, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any mouse\n    button press.  (*x*, *y*) are the canvas coords ((0, 0) is lower left).\n    button and key are as defined in :class:`MouseEvent`.\n\n    This method will be call all functions connected to the\n    'button_press_event' with a :class:`MouseEvent` instance.\n    \"\"\"\n    self._button = button\n    s = 'button_press_event'\n    mouseevent = MouseEvent(s, self, x, y, button, self._key, dblclick=dblclick, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                            "def button_release_event(self, x, y, button, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any mouse\n    button release.\n\n    This method will call all functions connected to the\n    'button_release_event' with a :class:`MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    s = 'button_release_event'\n    event = MouseEvent(s, self, x, y, button, self._key, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._button = None",
                            "def motion_notify_event(self, x, y, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any\n    motion-notify-event.\n\n    This method will call all functions connected to the\n    'motion_notify_event' with a :class:`MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self._lastx, self._lasty = (x, y)\n    s = 'motion_notify_event'\n    event = MouseEvent(s, self, x, y, self._button, self._key, guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                            "def leave_notify_event(self, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function when leaving\n    canvas\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self.callbacks.process('figure_leave_event', LocationEvent.lastevent)\n    LocationEvent.lastevent = None\n    self._lastx, self._lasty = (None, None)",
                            "def enter_notify_event(self, guiEvent=None, xy=None):\n    \"\"\"\n    Backend derived classes should call this function when entering\n    canvas\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    xy : (float, float)\n        The coordinate location of the pointer when the canvas is entered.\n    \"\"\"\n    if xy is not None:\n        x, y = xy\n        self._lastx, self._lasty = (x, y)\n    else:\n        x = None\n        y = None\n        cbook.warn_deprecated('3.0', message='enter_notify_event expects a location but your backend did not pass one.')\n    event = LocationEvent('figure_enter_event', self, x, y, guiEvent)\n    self.callbacks.process('figure_enter_event', event)",
                            "def inaxes(self, xy):\n    \"\"\"\n    Check if a point is in an axes.\n\n    Parameters\n    ----------\n    xy : tuple or list\n        (x, y) coordinates.\n        x position - pixels from left of canvas.\n        y position - pixels from bottom of canvas.\n\n    Returns\n    -------\n    axes: topmost axes containing the point, or None if no axes.\n\n    \"\"\"\n    axes_list = [a for a in self.figure.get_axes() if a.patch.contains_point(xy)]\n    if axes_list:\n        axes = cbook._topmost_artist(axes_list)\n    else:\n        axes = None\n    return axes",
                            "def grab_mouse(self, ax):\n    \"\"\"\n    Set the child axes which are currently grabbing the mouse events.\n    Usually called by the widgets themselves.\n    It is an error to call this if the mouse is already grabbed by\n    another axes.\n    \"\"\"\n    if self.mouse_grabber not in (None, ax):\n        raise RuntimeError('Another Axes already grabs mouse input')\n    self.mouse_grabber = ax",
                            "def release_mouse(self, ax):\n    \"\"\"\n    Release the mouse grab held by the axes, ax.\n    Usually called by the widgets.\n    It is ok to call this even if you ax doesn't have the mouse\n    grab currently.\n    \"\"\"\n    if self.mouse_grabber is ax:\n        self.mouse_grabber = None",
                            "def draw(self, *args, **kwargs):\n    \"\"\"Render the :class:`~matplotlib.figure.Figure`.\"\"\"",
                            "def draw_idle(self, *args, **kwargs):\n    \"\"\"\n    Request a widget redraw once control returns to the GUI event loop.\n\n    Even if multiple calls to `draw_idle` occur before control returns\n    to the GUI event loop, the figure will only be rendered once.\n\n    Notes\n    -----\n    Backends may choose to override the method and implement their own\n    strategy to prevent multiple renderings.\n\n    \"\"\"\n    if not self._is_idle_drawing:\n        with self._idle_draw_cntx():\n            self.draw(*args, **kwargs)",
                            "@cbook.deprecated('3.2')\ndef draw_cursor(self, event):\n    \"\"\"\n    Draw a cursor in the event.axes if inaxes is not None.  Use\n    native GUI drawing for efficiency if possible\n    \"\"\"",
                            "def get_width_height(self):\n    \"\"\"\n    Return the figure width and height in points or pixels\n    (depending on the backend), truncated to integers\n    \"\"\"\n    return (int(self.figure.bbox.width), int(self.figure.bbox.height))",
                            "@classmethod\ndef get_supported_filetypes(cls):\n    \"\"\"Return dict of savefig file formats supported by this backend.\"\"\"\n    return cls.filetypes",
                            "@classmethod\ndef get_supported_filetypes_grouped(cls):\n    \"\"\"\n    Return a dict of savefig file formats supported by this backend,\n    where the keys are a file type name, such as 'Joint Photographic\n    Experts Group', and the values are a list of filename extensions used\n    for that filetype, such as ['jpg', 'jpeg'].\n    \"\"\"\n    groupings = {}\n    for ext, name in cls.filetypes.items():\n        groupings.setdefault(name, []).append(ext)\n        groupings[name].sort()\n    return groupings",
                            "def _get_output_canvas(self, fmt):\n    \"\"\"\n    Return a canvas suitable for saving figures to a specified file format.\n\n    If necessary, this function will switch to a registered backend that\n    supports the format.\n    \"\"\"\n    if hasattr(self, 'print_{}'.format(fmt)):\n        return self\n    canvas_class = get_registered_canvas_class(fmt)\n    if canvas_class:\n        return self.switch_backends(canvas_class)\n    raise ValueError('Format {!r} is not supported (supported formats: {})'.format(fmt, ', '.join(sorted(self.get_supported_filetypes()))))",
                            "def print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, *, bbox_inches=None, **kwargs):\n    \"\"\"\n    Render the figure to hardcopy. Set the figure patch face and edge\n    colors.  This is useful because some of the GUIs have a gray figure\n    face color background and you'll probably want to override this on\n    hardcopy.\n\n    Parameters\n    ----------\n    filename\n        can also be a file object on image backends\n\n    orientation : {'landscape', 'portrait'}, default: 'portrait'\n        only currently applies to PostScript printing.\n\n    dpi : scalar, optional\n        the dots per inch to save the figure in; if None, use savefig.dpi\n\n    facecolor : color, default: :rc:`savefig.facecolor`\n        The facecolor of the figure.\n\n    edgecolor : color, default: :rc:`savefig.edgecolor`\n        The edgecolor of the figure.\n\n    format : str, optional\n        Force a specific file format. If not given, the format is inferred\n        from the *filename* extension, and if that fails from\n        :rc:`savefig.format`.\n\n    bbox_inches : 'tight' or `~matplotlib.transforms.Bbox`, default: :rc:`savefig.bbox`\n        Bbox in inches. Only the given portion of the figure is\n        saved. If 'tight', try to figure out the tight bbox of\n        the figure.\n\n    pad_inches : float, default: :rc:`savefig.pad_inches`\n        Amount of padding around the figure when *bbox_inches* is 'tight'.\n\n    bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n        A list of extra artists that will be considered when the\n        tight bbox is calculated.\n\n    \"\"\"\n    if format is None:\n        if isinstance(filename, os.PathLike):\n            filename = os.fspath(filename)\n        if isinstance(filename, str):\n            format = os.path.splitext(filename)[1][1:]\n        if format is None or format == '':\n            format = self.get_default_filetype()\n            if isinstance(filename, str):\n                filename = filename.rstrip('.') + '.' + format\n    format = format.lower()\n    canvas = self._get_output_canvas(format)\n    print_method = getattr(canvas, 'print_%s' % format)\n    if dpi is None:\n        dpi = rcParams['savefig.dpi']\n    if dpi == 'figure':\n        dpi = getattr(self.figure, '_original_dpi', self.figure.dpi)\n    with cbook._setattr_cm(self, _is_saving=True, manager=None), cbook._setattr_cm(self.figure, dpi=dpi):\n        if facecolor is None:\n            facecolor = rcParams['savefig.facecolor']\n        if edgecolor is None:\n            edgecolor = rcParams['savefig.edgecolor']\n        origfacecolor = self.figure.get_facecolor()\n        origedgecolor = self.figure.get_edgecolor()\n        self.figure.set_facecolor(facecolor)\n        self.figure.set_edgecolor(edgecolor)\n        if bbox_inches is None:\n            bbox_inches = rcParams['savefig.bbox']\n        if bbox_inches:\n            if bbox_inches == 'tight':\n                renderer = _get_renderer(self.figure, functools.partial(print_method, dpi=dpi, orientation=orientation))\n                self.figure.draw(renderer)\n                bbox_artists = kwargs.pop('bbox_extra_artists', None)\n                bbox_inches = self.figure.get_tightbbox(renderer, bbox_extra_artists=bbox_artists)\n                pad = kwargs.pop('pad_inches', None)\n                if pad is None:\n                    pad = rcParams['savefig.pad_inches']\n                bbox_inches = bbox_inches.padded(pad)\n            restore_bbox = tight_bbox.adjust_bbox(self.figure, bbox_inches, canvas.fixed_dpi)\n            _bbox_inches_restore = (bbox_inches, restore_bbox)\n        else:\n            _bbox_inches_restore = None\n        try:\n            result = print_method(filename, dpi=dpi, facecolor=facecolor, edgecolor=edgecolor, orientation=orientation, bbox_inches_restore=_bbox_inches_restore, **kwargs)\n        finally:\n            if bbox_inches and restore_bbox:\n                restore_bbox()\n            self.figure.set_facecolor(origfacecolor)\n            self.figure.set_edgecolor(origedgecolor)\n            self.figure.set_canvas(self)\n        return result",
                            "@classmethod\ndef get_default_filetype(cls):\n    \"\"\"\n    Get the default savefig file format as specified in rcParam\n    ``savefig.format``. Returned string excludes period. Overridden\n    in backends that only support a single file type.\n    \"\"\"\n    return rcParams['savefig.format']",
                            "def get_window_title(self):\n    \"\"\"\n    Get the title text of the window containing the figure.\n    Return None if there is no window (e.g., a PS backend).\n    \"\"\"\n    if hasattr(self, 'manager'):\n        return self.manager.get_window_title()",
                            "def set_window_title(self, title):\n    \"\"\"\n    Set the title text of the window containing the figure.  Note that\n    this has no effect if there is no window (e.g., a PS backend).\n    \"\"\"\n    if hasattr(self, 'manager'):\n        self.manager.set_window_title(title)",
                            "def get_default_filename(self):\n    \"\"\"\n    Return a string, which includes extension, suitable for use as\n    a default filename.\n    \"\"\"\n    default_basename = self.get_window_title() or 'image'\n    default_basename = default_basename.replace(' ', '_')\n    default_filetype = self.get_default_filetype()\n    default_filename = default_basename + '.' + default_filetype\n    return default_filename",
                            "def switch_backends(self, FigureCanvasClass):\n    \"\"\"\n    Instantiate an instance of FigureCanvasClass\n\n    This is used for backend switching, e.g., to instantiate a\n    FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is\n    not done, so any changes to one of the instances (e.g., setting\n    figure size or line props), will be reflected in the other\n    \"\"\"\n    newCanvas = FigureCanvasClass(self.figure)\n    newCanvas._is_saving = self._is_saving\n    return newCanvas",
                            "def mpl_connect(self, s, func):\n    \"\"\"\n    Bind function *func* to event *s*.\n\n    Parameters\n    ----------\n    s : str\n        One of the following events ids:\n\n        - 'button_press_event'\n        - 'button_release_event'\n        - 'draw_event'\n        - 'key_press_event'\n        - 'key_release_event'\n        - 'motion_notify_event'\n        - 'pick_event'\n        - 'resize_event'\n        - 'scroll_event'\n        - 'figure_enter_event',\n        - 'figure_leave_event',\n        - 'axes_enter_event',\n        - 'axes_leave_event'\n        - 'close_event'.\n\n    func : callable\n        The callback function to be executed, which must have the\n        signature::\n\n            def func(event: Event) -> Any\n\n        For the location events (button and key press/release), if the\n        mouse is over the axes, the ``inaxes`` attribute of the event will\n        be set to the `~matplotlib.axes.Axes` the event occurs is over, and\n        additionally, the variables ``xdata`` and ``ydata`` attributes will\n        be set to the mouse location in data coordinates.  See `.KeyEvent`\n        and `.MouseEvent` for more info.\n\n    Returns\n    -------\n    cid\n        A connection id that can be used with\n        `.FigureCanvasBase.mpl_disconnect`.\n\n    Examples\n    --------\n    ::\n\n        def on_press(event):\n            print('you pressed', event.button, event.xdata, event.ydata)\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n    \"\"\"\n    return self.callbacks.connect(s, func)",
                            "def mpl_disconnect(self, cid):\n    \"\"\"\n    Disconnect the callback with id *cid*.\n\n    Examples\n    --------\n    ::\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n        # ... later\n        canvas.mpl_disconnect(cid)\n    \"\"\"\n    return self.callbacks.disconnect(cid)",
                            "def new_timer(self, *args, **kwargs):\n    \"\"\"\n    Create a new backend-specific subclass of `.Timer`.\n\n    This is useful for getting periodic events through the backend's native\n    event loop.  Implemented only for backends with GUIs.\n\n    Other Parameters\n    ----------------\n    interval : scalar\n        Timer interval in milliseconds\n\n    callbacks : List[Tuple[callable, Tuple, Dict]]\n        Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n        will be executed by the timer every *interval*.\n\n        Callbacks which return ``False`` or ``0`` will be removed from the\n        timer.\n\n    Examples\n    --------\n    >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1, ), {'a': 3}),])\n    \"\"\"\n    return TimerBase(*args, **kwargs)",
                            "def flush_events(self):\n    \"\"\"\n    Flush the GUI events for the figure.\n\n    Interactive backends need to reimplement this method.\n    \"\"\"",
                            "def start_event_loop(self, timeout=0):\n    \"\"\"\n    Start a blocking event loop.\n\n    Such an event loop is used by interactive functions, such as `ginput`\n    and `waitforbuttonpress`, to wait for events.\n\n    The event loop blocks until a callback function triggers\n    `stop_event_loop`, or *timeout* is reached.\n\n    If *timeout* is negative, never timeout.\n\n    Only interactive backends need to reimplement this method and it relies\n    on `flush_events` being properly implemented.\n\n    Interactive backends should implement this in a more native way.\n    \"\"\"\n    if timeout <= 0:\n        timeout = np.inf\n    timestep = 0.01\n    counter = 0\n    self._looping = True\n    while self._looping and counter * timestep < timeout:\n        self.flush_events()\n        time.sleep(timestep)\n        counter += 1",
                            "def stop_event_loop(self):\n    \"\"\"\n    Stop the current blocking event loop.\n\n    Interactive backends need to reimplement this to match\n    `start_event_loop`\n    \"\"\"\n    self._looping = False"
                        ],
                        "constructor_variables": [
                            "toolbar",
                            "scroll_pick_id",
                            "button_pick_id",
                            "mouse_grabber",
                            "callbacks",
                            "_is_saving",
                            "_button",
                            "_key",
                            "_is_idle_drawing",
                            "figure",
                            "widgetlock"
                        ],
                        "class_level_variables": [
                            "required_interactive_framework",
                            "events",
                            "fixed_dpi",
                            "filetypes"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "supports_blit(cls)",
                            "__init__(self, figure)",
                            "_fix_ipython_backend2gui(cls)",
                            "_idle_draw_cntx(self)",
                            "is_saving(self)",
                            "pick(self, mouseevent)",
                            "blit(self, bbox=None)",
                            "resize(self, w, h)",
                            "draw_event(self, renderer)",
                            "resize_event(self)",
                            "close_event(self, guiEvent=None)",
                            "key_press_event(self, key, guiEvent=None)",
                            "key_release_event(self, key, guiEvent=None)",
                            "pick_event(self, mouseevent, artist, **kwargs)",
                            "scroll_event(self, x, y, step, guiEvent=None)",
                            "button_press_event(self, x, y, button, dblclick=False, guiEvent=None)",
                            "button_release_event(self, x, y, button, guiEvent=None)",
                            "motion_notify_event(self, x, y, guiEvent=None)",
                            "leave_notify_event(self, guiEvent=None)",
                            "enter_notify_event(self, guiEvent=None, xy=None)",
                            "inaxes(self, xy)",
                            "grab_mouse(self, ax)",
                            "release_mouse(self, ax)",
                            "draw(self, *args, **kwargs)",
                            "draw_idle(self, *args, **kwargs)",
                            "draw_cursor(self, event)",
                            "get_width_height(self)",
                            "get_supported_filetypes(cls)",
                            "get_supported_filetypes_grouped(cls)",
                            "_get_output_canvas(self, fmt)",
                            "print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, **kwargs)",
                            "get_default_filetype(cls)",
                            "get_window_title(self)",
                            "set_window_title(self, title)",
                            "get_default_filename(self)",
                            "switch_backends(self, FigureCanvasClass)",
                            "mpl_connect(self, s, func)",
                            "mpl_disconnect(self, cid)",
                            "new_timer(self, *args, **kwargs)",
                            "flush_events(self)",
                            "start_event_loop(self, timeout=0)",
                            "stop_event_loop(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "axes_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x110f18ac0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "axes_list": {
                                    "variable_value": "[<matplotlib.axes._subplots.AxesSubplot object at 0x1113b9160>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x110f18ac0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1113b9160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "axes_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x110f18ac0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "axes_list": {
                                    "variable_value": "[<matplotlib.axes._subplots.AxesSubplot object at 0x1113b9160>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x110f18ac0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1113b9160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "axes_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10eec8af0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "a.get_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "axes_list": {
                                    "variable_value": "[<matplotlib.axes._subplots.AxesSubplot object at 0x10f2c91f0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10eec8af0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "a.get_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "axes": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x10f2c91f0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "axes_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10eec8af0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "a.get_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "axes_list": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure.get_axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x10eec8af0>",
                                    "variable_type": "FigureCanvasAgg",
                                    "variable_shape": null
                                },
                                "a.patch.contains_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.patch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "xy": {
                                    "variable_value": "(200, 200)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "a.get_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "axes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbook._topmost_artist": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def register_backend(format, backend, description=None):\n    \"\"\"\n    Register a backend for saving to a given file format.\n\n    Parameters\n    ----------\n    format : str\n        File extension\n\n    backend : module string or canvas class\n        Backend for handling file output\n\n    description : str, default: \"\"\n        Description of the file type.\n    \"\"\"\n    if description is None:\n        description = ''\n    _default_backends[format] = backend\n    _default_filetypes[format] = description",
                "def get_registered_canvas_class(format):\n    \"\"\"\n    Return the registered default canvas for given file format.\n    Handles deferred import of required backend.\n    \"\"\"\n    if format not in _default_backends:\n        return None\n    backend_class = _default_backends[format]\n    if isinstance(backend_class, str):\n        backend_class = importlib.import_module(backend_class).FigureCanvas\n        _default_backends[format] = backend_class\n    return backend_class",
                "def _get_renderer(figure, print_method):\n    \"\"\"\n    Get the renderer that would be used to save a `~.Figure`, and cache it on\n    the figure.\n    \"\"\"\n    # This is implemented by triggering a draw, then immediately jumping out of\n    # Figure.draw() by raising an exception.\n\n    class Done(Exception):\n        pass\n\n    def _draw(renderer): raise Done(renderer)\n\n    with cbook._setattr_cm(figure, draw=_draw):\n        try:\n            print_method(io.BytesIO())\n        except Done as exc:\n            figure._cachedRenderer, = exc.args\n            return figure._cachedRenderer",
                "def _is_non_interactive_terminal_ipython(ip):\n    \"\"\"\n    Return whether we are in a a terminal IPython, but non interactive.\n\n    When in _terminal_ IPython, ip.parent will have and `interact` attribute,\n    if this attribute is False we do not setup eventloop integration as the\n    user will _not_ interact with IPython. In all other case (ZMQKernel, or is\n    interactive), we do.\n    \"\"\"\n    return (hasattr(ip, 'parent')\n        and (ip.parent is not None)\n        and getattr(ip.parent, 'interact', None) is False)",
                "def key_press_handler(event, canvas, toolbar=None):\n    \"\"\"\n    Implement the default Matplotlib key bindings for the canvas and toolbar\n    described at :ref:`key-event-handling`.\n\n    Parameters\n    ----------\n    event : :class:`KeyEvent`\n        a key press/release event\n    canvas : :class:`FigureCanvasBase`\n        the backend-specific canvas instance\n    toolbar : :class:`NavigationToolbar2`\n        the navigation cursor toolbar\n    \"\"\"\n    # these bindings happen whether you are over an axes or not\n\n    if event.key is None:\n        return\n\n    # Load key-mappings from rcParams.\n    fullscreen_keys = rcParams['keymap.fullscreen']\n    home_keys = rcParams['keymap.home']\n    back_keys = rcParams['keymap.back']\n    forward_keys = rcParams['keymap.forward']\n    pan_keys = rcParams['keymap.pan']\n    zoom_keys = rcParams['keymap.zoom']\n    save_keys = rcParams['keymap.save']\n    quit_keys = rcParams['keymap.quit']\n    grid_keys = rcParams['keymap.grid']\n    grid_minor_keys = rcParams['keymap.grid_minor']\n    toggle_yscale_keys = rcParams['keymap.yscale']\n    toggle_xscale_keys = rcParams['keymap.xscale']\n    all_keys = rcParams['keymap.all_axes']\n\n    # toggle fullscreen mode ('f', 'ctrl + f')\n    if event.key in fullscreen_keys:\n        try:\n            canvas.manager.full_screen_toggle()\n        except AttributeError:\n            pass\n\n    # quit the figure (default key 'ctrl+w')\n    if event.key in quit_keys:\n        Gcf.destroy_fig(canvas.figure)\n\n    if toolbar is not None:\n        # home or reset mnemonic  (default key 'h', 'home' and 'r')\n        if event.key in home_keys:\n            toolbar.home()\n        # forward / backward keys to enable left handed quick navigation\n        # (default key for backward: 'left', 'backspace' and 'c')\n        elif event.key in back_keys:\n            toolbar.back()\n        # (default key for forward: 'right' and 'v')\n        elif event.key in forward_keys:\n            toolbar.forward()\n        # pan mnemonic (default key 'p')\n        elif event.key in pan_keys:\n            toolbar.pan()\n            toolbar._update_cursor(event)\n        # zoom mnemonic (default key 'o')\n        elif event.key in zoom_keys:\n            toolbar.zoom()\n            toolbar._update_cursor(event)\n        # saving current figure (default key 's')\n        elif event.key in save_keys:\n            toolbar.save_figure()\n\n    if event.inaxes is None:\n        return\n\n    # these bindings require the mouse to be over an axes to trigger\n    def _get_uniform_gridstate(ticks):\n        # Return True/False if all grid lines are on or off, None if they are\n        # not all in the same state.\n        if all(tick.gridline.get_visible() for tick in ticks):\n            return True\n        elif not any(tick.gridline.get_visible() for tick in ticks):\n            return False\n        else:\n            return None\n\n    ax = event.inaxes\n    # toggle major grids in current axes (default key 'g')\n    # Both here and below (for 'G'), we do nothing if *any* grid (major or\n    # minor, x or y) is not in a uniform state, to avoid messing up user\n    # customization.\n    if (event.key in grid_keys\n            # Exclude minor grids not in a uniform state.\n            and None not in [_get_uniform_gridstate(ax.xaxis.minorTicks),\n                             _get_uniform_gridstate(ax.yaxis.minorTicks)]):\n        x_state = _get_uniform_gridstate(ax.xaxis.majorTicks)\n        y_state = _get_uniform_gridstate(ax.yaxis.majorTicks)\n        cycle = [(False, False), (True, False), (True, True), (False, True)]\n        try:\n            x_state, y_state = (\n                cycle[(cycle.index((x_state, y_state)) + 1) % len(cycle)])\n        except ValueError:\n            # Exclude major grids not in a uniform state.\n            pass\n        else:\n            # If turning major grids off, also turn minor grids off.\n            ax.grid(x_state, which=\"major\" if x_state else \"both\", axis=\"x\")\n            ax.grid(y_state, which=\"major\" if y_state else \"both\", axis=\"y\")\n            canvas.draw_idle()\n    # toggle major and minor grids in current axes (default key 'G')\n    if (event.key in grid_minor_keys\n            # Exclude major grids not in a uniform state.\n            and None not in [_get_uniform_gridstate(ax.xaxis.majorTicks),\n                             _get_uniform_gridstate(ax.yaxis.majorTicks)]):\n        x_state = _get_uniform_gridstate(ax.xaxis.minorTicks)\n        y_state = _get_uniform_gridstate(ax.yaxis.minorTicks)\n        cycle = [(False, False), (True, False), (True, True), (False, True)]\n        try:\n            x_state, y_state = (\n                cycle[(cycle.index((x_state, y_state)) + 1) % len(cycle)])\n        except ValueError:\n            # Exclude minor grids not in a uniform state.\n            pass\n        else:\n            ax.grid(x_state, which=\"both\", axis=\"x\")\n            ax.grid(y_state, which=\"both\", axis=\"y\")\n            canvas.draw_idle()\n    # toggle scaling of y-axes between 'log and 'linear' (default key 'l')\n    elif event.key in toggle_yscale_keys:\n        scale = ax.get_yscale()\n        if scale == 'log':\n            ax.set_yscale('linear')\n            ax.figure.canvas.draw_idle()\n        elif scale == 'linear':\n            try:\n                ax.set_yscale('log')\n            except ValueError as exc:\n                _log.warning(str(exc))\n                ax.set_yscale('linear')\n            ax.figure.canvas.draw_idle()\n    # toggle scaling of x-axes between 'log and 'linear' (default key 'k')\n    elif event.key in toggle_xscale_keys:\n        scalex = ax.get_xscale()\n        if scalex == 'log':\n            ax.set_xscale('linear')\n            ax.figure.canvas.draw_idle()\n        elif scalex == 'linear':\n            try:\n                ax.set_xscale('log')\n            except ValueError as exc:\n                _log.warning(str(exc))\n                ax.set_xscale('linear')\n            ax.figure.canvas.draw_idle()\n    # enable nagivation for all axes that contain the event (default key 'a')\n    elif event.key in all_keys:\n        for a in canvas.figure.get_axes():\n            if (event.x is not None and event.y is not None\n                    and a.in_axes(event)):  # FIXME: Why only these?\n                a.set_navigate(True)\n    # enable navigation only for axes with this index (if such an axes exist,\n    # otherwise do nothing)\n    elif event.key.isdigit() and event.key != '0':\n        n = int(event.key) - 1\n        if n < len(canvas.figure.get_axes()):\n            for i, a in enumerate(canvas.figure.get_axes()):\n                if (event.x is not None and event.y is not None\n                        and a.in_axes(event)):  # FIXME: Why only these?\n                    a.set_navigate(i == n)",
                "def button_press_handler(event, canvas, toolbar=None):\n    \"\"\"\n    The default Matplotlib button actions for extra mouse buttons.\n    \"\"\"\n    if toolbar is not None:\n        button_name = str(MouseButton(event.button))\n        if button_name in rcParams['keymap.back']:\n            toolbar.back()\n        elif button_name in rcParams['keymap.forward']:\n            toolbar.forward()",
                "def __init__(self):\n    self._texmanager = None\n    self._text2path = textpath.TextToPath()",
                "def open_group(self, s, gid=None):\n    \"\"\"\n    Open a grouping element with label *s* and *gid* (if set) as id.\n\n    Only used by the SVG renderer.\n    \"\"\"",
                "def close_group(self, s):\n    \"\"\"\n    Close a grouping element with label *s*.\n\n    Only used by the SVG renderer.\n    \"\"\"",
                "def draw_path(self, gc, path, transform, rgbFace=None):\n    \"\"\"Draw a `~.path.Path` instance using the given affine transform.\"\"\"\n    raise NotImplementedError",
                "def draw_markers(self, gc, marker_path, marker_trans, path,\n                 trans, rgbFace=None):\n    \"\"\"\n    Draw a marker at each of the vertices in path.\n\n    This includes all vertices, including control points on curves.\n    To avoid that behavior, those vertices should be removed before\n    calling this function.\n\n    This provides a fallback implementation of draw_markers that\n    makes multiple calls to :meth:`draw_path`.  Some backends may\n    want to override this method in order to draw the marker only\n    once and reuse it multiple times.\n\n    Parameters\n    ----------\n    gc : `GraphicsContextBase`\n        The graphics context.\n\n    marker_trans : `matplotlib.transforms.Transform`\n        An affine transform applied to the marker.\n\n    trans : `matplotlib.transforms.Transform`\n        An affine transform applied to the path.\n\n    \"\"\"\n    for vertices, codes in path.iter_segments(trans, simplify=False):\n        if len(vertices):\n            x, y = vertices[-2:]\n            self.draw_path(gc, marker_path,\n                           marker_trans +\n                           transforms.Affine2D().translate(x, y),\n                           rgbFace)",
                "def draw_path_collection(self, gc, master_transform, paths, all_transforms,\n                         offsets, offsetTrans, facecolors, edgecolors,\n                         linewidths, linestyles, antialiaseds, urls,\n                         offset_position):\n    \"\"\"\n    Draw a collection of paths selecting drawing properties from\n    the lists *facecolors*, *edgecolors*, *linewidths*,\n    *linestyles* and *antialiaseds*. *offsets* is a list of\n    offsets to apply to each of the paths.  The offsets in\n    *offsets* are first transformed by *offsetTrans* before being\n    applied.  *offset_position* may be either \"screen\" or \"data\"\n    depending on the space that the offsets are in.\n\n    This provides a fallback implementation of\n    :meth:`draw_path_collection` that makes multiple calls to\n    :meth:`draw_path`.  Some backends may want to override this in\n    order to render each set of path data only once, and then\n    reference that path multiple times with the different offsets,\n    colors, styles etc.  The generator methods\n    :meth:`_iter_collection_raw_paths` and\n    :meth:`_iter_collection` are provided to help with (and\n    standardize) the implementation across backends.  It is highly\n    recommended to use those generators, so that changes to the\n    behavior of :meth:`draw_path_collection` can be made globally.\n    \"\"\"\n    path_ids = [\n        (path, transforms.Affine2D(transform))\n        for path, transform in self._iter_collection_raw_paths(\n                master_transform, paths, all_transforms)]\n\n    for xo, yo, path_id, gc0, rgbFace in self._iter_collection(\n            gc, master_transform, all_transforms, path_ids, offsets,\n            offsetTrans, facecolors, edgecolors, linewidths, linestyles,\n            antialiaseds, urls, offset_position):\n        path, transform = path_id\n        transform = transforms.Affine2D(\n                        transform.get_matrix()).translate(xo, yo)\n        self.draw_path(gc0, path, transform, rgbFace)",
                "def draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight,\n                   coordinates, offsets, offsetTrans, facecolors,\n                   antialiased, edgecolors):\n    \"\"\"\n    This provides a fallback implementation of\n    :meth:`draw_quad_mesh` that generates paths and then calls\n    :meth:`draw_path_collection`.\n    \"\"\"\n\n    from matplotlib.collections import QuadMesh\n    paths = QuadMesh.convert_mesh_to_paths(\n        meshWidth, meshHeight, coordinates)\n\n    if edgecolors is None:\n        edgecolors = facecolors\n    linewidths = np.array([gc.get_linewidth()], float)\n\n    return self.draw_path_collection(\n        gc, master_transform, paths, [], offsets, offsetTrans, facecolors,\n        edgecolors, linewidths, [], [antialiased], [None], 'screen')",
                "def draw_gouraud_triangle(self, gc, points, colors, transform):\n    \"\"\"\n    Draw a Gouraud-shaded triangle.\n\n    Parameters\n    ----------\n    points : array-like, shape=(3, 2)\n        Array of (x, y) points for the triangle.\n\n    colors : array-like, shape=(3, 4)\n        RGBA colors for each point of the triangle.\n\n    transform : `matplotlib.transforms.Transform`\n        An affine transform to apply to the points.\n\n    \"\"\"\n    raise NotImplementedError",
                "def draw_gouraud_triangles(self, gc, triangles_array, colors_array,\n                           transform):\n    \"\"\"\n    Draw a series of Gouraud triangles.\n\n    Parameters\n    ----------\n    points : array-like, shape=(N, 3, 2)\n        Array of *N* (x, y) points for the triangles.\n\n    colors : array-like, shape=(N, 3, 4)\n        Array of *N* RGBA colors for each point of the triangles.\n\n    transform : `matplotlib.transforms.Transform`\n        An affine transform to apply to the points.\n    \"\"\"\n    transform = transform.frozen()\n    for tri, col in zip(triangles_array, colors_array):\n        self.draw_gouraud_triangle(gc, tri, col, transform)",
                "def _iter_collection_raw_paths(self, master_transform, paths,\n                               all_transforms):\n    \"\"\"\n    This is a helper method (along with :meth:`_iter_collection`) to make\n    it easier to write a space-efficient :meth:`draw_path_collection`\n    implementation in a backend.\n\n    This method yields all of the base path/transform\n    combinations, given a master transform, a list of paths and\n    list of transforms.\n\n    The arguments should be exactly what is passed in to\n    :meth:`draw_path_collection`.\n\n    The backend should take each yielded path and transform and\n    create an object that can be referenced (reused) later.\n    \"\"\"\n    Npaths = len(paths)\n    Ntransforms = len(all_transforms)\n    N = max(Npaths, Ntransforms)\n\n    if Npaths == 0:\n        return\n\n    transform = transforms.IdentityTransform()\n    for i in range(N):\n        path = paths[i % Npaths]\n        if Ntransforms:\n            transform = Affine2D(all_transforms[i % Ntransforms])\n        yield path, transform + master_transform",
                "def _iter_collection_uses_per_path(self, paths, all_transforms,\n                                   offsets, facecolors, edgecolors):\n    \"\"\"\n    Compute how many times each raw path object returned by\n    _iter_collection_raw_paths would be used when calling\n    _iter_collection. This is intended for the backend to decide\n    on the tradeoff between using the paths in-line and storing\n    them once and reusing. Rounds up in case the number of uses\n    is not the same for every path.\n    \"\"\"\n    Npaths = len(paths)\n    if Npaths == 0 or len(facecolors) == len(edgecolors) == 0:\n        return 0\n    Npath_ids = max(Npaths, len(all_transforms))\n    N = max(Npath_ids, len(offsets))\n    return (N + Npath_ids - 1) // Npath_ids",
                "def _iter_collection(self, gc, master_transform, all_transforms,\n                     path_ids, offsets, offsetTrans, facecolors,\n                     edgecolors, linewidths, linestyles,\n                     antialiaseds, urls, offset_position):\n    \"\"\"\n    This is a helper method (along with\n    :meth:`_iter_collection_raw_paths`) to make it easier to write\n    a space-efficient :meth:`draw_path_collection` implementation in a\n    backend.\n\n    This method yields all of the path, offset and graphics\n    context combinations to draw the path collection.  The caller\n    should already have looped over the results of\n    :meth:`_iter_collection_raw_paths` to draw this collection.\n\n    The arguments should be the same as that passed into\n    :meth:`draw_path_collection`, with the exception of\n    *path_ids*, which is a list of arbitrary objects that the\n    backend will use to reference one of the paths created in the\n    :meth:`_iter_collection_raw_paths` stage.\n\n    Each yielded result is of the form::\n\n       xo, yo, path_id, gc, rgbFace\n\n    where *xo*, *yo* is an offset; *path_id* is one of the elements of\n    *path_ids*; *gc* is a graphics context and *rgbFace* is a color to\n    use for filling the path.\n    \"\"\"\n    Ntransforms = len(all_transforms)\n    Npaths = len(path_ids)\n    Noffsets = len(offsets)\n    N = max(Npaths, Noffsets)\n    Nfacecolors = len(facecolors)\n    Nedgecolors = len(edgecolors)\n    Nlinewidths = len(linewidths)\n    Nlinestyles = len(linestyles)\n    Naa = len(antialiaseds)\n    Nurls = len(urls)\n\n    if (Nfacecolors == 0 and Nedgecolors == 0) or Npaths == 0:\n        return\n    if Noffsets:\n        toffsets = offsetTrans.transform(offsets)\n\n    gc0 = self.new_gc()\n    gc0.copy_properties(gc)\n\n    if Nfacecolors == 0:\n        rgbFace = None\n\n    if Nedgecolors == 0:\n        gc0.set_linewidth(0.0)\n\n    xo, yo = 0, 0\n    for i in range(N):\n        path_id = path_ids[i % Npaths]\n        if Noffsets:\n            xo, yo = toffsets[i % Noffsets]\n            if offset_position == 'data':\n                if Ntransforms:\n                    transform = (\n                        Affine2D(all_transforms[i % Ntransforms]) +\n                        master_transform)\n                else:\n                    transform = master_transform\n                (xo, yo), (xp, yp) = transform.transform(\n                    [(xo, yo), (0, 0)])\n                xo = -(xp - xo)\n                yo = -(yp - yo)\n        if not (np.isfinite(xo) and np.isfinite(yo)):\n            continue\n        if Nfacecolors:\n            rgbFace = facecolors[i % Nfacecolors]\n        if Nedgecolors:\n            if Nlinewidths:\n                gc0.set_linewidth(linewidths[i % Nlinewidths])\n            if Nlinestyles:\n                gc0.set_dashes(*linestyles[i % Nlinestyles])\n            fg = edgecolors[i % Nedgecolors]\n            if len(fg) == 4:\n                if fg[3] == 0.0:\n                    gc0.set_linewidth(0)\n                else:\n                    gc0.set_foreground(fg)\n            else:\n                gc0.set_foreground(fg)\n        if rgbFace is not None and len(rgbFace) == 4:\n            if rgbFace[3] == 0:\n                rgbFace = None\n        gc0.set_antialiased(antialiaseds[i % Naa])\n        if Nurls:\n            gc0.set_url(urls[i % Nurls])\n\n        yield xo, yo, path_id, gc0, rgbFace\n    gc0.restore()",
                "def get_image_magnification(self):\n    \"\"\"\n    Get the factor by which to magnify images passed to :meth:`draw_image`.\n    Allows a backend to have images at a different resolution to other\n    artists.\n    \"\"\"\n    return 1.0",
                "def draw_image(self, gc, x, y, im, transform=None):\n    \"\"\"\n    Draw an RGBA image.\n\n    Parameters\n    ----------\n    gc : `GraphicsContextBase`\n        A graphics context with clipping information.\n\n    x : scalar\n        The distance in physical units (i.e., dots or pixels) from the left\n        hand side of the canvas.\n\n    y : scalar\n        The distance in physical units (i.e., dots or pixels) from the\n        bottom side of the canvas.\n\n    im : array-like, shape=(N, M, 4), dtype=np.uint8\n        An array of RGBA pixels.\n\n    transform : `matplotlib.transforms.Affine2DBase`\n        If and only if the concrete backend is written such that\n        :meth:`option_scale_image` returns ``True``, an affine\n        transformation *may* be passed to :meth:`draw_image`. It takes the\n        form of a :class:`~matplotlib.transforms.Affine2DBase` instance.\n        The translation vector of the transformation is given in physical\n        units (i.e., dots or pixels). Note that the transformation does not\n        override *x* and *y*, and has to be applied *before* translating\n        the result by *x* and *y* (this can be accomplished by adding *x*\n        and *y* to the translation vector defined by *transform*).\n    \"\"\"\n    raise NotImplementedError",
                "def option_image_nocomposite(self):\n    \"\"\"\n    Return whether image composition by Matplotlib should be skipped.\n\n    Raster backends should usually return False (letting the C-level\n    rasterizer take care of image composition); vector backends should\n    usually return ``not rcParams[\"image.composite_image\"]``.\n    \"\"\"\n    return False",
                "def option_scale_image(self):\n    \"\"\"\n    Return whether arbitrary affine transformations in :meth:`draw_image`\n    are supported (True for most vector backends).\n    \"\"\"\n    return False",
                "def draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None):\n    \"\"\"\n    \"\"\"\n    self._draw_text_as_path(gc, x, y, s, prop, angle, ismath=\"TeX\")",
                "def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):\n    \"\"\"\n    Draw the text instance.\n\n    Parameters\n    ----------\n    gc : `GraphicsContextBase`\n        The graphics context.\n    x : float\n        The x location of the text in display coords.\n    y : float\n        The y location of the text baseline in display coords.\n    s : str\n        The text string.\n    prop : `matplotlib.font_manager.FontProperties`\n        The font properties.\n    angle : float\n        The rotation angle in degrees anti-clockwise.\n    mtext : `matplotlib.text.Text`\n        The original text object to be rendered.\n\n    Notes\n    -----\n    **Note for backend implementers:**\n\n    When you are trying to determine if you have gotten your bounding box\n    right (which is what enables the text layout/alignment to work\n    properly), it helps to change the line in text.py::\n\n        if 0: bbox_artist(self, renderer)\n\n    to if 1, and then the actual bounding box will be plotted along with\n    your text.\n    \"\"\"\n\n    self._draw_text_as_path(gc, x, y, s, prop, angle, ismath)",
                "def _get_text_path_transform(self, x, y, s, prop, angle, ismath):\n    \"\"\"\n    Return the text path and transform.\n\n    Parameters\n    ----------\n    prop : `matplotlib.font_manager.FontProperties`\n        The font property.\n    s : str\n        The text to be converted.\n    ismath : bool or \"TeX\"\n        If True, use mathtext parser. If \"TeX\", use *usetex* mode.\n    \"\"\"\n\n    text2path = self._text2path\n    fontsize = self.points_to_pixels(prop.get_size_in_points())\n    verts, codes = text2path.get_text_path(prop, s, ismath=ismath)\n\n    path = Path(verts, codes)\n    angle = np.deg2rad(angle)\n    if self.flipy():\n        width, height = self.get_canvas_width_height()\n        transform = (Affine2D()\n                     .scale(fontsize / text2path.FONT_SCALE)\n                     .rotate(angle)\n                     .translate(x, height - y))\n    else:\n        transform = (Affine2D()\n                     .scale(fontsize / text2path.FONT_SCALE)\n                     .rotate(angle)\n                     .translate(x, y))\n\n    return path, transform",
                "def _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath):\n    \"\"\"\n    Draw the text by converting them to paths using textpath module.\n\n    Parameters\n    ----------\n    prop : `matplotlib.font_manager.FontProperties`\n        The font property.\n    s : str\n        The text to be converted.\n    usetex : bool\n        Whether to use matplotlib usetex mode.\n    ismath : bool or \"TeX\"\n        If True, use mathtext parser. If \"TeX\", use *usetex* mode.\n    \"\"\"\n    path, transform = self._get_text_path_transform(\n        x, y, s, prop, angle, ismath)\n    color = gc.get_rgb()\n    gc.set_linewidth(0.0)\n    self.draw_path(gc, path, transform, rgbFace=color)",
                "def get_text_width_height_descent(self, s, prop, ismath):\n    \"\"\"\n    Get the width, height, and descent (offset from the bottom\n    to the baseline), in display coords, of the string *s* with\n    :class:`~matplotlib.font_manager.FontProperties` *prop*\n    \"\"\"\n    if ismath == 'TeX':\n        # todo: handle props\n        texmanager = self._text2path.get_texmanager()\n        fontsize = prop.get_size_in_points()\n        w, h, d = texmanager.get_text_width_height_descent(\n            s, fontsize, renderer=self)\n        return w, h, d\n\n    dpi = self.points_to_pixels(72)\n    if ismath:\n        dims = self._text2path.mathtext_parser.parse(s, dpi, prop)\n        return dims[0:3]  # return width, height, descent\n\n    flags = self._text2path._get_hinting_flag()\n    font = self._text2path._get_font(prop)\n    size = prop.get_size_in_points()\n    font.set_size(size, dpi)\n    # the width and height of unrotated string\n    font.set_text(s, 0.0, flags=flags)\n    w, h = font.get_width_height()\n    d = font.get_descent()\n    w /= 64.0  # convert from subpixels\n    h /= 64.0\n    d /= 64.0\n    return w, h, d",
                "def flipy(self):\n    \"\"\"\n    Return whether y values increase from top to bottom.\n\n    Note that this only affects drawing of texts and images.\n    \"\"\"\n    return True",
                "def get_canvas_width_height(self):\n    \"\"\"Return the canvas width and height in display coords.\"\"\"\n    return 1, 1",
                "def get_texmanager(self):\n    \"\"\"Return the `.TexManager` instance.\"\"\"\n    if self._texmanager is None:\n        from matplotlib.texmanager import TexManager\n        self._texmanager = TexManager()\n    return self._texmanager",
                "def new_gc(self):\n    \"\"\"Return an instance of a `GraphicsContextBase`.\"\"\"\n    return GraphicsContextBase()",
                "def points_to_pixels(self, points):\n    \"\"\"\n    Convert points to display units.\n\n    You need to override this function (unless your backend\n    doesn't have a dpi, e.g., postscript or svg).  Some imaging\n    systems assume some value for pixels per inch::\n\n        points to pixels = points * pixels_per_inch/72 * dpi/72\n\n    Parameters\n    ----------\n    points : float or array-like\n        a float or a numpy array of float\n\n    Returns\n    -------\n    Points converted to pixels\n    \"\"\"\n    return points",
                "@cbook.deprecated(\"3.1\", alternative=\"cbook.strip_math\")\ndef strip_math(self, s):\n    return cbook.strip_math(s)",
                "def start_rasterizing(self):\n    \"\"\"\n    Switch to the raster renderer.\n\n    Used by `MixedModeRenderer`.\n    \"\"\"",
                "def stop_rasterizing(self):\n    \"\"\"\n    Switch back to the vector renderer and draw the contents of the raster\n    renderer as an image on the vector renderer.\n\n    Used by `MixedModeRenderer`.\n    \"\"\"",
                "def start_filter(self):\n    \"\"\"\n    Switch to a temporary renderer for image filtering effects.\n\n    Currently only supported by the agg renderer.\n    \"\"\"",
                "def stop_filter(self, filter_func):\n    \"\"\"\n    Switch back to the original renderer.  The contents of the temporary\n    renderer is processed with the *filter_func* and is drawn on the\n    original renderer as an image.\n\n    Currently only supported by the agg renderer.\n    \"\"\"",
                "def __init__(self):\n    self._alpha = 1.0\n    self._forced_alpha = False  # if True, _alpha overrides A from RGBA\n    self._antialiased = 1  # use 0, 1 not True, False for extension code\n    self._capstyle = 'butt'\n    self._cliprect = None\n    self._clippath = None\n    self._dashes = None, None\n    self._joinstyle = 'round'\n    self._linestyle = 'solid'\n    self._linewidth = 1\n    self._rgb = (0.0, 0.0, 0.0, 1.0)\n    self._hatch = None\n    self._hatch_color = colors.to_rgba(rcParams['hatch.color'])\n    self._hatch_linewidth = rcParams['hatch.linewidth']\n    self._url = None\n    self._gid = None\n    self._snap = None\n    self._sketch = None",
                "def copy_properties(self, gc):\n    'Copy properties from gc to self'\n    self._alpha = gc._alpha\n    self._forced_alpha = gc._forced_alpha\n    self._antialiased = gc._antialiased\n    self._capstyle = gc._capstyle\n    self._cliprect = gc._cliprect\n    self._clippath = gc._clippath\n    self._dashes = gc._dashes\n    self._joinstyle = gc._joinstyle\n    self._linestyle = gc._linestyle\n    self._linewidth = gc._linewidth\n    self._rgb = gc._rgb\n    self._hatch = gc._hatch\n    self._hatch_color = gc._hatch_color\n    self._hatch_linewidth = gc._hatch_linewidth\n    self._url = gc._url\n    self._gid = gc._gid\n    self._snap = gc._snap\n    self._sketch = gc._sketch",
                "def restore(self):\n    \"\"\"\n    Restore the graphics context from the stack - needed only\n    for backends that save graphics contexts on a stack.\n    \"\"\"",
                "def get_alpha(self):\n    \"\"\"\n    Return the alpha value used for blending - not supported on\n    all backends.\n    \"\"\"\n    return self._alpha",
                "def get_antialiased(self):\n    \"Return whether the object should try to do antialiased rendering.\"\n    return self._antialiased",
                "def get_capstyle(self):\n    \"\"\"\n    Return the capstyle as a string in ('butt', 'round', 'projecting').\n    \"\"\"\n    return self._capstyle",
                "def get_clip_rectangle(self):\n    \"\"\"\n    Return the clip rectangle as a `~matplotlib.transforms.Bbox` instance.\n    \"\"\"\n    return self._cliprect",
                "def get_clip_path(self):\n    \"\"\"\n    Return the clip path in the form (path, transform), where path\n    is a :class:`~matplotlib.path.Path` instance, and transform is\n    an affine transform to apply to the path before clipping.\n    \"\"\"\n    if self._clippath is not None:\n        return self._clippath.get_transformed_path_and_affine()\n    return None, None",
                "def get_dashes(self):\n    \"\"\"\n    Return the dash style as an (offset, dash-list) pair.\n\n    The dash list is a even-length list that gives the ink on, ink off in\n    points.  See p. 107 of to PostScript `blue book`_ for more info.\n\n    Default value is (None, None).\n\n    .. _blue book: https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF\n    \"\"\"\n    return self._dashes",
                "def get_forced_alpha(self):\n    \"\"\"\n    Return whether the value given by get_alpha() should be used to\n    override any other alpha-channel values.\n    \"\"\"\n    return self._forced_alpha",
                "def get_joinstyle(self):\n    \"\"\"Return the line join style as one of ('miter', 'round', 'bevel').\"\"\"\n    return self._joinstyle",
                "def get_linewidth(self):\n    \"\"\"Return the line width in points.\"\"\"\n    return self._linewidth",
                "def get_rgb(self):\n    \"\"\"Return a tuple of three or four floats from 0-1.\"\"\"\n    return self._rgb",
                "def get_url(self):\n    \"\"\"Return a url if one is set, None otherwise.\"\"\"\n    return self._url",
                "def get_gid(self):\n    \"\"\"Return the object identifier if one is set, None otherwise.\"\"\"\n    return self._gid",
                "def get_snap(self):\n    \"\"\"\n    Returns the snap setting, which can be:\n\n    * True: snap vertices to the nearest pixel center\n    * False: leave vertices as-is\n    * None: (auto) If the path contains only rectilinear line segments,\n      round to the nearest pixel center\n    \"\"\"\n    return self._snap",
                "def set_alpha(self, alpha):\n    \"\"\"\n    Set the alpha value used for blending - not supported on all backends.\n\n    If ``alpha=None`` (the default), the alpha components of the\n    foreground and fill colors will be used to set their respective\n    transparencies (where applicable); otherwise, ``alpha`` will override\n    them.\n    \"\"\"\n    if alpha is not None:\n        self._alpha = alpha\n        self._forced_alpha = True\n    else:\n        self._alpha = 1.0\n        self._forced_alpha = False\n    self.set_foreground(self._rgb, isRGBA=True)",
                "def set_antialiased(self, b):\n    \"\"\"Set whether object should be drawn with antialiased rendering.\"\"\"\n    # Use ints to make life easier on extension code trying to read the gc.\n    self._antialiased = int(bool(b))",
                "def set_capstyle(self, cs):\n    \"\"\"Set the capstyle to be one of ('butt', 'round', 'projecting').\"\"\"\n    cbook._check_in_list(['butt', 'round', 'projecting'], cs=cs)\n    self._capstyle = cs",
                "def set_clip_rectangle(self, rectangle):\n    \"\"\"\n    Set the clip rectangle with sequence (left, bottom, width, height)\n    \"\"\"\n    self._cliprect = rectangle",
                "def set_clip_path(self, path):\n    \"\"\"\n    Set the clip path and transformation.\n\n    Parameters\n    ----------\n    path : `~matplotlib.transforms.TransformedPath` or None\n    \"\"\"\n    cbook._check_isinstance((transforms.TransformedPath, None), path=path)\n    self._clippath = path",
                "def set_dashes(self, dash_offset, dash_list):\n    \"\"\"\n    Set the dash style for the gc.\n\n    Parameters\n    ----------\n    dash_offset : float or None\n        The offset (usually 0).\n    dash_list : array-like or None\n        The on-off sequence as points.\n\n    Notes\n    -----\n    ``(None, None)`` specifies a solid line.\n\n    See p. 107 of to PostScript `blue book`_ for more info.\n\n    .. _blue book: https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF\n    \"\"\"\n    if dash_list is not None:\n        dl = np.asarray(dash_list)\n        if np.any(dl < 0.0):\n            raise ValueError(\n                \"All values in the dash list must be positive\")\n    self._dashes = dash_offset, dash_list",
                "def set_foreground(self, fg, isRGBA=False):\n    \"\"\"\n    Set the foreground color.\n\n    Parameters\n    ----------\n    fg : color\n    isRGBA : bool\n        If *fg* is known to be an ``(r, g, b, a)`` tuple, *isRGBA* can be\n        set to True to improve performance.\n    \"\"\"\n    if self._forced_alpha and isRGBA:\n        self._rgb = fg[:3] + (self._alpha,)\n    elif self._forced_alpha:\n        self._rgb = colors.to_rgba(fg, self._alpha)\n    elif isRGBA:\n        self._rgb = fg\n    else:\n        self._rgb = colors.to_rgba(fg)",
                "def set_joinstyle(self, js):\n    \"\"\"Set the join style to be one of ('miter', 'round', 'bevel').\"\"\"\n    cbook._check_in_list(['miter', 'round', 'bevel'], js=js)\n    self._joinstyle = js",
                "def set_linewidth(self, w):\n    \"\"\"Set the linewidth in points.\"\"\"\n    self._linewidth = float(w)",
                "def set_url(self, url):\n    \"\"\"Set the url for links in compatible backends.\"\"\"\n    self._url = url",
                "def set_gid(self, id):\n    \"\"\"Set the id.\"\"\"\n    self._gid = id",
                "def set_snap(self, snap):\n    \"\"\"\n    Set the snap setting which may be:\n\n    * True: snap vertices to the nearest pixel center\n    * False: leave vertices as-is\n    * None: (auto) If the path contains only rectilinear line segments,\n      round to the nearest pixel center\n    \"\"\"\n    self._snap = snap",
                "def set_hatch(self, hatch):\n    \"\"\"Set the hatch style (for fills).\"\"\"\n    self._hatch = hatch",
                "def get_hatch(self):\n    \"\"\"Get the current hatch style.\"\"\"\n    return self._hatch",
                "def get_hatch_path(self, density=6.0):\n    \"\"\"Return a `Path` for the current hatch.\"\"\"\n    hatch = self.get_hatch()\n    if hatch is None:\n        return None\n    return Path.hatch(hatch, density)",
                "def get_hatch_color(self):\n    \"\"\"Get the hatch color.\"\"\"\n    return self._hatch_color",
                "def set_hatch_color(self, hatch_color):\n    \"\"\"Set the hatch color.\"\"\"\n    self._hatch_color = hatch_color",
                "def get_hatch_linewidth(self):\n    \"\"\"Get the hatch linewidth.\"\"\"\n    return self._hatch_linewidth",
                "def get_sketch_params(self):\n    \"\"\"\n    Return the sketch parameters for the artist.\n\n    Returns\n    -------\n    sketch_params : tuple or `None`\n\n        A 3-tuple with the following elements:\n\n        * ``scale``: The amplitude of the wiggle perpendicular to the\n          source line.\n        * ``length``: The length of the wiggle along the line.\n        * ``randomness``: The scale factor by which the length is\n          shrunken or expanded.\n\n        May return `None` if no sketch parameters were set.\n    \"\"\"\n    return self._sketch",
                "def set_sketch_params(self, scale=None, length=None, randomness=None):\n    \"\"\"\n    Set the sketch parameters.\n\n    Parameters\n    ----------\n    scale : float, optional\n        The amplitude of the wiggle perpendicular to the source line, in\n        pixels.  If scale is `None`, or not provided, no sketch filter will\n        be provided.\n    length : float, default: 128\n         The length of the wiggle along the line, in pixels.\n    randomness : float, default: 16\n        The scale factor by which the length is shrunken or expanded.\n    \"\"\"\n    self._sketch = (\n        None if scale is None\n        else (scale, length or 128., randomness or 16.))",
                "def __init__(self, interval=None, callbacks=None):\n    #Initialize empty callbacks list and setup default settings if necssary\n    if callbacks is None:\n        self.callbacks = []\n    else:\n        self.callbacks = callbacks[:]  # Create a copy\n\n    if interval is None:\n        self._interval = 1000\n    else:\n        self._interval = interval\n\n    self._single = False\n\n    # Default attribute for holding the GUI-specific timer object\n    self._timer = None",
                "def __del__(self):\n    \"\"\"Need to stop timer and possibly disconnect timer.\"\"\"\n    self._timer_stop()",
                "def start(self, interval=None):\n    \"\"\"\n    Start the timer object.\n\n    Parameters\n    ----------\n    interval : int, optional\n        Timer interval in milliseconds; overrides a previously set interval\n        if provided.\n    \"\"\"\n    if interval is not None:\n        self._set_interval(interval)\n    self._timer_start()",
                "def stop(self):\n    \"\"\"Stop the timer.\"\"\"\n    self._timer_stop()",
                "def _timer_start(self):\n    pass",
                "def _timer_stop(self):\n    pass",
                "@property\ndef interval(self):\n    return self._interval",
                "@interval.setter\ndef interval(self, interval):\n    # Force to int since none of the backends actually support fractional\n    # milliseconds, and some error or give warnings.\n    interval = int(interval)\n    self._interval = interval\n    self._timer_set_interval()",
                "@property\ndef single_shot(self):\n    return self._single",
                "@single_shot.setter\ndef single_shot(self, ss):\n    self._single = ss\n    self._timer_set_single_shot()",
                "def add_callback(self, func, *args, **kwargs):\n    \"\"\"\n    Register *func* to be called by timer when the event fires. Any\n    additional arguments provided will be passed to *func*.\n\n    This function returns *func*, which makes it possible to use it as a\n    decorator.\n    \"\"\"\n    self.callbacks.append((func, args, kwargs))\n    return func",
                "def remove_callback(self, func, *args, **kwargs):\n    \"\"\"\n    Remove *func* from list of callbacks.\n\n    *args* and *kwargs* are optional and used to distinguish between copies\n    of the same function registered to be called with different arguments.\n    This behavior is deprecated.  In the future, `*args, **kwargs` won't be\n    considered anymore; to keep a specific callback removable by itself,\n    pass it to `add_callback` as a `functools.partial` object.\n    \"\"\"\n    if args or kwargs:\n        cbook.warn_deprecated(\n            \"3.1\", message=\"In a future version, Timer.remove_callback \"\n            \"will not take *args, **kwargs anymore, but remove all \"\n            \"callbacks where the callable matches; to keep a specific \"\n            \"callback removable by itself, pass it to add_callback as a \"\n            \"functools.partial object.\")\n        self.callbacks.remove((func, args, kwargs))\n    else:\n        funcs = [c[0] for c in self.callbacks]\n        if func in funcs:\n            self.callbacks.pop(funcs.index(func))",
                "def _timer_set_interval(self):\n    \"\"\"Used to set interval on underlying timer object.\"\"\"",
                "def _timer_set_single_shot(self):\n    \"\"\"Used to set single shot on underlying timer object.\"\"\"",
                "def _on_timer(self):\n    \"\"\"\n    Runs all function that have been registered as callbacks. Functions\n    can return False (or 0) if they should not be called any more. If there\n    are no callbacks, the timer is automatically stopped.\n    \"\"\"\n    for func, args, kwargs in self.callbacks:\n        ret = func(*args, **kwargs)\n        # docstring above explains why we use `if ret == 0` here,\n        # instead of `if not ret`.\n        # This will also catch `ret == False` as `False == 0`\n        # but does not annoy the linters\n        # https://docs.python.org/3/library/stdtypes.html#boolean-values\n        if ret == 0:\n            self.callbacks.remove((func, args, kwargs))\n\n    if len(self.callbacks) == 0:\n        self.stop()",
                "def __init__(self, name, canvas, guiEvent=None):\n    self.name = name\n    self.canvas = canvas\n    self.guiEvent = guiEvent",
                "def __init__(self, name, canvas, renderer):\n    Event.__init__(self, name, canvas)\n    self.renderer = renderer",
                "def __init__(self, name, canvas):\n    Event.__init__(self, name, canvas)\n    self.width, self.height = canvas.get_width_height()",
                "def __init__(self, name, canvas, x, y, guiEvent=None):\n    \"\"\"\n    (*x*, *y*) in figure coords ((0, 0) = bottom left).\n    \"\"\"\n    Event.__init__(self, name, canvas, guiEvent=guiEvent)\n    # x position - pixels from left of canvas\n    self.x = int(x) if x is not None else x\n    # y position - pixels from right of canvas\n    self.y = int(y) if y is not None else y\n    self.inaxes = None  # the Axes instance if mouse us over axes\n    self.xdata = None   # x coord of mouse in data coords\n    self.ydata = None   # y coord of mouse in data coords\n\n    if x is None or y is None:\n        # cannot check if event was in axes if no (x, y) info\n        self._update_enter_leave()\n        return\n\n    if self.canvas.mouse_grabber is None:\n        self.inaxes = self.canvas.inaxes((x, y))\n    else:\n        self.inaxes = self.canvas.mouse_grabber\n\n    if self.inaxes is not None:\n        try:\n            trans = self.inaxes.transData.inverted()\n            xdata, ydata = trans.transform((x, y))\n        except ValueError:\n            pass\n        else:\n            self.xdata = xdata\n            self.ydata = ydata\n\n    self._update_enter_leave()",
                "def _update_enter_leave(self):\n    'process the figure/axes enter leave events'\n    if LocationEvent.lastevent is not None:\n        last = LocationEvent.lastevent\n        if last.inaxes != self.inaxes:\n            # process axes enter/leave events\n            try:\n                if last.inaxes is not None:\n                    last.canvas.callbacks.process('axes_leave_event', last)\n            except Exception:\n                pass\n                # See ticket 2901582.\n                # I think this is a valid exception to the rule\n                # against catching all exceptions; if anything goes\n                # wrong, we simply want to move on and process the\n                # current event.\n            if self.inaxes is not None:\n                self.canvas.callbacks.process('axes_enter_event', self)\n\n    else:\n        # process a figure enter event\n        if self.inaxes is not None:\n            self.canvas.callbacks.process('axes_enter_event', self)\n\n    LocationEvent.lastevent = self",
                "def __init__(self, name, canvas, x, y, button=None, key=None,\n             step=0, dblclick=False, guiEvent=None):\n    \"\"\"\n    (*x*, *y*) in figure coords ((0, 0) = bottom left)\n    button pressed None, 1, 2, 3, 'up', 'down'\n    \"\"\"\n    LocationEvent.__init__(self, name, canvas, x, y, guiEvent=guiEvent)\n    if button in MouseButton.__members__.values():\n        button = MouseButton(button)\n    self.button = button\n    self.key = key\n    self.step = step\n    self.dblclick = dblclick",
                "def __str__(self):\n    return (f\"{self.name}: \"\n            f\"xy=({self.x}, {self.y}) xydata=({self.xdata}, {self.ydata}) \"\n            f\"button={self.button} dblclick={self.dblclick} \"\n            f\"inaxes={self.inaxes}\")",
                "def __init__(self, name, canvas, mouseevent, artist,\n             guiEvent=None, **kwargs):\n    Event.__init__(self, name, canvas, guiEvent)\n    self.mouseevent = mouseevent\n    self.artist = artist\n    self.__dict__.update(kwargs)",
                "def __init__(self, name, canvas, key, x=0, y=0, guiEvent=None):\n    LocationEvent.__init__(self, name, canvas, x, y, guiEvent=guiEvent)\n    self.key = key",
                "def _draw(renderer): raise Done(renderer)",
                "@cbook._classproperty\ndef supports_blit(cls):\n    return (hasattr(cls, \"copy_from_bbox\")\n            and hasattr(cls, \"restore_region\"))",
                "def __init__(self, figure):\n    self._fix_ipython_backend2gui()\n    self._is_idle_drawing = True\n    self._is_saving = False\n    figure.set_canvas(self)\n    self.figure = figure\n    # a dictionary from event name to a dictionary that maps cid->func\n    self.callbacks = cbook.CallbackRegistry()\n    self.widgetlock = widgets.LockDraw()\n    self._button = None  # the button pressed\n    self._key = None  # the key pressed\n    self._lastx, self._lasty = None, None\n    self.button_pick_id = self.mpl_connect('button_press_event', self.pick)\n    self.scroll_pick_id = self.mpl_connect('scroll_event', self.pick)\n    self.mouse_grabber = None  # the axes currently grabbing mouse\n    self.toolbar = None  # NavigationToolbar2 will set me\n    self._is_idle_drawing = False",
                "@classmethod\n@functools.lru_cache()\ndef _fix_ipython_backend2gui(cls):\n    # Fix hard-coded module -> toolkit mapping in IPython (used for\n    # `ipython --auto`).  This cannot be done at import time due to\n    # ordering issues, so we do it when creating a canvas, and should only\n    # be done once per class (hence the `lru_cache(1)`).\n    if \"IPython\" not in sys.modules:\n        return\n    import IPython\n    ip = IPython.get_ipython()\n    if not ip:\n        return\n    from IPython.core import pylabtools as pt\n    if (not hasattr(pt, \"backend2gui\")\n            or not hasattr(ip, \"enable_matplotlib\")):\n        # In case we ever move the patch to IPython and remove these APIs,\n        # don't break on our side.\n        return\n    rif = getattr(cls, \"required_interactive_framework\", None)\n    backend2gui_rif = {\"qt5\": \"qt\", \"qt4\": \"qt\", \"gtk3\": \"gtk3\",\n                       \"wx\": \"wx\", \"macosx\": \"osx\"}.get(rif)\n    if backend2gui_rif:\n        if _is_non_interactive_terminal_ipython(ip):\n            ip.enable_gui(backend2gui_rif)",
                "@contextmanager\ndef _idle_draw_cntx(self):\n    self._is_idle_drawing = True\n    yield\n    self._is_idle_drawing = False",
                "def is_saving(self):\n    \"\"\"\n    Returns whether the renderer is in the process of saving\n    to a file, rather than rendering for an on-screen buffer.\n    \"\"\"\n    return self._is_saving",
                "def pick(self, mouseevent):\n    if not self.widgetlock.locked():\n        self.figure.pick(mouseevent)",
                "def blit(self, bbox=None):\n    \"\"\"Blit the canvas in bbox (default entire canvas).\"\"\"",
                "def resize(self, w, h):\n    \"\"\"Set the canvas size in pixels.\"\"\"",
                "def draw_event(self, renderer):\n    \"\"\"Pass a `DrawEvent` to all functions connected to ``draw_event``.\"\"\"\n    s = 'draw_event'\n    event = DrawEvent(s, self, renderer)\n    self.callbacks.process(s, event)",
                "def resize_event(self):\n    \"\"\"\n    Pass a `ResizeEvent` to all functions connected to ``resize_event``.\n    \"\"\"\n    s = 'resize_event'\n    event = ResizeEvent(s, self)\n    self.callbacks.process(s, event)\n    self.draw_idle()",
                "def close_event(self, guiEvent=None):\n    \"\"\"\n    Pass a `CloseEvent` to all functions connected to ``close_event``.\n    \"\"\"\n    s = 'close_event'\n    try:\n        event = CloseEvent(s, self, guiEvent=guiEvent)\n        self.callbacks.process(s, event)\n    except (TypeError, AttributeError):\n        pass",
                "def key_press_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_press_event``.\n    \"\"\"\n    self._key = key\n    s = 'key_press_event'\n    event = KeyEvent(\n        s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                "def key_release_event(self, key, guiEvent=None):\n    \"\"\"\n    Pass a `KeyEvent` to all functions connected to ``key_release_event``.\n    \"\"\"\n    s = 'key_release_event'\n    event = KeyEvent(\n        s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._key = None",
                "def pick_event(self, mouseevent, artist, **kwargs):\n    \"\"\"\n    This method will be called by artists who are picked and will\n    fire off :class:`PickEvent` callbacks registered listeners\n    \"\"\"\n    s = 'pick_event'\n    event = PickEvent(s, self, mouseevent, artist,\n                      guiEvent=mouseevent.guiEvent,\n                      **kwargs)\n    self.callbacks.process(s, event)",
                "def scroll_event(self, x, y, step, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any\n    scroll wheel event.  (*x*, *y*) are the canvas coords ((0, 0) is lower\n    left).  button and key are as defined in MouseEvent.\n\n    This method will be call all functions connected to the\n    'scroll_event' with a :class:`MouseEvent` instance.\n    \"\"\"\n    if step >= 0:\n        self._button = 'up'\n    else:\n        self._button = 'down'\n    s = 'scroll_event'\n    mouseevent = MouseEvent(s, self, x, y, self._button, self._key,\n                            step=step, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                "def button_press_event(self, x, y, button, dblclick=False, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any mouse\n    button press.  (*x*, *y*) are the canvas coords ((0, 0) is lower left).\n    button and key are as defined in :class:`MouseEvent`.\n\n    This method will be call all functions connected to the\n    'button_press_event' with a :class:`MouseEvent` instance.\n    \"\"\"\n    self._button = button\n    s = 'button_press_event'\n    mouseevent = MouseEvent(s, self, x, y, button, self._key,\n                            dblclick=dblclick, guiEvent=guiEvent)\n    self.callbacks.process(s, mouseevent)",
                "def button_release_event(self, x, y, button, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any mouse\n    button release.\n\n    This method will call all functions connected to the\n    'button_release_event' with a :class:`MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    s = 'button_release_event'\n    event = MouseEvent(s, self, x, y, button, self._key, guiEvent=guiEvent)\n    self.callbacks.process(s, event)\n    self._button = None",
                "def motion_notify_event(self, x, y, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function on any\n    motion-notify-event.\n\n    This method will call all functions connected to the\n    'motion_notify_event' with a :class:`MouseEvent` instance.\n\n    Parameters\n    ----------\n    x : float\n        The canvas coordinates where 0=left.\n    y : float\n        The canvas coordinates where 0=bottom.\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self._lastx, self._lasty = x, y\n    s = 'motion_notify_event'\n    event = MouseEvent(s, self, x, y, self._button, self._key,\n                       guiEvent=guiEvent)\n    self.callbacks.process(s, event)",
                "def leave_notify_event(self, guiEvent=None):\n    \"\"\"\n    Backend derived classes should call this function when leaving\n    canvas\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    \"\"\"\n    self.callbacks.process('figure_leave_event', LocationEvent.lastevent)\n    LocationEvent.lastevent = None\n    self._lastx, self._lasty = None, None",
                "def enter_notify_event(self, guiEvent=None, xy=None):\n    \"\"\"\n    Backend derived classes should call this function when entering\n    canvas\n\n    Parameters\n    ----------\n    guiEvent\n        The native UI event that generated the Matplotlib event.\n    xy : (float, float)\n        The coordinate location of the pointer when the canvas is entered.\n    \"\"\"\n    if xy is not None:\n        x, y = xy\n        self._lastx, self._lasty = x, y\n    else:\n        x = None\n        y = None\n        cbook.warn_deprecated(\n            '3.0', message='enter_notify_event expects a location but '\n            'your backend did not pass one.')\n\n    event = LocationEvent('figure_enter_event', self, x, y, guiEvent)\n    self.callbacks.process('figure_enter_event', event)",
                "def inaxes(self, xy):\n    \"\"\"\n    Check if a point is in an axes.\n\n    Parameters\n    ----------\n    xy : tuple or list\n        (x, y) coordinates.\n        x position - pixels from left of canvas.\n        y position - pixels from bottom of canvas.\n\n    Returns\n    -------\n    axes: topmost axes containing the point, or None if no axes.\n\n    \"\"\"\n    axes_list = [a for a in self.figure.get_axes()\n                 if a.patch.contains_point(xy)]\n\n    if axes_list:\n        axes = cbook._topmost_artist(axes_list)\n    else:\n        axes = None\n\n    return axes",
                "def grab_mouse(self, ax):\n    \"\"\"\n    Set the child axes which are currently grabbing the mouse events.\n    Usually called by the widgets themselves.\n    It is an error to call this if the mouse is already grabbed by\n    another axes.\n    \"\"\"\n    if self.mouse_grabber not in (None, ax):\n        raise RuntimeError(\"Another Axes already grabs mouse input\")\n    self.mouse_grabber = ax",
                "def release_mouse(self, ax):\n    \"\"\"\n    Release the mouse grab held by the axes, ax.\n    Usually called by the widgets.\n    It is ok to call this even if you ax doesn't have the mouse\n    grab currently.\n    \"\"\"\n    if self.mouse_grabber is ax:\n        self.mouse_grabber = None",
                "def draw(self, *args, **kwargs):\n    \"\"\"Render the :class:`~matplotlib.figure.Figure`.\"\"\"",
                "def draw_idle(self, *args, **kwargs):\n    \"\"\"\n    Request a widget redraw once control returns to the GUI event loop.\n\n    Even if multiple calls to `draw_idle` occur before control returns\n    to the GUI event loop, the figure will only be rendered once.\n\n    Notes\n    -----\n    Backends may choose to override the method and implement their own\n    strategy to prevent multiple renderings.\n\n    \"\"\"\n    if not self._is_idle_drawing:\n        with self._idle_draw_cntx():\n            self.draw(*args, **kwargs)",
                "@cbook.deprecated(\"3.2\")\ndef draw_cursor(self, event):\n    \"\"\"\n    Draw a cursor in the event.axes if inaxes is not None.  Use\n    native GUI drawing for efficiency if possible\n    \"\"\"",
                "def get_width_height(self):\n    \"\"\"\n    Return the figure width and height in points or pixels\n    (depending on the backend), truncated to integers\n    \"\"\"\n    return int(self.figure.bbox.width), int(self.figure.bbox.height)",
                "@classmethod\ndef get_supported_filetypes(cls):\n    \"\"\"Return dict of savefig file formats supported by this backend.\"\"\"\n    return cls.filetypes",
                "@classmethod\ndef get_supported_filetypes_grouped(cls):\n    \"\"\"\n    Return a dict of savefig file formats supported by this backend,\n    where the keys are a file type name, such as 'Joint Photographic\n    Experts Group', and the values are a list of filename extensions used\n    for that filetype, such as ['jpg', 'jpeg'].\n    \"\"\"\n    groupings = {}\n    for ext, name in cls.filetypes.items():\n        groupings.setdefault(name, []).append(ext)\n        groupings[name].sort()\n    return groupings",
                "def _get_output_canvas(self, fmt):\n    \"\"\"\n    Return a canvas suitable for saving figures to a specified file format.\n\n    If necessary, this function will switch to a registered backend that\n    supports the format.\n    \"\"\"\n    # Return the current canvas if it supports the requested format.\n    if hasattr(self, 'print_{}'.format(fmt)):\n        return self\n    # Return a default canvas for the requested format, if it exists.\n    canvas_class = get_registered_canvas_class(fmt)\n    if canvas_class:\n        return self.switch_backends(canvas_class)\n    # Else report error for unsupported format.\n    raise ValueError(\n        \"Format {!r} is not supported (supported formats: {})\"\n        .format(fmt, \", \".join(sorted(self.get_supported_filetypes()))))",
                "    def print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None,\n                     orientation='portrait', format=None,\n                     *, bbox_inches=None, **kwargs):\n        \"\"\"\n        Render the figure to hardcopy. Set the figure patch face and edge\n        colors.  This is useful because some of the GUIs have a gray figure\n        face color background and you'll probably want to override this on\n        hardcopy.\n\n        Parameters\n        ----------\n        filename\n            can also be a file object on image backends\n\n        orientation : {'landscape', 'portrait'}, default: 'portrait'\n            only currently applies to PostScript printing.\n\n        dpi : scalar, optional\n            the dots per inch to save the figure in; if None, use savefig.dpi\n\n        facecolor : color, default: :rc:`savefig.facecolor`\n            The facecolor of the figure.\n\n        edgecolor : color, default: :rc:`savefig.edgecolor`\n            The edgecolor of the figure.\n\n        format : str, optional\n            Force a specific file format. If not given, the format is inferred\n            from the *filename* extension, and if that fails from\n            :rc:`savefig.format`.\n\n        bbox_inches : 'tight' or `~matplotlib.transforms.Bbox`, \\\ndefault: :rc:`savefig.bbox`\n            Bbox in inches. Only the given portion of the figure is\n            saved. If 'tight', try to figure out the tight bbox of\n            the figure.\n\n        pad_inches : float, default: :rc:`savefig.pad_inches`\n            Amount of padding around the figure when *bbox_inches* is 'tight'.\n\n        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n            A list of extra artists that will be considered when the\n            tight bbox is calculated.\n\n        \"\"\"\n        if format is None:\n            # get format from filename, or from backend's default filetype\n            if isinstance(filename, os.PathLike):\n                filename = os.fspath(filename)\n            if isinstance(filename, str):\n                format = os.path.splitext(filename)[1][1:]\n            if format is None or format == '':\n                format = self.get_default_filetype()\n                if isinstance(filename, str):\n                    filename = filename.rstrip('.') + '.' + format\n        format = format.lower()\n\n        # get canvas object and print method for format\n        canvas = self._get_output_canvas(format)\n        print_method = getattr(canvas, 'print_%s' % format)\n\n        if dpi is None:\n            dpi = rcParams['savefig.dpi']\n        if dpi == 'figure':\n            dpi = getattr(self.figure, '_original_dpi', self.figure.dpi)\n\n        # Remove the figure manager, if any, to avoid resizing the GUI widget.\n        # Some code (e.g. Figure.show) differentiates between having *no*\n        # manager and a *None* manager, which should be fixed at some point,\n        # but this should be fine.\n        with cbook._setattr_cm(self, _is_saving=True, manager=None), \\\n                cbook._setattr_cm(self.figure, dpi=dpi):\n\n            if facecolor is None:\n                facecolor = rcParams['savefig.facecolor']\n            if edgecolor is None:\n                edgecolor = rcParams['savefig.edgecolor']\n\n            origfacecolor = self.figure.get_facecolor()\n            origedgecolor = self.figure.get_edgecolor()\n\n            self.figure.set_facecolor(facecolor)\n            self.figure.set_edgecolor(edgecolor)\n\n            if bbox_inches is None:\n                bbox_inches = rcParams['savefig.bbox']\n\n            if bbox_inches:\n                if bbox_inches == \"tight\":\n                    renderer = _get_renderer(\n                        self.figure,\n                        functools.partial(\n                            print_method, dpi=dpi, orientation=orientation))\n                    self.figure.draw(renderer)\n                    bbox_artists = kwargs.pop(\"bbox_extra_artists\", None)\n                    bbox_inches = self.figure.get_tightbbox(renderer,\n                            bbox_extra_artists=bbox_artists)\n                    pad = kwargs.pop(\"pad_inches\", None)\n                    if pad is None:\n                        pad = rcParams['savefig.pad_inches']\n\n                    bbox_inches = bbox_inches.padded(pad)\n\n                # call adjust_bbox to save only the given area\n                restore_bbox = tight_bbox.adjust_bbox(self.figure, bbox_inches,\n                                                      canvas.fixed_dpi)\n\n                _bbox_inches_restore = (bbox_inches, restore_bbox)\n            else:\n                _bbox_inches_restore = None\n\n            try:\n                result = print_method(\n                    filename,\n                    dpi=dpi,\n                    facecolor=facecolor,\n                    edgecolor=edgecolor,\n                    orientation=orientation,\n                    bbox_inches_restore=_bbox_inches_restore,\n                    **kwargs)\n            finally:\n                if bbox_inches and restore_bbox:\n                    restore_bbox()\n\n                self.figure.set_facecolor(origfacecolor)\n                self.figure.set_edgecolor(origedgecolor)\n                self.figure.set_canvas(self)\n            return result",
                "@classmethod\ndef get_default_filetype(cls):\n    \"\"\"\n    Get the default savefig file format as specified in rcParam\n    ``savefig.format``. Returned string excludes period. Overridden\n    in backends that only support a single file type.\n    \"\"\"\n    return rcParams['savefig.format']",
                "def get_window_title(self):\n    \"\"\"\n    Get the title text of the window containing the figure.\n    Return None if there is no window (e.g., a PS backend).\n    \"\"\"\n    if hasattr(self, \"manager\"):\n        return self.manager.get_window_title()",
                "def set_window_title(self, title):\n    \"\"\"\n    Set the title text of the window containing the figure.  Note that\n    this has no effect if there is no window (e.g., a PS backend).\n    \"\"\"\n    if hasattr(self, \"manager\"):\n        self.manager.set_window_title(title)",
                "def get_default_filename(self):\n    \"\"\"\n    Return a string, which includes extension, suitable for use as\n    a default filename.\n    \"\"\"\n    default_basename = self.get_window_title() or 'image'\n    default_basename = default_basename.replace(' ', '_')\n    default_filetype = self.get_default_filetype()\n    default_filename = default_basename + '.' + default_filetype\n    return default_filename",
                "def switch_backends(self, FigureCanvasClass):\n    \"\"\"\n    Instantiate an instance of FigureCanvasClass\n\n    This is used for backend switching, e.g., to instantiate a\n    FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is\n    not done, so any changes to one of the instances (e.g., setting\n    figure size or line props), will be reflected in the other\n    \"\"\"\n    newCanvas = FigureCanvasClass(self.figure)\n    newCanvas._is_saving = self._is_saving\n    return newCanvas",
                "def mpl_connect(self, s, func):\n    \"\"\"\n    Bind function *func* to event *s*.\n\n    Parameters\n    ----------\n    s : str\n        One of the following events ids:\n\n        - 'button_press_event'\n        - 'button_release_event'\n        - 'draw_event'\n        - 'key_press_event'\n        - 'key_release_event'\n        - 'motion_notify_event'\n        - 'pick_event'\n        - 'resize_event'\n        - 'scroll_event'\n        - 'figure_enter_event',\n        - 'figure_leave_event',\n        - 'axes_enter_event',\n        - 'axes_leave_event'\n        - 'close_event'.\n\n    func : callable\n        The callback function to be executed, which must have the\n        signature::\n\n            def func(event: Event) -> Any\n\n        For the location events (button and key press/release), if the\n        mouse is over the axes, the ``inaxes`` attribute of the event will\n        be set to the `~matplotlib.axes.Axes` the event occurs is over, and\n        additionally, the variables ``xdata`` and ``ydata`` attributes will\n        be set to the mouse location in data coordinates.  See `.KeyEvent`\n        and `.MouseEvent` for more info.\n\n    Returns\n    -------\n    cid\n        A connection id that can be used with\n        `.FigureCanvasBase.mpl_disconnect`.\n\n    Examples\n    --------\n    ::\n\n        def on_press(event):\n            print('you pressed', event.button, event.xdata, event.ydata)\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n    \"\"\"\n\n    return self.callbacks.connect(s, func)",
                "def mpl_disconnect(self, cid):\n    \"\"\"\n    Disconnect the callback with id *cid*.\n\n    Examples\n    --------\n    ::\n\n        cid = canvas.mpl_connect('button_press_event', on_press)\n        # ... later\n        canvas.mpl_disconnect(cid)\n    \"\"\"\n    return self.callbacks.disconnect(cid)",
                "def new_timer(self, *args, **kwargs):\n    \"\"\"\n    Create a new backend-specific subclass of `.Timer`.\n\n    This is useful for getting periodic events through the backend's native\n    event loop.  Implemented only for backends with GUIs.\n\n    Other Parameters\n    ----------------\n    interval : scalar\n        Timer interval in milliseconds\n\n    callbacks : List[Tuple[callable, Tuple, Dict]]\n        Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n        will be executed by the timer every *interval*.\n\n        Callbacks which return ``False`` or ``0`` will be removed from the\n        timer.\n\n    Examples\n    --------\n    >>> timer = fig.canvas.new_timer(callbacks=[(f1, (1, ), {'a': 3}),])\n    \"\"\"\n    return TimerBase(*args, **kwargs)",
                "def flush_events(self):\n    \"\"\"\n    Flush the GUI events for the figure.\n\n    Interactive backends need to reimplement this method.\n    \"\"\"",
                "def start_event_loop(self, timeout=0):\n    \"\"\"\n    Start a blocking event loop.\n\n    Such an event loop is used by interactive functions, such as `ginput`\n    and `waitforbuttonpress`, to wait for events.\n\n    The event loop blocks until a callback function triggers\n    `stop_event_loop`, or *timeout* is reached.\n\n    If *timeout* is negative, never timeout.\n\n    Only interactive backends need to reimplement this method and it relies\n    on `flush_events` being properly implemented.\n\n    Interactive backends should implement this in a more native way.\n    \"\"\"\n    if timeout <= 0:\n        timeout = np.inf\n    timestep = 0.01\n    counter = 0\n    self._looping = True\n    while self._looping and counter * timestep < timeout:\n        self.flush_events()\n        time.sleep(timestep)\n        counter += 1",
                "def stop_event_loop(self):\n    \"\"\"\n    Stop the current blocking event loop.\n\n    Interactive backends need to reimplement this to match\n    `start_event_loop`\n    \"\"\"\n    self._looping = False",
                "def _get_uniform_gridstate(ticks):\n    # Return True/False if all grid lines are on or off, None if they are\n    # not all in the same state.\n    if all(tick.gridline.get_visible() for tick in ticks):\n        return True\n    elif not any(tick.gridline.get_visible() for tick in ticks):\n        return False\n    else:\n        return None",
                "def __init__(self, canvas, num):\n    self.canvas = canvas\n    canvas.manager = self  # store a pointer to parent\n    self.num = num\n\n    self.key_press_handler_id = None\n    self.button_press_handler_id = None\n    if rcParams['toolbar'] != 'toolmanager':\n        self.key_press_handler_id = self.canvas.mpl_connect(\n            'key_press_event',\n            self.key_press)\n        self.button_press_handler_id = self.canvas.mpl_connect(\n            'button_press_event',\n            self.button_press)\n\n    self.toolmanager = None\n    self.toolbar = None\n\n    @self.canvas.figure.add_axobserver\n    def notify_axes_change(fig):\n        # Called whenever the current axes is changed.\n        if self.toolmanager is None and self.toolbar is not None:\n            self.toolbar.update()",
                "def show(self):\n    \"\"\"\n    For GUI backends, show the figure window and redraw.\n    For non-GUI backends, raise an exception to be caught\n    by :meth:`~matplotlib.figure.Figure.show`, for an\n    optional warning.\n    \"\"\"\n    raise NonGuiException()",
                "def destroy(self):\n    pass",
                "def full_screen_toggle(self):\n    pass",
                "def resize(self, w, h):\n    \"\"\"For GUI backends, resize the window (in pixels).\"\"\"",
                "def key_press(self, event):\n    \"\"\"\n    Implement the default Matplotlib key bindings defined at\n    :ref:`key-event-handling`.\n    \"\"\"\n    if rcParams['toolbar'] != 'toolmanager':\n        key_press_handler(event, self.canvas, self.canvas.toolbar)",
                "def button_press(self, event):\n    \"\"\"The default Matplotlib button actions for extra mouse buttons.\"\"\"\n    if rcParams['toolbar'] != 'toolmanager':\n        button_press_handler(event, self.canvas, self.canvas.toolbar)",
                "def get_window_title(self):\n    \"\"\"\n    Get the title text of the window containing the figure.\n\n    Return None for non-GUI (e.g., PS) backends.\n    \"\"\"\n    return 'image'",
                "def set_window_title(self, title):\n    \"\"\"\n    Set the title text of the window containing the figure.\n\n    This has no effect for non-GUI (e.g., PS) backends.\n    \"\"\"",
                "def __init__(self, canvas):\n    self.canvas = canvas\n    canvas.toolbar = self\n    self._nav_stack = cbook.Stack()\n    self._xypress = None  # location and axis info at the time of the press\n    self._idPress = None\n    self._idRelease = None\n    self._active = None\n    # This cursor will be set after the initial draw.\n    self._lastCursor = cursors.POINTER\n    self._init_toolbar()\n    self._idDrag = self.canvas.mpl_connect(\n        'motion_notify_event', self.mouse_move)\n\n    self._ids_zoom = []\n    self._zoom_mode = None\n\n    self._button_pressed = None  # determined by button pressed at start\n\n    self.mode = ''  # a mode string for the status bar\n    self.set_history_buttons()",
                "def set_message(self, s):\n    \"\"\"Display a message on toolbar or in status bar.\"\"\"",
                "def back(self, *args):\n    \"\"\"Move back up the view lim stack.\"\"\"\n    self._nav_stack.back()\n    self.set_history_buttons()\n    self._update_view()",
                "def draw_rubberband(self, event, x0, y0, x1, y1):\n    \"\"\"\n    Draw a rectangle rubberband to indicate zoom limits.\n\n    Note that it is not guaranteed that ``x0 <= x1`` and ``y0 <= y1``.\n    \"\"\"",
                "def remove_rubberband(self):\n    \"\"\"Remove the rubberband.\"\"\"",
                "def forward(self, *args):\n    \"\"\"Move forward in the view lim stack.\"\"\"\n    self._nav_stack.forward()\n    self.set_history_buttons()\n    self._update_view()",
                "def home(self, *args):\n    \"\"\"Restore the original view.\"\"\"\n    self._nav_stack.home()\n    self.set_history_buttons()\n    self._update_view()",
                "def _init_toolbar(self):\n    \"\"\"\n    This is where you actually build the GUI widgets (called by\n    __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,\n    ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard\n    across backends (there are ppm versions in CVS also).\n\n    You just need to set the callbacks\n\n    home         : self.home\n    back         : self.back\n    forward      : self.forward\n    hand         : self.pan\n    zoom_to_rect : self.zoom\n    filesave     : self.save_figure\n\n    You only need to define the last one - the others are in the base\n    class implementation.\n\n    \"\"\"\n    raise NotImplementedError",
                "def _update_cursor(self, event):\n    \"\"\"\n    Update the cursor after a mouse move event or a tool (de)activation.\n    \"\"\"\n    if not event.inaxes or not self._active:\n        if self._lastCursor != cursors.POINTER:\n            self.set_cursor(cursors.POINTER)\n            self._lastCursor = cursors.POINTER\n    else:\n        if (self._active == 'ZOOM'\n                and self._lastCursor != cursors.SELECT_REGION):\n            self.set_cursor(cursors.SELECT_REGION)\n            self._lastCursor = cursors.SELECT_REGION\n        elif (self._active == 'PAN' and\n              self._lastCursor != cursors.MOVE):\n            self.set_cursor(cursors.MOVE)\n            self._lastCursor = cursors.MOVE",
                "@contextmanager\ndef _wait_cursor_for_draw_cm(self):\n    \"\"\"\n    Set the cursor to a wait cursor when drawing the canvas.\n\n    In order to avoid constantly changing the cursor when the canvas\n    changes frequently, do nothing if this context was triggered during the\n    last second.  (Optimally we'd prefer only setting the wait cursor if\n    the *current* draw takes too long, but the current draw blocks the GUI\n    thread).\n    \"\"\"\n    self._draw_time, last_draw_time = (\n        time.time(), getattr(self, \"_draw_time\", -np.inf))\n    if self._draw_time - last_draw_time > 1:\n        try:\n            self.set_cursor(cursors.WAIT)\n            yield\n        finally:\n            self.set_cursor(self._lastCursor)\n    else:\n        yield",
                "def mouse_move(self, event):\n    self._update_cursor(event)\n\n    if event.inaxes and event.inaxes.get_navigate():\n\n        try:\n            s = event.inaxes.format_coord(event.xdata, event.ydata)\n        except (ValueError, OverflowError):\n            pass\n        else:\n            artists = [a for a in event.inaxes._mouseover_set\n                       if a.contains(event)[0] and a.get_visible()]\n\n            if artists:\n                a = cbook._topmost_artist(artists)\n                if a is not event.inaxes.patch:\n                    data = a.get_cursor_data(event)\n                    if data is not None:\n                        data_str = a.format_cursor_data(data)\n                        if data_str is not None:\n                            s = s + ' ' + data_str\n\n            if len(self.mode):\n                self.set_message('%s, %s' % (self.mode, s))\n            else:\n                self.set_message(s)\n    else:\n        self.set_message(self.mode)",
                "def pan(self, *args):\n    \"\"\"\n    Activate the pan/zoom tool.\n\n    Pan with left button, zoom with right.\n    \"\"\"\n    # set the pointer icon and button press funcs to the\n    # appropriate callbacks\n\n    if self._active == 'PAN':\n        self._active = None\n    else:\n        self._active = 'PAN'\n    if self._idPress is not None:\n        self._idPress = self.canvas.mpl_disconnect(self._idPress)\n        self.mode = ''\n\n    if self._idRelease is not None:\n        self._idRelease = self.canvas.mpl_disconnect(self._idRelease)\n        self.mode = ''\n\n    if self._active:\n        self._idPress = self.canvas.mpl_connect(\n            'button_press_event', self.press_pan)\n        self._idRelease = self.canvas.mpl_connect(\n            'button_release_event', self.release_pan)\n        self.mode = 'pan/zoom'\n        self.canvas.widgetlock(self)\n    else:\n        self.canvas.widgetlock.release(self)\n\n    for a in self.canvas.figure.get_axes():\n        a.set_navigate_mode(self._active)\n\n    self.set_message(self.mode)",
                "def press(self, event):\n    \"\"\"Called whenever a mouse button is pressed.\"\"\"",
                "def press_pan(self, event):\n    \"\"\"Callback for mouse button press in pan/zoom mode.\"\"\"\n\n    if event.button == 1:\n        self._button_pressed = 1\n    elif event.button == 3:\n        self._button_pressed = 3\n    else:\n        self._button_pressed = None\n        return\n\n    if self._nav_stack() is None:\n        # set the home button to this view\n        self.push_current()\n\n    x, y = event.x, event.y\n    self._xypress = []\n    for i, a in enumerate(self.canvas.figure.get_axes()):\n        if (x is not None and y is not None and a.in_axes(event) and\n                a.get_navigate() and a.can_pan()):\n            a.start_pan(x, y, event.button)\n            self._xypress.append((a, i))\n            self.canvas.mpl_disconnect(self._idDrag)\n            self._idDrag = self.canvas.mpl_connect('motion_notify_event',\n                                                   self.drag_pan)\n\n    self.press(event)",
                "def press_zoom(self, event):\n    \"\"\"Callback for mouse button press in zoom to rect mode.\"\"\"\n    # If we're already in the middle of a zoom, pressing another\n    # button works to \"cancel\"\n    if self._ids_zoom != []:\n        for zoom_id in self._ids_zoom:\n            self.canvas.mpl_disconnect(zoom_id)\n        self.release(event)\n        self.draw()\n        self._xypress = None\n        self._button_pressed = None\n        self._ids_zoom = []\n        return\n\n    if event.button == 1:\n        self._button_pressed = 1\n    elif event.button == 3:\n        self._button_pressed = 3\n    else:\n        self._button_pressed = None\n        return\n\n    if self._nav_stack() is None:\n        # set the home button to this view\n        self.push_current()\n\n    x, y = event.x, event.y\n    self._xypress = []\n    for i, a in enumerate(self.canvas.figure.get_axes()):\n        if (x is not None and y is not None and a.in_axes(event) and\n                a.get_navigate() and a.can_zoom()):\n            self._xypress.append((x, y, a, i, a._get_view()))\n\n    id1 = self.canvas.mpl_connect('motion_notify_event', self.drag_zoom)\n    id2 = self.canvas.mpl_connect('key_press_event',\n                                  self._switch_on_zoom_mode)\n    id3 = self.canvas.mpl_connect('key_release_event',\n                                  self._switch_off_zoom_mode)\n\n    self._ids_zoom = id1, id2, id3\n    self._zoom_mode = event.key\n\n    self.press(event)",
                "def _switch_on_zoom_mode(self, event):\n    self._zoom_mode = event.key\n    self.mouse_move(event)",
                "def _switch_off_zoom_mode(self, event):\n    self._zoom_mode = None\n    self.mouse_move(event)",
                "def push_current(self):\n    \"\"\"Push the current view limits and position onto the stack.\"\"\"\n    self._nav_stack.push(\n        WeakKeyDictionary(\n            {ax: (ax._get_view(),\n                  # Store both the original and modified positions.\n                  (ax.get_position(True).frozen(),\n                   ax.get_position().frozen()))\n             for ax in self.canvas.figure.axes}))\n    self.set_history_buttons()",
                "def release(self, event):\n    \"\"\"Callback for mouse button release.\"\"\"",
                "def release_pan(self, event):\n    \"\"\"Callback for mouse button release in pan/zoom mode.\"\"\"\n\n    if self._button_pressed is None:\n        return\n    self.canvas.mpl_disconnect(self._idDrag)\n    self._idDrag = self.canvas.mpl_connect(\n        'motion_notify_event', self.mouse_move)\n    for a, ind in self._xypress:\n        a.end_pan()\n    if not self._xypress:\n        return\n    self._xypress = []\n    self._button_pressed = None\n    self.push_current()\n    self.release(event)\n    self.draw()",
                "def drag_pan(self, event):\n    \"\"\"Callback for dragging in pan/zoom mode.\"\"\"\n    for a, ind in self._xypress:\n        #safer to use the recorded button at the press than current button:\n        #multiple button can get pressed during motion...\n        a.drag_pan(self._button_pressed, event.key, event.x, event.y)\n    self.canvas.draw_idle()",
                "def drag_zoom(self, event):\n    \"\"\"Callback for dragging in zoom mode.\"\"\"\n    if self._xypress:\n        x, y = event.x, event.y\n        lastx, lasty, a, ind, view = self._xypress[0]\n        (x1, y1), (x2, y2) = np.clip(\n            [[lastx, lasty], [x, y]], a.bbox.min, a.bbox.max)\n        if self._zoom_mode == \"x\":\n            y1, y2 = a.bbox.intervaly\n        elif self._zoom_mode == \"y\":\n            x1, x2 = a.bbox.intervalx\n        self.draw_rubberband(event, x1, y1, x2, y2)",
                "def release_zoom(self, event):\n    \"\"\"Callback for mouse button release in zoom to rect mode.\"\"\"\n    for zoom_id in self._ids_zoom:\n        self.canvas.mpl_disconnect(zoom_id)\n    self._ids_zoom = []\n\n    self.remove_rubberband()\n\n    if not self._xypress:\n        return\n\n    last_a = []\n\n    for cur_xypress in self._xypress:\n        x, y = event.x, event.y\n        lastx, lasty, a, ind, view = cur_xypress\n        # ignore singular clicks - 5 pixels is a threshold\n        # allows the user to \"cancel\" a zoom action\n        # by zooming by less than 5 pixels\n        if ((abs(x - lastx) < 5 and self._zoom_mode != \"y\") or\n                (abs(y - lasty) < 5 and self._zoom_mode != \"x\")):\n            self._xypress = None\n            self.release(event)\n            self.draw()\n            return\n\n        # detect twinx, twiny axes and avoid double zooming\n        twinx, twiny = False, False\n        if last_a:\n            for la in last_a:\n                if a.get_shared_x_axes().joined(a, la):\n                    twinx = True\n                if a.get_shared_y_axes().joined(a, la):\n                    twiny = True\n        last_a.append(a)\n\n        if self._button_pressed == 1:\n            direction = 'in'\n        elif self._button_pressed == 3:\n            direction = 'out'\n        else:\n            continue\n\n        a._set_view_from_bbox((lastx, lasty, x, y), direction,\n                              self._zoom_mode, twinx, twiny)\n\n    self.draw()\n    self._xypress = None\n    self._button_pressed = None\n\n    self._zoom_mode = None\n\n    self.push_current()\n    self.release(event)",
                "def draw(self):\n    \"\"\"Redraw the canvases, update the locators.\"\"\"\n    for a in self.canvas.figure.get_axes():\n        xaxis = getattr(a, 'xaxis', None)\n        yaxis = getattr(a, 'yaxis', None)\n        locators = []\n        if xaxis is not None:\n            locators.append(xaxis.get_major_locator())\n            locators.append(xaxis.get_minor_locator())\n        if yaxis is not None:\n            locators.append(yaxis.get_major_locator())\n            locators.append(yaxis.get_minor_locator())\n\n        for loc in locators:\n            loc.refresh()\n    self.canvas.draw_idle()",
                "def _update_view(self):\n    \"\"\"\n    Update the viewlim and position from the view and position stack for\n    each axes.\n    \"\"\"\n    nav_info = self._nav_stack()\n    if nav_info is None:\n        return\n    # Retrieve all items at once to avoid any risk of GC deleting an Axes\n    # while in the middle of the loop below.\n    items = list(nav_info.items())\n    for ax, (view, (pos_orig, pos_active)) in items:\n        ax._set_view(view)\n        # Restore both the original and modified positions\n        ax._set_position(pos_orig, 'original')\n        ax._set_position(pos_active, 'active')\n    self.canvas.draw_idle()",
                "def save_figure(self, *args):\n    \"\"\"Save the current figure.\"\"\"\n    raise NotImplementedError",
                "def set_cursor(self, cursor):\n    \"\"\"\n    Set the current cursor to one of the :class:`Cursors` enums values.\n\n    If required by the backend, this method should trigger an update in\n    the backend event loop after the cursor is set, as this method may be\n    called e.g. before a long-running task during which the GUI is not\n    updated.\n    \"\"\"",
                "def update(self):\n    \"\"\"Reset the axes stack.\"\"\"\n    self._nav_stack.clear()\n    self.set_history_buttons()",
                "def zoom(self, *args):\n    \"\"\"Activate zoom to rect mode.\"\"\"\n    if self._active == 'ZOOM':\n        self._active = None\n    else:\n        self._active = 'ZOOM'\n\n    if self._idPress is not None:\n        self._idPress = self.canvas.mpl_disconnect(self._idPress)\n        self.mode = ''\n\n    if self._idRelease is not None:\n        self._idRelease = self.canvas.mpl_disconnect(self._idRelease)\n        self.mode = ''\n\n    if self._active:\n        self._idPress = self.canvas.mpl_connect('button_press_event',\n                                                self.press_zoom)\n        self._idRelease = self.canvas.mpl_connect('button_release_event',\n                                                  self.release_zoom)\n        self.mode = 'zoom rect'\n        self.canvas.widgetlock(self)\n    else:\n        self.canvas.widgetlock.release(self)\n\n    for a in self.canvas.figure.get_axes():\n        a.set_navigate_mode(self._active)\n\n    self.set_message(self.mode)",
                "def set_history_buttons(self):\n    \"\"\"Enable or disable the back/forward button.\"\"\"",
                "def __init__(self, toolmanager):\n    self.toolmanager = toolmanager\n    self.toolmanager.toolmanager_connect('tool_removed_event',\n                                         self._remove_tool_cbk)",
                "def _tool_toggled_cbk(self, event):\n    \"\"\"\n    Captures the 'tool_trigger_[name]'\n\n    This only gets used for toggled tools\n    \"\"\"\n    self.toggle_toolitem(event.tool.name, event.tool.toggled)",
                "def add_tool(self, tool, group, position=-1):\n    \"\"\"\n    Adds a tool to this container\n\n    Parameters\n    ----------\n    tool : tool_like\n        The tool to add, see `ToolManager.get_tool`.\n    group : str\n        The name of the group to add this tool to.\n    position : int (optional)\n        The position within the group to place this tool.  Defaults to end.\n    \"\"\"\n    tool = self.toolmanager.get_tool(tool)\n    image = self._get_image_filename(tool.image)\n    toggle = getattr(tool, 'toggled', None) is not None\n    self.add_toolitem(tool.name, group, position,\n                      image, tool.description, toggle)\n    if toggle:\n        self.toolmanager.toolmanager_connect('tool_trigger_%s' % tool.name,\n                                             self._tool_toggled_cbk)\n        # If initially toggled\n        if tool.toggled:\n            self.toggle_toolitem(tool.name, True)",
                "def _remove_tool_cbk(self, event):\n    \"\"\"Captures the 'tool_removed_event' signal and removes the tool.\"\"\"\n    self.remove_toolitem(event.tool.name)",
                "def _get_image_filename(self, image):\n    \"\"\"Find the image based on its name.\"\"\"\n    if not image:\n        return None\n\n    basedir = cbook._get_data_path(\"images\")\n    for fname in [\n        image,\n        image + self._icon_extension,\n        str(basedir / image),\n        str(basedir / (image + self._icon_extension)),\n    ]:\n        if os.path.isfile(fname):\n            return fname",
                "def trigger_tool(self, name):\n    \"\"\"\n    Trigger the tool\n\n    Parameters\n    ----------\n    name : str\n        Name (id) of the tool triggered from within the container.\n    \"\"\"\n    self.toolmanager.trigger_tool(name, sender=self)",
                "def add_toolitem(self, name, group, position, image, description, toggle):\n    \"\"\"\n    Add a toolitem to the container\n\n    This method must get implemented per backend\n\n    The callback associated with the button click event,\n    must be **EXACTLY** `self.trigger_tool(name)`\n\n    Parameters\n    ----------\n    name : str\n        Name of the tool to add, this gets used as the tool's ID and as the\n        default label of the buttons\n    group : String\n        Name of the group that this tool belongs to\n    position : Int\n        Position of the tool within its group, if -1 it goes at the End\n    image_file : String\n        Filename of the image for the button or `None`\n    description : String\n        Description of the tool, used for the tooltips\n    toggle : Bool\n        * `True` : The button is a toggle (change the pressed/unpressed\n          state between consecutive clicks)\n        * `False` : The button is a normal button (returns to unpressed\n          state after release)\n    \"\"\"\n    raise NotImplementedError",
                "def toggle_toolitem(self, name, toggled):\n    \"\"\"\n    Toggle the toolitem without firing event\n\n    Parameters\n    ----------\n    name : String\n        Id of the tool to toggle\n    toggled : bool\n        Whether to set this tool as toggled or not.\n    \"\"\"\n    raise NotImplementedError",
                "def remove_toolitem(self, name):\n    \"\"\"\n    Remove a toolitem from the `ToolContainer`.\n\n    This method must get implemented per backend.\n\n    Called when `ToolManager` emits a `tool_removed_event`.\n\n    Parameters\n    ----------\n    name : str\n        Name of the tool to remove.\n    \"\"\"\n    raise NotImplementedError",
                "def __init__(self, toolmanager):\n    self.toolmanager = toolmanager\n    self.toolmanager.toolmanager_connect('tool_message_event',\n                                         self._message_cbk)",
                "def _message_cbk(self, event):\n    \"\"\"Capture the 'tool_message_event' and set the message.\"\"\"\n    self.set_message(event.message)",
                "def set_message(self, s):\n    \"\"\"\n    Display a message on toolbar or in status bar.\n\n    Parameters\n    ----------\n    s : str\n        Message text.\n    \"\"\"\n    pass",
                "@classmethod\ndef new_figure_manager(cls, num, *args, **kwargs):\n    \"\"\"Create a new figure manager instance.\"\"\"\n    # This import needs to happen here due to circular imports.\n    from matplotlib.figure import Figure\n    fig_cls = kwargs.pop('FigureClass', Figure)\n    fig = fig_cls(*args, **kwargs)\n    return cls.new_figure_manager_given_figure(num, fig)",
                "@classmethod\ndef new_figure_manager_given_figure(cls, num, figure):\n    \"\"\"Create a new figure manager instance for the given figure.\"\"\"\n    canvas = cls.FigureCanvas(figure)\n    manager = cls.FigureManager(canvas, num)\n    return manager",
                "@classmethod\ndef draw_if_interactive(cls):\n    if cls.trigger_manager_draw is not None and is_interactive():\n        manager = Gcf.get_active()\n        if manager:\n            cls.trigger_manager_draw(manager)",
                "@classmethod\n@cbook._make_keyword_only(\"3.1\", \"block\")\ndef show(cls, block=None):\n    \"\"\"\n    Show all figures.\n\n    `show` blocks by calling `mainloop` if *block* is ``True``, or if it\n    is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in\n    `interactive` mode.\n    \"\"\"\n    managers = Gcf.get_all_fig_managers()\n    if not managers:\n        return\n    for manager in managers:\n        # Emits a warning if the backend is non-interactive.\n        manager.canvas.figure.show()\n    if cls.mainloop is None:\n        return\n    if block is None:\n        # Hack: Are we in IPython's pylab mode?\n        from matplotlib import pyplot\n        try:\n            # IPython versions >= 0.10 tack the _needmain attribute onto\n            # pyplot.show, and always set it to False, when in %pylab mode.\n            ipython_pylab = not pyplot.show._needmain\n        except AttributeError:\n            ipython_pylab = False\n        block = not ipython_pylab and not is_interactive()\n        # TODO: The above is a hack to get the WebAgg backend working with\n        # ipython's `%pylab` mode until proper integration is implemented.\n        if get_backend() == \"WebAgg\":\n            block = True\n    if block:\n        cls.mainloop()",
                "@staticmethod\ndef export(cls):\n    for name in [\n            \"backend_version\",\n            \"FigureCanvas\",\n            \"FigureManager\",\n            \"new_figure_manager\",\n            \"new_figure_manager_given_figure\",\n            \"draw_if_interactive\",\n            \"show\",\n    ]:\n        setattr(sys.modules[cls.__module__], name, getattr(cls, name))\n\n    # For back-compatibility, generate a shim `Show` class.\n\n    class Show(ShowBase):\n        def mainloop(self):\n            return cls.mainloop()\n\n    setattr(sys.modules[cls.__module__], \"Show\", Show)\n    return cls",
                "def __call__(self, block=None):\n    return self.show(block=block)",
                "@self.canvas.figure.add_axobserver\ndef notify_axes_change(fig):\n    # Called whenever the current axes is changed.\n    if self.toolmanager is None and self.toolbar is not None:\n        self.toolbar.update()",
                "def mainloop(self):\n    return cls.mainloop()"
            ],
            "inscope_function_signatures": [
                "register_backend(format, backend, description=None)",
                "get_registered_canvas_class(format)",
                "_get_renderer(figure, print_method)",
                "_is_non_interactive_terminal_ipython(ip)",
                "key_press_handler(event, canvas, toolbar=None)",
                "button_press_handler(event, canvas, toolbar=None)",
                "__init__(self)",
                "open_group(self, s, gid=None)",
                "close_group(self, s)",
                "draw_path(self, gc, path, transform, rgbFace=None)",
                "draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None)",
                "draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)",
                "draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)",
                "draw_gouraud_triangle(self, gc, points, colors, transform)",
                "draw_gouraud_triangles(self, gc, triangles_array, colors_array, transform)",
                "_iter_collection_raw_paths(self, master_transform, paths, all_transforms)",
                "_iter_collection_uses_per_path(self, paths, all_transforms, offsets, facecolors, edgecolors)",
                "_iter_collection(self, gc, master_transform, all_transforms, path_ids, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)",
                "get_image_magnification(self)",
                "draw_image(self, gc, x, y, im, transform=None)",
                "option_image_nocomposite(self)",
                "option_scale_image(self)",
                "draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None)",
                "draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None)",
                "_get_text_path_transform(self, x, y, s, prop, angle, ismath)",
                "_draw_text_as_path(self, gc, x, y, s, prop, angle, ismath)",
                "get_text_width_height_descent(self, s, prop, ismath)",
                "flipy(self)",
                "get_canvas_width_height(self)",
                "get_texmanager(self)",
                "new_gc(self)",
                "points_to_pixels(self, points)",
                "strip_math(self, s)",
                "start_rasterizing(self)",
                "stop_rasterizing(self)",
                "start_filter(self)",
                "stop_filter(self, filter_func)",
                "__init__(self)",
                "copy_properties(self, gc)",
                "restore(self)",
                "get_alpha(self)",
                "get_antialiased(self)",
                "get_capstyle(self)",
                "get_clip_rectangle(self)",
                "get_clip_path(self)",
                "get_dashes(self)",
                "get_forced_alpha(self)",
                "get_joinstyle(self)",
                "get_linewidth(self)",
                "get_rgb(self)",
                "get_url(self)",
                "get_gid(self)",
                "get_snap(self)",
                "set_alpha(self, alpha)",
                "set_antialiased(self, b)",
                "set_capstyle(self, cs)",
                "set_clip_rectangle(self, rectangle)",
                "set_clip_path(self, path)",
                "set_dashes(self, dash_offset, dash_list)",
                "set_foreground(self, fg, isRGBA=False)",
                "set_joinstyle(self, js)",
                "set_linewidth(self, w)",
                "set_url(self, url)",
                "set_gid(self, id)",
                "set_snap(self, snap)",
                "set_hatch(self, hatch)",
                "get_hatch(self)",
                "get_hatch_path(self, density=6.0)",
                "get_hatch_color(self)",
                "set_hatch_color(self, hatch_color)",
                "get_hatch_linewidth(self)",
                "get_sketch_params(self)",
                "set_sketch_params(self, scale=None, length=None, randomness=None)",
                "__init__(self, interval=None, callbacks=None)",
                "__del__(self)",
                "start(self, interval=None)",
                "stop(self)",
                "_timer_start(self)",
                "_timer_stop(self)",
                "interval(self)",
                "interval(self, interval)",
                "single_shot(self)",
                "single_shot(self, ss)",
                "add_callback(self, func, *args, **kwargs)",
                "remove_callback(self, func, *args, **kwargs)",
                "_timer_set_interval(self)",
                "_timer_set_single_shot(self)",
                "_on_timer(self)",
                "__init__(self, name, canvas, guiEvent=None)",
                "__init__(self, name, canvas, renderer)",
                "__init__(self, name, canvas)",
                "__init__(self, name, canvas, x, y, guiEvent=None)",
                "_update_enter_leave(self)",
                "__init__(self, name, canvas, x, y, button=None, key=None, step=0, dblclick=False, guiEvent=None)",
                "__str__(self)",
                "__init__(self, name, canvas, mouseevent, artist, guiEvent=None, **kwargs)",
                "__init__(self, name, canvas, key, x=0, y=0, guiEvent=None)",
                "_draw(renderer)",
                "supports_blit(cls)",
                "__init__(self, figure)",
                "_fix_ipython_backend2gui(cls)",
                "_idle_draw_cntx(self)",
                "is_saving(self)",
                "pick(self, mouseevent)",
                "blit(self, bbox=None)",
                "resize(self, w, h)",
                "draw_event(self, renderer)",
                "resize_event(self)",
                "close_event(self, guiEvent=None)",
                "key_press_event(self, key, guiEvent=None)",
                "key_release_event(self, key, guiEvent=None)",
                "pick_event(self, mouseevent, artist, **kwargs)",
                "scroll_event(self, x, y, step, guiEvent=None)",
                "button_press_event(self, x, y, button, dblclick=False, guiEvent=None)",
                "button_release_event(self, x, y, button, guiEvent=None)",
                "motion_notify_event(self, x, y, guiEvent=None)",
                "leave_notify_event(self, guiEvent=None)",
                "enter_notify_event(self, guiEvent=None, xy=None)",
                "inaxes(self, xy)",
                "grab_mouse(self, ax)",
                "release_mouse(self, ax)",
                "draw(self, *args, **kwargs)",
                "draw_idle(self, *args, **kwargs)",
                "draw_cursor(self, event)",
                "get_width_height(self)",
                "get_supported_filetypes(cls)",
                "get_supported_filetypes_grouped(cls)",
                "_get_output_canvas(self, fmt)",
                "print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None, orientation='portrait', format=None, **kwargs)",
                "get_default_filetype(cls)",
                "get_window_title(self)",
                "set_window_title(self, title)",
                "get_default_filename(self)",
                "switch_backends(self, FigureCanvasClass)",
                "mpl_connect(self, s, func)",
                "mpl_disconnect(self, cid)",
                "new_timer(self, *args, **kwargs)",
                "flush_events(self)",
                "start_event_loop(self, timeout=0)",
                "stop_event_loop(self)",
                "_get_uniform_gridstate(ticks)",
                "__init__(self, canvas, num)",
                "show(self)",
                "destroy(self)",
                "full_screen_toggle(self)",
                "resize(self, w, h)",
                "key_press(self, event)",
                "button_press(self, event)",
                "get_window_title(self)",
                "set_window_title(self, title)",
                "__init__(self, canvas)",
                "set_message(self, s)",
                "back(self, *args)",
                "draw_rubberband(self, event, x0, y0, x1, y1)",
                "remove_rubberband(self)",
                "forward(self, *args)",
                "home(self, *args)",
                "_init_toolbar(self)",
                "_update_cursor(self, event)",
                "_wait_cursor_for_draw_cm(self)",
                "mouse_move(self, event)",
                "pan(self, *args)",
                "press(self, event)",
                "press_pan(self, event)",
                "press_zoom(self, event)",
                "_switch_on_zoom_mode(self, event)",
                "_switch_off_zoom_mode(self, event)",
                "push_current(self)",
                "release(self, event)",
                "release_pan(self, event)",
                "drag_pan(self, event)",
                "drag_zoom(self, event)",
                "release_zoom(self, event)",
                "draw(self)",
                "_update_view(self)",
                "save_figure(self, *args)",
                "set_cursor(self, cursor)",
                "update(self)",
                "zoom(self, *args)",
                "set_history_buttons(self)",
                "__init__(self, toolmanager)",
                "_tool_toggled_cbk(self, event)",
                "add_tool(self, tool, group, position=-1)",
                "_remove_tool_cbk(self, event)",
                "_get_image_filename(self, image)",
                "trigger_tool(self, name)",
                "add_toolitem(self, name, group, position, image, description, toggle)",
                "toggle_toolitem(self, name, toggled)",
                "remove_toolitem(self, name)",
                "__init__(self, toolmanager)",
                "_message_cbk(self, event)",
                "set_message(self, s)",
                "new_figure_manager(cls, num, *args, **kwargs)",
                "new_figure_manager_given_figure(cls, num, figure)",
                "draw_if_interactive(cls)",
                "show(cls, block=None)",
                "export(cls)",
                "__call__(self, block=None)",
                "notify_axes_change(fig)",
                "mainloop(self)"
            ],
            "variables_in_file": {
                "LooseVersion": [
                    59
                ],
                "PILLOW_VERSION": [
                    59,
                    63
                ],
                "_has_pil": [
                    65,
                    60,
                    62,
                    1591
                ],
                "ImportError": [
                    64
                ],
                "_log": [
                    67,
                    2435,
                    2422
                ],
                "logging.getLogger": [
                    67
                ],
                "logging": [
                    67
                ],
                "__name__": [
                    67
                ],
                "_default_filetypes": [
                    113,
                    69,
                    1590
                ],
                "_default_backends": [
                    112,
                    82,
                    121,
                    123,
                    126
                ],
                "description": [
                    113,
                    110,
                    111
                ],
                "format": [
                    2018,
                    2023,
                    2024,
                    2025,
                    1962,
                    2027,
                    2028,
                    2031,
                    112,
                    113,
                    1970,
                    2032,
                    121,
                    123,
                    126
                ],
                "backend": [
                    112
                ],
                "backend_class": [
                    123,
                    124,
                    125,
                    126,
                    127
                ],
                "isinstance": [
                    2022,
                    2026,
                    124,
                    2020
                ],
                "str": [
                    2435,
                    2022,
                    2026,
                    2422,
                    3191,
                    3192,
                    2460,
                    124
                ],
                "FigureCanvas": [
                    3301,
                    125
                ],
                "importlib.import_module": [
                    125
                ],
                "importlib": [
                    125
                ],
                "self._texmanager": [
                    650,
                    652,
                    653,
                    151
                ],
                "self": [
                    2051,
                    2052,
                    2054,
                    2055,
                    2063,
                    2066,
                    2068,
                    2077,
                    2097,
                    2098,
                    2099,
                    2116,
                    2117,
                    2124,
                    2125,
                    2132,
                    2134,
                    2147,
                    2148,
                    151,
                    152,
                    2204,
                    2218,
                    201,
                    2273,
                    2274,
                    2275,
                    233,
                    236,
                    2286,
                    243,
                    262,
                    302,
                    397,
                    2531,
                    2532,
                    2533,
                    2535,
                    2536,
                    2538,
                    2540,
                    2541,
                    2543,
                    2545,
                    2546,
                    2548,
                    2551,
                    2552,
                    510,
                    2578,
                    2583,
                    547,
                    563,
                    564,
                    569,
                    570,
                    598,
                    602,
                    612,
                    615,
                    2665,
                    618,
                    2667,
                    620,
                    2666,
                    2668,
                    623,
                    624,
                    2669,
                    2673,
                    2670,
                    2674,
                    2676,
                    2678,
                    2671,
                    2675,
                    2681,
                    2679,
                    2683,
                    2684,
                    2691,
                    2692,
                    2693,
                    650,
                    652,
                    653,
                    2707,
                    2708,
                    2709,
                    2713,
                    2714,
                    2715,
                    2743,
                    2744,
                    2745,
                    2746,
                    2748,
                    2749,
                    2750,
                    2751,
                    2752,
                    2753,
                    2754,
                    2755,
                    720,
                    721,
                    722,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    733,
                    734,
                    735,
                    736,
                    737,
                    2780,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    756,
                    757,
                    758,
                    2801,
                    2802,
                    2804,
                    2806,
                    2817,
                    2818,
                    771,
                    2820,
                    2821,
                    2822,
                    775,
                    2823,
                    2825,
                    2826,
                    2827,
                    781,
                    2829,
                    2830,
                    2831,
                    2832,
                    2833,
                    787,
                    2834,
                    2835,
                    2837,
                    2839,
                    2840,
                    2842,
                    795,
                    796,
                    2851,
                    2853,
                    2855,
                    810,
                    2858,
                    2860,
                    2863,
                    2864,
                    817,
                    2868,
                    821,
                    2869,
                    2870,
                    2871,
                    825,
                    2873,
                    829,
                    2879,
                    2880,
                    833,
                    2881,
                    2882,
                    2883,
                    837,
                    2884,
                    2885,
                    2886,
                    2890,
                    2892,
                    2894,
                    848,
                    2897,
                    2899,
                    2902,
                    2903,
                    2906,
                    860,
                    861,
                    2908,
                    863,
                    864,
                    865,
                    2909,
                    2910,
                    2911,
                    2912,
                    870,
                    2914,
                    2915,
                    2917,
                    2920,
                    875,
                    2921,
                    2924,
                    2925,
                    881,
                    2929,
                    2935,
                    2936,
                    892,
                    2944,
                    2946,
                    2947,
                    2948,
                    2949,
                    2951,
                    2953,
                    2954,
                    2955,
                    2956,
                    2957,
                    2961,
                    2964,
                    2965,
                    918,
                    2969,
                    2971,
                    2974,
                    2976,
                    2978,
                    931,
                    932,
                    933,
                    934,
                    2982,
                    936,
                    2983,
                    938,
                    2984,
                    2986,
                    2988,
                    943,
                    2993,
                    947,
                    951,
                    2999,
                    3000,
                    3001,
                    955,
                    3002,
                    3003,
                    966,
                    3016,
                    970,
                    3018,
                    974,
                    3024,
                    978,
                    3026,
                    3027,
                    3028,
                    3030,
                    3032,
                    985,
                    3033,
                    989,
                    3037,
                    993,
                    3050,
                    3057,
                    1013,
                    3068,
                    1030,
                    3086,
                    3087,
                    3091,
                    3092,
                    3094,
                    3096,
                    3097,
                    3098,
                    3100,
                    3101,
                    3102,
                    3104,
                    3105,
                    3106,
                    3107,
                    3108,
                    3109,
                    3110,
                    3112,
                    3114,
                    3115,
                    3117,
                    1077,
                    1079,
                    1082,
                    1084,
                    1086,
                    1089,
                    1093,
                    3141,
                    3142,
                    3143,
                    3151,
                    1106,
                    1107,
                    1111,
                    3166,
                    3167,
                    1121,
                    3169,
                    3172,
                    3173,
                    1128,
                    1129,
                    3176,
                    3180,
                    1133,
                    1137,
                    1138,
                    3190,
                    3192,
                    1148,
                    3206,
                    1168,
                    1170,
                    1172,
                    1186,
                    1194,
                    1196,
                    1197,
                    1219,
                    1220,
                    1221,
                    3270,
                    3271,
                    3272,
                    3276,
                    1248,
                    1249,
                    1267,
                    1268,
                    1305,
                    1307,
                    1309,
                    1310,
                    1311,
                    1312,
                    1316,
                    1319,
                    1320,
                    1322,
                    1324,
                    1326,
                    1331,
                    1332,
                    1334,
                    1340,
                    1352,
                    1353,
                    1357,
                    1358,
                    1360,
                    3408,
                    1423,
                    1426,
                    1427,
                    1428,
                    1429,
                    1432,
                    1433,
                    1434,
                    1435,
                    1474,
                    1475,
                    1476,
                    1477,
                    1515,
                    1516,
                    1609,
                    1610,
                    1611,
                    1612,
                    1613,
                    1615,
                    1616,
                    1617,
                    1618,
                    1619,
                    1620,
                    1621,
                    1622,
                    1623,
                    1624,
                    2768,
                    2769,
                    2770,
                    1654,
                    1656,
                    2772,
                    1663,
                    1666,
                    1667,
                    2775,
                    1678,
                    1679,
                    1686,
                    1687,
                    1688,
                    1696,
                    1697,
                    1710,
                    1713,
                    1714,
                    1722,
                    1723,
                    1724,
                    1732,
                    1735,
                    1747,
                    1749,
                    1751,
                    1753,
                    1764,
                    1766,
                    1768,
                    1788,
                    1789,
                    1790,
                    1809,
                    1811,
                    1813,
                    1825,
                    1827,
                    1843,
                    1851,
                    1852,
                    1870,
                    1887,
                    1889,
                    1898,
                    1899,
                    1917,
                    1918,
                    1919,
                    1933,
                    1962,
                    1963,
                    1967,
                    1971,
                    2025,
                    2031,
                    2037,
                    2043,
                    2044
                ],
                "self._text2path": [
                    612,
                    620,
                    623,
                    624,
                    563,
                    152
                ],
                "textpath.TextToPath": [
                    152
                ],
                "textpath": [
                    152
                ],
                "NotImplementedError": [
                    3072,
                    3264,
                    3236,
                    488,
                    170,
                    2737,
                    3249,
                    282
                ],
                "vertices": [
                    200,
                    198,
                    199
                ],
                "codes": [
                    565,
                    198,
                    567
                ],
                "path.iter_segments": [
                    198
                ],
                "path": [
                    581,
                    198,
                    232,
                    233,
                    330,
                    333,
                    240,
                    243,
                    598,
                    567,
                    602,
                    891,
                    892
                ],
                "trans": [
                    1326,
                    198,
                    1327
                ],
                "len": [
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    2448,
                    1196,
                    432,
                    439,
                    321,
                    322,
                    199,
                    2385,
                    345,
                    346,
                    348,
                    349,
                    2404,
                    2801,
                    381,
                    382,
                    383
                ],
                "x": [
                    1423,
                    1809,
                    1811,
                    2970,
                    1307,
                    2973,
                    1314,
                    547,
                    1320,
                    2862,
                    1327,
                    2865,
                    1842,
                    1843,
                    2867,
                    1845,
                    2994,
                    2999,
                    1851,
                    574,
                    579,
                    200,
                    203,
                    3023,
                    2901,
                    1751,
                    599,
                    2904,
                    2906,
                    1766,
                    1515,
                    1788,
                    510
                ],
                "y": [
                    1423,
                    1809,
                    1811,
                    2970,
                    1309,
                    2973,
                    1314,
                    547,
                    1320,
                    2862,
                    1327,
                    2865,
                    1842,
                    1843,
                    2867,
                    2994,
                    1846,
                    3000,
                    1851,
                    574,
                    579,
                    200,
                    203,
                    3023,
                    2901,
                    1751,
                    599,
                    2904,
                    2906,
                    1766,
                    1515,
                    1788,
                    510
                ],
                "self.draw_path": [
                    201,
                    602,
                    243
                ],
                "gc": [
                    260,
                    263,
                    398,
                    547,
                    302,
                    201,
                    600,
                    601,
                    602,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    237,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    756,
                    757,
                    758,
                    510
                ],
                "marker_path": [
                    201
                ],
                "marker_trans": [
                    202
                ],
                "translate": [
                    576,
                    241,
                    203,
                    571
                ],
                "transforms.Affine2D": [
                    232,
                    241,
                    203
                ],
                "transforms": [
                    232,
                    328,
                    203,
                    241,
                    891
                ],
                "rgbFace": [
                    425,
                    204,
                    236,
                    401,
                    243,
                    439,
                    440,
                    441,
                    446
                ],
                "path_ids": [
                    408,
                    237,
                    382,
                    231
                ],
                "transform": [
                    413,
                    417,
                    418,
                    300,
                    302,
                    571,
                    576,
                    581,
                    328,
                    332,
                    333,
                    598,
                    602,
                    232,
                    233,
                    240,
                    241,
                    242,
                    243
                ],
                "self._iter_collection_raw_paths": [
                    233
                ],
                "master_transform": [
                    417,
                    263,
                    234,
                    333,
                    237,
                    415
                ],
                "paths": [
                    321,
                    263,
                    234,
                    330,
                    345,
                    255
                ],
                "all_transforms": [
                    322,
                    234,
                    332,
                    237,
                    348,
                    381,
                    414
                ],
                "xo": [
                    418,
                    419,
                    420,
                    422,
                    236,
                    242,
                    406,
                    410,
                    446
                ],
                "yo": [
                    418,
                    419,
                    421,
                    422,
                    236,
                    242,
                    406,
                    410,
                    446
                ],
                "path_id": [
                    240,
                    236,
                    408,
                    446
                ],
                "gc0": [
                    236,
                    397,
                    398,
                    428,
                    430,
                    434,
                    243,
                    404,
                    436,
                    438,
                    442,
                    444,
                    446,
                    447
                ],
                "self._iter_collection": [
                    236
                ],
                "offsets": [
                    263,
                    395,
                    237,
                    349,
                    383
                ],
                "offsetTrans": [
                    395,
                    238,
                    263
                ],
                "facecolors": [
                    385,
                    259,
                    263,
                    425,
                    238,
                    346
                ],
                "edgecolors": [
                    258,
                    259,
                    386,
                    264,
                    238,
                    431,
                    346
                ],
                "linewidths": [
                    387,
                    260,
                    264,
                    428,
                    238
                ],
                "linestyles": [
                    388,
                    430,
                    238
                ],
                "antialiaseds": [
                    442,
                    389,
                    239
                ],
                "urls": [
                    444,
                    390,
                    239
                ],
                "offset_position": [
                    411,
                    239
                ],
                "transform.get_matrix": [
                    242
                ],
                "QuadMesh.convert_mesh_to_paths": [
                    255
                ],
                "QuadMesh": [
                    255
                ],
                "meshWidth": [
                    256
                ],
                "meshHeight": [
                    256
                ],
                "coordinates": [
                    256
                ],
                "np.array": [
                    260
                ],
                "np": [
                    260,
                    422,
                    2769,
                    914,
                    915,
                    568,
                    2972,
                    2270
                ],
                "gc.get_linewidth": [
                    260
                ],
                "float": [
                    947,
                    260
                ],
                "self.draw_path_collection": [
                    262
                ],
                "antialiased": [
                    264
                ],
                "transform.frozen": [
                    300
                ],
                "tri": [
                    301,
                    302
                ],
                "col": [
                    301,
                    302
                ],
                "zip": [
                    301
                ],
                "triangles_array": [
                    301
                ],
                "colors_array": [
                    301
                ],
                "self.draw_gouraud_triangle": [
                    302
                ],
                "Npaths": [
                    384,
                    321,
                    323,
                    325,
                    392,
                    330,
                    408,
                    345,
                    346,
                    348,
                    382
                ],
                "Ntransforms": [
                    322,
                    323,
                    331,
                    332,
                    412,
                    381,
                    414
                ],
                "N": [
                    384,
                    323,
                    329,
                    407,
                    349,
                    350
                ],
                "max": [
                    384,
                    323,
                    348,
                    349
                ],
                "transforms.IdentityTransform": [
                    328
                ],
                "i": [
                    2449,
                    2452,
                    407,
                    408,
                    410,
                    414,
                    425,
                    428,
                    430,
                    431,
                    2864,
                    2868,
                    442,
                    444,
                    329,
                    330,
                    332,
                    2903,
                    2906
                ],
                "range": [
                    329,
                    407
                ],
                "Affine2D": [
                    576,
                    571,
                    332,
                    414
                ],
                "Npath_ids": [
                    348,
                    349,
                    350
                ],
                "Noffsets": [
                    384,
                    394,
                    409,
                    410,
                    383
                ],
                "Nfacecolors": [
                    385,
                    392,
                    425,
                    424,
                    400
                ],
                "Nedgecolors": [
                    386,
                    392,
                    426,
                    431,
                    403
                ],
                "Nlinewidths": [
                    387,
                    428,
                    427
                ],
                "Nlinestyles": [
                    388,
                    429,
                    430
                ],
                "Naa": [
                    442,
                    389
                ],
                "Nurls": [
                    443,
                    444,
                    390
                ],
                "toffsets": [
                    410,
                    395
                ],
                "offsetTrans.transform": [
                    395
                ],
                "self.new_gc": [
                    397
                ],
                "gc0.copy_properties": [
                    398
                ],
                "gc0.set_linewidth": [
                    434,
                    428,
                    404
                ],
                "xp": [
                    418,
                    420
                ],
                "yp": [
                    418,
                    421
                ],
                "transform.transform": [
                    418
                ],
                "np.isfinite": [
                    422
                ],
                "gc0.set_dashes": [
                    430
                ],
                "fg": [
                    932,
                    934,
                    936,
                    938,
                    431,
                    432,
                    433,
                    436,
                    438
                ],
                "gc0.set_foreground": [
                    436,
                    438
                ],
                "gc0.set_antialiased": [
                    442
                ],
                "gc0.set_url": [
                    444
                ],
                "gc0.restore": [
                    447
                ],
                "self._draw_text_as_path": [
                    547,
                    510
                ],
                "s": [
                    1677,
                    1678,
                    1679,
                    1810,
                    1811,
                    1685,
                    1686,
                    1687,
                    1813,
                    2204,
                    1694,
                    1696,
                    1697,
                    547,
                    682,
                    1711,
                    1713,
                    1714,
                    565,
                    1720,
                    1722,
                    1723,
                    1731,
                    1732,
                    1735,
                    1750,
                    599,
                    1751,
                    1753,
                    2785,
                    1765,
                    1766,
                    615,
                    1768,
                    620,
                    2799,
                    2802,
                    628,
                    2804,
                    1787,
                    1788,
                    1789,
                    510
                ],
                "prop": [
                    547,
                    613,
                    620,
                    624,
                    625,
                    564,
                    565,
                    599,
                    510
                ],
                "angle": [
                    578,
                    547,
                    599,
                    568,
                    573,
                    510
                ],
                "ismath": [
                    610,
                    547,
                    619,
                    565,
                    599
                ],
                "text2path": [
                    577,
                    563,
                    572,
                    565
                ],
                "fontsize": [
                    577,
                    613,
                    615,
                    564,
                    572
                ],
                "self.points_to_pixels": [
                    618,
                    564
                ],
                "prop.get_size_in_points": [
                    625,
                    564,
                    613
                ],
                "verts": [
                    565,
                    567
                ],
                "text2path.get_text_path": [
                    565
                ],
                "Path": [
                    981,
                    567
                ],
                "np.deg2rad": [
                    568
                ],
                "self.flipy": [
                    569
                ],
                "width": [
                    570
                ],
                "height": [
                    570,
                    574
                ],
                "self.get_canvas_width_height": [
                    570
                ],
                "rotate": [
                    576,
                    571
                ],
                "scale": [
                    576,
                    1031,
                    1032,
                    2414,
                    2415,
                    2418,
                    571
                ],
                "text2path.FONT_SCALE": [
                    577,
                    572
                ],
                "self._get_text_path_transform": [
                    598
                ],
                "color": [
                    600,
                    602
                ],
                "gc.get_rgb": [
                    600
                ],
                "gc.set_linewidth": [
                    601
                ],
                "texmanager": [
                    612,
                    614
                ],
                "self._text2path.get_texmanager": [
                    612
                ],
                "w": [
                    614,
                    616,
                    947,
                    629,
                    631,
                    634
                ],
                "h": [
                    614,
                    616,
                    629,
                    632,
                    634
                ],
                "d": [
                    614,
                    616,
                    630,
                    633,
                    634
                ],
                "texmanager.get_text_width_height_descent": [
                    614
                ],
                "dpi": [
                    2087,
                    618,
                    620,
                    2065,
                    2034,
                    2035,
                    626,
                    2036,
                    2037,
                    2044
                ],
                "dims": [
                    620,
                    621
                ],
                "self._text2path.mathtext_parser.parse": [
                    620
                ],
                "self._text2path.mathtext_parser": [
                    620
                ],
                "flags": [
                    628,
                    623
                ],
                "self._text2path._get_hinting_flag": [
                    623
                ],
                "font": [
                    624,
                    626,
                    628,
                    629,
                    630
                ],
                "self._text2path._get_font": [
                    624
                ],
                "size": [
                    625,
                    626
                ],
                "font.set_size": [
                    626
                ],
                "font.set_text": [
                    628
                ],
                "font.get_width_height": [
                    629
                ],
                "font.get_descent": [
                    630
                ],
                "TexManager": [
                    652
                ],
                "GraphicsContextBase": [
                    657
                ],
                "points": [
                    678
                ],
                "cbook.strip_math": [
                    682
                ],
                "cbook": [
                    1921,
                    1603,
                    2043,
                    680,
                    2793,
                    682,
                    874,
                    1162,
                    2044,
                    942,
                    1615,
                    2667,
                    3341,
                    1874,
                    3187,
                    1847,
                    891,
                    1532
                ],
                "cbook.deprecated": [
                    680,
                    1921
                ],
                "self._alpha": [
                    771,
                    932,
                    741,
                    934,
                    720,
                    860,
                    863
                ],
                "self._forced_alpha": [
                    864,
                    931,
                    933,
                    742,
                    721,
                    817,
                    861
                ],
                "self._antialiased": [
                    722,
                    775,
                    870,
                    743
                ],
                "self._capstyle": [
                    744,
                    875,
                    723,
                    781
                ],
                "self._cliprect": [
                    745,
                    787,
                    724,
                    881
                ],
                "self._clippath": [
                    796,
                    746,
                    725,
                    795,
                    892
                ],
                "self._dashes": [
                    918,
                    810,
                    747,
                    726
                ],
                "self._joinstyle": [
                    943,
                    748,
                    821,
                    727
                ],
                "self._linestyle": [
                    728,
                    749
                ],
                "self._linewidth": [
                    729,
                    947,
                    750,
                    825
                ],
                "self._rgb": [
                    865,
                    932,
                    934,
                    936,
                    938,
                    751,
                    730,
                    829
                ],
                "self._hatch": [
                    752,
                    970,
                    731,
                    974
                ],
                "self._hatch_color": [
                    989,
                    753,
                    732,
                    985
                ],
                "colors.to_rgba": [
                    938,
                    732,
                    934
                ],
                "colors": [
                    938,
                    732,
                    934
                ],
                "rcParams": [
                    2049,
                    2309,
                    2310,
                    2311,
                    2312,
                    2313,
                    2058,
                    2314,
                    2315,
                    2316,
                    2317,
                    2318,
                    2319,
                    2320,
                    2321,
                    2577,
                    2582,
                    2072,
                    2461,
                    2463,
                    2109,
                    732,
                    733,
                    2537,
                    2035,
                    2047
                ],
                "self._hatch_linewidth": [
                    993,
                    754,
                    733
                ],
                "self._url": [
                    833,
                    755,
                    734,
                    951
                ],
                "self._gid": [
                    955,
                    756,
                    837,
                    735
                ],
                "self._snap": [
                    736,
                    848,
                    757,
                    966
                ],
                "self._sketch": [
                    737,
                    1013,
                    758,
                    1030
                ],
                "gc._alpha": [
                    741
                ],
                "gc._forced_alpha": [
                    742
                ],
                "gc._antialiased": [
                    743
                ],
                "gc._capstyle": [
                    744
                ],
                "gc._cliprect": [
                    745
                ],
                "gc._clippath": [
                    746
                ],
                "gc._dashes": [
                    747
                ],
                "gc._joinstyle": [
                    748
                ],
                "gc._linestyle": [
                    749
                ],
                "gc._linewidth": [
                    750
                ],
                "gc._rgb": [
                    751
                ],
                "gc._hatch": [
                    752
                ],
                "gc._hatch_color": [
                    753
                ],
                "gc._hatch_linewidth": [
                    754
                ],
                "gc._url": [
                    755
                ],
                "gc._gid": [
                    756
                ],
                "gc._snap": [
                    757
                ],
                "gc._sketch": [
                    758
                ],
                "self._clippath.get_transformed_path_and_affine": [
                    796
                ],
                "alpha": [
                    859,
                    860
                ],
                "self.set_foreground": [
                    865
                ],
                "int": [
                    870,
                    1127,
                    1933,
                    2447,
                    1307,
                    1309
                ],
                "bool": [
                    870
                ],
                "b": [
                    870
                ],
                "cbook._check_in_list": [
                    874,
                    942
                ],
                "cs": [
                    874,
                    875
                ],
                "rectangle": [
                    881
                ],
                "cbook._check_isinstance": [
                    891
                ],
                "transforms.TransformedPath": [
                    891
                ],
                "dash_list": [
                    913,
                    914,
                    918
                ],
                "dl": [
                    914,
                    915
                ],
                "np.asarray": [
                    914
                ],
                "np.any": [
                    915
                ],
                "ValueError": [
                    2434,
                    2786,
                    2405,
                    1328,
                    1969,
                    2386,
                    916,
                    2421
                ],
                "dash_offset": [
                    918
                ],
                "isRGBA": [
                    931,
                    935
                ],
                "js": [
                    942,
                    943
                ],
                "url": [
                    951
                ],
                "id": [
                    955
                ],
                "snap": [
                    966
                ],
                "hatch": [
                    978,
                    970,
                    979,
                    981
                ],
                "self.get_hatch": [
                    978
                ],
                "Path.hatch": [
                    981
                ],
                "density": [
                    981
                ],
                "hatch_color": [
                    989
                ],
                "length": [
                    1032
                ],
                "randomness": [
                    1032
                ],
                "callbacks": [
                    1076,
                    1079
                ],
                "self.callbacks": [
                    1679,
                    1168,
                    1170,
                    1172,
                    1813,
                    1687,
                    2204,
                    1697,
                    1186,
                    1825,
                    1194,
                    2218,
                    1196,
                    1714,
                    1077,
                    1079,
                    1723,
                    1852,
                    1735,
                    1615,
                    1753,
                    1768,
                    1148,
                    1789
                ],
                "interval": [
                    1123,
                    1127,
                    1128,
                    1105,
                    1106,
                    1081,
                    1084
                ],
                "self._interval": [
                    1128,
                    1121,
                    1082,
                    1084
                ],
                "self._single": [
                    1137,
                    1133,
                    1086
                ],
                "self._timer": [
                    1089
                ],
                "self._timer_stop": [
                    1093,
                    1111
                ],
                "self._set_interval": [
                    1106
                ],
                "self._timer_start": [
                    1107
                ],
                "property": [
                    1131,
                    1119
                ],
                "self._timer_set_interval": [
                    1129
                ],
                "interval.setter": [
                    1123
                ],
                "ss": [
                    1137
                ],
                "self._timer_set_single_shot": [
                    1138
                ],
                "single_shot.setter": [
                    1135
                ],
                "single_shot": [
                    1135
                ],
                "self.callbacks.append": [
                    1148
                ],
                "func": [
                    1186,
                    1187,
                    1194,
                    1168,
                    2204,
                    1171,
                    1172,
                    1148,
                    1149
                ],
                "args": [
                    1186,
                    1187,
                    2243,
                    1161,
                    1194,
                    1168,
                    3323,
                    1148,
                    1919
                ],
                "kwargs": [
                    1186,
                    1187,
                    2243,
                    1477,
                    1734,
                    1161,
                    1194,
                    2092,
                    1168,
                    2067,
                    2070,
                    3322,
                    3323,
                    1148,
                    1919
                ],
                "cbook.warn_deprecated": [
                    1162,
                    1847
                ],
                "self.callbacks.remove": [
                    1168,
                    1194
                ],
                "funcs": [
                    1170,
                    1171,
                    1172
                ],
                "c": [
                    1170
                ],
                "self.callbacks.pop": [
                    1172
                ],
                "funcs.index": [
                    1172
                ],
                "ret": [
                    1193,
                    1187
                ],
                "self.stop": [
                    1197
                ],
                "self.name": [
                    1432,
                    1219
                ],
                "name": [
                    1248,
                    1474,
                    1219,
                    3206,
                    1515,
                    1423,
                    1267,
                    3379,
                    1305,
                    3388,
                    1949,
                    1950,
                    1951
                ],
                "self.canvas": [
                    2946,
                    2947,
                    2822,
                    2826,
                    2830,
                    2832,
                    2578,
                    2835,
                    2837,
                    2965,
                    2583,
                    2839,
                    3097,
                    3101,
                    3105,
                    3107,
                    3110,
                    1319,
                    1320,
                    2983,
                    1322,
                    3112,
                    3114,
                    2864,
                    2869,
                    2870,
                    2881,
                    1220,
                    1353,
                    1358,
                    2903,
                    2908,
                    2909,
                    3037,
                    2911,
                    2531,
                    2665,
                    2538,
                    3050,
                    2541,
                    2675,
                    2548,
                    2935,
                    3068
                ],
                "canvas": [
                    3329,
                    3330,
                    2440,
                    1423,
                    2448,
                    2449,
                    2326,
                    1305,
                    2332,
                    2078,
                    1474,
                    1220,
                    2393,
                    1248,
                    2531,
                    2532,
                    2665,
                    2666,
                    1515,
                    2411,
                    2031,
                    2032,
                    1267,
                    1268
                ],
                "self.guiEvent": [
                    1221
                ],
                "guiEvent": [
                    1696,
                    1474,
                    1221,
                    1767,
                    1515,
                    1423,
                    1713,
                    1812,
                    1752,
                    1305,
                    1722,
                    1851,
                    1788
                ],
                "Event": [
                    1248,
                    1474,
                    1252,
                    1224,
                    1267,
                    1271,
                    1305,
                    1275,
                    1438
                ],
                "Event.__init__": [
                    1248,
                    1305,
                    1474,
                    1267
                ],
                "self.renderer": [
                    1249
                ],
                "renderer": [
                    1249,
                    1678,
                    2062,
                    2066,
                    2068,
                    1530
                ],
                "self.width": [
                    1268
                ],
                "self.height": [
                    1268
                ],
                "canvas.get_width_height": [
                    1268
                ],
                "lastevent": [
                    1299
                ],
                "self.x": [
                    1433,
                    1307
                ],
                "self.y": [
                    1433,
                    1309
                ],
                "self.inaxes": [
                    1320,
                    1352,
                    1322,
                    1324,
                    1357,
                    1326,
                    1435,
                    1340,
                    1310
                ],
                "self.xdata": [
                    1433,
                    1331,
                    1311
                ],
                "self.ydata": [
                    1312,
                    1433,
                    1332
                ],
                "self._update_enter_leave": [
                    1316,
                    1334
                ],
                "self.canvas.mouse_grabber": [
                    1322,
                    1319
                ],
                "self.canvas.inaxes": [
                    1320
                ],
                "self.inaxes.transData.inverted": [
                    1326
                ],
                "self.inaxes.transData": [
                    1326
                ],
                "xdata": [
                    1331,
                    1327
                ],
                "ydata": [
                    1332,
                    1327
                ],
                "trans.transform": [
                    1327
                ],
                "LocationEvent.lastevent": [
                    1825,
                    1826,
                    1360,
                    1338,
                    1339
                ],
                "LocationEvent": [
                    1825,
                    1826,
                    1851,
                    1480,
                    1515,
                    1423,
                    1360,
                    1371,
                    1338,
                    1339
                ],
                "last": [
                    1344,
                    1339,
                    1340,
                    1343
                ],
                "last.inaxes": [
                    1340,
                    1343
                ],
                "last.canvas.callbacks.process": [
                    1344
                ],
                "last.canvas.callbacks": [
                    1344
                ],
                "last.canvas": [
                    1344
                ],
                "Exception": [
                    1345,
                    2467,
                    1527
                ],
                "self.canvas.callbacks.process": [
                    1353,
                    1358
                ],
                "self.canvas.callbacks": [
                    1353,
                    1358
                ],
                "IntEnum": [
                    1363
                ],
                "LEFT": [
                    1364
                ],
                "MIDDLE": [
                    1365
                ],
                "RIGHT": [
                    1366
                ],
                "BACK": [
                    1367
                ],
                "FORWARD": [
                    1368
                ],
                "LocationEvent.__init__": [
                    1515,
                    1423
                ],
                "button": [
                    1764,
                    1766,
                    1424,
                    1425,
                    1426,
                    1788
                ],
                "MouseButton.__members__.values": [
                    1424
                ],
                "MouseButton.__members__": [
                    1424
                ],
                "MouseButton": [
                    1424,
                    1425,
                    2460
                ],
                "self.button": [
                    1426,
                    1434
                ],
                "self.key": [
                    1427,
                    1516
                ],
                "key": [
                    1516,
                    1710,
                    1713,
                    1427,
                    1722
                ],
                "self.step": [
                    1428
                ],
                "step": [
                    1752,
                    1746,
                    1428
                ],
                "self.dblclick": [
                    1434,
                    1429
                ],
                "dblclick": [
                    1429,
                    1767
                ],
                "self.mouseevent": [
                    1475
                ],
                "mouseevent": [
                    1475,
                    1732,
                    1667,
                    1733,
                    1766,
                    1768,
                    1751,
                    1753
                ],
                "self.artist": [
                    1476
                ],
                "artist": [
                    1732,
                    1476
                ],
                "self.__dict__.update": [
                    1477
                ],
                "self.__dict__": [
                    1477
                ],
                "Done": [
                    1530,
                    1535
                ],
                "cbook._setattr_cm": [
                    2043,
                    1532,
                    2044
                ],
                "figure": [
                    1536,
                    1537,
                    3329,
                    1612,
                    1613,
                    1532
                ],
                "_draw": [
                    1532
                ],
                "print_method": [
                    2032,
                    2065,
                    2085,
                    1534
                ],
                "io.BytesIO": [
                    1534
                ],
                "io": [
                    1534
                ],
                "figure._cachedRenderer": [
                    1536,
                    1537
                ],
                "exc.args": [
                    1536
                ],
                "exc": [
                    1536,
                    2435,
                    2422
                ],
                "hasattr": [
                    2116,
                    1605,
                    1606,
                    1640,
                    1641,
                    1962,
                    2124,
                    1549
                ],
                "ip": [
                    1636,
                    1637,
                    1641,
                    1549,
                    1550,
                    1551,
                    1649,
                    1650
                ],
                "ip.parent": [
                    1550,
                    1551
                ],
                "getattr": [
                    3168,
                    1645,
                    1551,
                    2032,
                    2769,
                    2037,
                    3388,
                    3038,
                    3039
                ],
                "required_interactive_framework": [
                    1568
                ],
                "events": [
                    1570
                ],
                "fixed_dpi": [
                    1588
                ],
                "filetypes": [
                    1590
                ],
                "register_backend": [
                    1600,
                    1593,
                    1595,
                    1598
                ],
                "cls": [
                    3329,
                    3330,
                    3394,
                    3396,
                    1605,
                    1606,
                    3335,
                    3397,
                    3338,
                    1645,
                    3373,
                    1938,
                    3356,
                    3388,
                    3324,
                    1949
                ],
                "cbook._classproperty": [
                    1603
                ],
                "self._fix_ipython_backend2gui": [
                    1609
                ],
                "self._is_idle_drawing": [
                    1610,
                    1656,
                    1654,
                    1624,
                    1917
                ],
                "self._is_saving": [
                    1611,
                    2148,
                    1663
                ],
                "figure.set_canvas": [
                    1612
                ],
                "self.figure": [
                    1667,
                    2051,
                    2052,
                    2054,
                    2055,
                    2147,
                    1933,
                    1613,
                    1870,
                    2063,
                    2097,
                    2066,
                    2098,
                    2068,
                    2037,
                    2099,
                    2044,
                    2077
                ],
                "cbook.CallbackRegistry": [
                    1615
                ],
                "self.widgetlock": [
                    1616,
                    1666
                ],
                "widgets.LockDraw": [
                    1616
                ],
                "widgets": [
                    1616
                ],
                "self._button": [
                    1764,
                    1617,
                    1747,
                    1811,
                    1749,
                    1751,
                    1790
                ],
                "self._key": [
                    1788,
                    1766,
                    1710,
                    1618,
                    1811,
                    1751,
                    1724
                ],
                "self._lastx": [
                    1827,
                    1713,
                    1809,
                    1619,
                    1843,
                    1722
                ],
                "self._lasty": [
                    1827,
                    1713,
                    1809,
                    1619,
                    1843,
                    1722
                ],
                "self.button_pick_id": [
                    1620
                ],
                "self.mpl_connect": [
                    1620,
                    1621
                ],
                "self.pick": [
                    1620,
                    1621
                ],
                "self.scroll_pick_id": [
                    1621
                ],
                "self.mouse_grabber": [
                    1889,
                    1898,
                    1899,
                    1622,
                    1887
                ],
                "self.toolbar": [
                    2552,
                    2546,
                    2551,
                    1623
                ],
                "sys.modules": [
                    1633,
                    3388,
                    3396
                ],
                "sys": [
                    1633,
                    3388,
                    3396
                ],
                "IPython.get_ipython": [
                    1636
                ],
                "IPython": [
                    1636
                ],
                "pt": [
                    1640
                ],
                "rif": [
                    1645,
                    1647
                ],
                "backend2gui_rif": [
                    1648,
                    1650,
                    1646
                ],
                "get": [
                    1646
                ],
                "_is_non_interactive_terminal_ipython": [
                    1649
                ],
                "ip.enable_gui": [
                    1650
                ],
                "classmethod": [
                    3333,
                    3340,
                    1935,
                    1940,
                    3317,
                    2102,
                    1626,
                    3326
                ],
                "functools.lru_cache": [
                    1627
                ],
                "functools": [
                    2064,
                    1627
                ],
                "contextmanager": [
                    1652,
                    2757
                ],
                "self.widgetlock.locked": [
                    1666
                ],
                "self.figure.pick": [
                    1667
                ],
                "event": [
                    2578,
                    2583,
                    3151,
                    3180,
                    1678,
                    1679,
                    1686,
                    1687,
                    1696,
                    1697,
                    1712,
                    1714,
                    2743,
                    1721,
                    1723,
                    1732,
                    1735,
                    3276,
                    2780,
                    2782,
                    2785,
                    2789,
                    2790,
                    2794,
                    2795,
                    1788,
                    1789,
                    2305,
                    1811,
                    2324,
                    1813,
                    2331,
                    2336,
                    2850,
                    2340,
                    2852,
                    2343,
                    2346,
                    2348,
                    2350,
                    2862,
                    2352,
                    2865,
                    2354,
                    2867,
                    2357,
                    2873,
                    1851,
                    1852,
                    2882,
                    2371,
                    2376,
                    2889,
                    2891,
                    2901,
                    2904,
                    2395,
                    2915,
                    2917,
                    2920,
                    2921,
                    2413,
                    2925,
                    2426,
                    2439,
                    2441,
                    2442,
                    2956,
                    2446,
                    2447,
                    2450,
                    2451,
                    2964,
                    2970,
                    2460,
                    2978,
                    2994,
                    3002,
                    3033
                ],
                "DrawEvent": [
                    1678
                ],
                "self.callbacks.process": [
                    1697,
                    1825,
                    1735,
                    1768,
                    1679,
                    1714,
                    1813,
                    1687,
                    1753,
                    1723,
                    1852,
                    1789
                ],
                "ResizeEvent": [
                    1686
                ],
                "self.draw_idle": [
                    1688
                ],
                "CloseEvent": [
                    1696
                ],
                "TypeError": [
                    1698
                ],
                "AttributeError": [
                    1698,
                    3365,
                    2327
                ],
                "KeyEvent": [
                    1712,
                    1721
                ],
                "PickEvent": [
                    1732
                ],
                "mouseevent.guiEvent": [
                    1733
                ],
                "MouseEvent": [
                    1811,
                    1788,
                    1766,
                    1751
                ],
                "xy": [
                    1841,
                    1842,
                    1871
                ],
                "axes_list": [
                    1873,
                    1874,
                    1870
                ],
                "a": [
                    2949,
                    2950,
                    2440,
                    2442,
                    2443,
                    2449,
                    2961,
                    2451,
                    2452,
                    2964,
                    2839,
                    2840,
                    2971,
                    2973,
                    2975,
                    2977,
                    3114,
                    3115,
                    2864,
                    2865,
                    2866,
                    2867,
                    2868,
                    2995,
                    3010,
                    3012,
                    3014,
                    1870,
                    1871,
                    3023,
                    2903,
                    2904,
                    2905,
                    2906,
                    3037,
                    3038,
                    3039,
                    2789,
                    2790,
                    2793,
                    2794,
                    2795,
                    2797
                ],
                "self.figure.get_axes": [
                    1870
                ],
                "a.patch.contains_point": [
                    1871
                ],
                "a.patch": [
                    1871
                ],
                "axes": [
                    1874,
                    1876,
                    1878
                ],
                "cbook._topmost_artist": [
                    2793,
                    1874
                ],
                "ax": [
                    2433,
                    2436,
                    2437,
                    2935,
                    3063,
                    3064,
                    2371,
                    3067,
                    2378,
                    2379,
                    2380,
                    2381,
                    2391,
                    2392,
                    2397,
                    2398,
                    2399,
                    2400,
                    1889,
                    1887,
                    2409,
                    1898,
                    2410,
                    2414,
                    2416,
                    2417,
                    2931,
                    2420,
                    2933,
                    2934,
                    2423,
                    2424,
                    3066,
                    2427,
                    2429,
                    2430
                ],
                "RuntimeError": [
                    1888
                ],
                "self._idle_draw_cntx": [
                    1918
                ],
                "self.draw": [
                    2883,
                    2957,
                    3026,
                    3003,
                    1919
                ],
                "self.figure.bbox.width": [
                    1933
                ],
                "self.figure.bbox": [
                    1933
                ],
                "self.figure.bbox.height": [
                    1933
                ],
                "cls.filetypes": [
                    1938,
                    1949
                ],
                "groupings": [
                    1952,
                    1948,
                    1950,
                    1951
                ],
                "ext": [
                    1949,
                    1950
                ],
                "cls.filetypes.items": [
                    1949
                ],
                "append": [
                    1950
                ],
                "groupings.setdefault": [
                    1950
                ],
                "sort": [
                    1951
                ],
                "fmt": [
                    1962,
                    1971,
                    1965
                ],
                "canvas_class": [
                    1965,
                    1966,
                    1967
                ],
                "get_registered_canvas_class": [
                    1965
                ],
                "self.switch_backends": [
                    1967
                ],
                "join": [
                    1971
                ],
                "sorted": [
                    1971
                ],
                "self.get_supported_filetypes": [
                    1971
                ],
                "filename": [
                    2020,
                    2021,
                    2022,
                    2023,
                    2086,
                    2026,
                    2027
                ],
                "os.PathLike": [
                    2020
                ],
                "os": [
                    3194,
                    2020,
                    2021,
                    2023
                ],
                "os.fspath": [
                    2021
                ],
                "os.path.splitext": [
                    2023
                ],
                "os.path": [
                    3194,
                    2023
                ],
                "self.get_default_filetype": [
                    2025,
                    2134
                ],
                "filename.rstrip": [
                    2027
                ],
                "format.lower": [
                    2028
                ],
                "self._get_output_canvas": [
                    2031
                ],
                "self.figure.dpi": [
                    2037
                ],
                "facecolor": [
                    2088,
                    2054,
                    2046,
                    2047
                ],
                "edgecolor": [
                    2048,
                    2049,
                    2089,
                    2055
                ],
                "origfacecolor": [
                    2097,
                    2051
                ],
                "self.figure.get_facecolor": [
                    2051
                ],
                "origedgecolor": [
                    2098,
                    2052
                ],
                "self.figure.get_edgecolor": [
                    2052
                ],
                "self.figure.set_facecolor": [
                    2097,
                    2054
                ],
                "self.figure.set_edgecolor": [
                    2098,
                    2055
                ],
                "bbox_inches": [
                    2080,
                    2057,
                    2058,
                    2060,
                    2061,
                    2094,
                    2068,
                    2074,
                    2077
                ],
                "_get_renderer": [
                    2062
                ],
                "functools.partial": [
                    2064
                ],
                "orientation": [
                    2065,
                    2090
                ],
                "self.figure.draw": [
                    2066
                ],
                "bbox_artists": [
                    2067,
                    2069
                ],
                "kwargs.pop": [
                    3322,
                    2067,
                    2070
                ],
                "self.figure.get_tightbbox": [
                    2068
                ],
                "pad": [
                    2072,
                    2074,
                    2070,
                    2071
                ],
                "bbox_inches.padded": [
                    2074
                ],
                "restore_bbox": [
                    2080,
                    2077,
                    2094,
                    2095
                ],
                "tight_bbox.adjust_bbox": [
                    2077
                ],
                "tight_bbox": [
                    2077
                ],
                "canvas.fixed_dpi": [
                    2078
                ],
                "_bbox_inches_restore": [
                    2080,
                    2082,
                    2091
                ],
                "result": [
                    2100,
                    2085
                ],
                "self.figure.set_canvas": [
                    2099
                ],
                "self.manager.get_window_title": [
                    2117
                ],
                "self.manager": [
                    2125,
                    2117
                ],
                "self.manager.set_window_title": [
                    2125
                ],
                "title": [
                    2125
                ],
                "default_basename": [
                    2132,
                    2133,
                    2135
                ],
                "self.get_window_title": [
                    2132
                ],
                "default_basename.replace": [
                    2133
                ],
                "default_filetype": [
                    2134,
                    2135
                ],
                "default_filename": [
                    2136,
                    2135
                ],
                "newCanvas": [
                    2147,
                    2148,
                    2149
                ],
                "FigureCanvasClass": [
                    2147
                ],
                "newCanvas._is_saving": [
                    2148
                ],
                "self.callbacks.connect": [
                    2204
                ],
                "self.callbacks.disconnect": [
                    2218
                ],
                "cid": [
                    2218
                ],
                "TimerBase": [
                    2243
                ],
                "timeout": [
                    2274,
                    2269,
                    2270
                ],
                "np.inf": [
                    2769,
                    2270
                ],
                "timestep": [
                    2274,
                    2276,
                    2271
                ],
                "counter": [
                    2272,
                    2274,
                    2277
                ],
                "self._looping": [
                    2273,
                    2274,
                    2286
                ],
                "self.flush_events": [
                    2275
                ],
                "time.sleep": [
                    2276
                ],
                "time": [
                    2769,
                    2276
                ],
                "event.key": [
                    2305,
                    2439,
                    2446,
                    2447,
                    2324,
                    2964,
                    2331,
                    2336,
                    2340,
                    2343,
                    2346,
                    2350,
                    2354,
                    2376,
                    2395,
                    2915,
                    2920,
                    2413,
                    2426
                ],
                "fullscreen_keys": [
                    2324,
                    2309
                ],
                "home_keys": [
                    2336,
                    2310
                ],
                "back_keys": [
                    2340,
                    2311
                ],
                "forward_keys": [
                    2312,
                    2343
                ],
                "pan_keys": [
                    2313,
                    2346
                ],
                "zoom_keys": [
                    2314,
                    2350
                ],
                "save_keys": [
                    2354,
                    2315
                ],
                "quit_keys": [
                    2331,
                    2316
                ],
                "grid_keys": [
                    2376,
                    2317
                ],
                "grid_minor_keys": [
                    2395,
                    2318
                ],
                "toggle_yscale_keys": [
                    2413,
                    2319
                ],
                "toggle_xscale_keys": [
                    2320,
                    2426
                ],
                "all_keys": [
                    2321,
                    2439
                ],
                "canvas.manager.full_screen_toggle": [
                    2326
                ],
                "canvas.manager": [
                    2532,
                    2326
                ],
                "Gcf.destroy_fig": [
                    2332
                ],
                "Gcf": [
                    3336,
                    2332,
                    3350
                ],
                "canvas.figure": [
                    2440,
                    2449,
                    2332,
                    2448
                ],
                "toolbar": [
                    2464,
                    2337,
                    2462,
                    2341,
                    2344,
                    2347,
                    2348,
                    2351,
                    2352,
                    2355,
                    2459,
                    2334
                ],
                "toolbar.home": [
                    2337
                ],
                "toolbar.back": [
                    2341,
                    2462
                ],
                "toolbar.forward": [
                    2344,
                    2464
                ],
                "toolbar.pan": [
                    2347
                ],
                "toolbar._update_cursor": [
                    2352,
                    2348
                ],
                "toolbar.zoom": [
                    2351
                ],
                "toolbar.save_figure": [
                    2355
                ],
                "event.inaxes": [
                    2785,
                    2371,
                    2789,
                    2794,
                    2357,
                    2743,
                    2782
                ],
                "all": [
                    2364
                ],
                "tick.gridline.get_visible": [
                    2364,
                    2366
                ],
                "tick.gridline": [
                    2364,
                    2366
                ],
                "tick": [
                    2364,
                    2366
                ],
                "ticks": [
                    2364,
                    2366
                ],
                "any": [
                    2366
                ],
                "_get_uniform_gridstate": [
                    2400,
                    2378,
                    2379,
                    2380,
                    2381,
                    2397,
                    2398,
                    2399
                ],
                "ax.xaxis.minorTicks": [
                    2378,
                    2399
                ],
                "ax.xaxis": [
                    2378,
                    2380,
                    2397,
                    2399
                ],
                "ax.yaxis.minorTicks": [
                    2400,
                    2379
                ],
                "ax.yaxis": [
                    2400,
                    2379,
                    2381,
                    2398
                ],
                "x_state": [
                    2403,
                    2404,
                    2409,
                    2380,
                    2384,
                    2385,
                    2391,
                    2399
                ],
                "ax.xaxis.majorTicks": [
                    2380,
                    2397
                ],
                "y_state": [
                    2400,
                    2403,
                    2404,
                    2410,
                    2381,
                    2384,
                    2385,
                    2392
                ],
                "ax.yaxis.majorTicks": [
                    2381,
                    2398
                ],
                "cycle": [
                    2401,
                    2385,
                    2404,
                    2382
                ],
                "cycle.index": [
                    2385,
                    2404
                ],
                "ax.grid": [
                    2392,
                    2409,
                    2410,
                    2391
                ],
                "canvas.draw_idle": [
                    2393,
                    2411
                ],
                "ax.get_yscale": [
                    2414
                ],
                "ax.set_yscale": [
                    2416,
                    2420,
                    2423
                ],
                "ax.figure.canvas.draw_idle": [
                    2424,
                    2417,
                    2437,
                    2430
                ],
                "ax.figure.canvas": [
                    2424,
                    2417,
                    2437,
                    2430
                ],
                "ax.figure": [
                    2424,
                    2417,
                    2437,
                    2430
                ],
                "_log.warning": [
                    2435,
                    2422
                ],
                "scalex": [
                    2427,
                    2428,
                    2431
                ],
                "ax.get_xscale": [
                    2427
                ],
                "ax.set_xscale": [
                    2433,
                    2436,
                    2429
                ],
                "canvas.figure.get_axes": [
                    2440,
                    2449,
                    2448
                ],
                "event.x": [
                    2441,
                    2862,
                    2450,
                    2994,
                    2964,
                    2901,
                    2970
                ],
                "event.y": [
                    2441,
                    2862,
                    2450,
                    2994,
                    2964,
                    2901,
                    2970
                ],
                "a.in_axes": [
                    2904,
                    2865,
                    2442,
                    2451
                ],
                "a.set_navigate": [
                    2443,
                    2452
                ],
                "event.key.isdigit": [
                    2446
                ],
                "n": [
                    2448,
                    2452,
                    2447
                ],
                "enumerate": [
                    2864,
                    2449,
                    2903
                ],
                "button_name": [
                    2460,
                    2461,
                    2463
                ],
                "event.button": [
                    2850,
                    2852,
                    2889,
                    2891,
                    2867,
                    2460
                ],
                "self.num": [
                    2533
                ],
                "num": [
                    3330,
                    3324,
                    2533
                ],
                "self.key_press_handler_id": [
                    2538,
                    2535
                ],
                "self.button_press_handler_id": [
                    2536,
                    2541
                ],
                "self.canvas.mpl_connect": [
                    3105,
                    2947,
                    3107,
                    2538,
                    2541,
                    2830,
                    2832,
                    2675,
                    2870,
                    2908,
                    2909,
                    2911
                ],
                "self.key_press": [
                    2540
                ],
                "self.button_press": [
                    2543
                ],
                "self.toolmanager": [
                    3172,
                    3141,
                    3142,
                    3206,
                    3270,
                    3271,
                    2545,
                    2551,
                    3166
                ],
                "self.toolbar.update": [
                    2552
                ],
                "self.canvas.figure.add_axobserver": [
                    2548
                ],
                "self.canvas.figure": [
                    3114,
                    2839,
                    2903,
                    2864,
                    2548,
                    2935,
                    3037
                ],
                "NonGuiException": [
                    2561
                ],
                "key_press_handler": [
                    2578
                ],
                "self.canvas.toolbar": [
                    2578,
                    2583
                ],
                "button_press_handler": [
                    2583
                ],
                "cursors": [
                    2753,
                    2754,
                    2755,
                    2601,
                    2673,
                    2772,
                    2744,
                    2745,
                    2746,
                    2749,
                    2750,
                    2751
                ],
                "tools.cursors": [
                    2601
                ],
                "tools": [
                    2601
                ],
                "toolitems": [
                    2652
                ],
                "canvas.toolbar": [
                    2666
                ],
                "self._nav_stack": [
                    2691,
                    2858,
                    2667,
                    3086,
                    2897,
                    2929,
                    2707,
                    3057,
                    2713
                ],
                "cbook.Stack": [
                    2667
                ],
                "self._xypress": [
                    2884,
                    2949,
                    2951,
                    2953,
                    3001,
                    2668,
                    2988,
                    2863,
                    2961,
                    2993,
                    3027,
                    2868,
                    2902,
                    2969,
                    2906,
                    2971
                ],
                "self._idPress": [
                    3105,
                    2821,
                    2822,
                    2669,
                    2830,
                    3096,
                    3097
                ],
                "self._idRelease": [
                    3107,
                    2825,
                    2826,
                    2670,
                    2832,
                    3100,
                    3101
                ],
                "self._active": [
                    2752,
                    2817,
                    2818,
                    3104,
                    2820,
                    3115,
                    2829,
                    2671,
                    3091,
                    3092,
                    3094,
                    2743,
                    2840,
                    2748
                ],
                "self._lastCursor": [
                    2753,
                    2755,
                    2673,
                    2775,
                    2744,
                    2746,
                    2749,
                    2751
                ],
                "cursors.POINTER": [
                    2744,
                    2673,
                    2746,
                    2745
                ],
                "self._init_toolbar": [
                    2674
                ],
                "self._idDrag": [
                    2946,
                    2947,
                    2675,
                    2869,
                    2870
                ],
                "self.mouse_move": [
                    2948,
                    2921,
                    2676,
                    2925
                ],
                "self._ids_zoom": [
                    2880,
                    2914,
                    2886,
                    2982,
                    2984,
                    2678,
                    2879
                ],
                "self._zoom_mode": [
                    2976,
                    2915,
                    2920,
                    2924,
                    3024,
                    2999,
                    3030,
                    2679,
                    3000,
                    2974
                ],
                "self._button_pressed": [
                    2944,
                    2851,
                    2885,
                    2853,
                    2855,
                    3016,
                    2890,
                    2954,
                    2892,
                    3018,
                    2894,
                    2964,
                    3028,
                    2681
                ],
                "self.mode": [
                    3098,
                    3109,
                    2823,
                    2827,
                    3117,
                    2801,
                    2802,
                    2834,
                    2806,
                    2842,
                    2683,
                    3102
                ],
                "self.set_history_buttons": [
                    2692,
                    3087,
                    2708,
                    2936,
                    2714,
                    2684
                ],
                "self._nav_stack.back": [
                    2691
                ],
                "self._update_view": [
                    2715,
                    2693,
                    2709
                ],
                "self._nav_stack.forward": [
                    2707
                ],
                "self._nav_stack.home": [
                    2713
                ],
                "self.set_cursor": [
                    2754,
                    2772,
                    2775,
                    2745,
                    2750
                ],
                "cursors.SELECT_REGION": [
                    2749,
                    2750,
                    2751
                ],
                "cursors.MOVE": [
                    2753,
                    2754,
                    2755
                ],
                "self._draw_time": [
                    2768,
                    2770
                ],
                "last_draw_time": [
                    2768,
                    2770
                ],
                "time.time": [
                    2769
                ],
                "cursors.WAIT": [
                    2772
                ],
                "self._update_cursor": [
                    2780
                ],
                "event.inaxes.get_navigate": [
                    2782
                ],
                "event.inaxes.format_coord": [
                    2785
                ],
                "event.xdata": [
                    2785
                ],
                "event.ydata": [
                    2785
                ],
                "OverflowError": [
                    2786
                ],
                "artists": [
                    2792,
                    2793,
                    2789
                ],
                "event.inaxes._mouseover_set": [
                    2789
                ],
                "a.contains": [
                    2790
                ],
                "a.get_visible": [
                    2790
                ],
                "event.inaxes.patch": [
                    2794
                ],
                "data": [
                    2795,
                    2796,
                    2797
                ],
                "a.get_cursor_data": [
                    2795
                ],
                "data_str": [
                    2797,
                    2798,
                    2799
                ],
                "a.format_cursor_data": [
                    2797
                ],
                "self.set_message": [
                    3276,
                    3117,
                    2802,
                    2804,
                    2806,
                    2842
                ],
                "self.canvas.mpl_disconnect": [
                    2881,
                    2946,
                    2822,
                    2983,
                    2826,
                    2869,
                    3097,
                    3101
                ],
                "self.press_pan": [
                    2831
                ],
                "self.release_pan": [
                    2833
                ],
                "self.canvas.widgetlock": [
                    3112,
                    2835,
                    2837,
                    3110
                ],
                "self.canvas.widgetlock.release": [
                    3112,
                    2837
                ],
                "self.canvas.figure.get_axes": [
                    3114,
                    2839,
                    2864,
                    2903,
                    3037
                ],
                "a.set_navigate_mode": [
                    2840,
                    3115
                ],
                "self.push_current": [
                    3032,
                    2899,
                    2860,
                    2955
                ],
                "a.get_navigate": [
                    2905,
                    2866
                ],
                "a.can_pan": [
                    2866
                ],
                "a.start_pan": [
                    2867
                ],
                "self._xypress.append": [
                    2906,
                    2868
                ],
                "self.drag_pan": [
                    2871
                ],
                "self.press": [
                    2873,
                    2917
                ],
                "zoom_id": [
                    2880,
                    2881,
                    2982,
                    2983
                ],
                "self.release": [
                    3002,
                    3033,
                    2882,
                    2956
                ],
                "a.can_zoom": [
                    2905
                ],
                "a._get_view": [
                    2906
                ],
                "id1": [
                    2914,
                    2908
                ],
                "self.drag_zoom": [
                    2908
                ],
                "id2": [
                    2914,
                    2909
                ],
                "self._switch_on_zoom_mode": [
                    2910
                ],
                "id3": [
                    2914,
                    2911
                ],
                "self._switch_off_zoom_mode": [
                    2912
                ],
                "self._nav_stack.push": [
                    2929
                ],
                "WeakKeyDictionary": [
                    2930
                ],
                "ax._get_view": [
                    2931
                ],
                "frozen": [
                    2933,
                    2934
                ],
                "ax.get_position": [
                    2933,
                    2934
                ],
                "self.canvas.figure.axes": [
                    2935
                ],
                "ind": [
                    2961,
                    2971,
                    2995,
                    2949
                ],
                "a.end_pan": [
                    2950
                ],
                "a.drag_pan": [
                    2964
                ],
                "self.canvas.draw_idle": [
                    3050,
                    3068,
                    2965
                ],
                "lastx": [
                    3023,
                    2995,
                    2999,
                    2971,
                    2973
                ],
                "lasty": [
                    3023,
                    2995,
                    3000,
                    2971,
                    2973
                ],
                "view": [
                    3064,
                    2971,
                    2995,
                    3063
                ],
                "x1": [
                    2977,
                    2978,
                    2972
                ],
                "y1": [
                    2978,
                    2972,
                    2975
                ],
                "x2": [
                    2977,
                    2978,
                    2972
                ],
                "y2": [
                    2978,
                    2972,
                    2975
                ],
                "np.clip": [
                    2972
                ],
                "a.bbox.min": [
                    2973
                ],
                "a.bbox": [
                    2977,
                    2973,
                    2975
                ],
                "a.bbox.max": [
                    2973
                ],
                "a.bbox.intervaly": [
                    2975
                ],
                "a.bbox.intervalx": [
                    2977
                ],
                "self.draw_rubberband": [
                    2978
                ],
                "self.remove_rubberband": [
                    2986
                ],
                "last_a": [
                    3008,
                    3009,
                    3014,
                    2991
                ],
                "cur_xypress": [
                    2993,
                    2995
                ],
                "abs": [
                    3000,
                    2999
                ],
                "twinx": [
                    3024,
                    3011,
                    3007
                ],
                "twiny": [
                    3024,
                    3013,
                    3007
                ],
                "la": [
                    3009,
                    3010,
                    3012
                ],
                "joined": [
                    3010,
                    3012
                ],
                "a.get_shared_x_axes": [
                    3010
                ],
                "a.get_shared_y_axes": [
                    3012
                ],
                "last_a.append": [
                    3014
                ],
                "direction": [
                    3017,
                    3019,
                    3023
                ],
                "a._set_view_from_bbox": [
                    3023
                ],
                "xaxis": [
                    3041,
                    3042,
                    3043,
                    3038
                ],
                "yaxis": [
                    3044,
                    3045,
                    3046,
                    3039
                ],
                "locators": [
                    3040,
                    3042,
                    3043,
                    3045,
                    3046,
                    3048
                ],
                "locators.append": [
                    3042,
                    3043,
                    3045,
                    3046
                ],
                "xaxis.get_major_locator": [
                    3042
                ],
                "xaxis.get_minor_locator": [
                    3043
                ],
                "yaxis.get_major_locator": [
                    3045
                ],
                "yaxis.get_minor_locator": [
                    3046
                ],
                "loc": [
                    3048,
                    3049
                ],
                "loc.refresh": [
                    3049
                ],
                "nav_info": [
                    3057,
                    3058,
                    3062
                ],
                "items": [
                    3062,
                    3063
                ],
                "list": [
                    3062
                ],
                "nav_info.items": [
                    3062
                ],
                "pos_orig": [
                    3066,
                    3063
                ],
                "pos_active": [
                    3067,
                    3063
                ],
                "ax._set_view": [
                    3064
                ],
                "ax._set_position": [
                    3066,
                    3067
                ],
                "self._nav_stack.clear": [
                    3086
                ],
                "self.press_zoom": [
                    3106
                ],
                "self.release_zoom": [
                    3108
                ],
                "_icon_extension": [
                    3133
                ],
                "toolmanager": [
                    3141,
                    3270
                ],
                "self.toolmanager.toolmanager_connect": [
                    3172,
                    3142,
                    3271
                ],
                "self._remove_tool_cbk": [
                    3143
                ],
                "self.toggle_toolitem": [
                    3176,
                    3151
                ],
                "event.tool.name": [
                    3180,
                    3151
                ],
                "event.tool": [
                    3180,
                    3151
                ],
                "event.tool.toggled": [
                    3151
                ],
                "tool": [
                    3168,
                    3169,
                    3170,
                    3172,
                    3175,
                    3176,
                    3166,
                    3167
                ],
                "self.toolmanager.get_tool": [
                    3166
                ],
                "image": [
                    3170,
                    3184,
                    3189,
                    3190,
                    3191,
                    3192,
                    3167
                ],
                "self._get_image_filename": [
                    3167
                ],
                "tool.image": [
                    3167
                ],
                "toggle": [
                    3168,
                    3170,
                    3171
                ],
                "self.add_toolitem": [
                    3169
                ],
                "tool.name": [
                    3176,
                    3169,
                    3172
                ],
                "group": [
                    3169
                ],
                "position": [
                    3169
                ],
                "tool.description": [
                    3170
                ],
                "self._tool_toggled_cbk": [
                    3173
                ],
                "tool.toggled": [
                    3175
                ],
                "self.remove_toolitem": [
                    3180
                ],
                "basedir": [
                    3192,
                    3187,
                    3191
                ],
                "cbook._get_data_path": [
                    3187
                ],
                "fname": [
                    3194,
                    3195,
                    3188
                ],
                "self._icon_extension": [
                    3192,
                    3190
                ],
                "os.path.isfile": [
                    3194
                ],
                "self.toolmanager.trigger_tool": [
                    3206
                ],
                "self._message_cbk": [
                    3272
                ],
                "event.message": [
                    3276
                ],
                "backend_version": [
                    3298
                ],
                "FigureManager": [
                    3304
                ],
                "FigureManagerBase": [
                    3304
                ],
                "trigger_manager_draw": [
                    3311
                ],
                "mainloop": [
                    3312
                ],
                "fig_cls": [
                    3322,
                    3323
                ],
                "Figure": [
                    3322
                ],
                "fig": [
                    3323,
                    3324
                ],
                "cls.new_figure_manager_given_figure": [
                    3324
                ],
                "cls.FigureCanvas": [
                    3329
                ],
                "manager": [
                    3330,
                    3331,
                    3336,
                    3337,
                    3338,
                    3353,
                    3355
                ],
                "cls.FigureManager": [
                    3330
                ],
                "cls.trigger_manager_draw": [
                    3338,
                    3335
                ],
                "is_interactive": [
                    3367,
                    3335
                ],
                "Gcf.get_active": [
                    3336
                ],
                "managers": [
                    3353,
                    3350,
                    3351
                ],
                "Gcf.get_all_fig_managers": [
                    3350
                ],
                "manager.canvas.figure.show": [
                    3355
                ],
                "manager.canvas.figure": [
                    3355
                ],
                "manager.canvas": [
                    3355
                ],
                "cls.mainloop": [
                    3394,
                    3356,
                    3373
                ],
                "block": [
                    3367,
                    3371,
                    3372,
                    3408,
                    3358
                ],
                "ipython_pylab": [
                    3364,
                    3366,
                    3367
                ],
                "pyplot.show._needmain": [
                    3364
                ],
                "pyplot.show": [
                    3364
                ],
                "pyplot": [
                    3364
                ],
                "get_backend": [
                    3370
                ],
                "cbook._make_keyword_only": [
                    3341
                ],
                "setattr": [
                    3388,
                    3396
                ],
                "cls.__module__": [
                    3388,
                    3396
                ],
                "ShowBase": [
                    3392
                ],
                "Show": [
                    3396
                ],
                "staticmethod": [
                    3377
                ],
                "_Backend": [
                    3400
                ],
                "self.show": [
                    3408
                ]
            },
            "filtered_variables_in_file": {
                "LooseVersion": [
                    59
                ],
                "PILLOW_VERSION": [
                    59,
                    63
                ],
                "_has_pil": [
                    65,
                    60,
                    62,
                    1591
                ],
                "_log": [
                    67,
                    2435,
                    2422
                ],
                "logging.getLogger": [
                    67
                ],
                "logging": [
                    67
                ],
                "_default_filetypes": [
                    113,
                    69,
                    1590
                ],
                "_default_backends": [
                    112,
                    82,
                    121,
                    123,
                    126
                ],
                "description": [
                    113,
                    110,
                    111
                ],
                "backend": [
                    112
                ],
                "backend_class": [
                    123,
                    124,
                    125,
                    126,
                    127
                ],
                "FigureCanvas": [
                    3301,
                    125
                ],
                "importlib.import_module": [
                    125
                ],
                "importlib": [
                    125
                ],
                "self._texmanager": [
                    650,
                    652,
                    653,
                    151
                ],
                "self": [
                    2051,
                    2052,
                    2054,
                    2055,
                    2063,
                    2066,
                    2068,
                    2077,
                    2097,
                    2098,
                    2099,
                    2116,
                    2117,
                    2124,
                    2125,
                    2132,
                    2134,
                    2147,
                    2148,
                    151,
                    152,
                    2204,
                    2218,
                    201,
                    2273,
                    2274,
                    2275,
                    233,
                    236,
                    2286,
                    243,
                    262,
                    302,
                    397,
                    2531,
                    2532,
                    2533,
                    2535,
                    2536,
                    2538,
                    2540,
                    2541,
                    2543,
                    2545,
                    2546,
                    2548,
                    2551,
                    2552,
                    510,
                    2578,
                    2583,
                    547,
                    563,
                    564,
                    569,
                    570,
                    598,
                    602,
                    612,
                    615,
                    2665,
                    618,
                    2667,
                    620,
                    2666,
                    2668,
                    623,
                    624,
                    2669,
                    2673,
                    2670,
                    2674,
                    2676,
                    2678,
                    2671,
                    2675,
                    2681,
                    2679,
                    2683,
                    2684,
                    2691,
                    2692,
                    2693,
                    650,
                    652,
                    653,
                    2707,
                    2708,
                    2709,
                    2713,
                    2714,
                    2715,
                    2743,
                    2744,
                    2745,
                    2746,
                    2748,
                    2749,
                    2750,
                    2751,
                    2752,
                    2753,
                    2754,
                    2755,
                    720,
                    721,
                    722,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    733,
                    734,
                    735,
                    736,
                    737,
                    2780,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    756,
                    757,
                    758,
                    2801,
                    2802,
                    2804,
                    2806,
                    2817,
                    2818,
                    771,
                    2820,
                    2821,
                    2822,
                    775,
                    2823,
                    2825,
                    2826,
                    2827,
                    781,
                    2829,
                    2830,
                    2831,
                    2832,
                    2833,
                    787,
                    2834,
                    2835,
                    2837,
                    2839,
                    2840,
                    2842,
                    795,
                    796,
                    2851,
                    2853,
                    2855,
                    810,
                    2858,
                    2860,
                    2863,
                    2864,
                    817,
                    2868,
                    821,
                    2869,
                    2870,
                    2871,
                    825,
                    2873,
                    829,
                    2879,
                    2880,
                    833,
                    2881,
                    2882,
                    2883,
                    837,
                    2884,
                    2885,
                    2886,
                    2890,
                    2892,
                    2894,
                    848,
                    2897,
                    2899,
                    2902,
                    2903,
                    2906,
                    860,
                    861,
                    2908,
                    863,
                    864,
                    865,
                    2909,
                    2910,
                    2911,
                    2912,
                    870,
                    2914,
                    2915,
                    2917,
                    2920,
                    875,
                    2921,
                    2924,
                    2925,
                    881,
                    2929,
                    2935,
                    2936,
                    892,
                    2944,
                    2946,
                    2947,
                    2948,
                    2949,
                    2951,
                    2953,
                    2954,
                    2955,
                    2956,
                    2957,
                    2961,
                    2964,
                    2965,
                    918,
                    2969,
                    2971,
                    2974,
                    2976,
                    2978,
                    931,
                    932,
                    933,
                    934,
                    2982,
                    936,
                    2983,
                    938,
                    2984,
                    2986,
                    2988,
                    943,
                    2993,
                    947,
                    951,
                    2999,
                    3000,
                    3001,
                    955,
                    3002,
                    3003,
                    966,
                    3016,
                    970,
                    3018,
                    974,
                    3024,
                    978,
                    3026,
                    3027,
                    3028,
                    3030,
                    3032,
                    985,
                    3033,
                    989,
                    3037,
                    993,
                    3050,
                    3057,
                    1013,
                    3068,
                    1030,
                    3086,
                    3087,
                    3091,
                    3092,
                    3094,
                    3096,
                    3097,
                    3098,
                    3100,
                    3101,
                    3102,
                    3104,
                    3105,
                    3106,
                    3107,
                    3108,
                    3109,
                    3110,
                    3112,
                    3114,
                    3115,
                    3117,
                    1077,
                    1079,
                    1082,
                    1084,
                    1086,
                    1089,
                    1093,
                    3141,
                    3142,
                    3143,
                    3151,
                    1106,
                    1107,
                    1111,
                    3166,
                    3167,
                    1121,
                    3169,
                    3172,
                    3173,
                    1128,
                    1129,
                    3176,
                    3180,
                    1133,
                    1137,
                    1138,
                    3190,
                    3192,
                    1148,
                    3206,
                    1168,
                    1170,
                    1172,
                    1186,
                    1194,
                    1196,
                    1197,
                    1219,
                    1220,
                    1221,
                    3270,
                    3271,
                    3272,
                    3276,
                    1248,
                    1249,
                    1267,
                    1268,
                    1305,
                    1307,
                    1309,
                    1310,
                    1311,
                    1312,
                    1316,
                    1319,
                    1320,
                    1322,
                    1324,
                    1326,
                    1331,
                    1332,
                    1334,
                    1340,
                    1352,
                    1353,
                    1357,
                    1358,
                    1360,
                    3408,
                    1423,
                    1426,
                    1427,
                    1428,
                    1429,
                    1432,
                    1433,
                    1434,
                    1435,
                    1474,
                    1475,
                    1476,
                    1477,
                    1515,
                    1516,
                    1609,
                    1610,
                    1611,
                    1612,
                    1613,
                    1615,
                    1616,
                    1617,
                    1618,
                    1619,
                    1620,
                    1621,
                    1622,
                    1623,
                    1624,
                    2768,
                    2769,
                    2770,
                    1654,
                    1656,
                    2772,
                    1663,
                    1666,
                    1667,
                    2775,
                    1678,
                    1679,
                    1686,
                    1687,
                    1688,
                    1696,
                    1697,
                    1710,
                    1713,
                    1714,
                    1722,
                    1723,
                    1724,
                    1732,
                    1735,
                    1747,
                    1749,
                    1751,
                    1753,
                    1764,
                    1766,
                    1768,
                    1788,
                    1789,
                    1790,
                    1809,
                    1811,
                    1813,
                    1825,
                    1827,
                    1843,
                    1851,
                    1852,
                    1870,
                    1887,
                    1889,
                    1898,
                    1899,
                    1917,
                    1918,
                    1919,
                    1933,
                    1962,
                    1963,
                    1967,
                    1971,
                    2025,
                    2031,
                    2037,
                    2043,
                    2044
                ],
                "self._text2path": [
                    612,
                    620,
                    623,
                    624,
                    563,
                    152
                ],
                "textpath.TextToPath": [
                    152
                ],
                "textpath": [
                    152
                ],
                "vertices": [
                    200,
                    198,
                    199
                ],
                "codes": [
                    565,
                    198,
                    567
                ],
                "path.iter_segments": [
                    198
                ],
                "path": [
                    581,
                    198,
                    232,
                    233,
                    330,
                    333,
                    240,
                    243,
                    598,
                    567,
                    602,
                    891,
                    892
                ],
                "trans": [
                    1326,
                    198,
                    1327
                ],
                "x": [
                    1423,
                    1809,
                    1811,
                    2970,
                    1307,
                    2973,
                    1314,
                    547,
                    1320,
                    2862,
                    1327,
                    2865,
                    1842,
                    1843,
                    2867,
                    1845,
                    2994,
                    2999,
                    1851,
                    574,
                    579,
                    200,
                    203,
                    3023,
                    2901,
                    1751,
                    599,
                    2904,
                    2906,
                    1766,
                    1515,
                    1788,
                    510
                ],
                "y": [
                    1423,
                    1809,
                    1811,
                    2970,
                    1309,
                    2973,
                    1314,
                    547,
                    1320,
                    2862,
                    1327,
                    2865,
                    1842,
                    1843,
                    2867,
                    2994,
                    1846,
                    3000,
                    1851,
                    574,
                    579,
                    200,
                    203,
                    3023,
                    2901,
                    1751,
                    599,
                    2904,
                    2906,
                    1766,
                    1515,
                    1788,
                    510
                ],
                "self.draw_path": [
                    201,
                    602,
                    243
                ],
                "gc": [
                    260,
                    263,
                    398,
                    547,
                    302,
                    201,
                    600,
                    601,
                    602,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    237,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755,
                    756,
                    757,
                    758,
                    510
                ],
                "marker_path": [
                    201
                ],
                "marker_trans": [
                    202
                ],
                "translate": [
                    576,
                    241,
                    203,
                    571
                ],
                "transforms.Affine2D": [
                    232,
                    241,
                    203
                ],
                "transforms": [
                    232,
                    328,
                    203,
                    241,
                    891
                ],
                "rgbFace": [
                    425,
                    204,
                    236,
                    401,
                    243,
                    439,
                    440,
                    441,
                    446
                ],
                "path_ids": [
                    408,
                    237,
                    382,
                    231
                ],
                "transform": [
                    413,
                    417,
                    418,
                    300,
                    302,
                    571,
                    576,
                    581,
                    328,
                    332,
                    333,
                    598,
                    602,
                    232,
                    233,
                    240,
                    241,
                    242,
                    243
                ],
                "self._iter_collection_raw_paths": [
                    233
                ],
                "master_transform": [
                    417,
                    263,
                    234,
                    333,
                    237,
                    415
                ],
                "paths": [
                    321,
                    263,
                    234,
                    330,
                    345,
                    255
                ],
                "all_transforms": [
                    322,
                    234,
                    332,
                    237,
                    348,
                    381,
                    414
                ],
                "xo": [
                    418,
                    419,
                    420,
                    422,
                    236,
                    242,
                    406,
                    410,
                    446
                ],
                "yo": [
                    418,
                    419,
                    421,
                    422,
                    236,
                    242,
                    406,
                    410,
                    446
                ],
                "path_id": [
                    240,
                    236,
                    408,
                    446
                ],
                "gc0": [
                    236,
                    397,
                    398,
                    428,
                    430,
                    434,
                    243,
                    404,
                    436,
                    438,
                    442,
                    444,
                    446,
                    447
                ],
                "self._iter_collection": [
                    236
                ],
                "offsets": [
                    263,
                    395,
                    237,
                    349,
                    383
                ],
                "offsetTrans": [
                    395,
                    238,
                    263
                ],
                "facecolors": [
                    385,
                    259,
                    263,
                    425,
                    238,
                    346
                ],
                "edgecolors": [
                    258,
                    259,
                    386,
                    264,
                    238,
                    431,
                    346
                ],
                "linewidths": [
                    387,
                    260,
                    264,
                    428,
                    238
                ],
                "linestyles": [
                    388,
                    430,
                    238
                ],
                "antialiaseds": [
                    442,
                    389,
                    239
                ],
                "urls": [
                    444,
                    390,
                    239
                ],
                "offset_position": [
                    411,
                    239
                ],
                "transform.get_matrix": [
                    242
                ],
                "QuadMesh.convert_mesh_to_paths": [
                    255
                ],
                "QuadMesh": [
                    255
                ],
                "meshWidth": [
                    256
                ],
                "meshHeight": [
                    256
                ],
                "coordinates": [
                    256
                ],
                "np.array": [
                    260
                ],
                "np": [
                    260,
                    422,
                    2769,
                    914,
                    915,
                    568,
                    2972,
                    2270
                ],
                "gc.get_linewidth": [
                    260
                ],
                "self.draw_path_collection": [
                    262
                ],
                "antialiased": [
                    264
                ],
                "transform.frozen": [
                    300
                ],
                "tri": [
                    301,
                    302
                ],
                "col": [
                    301,
                    302
                ],
                "triangles_array": [
                    301
                ],
                "colors_array": [
                    301
                ],
                "self.draw_gouraud_triangle": [
                    302
                ],
                "Npaths": [
                    384,
                    321,
                    323,
                    325,
                    392,
                    330,
                    408,
                    345,
                    346,
                    348,
                    382
                ],
                "Ntransforms": [
                    322,
                    323,
                    331,
                    332,
                    412,
                    381,
                    414
                ],
                "N": [
                    384,
                    323,
                    329,
                    407,
                    349,
                    350
                ],
                "transforms.IdentityTransform": [
                    328
                ],
                "i": [
                    2449,
                    2452,
                    407,
                    408,
                    410,
                    414,
                    425,
                    428,
                    430,
                    431,
                    2864,
                    2868,
                    442,
                    444,
                    329,
                    330,
                    332,
                    2903,
                    2906
                ],
                "Affine2D": [
                    576,
                    571,
                    332,
                    414
                ],
                "Npath_ids": [
                    348,
                    349,
                    350
                ],
                "Noffsets": [
                    384,
                    394,
                    409,
                    410,
                    383
                ],
                "Nfacecolors": [
                    385,
                    392,
                    425,
                    424,
                    400
                ],
                "Nedgecolors": [
                    386,
                    392,
                    426,
                    431,
                    403
                ],
                "Nlinewidths": [
                    387,
                    428,
                    427
                ],
                "Nlinestyles": [
                    388,
                    429,
                    430
                ],
                "Naa": [
                    442,
                    389
                ],
                "Nurls": [
                    443,
                    444,
                    390
                ],
                "toffsets": [
                    410,
                    395
                ],
                "offsetTrans.transform": [
                    395
                ],
                "self.new_gc": [
                    397
                ],
                "gc0.copy_properties": [
                    398
                ],
                "gc0.set_linewidth": [
                    434,
                    428,
                    404
                ],
                "xp": [
                    418,
                    420
                ],
                "yp": [
                    418,
                    421
                ],
                "transform.transform": [
                    418
                ],
                "np.isfinite": [
                    422
                ],
                "gc0.set_dashes": [
                    430
                ],
                "fg": [
                    932,
                    934,
                    936,
                    938,
                    431,
                    432,
                    433,
                    436,
                    438
                ],
                "gc0.set_foreground": [
                    436,
                    438
                ],
                "gc0.set_antialiased": [
                    442
                ],
                "gc0.set_url": [
                    444
                ],
                "gc0.restore": [
                    447
                ],
                "self._draw_text_as_path": [
                    547,
                    510
                ],
                "s": [
                    1677,
                    1678,
                    1679,
                    1810,
                    1811,
                    1685,
                    1686,
                    1687,
                    1813,
                    2204,
                    1694,
                    1696,
                    1697,
                    547,
                    682,
                    1711,
                    1713,
                    1714,
                    565,
                    1720,
                    1722,
                    1723,
                    1731,
                    1732,
                    1735,
                    1750,
                    599,
                    1751,
                    1753,
                    2785,
                    1765,
                    1766,
                    615,
                    1768,
                    620,
                    2799,
                    2802,
                    628,
                    2804,
                    1787,
                    1788,
                    1789,
                    510
                ],
                "prop": [
                    547,
                    613,
                    620,
                    624,
                    625,
                    564,
                    565,
                    599,
                    510
                ],
                "angle": [
                    578,
                    547,
                    599,
                    568,
                    573,
                    510
                ],
                "ismath": [
                    610,
                    547,
                    619,
                    565,
                    599
                ],
                "text2path": [
                    577,
                    563,
                    572,
                    565
                ],
                "fontsize": [
                    577,
                    613,
                    615,
                    564,
                    572
                ],
                "self.points_to_pixels": [
                    618,
                    564
                ],
                "prop.get_size_in_points": [
                    625,
                    564,
                    613
                ],
                "verts": [
                    565,
                    567
                ],
                "text2path.get_text_path": [
                    565
                ],
                "Path": [
                    981,
                    567
                ],
                "np.deg2rad": [
                    568
                ],
                "self.flipy": [
                    569
                ],
                "width": [
                    570
                ],
                "height": [
                    570,
                    574
                ],
                "self.get_canvas_width_height": [
                    570
                ],
                "rotate": [
                    576,
                    571
                ],
                "scale": [
                    576,
                    1031,
                    1032,
                    2414,
                    2415,
                    2418,
                    571
                ],
                "text2path.FONT_SCALE": [
                    577,
                    572
                ],
                "self._get_text_path_transform": [
                    598
                ],
                "color": [
                    600,
                    602
                ],
                "gc.get_rgb": [
                    600
                ],
                "gc.set_linewidth": [
                    601
                ],
                "texmanager": [
                    612,
                    614
                ],
                "self._text2path.get_texmanager": [
                    612
                ],
                "w": [
                    614,
                    616,
                    947,
                    629,
                    631,
                    634
                ],
                "h": [
                    614,
                    616,
                    629,
                    632,
                    634
                ],
                "d": [
                    614,
                    616,
                    630,
                    633,
                    634
                ],
                "texmanager.get_text_width_height_descent": [
                    614
                ],
                "dpi": [
                    2087,
                    618,
                    620,
                    2065,
                    2034,
                    2035,
                    626,
                    2036,
                    2037,
                    2044
                ],
                "dims": [
                    620,
                    621
                ],
                "self._text2path.mathtext_parser.parse": [
                    620
                ],
                "self._text2path.mathtext_parser": [
                    620
                ],
                "flags": [
                    628,
                    623
                ],
                "self._text2path._get_hinting_flag": [
                    623
                ],
                "font": [
                    624,
                    626,
                    628,
                    629,
                    630
                ],
                "self._text2path._get_font": [
                    624
                ],
                "size": [
                    625,
                    626
                ],
                "font.set_size": [
                    626
                ],
                "font.set_text": [
                    628
                ],
                "font.get_width_height": [
                    629
                ],
                "font.get_descent": [
                    630
                ],
                "TexManager": [
                    652
                ],
                "GraphicsContextBase": [
                    657
                ],
                "points": [
                    678
                ],
                "cbook.strip_math": [
                    682
                ],
                "cbook": [
                    1921,
                    1603,
                    2043,
                    680,
                    2793,
                    682,
                    874,
                    1162,
                    2044,
                    942,
                    1615,
                    2667,
                    3341,
                    1874,
                    3187,
                    1847,
                    891,
                    1532
                ],
                "cbook.deprecated": [
                    680,
                    1921
                ],
                "self._alpha": [
                    771,
                    932,
                    741,
                    934,
                    720,
                    860,
                    863
                ],
                "self._forced_alpha": [
                    864,
                    931,
                    933,
                    742,
                    721,
                    817,
                    861
                ],
                "self._antialiased": [
                    722,
                    775,
                    870,
                    743
                ],
                "self._capstyle": [
                    744,
                    875,
                    723,
                    781
                ],
                "self._cliprect": [
                    745,
                    787,
                    724,
                    881
                ],
                "self._clippath": [
                    796,
                    746,
                    725,
                    795,
                    892
                ],
                "self._dashes": [
                    918,
                    810,
                    747,
                    726
                ],
                "self._joinstyle": [
                    943,
                    748,
                    821,
                    727
                ],
                "self._linestyle": [
                    728,
                    749
                ],
                "self._linewidth": [
                    729,
                    947,
                    750,
                    825
                ],
                "self._rgb": [
                    865,
                    932,
                    934,
                    936,
                    938,
                    751,
                    730,
                    829
                ],
                "self._hatch": [
                    752,
                    970,
                    731,
                    974
                ],
                "self._hatch_color": [
                    989,
                    753,
                    732,
                    985
                ],
                "colors.to_rgba": [
                    938,
                    732,
                    934
                ],
                "colors": [
                    938,
                    732,
                    934
                ],
                "rcParams": [
                    2049,
                    2309,
                    2310,
                    2311,
                    2312,
                    2313,
                    2058,
                    2314,
                    2315,
                    2316,
                    2317,
                    2318,
                    2319,
                    2320,
                    2321,
                    2577,
                    2582,
                    2072,
                    2461,
                    2463,
                    2109,
                    732,
                    733,
                    2537,
                    2035,
                    2047
                ],
                "self._hatch_linewidth": [
                    993,
                    754,
                    733
                ],
                "self._url": [
                    833,
                    755,
                    734,
                    951
                ],
                "self._gid": [
                    955,
                    756,
                    837,
                    735
                ],
                "self._snap": [
                    736,
                    848,
                    757,
                    966
                ],
                "self._sketch": [
                    737,
                    1013,
                    758,
                    1030
                ],
                "gc._alpha": [
                    741
                ],
                "gc._forced_alpha": [
                    742
                ],
                "gc._antialiased": [
                    743
                ],
                "gc._capstyle": [
                    744
                ],
                "gc._cliprect": [
                    745
                ],
                "gc._clippath": [
                    746
                ],
                "gc._dashes": [
                    747
                ],
                "gc._joinstyle": [
                    748
                ],
                "gc._linestyle": [
                    749
                ],
                "gc._linewidth": [
                    750
                ],
                "gc._rgb": [
                    751
                ],
                "gc._hatch": [
                    752
                ],
                "gc._hatch_color": [
                    753
                ],
                "gc._hatch_linewidth": [
                    754
                ],
                "gc._url": [
                    755
                ],
                "gc._gid": [
                    756
                ],
                "gc._snap": [
                    757
                ],
                "gc._sketch": [
                    758
                ],
                "self._clippath.get_transformed_path_and_affine": [
                    796
                ],
                "alpha": [
                    859,
                    860
                ],
                "self.set_foreground": [
                    865
                ],
                "b": [
                    870
                ],
                "cbook._check_in_list": [
                    874,
                    942
                ],
                "cs": [
                    874,
                    875
                ],
                "rectangle": [
                    881
                ],
                "cbook._check_isinstance": [
                    891
                ],
                "transforms.TransformedPath": [
                    891
                ],
                "dash_list": [
                    913,
                    914,
                    918
                ],
                "dl": [
                    914,
                    915
                ],
                "np.asarray": [
                    914
                ],
                "np.any": [
                    915
                ],
                "dash_offset": [
                    918
                ],
                "isRGBA": [
                    931,
                    935
                ],
                "js": [
                    942,
                    943
                ],
                "url": [
                    951
                ],
                "snap": [
                    966
                ],
                "hatch": [
                    978,
                    970,
                    979,
                    981
                ],
                "self.get_hatch": [
                    978
                ],
                "Path.hatch": [
                    981
                ],
                "density": [
                    981
                ],
                "hatch_color": [
                    989
                ],
                "length": [
                    1032
                ],
                "randomness": [
                    1032
                ],
                "callbacks": [
                    1076,
                    1079
                ],
                "self.callbacks": [
                    1679,
                    1168,
                    1170,
                    1172,
                    1813,
                    1687,
                    2204,
                    1697,
                    1186,
                    1825,
                    1194,
                    2218,
                    1196,
                    1714,
                    1077,
                    1079,
                    1723,
                    1852,
                    1735,
                    1615,
                    1753,
                    1768,
                    1148,
                    1789
                ],
                "interval": [
                    1123,
                    1127,
                    1128,
                    1105,
                    1106,
                    1081,
                    1084
                ],
                "self._interval": [
                    1128,
                    1121,
                    1082,
                    1084
                ],
                "self._single": [
                    1137,
                    1133,
                    1086
                ],
                "self._timer": [
                    1089
                ],
                "self._timer_stop": [
                    1093,
                    1111
                ],
                "self._set_interval": [
                    1106
                ],
                "self._timer_start": [
                    1107
                ],
                "self._timer_set_interval": [
                    1129
                ],
                "interval.setter": [
                    1123
                ],
                "ss": [
                    1137
                ],
                "self._timer_set_single_shot": [
                    1138
                ],
                "single_shot.setter": [
                    1135
                ],
                "single_shot": [
                    1135
                ],
                "self.callbacks.append": [
                    1148
                ],
                "func": [
                    1186,
                    1187,
                    1194,
                    1168,
                    2204,
                    1171,
                    1172,
                    1148,
                    1149
                ],
                "args": [
                    1186,
                    1187,
                    2243,
                    1161,
                    1194,
                    1168,
                    3323,
                    1148,
                    1919
                ],
                "kwargs": [
                    1186,
                    1187,
                    2243,
                    1477,
                    1734,
                    1161,
                    1194,
                    2092,
                    1168,
                    2067,
                    2070,
                    3322,
                    3323,
                    1148,
                    1919
                ],
                "cbook.warn_deprecated": [
                    1162,
                    1847
                ],
                "self.callbacks.remove": [
                    1168,
                    1194
                ],
                "funcs": [
                    1170,
                    1171,
                    1172
                ],
                "c": [
                    1170
                ],
                "self.callbacks.pop": [
                    1172
                ],
                "funcs.index": [
                    1172
                ],
                "ret": [
                    1193,
                    1187
                ],
                "self.stop": [
                    1197
                ],
                "self.name": [
                    1432,
                    1219
                ],
                "name": [
                    1248,
                    1474,
                    1219,
                    3206,
                    1515,
                    1423,
                    1267,
                    3379,
                    1305,
                    3388,
                    1949,
                    1950,
                    1951
                ],
                "self.canvas": [
                    2946,
                    2947,
                    2822,
                    2826,
                    2830,
                    2832,
                    2578,
                    2835,
                    2837,
                    2965,
                    2583,
                    2839,
                    3097,
                    3101,
                    3105,
                    3107,
                    3110,
                    1319,
                    1320,
                    2983,
                    1322,
                    3112,
                    3114,
                    2864,
                    2869,
                    2870,
                    2881,
                    1220,
                    1353,
                    1358,
                    2903,
                    2908,
                    2909,
                    3037,
                    2911,
                    2531,
                    2665,
                    2538,
                    3050,
                    2541,
                    2675,
                    2548,
                    2935,
                    3068
                ],
                "canvas": [
                    3329,
                    3330,
                    2440,
                    1423,
                    2448,
                    2449,
                    2326,
                    1305,
                    2332,
                    2078,
                    1474,
                    1220,
                    2393,
                    1248,
                    2531,
                    2532,
                    2665,
                    2666,
                    1515,
                    2411,
                    2031,
                    2032,
                    1267,
                    1268
                ],
                "self.guiEvent": [
                    1221
                ],
                "guiEvent": [
                    1696,
                    1474,
                    1221,
                    1767,
                    1515,
                    1423,
                    1713,
                    1812,
                    1752,
                    1305,
                    1722,
                    1851,
                    1788
                ],
                "Event": [
                    1248,
                    1474,
                    1252,
                    1224,
                    1267,
                    1271,
                    1305,
                    1275,
                    1438
                ],
                "Event.__init__": [
                    1248,
                    1305,
                    1474,
                    1267
                ],
                "self.renderer": [
                    1249
                ],
                "renderer": [
                    1249,
                    1678,
                    2062,
                    2066,
                    2068,
                    1530
                ],
                "self.width": [
                    1268
                ],
                "self.height": [
                    1268
                ],
                "canvas.get_width_height": [
                    1268
                ],
                "lastevent": [
                    1299
                ],
                "self.x": [
                    1433,
                    1307
                ],
                "self.y": [
                    1433,
                    1309
                ],
                "self.inaxes": [
                    1320,
                    1352,
                    1322,
                    1324,
                    1357,
                    1326,
                    1435,
                    1340,
                    1310
                ],
                "self.xdata": [
                    1433,
                    1331,
                    1311
                ],
                "self.ydata": [
                    1312,
                    1433,
                    1332
                ],
                "self._update_enter_leave": [
                    1316,
                    1334
                ],
                "self.canvas.mouse_grabber": [
                    1322,
                    1319
                ],
                "self.canvas.inaxes": [
                    1320
                ],
                "self.inaxes.transData.inverted": [
                    1326
                ],
                "self.inaxes.transData": [
                    1326
                ],
                "xdata": [
                    1331,
                    1327
                ],
                "ydata": [
                    1332,
                    1327
                ],
                "trans.transform": [
                    1327
                ],
                "LocationEvent.lastevent": [
                    1825,
                    1826,
                    1360,
                    1338,
                    1339
                ],
                "LocationEvent": [
                    1825,
                    1826,
                    1851,
                    1480,
                    1515,
                    1423,
                    1360,
                    1371,
                    1338,
                    1339
                ],
                "last": [
                    1344,
                    1339,
                    1340,
                    1343
                ],
                "last.inaxes": [
                    1340,
                    1343
                ],
                "last.canvas.callbacks.process": [
                    1344
                ],
                "last.canvas.callbacks": [
                    1344
                ],
                "last.canvas": [
                    1344
                ],
                "self.canvas.callbacks.process": [
                    1353,
                    1358
                ],
                "self.canvas.callbacks": [
                    1353,
                    1358
                ],
                "IntEnum": [
                    1363
                ],
                "LEFT": [
                    1364
                ],
                "MIDDLE": [
                    1365
                ],
                "RIGHT": [
                    1366
                ],
                "BACK": [
                    1367
                ],
                "FORWARD": [
                    1368
                ],
                "LocationEvent.__init__": [
                    1515,
                    1423
                ],
                "button": [
                    1764,
                    1766,
                    1424,
                    1425,
                    1426,
                    1788
                ],
                "MouseButton.__members__.values": [
                    1424
                ],
                "MouseButton.__members__": [
                    1424
                ],
                "MouseButton": [
                    1424,
                    1425,
                    2460
                ],
                "self.button": [
                    1426,
                    1434
                ],
                "self.key": [
                    1427,
                    1516
                ],
                "key": [
                    1516,
                    1710,
                    1713,
                    1427,
                    1722
                ],
                "self.step": [
                    1428
                ],
                "step": [
                    1752,
                    1746,
                    1428
                ],
                "self.dblclick": [
                    1434,
                    1429
                ],
                "dblclick": [
                    1429,
                    1767
                ],
                "self.mouseevent": [
                    1475
                ],
                "mouseevent": [
                    1475,
                    1732,
                    1667,
                    1733,
                    1766,
                    1768,
                    1751,
                    1753
                ],
                "self.artist": [
                    1476
                ],
                "artist": [
                    1732,
                    1476
                ],
                "self.__dict__.update": [
                    1477
                ],
                "self.__dict__": [
                    1477
                ],
                "Done": [
                    1530,
                    1535
                ],
                "cbook._setattr_cm": [
                    2043,
                    1532,
                    2044
                ],
                "figure": [
                    1536,
                    1537,
                    3329,
                    1612,
                    1613,
                    1532
                ],
                "_draw": [
                    1532
                ],
                "print_method": [
                    2032,
                    2065,
                    2085,
                    1534
                ],
                "io.BytesIO": [
                    1534
                ],
                "io": [
                    1534
                ],
                "figure._cachedRenderer": [
                    1536,
                    1537
                ],
                "exc.args": [
                    1536
                ],
                "exc": [
                    1536,
                    2435,
                    2422
                ],
                "ip": [
                    1636,
                    1637,
                    1641,
                    1549,
                    1550,
                    1551,
                    1649,
                    1650
                ],
                "ip.parent": [
                    1550,
                    1551
                ],
                "required_interactive_framework": [
                    1568
                ],
                "events": [
                    1570
                ],
                "fixed_dpi": [
                    1588
                ],
                "filetypes": [
                    1590
                ],
                "register_backend": [
                    1600,
                    1593,
                    1595,
                    1598
                ],
                "cls": [
                    3329,
                    3330,
                    3394,
                    3396,
                    1605,
                    1606,
                    3335,
                    3397,
                    3338,
                    1645,
                    3373,
                    1938,
                    3356,
                    3388,
                    3324,
                    1949
                ],
                "cbook._classproperty": [
                    1603
                ],
                "self._fix_ipython_backend2gui": [
                    1609
                ],
                "self._is_idle_drawing": [
                    1610,
                    1656,
                    1654,
                    1624,
                    1917
                ],
                "self._is_saving": [
                    1611,
                    2148,
                    1663
                ],
                "figure.set_canvas": [
                    1612
                ],
                "self.figure": [
                    1667,
                    2051,
                    2052,
                    2054,
                    2055,
                    2147,
                    1933,
                    1613,
                    1870,
                    2063,
                    2097,
                    2066,
                    2098,
                    2068,
                    2037,
                    2099,
                    2044,
                    2077
                ],
                "cbook.CallbackRegistry": [
                    1615
                ],
                "self.widgetlock": [
                    1616,
                    1666
                ],
                "widgets.LockDraw": [
                    1616
                ],
                "widgets": [
                    1616
                ],
                "self._button": [
                    1764,
                    1617,
                    1747,
                    1811,
                    1749,
                    1751,
                    1790
                ],
                "self._key": [
                    1788,
                    1766,
                    1710,
                    1618,
                    1811,
                    1751,
                    1724
                ],
                "self._lastx": [
                    1827,
                    1713,
                    1809,
                    1619,
                    1843,
                    1722
                ],
                "self._lasty": [
                    1827,
                    1713,
                    1809,
                    1619,
                    1843,
                    1722
                ],
                "self.button_pick_id": [
                    1620
                ],
                "self.mpl_connect": [
                    1620,
                    1621
                ],
                "self.pick": [
                    1620,
                    1621
                ],
                "self.scroll_pick_id": [
                    1621
                ],
                "self.mouse_grabber": [
                    1889,
                    1898,
                    1899,
                    1622,
                    1887
                ],
                "self.toolbar": [
                    2552,
                    2546,
                    2551,
                    1623
                ],
                "sys.modules": [
                    1633,
                    3388,
                    3396
                ],
                "sys": [
                    1633,
                    3388,
                    3396
                ],
                "IPython.get_ipython": [
                    1636
                ],
                "IPython": [
                    1636
                ],
                "pt": [
                    1640
                ],
                "rif": [
                    1645,
                    1647
                ],
                "backend2gui_rif": [
                    1648,
                    1650,
                    1646
                ],
                "get": [
                    1646
                ],
                "_is_non_interactive_terminal_ipython": [
                    1649
                ],
                "ip.enable_gui": [
                    1650
                ],
                "functools.lru_cache": [
                    1627
                ],
                "functools": [
                    2064,
                    1627
                ],
                "contextmanager": [
                    1652,
                    2757
                ],
                "self.widgetlock.locked": [
                    1666
                ],
                "self.figure.pick": [
                    1667
                ],
                "event": [
                    2578,
                    2583,
                    3151,
                    3180,
                    1678,
                    1679,
                    1686,
                    1687,
                    1696,
                    1697,
                    1712,
                    1714,
                    2743,
                    1721,
                    1723,
                    1732,
                    1735,
                    3276,
                    2780,
                    2782,
                    2785,
                    2789,
                    2790,
                    2794,
                    2795,
                    1788,
                    1789,
                    2305,
                    1811,
                    2324,
                    1813,
                    2331,
                    2336,
                    2850,
                    2340,
                    2852,
                    2343,
                    2346,
                    2348,
                    2350,
                    2862,
                    2352,
                    2865,
                    2354,
                    2867,
                    2357,
                    2873,
                    1851,
                    1852,
                    2882,
                    2371,
                    2376,
                    2889,
                    2891,
                    2901,
                    2904,
                    2395,
                    2915,
                    2917,
                    2920,
                    2921,
                    2413,
                    2925,
                    2426,
                    2439,
                    2441,
                    2442,
                    2956,
                    2446,
                    2447,
                    2450,
                    2451,
                    2964,
                    2970,
                    2460,
                    2978,
                    2994,
                    3002,
                    3033
                ],
                "DrawEvent": [
                    1678
                ],
                "self.callbacks.process": [
                    1697,
                    1825,
                    1735,
                    1768,
                    1679,
                    1714,
                    1813,
                    1687,
                    1753,
                    1723,
                    1852,
                    1789
                ],
                "ResizeEvent": [
                    1686
                ],
                "self.draw_idle": [
                    1688
                ],
                "CloseEvent": [
                    1696
                ],
                "KeyEvent": [
                    1712,
                    1721
                ],
                "PickEvent": [
                    1732
                ],
                "mouseevent.guiEvent": [
                    1733
                ],
                "MouseEvent": [
                    1811,
                    1788,
                    1766,
                    1751
                ],
                "xy": [
                    1841,
                    1842,
                    1871
                ],
                "axes_list": [
                    1873,
                    1874,
                    1870
                ],
                "a": [
                    2949,
                    2950,
                    2440,
                    2442,
                    2443,
                    2449,
                    2961,
                    2451,
                    2452,
                    2964,
                    2839,
                    2840,
                    2971,
                    2973,
                    2975,
                    2977,
                    3114,
                    3115,
                    2864,
                    2865,
                    2866,
                    2867,
                    2868,
                    2995,
                    3010,
                    3012,
                    3014,
                    1870,
                    1871,
                    3023,
                    2903,
                    2904,
                    2905,
                    2906,
                    3037,
                    3038,
                    3039,
                    2789,
                    2790,
                    2793,
                    2794,
                    2795,
                    2797
                ],
                "self.figure.get_axes": [
                    1870
                ],
                "a.patch.contains_point": [
                    1871
                ],
                "a.patch": [
                    1871
                ],
                "axes": [
                    1874,
                    1876,
                    1878
                ],
                "cbook._topmost_artist": [
                    2793,
                    1874
                ],
                "ax": [
                    2433,
                    2436,
                    2437,
                    2935,
                    3063,
                    3064,
                    2371,
                    3067,
                    2378,
                    2379,
                    2380,
                    2381,
                    2391,
                    2392,
                    2397,
                    2398,
                    2399,
                    2400,
                    1889,
                    1887,
                    2409,
                    1898,
                    2410,
                    2414,
                    2416,
                    2417,
                    2931,
                    2420,
                    2933,
                    2934,
                    2423,
                    2424,
                    3066,
                    2427,
                    2429,
                    2430
                ],
                "self._idle_draw_cntx": [
                    1918
                ],
                "self.draw": [
                    2883,
                    2957,
                    3026,
                    3003,
                    1919
                ],
                "self.figure.bbox.width": [
                    1933
                ],
                "self.figure.bbox": [
                    1933
                ],
                "self.figure.bbox.height": [
                    1933
                ],
                "cls.filetypes": [
                    1938,
                    1949
                ],
                "groupings": [
                    1952,
                    1948,
                    1950,
                    1951
                ],
                "ext": [
                    1949,
                    1950
                ],
                "cls.filetypes.items": [
                    1949
                ],
                "append": [
                    1950
                ],
                "groupings.setdefault": [
                    1950
                ],
                "sort": [
                    1951
                ],
                "fmt": [
                    1962,
                    1971,
                    1965
                ],
                "canvas_class": [
                    1965,
                    1966,
                    1967
                ],
                "get_registered_canvas_class": [
                    1965
                ],
                "self.switch_backends": [
                    1967
                ],
                "join": [
                    1971
                ],
                "self.get_supported_filetypes": [
                    1971
                ],
                "filename": [
                    2020,
                    2021,
                    2022,
                    2023,
                    2086,
                    2026,
                    2027
                ],
                "os.PathLike": [
                    2020
                ],
                "os": [
                    3194,
                    2020,
                    2021,
                    2023
                ],
                "os.fspath": [
                    2021
                ],
                "os.path.splitext": [
                    2023
                ],
                "os.path": [
                    3194,
                    2023
                ],
                "self.get_default_filetype": [
                    2025,
                    2134
                ],
                "filename.rstrip": [
                    2027
                ],
                "format.lower": [
                    2028
                ],
                "self._get_output_canvas": [
                    2031
                ],
                "self.figure.dpi": [
                    2037
                ],
                "facecolor": [
                    2088,
                    2054,
                    2046,
                    2047
                ],
                "edgecolor": [
                    2048,
                    2049,
                    2089,
                    2055
                ],
                "origfacecolor": [
                    2097,
                    2051
                ],
                "self.figure.get_facecolor": [
                    2051
                ],
                "origedgecolor": [
                    2098,
                    2052
                ],
                "self.figure.get_edgecolor": [
                    2052
                ],
                "self.figure.set_facecolor": [
                    2097,
                    2054
                ],
                "self.figure.set_edgecolor": [
                    2098,
                    2055
                ],
                "bbox_inches": [
                    2080,
                    2057,
                    2058,
                    2060,
                    2061,
                    2094,
                    2068,
                    2074,
                    2077
                ],
                "_get_renderer": [
                    2062
                ],
                "functools.partial": [
                    2064
                ],
                "orientation": [
                    2065,
                    2090
                ],
                "self.figure.draw": [
                    2066
                ],
                "bbox_artists": [
                    2067,
                    2069
                ],
                "kwargs.pop": [
                    3322,
                    2067,
                    2070
                ],
                "self.figure.get_tightbbox": [
                    2068
                ],
                "pad": [
                    2072,
                    2074,
                    2070,
                    2071
                ],
                "bbox_inches.padded": [
                    2074
                ],
                "restore_bbox": [
                    2080,
                    2077,
                    2094,
                    2095
                ],
                "tight_bbox.adjust_bbox": [
                    2077
                ],
                "tight_bbox": [
                    2077
                ],
                "canvas.fixed_dpi": [
                    2078
                ],
                "_bbox_inches_restore": [
                    2080,
                    2082,
                    2091
                ],
                "result": [
                    2100,
                    2085
                ],
                "self.figure.set_canvas": [
                    2099
                ],
                "self.manager.get_window_title": [
                    2117
                ],
                "self.manager": [
                    2125,
                    2117
                ],
                "self.manager.set_window_title": [
                    2125
                ],
                "title": [
                    2125
                ],
                "default_basename": [
                    2132,
                    2133,
                    2135
                ],
                "self.get_window_title": [
                    2132
                ],
                "default_basename.replace": [
                    2133
                ],
                "default_filetype": [
                    2134,
                    2135
                ],
                "default_filename": [
                    2136,
                    2135
                ],
                "newCanvas": [
                    2147,
                    2148,
                    2149
                ],
                "FigureCanvasClass": [
                    2147
                ],
                "newCanvas._is_saving": [
                    2148
                ],
                "self.callbacks.connect": [
                    2204
                ],
                "self.callbacks.disconnect": [
                    2218
                ],
                "cid": [
                    2218
                ],
                "TimerBase": [
                    2243
                ],
                "timeout": [
                    2274,
                    2269,
                    2270
                ],
                "np.inf": [
                    2769,
                    2270
                ],
                "timestep": [
                    2274,
                    2276,
                    2271
                ],
                "counter": [
                    2272,
                    2274,
                    2277
                ],
                "self._looping": [
                    2273,
                    2274,
                    2286
                ],
                "self.flush_events": [
                    2275
                ],
                "time.sleep": [
                    2276
                ],
                "time": [
                    2769,
                    2276
                ],
                "event.key": [
                    2305,
                    2439,
                    2446,
                    2447,
                    2324,
                    2964,
                    2331,
                    2336,
                    2340,
                    2343,
                    2346,
                    2350,
                    2354,
                    2376,
                    2395,
                    2915,
                    2920,
                    2413,
                    2426
                ],
                "fullscreen_keys": [
                    2324,
                    2309
                ],
                "home_keys": [
                    2336,
                    2310
                ],
                "back_keys": [
                    2340,
                    2311
                ],
                "forward_keys": [
                    2312,
                    2343
                ],
                "pan_keys": [
                    2313,
                    2346
                ],
                "zoom_keys": [
                    2314,
                    2350
                ],
                "save_keys": [
                    2354,
                    2315
                ],
                "quit_keys": [
                    2331,
                    2316
                ],
                "grid_keys": [
                    2376,
                    2317
                ],
                "grid_minor_keys": [
                    2395,
                    2318
                ],
                "toggle_yscale_keys": [
                    2413,
                    2319
                ],
                "toggle_xscale_keys": [
                    2320,
                    2426
                ],
                "all_keys": [
                    2321,
                    2439
                ],
                "canvas.manager.full_screen_toggle": [
                    2326
                ],
                "canvas.manager": [
                    2532,
                    2326
                ],
                "Gcf.destroy_fig": [
                    2332
                ],
                "Gcf": [
                    3336,
                    2332,
                    3350
                ],
                "canvas.figure": [
                    2440,
                    2449,
                    2332,
                    2448
                ],
                "toolbar": [
                    2464,
                    2337,
                    2462,
                    2341,
                    2344,
                    2347,
                    2348,
                    2351,
                    2352,
                    2355,
                    2459,
                    2334
                ],
                "toolbar.home": [
                    2337
                ],
                "toolbar.back": [
                    2341,
                    2462
                ],
                "toolbar.forward": [
                    2344,
                    2464
                ],
                "toolbar.pan": [
                    2347
                ],
                "toolbar._update_cursor": [
                    2352,
                    2348
                ],
                "toolbar.zoom": [
                    2351
                ],
                "toolbar.save_figure": [
                    2355
                ],
                "event.inaxes": [
                    2785,
                    2371,
                    2789,
                    2794,
                    2357,
                    2743,
                    2782
                ],
                "tick.gridline.get_visible": [
                    2364,
                    2366
                ],
                "tick.gridline": [
                    2364,
                    2366
                ],
                "tick": [
                    2364,
                    2366
                ],
                "ticks": [
                    2364,
                    2366
                ],
                "_get_uniform_gridstate": [
                    2400,
                    2378,
                    2379,
                    2380,
                    2381,
                    2397,
                    2398,
                    2399
                ],
                "ax.xaxis.minorTicks": [
                    2378,
                    2399
                ],
                "ax.xaxis": [
                    2378,
                    2380,
                    2397,
                    2399
                ],
                "ax.yaxis.minorTicks": [
                    2400,
                    2379
                ],
                "ax.yaxis": [
                    2400,
                    2379,
                    2381,
                    2398
                ],
                "x_state": [
                    2403,
                    2404,
                    2409,
                    2380,
                    2384,
                    2385,
                    2391,
                    2399
                ],
                "ax.xaxis.majorTicks": [
                    2380,
                    2397
                ],
                "y_state": [
                    2400,
                    2403,
                    2404,
                    2410,
                    2381,
                    2384,
                    2385,
                    2392
                ],
                "ax.yaxis.majorTicks": [
                    2381,
                    2398
                ],
                "cycle": [
                    2401,
                    2385,
                    2404,
                    2382
                ],
                "cycle.index": [
                    2385,
                    2404
                ],
                "ax.grid": [
                    2392,
                    2409,
                    2410,
                    2391
                ],
                "canvas.draw_idle": [
                    2393,
                    2411
                ],
                "ax.get_yscale": [
                    2414
                ],
                "ax.set_yscale": [
                    2416,
                    2420,
                    2423
                ],
                "ax.figure.canvas.draw_idle": [
                    2424,
                    2417,
                    2437,
                    2430
                ],
                "ax.figure.canvas": [
                    2424,
                    2417,
                    2437,
                    2430
                ],
                "ax.figure": [
                    2424,
                    2417,
                    2437,
                    2430
                ],
                "_log.warning": [
                    2435,
                    2422
                ],
                "scalex": [
                    2427,
                    2428,
                    2431
                ],
                "ax.get_xscale": [
                    2427
                ],
                "ax.set_xscale": [
                    2433,
                    2436,
                    2429
                ],
                "canvas.figure.get_axes": [
                    2440,
                    2449,
                    2448
                ],
                "event.x": [
                    2441,
                    2862,
                    2450,
                    2994,
                    2964,
                    2901,
                    2970
                ],
                "event.y": [
                    2441,
                    2862,
                    2450,
                    2994,
                    2964,
                    2901,
                    2970
                ],
                "a.in_axes": [
                    2904,
                    2865,
                    2442,
                    2451
                ],
                "a.set_navigate": [
                    2443,
                    2452
                ],
                "event.key.isdigit": [
                    2446
                ],
                "n": [
                    2448,
                    2452,
                    2447
                ],
                "button_name": [
                    2460,
                    2461,
                    2463
                ],
                "event.button": [
                    2850,
                    2852,
                    2889,
                    2891,
                    2867,
                    2460
                ],
                "self.num": [
                    2533
                ],
                "num": [
                    3330,
                    3324,
                    2533
                ],
                "self.key_press_handler_id": [
                    2538,
                    2535
                ],
                "self.button_press_handler_id": [
                    2536,
                    2541
                ],
                "self.canvas.mpl_connect": [
                    3105,
                    2947,
                    3107,
                    2538,
                    2541,
                    2830,
                    2832,
                    2675,
                    2870,
                    2908,
                    2909,
                    2911
                ],
                "self.key_press": [
                    2540
                ],
                "self.button_press": [
                    2543
                ],
                "self.toolmanager": [
                    3172,
                    3141,
                    3142,
                    3206,
                    3270,
                    3271,
                    2545,
                    2551,
                    3166
                ],
                "self.toolbar.update": [
                    2552
                ],
                "self.canvas.figure.add_axobserver": [
                    2548
                ],
                "self.canvas.figure": [
                    3114,
                    2839,
                    2903,
                    2864,
                    2548,
                    2935,
                    3037
                ],
                "NonGuiException": [
                    2561
                ],
                "key_press_handler": [
                    2578
                ],
                "self.canvas.toolbar": [
                    2578,
                    2583
                ],
                "button_press_handler": [
                    2583
                ],
                "cursors": [
                    2753,
                    2754,
                    2755,
                    2601,
                    2673,
                    2772,
                    2744,
                    2745,
                    2746,
                    2749,
                    2750,
                    2751
                ],
                "tools.cursors": [
                    2601
                ],
                "tools": [
                    2601
                ],
                "toolitems": [
                    2652
                ],
                "canvas.toolbar": [
                    2666
                ],
                "self._nav_stack": [
                    2691,
                    2858,
                    2667,
                    3086,
                    2897,
                    2929,
                    2707,
                    3057,
                    2713
                ],
                "cbook.Stack": [
                    2667
                ],
                "self._xypress": [
                    2884,
                    2949,
                    2951,
                    2953,
                    3001,
                    2668,
                    2988,
                    2863,
                    2961,
                    2993,
                    3027,
                    2868,
                    2902,
                    2969,
                    2906,
                    2971
                ],
                "self._idPress": [
                    3105,
                    2821,
                    2822,
                    2669,
                    2830,
                    3096,
                    3097
                ],
                "self._idRelease": [
                    3107,
                    2825,
                    2826,
                    2670,
                    2832,
                    3100,
                    3101
                ],
                "self._active": [
                    2752,
                    2817,
                    2818,
                    3104,
                    2820,
                    3115,
                    2829,
                    2671,
                    3091,
                    3092,
                    3094,
                    2743,
                    2840,
                    2748
                ],
                "self._lastCursor": [
                    2753,
                    2755,
                    2673,
                    2775,
                    2744,
                    2746,
                    2749,
                    2751
                ],
                "cursors.POINTER": [
                    2744,
                    2673,
                    2746,
                    2745
                ],
                "self._init_toolbar": [
                    2674
                ],
                "self._idDrag": [
                    2946,
                    2947,
                    2675,
                    2869,
                    2870
                ],
                "self.mouse_move": [
                    2948,
                    2921,
                    2676,
                    2925
                ],
                "self._ids_zoom": [
                    2880,
                    2914,
                    2886,
                    2982,
                    2984,
                    2678,
                    2879
                ],
                "self._zoom_mode": [
                    2976,
                    2915,
                    2920,
                    2924,
                    3024,
                    2999,
                    3030,
                    2679,
                    3000,
                    2974
                ],
                "self._button_pressed": [
                    2944,
                    2851,
                    2885,
                    2853,
                    2855,
                    3016,
                    2890,
                    2954,
                    2892,
                    3018,
                    2894,
                    2964,
                    3028,
                    2681
                ],
                "self.mode": [
                    3098,
                    3109,
                    2823,
                    2827,
                    3117,
                    2801,
                    2802,
                    2834,
                    2806,
                    2842,
                    2683,
                    3102
                ],
                "self.set_history_buttons": [
                    2692,
                    3087,
                    2708,
                    2936,
                    2714,
                    2684
                ],
                "self._nav_stack.back": [
                    2691
                ],
                "self._update_view": [
                    2715,
                    2693,
                    2709
                ],
                "self._nav_stack.forward": [
                    2707
                ],
                "self._nav_stack.home": [
                    2713
                ],
                "self.set_cursor": [
                    2754,
                    2772,
                    2775,
                    2745,
                    2750
                ],
                "cursors.SELECT_REGION": [
                    2749,
                    2750,
                    2751
                ],
                "cursors.MOVE": [
                    2753,
                    2754,
                    2755
                ],
                "self._draw_time": [
                    2768,
                    2770
                ],
                "last_draw_time": [
                    2768,
                    2770
                ],
                "time.time": [
                    2769
                ],
                "cursors.WAIT": [
                    2772
                ],
                "self._update_cursor": [
                    2780
                ],
                "event.inaxes.get_navigate": [
                    2782
                ],
                "event.inaxes.format_coord": [
                    2785
                ],
                "event.xdata": [
                    2785
                ],
                "event.ydata": [
                    2785
                ],
                "artists": [
                    2792,
                    2793,
                    2789
                ],
                "event.inaxes._mouseover_set": [
                    2789
                ],
                "a.contains": [
                    2790
                ],
                "a.get_visible": [
                    2790
                ],
                "event.inaxes.patch": [
                    2794
                ],
                "data": [
                    2795,
                    2796,
                    2797
                ],
                "a.get_cursor_data": [
                    2795
                ],
                "data_str": [
                    2797,
                    2798,
                    2799
                ],
                "a.format_cursor_data": [
                    2797
                ],
                "self.set_message": [
                    3276,
                    3117,
                    2802,
                    2804,
                    2806,
                    2842
                ],
                "self.canvas.mpl_disconnect": [
                    2881,
                    2946,
                    2822,
                    2983,
                    2826,
                    2869,
                    3097,
                    3101
                ],
                "self.press_pan": [
                    2831
                ],
                "self.release_pan": [
                    2833
                ],
                "self.canvas.widgetlock": [
                    3112,
                    2835,
                    2837,
                    3110
                ],
                "self.canvas.widgetlock.release": [
                    3112,
                    2837
                ],
                "self.canvas.figure.get_axes": [
                    3114,
                    2839,
                    2864,
                    2903,
                    3037
                ],
                "a.set_navigate_mode": [
                    2840,
                    3115
                ],
                "self.push_current": [
                    3032,
                    2899,
                    2860,
                    2955
                ],
                "a.get_navigate": [
                    2905,
                    2866
                ],
                "a.can_pan": [
                    2866
                ],
                "a.start_pan": [
                    2867
                ],
                "self._xypress.append": [
                    2906,
                    2868
                ],
                "self.drag_pan": [
                    2871
                ],
                "self.press": [
                    2873,
                    2917
                ],
                "zoom_id": [
                    2880,
                    2881,
                    2982,
                    2983
                ],
                "self.release": [
                    3002,
                    3033,
                    2882,
                    2956
                ],
                "a.can_zoom": [
                    2905
                ],
                "a._get_view": [
                    2906
                ],
                "id1": [
                    2914,
                    2908
                ],
                "self.drag_zoom": [
                    2908
                ],
                "id2": [
                    2914,
                    2909
                ],
                "self._switch_on_zoom_mode": [
                    2910
                ],
                "id3": [
                    2914,
                    2911
                ],
                "self._switch_off_zoom_mode": [
                    2912
                ],
                "self._nav_stack.push": [
                    2929
                ],
                "WeakKeyDictionary": [
                    2930
                ],
                "ax._get_view": [
                    2931
                ],
                "frozen": [
                    2933,
                    2934
                ],
                "ax.get_position": [
                    2933,
                    2934
                ],
                "self.canvas.figure.axes": [
                    2935
                ],
                "ind": [
                    2961,
                    2971,
                    2995,
                    2949
                ],
                "a.end_pan": [
                    2950
                ],
                "a.drag_pan": [
                    2964
                ],
                "self.canvas.draw_idle": [
                    3050,
                    3068,
                    2965
                ],
                "lastx": [
                    3023,
                    2995,
                    2999,
                    2971,
                    2973
                ],
                "lasty": [
                    3023,
                    2995,
                    3000,
                    2971,
                    2973
                ],
                "view": [
                    3064,
                    2971,
                    2995,
                    3063
                ],
                "x1": [
                    2977,
                    2978,
                    2972
                ],
                "y1": [
                    2978,
                    2972,
                    2975
                ],
                "x2": [
                    2977,
                    2978,
                    2972
                ],
                "y2": [
                    2978,
                    2972,
                    2975
                ],
                "np.clip": [
                    2972
                ],
                "a.bbox.min": [
                    2973
                ],
                "a.bbox": [
                    2977,
                    2973,
                    2975
                ],
                "a.bbox.max": [
                    2973
                ],
                "a.bbox.intervaly": [
                    2975
                ],
                "a.bbox.intervalx": [
                    2977
                ],
                "self.draw_rubberband": [
                    2978
                ],
                "self.remove_rubberband": [
                    2986
                ],
                "last_a": [
                    3008,
                    3009,
                    3014,
                    2991
                ],
                "cur_xypress": [
                    2993,
                    2995
                ],
                "twinx": [
                    3024,
                    3011,
                    3007
                ],
                "twiny": [
                    3024,
                    3013,
                    3007
                ],
                "la": [
                    3009,
                    3010,
                    3012
                ],
                "joined": [
                    3010,
                    3012
                ],
                "a.get_shared_x_axes": [
                    3010
                ],
                "a.get_shared_y_axes": [
                    3012
                ],
                "last_a.append": [
                    3014
                ],
                "direction": [
                    3017,
                    3019,
                    3023
                ],
                "a._set_view_from_bbox": [
                    3023
                ],
                "xaxis": [
                    3041,
                    3042,
                    3043,
                    3038
                ],
                "yaxis": [
                    3044,
                    3045,
                    3046,
                    3039
                ],
                "locators": [
                    3040,
                    3042,
                    3043,
                    3045,
                    3046,
                    3048
                ],
                "locators.append": [
                    3042,
                    3043,
                    3045,
                    3046
                ],
                "xaxis.get_major_locator": [
                    3042
                ],
                "xaxis.get_minor_locator": [
                    3043
                ],
                "yaxis.get_major_locator": [
                    3045
                ],
                "yaxis.get_minor_locator": [
                    3046
                ],
                "loc": [
                    3048,
                    3049
                ],
                "loc.refresh": [
                    3049
                ],
                "nav_info": [
                    3057,
                    3058,
                    3062
                ],
                "items": [
                    3062,
                    3063
                ],
                "nav_info.items": [
                    3062
                ],
                "pos_orig": [
                    3066,
                    3063
                ],
                "pos_active": [
                    3067,
                    3063
                ],
                "ax._set_view": [
                    3064
                ],
                "ax._set_position": [
                    3066,
                    3067
                ],
                "self._nav_stack.clear": [
                    3086
                ],
                "self.press_zoom": [
                    3106
                ],
                "self.release_zoom": [
                    3108
                ],
                "_icon_extension": [
                    3133
                ],
                "toolmanager": [
                    3141,
                    3270
                ],
                "self.toolmanager.toolmanager_connect": [
                    3172,
                    3142,
                    3271
                ],
                "self._remove_tool_cbk": [
                    3143
                ],
                "self.toggle_toolitem": [
                    3176,
                    3151
                ],
                "event.tool.name": [
                    3180,
                    3151
                ],
                "event.tool": [
                    3180,
                    3151
                ],
                "event.tool.toggled": [
                    3151
                ],
                "tool": [
                    3168,
                    3169,
                    3170,
                    3172,
                    3175,
                    3176,
                    3166,
                    3167
                ],
                "self.toolmanager.get_tool": [
                    3166
                ],
                "image": [
                    3170,
                    3184,
                    3189,
                    3190,
                    3191,
                    3192,
                    3167
                ],
                "self._get_image_filename": [
                    3167
                ],
                "tool.image": [
                    3167
                ],
                "toggle": [
                    3168,
                    3170,
                    3171
                ],
                "self.add_toolitem": [
                    3169
                ],
                "tool.name": [
                    3176,
                    3169,
                    3172
                ],
                "group": [
                    3169
                ],
                "position": [
                    3169
                ],
                "tool.description": [
                    3170
                ],
                "self._tool_toggled_cbk": [
                    3173
                ],
                "tool.toggled": [
                    3175
                ],
                "self.remove_toolitem": [
                    3180
                ],
                "basedir": [
                    3192,
                    3187,
                    3191
                ],
                "cbook._get_data_path": [
                    3187
                ],
                "fname": [
                    3194,
                    3195,
                    3188
                ],
                "self._icon_extension": [
                    3192,
                    3190
                ],
                "os.path.isfile": [
                    3194
                ],
                "self.toolmanager.trigger_tool": [
                    3206
                ],
                "self._message_cbk": [
                    3272
                ],
                "event.message": [
                    3276
                ],
                "backend_version": [
                    3298
                ],
                "FigureManager": [
                    3304
                ],
                "FigureManagerBase": [
                    3304
                ],
                "trigger_manager_draw": [
                    3311
                ],
                "mainloop": [
                    3312
                ],
                "fig_cls": [
                    3322,
                    3323
                ],
                "Figure": [
                    3322
                ],
                "fig": [
                    3323,
                    3324
                ],
                "cls.new_figure_manager_given_figure": [
                    3324
                ],
                "cls.FigureCanvas": [
                    3329
                ],
                "manager": [
                    3330,
                    3331,
                    3336,
                    3337,
                    3338,
                    3353,
                    3355
                ],
                "cls.FigureManager": [
                    3330
                ],
                "cls.trigger_manager_draw": [
                    3338,
                    3335
                ],
                "is_interactive": [
                    3367,
                    3335
                ],
                "Gcf.get_active": [
                    3336
                ],
                "managers": [
                    3353,
                    3350,
                    3351
                ],
                "Gcf.get_all_fig_managers": [
                    3350
                ],
                "manager.canvas.figure.show": [
                    3355
                ],
                "manager.canvas.figure": [
                    3355
                ],
                "manager.canvas": [
                    3355
                ],
                "cls.mainloop": [
                    3394,
                    3356,
                    3373
                ],
                "block": [
                    3367,
                    3371,
                    3372,
                    3408,
                    3358
                ],
                "ipython_pylab": [
                    3364,
                    3366,
                    3367
                ],
                "pyplot.show._needmain": [
                    3364
                ],
                "pyplot.show": [
                    3364
                ],
                "pyplot": [
                    3364
                ],
                "get_backend": [
                    3370
                ],
                "cbook._make_keyword_only": [
                    3341
                ],
                "cls.__module__": [
                    3388,
                    3396
                ],
                "ShowBase": [
                    3392
                ],
                "Show": [
                    3396
                ],
                "_Backend": [
                    3400
                ],
                "self.show": [
                    3408
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_20/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_invisible_axes",
                "test_function_code": "def test_invisible_axes():\n    # invisible axes should not respond to events...\n    fig, ax = plt.subplots()\n    assert fig.canvas.inaxes((200, 200)) is not None\n    ax.set_visible(False)\n    assert fig.canvas.inaxes((200, 200)) is None",
                "test_error": "assert <matplotlib.axes._subplots.AxesSubplot object at 0x11ae0a8b0> is None\n +  where <matplotlib.axes._subplots.AxesSubplot object at 0x11ae0a8b0> = <bound method FigureCanvasBase.inaxes of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70>>((200, 200))\n +    where <bound method FigureCanvasBase.inaxes of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70>> = <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70>.inaxes\n +      where <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70> = <Figure size 640x480 with 1 Axes>.canvas",
                "full_test_error": "def test_invisible_axes():\n        # invisible axes should not respond to events...\n        fig, ax = plt.subplots()\n        assert fig.canvas.inaxes((200, 200)) is not None\n        ax.set_visible(False)\n>       assert fig.canvas.inaxes((200, 200)) is None\nE       assert <matplotlib.axes._subplots.AxesSubplot object at 0x11ae0a8b0> is None\nE        +  where <matplotlib.axes._subplots.AxesSubplot object at 0x11ae0a8b0> = <bound method FigureCanvasBase.inaxes of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70>>((200, 200))\nE        +    where <bound method FigureCanvasBase.inaxes of <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70>> = <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70>.inaxes\nE        +      where <matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x11ae3bf70> = <Figure size 640x480 with 1 Axes>.canvas\n\nlib/matplotlib/tests/test_axes.py:6636: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}