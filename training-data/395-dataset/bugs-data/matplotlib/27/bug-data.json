{
    "matplotlib:27": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_27/lib/matplotlib/colorbar.py": {
            "buggy_functions": [
                {
                    "function_name": "set_label",
                    "function_code": "def set_label(self, label, **kw):\n    \"\"\"Label the long axis of the colorbar.\"\"\"\n    self._label = str(label)\n    self._labelkw = kw\n    self._set_label()\n",
                    "decorators": [],
                    "docstring": "Label the long axis of the colorbar.",
                    "start_line": 725,
                    "end_line": 729,
                    "variables": {
                        "self._label": [
                            727
                        ],
                        "self": [
                            728,
                            729,
                            727
                        ],
                        "str": [
                            727
                        ],
                        "label": [
                            727
                        ],
                        "self._labelkw": [
                            728
                        ],
                        "kw": [
                            728
                        ],
                        "self._set_label": [
                            729
                        ]
                    },
                    "filtered_variables": {
                        "self._label": [
                            727
                        ],
                        "self": [
                            728,
                            729,
                            727
                        ],
                        "label": [
                            727
                        ],
                        "self._labelkw": [
                            728
                        ],
                        "kw": [
                            728
                        ],
                        "self._set_label": [
                            729
                        ]
                    },
                    "diff_line_number": 727,
                    "class_data": {
                        "signature": "class ColorbarBase(_ColorbarMappableDummy)",
                        "docstring": "Draw a colorbar in an existing axes.\n\nThis is a base class for the :class:`Colorbar` class, which is the\nbasis for the :func:`~matplotlib.pyplot.colorbar` function and the\n:meth:`~matplotlib.figure.Figure.colorbar` method, which are the\nusual ways of creating a colorbar.\n\nIt is also useful by itself for showing a colormap.  If the *cmap*\nkwarg is given but *boundaries* and *values* are left as None,\nthen the colormap will be displayed on a 0-1 scale. To show the\nunder- and over-value colors, specify the *norm* as::\n\n    colors.Normalize(clip=False)\n\nTo show the colors versus index instead of on the 0-1 scale,\nuse::\n\n    norm=colors.NoNorm.\n\nUseful public methods are :meth:`set_label` and :meth:`add_lines`.\n\nAttributes\n----------\nax : Axes\n    The `Axes` instance in which the colorbar is drawn.\n\nlines : list\n    A list of `LineCollection` if lines were drawn, otherwise\n    an empty list.\n\ndividers : LineCollection\n    A LineCollection if *drawedges* is ``True``, otherwise ``None``.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, ax, cmap=None, norm=None, alpha=None, values=None, boundaries=None, orientation='vertical', ticklocation='auto', extend='neither', spacing='uniform', ticks=None, format=None, drawedges=False, filled=True, extendfrac=None, extendrect=False, label=''):\n    self.ax = ax\n    self._patch_ax()\n    if cmap is None:\n        cmap = cm.get_cmap()\n    if norm is None:\n        norm = colors.Normalize()\n    self.alpha = alpha\n    self.cmap = cmap\n    self.norm = norm\n    self.values = values\n    self.boundaries = boundaries\n    self.extend = extend\n    self._inside = self._slice_dict[extend]\n    self.spacing = spacing\n    self.orientation = orientation\n    self.drawedges = drawedges\n    self.filled = filled\n    self.extendfrac = extendfrac\n    self.extendrect = extendrect\n    self.solids = None\n    self.lines = list()\n    self.outline = None\n    self.patch = None\n    self.dividers = None\n    self.locator = None\n    self.formatter = None\n    self._manual_tick_data_values = None\n    if ticklocation == 'auto':\n        ticklocation = 'bottom' if orientation == 'horizontal' else 'right'\n    self.ticklocation = ticklocation\n    self.set_label(label)\n    self._reset_locator_formatter_scale()\n    if np.iterable(ticks):\n        self.locator = ticker.FixedLocator(ticks, nbins=len(ticks))\n    else:\n        self.locator = ticks\n    if isinstance(format, str):\n        self.formatter = ticker.FormatStrFormatter(format)\n    else:\n        self.formatter = format\n    self.draw_all()",
                            "def _extend_lower(self):\n    \"\"\"Return whether the lower limit is open ended.\"\"\"\n    return self.extend in ('both', 'min')",
                            "def _extend_upper(self):\n    \"\"\"Return whether the uper limit is open ended.\"\"\"\n    return self.extend in ('both', 'max')",
                            "def _patch_ax(self):\n    self.ax.set_xticks = _set_ticks_on_axis_warn\n    self.ax.set_yticks = _set_ticks_on_axis_warn",
                            "def draw_all(self):\n    \"\"\"\n    Calculate any free parameters based on the current cmap and norm,\n    and do all the drawing.\n    \"\"\"\n    self._process_values()\n    self._find_range()\n    X, Y = self._mesh()\n    C = self._values[:, np.newaxis]\n    self.config_axis()\n    self._config_axes(X, Y)\n    if self.filled:\n        self._add_solids(X, Y, C)",
                            "def config_axis(self):\n    ax = self.ax\n    if self.orientation == 'vertical':\n        long_axis, short_axis = (ax.yaxis, ax.xaxis)\n    else:\n        long_axis, short_axis = (ax.xaxis, ax.yaxis)\n    long_axis.set_label_position(self.ticklocation)\n    long_axis.set_ticks_position(self.ticklocation)\n    short_axis.set_ticks([])\n    short_axis.set_ticks([], minor=True)\n    self._set_label()",
                            "def _get_ticker_locator_formatter(self):\n    \"\"\"\n    This code looks at the norm being used by the colorbar\n    and decides what locator and formatter to use.  If ``locator`` has\n    already been set by hand, it just returns\n    ``self.locator, self.formatter``.\n    \"\"\"\n    locator = self.locator\n    formatter = self.formatter\n    if locator is None:\n        if self.boundaries is None:\n            if isinstance(self.norm, colors.NoNorm):\n                nv = len(self._values)\n                base = 1 + int(nv / 10)\n                locator = ticker.IndexLocator(base=base, offset=0)\n            elif isinstance(self.norm, colors.BoundaryNorm):\n                b = self.norm.boundaries\n                locator = ticker.FixedLocator(b, nbins=10)\n            elif isinstance(self.norm, colors.LogNorm):\n                locator = _ColorbarLogLocator(self)\n            elif isinstance(self.norm, colors.SymLogNorm):\n                locator = ticker.SymmetricalLogLocator(subs=np.arange(1, 10), linthresh=self.norm.linthresh, base=10)\n            elif mpl.rcParams['_internal.classic_mode']:\n                locator = ticker.MaxNLocator()\n            else:\n                locator = _ColorbarAutoLocator(self)\n        else:\n            b = self._boundaries[self._inside]\n            locator = ticker.FixedLocator(b, nbins=10)\n    if formatter is None:\n        if isinstance(self.norm, colors.LogNorm):\n            formatter = ticker.LogFormatterSciNotation()\n        elif isinstance(self.norm, colors.SymLogNorm):\n            formatter = ticker.LogFormatterSciNotation(linthresh=self.norm.linthresh)\n        else:\n            formatter = ticker.ScalarFormatter()\n    else:\n        formatter = self.formatter\n    self.locator = locator\n    self.formatter = formatter\n    _log.debug('locator: %r', locator)\n    return (locator, formatter)",
                            "def _use_auto_colorbar_locator(self):\n    \"\"\"\n    Return if we should use an adjustable tick locator or a fixed\n    one.  (check is used twice so factored out here...)\n    \"\"\"\n    contouring = self.boundaries is not None and self.spacing == 'uniform'\n    return (type(self.norm) == colors.Normalize or type(self.norm) == colors.LogNorm) and (not contouring)",
                            "def _reset_locator_formatter_scale(self):\n    \"\"\"\n    Reset the locator et al to defaults.  Any user-hardcoded changes\n    need to be re-entered if this gets called (either at init, or when\n    the mappable normal gets changed: Colorbar.update_normal)\n    \"\"\"\n    self.locator = None\n    self.formatter = None\n    if isinstance(self.norm, colors.LogNorm):\n        self.ax.set_xscale('log')\n        self.ax.set_yscale('log')\n        self.minorticks_on()\n    else:\n        self.ax.set_xscale('linear')\n        self.ax.set_yscale('linear')",
                            "def update_ticks(self):\n    \"\"\"\n    Force the update of the ticks and ticklabels. This must be\n    called whenever the tick locator and/or tick formatter changes.\n    \"\"\"\n    ax = self.ax\n    locator, formatter = self._get_ticker_locator_formatter()\n    long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n    if self._use_auto_colorbar_locator():\n        _log.debug('Using auto colorbar locator on colorbar')\n        _log.debug('locator: %r', locator)\n        long_axis.set_major_locator(locator)\n        long_axis.set_major_formatter(formatter)\n    else:\n        _log.debug('Using fixed locator on colorbar')\n        ticks, ticklabels, offset_string = self._ticker(locator, formatter)\n        long_axis.set_ticks(ticks)\n        long_axis.set_ticklabels(ticklabels)\n        long_axis.get_major_formatter().set_offset_string(offset_string)",
                            "def set_ticks(self, ticks, update_ticks=True):\n    \"\"\"\n    Set tick locations.\n\n    Parameters\n    ----------\n    ticks : {None, sequence, :class:`~matplotlib.ticker.Locator` instance}\n        If None, a default Locator will be used.\n\n    update_ticks : {True, False}, optional\n        If True, tick locations are updated immediately.  If False,\n        use :meth:`update_ticks` to manually update the ticks.\n\n    \"\"\"\n    if np.iterable(ticks):\n        self.locator = ticker.FixedLocator(ticks, nbins=len(ticks))\n    else:\n        self.locator = ticks\n    if update_ticks:\n        self.update_ticks()\n    self.stale = True",
                            "def get_ticks(self, minor=False):\n    \"\"\"Return the x ticks as a list of locations.\"\"\"\n    if self._manual_tick_data_values is None:\n        ax = self.ax\n        long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n        return long_axis.get_majorticklocs()\n    else:\n        return self._manual_tick_data_values",
                            "def set_ticklabels(self, ticklabels, update_ticks=True):\n    \"\"\"\n    Set tick labels.\n\n    Tick labels are updated immediately unless *update_ticks* is *False*,\n    in which case one should call `.update_ticks` explicitly.\n    \"\"\"\n    if isinstance(self.locator, ticker.FixedLocator):\n        self.formatter = ticker.FixedFormatter(ticklabels)\n        if update_ticks:\n            self.update_ticks()\n    else:\n        cbook._warn_external('set_ticks() must have been called.')\n    self.stale = True",
                            "def minorticks_on(self):\n    \"\"\"\n    Turns on the minor ticks on the colorbar without extruding\n    into the \"extend regions\".\n    \"\"\"\n    ax = self.ax\n    long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n    if long_axis.get_scale() == 'log':\n        long_axis.set_minor_locator(_ColorbarLogLocator(self, base=10.0, subs='auto'))\n        long_axis.set_minor_formatter(ticker.LogFormatterSciNotation())\n    else:\n        long_axis.set_minor_locator(_ColorbarAutoMinorLocator(self))",
                            "def minorticks_off(self):\n    \"\"\"\n    Turns off the minor ticks on the colorbar.\n    \"\"\"\n    ax = self.ax\n    long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n    long_axis.set_minor_locator(ticker.NullLocator())",
                            "def _config_axes(self, X, Y):\n    \"\"\"\n    Make an axes patch and outline.\n    \"\"\"\n    ax = self.ax\n    ax.set_frame_on(False)\n    ax.set_navigate(False)\n    xy = self._outline(X, Y)\n    ax.ignore_existing_data_limits = True\n    ax.update_datalim(xy)\n    ax.set_xlim(*ax.dataLim.intervalx)\n    ax.set_ylim(*ax.dataLim.intervaly)\n    if self.outline is not None:\n        self.outline.remove()\n    self.outline = mpatches.Polygon(xy, edgecolor=mpl.rcParams['axes.edgecolor'], facecolor='none', linewidth=mpl.rcParams['axes.linewidth'], closed=True, zorder=2)\n    ax.add_artist(self.outline)\n    self.outline.set_clip_box(None)\n    self.outline.set_clip_path(None)\n    c = mpl.rcParams['axes.facecolor']\n    if self.patch is not None:\n        self.patch.remove()\n    self.patch = mpatches.Polygon(xy, edgecolor=c, facecolor=c, linewidth=0.01, zorder=-1)\n    ax.add_artist(self.patch)\n    self.update_ticks()",
                            "def _set_label(self):\n    if self.orientation == 'vertical':\n        self.ax.set_ylabel(self._label, **self._labelkw)\n    else:\n        self.ax.set_xlabel(self._label, **self._labelkw)\n    self.stale = True",
                            "def set_label(self, label, **kw):\n    \"\"\"Label the long axis of the colorbar.\"\"\"\n    self._label = str(label)\n    self._labelkw = kw\n    self._set_label()",
                            "def _outline(self, X, Y):\n    \"\"\"\n    Return *x*, *y* arrays of colorbar bounding polygon,\n    taking orientation into account.\n    \"\"\"\n    N = X.shape[0]\n    ii = [0, 1, N - 2, N - 1, 2 * N - 1, 2 * N - 2, N + 1, N, 0]\n    x = X.T.reshape(-1)[ii]\n    y = Y.T.reshape(-1)[ii]\n    return np.column_stack([y, x]) if self.orientation == 'horizontal' else np.column_stack([x, y])",
                            "def _edges(self, X, Y):\n    \"\"\"\n    Return the separator line segments; helper for _add_solids.\n    \"\"\"\n    N = X.shape[0]\n    if self.orientation == 'vertical':\n        return [list(zip(X[i], Y[i])) for i in range(1, N - 1)]\n    else:\n        return [list(zip(Y[i], X[i])) for i in range(1, N - 1)]",
                            "def _add_solids(self, X, Y, C):\n    \"\"\"\n    Draw the colors using :meth:`~matplotlib.axes.Axes.pcolormesh`;\n    optionally add separators.\n    \"\"\"\n    if self.orientation == 'vertical':\n        args = (X, Y, C)\n    else:\n        args = (np.transpose(Y), np.transpose(X), np.transpose(C))\n    kw = dict(cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='None')\n    _log.debug('Setting pcolormesh')\n    col = self.ax.pcolormesh(*args, **kw)\n    if self.solids is not None:\n        self.solids.remove()\n    self.solids = col\n    if self.dividers is not None:\n        self.dividers.remove()\n        self.dividers = None\n    if self.drawedges:\n        linewidths = (0.5 * mpl.rcParams['axes.linewidth'],)\n        self.dividers = collections.LineCollection(self._edges(X, Y), colors=(mpl.rcParams['axes.edgecolor'],), linewidths=linewidths)\n        self.ax.add_collection(self.dividers)\n    elif len(self._y) >= self.n_rasterize:\n        self.solids.set_rasterized(True)",
                            "def add_lines(self, levels, colors, linewidths, erase=True):\n    \"\"\"\n    Draw lines on the colorbar.\n\n    *colors* and *linewidths* must be scalars or\n    sequences the same length as *levels*.\n\n    Set *erase* to False to add lines without first\n    removing any previously added lines.\n    \"\"\"\n    y = self._locate(levels)\n    rtol = (self._y[-1] - self._y[0]) * 1e-10\n    igood = (y < self._y[-1] + rtol) & (y > self._y[0] - rtol)\n    y = y[igood]\n    if np.iterable(colors):\n        colors = np.asarray(colors)[igood]\n    if np.iterable(linewidths):\n        linewidths = np.asarray(linewidths)[igood]\n    X, Y = np.meshgrid([self._y[0], self._y[-1]], y)\n    if self.orientation == 'vertical':\n        xy = np.stack([X, Y], axis=-1)\n    else:\n        xy = np.stack([Y, X], axis=-1)\n    col = collections.LineCollection(xy, linewidths=linewidths)\n    if erase and self.lines:\n        for lc in self.lines:\n            lc.remove()\n        self.lines = []\n    self.lines.append(col)\n    col.set_color(colors)\n    self.ax.add_collection(col)\n    self.stale = True",
                            "def _ticker(self, locator, formatter):\n    \"\"\"\n    Return the sequence of ticks (colorbar data locations),\n    ticklabels (strings), and the corresponding offset string.\n    \"\"\"\n    if isinstance(self.norm, colors.NoNorm) and self.boundaries is None:\n        intv = (self._values[0], self._values[-1])\n    else:\n        intv = (self.vmin, self.vmax)\n    locator.create_dummy_axis(minpos=intv[0])\n    formatter.create_dummy_axis(minpos=intv[0])\n    locator.set_view_interval(*intv)\n    locator.set_data_interval(*intv)\n    formatter.set_view_interval(*intv)\n    formatter.set_data_interval(*intv)\n    b = np.array(locator())\n    if isinstance(locator, ticker.LogLocator):\n        eps = 1e-10\n        b = b[(b <= intv[1] * (1 + eps)) & (b >= intv[0] * (1 - eps))]\n    else:\n        eps = (intv[1] - intv[0]) * 1e-10\n        b = b[(b <= intv[1] + eps) & (b >= intv[0] - eps)]\n    self._manual_tick_data_values = b\n    ticks = self._locate(b)\n    ticklabels = formatter.format_ticks(b)\n    offset_string = formatter.get_offset()\n    return (ticks, ticklabels, offset_string)",
                            "def _process_values(self, b=None):\n    \"\"\"\n    Set the :attr:`_boundaries` and :attr:`_values` attributes\n    based on the input boundaries and values.  Input boundaries\n    can be *self.boundaries* or the argument *b*.\n    \"\"\"\n    if b is None:\n        b = self.boundaries\n    if b is not None:\n        self._boundaries = np.asarray(b, dtype=float)\n        if self.values is None:\n            self._values = 0.5 * (self._boundaries[:-1] + self._boundaries[1:])\n            if isinstance(self.norm, colors.NoNorm):\n                self._values = (self._values + 1e-05).astype(np.int16)\n        else:\n            self._values = np.array(self.values)\n        return\n    if self.values is not None:\n        self._values = np.array(self.values)\n        if self.boundaries is None:\n            b = np.zeros(len(self.values) + 1)\n            b[1:-1] = 0.5 * (self._values[:-1] + self._values[1:])\n            b[0] = 2.0 * b[1] - b[2]\n            b[-1] = 2.0 * b[-2] - b[-3]\n            self._boundaries = b\n            return\n        self._boundaries = np.array(self.boundaries)\n        return\n    if isinstance(self.norm, colors.NoNorm):\n        b = self._uniform_y(self.cmap.N + 1) * self.cmap.N - 0.5\n        v = np.zeros(len(b) - 1, dtype=np.int16)\n        v[self._inside] = np.arange(self.cmap.N, dtype=np.int16)\n        if self._extend_lower():\n            v[0] = -1\n        if self._extend_upper():\n            v[-1] = self.cmap.N\n        self._boundaries = b\n        self._values = v\n        return\n    elif isinstance(self.norm, colors.BoundaryNorm):\n        b = list(self.norm.boundaries)\n        if self._extend_lower():\n            b = [b[0] - 1] + b\n        if self._extend_upper():\n            b = b + [b[-1] + 1]\n        b = np.array(b)\n        v = np.zeros(len(b) - 1)\n        bi = self.norm.boundaries\n        v[self._inside] = 0.5 * (bi[:-1] + bi[1:])\n        if self._extend_lower():\n            v[0] = b[0] - 1\n        if self._extend_upper():\n            v[-1] = b[-1] + 1\n        self._boundaries = b\n        self._values = v\n        return\n    else:\n        if not self.norm.scaled():\n            self.norm.vmin = 0\n            self.norm.vmax = 1\n        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)\n        b = self.norm.inverse(self._uniform_y(self.cmap.N + 1))\n        if isinstance(self.norm, (colors.PowerNorm, colors.LogNorm)):\n            if self._extend_lower():\n                b[0] = 0.9 * b[0]\n            if self._extend_upper():\n                b[-1] = 1.1 * b[-1]\n        else:\n            if self._extend_lower():\n                b[0] = b[0] - 1\n            if self._extend_upper():\n                b[-1] = b[-1] + 1\n    self._process_values(b)",
                            "def _find_range(self):\n    \"\"\"\n    Set :attr:`vmin` and :attr:`vmax` attributes to the first and\n    last boundary excluding extended end boundaries.\n    \"\"\"\n    b = self._boundaries[self._inside]\n    self.vmin = b[0]\n    self.vmax = b[-1]",
                            "def _central_N(self):\n    \"\"\"Return the number of boundaries excluding end extensions.\"\"\"\n    nb = len(self._boundaries)\n    if self.extend == 'both':\n        nb -= 2\n    elif self.extend in ('min', 'max'):\n        nb -= 1\n    return nb",
                            "def _extended_N(self):\n    \"\"\"\n    Based on the colormap and extend variable, return the\n    number of boundaries.\n    \"\"\"\n    N = self.cmap.N + 1\n    if self.extend == 'both':\n        N += 2\n    elif self.extend in ('min', 'max'):\n        N += 1\n    return N",
                            "def _get_extension_lengths(self, frac, automin, automax, default=0.05):\n    \"\"\"\n    Get the lengths of colorbar extensions.\n\n    A helper method for _uniform_y and _proportional_y.\n    \"\"\"\n    extendlength = np.array([default, default])\n    if isinstance(frac, str):\n        cbook._check_in_list(['auto'], extendfrac=frac.lower())\n        extendlength[:] = [automin, automax]\n    elif frac is not None:\n        try:\n            extendlength[:] = frac\n            if np.isnan(extendlength).any():\n                raise ValueError()\n        except (TypeError, ValueError):\n            raise ValueError('invalid value for extendfrac')\n    return extendlength",
                            "def _uniform_y(self, N):\n    \"\"\"\n    Return colorbar data coordinates for *N* uniformly\n    spaced boundaries, plus ends if required.\n    \"\"\"\n    if self.extend == 'neither':\n        y = np.linspace(0, 1, N)\n    else:\n        automin = automax = 1.0 / (N - 1.0)\n        extendlength = self._get_extension_lengths(self.extendfrac, automin, automax, default=0.05)\n        if self.extend == 'both':\n            y = np.zeros(N + 2, 'd')\n            y[0] = 0.0 - extendlength[0]\n            y[-1] = 1.0 + extendlength[1]\n        elif self.extend == 'min':\n            y = np.zeros(N + 1, 'd')\n            y[0] = 0.0 - extendlength[0]\n        else:\n            y = np.zeros(N + 1, 'd')\n            y[-1] = 1.0 + extendlength[1]\n        y[self._inside] = np.linspace(0, 1, N)\n    return y",
                            "def _proportional_y(self):\n    \"\"\"\n    Return colorbar data coordinates for the boundaries of\n    a proportional colorbar.\n    \"\"\"\n    if isinstance(self.norm, colors.BoundaryNorm):\n        y = self._boundaries - self._boundaries[0]\n        y = y / (self._boundaries[-1] - self._boundaries[0])\n    else:\n        y = self.norm(self._boundaries.copy())\n        y = np.ma.filled(y, np.nan)\n    if self.extend == 'min':\n        clen = y[-1] - y[1]\n        automin = (y[2] - y[1]) / clen\n        automax = (y[-1] - y[-2]) / clen\n    elif self.extend == 'max':\n        clen = y[-2] - y[0]\n        automin = (y[1] - y[0]) / clen\n        automax = (y[-2] - y[-3]) / clen\n    elif self.extend == 'both':\n        clen = y[-2] - y[1]\n        automin = (y[2] - y[1]) / clen\n        automax = (y[-2] - y[-3]) / clen\n    if self.extend in ('both', 'min', 'max'):\n        extendlength = self._get_extension_lengths(self.extendfrac, automin, automax, default=0.05)\n    if self.extend in ('both', 'min'):\n        y[0] = 0.0 - extendlength[0]\n    if self.extend in ('both', 'max'):\n        y[-1] = 1.0 + extendlength[1]\n    yi = y[self._inside]\n    norm = colors.Normalize(yi[0], yi[-1])\n    y[self._inside] = np.ma.filled(norm(yi), np.nan)\n    return y",
                            "def _mesh(self):\n    \"\"\"\n    Return X,Y, the coordinate arrays for the colorbar pcolormesh.\n    These are suitable for a vertical colorbar; swapping and\n    transposition for a horizontal colorbar are done outside\n    this function.\n\n    These are scaled between vmin and vmax\n    \"\"\"\n    norm = copy.copy(self.norm)\n    norm.vmin = self.vmin\n    norm.vmax = self.vmax\n    x = np.array([0.0, 1.0])\n    if self.spacing == 'uniform':\n        y = self._uniform_y(self._central_N())\n    else:\n        y = self._proportional_y()\n    xmid = np.array([0.5])\n    try:\n        y = norm.inverse(y)\n        x = norm.inverse(x)\n        xmid = norm.inverse(xmid)\n    except ValueError:\n        dv = self.vmax - self.vmin\n        x = x * dv + self.vmin\n        y = y * dv + self.vmin\n        xmid = xmid * dv + self.vmin\n    self._y = y\n    X, Y = np.meshgrid(x, y)\n    if self._extend_lower() and (not self.extendrect):\n        X[0, :] = xmid\n    if self._extend_upper() and (not self.extendrect):\n        X[-1, :] = xmid\n    return (X, Y)",
                            "def _locate(self, x):\n    \"\"\"\n    Given a set of color data values, return their\n    corresponding colorbar data coordinates.\n    \"\"\"\n    if isinstance(self.norm, (colors.NoNorm, colors.BoundaryNorm)):\n        b = self._boundaries\n        xn = x\n    else:\n        b = self.norm(self._boundaries, clip=False).filled()\n        xn = self.norm(x, clip=False).filled()\n    bunique = b\n    yunique = self._y\n    if b[0] == b[1]:\n        bunique = bunique[1:]\n        yunique = yunique[1:]\n    if b[-1] == b[-2]:\n        bunique = bunique[:-1]\n        yunique = yunique[:-1]\n    z = np.interp(xn, bunique, yunique)\n    return z",
                            "def set_alpha(self, alpha):\n    self.alpha = alpha",
                            "def remove(self):\n    \"\"\"\n    Remove this colorbar from the figure\n    \"\"\"\n    fig = self.ax.figure\n    fig.delaxes(self.ax)"
                        ],
                        "constructor_variables": [
                            "extend",
                            "solids",
                            "locator",
                            "_manual_tick_data_values",
                            "_inside",
                            "dividers",
                            "boundaries",
                            "lines",
                            "ticklocation",
                            "cmap",
                            "spacing",
                            "drawedges",
                            "extendrect",
                            "values",
                            "ax",
                            "alpha",
                            "norm",
                            "patch",
                            "extendfrac",
                            "formatter",
                            "outline",
                            "filled",
                            "orientation"
                        ],
                        "class_level_variables": [
                            "_slice_dict",
                            "n_rasterize"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, ax, cmap=None, norm=None, alpha=None, values=None, boundaries=None, orientation='vertical', ticklocation='auto', extend='neither', spacing='uniform', ticks=None, format=None, drawedges=False, filled=True, extendfrac=None, extendrect=False, label='')",
                            "_extend_lower(self)",
                            "_extend_upper(self)",
                            "_patch_ax(self)",
                            "draw_all(self)",
                            "config_axis(self)",
                            "_get_ticker_locator_formatter(self)",
                            "_use_auto_colorbar_locator(self)",
                            "_reset_locator_formatter_scale(self)",
                            "update_ticks(self)",
                            "set_ticks(self, ticks, update_ticks=True)",
                            "get_ticks(self, minor=False)",
                            "set_ticklabels(self, ticklabels, update_ticks=True)",
                            "minorticks_on(self)",
                            "minorticks_off(self)",
                            "_config_axes(self, X, Y)",
                            "_set_label(self)",
                            "set_label(self, label, **kw)",
                            "_outline(self, X, Y)",
                            "_edges(self, X, Y)",
                            "_add_solids(self, X, Y, C)",
                            "add_lines(self, levels, colors, linewidths, erase=True)",
                            "_ticker(self, locator, formatter)",
                            "_process_values(self, b=None)",
                            "_find_range(self)",
                            "_central_N(self)",
                            "_extended_N(self)",
                            "_get_extension_lengths(self, frac, automin, automax, default=0.05)",
                            "_uniform_y(self, N)",
                            "_proportional_y(self)",
                            "_mesh(self)",
                            "_locate(self, x)",
                            "set_alpha(self, alpha)",
                            "remove(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self._labelkw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "'None'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10fd7d3a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x106065d60>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self._labelkw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x106065d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x106065d60>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x106065d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._label": {
                                    "variable_value": "'cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x106065d60>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x106065d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x106065d60>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x106065d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x106065d60>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'cbar 2'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x106065d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "'cbar 2'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x106065d60>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'cbar 2'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x106065d60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10604ce50>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._labelkw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10604ce50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10604ce50>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10604ce50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._label": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10602ac10>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'horizontal cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "self._labelkw": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10602ac10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._label": {
                                    "variable_value": "'horizontal cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colorbar.Colorbar object at 0x10602ac10>",
                                    "variable_type": "Colorbar",
                                    "variable_shape": null
                                },
                                "label": {
                                    "variable_value": "'horizontal cbar'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "self._labelkw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kw": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._set_label": {
                                    "variable_value": "<bound method ColorbarBase._set_label of <matplotlib.colorbar.Colorbar object at 0x10602ac10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _set_ticks_on_axis_warn(*args, **kw):\n    # a top level function which gets put in at the axes'\n    # set_xticks set_yticks by _patch_ax\n    cbook._warn_external(\"Use the colorbar set_ticks() method instead.\")",
                "@docstring.Substitution(make_axes_kw_doc)\ndef make_axes(parents, location=None, orientation=None, fraction=0.15,\n              shrink=1.0, aspect=20, **kw):\n    '''\n    Resize and reposition parent axes, and return a child\n    axes suitable for a colorbar.\n\n    Keyword arguments may include the following (with defaults):\n\n        location : [None|'left'|'right'|'top'|'bottom']\n            The position, relative to **parents**, where the colorbar axes\n            should be created. If None, the value will either come from the\n            given ``orientation``, else it will default to 'right'.\n\n        orientation :  [None|'vertical'|'horizontal']\n            The orientation of the colorbar. Typically, this keyword shouldn't\n            be used, as it can be derived from the ``location`` keyword.\n\n    %s\n\n    Returns (cax, kw), the child axes and the reduced kw dictionary to be\n    passed when creating the colorbar instance.\n    '''\n\n    locations = [\"left\", \"right\", \"top\", \"bottom\"]\n    if orientation is not None and location is not None:\n        raise TypeError('position and orientation are mutually exclusive. '\n                        'Consider setting the position to any of {}'\n                        .format(', '.join(locations)))\n\n    # provide a default location\n    if location is None and orientation is None:\n        location = 'right'\n\n    # allow the user to not specify the location by specifying the\n    # orientation instead\n    if location is None:\n        location = 'right' if orientation == 'vertical' else 'bottom'\n\n    cbook._check_in_list(locations, location=location)\n\n    default_location_settings = {'left':   {'anchor': (1.0, 0.5),\n                                            'panchor': (0.0, 0.5),\n                                            'pad': 0.10,\n                                            'orientation': 'vertical'},\n                                 'right':  {'anchor': (0.0, 0.5),\n                                            'panchor': (1.0, 0.5),\n                                            'pad': 0.05,\n                                            'orientation': 'vertical'},\n                                 'top':    {'anchor': (0.5, 0.0),\n                                            'panchor': (0.5, 1.0),\n                                            'pad': 0.05,\n                                            'orientation': 'horizontal'},\n                                 'bottom': {'anchor': (0.5, 1.0),\n                                            'panchor': (0.5, 0.0),\n                                            'pad': 0.15,  # backwards compat\n                                            'orientation': 'horizontal'},\n                                 }\n\n    loc_settings = default_location_settings[location]\n\n    # put appropriate values into the kw dict for passing back to\n    # the Colorbar class\n    kw['orientation'] = loc_settings['orientation']\n    kw['ticklocation'] = location\n\n    anchor = kw.pop('anchor', loc_settings['anchor'])\n    parent_anchor = kw.pop('panchor', loc_settings['panchor'])\n\n    parents_iterable = np.iterable(parents)\n    # turn parents into a list if it is not already. We do this w/ np\n    # because `plt.subplots` can return an ndarray and is natural to\n    # pass to `colorbar`.\n    parents = np.atleast_1d(parents).ravel()\n\n    # check if using constrained_layout:\n    try:\n        gs = parents[0].get_subplotspec().get_gridspec()\n        using_constrained_layout = (gs._layoutbox is not None)\n    except AttributeError:\n        using_constrained_layout = False\n\n    # defaults are not appropriate for constrained_layout:\n    pad0 = loc_settings['pad']\n    if using_constrained_layout:\n        pad0 = 0.02\n    pad = kw.pop('pad', pad0)\n\n    fig = parents[0].get_figure()\n    if not all(fig is ax.get_figure() for ax in parents):\n        raise ValueError('Unable to create a colorbar axes as not all '\n                         'parents share the same figure.')\n\n    # take a bounding box around all of the given axes\n    parents_bbox = mtransforms.Bbox.union(\n        [ax.get_position(original=True).frozen() for ax in parents])\n\n    pb = parents_bbox\n    if location in ('left', 'right'):\n        if location == 'left':\n            pbcb, _, pb1 = pb.splitx(fraction, fraction + pad)\n        else:\n            pb1, _, pbcb = pb.splitx(1 - fraction - pad, 1 - fraction)\n        pbcb = pbcb.shrunk(1.0, shrink).anchored(anchor, pbcb)\n    else:\n        if location == 'bottom':\n            pbcb, _, pb1 = pb.splity(fraction, fraction + pad)\n        else:\n            pb1, _, pbcb = pb.splity(1 - fraction - pad, 1 - fraction)\n        pbcb = pbcb.shrunk(shrink, 1.0).anchored(anchor, pbcb)\n\n        # define the aspect ratio in terms of y's per x rather than x's per y\n        aspect = 1.0 / aspect\n\n    # define a transform which takes us from old axes coordinates to\n    # new axes coordinates\n    shrinking_trans = mtransforms.BboxTransform(parents_bbox, pb1)\n\n    # transform each of the axes in parents using the new transform\n    for ax in parents:\n        new_posn = shrinking_trans.transform(ax.get_position(original=True))\n        new_posn = mtransforms.Bbox(new_posn)\n        ax._set_position(new_posn)\n        if parent_anchor is not False:\n            ax.set_anchor(parent_anchor)\n\n    cax = fig.add_axes(pbcb, label=\"<colorbar>\")\n\n    # OK, now make a layoutbox for the cb axis.  Later, we will use this\n    # to make the colorbar fit nicely.\n    if not using_constrained_layout:\n        # no layout boxes:\n        lb = None\n        lbpos = None\n        # and we need to set the aspect ratio by hand...\n        cax.set_aspect(aspect, anchor=anchor, adjustable='box')\n    else:\n        if not parents_iterable:\n            # this is a single axis...\n            ax = parents[0]\n            lb, lbpos = constrained_layout.layoutcolorbarsingle(\n                    ax, cax, shrink, aspect, location, pad=pad)\n        else:  # there is more than one parent, so lets use gridspec\n            # the colorbar will be a sibling of this gridspec, so the\n            # parent is the same parent as the gridspec.  Either the figure,\n            # or a subplotspec.\n\n            lb, lbpos = constrained_layout.layoutcolorbargridspec(\n                    parents, cax, shrink, aspect, location, pad)\n\n    cax._layoutbox = lb\n    cax._poslayoutbox = lbpos\n\n    return cax, kw",
                "@docstring.Substitution(make_axes_kw_doc)\ndef make_axes_gridspec(parent, *, fraction=0.15, shrink=1.0, aspect=20, **kw):\n    '''\n    Resize and reposition a parent axes, and return a child axes\n    suitable for a colorbar. This function is similar to\n    make_axes. Prmary differences are\n\n     * *make_axes_gridspec* only handles the *orientation* keyword\n       and cannot handle the \"location\" keyword.\n\n     * *make_axes_gridspec* should only be used with a subplot parent.\n\n     * *make_axes* creates an instance of Axes. *make_axes_gridspec*\n        creates an instance of Subplot.\n\n     * *make_axes* updates the position of the\n        parent. *make_axes_gridspec* replaces the grid_spec attribute\n        of the parent with a new one.\n\n    While this function is meant to be compatible with *make_axes*,\n    there could be some minor differences.\n\n    Keyword arguments may include the following (with defaults):\n\n        *orientation*\n            'vertical' or 'horizontal'\n\n    %s\n\n    All but the first of these are stripped from the input kw set.\n\n    Returns (cax, kw), the child axes and the reduced kw dictionary to be\n    passed when creating the colorbar instance.\n    '''\n\n    orientation = kw.setdefault('orientation', 'vertical')\n    kw['ticklocation'] = 'auto'\n\n    x1 = 1 - fraction\n\n    # for shrinking\n    pad_s = (1 - shrink) * 0.5\n    wh_ratios = [pad_s, shrink, pad_s]\n\n    # we need to none the tree of layoutboxes because\n    # constrained_layout can't remove and replace the tree\n    # hierarchy w/o a seg fault.\n    gs = parent.get_subplotspec().get_gridspec()\n    layoutbox.nonetree(gs._layoutbox)\n    gs_from_subplotspec = gridspec.GridSpecFromSubplotSpec\n    if orientation == 'vertical':\n        pad = kw.pop('pad', 0.05)\n        wh_space = 2 * pad / (1 - pad)\n        gs = gs_from_subplotspec(1, 2,\n                                 subplot_spec=parent.get_subplotspec(),\n                                 wspace=wh_space,\n                                 width_ratios=[x1 - pad, fraction])\n        gs2 = gs_from_subplotspec(3, 1,\n                                  subplot_spec=gs[1],\n                                  hspace=0.,\n                                  height_ratios=wh_ratios)\n        anchor = (0.0, 0.5)\n        panchor = (1.0, 0.5)\n    else:\n        pad = kw.pop('pad', 0.15)\n        wh_space = 2 * pad / (1 - pad)\n        gs = gs_from_subplotspec(2, 1,\n                                 subplot_spec=parent.get_subplotspec(),\n                                 hspace=wh_space,\n                                 height_ratios=[x1 - pad, fraction])\n        gs2 = gs_from_subplotspec(1, 3,\n                                  subplot_spec=gs[1],\n                                  wspace=0.,\n                                  width_ratios=wh_ratios)\n        aspect = 1 / aspect\n        anchor = (0.5, 1.0)\n        panchor = (0.5, 0.0)\n\n    parent.set_subplotspec(gs[0])\n    parent.update_params()\n    parent._set_position(parent.figbox)\n    parent.set_anchor(panchor)\n\n    fig = parent.get_figure()\n    cax = fig.add_subplot(gs2[1], label=\"<colorbar>\")\n    cax.set_aspect(aspect, anchor=anchor, adjustable='box')\n    return cax, kw",
                "def colorbar_factory(cax, mappable, **kwargs):\n    \"\"\"\n    Creates a colorbar on the given axes for the given mappable.\n\n    Typically, for automatic colorbar placement given only a mappable use\n    :meth:`~matplotlib.figure.Figure.colorbar`.\n\n    \"\"\"\n    # if the given mappable is a contourset with any hatching, use\n    # ColorbarPatch else use Colorbar\n    if (isinstance(mappable, contour.ContourSet)\n            and any(hatch is not None for hatch in mappable.hatches)):\n        cb = ColorbarPatch(cax, mappable, **kwargs)\n    else:\n        cb = Colorbar(cax, mappable, **kwargs)\n\n    cid = mappable.callbacksSM.connect('changed', cb.on_mappable_changed)\n    mappable.colorbar = cb\n    mappable.colorbar_cid = cid\n\n    return cb",
                "def __init__(self, colorbar):\n    \"\"\"\n    This ticker needs to know the *colorbar* so that it can access\n    its *vmin* and *vmax*.  Otherwise it is the same as\n    `~.ticker.AutoLocator`.\n    \"\"\"\n\n    self._colorbar = colorbar\n    nbins = 'auto'\n    steps = [1, 2, 2.5, 5, 10]\n    super().__init__(nbins=nbins, steps=steps)",
                "def tick_values(self, vmin, vmax):\n    # flip if needed:\n    if vmin > vmax:\n        vmin, vmax = vmax, vmin\n    vmin = max(vmin, self._colorbar.norm.vmin)\n    vmax = min(vmax, self._colorbar.norm.vmax)\n    ticks = super().tick_values(vmin, vmax)\n    rtol = (vmax - vmin) * 1e-10\n    return ticks[(ticks >= vmin - rtol) & (ticks <= vmax + rtol)]",
                "def __init__(self, colorbar, n=None):\n    \"\"\"\n    This ticker needs to know the *colorbar* so that it can access\n    its *vmin* and *vmax*.\n    \"\"\"\n    self._colorbar = colorbar\n    self.ndivs = n\n    super().__init__(n=None)",
                "def __call__(self):\n    vmin = self._colorbar.norm.vmin\n    vmax = self._colorbar.norm.vmax\n    ticks = super().__call__()\n    rtol = (vmax - vmin) * 1e-10\n    return ticks[(ticks >= vmin - rtol) & (ticks <= vmax + rtol)]",
                "def __init__(self, colorbar, *args, **kwargs):\n    \"\"\"\n    _ColorbarLogLocator(colorbar, *args, **kwargs)\n\n    This ticker needs to know the *colorbar* so that it can access\n    its *vmin* and *vmax*.  Otherwise it is the same as\n    `~.ticker.LogLocator`.  The ``*args`` and ``**kwargs`` are the\n    same as `~.ticker.LogLocator`.\n    \"\"\"\n    self._colorbar = colorbar\n    super().__init__(*args, **kwargs)",
                "def tick_values(self, vmin, vmax):\n    if vmin > vmax:\n        vmin, vmax = vmax, vmin\n    vmin = max(vmin, self._colorbar.norm.vmin)\n    vmax = min(vmax, self._colorbar.norm.vmax)\n    ticks = super().tick_values(vmin, vmax)\n    rtol = (np.log10(vmax) - np.log10(vmin)) * 1e-10\n    ticks = ticks[(np.log10(ticks) >= np.log10(vmin) - rtol) &\n          (np.log10(ticks) <= np.log10(vmax) + rtol)]\n    return ticks",
                "@cbook.deprecated(\"3.1\", alternative=\"ScalarMappable.set_norm\")\ndef set_norm(self, norm):\n    \"\"\"\n    `.colorbar.Colorbar.set_norm` does nothing; set the norm on\n    the mappable associated with this colorbar.\n    \"\"\"\n    pass",
                "@cbook.deprecated(\"3.1\", alternative=\"ScalarMappable.set_cmap\")\ndef set_cmap(self, cmap):\n    \"\"\"\n    `.colorbar.Colorbar.set_cmap` does nothing; set the norm on\n    the mappable associated with this colorbar.\n    \"\"\"\n    pass",
                "@cbook.deprecated(\"3.1\", alternative=\"ScalarMappable.set_clim\")\ndef set_clim(self, vmin=None, vmax=None):\n    \"\"\"\n    `.colorbar.Colorbar.set_clim` does nothing; set the limits on\n    the mappable associated with this colorbar.\n    \"\"\"\n    pass",
                "@cbook.deprecated(\"3.1\", alternative=\"ScalarMappable.get_cmap\")\ndef get_cmap(self):\n    \"\"\"Return the colormap.\"\"\"\n    return self.cmap",
                "@cbook.deprecated(\"3.1\", alternative=\"ScalarMappable.get_clim\")\ndef get_clim(self):\n    \"\"\"Return the min, max of the color limits for image scaling.\"\"\"\n    return self.norm.vmin, self.norm.vmax",
                "def __init__(self, ax, cmap=None,\n             norm=None,\n             alpha=None,\n             values=None,\n             boundaries=None,\n             orientation='vertical',\n             ticklocation='auto',\n             extend='neither',\n             spacing='uniform',  # uniform or proportional\n             ticks=None,\n             format=None,\n             drawedges=False,\n             filled=True,\n             extendfrac=None,\n             extendrect=False,\n             label='',\n             ):\n    #: The axes that this colorbar lives in.\n    self.ax = ax\n    self._patch_ax()\n    if cmap is None:\n        cmap = cm.get_cmap()\n    if norm is None:\n        norm = colors.Normalize()\n    self.alpha = alpha\n    self.cmap = cmap\n    self.norm = norm\n    self.values = values\n    self.boundaries = boundaries\n    self.extend = extend\n    self._inside = self._slice_dict[extend]\n    self.spacing = spacing\n    self.orientation = orientation\n    self.drawedges = drawedges\n    self.filled = filled\n    self.extendfrac = extendfrac\n    self.extendrect = extendrect\n    self.solids = None\n    self.lines = list()\n    self.outline = None\n    self.patch = None\n    self.dividers = None\n    self.locator = None\n    self.formatter = None\n    self._manual_tick_data_values = None\n\n    if ticklocation == 'auto':\n        ticklocation = 'bottom' if orientation == 'horizontal' else 'right'\n    self.ticklocation = ticklocation\n\n    self.set_label(label)\n    self._reset_locator_formatter_scale()\n\n    if np.iterable(ticks):\n        self.locator = ticker.FixedLocator(ticks, nbins=len(ticks))\n    else:\n        self.locator = ticks    # Handle default in _ticker()\n\n    if isinstance(format, str):\n        self.formatter = ticker.FormatStrFormatter(format)\n    else:\n        self.formatter = format  # Assume it is a Formatter or None\n    self.draw_all()",
                "def _extend_lower(self):\n    \"\"\"Return whether the lower limit is open ended.\"\"\"\n    return self.extend in ('both', 'min')",
                "def _extend_upper(self):\n    \"\"\"Return whether the uper limit is open ended.\"\"\"\n    return self.extend in ('both', 'max')",
                "def _patch_ax(self):\n    # bind some methods to the axes to warn users\n    # against using those methods.\n    self.ax.set_xticks = _set_ticks_on_axis_warn\n    self.ax.set_yticks = _set_ticks_on_axis_warn",
                "def draw_all(self):\n    '''\n    Calculate any free parameters based on the current cmap and norm,\n    and do all the drawing.\n    '''\n    # sets self._boundaries and self._values in real data units.\n    # takes into account extend values:\n    self._process_values()\n    # sets self.vmin and vmax in data units, but just for\n    # the part of the colorbar that is not part of the extend\n    # patch:\n    self._find_range()\n    # returns the X and Y mesh, *but* this was/is in normalized\n    # units:\n    X, Y = self._mesh()\n    C = self._values[:, np.newaxis]\n    # decide minor/major axis\n    self.config_axis()\n    self._config_axes(X, Y)\n    if self.filled:\n        self._add_solids(X, Y, C)",
                "def config_axis(self):\n    ax = self.ax\n\n    if self.orientation == 'vertical':\n        long_axis, short_axis = ax.yaxis, ax.xaxis\n    else:\n        long_axis, short_axis = ax.xaxis, ax.yaxis\n\n    long_axis.set_label_position(self.ticklocation)\n    long_axis.set_ticks_position(self.ticklocation)\n    short_axis.set_ticks([])\n    short_axis.set_ticks([], minor=True)\n    self._set_label()",
                "def _get_ticker_locator_formatter(self):\n    \"\"\"\n    This code looks at the norm being used by the colorbar\n    and decides what locator and formatter to use.  If ``locator`` has\n    already been set by hand, it just returns\n    ``self.locator, self.formatter``.\n    \"\"\"\n    locator = self.locator\n    formatter = self.formatter\n    if locator is None:\n        if self.boundaries is None:\n            if isinstance(self.norm, colors.NoNorm):\n                nv = len(self._values)\n                base = 1 + int(nv / 10)\n                locator = ticker.IndexLocator(base=base, offset=0)\n            elif isinstance(self.norm, colors.BoundaryNorm):\n                b = self.norm.boundaries\n                locator = ticker.FixedLocator(b, nbins=10)\n            elif isinstance(self.norm, colors.LogNorm):\n                locator = _ColorbarLogLocator(self)\n            elif isinstance(self.norm, colors.SymLogNorm):\n                # The subs setting here should be replaced\n                # by logic in the locator.\n                locator = ticker.SymmetricalLogLocator(\n                                  subs=np.arange(1, 10),\n                                  linthresh=self.norm.linthresh,\n                                  base=10)\n            else:\n                if mpl.rcParams['_internal.classic_mode']:\n                    locator = ticker.MaxNLocator()\n                else:\n                    locator = _ColorbarAutoLocator(self)\n        else:\n            b = self._boundaries[self._inside]\n            locator = ticker.FixedLocator(b, nbins=10)\n\n    if formatter is None:\n        if isinstance(self.norm, colors.LogNorm):\n            formatter = ticker.LogFormatterSciNotation()\n        elif isinstance(self.norm, colors.SymLogNorm):\n            formatter = ticker.LogFormatterSciNotation(\n                                    linthresh=self.norm.linthresh)\n        else:\n            formatter = ticker.ScalarFormatter()\n    else:\n        formatter = self.formatter\n\n    self.locator = locator\n    self.formatter = formatter\n    _log.debug('locator: %r', locator)\n    return locator, formatter",
                "def _use_auto_colorbar_locator(self):\n    \"\"\"\n    Return if we should use an adjustable tick locator or a fixed\n    one.  (check is used twice so factored out here...)\n    \"\"\"\n    contouring = ((self.boundaries is not None) and\n                  (self.spacing == 'uniform'))\n    return (((type(self.norm) == colors.Normalize)\n                or (type(self.norm) == colors.LogNorm))\n                and not contouring)",
                "def _reset_locator_formatter_scale(self):\n    \"\"\"\n    Reset the locator et al to defaults.  Any user-hardcoded changes\n    need to be re-entered if this gets called (either at init, or when\n    the mappable normal gets changed: Colorbar.update_normal)\n    \"\"\"\n    self.locator = None\n    self.formatter = None\n    if (isinstance(self.norm, colors.LogNorm)):\n        # *both* axes are made log so that determining the\n        # mid point is easier.\n        self.ax.set_xscale('log')\n        self.ax.set_yscale('log')\n        self.minorticks_on()\n    else:\n        self.ax.set_xscale('linear')\n        self.ax.set_yscale('linear')",
                "def update_ticks(self):\n    \"\"\"\n    Force the update of the ticks and ticklabels. This must be\n    called whenever the tick locator and/or tick formatter changes.\n    \"\"\"\n    ax = self.ax\n    # Get the locator and formatter; defaults to self.locator if not None.\n    locator, formatter = self._get_ticker_locator_formatter()\n    long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n    if self._use_auto_colorbar_locator():\n        _log.debug('Using auto colorbar locator on colorbar')\n        _log.debug('locator: %r', locator)\n        long_axis.set_major_locator(locator)\n        long_axis.set_major_formatter(formatter)\n    else:\n        _log.debug('Using fixed locator on colorbar')\n        ticks, ticklabels, offset_string = self._ticker(locator, formatter)\n        long_axis.set_ticks(ticks)\n        long_axis.set_ticklabels(ticklabels)\n        long_axis.get_major_formatter().set_offset_string(offset_string)",
                "def set_ticks(self, ticks, update_ticks=True):\n    \"\"\"\n    Set tick locations.\n\n    Parameters\n    ----------\n    ticks : {None, sequence, :class:`~matplotlib.ticker.Locator` instance}\n        If None, a default Locator will be used.\n\n    update_ticks : {True, False}, optional\n        If True, tick locations are updated immediately.  If False,\n        use :meth:`update_ticks` to manually update the ticks.\n\n    \"\"\"\n    if np.iterable(ticks):\n        self.locator = ticker.FixedLocator(ticks, nbins=len(ticks))\n    else:\n        self.locator = ticks\n\n    if update_ticks:\n        self.update_ticks()\n    self.stale = True",
                "def get_ticks(self, minor=False):\n    \"\"\"Return the x ticks as a list of locations.\"\"\"\n    if self._manual_tick_data_values is None:\n        ax = self.ax\n        long_axis = (\n            ax.yaxis if self.orientation == 'vertical' else ax.xaxis)\n        return long_axis.get_majorticklocs()\n    else:\n        # We made the axes manually, the old way, and the ylim is 0-1,\n        # so the majorticklocs are in those units, not data units.\n        return self._manual_tick_data_values",
                "def set_ticklabels(self, ticklabels, update_ticks=True):\n    \"\"\"\n    Set tick labels.\n\n    Tick labels are updated immediately unless *update_ticks* is *False*,\n    in which case one should call `.update_ticks` explicitly.\n    \"\"\"\n    if isinstance(self.locator, ticker.FixedLocator):\n        self.formatter = ticker.FixedFormatter(ticklabels)\n        if update_ticks:\n            self.update_ticks()\n    else:\n        cbook._warn_external(\"set_ticks() must have been called.\")\n    self.stale = True",
                "def minorticks_on(self):\n    \"\"\"\n    Turns on the minor ticks on the colorbar without extruding\n    into the \"extend regions\".\n    \"\"\"\n    ax = self.ax\n    long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n\n    if long_axis.get_scale() == 'log':\n        long_axis.set_minor_locator(_ColorbarLogLocator(self, base=10.,\n                                                        subs='auto'))\n        long_axis.set_minor_formatter(ticker.LogFormatterSciNotation())\n    else:\n        long_axis.set_minor_locator(_ColorbarAutoMinorLocator(self))",
                "def minorticks_off(self):\n    \"\"\"\n    Turns off the minor ticks on the colorbar.\n    \"\"\"\n    ax = self.ax\n    long_axis = ax.yaxis if self.orientation == 'vertical' else ax.xaxis\n\n    long_axis.set_minor_locator(ticker.NullLocator())",
                "def _config_axes(self, X, Y):\n    '''\n    Make an axes patch and outline.\n    '''\n    ax = self.ax\n    ax.set_frame_on(False)\n    ax.set_navigate(False)\n    xy = self._outline(X, Y)\n    ax.ignore_existing_data_limits = True\n    ax.update_datalim(xy)\n    ax.set_xlim(*ax.dataLim.intervalx)\n    ax.set_ylim(*ax.dataLim.intervaly)\n    if self.outline is not None:\n        self.outline.remove()\n    self.outline = mpatches.Polygon(\n        xy, edgecolor=mpl.rcParams['axes.edgecolor'],\n        facecolor='none',\n        linewidth=mpl.rcParams['axes.linewidth'],\n        closed=True,\n        zorder=2)\n    ax.add_artist(self.outline)\n    self.outline.set_clip_box(None)\n    self.outline.set_clip_path(None)\n    c = mpl.rcParams['axes.facecolor']\n    if self.patch is not None:\n        self.patch.remove()\n    self.patch = mpatches.Polygon(xy, edgecolor=c,\n                                  facecolor=c,\n                                  linewidth=0.01,\n                                  zorder=-1)\n    ax.add_artist(self.patch)\n\n    self.update_ticks()",
                "def _set_label(self):\n    if self.orientation == 'vertical':\n        self.ax.set_ylabel(self._label, **self._labelkw)\n    else:\n        self.ax.set_xlabel(self._label, **self._labelkw)\n    self.stale = True",
                "def set_label(self, label, **kw):\n    \"\"\"Label the long axis of the colorbar.\"\"\"\n    self._label = str(label)\n    self._labelkw = kw\n    self._set_label()",
                "def _outline(self, X, Y):\n    '''\n    Return *x*, *y* arrays of colorbar bounding polygon,\n    taking orientation into account.\n    '''\n    N = X.shape[0]\n    ii = [0, 1, N - 2, N - 1, 2 * N - 1, 2 * N - 2, N + 1, N, 0]\n    x = X.T.reshape(-1)[ii]\n    y = Y.T.reshape(-1)[ii]\n    return (np.column_stack([y, x])\n            if self.orientation == 'horizontal' else\n            np.column_stack([x, y]))",
                "def _edges(self, X, Y):\n    '''\n    Return the separator line segments; helper for _add_solids.\n    '''\n    N = X.shape[0]\n    # Using the non-array form of these line segments is much\n    # simpler than making them into arrays.\n    if self.orientation == 'vertical':\n        return [list(zip(X[i], Y[i])) for i in range(1, N - 1)]\n    else:\n        return [list(zip(Y[i], X[i])) for i in range(1, N - 1)]",
                "def _add_solids(self, X, Y, C):\n    '''\n    Draw the colors using :meth:`~matplotlib.axes.Axes.pcolormesh`;\n    optionally add separators.\n    '''\n    if self.orientation == 'vertical':\n        args = (X, Y, C)\n    else:\n        args = (np.transpose(Y), np.transpose(X), np.transpose(C))\n    kw = dict(cmap=self.cmap,\n              norm=self.norm,\n              alpha=self.alpha,\n              edgecolors='None')\n    _log.debug('Setting pcolormesh')\n    col = self.ax.pcolormesh(*args, **kw)\n    # self.add_observer(col) # We should observe, not be observed...\n\n    if self.solids is not None:\n        self.solids.remove()\n    self.solids = col\n    if self.dividers is not None:\n        self.dividers.remove()\n        self.dividers = None\n    if self.drawedges:\n        linewidths = (0.5 * mpl.rcParams['axes.linewidth'],)\n        self.dividers = collections.LineCollection(\n                self._edges(X, Y),\n                colors=(mpl.rcParams['axes.edgecolor'],),\n                linewidths=linewidths)\n        self.ax.add_collection(self.dividers)\n    elif len(self._y) >= self.n_rasterize:\n        self.solids.set_rasterized(True)",
                "def add_lines(self, levels, colors, linewidths, erase=True):\n    '''\n    Draw lines on the colorbar.\n\n    *colors* and *linewidths* must be scalars or\n    sequences the same length as *levels*.\n\n    Set *erase* to False to add lines without first\n    removing any previously added lines.\n    '''\n    y = self._locate(levels)\n    rtol = (self._y[-1] - self._y[0]) * 1e-10\n    igood = (y < self._y[-1] + rtol) & (y > self._y[0] - rtol)\n    y = y[igood]\n    if np.iterable(colors):\n        colors = np.asarray(colors)[igood]\n    if np.iterable(linewidths):\n        linewidths = np.asarray(linewidths)[igood]\n    X, Y = np.meshgrid([self._y[0], self._y[-1]], y)\n    if self.orientation == 'vertical':\n        xy = np.stack([X, Y], axis=-1)\n    else:\n        xy = np.stack([Y, X], axis=-1)\n    col = collections.LineCollection(xy, linewidths=linewidths)\n\n    if erase and self.lines:\n        for lc in self.lines:\n            lc.remove()\n        self.lines = []\n    self.lines.append(col)\n    col.set_color(colors)\n    self.ax.add_collection(col)\n    self.stale = True",
                "def _ticker(self, locator, formatter):\n    '''\n    Return the sequence of ticks (colorbar data locations),\n    ticklabels (strings), and the corresponding offset string.\n    '''\n    if isinstance(self.norm, colors.NoNorm) and self.boundaries is None:\n        intv = self._values[0], self._values[-1]\n    else:\n        intv = self.vmin, self.vmax\n    locator.create_dummy_axis(minpos=intv[0])\n    formatter.create_dummy_axis(minpos=intv[0])\n    locator.set_view_interval(*intv)\n    locator.set_data_interval(*intv)\n    formatter.set_view_interval(*intv)\n    formatter.set_data_interval(*intv)\n\n    b = np.array(locator())\n    if isinstance(locator, ticker.LogLocator):\n        eps = 1e-10\n        b = b[(b <= intv[1] * (1 + eps)) & (b >= intv[0] * (1 - eps))]\n    else:\n        eps = (intv[1] - intv[0]) * 1e-10\n        b = b[(b <= intv[1] + eps) & (b >= intv[0] - eps)]\n    self._manual_tick_data_values = b\n    ticks = self._locate(b)\n    ticklabels = formatter.format_ticks(b)\n    offset_string = formatter.get_offset()\n    return ticks, ticklabels, offset_string",
                "def _process_values(self, b=None):\n    '''\n    Set the :attr:`_boundaries` and :attr:`_values` attributes\n    based on the input boundaries and values.  Input boundaries\n    can be *self.boundaries* or the argument *b*.\n    '''\n    if b is None:\n        b = self.boundaries\n    if b is not None:\n        self._boundaries = np.asarray(b, dtype=float)\n        if self.values is None:\n            self._values = 0.5 * (self._boundaries[:-1]\n                                  + self._boundaries[1:])\n            if isinstance(self.norm, colors.NoNorm):\n                self._values = (self._values + 0.00001).astype(np.int16)\n        else:\n            self._values = np.array(self.values)\n        return\n    if self.values is not None:\n        self._values = np.array(self.values)\n        if self.boundaries is None:\n            b = np.zeros(len(self.values) + 1)\n            b[1:-1] = 0.5 * (self._values[:-1] + self._values[1:])\n            b[0] = 2.0 * b[1] - b[2]\n            b[-1] = 2.0 * b[-2] - b[-3]\n            self._boundaries = b\n            return\n        self._boundaries = np.array(self.boundaries)\n        return\n    # Neither boundaries nor values are specified;\n    # make reasonable ones based on cmap and norm.\n    if isinstance(self.norm, colors.NoNorm):\n        b = self._uniform_y(self.cmap.N + 1) * self.cmap.N - 0.5\n        v = np.zeros(len(b) - 1, dtype=np.int16)\n        v[self._inside] = np.arange(self.cmap.N, dtype=np.int16)\n        if self._extend_lower():\n            v[0] = -1\n        if self._extend_upper():\n            v[-1] = self.cmap.N\n        self._boundaries = b\n        self._values = v\n        return\n    elif isinstance(self.norm, colors.BoundaryNorm):\n        b = list(self.norm.boundaries)\n        if self._extend_lower():\n            b = [b[0] - 1] + b\n        if self._extend_upper():\n            b = b + [b[-1] + 1]\n        b = np.array(b)\n        v = np.zeros(len(b) - 1)\n        bi = self.norm.boundaries\n        v[self._inside] = 0.5 * (bi[:-1] + bi[1:])\n        if self._extend_lower():\n            v[0] = b[0] - 1\n        if self._extend_upper():\n            v[-1] = b[-1] + 1\n        self._boundaries = b\n        self._values = v\n        return\n    else:\n        if not self.norm.scaled():\n            self.norm.vmin = 0\n            self.norm.vmax = 1\n\n        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n            self.norm.vmin,\n            self.norm.vmax,\n            expander=0.1)\n\n        b = self.norm.inverse(self._uniform_y(self.cmap.N + 1))\n\n        if isinstance(self.norm, (colors.PowerNorm, colors.LogNorm)):\n            # If using a lognorm or powernorm, ensure extensions don't\n            # go negative\n            if self._extend_lower():\n                b[0] = 0.9 * b[0]\n            if self._extend_upper():\n                b[-1] = 1.1 * b[-1]\n        else:\n            if self._extend_lower():\n                b[0] = b[0] - 1\n            if self._extend_upper():\n                b[-1] = b[-1] + 1\n    self._process_values(b)",
                "def _find_range(self):\n    '''\n    Set :attr:`vmin` and :attr:`vmax` attributes to the first and\n    last boundary excluding extended end boundaries.\n    '''\n    b = self._boundaries[self._inside]\n    self.vmin = b[0]\n    self.vmax = b[-1]",
                "def _central_N(self):\n    \"\"\"Return the number of boundaries excluding end extensions.\"\"\"\n    nb = len(self._boundaries)\n    if self.extend == 'both':\n        nb -= 2\n    elif self.extend in ('min', 'max'):\n        nb -= 1\n    return nb",
                "def _extended_N(self):\n    '''\n    Based on the colormap and extend variable, return the\n    number of boundaries.\n    '''\n    N = self.cmap.N + 1\n    if self.extend == 'both':\n        N += 2\n    elif self.extend in ('min', 'max'):\n        N += 1\n    return N",
                "def _get_extension_lengths(self, frac, automin, automax, default=0.05):\n    '''\n    Get the lengths of colorbar extensions.\n\n    A helper method for _uniform_y and _proportional_y.\n    '''\n    # Set the default value.\n    extendlength = np.array([default, default])\n    if isinstance(frac, str):\n        cbook._check_in_list(['auto'], extendfrac=frac.lower())\n        # Use the provided values when 'auto' is required.\n        extendlength[:] = [automin, automax]\n    elif frac is not None:\n        try:\n            # Try to set min and max extension fractions directly.\n            extendlength[:] = frac\n            # If frac is a sequence containing None then NaN may\n            # be encountered. This is an error.\n            if np.isnan(extendlength).any():\n                raise ValueError()\n        except (TypeError, ValueError):\n            # Raise an error on encountering an invalid value for frac.\n            raise ValueError('invalid value for extendfrac')\n    return extendlength",
                "def _uniform_y(self, N):\n    '''\n    Return colorbar data coordinates for *N* uniformly\n    spaced boundaries, plus ends if required.\n    '''\n    if self.extend == 'neither':\n        y = np.linspace(0, 1, N)\n    else:\n        automin = automax = 1. / (N - 1.)\n        extendlength = self._get_extension_lengths(self.extendfrac,\n                                                   automin, automax,\n                                                   default=0.05)\n        if self.extend == 'both':\n            y = np.zeros(N + 2, 'd')\n            y[0] = 0. - extendlength[0]\n            y[-1] = 1. + extendlength[1]\n        elif self.extend == 'min':\n            y = np.zeros(N + 1, 'd')\n            y[0] = 0. - extendlength[0]\n        else:\n            y = np.zeros(N + 1, 'd')\n            y[-1] = 1. + extendlength[1]\n        y[self._inside] = np.linspace(0, 1, N)\n    return y",
                "def _proportional_y(self):\n    '''\n    Return colorbar data coordinates for the boundaries of\n    a proportional colorbar.\n    '''\n    if isinstance(self.norm, colors.BoundaryNorm):\n        y = (self._boundaries - self._boundaries[0])\n        y = y / (self._boundaries[-1] - self._boundaries[0])\n    else:\n        y = self.norm(self._boundaries.copy())\n        y = np.ma.filled(y, np.nan)\n    if self.extend == 'min':\n        # Exclude leftmost interval of y.\n        clen = y[-1] - y[1]\n        automin = (y[2] - y[1]) / clen\n        automax = (y[-1] - y[-2]) / clen\n    elif self.extend == 'max':\n        # Exclude rightmost interval in y.\n        clen = y[-2] - y[0]\n        automin = (y[1] - y[0]) / clen\n        automax = (y[-2] - y[-3]) / clen\n    elif self.extend == 'both':\n        # Exclude leftmost and rightmost intervals in y.\n        clen = y[-2] - y[1]\n        automin = (y[2] - y[1]) / clen\n        automax = (y[-2] - y[-3]) / clen\n    if self.extend in ('both', 'min', 'max'):\n        extendlength = self._get_extension_lengths(self.extendfrac,\n                                                   automin, automax,\n                                                   default=0.05)\n    if self.extend in ('both', 'min'):\n        y[0] = 0. - extendlength[0]\n    if self.extend in ('both', 'max'):\n        y[-1] = 1. + extendlength[1]\n    yi = y[self._inside]\n    norm = colors.Normalize(yi[0], yi[-1])\n    y[self._inside] = np.ma.filled(norm(yi), np.nan)\n    return y",
                "def _mesh(self):\n    '''\n    Return X,Y, the coordinate arrays for the colorbar pcolormesh.\n    These are suitable for a vertical colorbar; swapping and\n    transposition for a horizontal colorbar are done outside\n    this function.\n\n    These are scaled between vmin and vmax\n    '''\n    # copy the norm and change the vmin and vmax to the vmin and\n    # vmax of the colorbar, not the norm.  This allows the situation\n    # where the colormap has a narrower range than the colorbar, to\n    # accomodate extra contours:\n    norm = copy.copy(self.norm)\n    norm.vmin = self.vmin\n    norm.vmax = self.vmax\n    x = np.array([0.0, 1.0])\n    if self.spacing == 'uniform':\n        y = self._uniform_y(self._central_N())\n    else:\n        y = self._proportional_y()\n    xmid = np.array([0.5])\n    try:\n        y = norm.inverse(y)\n        x = norm.inverse(x)\n        xmid = norm.inverse(xmid)\n    except ValueError:\n        # occurs for norms that don't have an inverse, in\n        # which case manually scale:\n        dv = self.vmax - self.vmin\n        x = x * dv + self.vmin\n        y = y * dv + self.vmin\n        xmid = xmid * dv + self.vmin\n    self._y = y\n    X, Y = np.meshgrid(x, y)\n    if self._extend_lower() and not self.extendrect:\n        X[0, :] = xmid\n    if self._extend_upper() and not self.extendrect:\n        X[-1, :] = xmid\n    return X, Y",
                "def _locate(self, x):\n    '''\n    Given a set of color data values, return their\n    corresponding colorbar data coordinates.\n    '''\n    if isinstance(self.norm, (colors.NoNorm, colors.BoundaryNorm)):\n        b = self._boundaries\n        xn = x\n    else:\n        # Do calculations using normalized coordinates so\n        # as to make the interpolation more accurate.\n        b = self.norm(self._boundaries, clip=False).filled()\n        xn = self.norm(x, clip=False).filled()\n\n    bunique = b\n    yunique = self._y\n    # trim extra b values at beginning and end if they are\n    # not unique.  These are here for extended colorbars, and are not\n    # wanted for the interpolation.\n    if b[0] == b[1]:\n        bunique = bunique[1:]\n        yunique = yunique[1:]\n    if b[-1] == b[-2]:\n        bunique = bunique[:-1]\n        yunique = yunique[:-1]\n\n    z = np.interp(xn, bunique, yunique)\n    return z",
                "def set_alpha(self, alpha):\n    self.alpha = alpha",
                "def remove(self):\n    \"\"\"\n    Remove this colorbar from the figure\n    \"\"\"\n\n    fig = self.ax.figure\n    fig.delaxes(self.ax)",
                "def __init__(self, ax, mappable, **kw):\n    # Ensure the given mappable's norm has appropriate vmin and vmax set\n    # even if mappable.draw has not yet been called.\n    if mappable.get_array() is not None:\n        mappable.autoscale_None()\n\n    self.mappable = mappable\n    kw['cmap'] = cmap = mappable.cmap\n    kw['norm'] = mappable.norm\n\n    if isinstance(mappable, contour.ContourSet):\n        CS = mappable\n        kw['alpha'] = mappable.get_alpha()\n        kw['boundaries'] = CS._levels\n        kw['values'] = CS.cvalues\n        kw['extend'] = CS.extend\n        kw.setdefault('ticks', ticker.FixedLocator(CS.levels, nbins=10))\n        kw['filled'] = CS.filled\n        ColorbarBase.__init__(self, ax, **kw)\n        if not CS.filled:\n            self.add_lines(CS)\n    else:\n        if getattr(cmap, 'colorbar_extend', False) is not False:\n            kw.setdefault('extend', cmap.colorbar_extend)\n\n        if isinstance(mappable, martist.Artist):\n            kw['alpha'] = mappable.get_alpha()\n\n        ColorbarBase.__init__(self, ax, **kw)",
                "def on_mappable_changed(self, mappable):\n    \"\"\"\n    Updates this colorbar to match the mappable's properties.\n\n    Typically this is automatically registered as an event handler\n    by :func:`colorbar_factory` and should not be called manually.\n\n    \"\"\"\n    _log.debug('colorbar mappable changed')\n    self.update_normal(mappable)",
                "def add_lines(self, CS, erase=True):\n    '''\n    Add the lines from a non-filled\n    :class:`~matplotlib.contour.ContourSet` to the colorbar.\n\n    Set *erase* to False if these lines should be added to\n    any pre-existing lines.\n    '''\n    if not isinstance(CS, contour.ContourSet) or CS.filled:\n        raise ValueError('add_lines is only for a ContourSet of lines')\n    tcolors = [c[0] for c in CS.tcolors]\n    tlinewidths = [t[0] for t in CS.tlinewidths]\n    # The following was an attempt to get the colorbar lines\n    # to follow subsequent changes in the contour lines,\n    # but more work is needed: specifically, a careful\n    # look at event sequences, and at how\n    # to make one object track another automatically.\n    #tcolors = [col.get_colors()[0] for col in CS.collections]\n    #tlinewidths = [col.get_linewidth()[0] for lw in CS.collections]\n    ColorbarBase.add_lines(self, CS.levels, tcolors, tlinewidths,\n                           erase=erase)",
                "def update_normal(self, mappable):\n    \"\"\"\n    Update solid patches, lines, etc.\n\n    Unlike `.update_bruteforce`, this does not clear the axes.  This is\n    meant to be called when the norm of the image or contour plot to which\n    this colorbar belongs changes.\n\n    If the norm on the mappable is different than before, this resets the\n    locator and formatter for the axis, so if these have been customized,\n    they will need to be customized again.  However, if the norm only\n    changes values of *vmin*, *vmax* or *cmap* then the old formatter\n    and locator will be preserved.\n    \"\"\"\n\n    _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)\n    self.mappable = mappable\n    self.set_alpha(mappable.get_alpha())\n    self.cmap = mappable.cmap\n    if mappable.norm != self.norm:\n        self.norm = mappable.norm\n        self._reset_locator_formatter_scale()\n\n    self.draw_all()\n    if isinstance(self.mappable, contour.ContourSet):\n        CS = self.mappable\n        if not CS.filled:\n            self.add_lines(CS)\n    self.stale = True",
                "def update_bruteforce(self, mappable):\n    '''\n    Destroy and rebuild the colorbar.  This is\n    intended to become obsolete, and will probably be\n    deprecated and then removed.  It is not called when\n    the pyplot.colorbar function or the Figure.colorbar\n    method are used to create the colorbar.\n\n    '''\n    # We are using an ugly brute-force method: clearing and\n    # redrawing the whole thing.  The problem is that if any\n    # properties have been changed by methods other than the\n    # colorbar methods, those changes will be lost.\n    self.ax.cla()\n    self.locator = None\n    self.formatter = None\n\n    # clearing the axes will delete outline, patch, solids, and lines:\n    self.outline = None\n    self.patch = None\n    self.solids = None\n    self.lines = list()\n    self.dividers = None\n    self.update_normal(mappable)\n    self.draw_all()\n    if isinstance(self.mappable, contour.ContourSet):\n        CS = self.mappable\n        if not CS.filled:\n            self.add_lines(CS)",
                "def remove(self):\n    \"\"\"\n    Remove this colorbar from the figure.  If the colorbar was created with\n    ``use_gridspec=True`` then restore the gridspec to its previous value.\n    \"\"\"\n\n    ColorbarBase.remove(self)\n    self.mappable.callbacksSM.disconnect(self.mappable.colorbar_cid)\n    self.mappable.colorbar = None\n    self.mappable.colorbar_cid = None\n\n    try:\n        ax = self.mappable.axes\n    except AttributeError:\n        return\n\n    try:\n        gs = ax.get_subplotspec().get_gridspec()\n        subplotspec = gs.get_topmost_subplotspec()\n    except AttributeError:\n        # use_gridspec was False\n        pos = ax.get_position(original=True)\n        ax._set_position(pos)\n    else:\n        # use_gridspec was True\n        ax.set_subplotspec(subplotspec)",
                "def __init__(self, ax, mappable, **kw):\n    # we do not want to override the behaviour of solids\n    # so add a new attribute which will be a list of the\n    # colored patches in the colorbar\n    self.solids_patches = []\n    Colorbar.__init__(self, ax, mappable, **kw)",
                "def _add_solids(self, X, Y, C):\n    \"\"\"\n    Draw the colors using :class:`~matplotlib.patches.Patch`;\n    optionally add separators.\n    \"\"\"\n    n_segments = len(C)\n\n    # ensure there are sufficient hatches\n    hatches = self.mappable.hatches * n_segments\n\n    patches = []\n    for i in range(len(X) - 1):\n        val = C[i][0]\n        hatch = hatches[i]\n\n        xy = np.array([[X[i][0], Y[i][0]],\n                       [X[i][1], Y[i][0]],\n                       [X[i + 1][1], Y[i + 1][0]],\n                       [X[i + 1][0], Y[i + 1][1]]])\n\n        if self.orientation == 'horizontal':\n            # if horizontal swap the xs and ys\n            xy = xy[..., ::-1]\n\n        patch = mpatches.PathPatch(mpath.Path(xy),\n                                   facecolor=self.cmap(self.norm(val)),\n                                   hatch=hatch, linewidth=0,\n                                   antialiased=False, alpha=self.alpha)\n        self.ax.add_patch(patch)\n        patches.append(patch)\n\n    if self.solids_patches:\n        for solid in self.solids_patches:\n            solid.remove()\n\n    self.solids_patches = patches\n\n    if self.dividers is not None:\n        self.dividers.remove()\n        self.dividers = None\n\n    if self.drawedges:\n        self.dividers = collections.LineCollection(\n                self._edges(X, Y),\n                colors=(mpl.rcParams['axes.edgecolor'],),\n                linewidths=(0.5 * mpl.rcParams['axes.linewidth'],))\n        self.ax.add_collection(self.dividers)"
            ],
            "inscope_function_signatures": [
                "_set_ticks_on_axis_warn(*args, **kw)",
                "make_axes(parents, location=None, orientation=None, fraction=0.15, shrink=1.0, aspect=20, **kw)",
                "make_axes_gridspec(parent, **kw)",
                "colorbar_factory(cax, mappable, **kwargs)",
                "__init__(self, colorbar)",
                "tick_values(self, vmin, vmax)",
                "__init__(self, colorbar, n=None)",
                "__call__(self)",
                "__init__(self, colorbar, *args, **kwargs)",
                "tick_values(self, vmin, vmax)",
                "set_norm(self, norm)",
                "set_cmap(self, cmap)",
                "set_clim(self, vmin=None, vmax=None)",
                "get_cmap(self)",
                "get_clim(self)",
                "__init__(self, ax, cmap=None, norm=None, alpha=None, values=None, boundaries=None, orientation='vertical', ticklocation='auto', extend='neither', spacing='uniform', ticks=None, format=None, drawedges=False, filled=True, extendfrac=None, extendrect=False, label='')",
                "_extend_lower(self)",
                "_extend_upper(self)",
                "_patch_ax(self)",
                "draw_all(self)",
                "config_axis(self)",
                "_get_ticker_locator_formatter(self)",
                "_use_auto_colorbar_locator(self)",
                "_reset_locator_formatter_scale(self)",
                "update_ticks(self)",
                "set_ticks(self, ticks, update_ticks=True)",
                "get_ticks(self, minor=False)",
                "set_ticklabels(self, ticklabels, update_ticks=True)",
                "minorticks_on(self)",
                "minorticks_off(self)",
                "_config_axes(self, X, Y)",
                "_set_label(self)",
                "set_label(self, label, **kw)",
                "_outline(self, X, Y)",
                "_edges(self, X, Y)",
                "_add_solids(self, X, Y, C)",
                "add_lines(self, levels, colors, linewidths, erase=True)",
                "_ticker(self, locator, formatter)",
                "_process_values(self, b=None)",
                "_find_range(self)",
                "_central_N(self)",
                "_extended_N(self)",
                "_get_extension_lengths(self, frac, automin, automax, default=0.05)",
                "_uniform_y(self, N)",
                "_proportional_y(self)",
                "_mesh(self)",
                "_locate(self, x)",
                "set_alpha(self, alpha)",
                "remove(self)",
                "__init__(self, ax, mappable, **kw)",
                "on_mappable_changed(self, mappable)",
                "add_lines(self, CS, erase=True)",
                "update_normal(self, mappable)",
                "update_bruteforce(self, mappable)",
                "remove(self)",
                "__init__(self, ax, mappable, **kw)",
                "_add_solids(self, X, Y, C)"
            ],
            "variables_in_file": {
                "_log": [
                    769,
                    1188,
                    42,
                    1228,
                    557,
                    599,
                    600,
                    604
                ],
                "logging.getLogger": [
                    42
                ],
                "logging": [
                    42
                ],
                "__name__": [
                    42
                ],
                "make_axes_kw_doc": [
                    1464,
                    44,
                    1308,
                    207
                ],
                "colormap_kw_doc": [
                    64,
                    207
                ],
                "colorbar_doc": [
                    128,
                    209
                ],
                "docstring.interpd.update": [
                    209
                ],
                "docstring.interpd": [
                    209
                ],
                "docstring": [
                    1464,
                    209,
                    1308
                ],
                "cbook._warn_external": [
                    657,
                    215
                ],
                "cbook": [
                    1347,
                    325,
                    333,
                    976,
                    657,
                    341,
                    215,
                    346,
                    317
                ],
                "ticker.MaxNLocator": [
                    537,
                    218
                ],
                "ticker": [
                    522,
                    652,
                    525,
                    653,
                    1166,
                    531,
                    278,
                    537,
                    542,
                    671,
                    546,
                    548,
                    551,
                    682,
                    448,
                    453,
                    840,
                    218,
                    625,
                    251
                ],
                "self._colorbar": [
                    297,
                    266,
                    235,
                    271,
                    272,
                    303,
                    304,
                    244,
                    245
                ],
                "self": [
                    235,
                    244,
                    245,
                    266,
                    267,
                    271,
                    272,
                    297,
                    303,
                    304,
                    344,
                    349,
                    412,
                    413,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    442,
                    444,
                    445,
                    448,
                    450,
                    453,
                    455,
                    456,
                    460,
                    464,
                    469,
                    470,
                    479,
                    483,
                    486,
                    487,
                    489,
                    490,
                    491,
                    492,
                    495,
                    497,
                    502,
                    503,
                    506,
                    515,
                    516,
                    518,
                    519,
                    520,
                    523,
                    524,
                    526,
                    527,
                    528,
                    533,
                    539,
                    541,
                    545,
                    547,
                    549,
                    553,
                    555,
                    556,
                    565,
                    566,
                    567,
                    568,
                    577,
                    578,
                    579,
                    582,
                    583,
                    584,
                    586,
                    587,
                    594,
                    596,
                    597,
                    598,
                    605,
                    625,
                    627,
                    630,
                    631,
                    635,
                    636,
                    638,
                    643,
                    652,
                    653,
                    655,
                    658,
                    665,
                    666,
                    669,
                    673,
                    679,
                    680,
                    688,
                    691,
                    696,
                    697,
                    698,
                    704,
                    705,
                    706,
                    708,
                    709,
                    710,
                    714,
                    716,
                    719,
                    720,
                    722,
                    723,
                    727,
                    728,
                    729,
                    741,
                    751,
                    761,
                    765,
                    766,
                    767,
                    770,
                    773,
                    774,
                    775,
                    776,
                    777,
                    778,
                    779,
                    781,
                    782,
                    785,
                    786,
                    787,
                    799,
                    800,
                    801,
                    807,
                    808,
                    814,
                    815,
                    817,
                    818,
                    820,
                    821,
                    828,
                    829,
                    831,
                    846,
                    847,
                    859,
                    861,
                    862,
                    863,
                    864,
                    865,
                    866,
                    868,
                    870,
                    871,
                    872,
                    873,
                    874,
                    877,
                    879,
                    883,
                    884,
                    886,
                    887,
                    889,
                    890,
                    891,
                    892,
                    894,
                    895,
                    896,
                    898,
                    902,
                    903,
                    904,
                    906,
                    908,
                    909,
                    912,
                    913,
                    914,
                    916,
                    917,
                    918,
                    921,
                    923,
                    926,
                    928,
                    931,
                    933,
                    935,
                    942,
                    943,
                    944,
                    948,
                    949,
                    951,
                    960,
                    961,
                    963,
                    997,
                    1001,
                    1004,
                    1008,
                    1014,
                    1022,
                    1023,
                    1024,
                    1026,
                    1028,
                    1033,
                    1038,
                    1043,
                    1044,
                    1047,
                    1049,
                    1051,
                    1053,
                    1069,
                    1070,
                    1071,
                    1073,
                    1074,
                    1076,
                    1085,
                    1086,
                    1087,
                    1088,
                    1089,
                    1091,
                    1093,
                    1102,
                    1103,
                    1108,
                    1109,
                    1112,
                    1127,
                    1134,
                    1135,
                    1156,
                    1168,
                    1170,
                    1178,
                    1189,
                    1210,
                    1228,
                    1229,
                    1230,
                    1231,
                    1232,
                    1233,
                    1234,
                    1236,
                    1237,
                    1238,
                    1240,
                    1241,
                    1256,
                    1257,
                    1258,
                    1261,
                    1262,
                    1263,
                    1264,
                    1265,
                    1266,
                    1267,
                    1268,
                    1269,
                    1271,
                    1286,
                    1287,
                    1288,
                    1289,
                    1292,
                    1567,
                    1568,
                    1578,
                    1590,
                    1595,
                    1597,
                    1598,
                    1601,
                    1602,
                    1605,
                    1607,
                    1608,
                    1609,
                    1611,
                    1612,
                    1613,
                    1616
                ],
                "colorbar": [
                    297,
                    266,
                    235
                ],
                "nbins": [
                    236,
                    238
                ],
                "steps": [
                    237,
                    238
                ],
                "__init__": [
                    298,
                    268,
                    238
                ],
                "super": [
                    298,
                    268,
                    238,
                    273,
                    305,
                    246
                ],
                "vmin": [
                    301,
                    302,
                    271,
                    303,
                    305,
                    242,
                    243,
                    244,
                    274,
                    246,
                    247,
                    248,
                    275,
                    306,
                    307
                ],
                "vmax": [
                    301,
                    302,
                    272,
                    304,
                    242,
                    243,
                    274,
                    245,
                    246,
                    247,
                    248,
                    275,
                    305,
                    306,
                    308
                ],
                "max": [
                    244,
                    303
                ],
                "self._colorbar.norm.vmin": [
                    244,
                    303,
                    271
                ],
                "self._colorbar.norm": [
                    303,
                    272,
                    271,
                    304,
                    244,
                    245
                ],
                "min": [
                    304,
                    245
                ],
                "self._colorbar.norm.vmax": [
                    272,
                    304,
                    245
                ],
                "ticks": [
                    448,
                    450,
                    847,
                    624,
                    273,
                    305,
                    275,
                    307,
                    308,
                    246,
                    309,
                    248,
                    625,
                    627,
                    850,
                    605,
                    606,
                    447
                ],
                "tick_values": [
                    305,
                    246
                ],
                "rtol": [
                    800,
                    801,
                    274,
                    275,
                    306,
                    307,
                    308,
                    247,
                    248
                ],
                "ticker.AutoMinorLocator": [
                    251
                ],
                "self.ndivs": [
                    267
                ],
                "n": [
                    267
                ],
                "__call__": [
                    273
                ],
                "ticker.LogLocator": [
                    840,
                    278
                ],
                "args": [
                    770,
                    298,
                    762,
                    764
                ],
                "kwargs": [
                    1633,
                    298,
                    1631
                ],
                "np.log10": [
                    306,
                    307,
                    308
                ],
                "np": [
                    1027,
                    900,
                    901,
                    532,
                    1053,
                    803,
                    804,
                    805,
                    806,
                    807,
                    809,
                    811,
                    1072,
                    1585,
                    306,
                    307,
                    308,
                    1077,
                    447,
                    1090,
                    839,
                    974,
                    985,
                    861,
                    1377,
                    866,
                    1123,
                    740,
                    868,
                    742,
                    487,
                    871,
                    873,
                    998,
                    1381,
                    1005,
                    879,
                    624,
                    1009,
                    1012,
                    885,
                    886,
                    1014,
                    764
                ],
                "cbook.deprecated": [
                    325,
                    333,
                    341,
                    346,
                    317
                ],
                "self.cmap": [
                    960,
                    419,
                    1231,
                    884,
                    886,
                    344,
                    921,
                    890,
                    1595,
                    765
                ],
                "self.norm.vmin": [
                    913,
                    916,
                    349,
                    917
                ],
                "self.norm": [
                    1026,
                    902,
                    519,
                    523,
                    524,
                    526,
                    766,
                    528,
                    912,
                    913,
                    914,
                    916,
                    533,
                    917,
                    918,
                    1022,
                    921,
                    923,
                    545,
                    547,
                    420,
                    549,
                    1069,
                    567,
                    568,
                    1595,
                    828,
                    579,
                    1228,
                    1102,
                    1232,
                    1233,
                    1108,
                    1109,
                    349,
                    865,
                    883,
                    894,
                    895
                ],
                "self.norm.vmax": [
                    914,
                    916,
                    349,
                    918
                ],
                "_ColorbarMappableDummy": [
                    352
                ],
                "_slice_dict": [
                    387
                ],
                "slice": [
                    387,
                    388,
                    389,
                    390
                ],
                "n_rasterize": [
                    392
                ],
                "self.ax": [
                    770,
                    785,
                    665,
                    412,
                    679,
                    688,
                    820,
                    1598,
                    582,
                    583,
                    586,
                    587,
                    720,
                    1616,
                    594,
                    722,
                    469,
                    470,
                    1256,
                    1134,
                    495,
                    1135,
                    636
                ],
                "ax": [
                    1292,
                    1168,
                    1297,
                    1427,
                    1428,
                    1301,
                    1302,
                    1430,
                    1432,
                    665,
                    666,
                    1178,
                    412,
                    1305,
                    1568,
                    679,
                    680,
                    1447,
                    1449,
                    688,
                    689,
                    690,
                    692,
                    693,
                    694,
                    695,
                    704,
                    714,
                    594,
                    597,
                    495,
                    498,
                    500,
                    1397,
                    1403,
                    636,
                    638
                ],
                "self._patch_ax": [
                    413
                ],
                "cmap": [
                    419,
                    1157,
                    1172,
                    1173,
                    414,
                    415
                ],
                "cm.get_cmap": [
                    415
                ],
                "cm": [
                    415
                ],
                "norm": [
                    416,
                    417,
                    420,
                    1069,
                    1070,
                    1071,
                    1079,
                    1080,
                    1081,
                    1052,
                    1053
                ],
                "colors.Normalize": [
                    417,
                    1052,
                    567
                ],
                "colors": [
                    519,
                    523,
                    526,
                    528,
                    894,
                    923,
                    1052,
                    417,
                    545,
                    547,
                    803,
                    804,
                    819,
                    567,
                    568,
                    828,
                    579,
                    1102,
                    865,
                    883,
                    1022
                ],
                "self.alpha": [
                    418,
                    1597,
                    1127,
                    767
                ],
                "alpha": [
                    418,
                    1127
                ],
                "self.values": [
                    868,
                    421,
                    870,
                    871,
                    873,
                    862
                ],
                "values": [
                    421
                ],
                "self.boundaries": [
                    422,
                    518,
                    872,
                    879,
                    565,
                    859,
                    828
                ],
                "boundaries": [
                    422
                ],
                "self.extend": [
                    961,
                    963,
                    1028,
                    997,
                    423,
                    1033,
                    460,
                    1004,
                    1038,
                    464,
                    1008,
                    1043,
                    1047,
                    949,
                    951,
                    1049
                ],
                "extend": [
                    424,
                    423
                ],
                "self._inside": [
                    903,
                    424,
                    942,
                    1053,
                    886,
                    1014,
                    1051,
                    541
                ],
                "self._slice_dict": [
                    424
                ],
                "self.spacing": [
                    425,
                    566,
                    1073
                ],
                "spacing": [
                    425
                ],
                "self.orientation": [
                    741,
                    680,
                    808,
                    426,
                    719,
                    751,
                    497,
                    597,
                    1590,
                    761,
                    666,
                    638
                ],
                "orientation": [
                    1345,
                    426,
                    1514,
                    1333,
                    1499,
                    441,
                    1339
                ],
                "self.drawedges": [
                    779,
                    1611,
                    427
                ],
                "drawedges": [
                    427
                ],
                "self.filled": [
                    491,
                    428
                ],
                "filled": [
                    428,
                    1109,
                    1108
                ],
                "self.extendfrac": [
                    1001,
                    1044,
                    429
                ],
                "extendfrac": [
                    429
                ],
                "self.extendrect": [
                    1091,
                    1093,
                    430
                ],
                "extendrect": [
                    430
                ],
                "self.solids": [
                    773,
                    774,
                    775,
                    431,
                    1263,
                    787
                ],
                "self.lines": [
                    814,
                    815,
                    432,
                    817,
                    818,
                    1264
                ],
                "list": [
                    432,
                    752,
                    754,
                    1264,
                    895
                ],
                "self.outline": [
                    704,
                    705,
                    706,
                    1261,
                    433,
                    696,
                    697,
                    698
                ],
                "self.patch": [
                    708,
                    709,
                    710,
                    714,
                    1262,
                    434
                ],
                "self.dividers": [
                    1607,
                    776,
                    777,
                    778,
                    1608,
                    1609,
                    781,
                    1612,
                    1616,
                    785,
                    1265,
                    435
                ],
                "self.locator": [
                    448,
                    577,
                    450,
                    515,
                    1257,
                    555,
                    652,
                    625,
                    627,
                    436
                ],
                "self.formatter": [
                    578,
                    516,
                    453,
                    455,
                    553,
                    1258,
                    556,
                    653,
                    437
                ],
                "self._manual_tick_data_values": [
                    846,
                    635,
                    643,
                    438
                ],
                "ticklocation": [
                    440,
                    441,
                    442
                ],
                "self.ticklocation": [
                    442,
                    502,
                    503
                ],
                "self.set_label": [
                    444
                ],
                "label": [
                    444,
                    727
                ],
                "self._reset_locator_formatter_scale": [
                    1234,
                    445
                ],
                "np.iterable": [
                    1377,
                    803,
                    805,
                    624,
                    447
                ],
                "ticker.FixedLocator": [
                    448,
                    652,
                    525,
                    1166,
                    625,
                    542
                ],
                "len": [
                    448,
                    901,
                    1575,
                    520,
                    873,
                    1581,
                    625,
                    786,
                    948,
                    885
                ],
                "isinstance": [
                    519,
                    1160,
                    523,
                    652,
                    526,
                    528,
                    894,
                    1175,
                    923,
                    545,
                    547,
                    1199,
                    828,
                    579,
                    452,
                    840,
                    1102,
                    975,
                    1237,
                    1629,
                    865,
                    883,
                    1268,
                    1022
                ],
                "format": [
                    452,
                    453,
                    1334,
                    455
                ],
                "str": [
                    975,
                    452,
                    727
                ],
                "ticker.FormatStrFormatter": [
                    453
                ],
                "self.draw_all": [
                    456,
                    1267,
                    1236
                ],
                "self.ax.set_xticks": [
                    469
                ],
                "_set_ticks_on_axis_warn": [
                    469,
                    470
                ],
                "self.ax.set_yticks": [
                    470
                ],
                "self._process_values": [
                    935,
                    479
                ],
                "self._find_range": [
                    483
                ],
                "X": [
                    782,
                    807,
                    809,
                    811,
                    1581,
                    1585,
                    1586,
                    691,
                    1587,
                    1588,
                    1090,
                    1092,
                    1094,
                    1095,
                    1613,
                    736,
                    738,
                    486,
                    490,
                    492,
                    748,
                    752,
                    754,
                    762,
                    764
                ],
                "Y": [
                    782,
                    807,
                    809,
                    811,
                    1585,
                    1586,
                    691,
                    1587,
                    1588,
                    1090,
                    1095,
                    1613,
                    739,
                    486,
                    490,
                    492,
                    752,
                    754,
                    762,
                    764
                ],
                "self._mesh": [
                    486
                ],
                "C": [
                    1575,
                    487,
                    492,
                    1582,
                    762,
                    764
                ],
                "self._values": [
                    866,
                    868,
                    487,
                    520,
                    871,
                    874,
                    909,
                    892,
                    829,
                    863
                ],
                "np.newaxis": [
                    487
                ],
                "self.config_axis": [
                    489
                ],
                "self._config_axes": [
                    490
                ],
                "self._add_solids": [
                    492
                ],
                "long_axis": [
                    666,
                    668,
                    669,
                    671,
                    673,
                    680,
                    682,
                    597,
                    601,
                    602,
                    606,
                    607,
                    608,
                    498,
                    500,
                    502,
                    503,
                    637,
                    639
                ],
                "short_axis": [
                    504,
                    505,
                    498,
                    500
                ],
                "ax.yaxis": [
                    680,
                    498,
                    500,
                    597,
                    666,
                    638
                ],
                "ax.xaxis": [
                    680,
                    498,
                    500,
                    597,
                    666,
                    638
                ],
                "long_axis.set_label_position": [
                    502
                ],
                "long_axis.set_ticks_position": [
                    503
                ],
                "short_axis.set_ticks": [
                    504,
                    505
                ],
                "self._set_label": [
                    729,
                    506
                ],
                "locator": [
                    515,
                    517,
                    522,
                    525,
                    527,
                    531,
                    537,
                    539,
                    542,
                    555,
                    557,
                    558,
                    832,
                    834,
                    835,
                    839,
                    840,
                    596,
                    600,
                    601,
                    605
                ],
                "formatter": [
                    544,
                    833,
                    546,
                    516,
                    548,
                    836,
                    551,
                    837,
                    553,
                    556,
                    558,
                    848,
                    849,
                    596,
                    602,
                    605
                ],
                "colors.NoNorm": [
                    865,
                    519,
                    1102,
                    883,
                    828
                ],
                "nv": [
                    520,
                    521
                ],
                "base": [
                    521,
                    522
                ],
                "int": [
                    521
                ],
                "ticker.IndexLocator": [
                    522
                ],
                "colors.BoundaryNorm": [
                    1102,
                    523,
                    894,
                    1022
                ],
                "b": [
                    897,
                    899,
                    900,
                    901,
                    905,
                    907,
                    524,
                    525,
                    908,
                    921,
                    541,
                    542,
                    927,
                    929,
                    932,
                    934,
                    935,
                    942,
                    943,
                    944,
                    839,
                    842,
                    845,
                    846,
                    847,
                    848,
                    1103,
                    1108,
                    1111,
                    858,
                    859,
                    860,
                    861,
                    1116,
                    1119,
                    873,
                    874,
                    875,
                    876,
                    877,
                    884,
                    885,
                    891,
                    895
                ],
                "self.norm.boundaries": [
                    524,
                    902,
                    895
                ],
                "colors.LogNorm": [
                    545,
                    579,
                    526,
                    568,
                    923
                ],
                "_ColorbarLogLocator": [
                    669,
                    527
                ],
                "colors.SymLogNorm": [
                    528,
                    547
                ],
                "ticker.SymmetricalLogLocator": [
                    531
                ],
                "np.arange": [
                    532,
                    886
                ],
                "self.norm.linthresh": [
                    549,
                    533
                ],
                "mpl.rcParams": [
                    707,
                    780,
                    1614,
                    783,
                    1615,
                    536,
                    699,
                    701
                ],
                "mpl": [
                    707,
                    780,
                    1614,
                    783,
                    1615,
                    536,
                    699,
                    701
                ],
                "_ColorbarAutoLocator": [
                    539
                ],
                "self._boundaries": [
                    864,
                    1024,
                    541,
                    1026,
                    1023,
                    908,
                    877,
                    942,
                    879,
                    1103,
                    948,
                    1108,
                    891,
                    861,
                    863
                ],
                "ticker.LogFormatterSciNotation": [
                    546,
                    548,
                    671
                ],
                "ticker.ScalarFormatter": [
                    551
                ],
                "_log.debug": [
                    769,
                    1188,
                    1228,
                    557,
                    599,
                    600,
                    604
                ],
                "contouring": [
                    569,
                    565
                ],
                "type": [
                    568,
                    567
                ],
                "self.ax.set_xscale": [
                    586,
                    582
                ],
                "self.ax.set_yscale": [
                    587,
                    583
                ],
                "self.minorticks_on": [
                    584
                ],
                "self._get_ticker_locator_formatter": [
                    596
                ],
                "self._use_auto_colorbar_locator": [
                    598
                ],
                "long_axis.set_major_locator": [
                    601
                ],
                "long_axis.set_major_formatter": [
                    602
                ],
                "ticklabels": [
                    653,
                    848,
                    850,
                    605,
                    607
                ],
                "offset_string": [
                    608,
                    849,
                    850,
                    605
                ],
                "self._ticker": [
                    605
                ],
                "long_axis.set_ticks": [
                    606
                ],
                "long_axis.set_ticklabels": [
                    607
                ],
                "set_offset_string": [
                    608
                ],
                "long_axis.get_major_formatter": [
                    608
                ],
                "update_ticks": [
                    629,
                    654
                ],
                "self.update_ticks": [
                    716,
                    630,
                    655
                ],
                "self.stale": [
                    658,
                    723,
                    821,
                    631,
                    1241
                ],
                "long_axis.get_majorticklocs": [
                    639
                ],
                "ticker.FixedFormatter": [
                    653
                ],
                "long_axis.get_scale": [
                    668
                ],
                "long_axis.set_minor_locator": [
                    673,
                    682,
                    669
                ],
                "long_axis.set_minor_formatter": [
                    671
                ],
                "_ColorbarAutoMinorLocator": [
                    673
                ],
                "ticker.NullLocator": [
                    682
                ],
                "ax.set_frame_on": [
                    689
                ],
                "ax.set_navigate": [
                    690
                ],
                "xy": [
                    710,
                    809,
                    811,
                    812,
                    1585,
                    691,
                    693,
                    1592,
                    1594,
                    699
                ],
                "self._outline": [
                    691
                ],
                "ax.ignore_existing_data_limits": [
                    692
                ],
                "ax.update_datalim": [
                    693
                ],
                "ax.set_xlim": [
                    694
                ],
                "ax.dataLim.intervalx": [
                    694
                ],
                "ax.dataLim": [
                    694,
                    695
                ],
                "ax.set_ylim": [
                    695
                ],
                "ax.dataLim.intervaly": [
                    695
                ],
                "self.outline.remove": [
                    697
                ],
                "mpatches.Polygon": [
                    698,
                    710
                ],
                "mpatches": [
                    698,
                    1594,
                    710
                ],
                "ax.add_artist": [
                    704,
                    714
                ],
                "self.outline.set_clip_box": [
                    705
                ],
                "self.outline.set_clip_path": [
                    706
                ],
                "c": [
                    1201,
                    707,
                    710,
                    711
                ],
                "self.patch.remove": [
                    709
                ],
                "self.ax.set_ylabel": [
                    720
                ],
                "self._label": [
                    720,
                    722,
                    727
                ],
                "self._labelkw": [
                    720,
                    722,
                    728
                ],
                "self.ax.set_xlabel": [
                    722
                ],
                "kw": [
                    770,
                    1157,
                    1158,
                    1162,
                    1163,
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1550,
                    1173,
                    1176,
                    1178,
                    1568,
                    1461,
                    728,
                    1371,
                    1372,
                    1499,
                    1374,
                    1375,
                    1500,
                    1515,
                    1394,
                    1528,
                    765
                ],
                "N": [
                    736,
                    737,
                    960,
                    962,
                    964,
                    965,
                    998,
                    1000,
                    748,
                    1005,
                    752,
                    1009,
                    754,
                    1012,
                    1014
                ],
                "X.shape": [
                    736,
                    748
                ],
                "ii": [
                    737,
                    738,
                    739
                ],
                "x": [
                    738,
                    1090,
                    740,
                    742,
                    1072,
                    1104,
                    1109,
                    1080,
                    1086
                ],
                "X.T.reshape": [
                    738
                ],
                "X.T": [
                    738
                ],
                "y": [
                    1024,
                    1026,
                    1027,
                    1030,
                    1031,
                    1032,
                    1035,
                    1036,
                    1037,
                    1040,
                    1041,
                    1042,
                    1048,
                    1050,
                    1051,
                    1053,
                    1054,
                    799,
                    801,
                    802,
                    807,
                    1074,
                    1076,
                    1079,
                    1087,
                    1089,
                    1090,
                    739,
                    740,
                    742,
                    998,
                    1005,
                    1006,
                    1007,
                    1009,
                    1010,
                    1012,
                    1013,
                    1014,
                    1015,
                    1023
                ],
                "Y.T.reshape": [
                    739
                ],
                "Y.T": [
                    739
                ],
                "np.column_stack": [
                    740,
                    742
                ],
                "zip": [
                    752,
                    754
                ],
                "i": [
                    1581,
                    1582,
                    1583,
                    752,
                    1585,
                    754,
                    1586,
                    1587,
                    1588
                ],
                "range": [
                    752,
                    754,
                    1581
                ],
                "np.transpose": [
                    764
                ],
                "dict": [
                    765
                ],
                "col": [
                    770,
                    775,
                    812,
                    818,
                    819,
                    820
                ],
                "self.ax.pcolormesh": [
                    770
                ],
                "self.solids.remove": [
                    774
                ],
                "self.dividers.remove": [
                    1608,
                    777
                ],
                "linewidths": [
                    805,
                    806,
                    780,
                    812,
                    784
                ],
                "collections.LineCollection": [
                    812,
                    781,
                    1612
                ],
                "collections": [
                    812,
                    781,
                    1612
                ],
                "self._edges": [
                    1613,
                    782
                ],
                "self.ax.add_collection": [
                    1616,
                    785,
                    820
                ],
                "self._y": [
                    800,
                    801,
                    1089,
                    807,
                    786,
                    1112
                ],
                "self.n_rasterize": [
                    786
                ],
                "self.solids.set_rasterized": [
                    787
                ],
                "self._locate": [
                    847,
                    799
                ],
                "levels": [
                    799
                ],
                "igood": [
                    801,
                    802,
                    804,
                    806
                ],
                "np.asarray": [
                    804,
                    861,
                    806
                ],
                "np.meshgrid": [
                    1090,
                    807
                ],
                "np.stack": [
                    809,
                    811
                ],
                "erase": [
                    1211,
                    814
                ],
                "lc": [
                    816,
                    815
                ],
                "lc.remove": [
                    816
                ],
                "self.lines.append": [
                    818
                ],
                "col.set_color": [
                    819
                ],
                "intv": [
                    832,
                    833,
                    834,
                    835,
                    836,
                    837,
                    842,
                    844,
                    845,
                    829,
                    831
                ],
                "self.vmin": [
                    1088,
                    1070,
                    943,
                    1087,
                    1085,
                    1086,
                    831
                ],
                "self.vmax": [
                    944,
                    1085,
                    1071,
                    831
                ],
                "locator.create_dummy_axis": [
                    832
                ],
                "formatter.create_dummy_axis": [
                    833
                ],
                "locator.set_view_interval": [
                    834
                ],
                "locator.set_data_interval": [
                    835
                ],
                "formatter.set_view_interval": [
                    836
                ],
                "formatter.set_data_interval": [
                    837
                ],
                "np.array": [
                    900,
                    868,
                    871,
                    839,
                    974,
                    879,
                    1072,
                    1585,
                    1077
                ],
                "eps": [
                    841,
                    842,
                    844,
                    845
                ],
                "formatter.format_ticks": [
                    848
                ],
                "formatter.get_offset": [
                    849
                ],
                "float": [
                    861
                ],
                "astype": [
                    866
                ],
                "np.int16": [
                    866,
                    885,
                    886
                ],
                "np.zeros": [
                    901,
                    873,
                    1005,
                    1009,
                    1012,
                    885
                ],
                "self._uniform_y": [
                    921,
                    1074,
                    884
                ],
                "self.cmap.N": [
                    960,
                    884,
                    886,
                    921,
                    890
                ],
                "v": [
                    901,
                    903,
                    905,
                    907,
                    909,
                    885,
                    886,
                    888,
                    890,
                    892
                ],
                "self._extend_lower": [
                    896,
                    931,
                    1091,
                    904,
                    887,
                    926
                ],
                "self._extend_upper": [
                    928,
                    898,
                    933,
                    1093,
                    906,
                    889
                ],
                "bi": [
                    902,
                    903
                ],
                "self.norm.scaled": [
                    912
                ],
                "mtransforms.nonsingular": [
                    916
                ],
                "mtransforms": [
                    1424,
                    1402,
                    916,
                    1429
                ],
                "self.norm.inverse": [
                    921
                ],
                "colors.PowerNorm": [
                    923
                ],
                "nb": [
                    952,
                    953,
                    948,
                    950
                ],
                "extendlength": [
                    1001,
                    974,
                    1006,
                    1007,
                    978,
                    1010,
                    1044,
                    1013,
                    982,
                    1048,
                    985,
                    1050,
                    990
                ],
                "default": [
                    974
                ],
                "frac": [
                    976,
                    979,
                    982,
                    975
                ],
                "cbook._check_in_list": [
                    976,
                    1347
                ],
                "frac.lower": [
                    976
                ],
                "automin": [
                    1031,
                    1000,
                    1002,
                    1036,
                    1041,
                    978,
                    1045
                ],
                "automax": [
                    1000,
                    1032,
                    1002,
                    1037,
                    978,
                    1042,
                    1045
                ],
                "any": [
                    985,
                    1630
                ],
                "np.isnan": [
                    985
                ],
                "ValueError": [
                    1082,
                    1200,
                    1398,
                    986,
                    987,
                    989
                ],
                "TypeError": [
                    987,
                    1334
                ],
                "np.linspace": [
                    998,
                    1014
                ],
                "self._get_extension_lengths": [
                    1001,
                    1044
                ],
                "self._boundaries.copy": [
                    1026
                ],
                "np.ma.filled": [
                    1027,
                    1053
                ],
                "np.ma": [
                    1027,
                    1053
                ],
                "np.nan": [
                    1027,
                    1053
                ],
                "clen": [
                    1030,
                    1031,
                    1032,
                    1035,
                    1036,
                    1037,
                    1040,
                    1041,
                    1042
                ],
                "yi": [
                    1051,
                    1052,
                    1053
                ],
                "copy.copy": [
                    1069
                ],
                "copy": [
                    1069
                ],
                "norm.vmin": [
                    1070
                ],
                "norm.vmax": [
                    1071
                ],
                "self._central_N": [
                    1074
                ],
                "self._proportional_y": [
                    1076
                ],
                "xmid": [
                    1088,
                    1092,
                    1094,
                    1077,
                    1081
                ],
                "norm.inverse": [
                    1080,
                    1081,
                    1079
                ],
                "dv": [
                    1088,
                    1085,
                    1086,
                    1087
                ],
                "xn": [
                    1104,
                    1123,
                    1109
                ],
                "bunique": [
                    1120,
                    1123,
                    1117,
                    1111
                ],
                "yunique": [
                    1112,
                    1121,
                    1123,
                    1118
                ],
                "z": [
                    1123,
                    1124
                ],
                "np.interp": [
                    1123
                ],
                "fig": [
                    1547,
                    1548,
                    1134,
                    1135,
                    1396,
                    1397,
                    1434
                ],
                "self.ax.figure": [
                    1134
                ],
                "fig.delaxes": [
                    1135
                ],
                "ColorbarBase": [
                    1286,
                    1178,
                    1168,
                    1138,
                    1210
                ],
                "mappable.get_array": [
                    1153
                ],
                "mappable": [
                    1153,
                    1154,
                    1156,
                    1157,
                    1158,
                    1160,
                    1161,
                    1162,
                    1175,
                    1176,
                    1568,
                    1189,
                    1228,
                    1229,
                    1230,
                    1231,
                    1232,
                    1233,
                    1629,
                    1630,
                    1631,
                    1633,
                    1635,
                    1636,
                    1637,
                    1266
                ],
                "mappable.autoscale_None": [
                    1154
                ],
                "self.mappable": [
                    1156,
                    1287,
                    1288,
                    1289,
                    1578,
                    1292,
                    1229,
                    1268,
                    1237,
                    1238,
                    1269
                ],
                "mappable.cmap": [
                    1157,
                    1231
                ],
                "mappable.norm": [
                    1232,
                    1233,
                    1228,
                    1158
                ],
                "contour.ContourSet": [
                    1160,
                    1199,
                    1268,
                    1237,
                    1629
                ],
                "contour": [
                    1160,
                    1199,
                    1268,
                    1237,
                    1629
                ],
                "CS": [
                    1161,
                    1163,
                    1164,
                    1165,
                    1166,
                    1167,
                    1199,
                    1169,
                    1170,
                    1201,
                    1202,
                    1269,
                    1238,
                    1239,
                    1240,
                    1270,
                    1210,
                    1271
                ],
                "mappable.get_alpha": [
                    1176,
                    1162,
                    1230
                ],
                "CS._levels": [
                    1163
                ],
                "CS.cvalues": [
                    1164
                ],
                "CS.extend": [
                    1165
                ],
                "kw.setdefault": [
                    1499,
                    1173,
                    1166
                ],
                "CS.levels": [
                    1210,
                    1166
                ],
                "CS.filled": [
                    1199,
                    1167,
                    1169,
                    1270,
                    1239
                ],
                "ColorbarBase.__init__": [
                    1168,
                    1178
                ],
                "self.add_lines": [
                    1240,
                    1170,
                    1271
                ],
                "getattr": [
                    1172
                ],
                "cmap.colorbar_extend": [
                    1173
                ],
                "martist.Artist": [
                    1175
                ],
                "martist": [
                    1175
                ],
                "self.update_normal": [
                    1266,
                    1189
                ],
                "tcolors": [
                    1201,
                    1210
                ],
                "CS.tcolors": [
                    1201
                ],
                "tlinewidths": [
                    1210,
                    1202
                ],
                "t": [
                    1202
                ],
                "CS.tlinewidths": [
                    1202
                ],
                "ColorbarBase.add_lines": [
                    1210
                ],
                "self.set_alpha": [
                    1230
                ],
                "self.ax.cla": [
                    1256
                ],
                "ColorbarBase.remove": [
                    1286
                ],
                "self.mappable.callbacksSM.disconnect": [
                    1287
                ],
                "self.mappable.callbacksSM": [
                    1287
                ],
                "self.mappable.colorbar_cid": [
                    1289,
                    1287
                ],
                "self.mappable.colorbar": [
                    1288
                ],
                "self.mappable.axes": [
                    1292
                ],
                "AttributeError": [
                    1387,
                    1299,
                    1293
                ],
                "gs": [
                    1542,
                    1511,
                    1512,
                    1385,
                    1386,
                    1517,
                    1297,
                    1298,
                    1522,
                    1530,
                    1535
                ],
                "get_gridspec": [
                    1297,
                    1511,
                    1385
                ],
                "ax.get_subplotspec": [
                    1297
                ],
                "subplotspec": [
                    1305,
                    1298
                ],
                "gs.get_topmost_subplotspec": [
                    1298
                ],
                "pos": [
                    1301,
                    1302
                ],
                "ax.get_position": [
                    1403,
                    1428,
                    1301
                ],
                "ax._set_position": [
                    1430,
                    1302
                ],
                "ax.set_subplotspec": [
                    1305
                ],
                "locations": [
                    1336,
                    1347,
                    1332
                ],
                "location": [
                    1344,
                    1345,
                    1347,
                    1413,
                    1449,
                    1456,
                    1333,
                    1372,
                    1367,
                    1339,
                    1340,
                    1406,
                    1407
                ],
                "join": [
                    1336
                ],
                "default_location_settings": [
                    1349,
                    1367
                ],
                "loc_settings": [
                    1391,
                    1367,
                    1371,
                    1374,
                    1375
                ],
                "anchor": [
                    1411,
                    1443,
                    1539,
                    1417,
                    1549,
                    1525,
                    1374
                ],
                "kw.pop": [
                    1515,
                    1394,
                    1528,
                    1374,
                    1375
                ],
                "parent_anchor": [
                    1431,
                    1432,
                    1375
                ],
                "parents_iterable": [
                    1377,
                    1445
                ],
                "parents": [
                    1377,
                    1381,
                    1447,
                    1385,
                    1456,
                    1427,
                    1396,
                    1397,
                    1403
                ],
                "ravel": [
                    1381
                ],
                "np.atleast_1d": [
                    1381
                ],
                "get_subplotspec": [
                    1385
                ],
                "using_constrained_layout": [
                    1392,
                    1386,
                    1388,
                    1438
                ],
                "gs._layoutbox": [
                    1512,
                    1386
                ],
                "pad0": [
                    1393,
                    1394,
                    1391
                ],
                "pad": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1449,
                    1515,
                    1516,
                    1456,
                    1520,
                    1394,
                    1528,
                    1529,
                    1533
                ],
                "get_figure": [
                    1396
                ],
                "all": [
                    1397
                ],
                "ax.get_figure": [
                    1397
                ],
                "parents_bbox": [
                    1424,
                    1402,
                    1405
                ],
                "mtransforms.Bbox.union": [
                    1402
                ],
                "mtransforms.Bbox": [
                    1402,
                    1429
                ],
                "frozen": [
                    1403
                ],
                "pb": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1405
                ],
                "pbcb": [
                    1408,
                    1410,
                    1411,
                    1414,
                    1416,
                    1417,
                    1434
                ],
                "_": [
                    1408,
                    1410,
                    1416,
                    1414
                ],
                "pb1": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1424
                ],
                "pb.splitx": [
                    1408,
                    1410
                ],
                "fraction": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1520,
                    1533,
                    1502
                ],
                "anchored": [
                    1417,
                    1411
                ],
                "pbcb.shrunk": [
                    1417,
                    1411
                ],
                "shrink": [
                    1505,
                    1506,
                    1411,
                    1417,
                    1449,
                    1456
                ],
                "pb.splity": [
                    1416,
                    1414
                ],
                "aspect": [
                    1538,
                    1443,
                    1449,
                    1420,
                    1549,
                    1456
                ],
                "shrinking_trans": [
                    1424,
                    1428
                ],
                "mtransforms.BboxTransform": [
                    1424
                ],
                "new_posn": [
                    1428,
                    1429,
                    1430
                ],
                "shrinking_trans.transform": [
                    1428
                ],
                "ax.set_anchor": [
                    1432
                ],
                "cax": [
                    1633,
                    1443,
                    1449,
                    1548,
                    1549,
                    1550,
                    1456,
                    1458,
                    1459,
                    1461,
                    1434,
                    1631
                ],
                "fig.add_axes": [
                    1434
                ],
                "lb": [
                    1440,
                    1458,
                    1448,
                    1455
                ],
                "lbpos": [
                    1448,
                    1441,
                    1459,
                    1455
                ],
                "cax.set_aspect": [
                    1443,
                    1549
                ],
                "constrained_layout.layoutcolorbarsingle": [
                    1448
                ],
                "constrained_layout": [
                    1448,
                    1455
                ],
                "constrained_layout.layoutcolorbargridspec": [
                    1455
                ],
                "cax._layoutbox": [
                    1458
                ],
                "cax._poslayoutbox": [
                    1459
                ],
                "docstring.Substitution": [
                    1464,
                    1308
                ],
                "x1": [
                    1520,
                    1533,
                    1502
                ],
                "pad_s": [
                    1505,
                    1506
                ],
                "wh_ratios": [
                    1537,
                    1506,
                    1524
                ],
                "parent.get_subplotspec": [
                    1531,
                    1518,
                    1511
                ],
                "parent": [
                    1542,
                    1543,
                    1511,
                    1544,
                    1545,
                    1547,
                    1518,
                    1531
                ],
                "layoutbox.nonetree": [
                    1512
                ],
                "layoutbox": [
                    1512
                ],
                "gs_from_subplotspec": [
                    1513,
                    1517,
                    1521,
                    1530,
                    1534
                ],
                "gridspec.GridSpecFromSubplotSpec": [
                    1513
                ],
                "gridspec": [
                    1513
                ],
                "wh_space": [
                    1529,
                    1516,
                    1532,
                    1519
                ],
                "gs2": [
                    1521,
                    1548,
                    1534
                ],
                "panchor": [
                    1545,
                    1540,
                    1526
                ],
                "parent.set_subplotspec": [
                    1542
                ],
                "parent.update_params": [
                    1543
                ],
                "parent._set_position": [
                    1544
                ],
                "parent.figbox": [
                    1544
                ],
                "parent.set_anchor": [
                    1545
                ],
                "parent.get_figure": [
                    1547
                ],
                "fig.add_subplot": [
                    1548
                ],
                "Colorbar": [
                    1568,
                    1553,
                    1633
                ],
                "self.solids_patches": [
                    1601,
                    1602,
                    1605,
                    1567
                ],
                "Colorbar.__init__": [
                    1568
                ],
                "n_segments": [
                    1578,
                    1575
                ],
                "hatches": [
                    1578,
                    1583
                ],
                "self.mappable.hatches": [
                    1578
                ],
                "patches": [
                    1580,
                    1605,
                    1599
                ],
                "val": [
                    1595,
                    1582
                ],
                "hatch": [
                    1596,
                    1630,
                    1583
                ],
                "patch": [
                    1594,
                    1598,
                    1599
                ],
                "mpatches.PathPatch": [
                    1594
                ],
                "mpath.Path": [
                    1594
                ],
                "mpath": [
                    1594
                ],
                "self.ax.add_patch": [
                    1598
                ],
                "patches.append": [
                    1599
                ],
                "solid": [
                    1602,
                    1603
                ],
                "solid.remove": [
                    1603
                ],
                "mappable.hatches": [
                    1630
                ],
                "cb": [
                    1633,
                    1635,
                    1636,
                    1639,
                    1631
                ],
                "ColorbarPatch": [
                    1631
                ],
                "cid": [
                    1635,
                    1637
                ],
                "mappable.callbacksSM.connect": [
                    1635
                ],
                "mappable.callbacksSM": [
                    1635
                ],
                "cb.on_mappable_changed": [
                    1635
                ],
                "mappable.colorbar": [
                    1636
                ],
                "mappable.colorbar_cid": [
                    1637
                ]
            },
            "filtered_variables_in_file": {
                "_log": [
                    769,
                    1188,
                    42,
                    1228,
                    557,
                    599,
                    600,
                    604
                ],
                "logging.getLogger": [
                    42
                ],
                "logging": [
                    42
                ],
                "make_axes_kw_doc": [
                    1464,
                    44,
                    1308,
                    207
                ],
                "colormap_kw_doc": [
                    64,
                    207
                ],
                "colorbar_doc": [
                    128,
                    209
                ],
                "docstring.interpd.update": [
                    209
                ],
                "docstring.interpd": [
                    209
                ],
                "docstring": [
                    1464,
                    209,
                    1308
                ],
                "cbook._warn_external": [
                    657,
                    215
                ],
                "cbook": [
                    1347,
                    325,
                    333,
                    976,
                    657,
                    341,
                    215,
                    346,
                    317
                ],
                "ticker.MaxNLocator": [
                    537,
                    218
                ],
                "ticker": [
                    522,
                    652,
                    525,
                    653,
                    1166,
                    531,
                    278,
                    537,
                    542,
                    671,
                    546,
                    548,
                    551,
                    682,
                    448,
                    453,
                    840,
                    218,
                    625,
                    251
                ],
                "self._colorbar": [
                    297,
                    266,
                    235,
                    271,
                    272,
                    303,
                    304,
                    244,
                    245
                ],
                "self": [
                    235,
                    244,
                    245,
                    266,
                    267,
                    271,
                    272,
                    297,
                    303,
                    304,
                    344,
                    349,
                    412,
                    413,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    442,
                    444,
                    445,
                    448,
                    450,
                    453,
                    455,
                    456,
                    460,
                    464,
                    469,
                    470,
                    479,
                    483,
                    486,
                    487,
                    489,
                    490,
                    491,
                    492,
                    495,
                    497,
                    502,
                    503,
                    506,
                    515,
                    516,
                    518,
                    519,
                    520,
                    523,
                    524,
                    526,
                    527,
                    528,
                    533,
                    539,
                    541,
                    545,
                    547,
                    549,
                    553,
                    555,
                    556,
                    565,
                    566,
                    567,
                    568,
                    577,
                    578,
                    579,
                    582,
                    583,
                    584,
                    586,
                    587,
                    594,
                    596,
                    597,
                    598,
                    605,
                    625,
                    627,
                    630,
                    631,
                    635,
                    636,
                    638,
                    643,
                    652,
                    653,
                    655,
                    658,
                    665,
                    666,
                    669,
                    673,
                    679,
                    680,
                    688,
                    691,
                    696,
                    697,
                    698,
                    704,
                    705,
                    706,
                    708,
                    709,
                    710,
                    714,
                    716,
                    719,
                    720,
                    722,
                    723,
                    727,
                    728,
                    729,
                    741,
                    751,
                    761,
                    765,
                    766,
                    767,
                    770,
                    773,
                    774,
                    775,
                    776,
                    777,
                    778,
                    779,
                    781,
                    782,
                    785,
                    786,
                    787,
                    799,
                    800,
                    801,
                    807,
                    808,
                    814,
                    815,
                    817,
                    818,
                    820,
                    821,
                    828,
                    829,
                    831,
                    846,
                    847,
                    859,
                    861,
                    862,
                    863,
                    864,
                    865,
                    866,
                    868,
                    870,
                    871,
                    872,
                    873,
                    874,
                    877,
                    879,
                    883,
                    884,
                    886,
                    887,
                    889,
                    890,
                    891,
                    892,
                    894,
                    895,
                    896,
                    898,
                    902,
                    903,
                    904,
                    906,
                    908,
                    909,
                    912,
                    913,
                    914,
                    916,
                    917,
                    918,
                    921,
                    923,
                    926,
                    928,
                    931,
                    933,
                    935,
                    942,
                    943,
                    944,
                    948,
                    949,
                    951,
                    960,
                    961,
                    963,
                    997,
                    1001,
                    1004,
                    1008,
                    1014,
                    1022,
                    1023,
                    1024,
                    1026,
                    1028,
                    1033,
                    1038,
                    1043,
                    1044,
                    1047,
                    1049,
                    1051,
                    1053,
                    1069,
                    1070,
                    1071,
                    1073,
                    1074,
                    1076,
                    1085,
                    1086,
                    1087,
                    1088,
                    1089,
                    1091,
                    1093,
                    1102,
                    1103,
                    1108,
                    1109,
                    1112,
                    1127,
                    1134,
                    1135,
                    1156,
                    1168,
                    1170,
                    1178,
                    1189,
                    1210,
                    1228,
                    1229,
                    1230,
                    1231,
                    1232,
                    1233,
                    1234,
                    1236,
                    1237,
                    1238,
                    1240,
                    1241,
                    1256,
                    1257,
                    1258,
                    1261,
                    1262,
                    1263,
                    1264,
                    1265,
                    1266,
                    1267,
                    1268,
                    1269,
                    1271,
                    1286,
                    1287,
                    1288,
                    1289,
                    1292,
                    1567,
                    1568,
                    1578,
                    1590,
                    1595,
                    1597,
                    1598,
                    1601,
                    1602,
                    1605,
                    1607,
                    1608,
                    1609,
                    1611,
                    1612,
                    1613,
                    1616
                ],
                "colorbar": [
                    297,
                    266,
                    235
                ],
                "nbins": [
                    236,
                    238
                ],
                "steps": [
                    237,
                    238
                ],
                "__init__": [
                    298,
                    268,
                    238
                ],
                "vmin": [
                    301,
                    302,
                    271,
                    303,
                    305,
                    242,
                    243,
                    244,
                    274,
                    246,
                    247,
                    248,
                    275,
                    306,
                    307
                ],
                "vmax": [
                    301,
                    302,
                    272,
                    304,
                    242,
                    243,
                    274,
                    245,
                    246,
                    247,
                    248,
                    275,
                    305,
                    306,
                    308
                ],
                "self._colorbar.norm.vmin": [
                    244,
                    303,
                    271
                ],
                "self._colorbar.norm": [
                    303,
                    272,
                    271,
                    304,
                    244,
                    245
                ],
                "self._colorbar.norm.vmax": [
                    272,
                    304,
                    245
                ],
                "ticks": [
                    448,
                    450,
                    847,
                    624,
                    273,
                    305,
                    275,
                    307,
                    308,
                    246,
                    309,
                    248,
                    625,
                    627,
                    850,
                    605,
                    606,
                    447
                ],
                "tick_values": [
                    305,
                    246
                ],
                "rtol": [
                    800,
                    801,
                    274,
                    275,
                    306,
                    307,
                    308,
                    247,
                    248
                ],
                "ticker.AutoMinorLocator": [
                    251
                ],
                "self.ndivs": [
                    267
                ],
                "n": [
                    267
                ],
                "__call__": [
                    273
                ],
                "ticker.LogLocator": [
                    840,
                    278
                ],
                "args": [
                    770,
                    298,
                    762,
                    764
                ],
                "kwargs": [
                    1633,
                    298,
                    1631
                ],
                "np.log10": [
                    306,
                    307,
                    308
                ],
                "np": [
                    1027,
                    900,
                    901,
                    532,
                    1053,
                    803,
                    804,
                    805,
                    806,
                    807,
                    809,
                    811,
                    1072,
                    1585,
                    306,
                    307,
                    308,
                    1077,
                    447,
                    1090,
                    839,
                    974,
                    985,
                    861,
                    1377,
                    866,
                    1123,
                    740,
                    868,
                    742,
                    487,
                    871,
                    873,
                    998,
                    1381,
                    1005,
                    879,
                    624,
                    1009,
                    1012,
                    885,
                    886,
                    1014,
                    764
                ],
                "cbook.deprecated": [
                    325,
                    333,
                    341,
                    346,
                    317
                ],
                "self.cmap": [
                    960,
                    419,
                    1231,
                    884,
                    886,
                    344,
                    921,
                    890,
                    1595,
                    765
                ],
                "self.norm.vmin": [
                    913,
                    916,
                    349,
                    917
                ],
                "self.norm": [
                    1026,
                    902,
                    519,
                    523,
                    524,
                    526,
                    766,
                    528,
                    912,
                    913,
                    914,
                    916,
                    533,
                    917,
                    918,
                    1022,
                    921,
                    923,
                    545,
                    547,
                    420,
                    549,
                    1069,
                    567,
                    568,
                    1595,
                    828,
                    579,
                    1228,
                    1102,
                    1232,
                    1233,
                    1108,
                    1109,
                    349,
                    865,
                    883,
                    894,
                    895
                ],
                "self.norm.vmax": [
                    914,
                    916,
                    349,
                    918
                ],
                "_ColorbarMappableDummy": [
                    352
                ],
                "_slice_dict": [
                    387
                ],
                "n_rasterize": [
                    392
                ],
                "self.ax": [
                    770,
                    785,
                    665,
                    412,
                    679,
                    688,
                    820,
                    1598,
                    582,
                    583,
                    586,
                    587,
                    720,
                    1616,
                    594,
                    722,
                    469,
                    470,
                    1256,
                    1134,
                    495,
                    1135,
                    636
                ],
                "ax": [
                    1292,
                    1168,
                    1297,
                    1427,
                    1428,
                    1301,
                    1302,
                    1430,
                    1432,
                    665,
                    666,
                    1178,
                    412,
                    1305,
                    1568,
                    679,
                    680,
                    1447,
                    1449,
                    688,
                    689,
                    690,
                    692,
                    693,
                    694,
                    695,
                    704,
                    714,
                    594,
                    597,
                    495,
                    498,
                    500,
                    1397,
                    1403,
                    636,
                    638
                ],
                "self._patch_ax": [
                    413
                ],
                "cmap": [
                    419,
                    1157,
                    1172,
                    1173,
                    414,
                    415
                ],
                "cm.get_cmap": [
                    415
                ],
                "cm": [
                    415
                ],
                "norm": [
                    416,
                    417,
                    420,
                    1069,
                    1070,
                    1071,
                    1079,
                    1080,
                    1081,
                    1052,
                    1053
                ],
                "colors.Normalize": [
                    417,
                    1052,
                    567
                ],
                "colors": [
                    519,
                    523,
                    526,
                    528,
                    894,
                    923,
                    1052,
                    417,
                    545,
                    547,
                    803,
                    804,
                    819,
                    567,
                    568,
                    828,
                    579,
                    1102,
                    865,
                    883,
                    1022
                ],
                "self.alpha": [
                    418,
                    1597,
                    1127,
                    767
                ],
                "alpha": [
                    418,
                    1127
                ],
                "self.values": [
                    868,
                    421,
                    870,
                    871,
                    873,
                    862
                ],
                "values": [
                    421
                ],
                "self.boundaries": [
                    422,
                    518,
                    872,
                    879,
                    565,
                    859,
                    828
                ],
                "boundaries": [
                    422
                ],
                "self.extend": [
                    961,
                    963,
                    1028,
                    997,
                    423,
                    1033,
                    460,
                    1004,
                    1038,
                    464,
                    1008,
                    1043,
                    1047,
                    949,
                    951,
                    1049
                ],
                "extend": [
                    424,
                    423
                ],
                "self._inside": [
                    903,
                    424,
                    942,
                    1053,
                    886,
                    1014,
                    1051,
                    541
                ],
                "self._slice_dict": [
                    424
                ],
                "self.spacing": [
                    425,
                    566,
                    1073
                ],
                "spacing": [
                    425
                ],
                "self.orientation": [
                    741,
                    680,
                    808,
                    426,
                    719,
                    751,
                    497,
                    597,
                    1590,
                    761,
                    666,
                    638
                ],
                "orientation": [
                    1345,
                    426,
                    1514,
                    1333,
                    1499,
                    441,
                    1339
                ],
                "self.drawedges": [
                    779,
                    1611,
                    427
                ],
                "drawedges": [
                    427
                ],
                "self.filled": [
                    491,
                    428
                ],
                "filled": [
                    428,
                    1109,
                    1108
                ],
                "self.extendfrac": [
                    1001,
                    1044,
                    429
                ],
                "extendfrac": [
                    429
                ],
                "self.extendrect": [
                    1091,
                    1093,
                    430
                ],
                "extendrect": [
                    430
                ],
                "self.solids": [
                    773,
                    774,
                    775,
                    431,
                    1263,
                    787
                ],
                "self.lines": [
                    814,
                    815,
                    432,
                    817,
                    818,
                    1264
                ],
                "self.outline": [
                    704,
                    705,
                    706,
                    1261,
                    433,
                    696,
                    697,
                    698
                ],
                "self.patch": [
                    708,
                    709,
                    710,
                    714,
                    1262,
                    434
                ],
                "self.dividers": [
                    1607,
                    776,
                    777,
                    778,
                    1608,
                    1609,
                    781,
                    1612,
                    1616,
                    785,
                    1265,
                    435
                ],
                "self.locator": [
                    448,
                    577,
                    450,
                    515,
                    1257,
                    555,
                    652,
                    625,
                    627,
                    436
                ],
                "self.formatter": [
                    578,
                    516,
                    453,
                    455,
                    553,
                    1258,
                    556,
                    653,
                    437
                ],
                "self._manual_tick_data_values": [
                    846,
                    635,
                    643,
                    438
                ],
                "ticklocation": [
                    440,
                    441,
                    442
                ],
                "self.ticklocation": [
                    442,
                    502,
                    503
                ],
                "self.set_label": [
                    444
                ],
                "label": [
                    444,
                    727
                ],
                "self._reset_locator_formatter_scale": [
                    1234,
                    445
                ],
                "np.iterable": [
                    1377,
                    803,
                    805,
                    624,
                    447
                ],
                "ticker.FixedLocator": [
                    448,
                    652,
                    525,
                    1166,
                    625,
                    542
                ],
                "ticker.FormatStrFormatter": [
                    453
                ],
                "self.draw_all": [
                    456,
                    1267,
                    1236
                ],
                "self.ax.set_xticks": [
                    469
                ],
                "_set_ticks_on_axis_warn": [
                    469,
                    470
                ],
                "self.ax.set_yticks": [
                    470
                ],
                "self._process_values": [
                    935,
                    479
                ],
                "self._find_range": [
                    483
                ],
                "X": [
                    782,
                    807,
                    809,
                    811,
                    1581,
                    1585,
                    1586,
                    691,
                    1587,
                    1588,
                    1090,
                    1092,
                    1094,
                    1095,
                    1613,
                    736,
                    738,
                    486,
                    490,
                    492,
                    748,
                    752,
                    754,
                    762,
                    764
                ],
                "Y": [
                    782,
                    807,
                    809,
                    811,
                    1585,
                    1586,
                    691,
                    1587,
                    1588,
                    1090,
                    1095,
                    1613,
                    739,
                    486,
                    490,
                    492,
                    752,
                    754,
                    762,
                    764
                ],
                "self._mesh": [
                    486
                ],
                "C": [
                    1575,
                    487,
                    492,
                    1582,
                    762,
                    764
                ],
                "self._values": [
                    866,
                    868,
                    487,
                    520,
                    871,
                    874,
                    909,
                    892,
                    829,
                    863
                ],
                "np.newaxis": [
                    487
                ],
                "self.config_axis": [
                    489
                ],
                "self._config_axes": [
                    490
                ],
                "self._add_solids": [
                    492
                ],
                "long_axis": [
                    666,
                    668,
                    669,
                    671,
                    673,
                    680,
                    682,
                    597,
                    601,
                    602,
                    606,
                    607,
                    608,
                    498,
                    500,
                    502,
                    503,
                    637,
                    639
                ],
                "short_axis": [
                    504,
                    505,
                    498,
                    500
                ],
                "ax.yaxis": [
                    680,
                    498,
                    500,
                    597,
                    666,
                    638
                ],
                "ax.xaxis": [
                    680,
                    498,
                    500,
                    597,
                    666,
                    638
                ],
                "long_axis.set_label_position": [
                    502
                ],
                "long_axis.set_ticks_position": [
                    503
                ],
                "short_axis.set_ticks": [
                    504,
                    505
                ],
                "self._set_label": [
                    729,
                    506
                ],
                "locator": [
                    515,
                    517,
                    522,
                    525,
                    527,
                    531,
                    537,
                    539,
                    542,
                    555,
                    557,
                    558,
                    832,
                    834,
                    835,
                    839,
                    840,
                    596,
                    600,
                    601,
                    605
                ],
                "formatter": [
                    544,
                    833,
                    546,
                    516,
                    548,
                    836,
                    551,
                    837,
                    553,
                    556,
                    558,
                    848,
                    849,
                    596,
                    602,
                    605
                ],
                "colors.NoNorm": [
                    865,
                    519,
                    1102,
                    883,
                    828
                ],
                "nv": [
                    520,
                    521
                ],
                "base": [
                    521,
                    522
                ],
                "ticker.IndexLocator": [
                    522
                ],
                "colors.BoundaryNorm": [
                    1102,
                    523,
                    894,
                    1022
                ],
                "b": [
                    897,
                    899,
                    900,
                    901,
                    905,
                    907,
                    524,
                    525,
                    908,
                    921,
                    541,
                    542,
                    927,
                    929,
                    932,
                    934,
                    935,
                    942,
                    943,
                    944,
                    839,
                    842,
                    845,
                    846,
                    847,
                    848,
                    1103,
                    1108,
                    1111,
                    858,
                    859,
                    860,
                    861,
                    1116,
                    1119,
                    873,
                    874,
                    875,
                    876,
                    877,
                    884,
                    885,
                    891,
                    895
                ],
                "self.norm.boundaries": [
                    524,
                    902,
                    895
                ],
                "colors.LogNorm": [
                    545,
                    579,
                    526,
                    568,
                    923
                ],
                "_ColorbarLogLocator": [
                    669,
                    527
                ],
                "colors.SymLogNorm": [
                    528,
                    547
                ],
                "ticker.SymmetricalLogLocator": [
                    531
                ],
                "np.arange": [
                    532,
                    886
                ],
                "self.norm.linthresh": [
                    549,
                    533
                ],
                "mpl.rcParams": [
                    707,
                    780,
                    1614,
                    783,
                    1615,
                    536,
                    699,
                    701
                ],
                "mpl": [
                    707,
                    780,
                    1614,
                    783,
                    1615,
                    536,
                    699,
                    701
                ],
                "_ColorbarAutoLocator": [
                    539
                ],
                "self._boundaries": [
                    864,
                    1024,
                    541,
                    1026,
                    1023,
                    908,
                    877,
                    942,
                    879,
                    1103,
                    948,
                    1108,
                    891,
                    861,
                    863
                ],
                "ticker.LogFormatterSciNotation": [
                    546,
                    548,
                    671
                ],
                "ticker.ScalarFormatter": [
                    551
                ],
                "_log.debug": [
                    769,
                    1188,
                    1228,
                    557,
                    599,
                    600,
                    604
                ],
                "contouring": [
                    569,
                    565
                ],
                "self.ax.set_xscale": [
                    586,
                    582
                ],
                "self.ax.set_yscale": [
                    587,
                    583
                ],
                "self.minorticks_on": [
                    584
                ],
                "self._get_ticker_locator_formatter": [
                    596
                ],
                "self._use_auto_colorbar_locator": [
                    598
                ],
                "long_axis.set_major_locator": [
                    601
                ],
                "long_axis.set_major_formatter": [
                    602
                ],
                "ticklabels": [
                    653,
                    848,
                    850,
                    605,
                    607
                ],
                "offset_string": [
                    608,
                    849,
                    850,
                    605
                ],
                "self._ticker": [
                    605
                ],
                "long_axis.set_ticks": [
                    606
                ],
                "long_axis.set_ticklabels": [
                    607
                ],
                "set_offset_string": [
                    608
                ],
                "long_axis.get_major_formatter": [
                    608
                ],
                "update_ticks": [
                    629,
                    654
                ],
                "self.update_ticks": [
                    716,
                    630,
                    655
                ],
                "self.stale": [
                    658,
                    723,
                    821,
                    631,
                    1241
                ],
                "long_axis.get_majorticklocs": [
                    639
                ],
                "ticker.FixedFormatter": [
                    653
                ],
                "long_axis.get_scale": [
                    668
                ],
                "long_axis.set_minor_locator": [
                    673,
                    682,
                    669
                ],
                "long_axis.set_minor_formatter": [
                    671
                ],
                "_ColorbarAutoMinorLocator": [
                    673
                ],
                "ticker.NullLocator": [
                    682
                ],
                "ax.set_frame_on": [
                    689
                ],
                "ax.set_navigate": [
                    690
                ],
                "xy": [
                    710,
                    809,
                    811,
                    812,
                    1585,
                    691,
                    693,
                    1592,
                    1594,
                    699
                ],
                "self._outline": [
                    691
                ],
                "ax.ignore_existing_data_limits": [
                    692
                ],
                "ax.update_datalim": [
                    693
                ],
                "ax.set_xlim": [
                    694
                ],
                "ax.dataLim.intervalx": [
                    694
                ],
                "ax.dataLim": [
                    694,
                    695
                ],
                "ax.set_ylim": [
                    695
                ],
                "ax.dataLim.intervaly": [
                    695
                ],
                "self.outline.remove": [
                    697
                ],
                "mpatches.Polygon": [
                    698,
                    710
                ],
                "mpatches": [
                    698,
                    1594,
                    710
                ],
                "ax.add_artist": [
                    704,
                    714
                ],
                "self.outline.set_clip_box": [
                    705
                ],
                "self.outline.set_clip_path": [
                    706
                ],
                "c": [
                    1201,
                    707,
                    710,
                    711
                ],
                "self.patch.remove": [
                    709
                ],
                "self.ax.set_ylabel": [
                    720
                ],
                "self._label": [
                    720,
                    722,
                    727
                ],
                "self._labelkw": [
                    720,
                    722,
                    728
                ],
                "self.ax.set_xlabel": [
                    722
                ],
                "kw": [
                    770,
                    1157,
                    1158,
                    1162,
                    1163,
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1550,
                    1173,
                    1176,
                    1178,
                    1568,
                    1461,
                    728,
                    1371,
                    1372,
                    1499,
                    1374,
                    1375,
                    1500,
                    1515,
                    1394,
                    1528,
                    765
                ],
                "N": [
                    736,
                    737,
                    960,
                    962,
                    964,
                    965,
                    998,
                    1000,
                    748,
                    1005,
                    752,
                    1009,
                    754,
                    1012,
                    1014
                ],
                "X.shape": [
                    736,
                    748
                ],
                "ii": [
                    737,
                    738,
                    739
                ],
                "x": [
                    738,
                    1090,
                    740,
                    742,
                    1072,
                    1104,
                    1109,
                    1080,
                    1086
                ],
                "X.T.reshape": [
                    738
                ],
                "X.T": [
                    738
                ],
                "y": [
                    1024,
                    1026,
                    1027,
                    1030,
                    1031,
                    1032,
                    1035,
                    1036,
                    1037,
                    1040,
                    1041,
                    1042,
                    1048,
                    1050,
                    1051,
                    1053,
                    1054,
                    799,
                    801,
                    802,
                    807,
                    1074,
                    1076,
                    1079,
                    1087,
                    1089,
                    1090,
                    739,
                    740,
                    742,
                    998,
                    1005,
                    1006,
                    1007,
                    1009,
                    1010,
                    1012,
                    1013,
                    1014,
                    1015,
                    1023
                ],
                "Y.T.reshape": [
                    739
                ],
                "Y.T": [
                    739
                ],
                "np.column_stack": [
                    740,
                    742
                ],
                "i": [
                    1581,
                    1582,
                    1583,
                    752,
                    1585,
                    754,
                    1586,
                    1587,
                    1588
                ],
                "np.transpose": [
                    764
                ],
                "col": [
                    770,
                    775,
                    812,
                    818,
                    819,
                    820
                ],
                "self.ax.pcolormesh": [
                    770
                ],
                "self.solids.remove": [
                    774
                ],
                "self.dividers.remove": [
                    1608,
                    777
                ],
                "linewidths": [
                    805,
                    806,
                    780,
                    812,
                    784
                ],
                "collections.LineCollection": [
                    812,
                    781,
                    1612
                ],
                "collections": [
                    812,
                    781,
                    1612
                ],
                "self._edges": [
                    1613,
                    782
                ],
                "self.ax.add_collection": [
                    1616,
                    785,
                    820
                ],
                "self._y": [
                    800,
                    801,
                    1089,
                    807,
                    786,
                    1112
                ],
                "self.n_rasterize": [
                    786
                ],
                "self.solids.set_rasterized": [
                    787
                ],
                "self._locate": [
                    847,
                    799
                ],
                "levels": [
                    799
                ],
                "igood": [
                    801,
                    802,
                    804,
                    806
                ],
                "np.asarray": [
                    804,
                    861,
                    806
                ],
                "np.meshgrid": [
                    1090,
                    807
                ],
                "np.stack": [
                    809,
                    811
                ],
                "erase": [
                    1211,
                    814
                ],
                "lc": [
                    816,
                    815
                ],
                "lc.remove": [
                    816
                ],
                "self.lines.append": [
                    818
                ],
                "col.set_color": [
                    819
                ],
                "intv": [
                    832,
                    833,
                    834,
                    835,
                    836,
                    837,
                    842,
                    844,
                    845,
                    829,
                    831
                ],
                "self.vmin": [
                    1088,
                    1070,
                    943,
                    1087,
                    1085,
                    1086,
                    831
                ],
                "self.vmax": [
                    944,
                    1085,
                    1071,
                    831
                ],
                "locator.create_dummy_axis": [
                    832
                ],
                "formatter.create_dummy_axis": [
                    833
                ],
                "locator.set_view_interval": [
                    834
                ],
                "locator.set_data_interval": [
                    835
                ],
                "formatter.set_view_interval": [
                    836
                ],
                "formatter.set_data_interval": [
                    837
                ],
                "np.array": [
                    900,
                    868,
                    871,
                    839,
                    974,
                    879,
                    1072,
                    1585,
                    1077
                ],
                "eps": [
                    841,
                    842,
                    844,
                    845
                ],
                "formatter.format_ticks": [
                    848
                ],
                "formatter.get_offset": [
                    849
                ],
                "astype": [
                    866
                ],
                "np.int16": [
                    866,
                    885,
                    886
                ],
                "np.zeros": [
                    901,
                    873,
                    1005,
                    1009,
                    1012,
                    885
                ],
                "self._uniform_y": [
                    921,
                    1074,
                    884
                ],
                "self.cmap.N": [
                    960,
                    884,
                    886,
                    921,
                    890
                ],
                "v": [
                    901,
                    903,
                    905,
                    907,
                    909,
                    885,
                    886,
                    888,
                    890,
                    892
                ],
                "self._extend_lower": [
                    896,
                    931,
                    1091,
                    904,
                    887,
                    926
                ],
                "self._extend_upper": [
                    928,
                    898,
                    933,
                    1093,
                    906,
                    889
                ],
                "bi": [
                    902,
                    903
                ],
                "self.norm.scaled": [
                    912
                ],
                "mtransforms.nonsingular": [
                    916
                ],
                "mtransforms": [
                    1424,
                    1402,
                    916,
                    1429
                ],
                "self.norm.inverse": [
                    921
                ],
                "colors.PowerNorm": [
                    923
                ],
                "nb": [
                    952,
                    953,
                    948,
                    950
                ],
                "extendlength": [
                    1001,
                    974,
                    1006,
                    1007,
                    978,
                    1010,
                    1044,
                    1013,
                    982,
                    1048,
                    985,
                    1050,
                    990
                ],
                "default": [
                    974
                ],
                "frac": [
                    976,
                    979,
                    982,
                    975
                ],
                "cbook._check_in_list": [
                    976,
                    1347
                ],
                "frac.lower": [
                    976
                ],
                "automin": [
                    1031,
                    1000,
                    1002,
                    1036,
                    1041,
                    978,
                    1045
                ],
                "automax": [
                    1000,
                    1032,
                    1002,
                    1037,
                    978,
                    1042,
                    1045
                ],
                "np.isnan": [
                    985
                ],
                "np.linspace": [
                    998,
                    1014
                ],
                "self._get_extension_lengths": [
                    1001,
                    1044
                ],
                "self._boundaries.copy": [
                    1026
                ],
                "np.ma.filled": [
                    1027,
                    1053
                ],
                "np.ma": [
                    1027,
                    1053
                ],
                "np.nan": [
                    1027,
                    1053
                ],
                "clen": [
                    1030,
                    1031,
                    1032,
                    1035,
                    1036,
                    1037,
                    1040,
                    1041,
                    1042
                ],
                "yi": [
                    1051,
                    1052,
                    1053
                ],
                "copy.copy": [
                    1069
                ],
                "copy": [
                    1069
                ],
                "norm.vmin": [
                    1070
                ],
                "norm.vmax": [
                    1071
                ],
                "self._central_N": [
                    1074
                ],
                "self._proportional_y": [
                    1076
                ],
                "xmid": [
                    1088,
                    1092,
                    1094,
                    1077,
                    1081
                ],
                "norm.inverse": [
                    1080,
                    1081,
                    1079
                ],
                "dv": [
                    1088,
                    1085,
                    1086,
                    1087
                ],
                "xn": [
                    1104,
                    1123,
                    1109
                ],
                "bunique": [
                    1120,
                    1123,
                    1117,
                    1111
                ],
                "yunique": [
                    1112,
                    1121,
                    1123,
                    1118
                ],
                "z": [
                    1123,
                    1124
                ],
                "np.interp": [
                    1123
                ],
                "fig": [
                    1547,
                    1548,
                    1134,
                    1135,
                    1396,
                    1397,
                    1434
                ],
                "self.ax.figure": [
                    1134
                ],
                "fig.delaxes": [
                    1135
                ],
                "ColorbarBase": [
                    1286,
                    1178,
                    1168,
                    1138,
                    1210
                ],
                "mappable.get_array": [
                    1153
                ],
                "mappable": [
                    1153,
                    1154,
                    1156,
                    1157,
                    1158,
                    1160,
                    1161,
                    1162,
                    1175,
                    1176,
                    1568,
                    1189,
                    1228,
                    1229,
                    1230,
                    1231,
                    1232,
                    1233,
                    1629,
                    1630,
                    1631,
                    1633,
                    1635,
                    1636,
                    1637,
                    1266
                ],
                "mappable.autoscale_None": [
                    1154
                ],
                "self.mappable": [
                    1156,
                    1287,
                    1288,
                    1289,
                    1578,
                    1292,
                    1229,
                    1268,
                    1237,
                    1238,
                    1269
                ],
                "mappable.cmap": [
                    1157,
                    1231
                ],
                "mappable.norm": [
                    1232,
                    1233,
                    1228,
                    1158
                ],
                "contour.ContourSet": [
                    1160,
                    1199,
                    1268,
                    1237,
                    1629
                ],
                "contour": [
                    1160,
                    1199,
                    1268,
                    1237,
                    1629
                ],
                "CS": [
                    1161,
                    1163,
                    1164,
                    1165,
                    1166,
                    1167,
                    1199,
                    1169,
                    1170,
                    1201,
                    1202,
                    1269,
                    1238,
                    1239,
                    1240,
                    1270,
                    1210,
                    1271
                ],
                "mappable.get_alpha": [
                    1176,
                    1162,
                    1230
                ],
                "CS._levels": [
                    1163
                ],
                "CS.cvalues": [
                    1164
                ],
                "CS.extend": [
                    1165
                ],
                "kw.setdefault": [
                    1499,
                    1173,
                    1166
                ],
                "CS.levels": [
                    1210,
                    1166
                ],
                "CS.filled": [
                    1199,
                    1167,
                    1169,
                    1270,
                    1239
                ],
                "ColorbarBase.__init__": [
                    1168,
                    1178
                ],
                "self.add_lines": [
                    1240,
                    1170,
                    1271
                ],
                "cmap.colorbar_extend": [
                    1173
                ],
                "martist.Artist": [
                    1175
                ],
                "martist": [
                    1175
                ],
                "self.update_normal": [
                    1266,
                    1189
                ],
                "tcolors": [
                    1201,
                    1210
                ],
                "CS.tcolors": [
                    1201
                ],
                "tlinewidths": [
                    1210,
                    1202
                ],
                "t": [
                    1202
                ],
                "CS.tlinewidths": [
                    1202
                ],
                "ColorbarBase.add_lines": [
                    1210
                ],
                "self.set_alpha": [
                    1230
                ],
                "self.ax.cla": [
                    1256
                ],
                "ColorbarBase.remove": [
                    1286
                ],
                "self.mappable.callbacksSM.disconnect": [
                    1287
                ],
                "self.mappable.callbacksSM": [
                    1287
                ],
                "self.mappable.colorbar_cid": [
                    1289,
                    1287
                ],
                "self.mappable.colorbar": [
                    1288
                ],
                "self.mappable.axes": [
                    1292
                ],
                "gs": [
                    1542,
                    1511,
                    1512,
                    1385,
                    1386,
                    1517,
                    1297,
                    1298,
                    1522,
                    1530,
                    1535
                ],
                "get_gridspec": [
                    1297,
                    1511,
                    1385
                ],
                "ax.get_subplotspec": [
                    1297
                ],
                "subplotspec": [
                    1305,
                    1298
                ],
                "gs.get_topmost_subplotspec": [
                    1298
                ],
                "pos": [
                    1301,
                    1302
                ],
                "ax.get_position": [
                    1403,
                    1428,
                    1301
                ],
                "ax._set_position": [
                    1430,
                    1302
                ],
                "ax.set_subplotspec": [
                    1305
                ],
                "locations": [
                    1336,
                    1347,
                    1332
                ],
                "location": [
                    1344,
                    1345,
                    1347,
                    1413,
                    1449,
                    1456,
                    1333,
                    1372,
                    1367,
                    1339,
                    1340,
                    1406,
                    1407
                ],
                "join": [
                    1336
                ],
                "default_location_settings": [
                    1349,
                    1367
                ],
                "loc_settings": [
                    1391,
                    1367,
                    1371,
                    1374,
                    1375
                ],
                "anchor": [
                    1411,
                    1443,
                    1539,
                    1417,
                    1549,
                    1525,
                    1374
                ],
                "kw.pop": [
                    1515,
                    1394,
                    1528,
                    1374,
                    1375
                ],
                "parent_anchor": [
                    1431,
                    1432,
                    1375
                ],
                "parents_iterable": [
                    1377,
                    1445
                ],
                "parents": [
                    1377,
                    1381,
                    1447,
                    1385,
                    1456,
                    1427,
                    1396,
                    1397,
                    1403
                ],
                "ravel": [
                    1381
                ],
                "np.atleast_1d": [
                    1381
                ],
                "get_subplotspec": [
                    1385
                ],
                "using_constrained_layout": [
                    1392,
                    1386,
                    1388,
                    1438
                ],
                "gs._layoutbox": [
                    1512,
                    1386
                ],
                "pad0": [
                    1393,
                    1394,
                    1391
                ],
                "pad": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1449,
                    1515,
                    1516,
                    1456,
                    1520,
                    1394,
                    1528,
                    1529,
                    1533
                ],
                "get_figure": [
                    1396
                ],
                "ax.get_figure": [
                    1397
                ],
                "parents_bbox": [
                    1424,
                    1402,
                    1405
                ],
                "mtransforms.Bbox.union": [
                    1402
                ],
                "mtransforms.Bbox": [
                    1402,
                    1429
                ],
                "frozen": [
                    1403
                ],
                "pb": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1405
                ],
                "pbcb": [
                    1408,
                    1410,
                    1411,
                    1414,
                    1416,
                    1417,
                    1434
                ],
                "_": [
                    1408,
                    1410,
                    1416,
                    1414
                ],
                "pb1": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1424
                ],
                "pb.splitx": [
                    1408,
                    1410
                ],
                "fraction": [
                    1408,
                    1410,
                    1414,
                    1416,
                    1520,
                    1533,
                    1502
                ],
                "anchored": [
                    1417,
                    1411
                ],
                "pbcb.shrunk": [
                    1417,
                    1411
                ],
                "shrink": [
                    1505,
                    1506,
                    1411,
                    1417,
                    1449,
                    1456
                ],
                "pb.splity": [
                    1416,
                    1414
                ],
                "aspect": [
                    1538,
                    1443,
                    1449,
                    1420,
                    1549,
                    1456
                ],
                "shrinking_trans": [
                    1424,
                    1428
                ],
                "mtransforms.BboxTransform": [
                    1424
                ],
                "new_posn": [
                    1428,
                    1429,
                    1430
                ],
                "shrinking_trans.transform": [
                    1428
                ],
                "ax.set_anchor": [
                    1432
                ],
                "cax": [
                    1633,
                    1443,
                    1449,
                    1548,
                    1549,
                    1550,
                    1456,
                    1458,
                    1459,
                    1461,
                    1434,
                    1631
                ],
                "fig.add_axes": [
                    1434
                ],
                "lb": [
                    1440,
                    1458,
                    1448,
                    1455
                ],
                "lbpos": [
                    1448,
                    1441,
                    1459,
                    1455
                ],
                "cax.set_aspect": [
                    1443,
                    1549
                ],
                "constrained_layout.layoutcolorbarsingle": [
                    1448
                ],
                "constrained_layout": [
                    1448,
                    1455
                ],
                "constrained_layout.layoutcolorbargridspec": [
                    1455
                ],
                "cax._layoutbox": [
                    1458
                ],
                "cax._poslayoutbox": [
                    1459
                ],
                "docstring.Substitution": [
                    1464,
                    1308
                ],
                "x1": [
                    1520,
                    1533,
                    1502
                ],
                "pad_s": [
                    1505,
                    1506
                ],
                "wh_ratios": [
                    1537,
                    1506,
                    1524
                ],
                "parent.get_subplotspec": [
                    1531,
                    1518,
                    1511
                ],
                "parent": [
                    1542,
                    1543,
                    1511,
                    1544,
                    1545,
                    1547,
                    1518,
                    1531
                ],
                "layoutbox.nonetree": [
                    1512
                ],
                "layoutbox": [
                    1512
                ],
                "gs_from_subplotspec": [
                    1513,
                    1517,
                    1521,
                    1530,
                    1534
                ],
                "gridspec.GridSpecFromSubplotSpec": [
                    1513
                ],
                "gridspec": [
                    1513
                ],
                "wh_space": [
                    1529,
                    1516,
                    1532,
                    1519
                ],
                "gs2": [
                    1521,
                    1548,
                    1534
                ],
                "panchor": [
                    1545,
                    1540,
                    1526
                ],
                "parent.set_subplotspec": [
                    1542
                ],
                "parent.update_params": [
                    1543
                ],
                "parent._set_position": [
                    1544
                ],
                "parent.figbox": [
                    1544
                ],
                "parent.set_anchor": [
                    1545
                ],
                "parent.get_figure": [
                    1547
                ],
                "fig.add_subplot": [
                    1548
                ],
                "Colorbar": [
                    1568,
                    1553,
                    1633
                ],
                "self.solids_patches": [
                    1601,
                    1602,
                    1605,
                    1567
                ],
                "Colorbar.__init__": [
                    1568
                ],
                "n_segments": [
                    1578,
                    1575
                ],
                "hatches": [
                    1578,
                    1583
                ],
                "self.mappable.hatches": [
                    1578
                ],
                "patches": [
                    1580,
                    1605,
                    1599
                ],
                "val": [
                    1595,
                    1582
                ],
                "hatch": [
                    1596,
                    1630,
                    1583
                ],
                "patch": [
                    1594,
                    1598,
                    1599
                ],
                "mpatches.PathPatch": [
                    1594
                ],
                "mpath.Path": [
                    1594
                ],
                "mpath": [
                    1594
                ],
                "self.ax.add_patch": [
                    1598
                ],
                "patches.append": [
                    1599
                ],
                "solid": [
                    1602,
                    1603
                ],
                "solid.remove": [
                    1603
                ],
                "mappable.hatches": [
                    1630
                ],
                "cb": [
                    1633,
                    1635,
                    1636,
                    1639,
                    1631
                ],
                "ColorbarPatch": [
                    1631
                ],
                "cid": [
                    1635,
                    1637
                ],
                "mappable.callbacksSM.connect": [
                    1635
                ],
                "mappable.callbacksSM": [
                    1635
                ],
                "cb.on_mappable_changed": [
                    1635
                ],
                "mappable.colorbar": [
                    1636
                ],
                "mappable.colorbar_cid": [
                    1637
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_27/lib/matplotlib/tests/test_colorbar.py",
                "test_function": "test_colorbar_label",
                "test_function_code": "def test_colorbar_label():\n    \"\"\"\n    Test the label parameter. It should just be mapped to the xlabel/ylabel of\n    the axes, depending on the orientation.\n    \"\"\"\n    fig, ax = plt.subplots()\n    im = ax.imshow([[1, 2], [3, 4]])\n    cbar = fig.colorbar(im, label='cbar')\n    assert cbar.ax.get_ylabel() == 'cbar'\n    cbar.set_label(None)\n    assert cbar.ax.get_ylabel() == ''\n    cbar.set_label('cbar 2')\n    assert cbar.ax.get_ylabel() == 'cbar 2'\n\n    cbar2 = fig.colorbar(im, label=None)\n    assert cbar2.ax.get_ylabel() == ''\n\n    cbar3 = fig.colorbar(im, orientation='horizontal', label='horizontal cbar')\n    assert cbar3.ax.get_xlabel() == 'horizontal cbar'",
                "test_error": "AssertionError: assert 'None' == ''\n  + None",
                "full_test_error": "def test_colorbar_label():\n        \"\"\"\n        Test the label parameter. It should just be mapped to the xlabel/ylabel of\n        the axes, depending on the orientation.\n        \"\"\"\n        fig, ax = plt.subplots()\n        im = ax.imshow([[1, 2], [3, 4]])\n        cbar = fig.colorbar(im, label='cbar')\n        assert cbar.ax.get_ylabel() == 'cbar'\n        cbar.set_label(None)\n>       assert cbar.ax.get_ylabel() == ''\nE       AssertionError: assert 'None' == ''\nE         + None\n\nlib/matplotlib/tests/test_colorbar.py:574: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}