{
    "matplotlib:9": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_9/lib/matplotlib/projections/polar.py": {
            "buggy_functions": [
                {
                    "function_name": "draw",
                    "function_code": "@cbook._delete_parameter(\"3.3\", \"args\")\n@cbook._delete_parameter(\"3.3\", \"kwargs\")\ndef draw(self, renderer, *args, **kwargs):\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    rmin, rmax = ((self._realViewLim.intervaly - self.get_rorigin()) *\n                  self.get_rsign())\n    if isinstance(self.patch, mpatches.Wedge):\n        # Backwards-compatibility: Any subclassed Axes might override the\n        # patch to not be the Wedge that PolarAxes uses.\n        center = self.transWedge.transform((0.5, 0.5))\n        self.patch.set_center(center)\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n\n        edge, _ = self.transWedge.transform((1, 0))\n        radius = edge - center[0]\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n\n        inner_width = radius - width\n        inner = self.spines.get('inner', None)\n        if inner:\n            inner.set_visible(inner_width != 0.0)\n\n    visible = not _is_full_circle_deg(thetamin, thetamax)\n    # For backwards compatibility, any subclassed Axes might override the\n    # spines to not include start/end that PolarAxes uses.\n    start = self.spines.get('start', None)\n    end = self.spines.get('end', None)\n    if start:\n        start.set_visible(visible)\n    if end:\n        end.set_visible(visible)\n    if visible:\n        yaxis_text_transform = self._yaxis_transform\n    else:\n        yaxis_text_transform = self._r_label_position + self.transData\n    if self._yaxis_text_transform != yaxis_text_transform:\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n\n    Axes.draw(self, renderer, *args, **kwargs)\n",
                    "decorators": [
                        "cbook._delete_parameter('3.3', 'args')",
                        "cbook._delete_parameter('3.3', 'kwargs')"
                    ],
                    "docstring": null,
                    "start_line": 949,
                    "end_line": 994,
                    "variables": {
                        "thetamin": [
                            962,
                            976,
                            952,
                            953,
                            954
                        ],
                        "thetamax": [
                            963,
                            976,
                            952,
                            953,
                            954
                        ],
                        "np.rad2deg": [
                            952
                        ],
                        "np": [
                            952
                        ],
                        "self._realViewLim.intervalx": [
                            952
                        ],
                        "self._realViewLim": [
                            952,
                            955
                        ],
                        "self": [
                            952,
                            955,
                            956,
                            957,
                            960,
                            961,
                            962,
                            963,
                            965,
                            968,
                            969,
                            972,
                            979,
                            980,
                            986,
                            988,
                            989,
                            990,
                            991,
                            992,
                            994
                        ],
                        "rmin": [
                            955,
                            967
                        ],
                        "rmax": [
                            955,
                            967
                        ],
                        "self._realViewLim.intervaly": [
                            955
                        ],
                        "self.get_rorigin": [
                            955
                        ],
                        "self.get_rsign": [
                            956
                        ],
                        "isinstance": [
                            957
                        ],
                        "self.patch": [
                            992,
                            961,
                            962,
                            963,
                            968,
                            969,
                            957
                        ],
                        "mpatches.Wedge": [
                            957
                        ],
                        "mpatches": [
                            957
                        ],
                        "center": [
                            960,
                            961,
                            966
                        ],
                        "self.transWedge.transform": [
                            960,
                            965
                        ],
                        "self.transWedge": [
                            960,
                            965
                        ],
                        "self.patch.set_center": [
                            961
                        ],
                        "self.patch.set_theta1": [
                            962
                        ],
                        "self.patch.set_theta2": [
                            963
                        ],
                        "edge": [
                            965,
                            966
                        ],
                        "_": [
                            965
                        ],
                        "radius": [
                            968,
                            971,
                            966,
                            967
                        ],
                        "width": [
                            969,
                            971,
                            967
                        ],
                        "min": [
                            967
                        ],
                        "self.patch.set_radius": [
                            968
                        ],
                        "self.patch.set_width": [
                            969
                        ],
                        "inner_width": [
                            971,
                            974
                        ],
                        "inner": [
                            972,
                            973,
                            974
                        ],
                        "self.spines.get": [
                            980,
                            979,
                            972
                        ],
                        "self.spines": [
                            980,
                            979,
                            972
                        ],
                        "inner.set_visible": [
                            974
                        ],
                        "visible": [
                            976,
                            985,
                            982,
                            984
                        ],
                        "_is_full_circle_deg": [
                            976
                        ],
                        "start": [
                            979,
                            981,
                            982
                        ],
                        "end": [
                            984,
                            980,
                            983
                        ],
                        "start.set_visible": [
                            982
                        ],
                        "end.set_visible": [
                            984
                        ],
                        "yaxis_text_transform": [
                            986,
                            988,
                            989,
                            990
                        ],
                        "self._yaxis_transform": [
                            986
                        ],
                        "self._r_label_position": [
                            988
                        ],
                        "self.transData": [
                            988
                        ],
                        "self._yaxis_text_transform": [
                            989,
                            990
                        ],
                        "self._yaxis_text_transform.set": [
                            990
                        ],
                        "self.yaxis.reset_ticks": [
                            991
                        ],
                        "self.yaxis": [
                            992,
                            991
                        ],
                        "self.yaxis.set_clip_path": [
                            992
                        ],
                        "Axes.draw": [
                            994
                        ],
                        "Axes": [
                            994
                        ],
                        "renderer": [
                            994
                        ],
                        "args": [
                            994
                        ],
                        "kwargs": [
                            994
                        ],
                        "cbook._delete_parameter": [
                            949,
                            950
                        ],
                        "cbook": [
                            949,
                            950
                        ]
                    },
                    "filtered_variables": {
                        "thetamin": [
                            962,
                            976,
                            952,
                            953,
                            954
                        ],
                        "thetamax": [
                            963,
                            976,
                            952,
                            953,
                            954
                        ],
                        "np.rad2deg": [
                            952
                        ],
                        "np": [
                            952
                        ],
                        "self._realViewLim.intervalx": [
                            952
                        ],
                        "self._realViewLim": [
                            952,
                            955
                        ],
                        "self": [
                            952,
                            955,
                            956,
                            957,
                            960,
                            961,
                            962,
                            963,
                            965,
                            968,
                            969,
                            972,
                            979,
                            980,
                            986,
                            988,
                            989,
                            990,
                            991,
                            992,
                            994
                        ],
                        "rmin": [
                            955,
                            967
                        ],
                        "rmax": [
                            955,
                            967
                        ],
                        "self._realViewLim.intervaly": [
                            955
                        ],
                        "self.get_rorigin": [
                            955
                        ],
                        "self.get_rsign": [
                            956
                        ],
                        "self.patch": [
                            992,
                            961,
                            962,
                            963,
                            968,
                            969,
                            957
                        ],
                        "mpatches.Wedge": [
                            957
                        ],
                        "mpatches": [
                            957
                        ],
                        "center": [
                            960,
                            961,
                            966
                        ],
                        "self.transWedge.transform": [
                            960,
                            965
                        ],
                        "self.transWedge": [
                            960,
                            965
                        ],
                        "self.patch.set_center": [
                            961
                        ],
                        "self.patch.set_theta1": [
                            962
                        ],
                        "self.patch.set_theta2": [
                            963
                        ],
                        "edge": [
                            965,
                            966
                        ],
                        "_": [
                            965
                        ],
                        "radius": [
                            968,
                            971,
                            966,
                            967
                        ],
                        "width": [
                            969,
                            971,
                            967
                        ],
                        "self.patch.set_radius": [
                            968
                        ],
                        "self.patch.set_width": [
                            969
                        ],
                        "inner_width": [
                            971,
                            974
                        ],
                        "inner": [
                            972,
                            973,
                            974
                        ],
                        "self.spines.get": [
                            980,
                            979,
                            972
                        ],
                        "self.spines": [
                            980,
                            979,
                            972
                        ],
                        "inner.set_visible": [
                            974
                        ],
                        "visible": [
                            976,
                            985,
                            982,
                            984
                        ],
                        "_is_full_circle_deg": [
                            976
                        ],
                        "start": [
                            979,
                            981,
                            982
                        ],
                        "end": [
                            984,
                            980,
                            983
                        ],
                        "start.set_visible": [
                            982
                        ],
                        "end.set_visible": [
                            984
                        ],
                        "yaxis_text_transform": [
                            986,
                            988,
                            989,
                            990
                        ],
                        "self._yaxis_transform": [
                            986
                        ],
                        "self._r_label_position": [
                            988
                        ],
                        "self.transData": [
                            988
                        ],
                        "self._yaxis_text_transform": [
                            989,
                            990
                        ],
                        "self._yaxis_text_transform.set": [
                            990
                        ],
                        "self.yaxis.reset_ticks": [
                            991
                        ],
                        "self.yaxis": [
                            992,
                            991
                        ],
                        "self.yaxis.set_clip_path": [
                            992
                        ],
                        "Axes.draw": [
                            994
                        ],
                        "Axes": [
                            994
                        ],
                        "renderer": [
                            994
                        ],
                        "args": [
                            994
                        ],
                        "kwargs": [
                            994
                        ],
                        "cbook._delete_parameter": [
                            949,
                            950
                        ],
                        "cbook": [
                            949,
                            950
                        ]
                    },
                    "diff_line_number": 951,
                    "class_data": {
                        "signature": "class PolarAxes(Axes)",
                        "docstring": "A polar graph projection, where the input dimensions are *theta*, *r*.\n\nTheta starts pointing east and goes anti-clockwise.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *args, theta_offset=0, theta_direction=1, rlabel_position=22.5, **kwargs):\n    self._default_theta_offset = theta_offset\n    self._default_theta_direction = theta_direction\n    self._default_rlabel_position = np.deg2rad(rlabel_position)\n    super().__init__(*args, **kwargs)\n    self.use_sticky_edges = True\n    self.set_aspect('equal', adjustable='box', anchor='C')\n    self.cla()",
                            "def cla(self):\n    Axes.cla(self)\n    self.title.set_y(1.05)\n    start = self.spines.get('start', None)\n    if start:\n        start.set_visible(False)\n    end = self.spines.get('end', None)\n    if end:\n        end.set_visible(False)\n    self.set_xlim(0.0, 2 * np.pi)\n    self.grid(rcParams['polaraxes.grid'])\n    inner = self.spines.get('inner', None)\n    if inner:\n        inner.set_visible(False)\n    self.set_rorigin(None)\n    self.set_theta_offset(self._default_theta_offset)\n    self.set_theta_direction(self._default_theta_direction)",
                            "def _init_axis(self):\n    self.xaxis = ThetaAxis(self)\n    self.yaxis = RadialAxis(self)\n    self._update_transScale()",
                            "def _set_lim_and_transforms(self):\n    self._originViewLim = mtransforms.LockableBbox(self.viewLim)\n    self._direction = mtransforms.Affine2D().scale(self._default_theta_direction, 1.0)\n    self._theta_offset = mtransforms.Affine2D().translate(self._default_theta_offset, 0.0)\n    self.transShift = self._direction + self._theta_offset\n    self._realViewLim = mtransforms.TransformedBbox(self.viewLim, self.transShift)\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self.axesLim = _WedgeBbox((0.5, 0.5), self._realViewLim, self._originViewLim)\n    self.transWedge = mtransforms.BboxTransformFrom(self.axesLim)\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n    self.transProjection = self.PolarTransform(self, _apply_theta_transforms=False)\n    self.transProjection.set_children(self._originViewLim)\n    self.transProjectionAffine = self.PolarAffine(self.transScale, self._originViewLim)\n    self.transData = self.transScale + self.transShift + self.transProjection + (self.transProjectionAffine + self.transWedge + self.transAxes)\n    self._xaxis_transform = mtransforms.blended_transform_factory(mtransforms.IdentityTransform(), mtransforms.BboxTransformTo(self.viewLim)) + self.transData\n    flipr_transform = mtransforms.Affine2D().translate(0.0, -0.5).scale(1.0, -1.0).translate(0.0, 0.5)\n    self._xaxis_text_transform = flipr_transform + self._xaxis_transform\n    self._yaxis_transform = mtransforms.blended_transform_factory(mtransforms.BboxTransformTo(self.viewLim), mtransforms.IdentityTransform()) + self.transData\n    self._r_label_position = mtransforms.Affine2D().translate(self._default_rlabel_position, 0.0)\n    self._yaxis_text_transform = mtransforms.TransformWrapper(self._r_label_position + self.transData)",
                            "def get_xaxis_transform(self, which='grid'):\n    cbook._check_in_list(['tick1', 'tick2', 'grid'], which=which)\n    return self._xaxis_transform",
                            "def get_xaxis_text1_transform(self, pad):\n    return (self._xaxis_text_transform, 'center', 'center')",
                            "def get_xaxis_text2_transform(self, pad):\n    return (self._xaxis_text_transform, 'center', 'center')",
                            "def get_yaxis_transform(self, which='grid'):\n    if which in ('tick1', 'tick2'):\n        return self._yaxis_text_transform\n    elif which == 'grid':\n        return self._yaxis_transform\n    else:\n        cbook._check_in_list(['tick1', 'tick2', 'grid'], which=which)",
                            "def get_yaxis_text1_transform(self, pad):\n    thetamin, thetamax = self._realViewLim.intervalx\n    if _is_full_circle_rad(thetamin, thetamax):\n        return (self._yaxis_text_transform, 'bottom', 'left')\n    elif self.get_theta_direction() > 0:\n        halign = 'left'\n        pad_shift = _ThetaShift(self, pad, 'min')\n    else:\n        halign = 'right'\n        pad_shift = _ThetaShift(self, pad, 'max')\n    return (self._yaxis_text_transform + pad_shift, 'center', halign)",
                            "def get_yaxis_text2_transform(self, pad):\n    if self.get_theta_direction() > 0:\n        halign = 'right'\n        pad_shift = _ThetaShift(self, pad, 'max')\n    else:\n        halign = 'left'\n        pad_shift = _ThetaShift(self, pad, 'min')\n    return (self._yaxis_text_transform + pad_shift, 'center', halign)",
                            "@cbook._delete_parameter('3.3', 'args')\n@cbook._delete_parameter('3.3', 'kwargs')\ndef draw(self, renderer, *args, **kwargs):\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = (thetamax, thetamin)\n    rmin, rmax = (self._realViewLim.intervaly - self.get_rorigin()) * self.get_rsign()\n    if isinstance(self.patch, mpatches.Wedge):\n        center = self.transWedge.transform((0.5, 0.5))\n        self.patch.set_center(center)\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n        edge, _ = self.transWedge.transform((1, 0))\n        radius = edge - center[0]\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n        inner_width = radius - width\n        inner = self.spines.get('inner', None)\n        if inner:\n            inner.set_visible(inner_width != 0.0)\n    visible = not _is_full_circle_deg(thetamin, thetamax)\n    start = self.spines.get('start', None)\n    end = self.spines.get('end', None)\n    if start:\n        start.set_visible(visible)\n    if end:\n        end.set_visible(visible)\n    if visible:\n        yaxis_text_transform = self._yaxis_transform\n    else:\n        yaxis_text_transform = self._r_label_position + self.transData\n    if self._yaxis_text_transform != yaxis_text_transform:\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n    Axes.draw(self, renderer, *args, **kwargs)",
                            "def _gen_axes_patch(self):\n    return mpatches.Wedge((0.5, 0.5), 0.5, 0.0, 360.0)",
                            "def _gen_axes_spines(self):\n    spines = OrderedDict([('polar', mspines.Spine.arc_spine(self, 'top', (0.5, 0.5), 0.5, 0.0, 360.0)), ('start', mspines.Spine.linear_spine(self, 'left')), ('end', mspines.Spine.linear_spine(self, 'right')), ('inner', mspines.Spine.arc_spine(self, 'bottom', (0.5, 0.5), 0.0, 0.0, 360.0))])\n    spines['polar'].set_transform(self.transWedge + self.transAxes)\n    spines['inner'].set_transform(self.transWedge + self.transAxes)\n    spines['start'].set_transform(self._yaxis_transform)\n    spines['end'].set_transform(self._yaxis_transform)\n    return spines",
                            "def set_thetamax(self, thetamax):\n    \"\"\"Set the maximum theta limit in degrees.\"\"\"\n    self.viewLim.x1 = np.deg2rad(thetamax)",
                            "def get_thetamax(self):\n    \"\"\"Return the maximum theta limit in degrees.\"\"\"\n    return np.rad2deg(self.viewLim.xmax)",
                            "def set_thetamin(self, thetamin):\n    \"\"\"Set the minimum theta limit in degrees.\"\"\"\n    self.viewLim.x0 = np.deg2rad(thetamin)",
                            "def get_thetamin(self):\n    \"\"\"Get the minimum theta limit in degrees.\"\"\"\n    return np.rad2deg(self.viewLim.xmin)",
                            "def set_thetalim(self, *args, **kwargs):\n    \"\"\"\n    Set the minimum and maximum theta values.\n\n    Can take the following signatures:\n\n    - ``set_thetalim(minval, maxval)``: Set the limits in radians.\n    - ``set_thetalim(thetamin=minval, thetamax=maxval)``: Set the limits\n      in degrees.\n\n    where minval and maxval are the minimum and maximum limits. Values are\n    wrapped in to the range :math:`[0, 2\\\\pi]` (in radians), so for example\n    it is possible to do ``set_thetalim(-np.pi / 2, np.pi / 2)`` to have\n    an axes symmetric around 0. A ValueError is raised if the absolute\n    angle difference is larger than :math:`2\\\\pi`.\n    \"\"\"\n    thetamin = None\n    thetamax = None\n    left = None\n    right = None\n    if len(args) == 2:\n        if args[0] is not None and args[1] is not None:\n            left, right = args\n            if abs(right - left) > 2 * np.pi:\n                raise ValueError('The angle range must be <= 2 pi')\n    if 'thetamin' in kwargs:\n        thetamin = np.deg2rad(kwargs.pop('thetamin'))\n    if 'thetamax' in kwargs:\n        thetamax = np.deg2rad(kwargs.pop('thetamax'))\n    if thetamin is not None and thetamax is not None:\n        if abs(thetamax - thetamin) > 2 * np.pi:\n            raise ValueError('The angle range must be <= 360 degrees')\n    return tuple(np.rad2deg(self.set_xlim(left=left, right=right, xmin=thetamin, xmax=thetamax)))",
                            "def set_theta_offset(self, offset):\n    \"\"\"\n    Set the offset for the location of 0 in radians.\n    \"\"\"\n    mtx = self._theta_offset.get_matrix()\n    mtx[0, 2] = offset\n    self._theta_offset.invalidate()",
                            "def get_theta_offset(self):\n    \"\"\"\n    Get the offset for the location of 0 in radians.\n    \"\"\"\n    return self._theta_offset.get_matrix()[0, 2]",
                            "def set_theta_zero_location(self, loc, offset=0.0):\n    \"\"\"\n    Set the location of theta's zero.\n\n    This simply calls `set_theta_offset` with the correct value in radians.\n\n    Parameters\n    ----------\n    loc : str\n        May be one of \"N\", \"NW\", \"W\", \"SW\", \"S\", \"SE\", \"E\", or \"NE\".\n    offset : float, default: 0\n        An offset in degrees to apply from the specified *loc*. **Note:**\n        this offset is *always* applied counter-clockwise regardless of\n        the direction setting.\n    \"\"\"\n    mapping = {'N': np.pi * 0.5, 'NW': np.pi * 0.75, 'W': np.pi, 'SW': np.pi * 1.25, 'S': np.pi * 1.5, 'SE': np.pi * 1.75, 'E': 0, 'NE': np.pi * 0.25}\n    return self.set_theta_offset(mapping[loc] + np.deg2rad(offset))",
                            "def set_theta_direction(self, direction):\n    \"\"\"\n    Set the direction in which theta increases.\n\n    clockwise, -1:\n       Theta increases in the clockwise direction\n\n    counterclockwise, anticlockwise, 1:\n       Theta increases in the counterclockwise direction\n    \"\"\"\n    mtx = self._direction.get_matrix()\n    if direction in ('clockwise', -1):\n        mtx[0, 0] = -1\n    elif direction in ('counterclockwise', 'anticlockwise', 1):\n        mtx[0, 0] = 1\n    else:\n        cbook._check_in_list([-1, 1, 'clockwise', 'counterclockwise', 'anticlockwise'], direction=direction)\n    self._direction.invalidate()",
                            "def get_theta_direction(self):\n    \"\"\"\n    Get the direction in which theta increases.\n\n    -1:\n       Theta increases in the clockwise direction\n\n    1:\n       Theta increases in the counterclockwise direction\n    \"\"\"\n    return self._direction.get_matrix()[0, 0]",
                            "def set_rmax(self, rmax):\n    \"\"\"\n    Set the outer radial limit.\n\n    Parameters\n    ----------\n    rmax : float\n    \"\"\"\n    self.viewLim.y1 = rmax",
                            "def get_rmax(self):\n    \"\"\"\n    Returns\n    -------\n    float\n        Outer radial limit.\n    \"\"\"\n    return self.viewLim.ymax",
                            "def set_rmin(self, rmin):\n    \"\"\"\n    Set the inner radial limit.\n\n    Parameters\n    ----------\n    rmin : float\n    \"\"\"\n    self.viewLim.y0 = rmin",
                            "def get_rmin(self):\n    \"\"\"\n    Returns\n    -------\n    float\n        The inner radial limit.\n    \"\"\"\n    return self.viewLim.ymin",
                            "def set_rorigin(self, rorigin):\n    \"\"\"\n    Update the radial origin.\n\n    Parameters\n    ----------\n    rorigin : float\n    \"\"\"\n    self._originViewLim.locked_y0 = rorigin",
                            "def get_rorigin(self):\n    \"\"\"\n    Returns\n    -------\n    float\n    \"\"\"\n    return self._originViewLim.y0",
                            "def get_rsign(self):\n    return np.sign(self._originViewLim.y1 - self._originViewLim.y0)",
                            "def set_rlim(self, bottom=None, top=None, emit=True, auto=False, **kwargs):\n    \"\"\"\n    See `~.polar.PolarAxes.set_ylim`.\n    \"\"\"\n    if 'rmin' in kwargs:\n        if bottom is None:\n            bottom = kwargs.pop('rmin')\n        else:\n            raise ValueError('Cannot supply both positional \"bottom\"argument and kwarg \"rmin\"')\n    if 'rmax' in kwargs:\n        if top is None:\n            top = kwargs.pop('rmax')\n        else:\n            raise ValueError('Cannot supply both positional \"top\"argument and kwarg \"rmax\"')\n    return self.set_ylim(bottom=bottom, top=top, emit=emit, auto=auto, **kwargs)",
                            "def set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):\n    \"\"\"\n    Set the data limits for the radial axis.\n\n    Parameters\n    ----------\n    bottom : float, optional\n        The bottom limit (default: None, which leaves the bottom\n        limit unchanged).\n        The bottom and top ylims may be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n    top : float, optional\n        The top limit (default: None, which leaves the top limit\n        unchanged).\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the y-axis. True turns on,\n        False turns off, None leaves unchanged.\n\n    ymin, ymax : float, optional\n        These arguments are deprecated and will be removed in a future\n        version.  They are equivalent to *bottom* and *top* respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n    \"\"\"\n    if ymin is not None:\n        if bottom is not None:\n            raise ValueError('Cannot supply both positional \"bottom\" argument and kwarg \"ymin\"')\n        else:\n            bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise ValueError('Cannot supply both positional \"top\" argument and kwarg \"ymax\"')\n        else:\n            top = ymax\n    if top is None and np.iterable(bottom):\n        bottom, top = (bottom[0], bottom[1])\n    return super().set_ylim(bottom=bottom, top=top, emit=emit, auto=auto)",
                            "def get_rlabel_position(self):\n    \"\"\"\n    Returns\n    -------\n    float\n        The theta position of the radius labels in degrees.\n    \"\"\"\n    return np.rad2deg(self._r_label_position.get_matrix()[0, 2])",
                            "def set_rlabel_position(self, value):\n    \"\"\"\n    Update the theta position of the radius labels.\n\n    Parameters\n    ----------\n    value : number\n        The angular position of the radius labels in degrees.\n    \"\"\"\n    self._r_label_position.clear().translate(np.deg2rad(value), 0.0)",
                            "def set_yscale(self, *args, **kwargs):\n    Axes.set_yscale(self, *args, **kwargs)\n    self.yaxis.set_major_locator(self.RadialLocator(self.yaxis.get_major_locator(), self))",
                            "def set_rscale(self, *args, **kwargs):\n    return Axes.set_yscale(self, *args, **kwargs)",
                            "def set_rticks(self, *args, **kwargs):\n    return Axes.set_yticks(self, *args, **kwargs)",
                            "def set_thetagrids(self, angles, labels=None, fmt=None, **kwargs):\n    \"\"\"\n    Set the theta gridlines in a polar plot.\n\n    Parameters\n    ----------\n    angles : tuple with floats, degrees\n        The angles of the theta gridlines.\n\n    labels : tuple with strings or None\n        The labels to use at each theta gridline. The\n        `.projections.polar.ThetaFormatter` will be used if None.\n\n    fmt : str or None\n        Format string used in `matplotlib.ticker.FormatStrFormatter`.\n        For example '%f'. Note that the angle that is used is in\n        radians.\n\n    Returns\n    -------\n    lines : list of `.lines.Line2D`\n        The theta gridlines.\n\n    labels : list of `.text.Text`\n        The tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        *kwargs* are optional `~.Text` properties for the labels.\n\n    See Also\n    --------\n    .PolarAxes.set_rgrids\n    .Axis.get_gridlines\n    .Axis.get_ticklabels\n    \"\"\"\n    angles = self.convert_yunits(angles)\n    angles = np.deg2rad(angles)\n    self.set_xticks(angles)\n    if labels is not None:\n        self.set_xticklabels(labels)\n    elif fmt is not None:\n        self.xaxis.set_major_formatter(mticker.FormatStrFormatter(fmt))\n    for t in self.xaxis.get_ticklabels():\n        t.update(kwargs)\n    return (self.xaxis.get_ticklines(), self.xaxis.get_ticklabels())",
                            "def set_rgrids(self, radii, labels=None, angle=None, fmt=None, **kwargs):\n    \"\"\"\n    Set the radial gridlines on a polar plot.\n\n    Parameters\n    ----------\n    radii : tuple with floats\n        The radii for the radial gridlines\n\n    labels : tuple with strings or None\n        The labels to use at each radial gridline. The\n        `matplotlib.ticker.ScalarFormatter` will be used if None.\n\n    angle : float\n        The angular position of the radius labels in degrees.\n\n    fmt : str or None\n        Format string used in `matplotlib.ticker.FormatStrFormatter`.\n        For example '%f'.\n\n    Returns\n    -------\n    lines : list of `.lines.Line2D`\n        The radial gridlines.\n\n    labels : list of `.text.Text`\n        The tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        *kwargs* are optional `~.Text` properties for the labels.\n\n    See Also\n    --------\n    .PolarAxes.set_thetagrids\n    .Axis.get_gridlines\n    .Axis.get_ticklabels\n    \"\"\"\n    radii = self.convert_xunits(radii)\n    radii = np.asarray(radii)\n    self.set_yticks(radii)\n    if labels is not None:\n        self.set_yticklabels(labels)\n    elif fmt is not None:\n        self.yaxis.set_major_formatter(mticker.FormatStrFormatter(fmt))\n    if angle is None:\n        angle = self.get_rlabel_position()\n    self.set_rlabel_position(angle)\n    for t in self.yaxis.get_ticklabels():\n        t.update(kwargs)\n    return (self.yaxis.get_gridlines(), self.yaxis.get_ticklabels())",
                            "def set_xscale(self, scale, *args, **kwargs):\n    if scale != 'linear':\n        raise NotImplementedError('You can not set the xscale on a polar plot.')",
                            "def format_coord(self, theta, r):\n    if theta < 0:\n        theta += 2 * np.pi\n    theta /= np.pi\n    return '\u03b8=%0.3f\u03c0 (%0.3f\u00b0), r=%0.3f' % (theta, theta * 180.0, r)",
                            "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the data itself.  For a polar plot,\n    this should always be 1.0\n    \"\"\"\n    return 1.0",
                            "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n\n    Polar axes do not support zoom boxes.\n    \"\"\"\n    return False",
                            "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports the pan/zoom button functionality.\n\n    For polar axes, this is slightly misleading. Both panning and\n    zooming are performed by the same button. Panning is performed\n    in azimuth while zooming is done along the radial.\n    \"\"\"\n    return True",
                            "def start_pan(self, x, y, button):\n    angle = np.deg2rad(self.get_rlabel_position())\n    mode = ''\n    if button == 1:\n        epsilon = np.pi / 45.0\n        t, r = self.transData.inverted().transform((x, y))\n        if angle - epsilon <= t <= angle + epsilon:\n            mode = 'drag_r_labels'\n    elif button == 3:\n        mode = 'zoom'\n    self._pan_start = types.SimpleNamespace(rmax=self.get_rmax(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), r_label_angle=self.get_rlabel_position(), x=x, y=y, mode=mode)",
                            "def end_pan(self):\n    del self._pan_start",
                            "def drag_pan(self, button, key, x, y):\n    p = self._pan_start\n    if p.mode == 'drag_r_labels':\n        (startt, startr), (t, r) = p.trans_inverse.transform([(p.x, p.y), (x, y)])\n        dt = np.rad2deg(startt - t)\n        self.set_rlabel_position(p.r_label_angle - dt)\n        trans, vert1, horiz1 = self.get_yaxis_text1_transform(0.0)\n        trans, vert2, horiz2 = self.get_yaxis_text2_transform(0.0)\n        for t in self.yaxis.majorTicks + self.yaxis.minorTicks:\n            t.label1.set_va(vert1)\n            t.label1.set_ha(horiz1)\n            t.label2.set_va(vert2)\n            t.label2.set_ha(horiz2)\n    elif p.mode == 'zoom':\n        (startt, startr), (t, r) = p.trans_inverse.transform([(p.x, p.y), (x, y)])\n        scale = r / startr\n        self.set_rmax(p.rmax / scale)"
                        ],
                        "constructor_variables": [
                            "use_sticky_edges",
                            "_default_rlabel_position",
                            "_default_theta_direction",
                            "_default_theta_offset"
                        ],
                        "class_level_variables": [
                            "name"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *args, **kwargs)",
                            "cla(self)",
                            "_init_axis(self)",
                            "_set_lim_and_transforms(self)",
                            "get_xaxis_transform(self, which='grid')",
                            "get_xaxis_text1_transform(self, pad)",
                            "get_xaxis_text2_transform(self, pad)",
                            "get_yaxis_transform(self, which='grid')",
                            "get_yaxis_text1_transform(self, pad)",
                            "get_yaxis_text2_transform(self, pad)",
                            "draw(self, renderer, *args, **kwargs)",
                            "_gen_axes_patch(self)",
                            "_gen_axes_spines(self)",
                            "set_thetamax(self, thetamax)",
                            "get_thetamax(self)",
                            "set_thetamin(self, thetamin)",
                            "get_thetamin(self)",
                            "set_thetalim(self, *args, **kwargs)",
                            "set_theta_offset(self, offset)",
                            "get_theta_offset(self)",
                            "set_theta_zero_location(self, loc, offset=0.0)",
                            "set_theta_direction(self, direction)",
                            "get_theta_direction(self)",
                            "set_rmax(self, rmax)",
                            "get_rmax(self)",
                            "set_rmin(self, rmin)",
                            "get_rmin(self)",
                            "set_rorigin(self, rorigin)",
                            "get_rorigin(self)",
                            "get_rsign(self)",
                            "set_rlim(self, bottom=None, top=None, emit=True, auto=False, **kwargs)",
                            "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                            "get_rlabel_position(self)",
                            "set_rlabel_position(self, value)",
                            "set_yscale(self, *args, **kwargs)",
                            "set_rscale(self, *args, **kwargs)",
                            "set_rticks(self, *args, **kwargs)",
                            "set_thetagrids(self, angles, labels=None, fmt=None, **kwargs)",
                            "set_rgrids(self, radii, labels=None, angle=None, fmt=None, **kwargs)",
                            "set_xscale(self, scale, *args, **kwargs)",
                            "format_coord(self, theta, r)",
                            "get_data_ratio(self)",
                            "can_zoom(self)",
                            "can_pan(self)",
                            "start_pan(self, x, y, button)",
                            "end_pan(self)",
                            "drag_pan(self, button, key, x, y)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "thetamin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "thetamax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.rad2deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._realViewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._realViewLim": {
                                    "variable_value": "<matplotlib.transforms.TransformedBbox object at 0x10e858550>",
                                    "variable_type": "TransformedBbox",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.projections.polar.PolarAxes object at 0x10e858f70>",
                                    "variable_type": "PolarAxes",
                                    "variable_shape": null
                                },
                                "rmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._realViewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.get_rorigin": {
                                    "variable_value": "<bound method PolarAxes.get_rorigin of <matplotlib.projections.polar.PolarAxes object at 0x10e858f70>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_rsign": {
                                    "variable_value": "<bound method PolarAxes.get_rsign of <matplotlib.projections.polar.PolarAxes object at 0x10e858f70>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.patch": {
                                    "variable_value": "<matplotlib.patches.Wedge object at 0x10e84cc10>",
                                    "variable_type": "Wedge",
                                    "variable_shape": null
                                },
                                "mpatches.Wedge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mpatches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.transWedge.transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.transWedge": {
                                    "variable_value": "<matplotlib.transforms.BboxTransformFrom object at 0x10e858040>",
                                    "variable_type": "BboxTransformFrom",
                                    "variable_shape": null
                                },
                                "self.patch.set_center": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta1": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta2": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "edge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "radius": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.patch.set_radius": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_width": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inner_width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inner": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.spines.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.spines": {
                                    "variable_value": "OrderedDict([('polar', <matplotlib.spines.Spine object at 0x10e87f430>), ('start', <matplotlib.spines.Spine object at 0x10e87f550>), ('end', <matplotlib.spines.Spine object at 0x10e87f640>), ('inner', <matplotlib.spines.Spine object at 0x10e87f730>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "4"
                                },
                                "inner.set_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_full_circle_deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start.set_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end.set_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yaxis_text_transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._yaxis_transform": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x10e87f310>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._r_label_position": {
                                    "variable_value": "<matplotlib.transforms.Affine2D object at 0x10e87f340>",
                                    "variable_type": "Affine2D",
                                    "variable_shape": null
                                },
                                "self.transData": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x10e842fd0>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform": {
                                    "variable_value": "<matplotlib.transforms.TransformWrapper object at 0x10e87f3d0>",
                                    "variable_type": "TransformWrapper",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform.set": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis.reset_ticks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.projections.polar.RadialAxis object at 0x10e89b940>",
                                    "variable_type": "RadialAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.set_clip_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Axes.draw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x10e81ceb0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "cbook._delete_parameter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "thetamin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "thetamax": {
                                    "variable_value": "360.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.rad2deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._realViewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._realViewLim": {
                                    "variable_value": "<matplotlib.transforms.TransformedBbox object at 0x10e858550>",
                                    "variable_type": "TransformedBbox",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.projections.polar.PolarAxes object at 0x10e858f70>",
                                    "variable_type": "PolarAxes",
                                    "variable_shape": null
                                },
                                "rmin": {
                                    "variable_value": "2.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "rmax": {
                                    "variable_value": "3.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self._realViewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.get_rorigin": {
                                    "variable_value": "<bound method PolarAxes.get_rorigin of <matplotlib.projections.polar.PolarAxes object at 0x10e858f70>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_rsign": {
                                    "variable_value": "<bound method PolarAxes.get_rsign of <matplotlib.projections.polar.PolarAxes object at 0x10e858f70>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.patch": {
                                    "variable_value": "<matplotlib.patches.Wedge object at 0x10e84cc10>",
                                    "variable_type": "Wedge",
                                    "variable_shape": null
                                },
                                "mpatches.Wedge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mpatches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "array([0.5, 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.transWedge.transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.transWedge": {
                                    "variable_value": "<matplotlib.transforms.BboxTransformFrom object at 0x10e858040>",
                                    "variable_type": "BboxTransformFrom",
                                    "variable_shape": null
                                },
                                "self.patch.set_center": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta1": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta2": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "edge": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "_": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "radius": {
                                    "variable_value": "0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "width": {
                                    "variable_value": "0.16666666666666666",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.patch.set_radius": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_width": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inner_width": {
                                    "variable_value": "0.33333333333333337",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inner": {
                                    "variable_value": "<matplotlib.spines.Spine object at 0x10e87f730>",
                                    "variable_type": "Spine",
                                    "variable_shape": null
                                },
                                "self.spines.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.spines": {
                                    "variable_value": "OrderedDict([('polar', <matplotlib.spines.Spine object at 0x10e87f430>), ('start', <matplotlib.spines.Spine object at 0x10e87f550>), ('end', <matplotlib.spines.Spine object at 0x10e87f640>), ('inner', <matplotlib.spines.Spine object at 0x10e87f730>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "4"
                                },
                                "inner.set_visible": {
                                    "variable_value": "<bound method Artist.set_visible of <matplotlib.spines.Spine object at 0x10e87f730>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "visible": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_is_full_circle_deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "<matplotlib.spines.Spine object at 0x10e87f550>",
                                    "variable_type": "Spine",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": "<matplotlib.spines.Spine object at 0x10e87f640>",
                                    "variable_type": "Spine",
                                    "variable_shape": null
                                },
                                "start.set_visible": {
                                    "variable_value": "<bound method Artist.set_visible of <matplotlib.spines.Spine object at 0x10e87f550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "end.set_visible": {
                                    "variable_value": "<bound method Artist.set_visible of <matplotlib.spines.Spine object at 0x10e87f640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "yaxis_text_transform": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x10e82ea60>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._yaxis_transform": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x10e87f310>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._r_label_position": {
                                    "variable_value": "<matplotlib.transforms.Affine2D object at 0x10e87f340>",
                                    "variable_type": "Affine2D",
                                    "variable_shape": null
                                },
                                "self.transData": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x10e842fd0>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform": {
                                    "variable_value": "<matplotlib.transforms.TransformWrapper object at 0x10e87f3d0>",
                                    "variable_type": "TransformWrapper",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform.set": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis.reset_ticks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.projections.polar.RadialAxis object at 0x10e89b940>",
                                    "variable_type": "RadialAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.set_clip_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Axes.draw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x10e81ceb0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "cbook._delete_parameter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._unstale_viewLim": {
                                    "variable_value": "<bound method _AxesBase._unstale_viewLim of <matplotlib.projections.polar.PolarAxes object at 0x1088b7640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.projections.polar.PolarAxes object at 0x1088b7640>",
                                    "variable_type": "PolarAxes",
                                    "variable_shape": null
                                },
                                "thetamin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "thetamax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.rad2deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._realViewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._realViewLim": {
                                    "variable_value": "<matplotlib.transforms.TransformedBbox object at 0x1088b7910>",
                                    "variable_type": "TransformedBbox",
                                    "variable_shape": null
                                },
                                "rmin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._realViewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.get_rorigin": {
                                    "variable_value": "<bound method PolarAxes.get_rorigin of <matplotlib.projections.polar.PolarAxes object at 0x1088b7640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_rsign": {
                                    "variable_value": "<bound method PolarAxes.get_rsign of <matplotlib.projections.polar.PolarAxes object at 0x1088b7640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.patch": {
                                    "variable_value": "<matplotlib.patches.Wedge object at 0x108898eb0>",
                                    "variable_type": "Wedge",
                                    "variable_shape": null
                                },
                                "mpatches.Wedge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mpatches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.transWedge.transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.transWedge": {
                                    "variable_value": "<matplotlib.transforms.BboxTransformFrom object at 0x1088b7070>",
                                    "variable_type": "BboxTransformFrom",
                                    "variable_shape": null
                                },
                                "self.patch.set_center": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta1": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta2": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "edge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "radius": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.patch.set_radius": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_width": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inner_width": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inner": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.spines.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.spines": {
                                    "variable_value": "OrderedDict([('polar', <matplotlib.spines.Spine object at 0x1088b7f10>), ('start', <matplotlib.spines.Spine object at 0x108876070>), ('end', <matplotlib.spines.Spine object at 0x108876160>), ('inner', <matplotlib.spines.Spine object at 0x108876250>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "4"
                                },
                                "inner.set_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_is_full_circle_deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start.set_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end.set_visible": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "yaxis_text_transform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._yaxis_transform": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x1088b7df0>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._r_label_position": {
                                    "variable_value": "<matplotlib.transforms.Affine2D object at 0x1088b7e20>",
                                    "variable_type": "Affine2D",
                                    "variable_shape": null
                                },
                                "self.transData": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x1088b7b80>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform": {
                                    "variable_value": "<matplotlib.transforms.TransformWrapper object at 0x1088b7eb0>",
                                    "variable_type": "TransformWrapper",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform.set": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis.reset_ticks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.projections.polar.RadialAxis object at 0x10888f460>",
                                    "variable_type": "RadialAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.set_clip_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Axes.draw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x1088ec1c0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "cbook._delete_parameter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._unstale_viewLim": {
                                    "variable_value": "<bound method _AxesBase._unstale_viewLim of <matplotlib.projections.polar.PolarAxes object at 0x1088b7640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.projections.polar.PolarAxes object at 0x1088b7640>",
                                    "variable_type": "PolarAxes",
                                    "variable_shape": null
                                },
                                "thetamin": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "thetamax": {
                                    "variable_value": "360.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "np.rad2deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._realViewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._realViewLim": {
                                    "variable_value": "<matplotlib.transforms.TransformedBbox object at 0x1088b7910>",
                                    "variable_type": "TransformedBbox",
                                    "variable_shape": null
                                },
                                "rmin": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "rmax": {
                                    "variable_value": "3.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self._realViewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.get_rorigin": {
                                    "variable_value": "<bound method PolarAxes.get_rorigin of <matplotlib.projections.polar.PolarAxes object at 0x1088b7640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_rsign": {
                                    "variable_value": "<bound method PolarAxes.get_rsign of <matplotlib.projections.polar.PolarAxes object at 0x1088b7640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.patch": {
                                    "variable_value": "<matplotlib.patches.Wedge object at 0x108898eb0>",
                                    "variable_type": "Wedge",
                                    "variable_shape": null
                                },
                                "mpatches.Wedge": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mpatches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "center": {
                                    "variable_value": "array([0.5, 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(2,)"
                                },
                                "self.transWedge.transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.transWedge": {
                                    "variable_value": "<matplotlib.transforms.BboxTransformFrom object at 0x1088b7070>",
                                    "variable_type": "BboxTransformFrom",
                                    "variable_shape": null
                                },
                                "self.patch.set_center": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta1": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_theta2": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "edge": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "_": {
                                    "variable_value": "0.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "radius": {
                                    "variable_value": "0.5",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "width": {
                                    "variable_value": "0.3333333333333333",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "self.patch.set_radius": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.patch.set_width": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inner_width": {
                                    "variable_value": "0.16666666666666669",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inner": {
                                    "variable_value": "<matplotlib.spines.Spine object at 0x108876250>",
                                    "variable_type": "Spine",
                                    "variable_shape": null
                                },
                                "self.spines.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.spines": {
                                    "variable_value": "OrderedDict([('polar', <matplotlib.spines.Spine object at 0x1088b7f10>), ('start', <matplotlib.spines.Spine object at 0x108876070>), ('end', <matplotlib.spines.Spine object at 0x108876160>), ('inner', <matplotlib.spines.Spine object at 0x108876250>)])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "4"
                                },
                                "inner.set_visible": {
                                    "variable_value": "<bound method Artist.set_visible of <matplotlib.spines.Spine object at 0x108876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "visible": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_is_full_circle_deg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "<matplotlib.spines.Spine object at 0x108876070>",
                                    "variable_type": "Spine",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": "<matplotlib.spines.Spine object at 0x108876160>",
                                    "variable_type": "Spine",
                                    "variable_shape": null
                                },
                                "start.set_visible": {
                                    "variable_value": "<bound method Artist.set_visible of <matplotlib.spines.Spine object at 0x108876070>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "end.set_visible": {
                                    "variable_value": "<bound method Artist.set_visible of <matplotlib.spines.Spine object at 0x108876160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "yaxis_text_transform": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x1088ec5b0>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._yaxis_transform": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x1088b7df0>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._r_label_position": {
                                    "variable_value": "<matplotlib.transforms.Affine2D object at 0x1088b7e20>",
                                    "variable_type": "Affine2D",
                                    "variable_shape": null
                                },
                                "self.transData": {
                                    "variable_value": "<matplotlib.transforms.CompositeGenericTransform object at 0x1088b7b80>",
                                    "variable_type": "CompositeGenericTransform",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform": {
                                    "variable_value": "<matplotlib.transforms.TransformWrapper object at 0x1088b7eb0>",
                                    "variable_type": "TransformWrapper",
                                    "variable_shape": null
                                },
                                "self._yaxis_text_transform.set": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis.reset_ticks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.projections.polar.RadialAxis object at 0x10888f460>",
                                    "variable_type": "RadialAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.set_clip_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Axes.draw": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "renderer": {
                                    "variable_value": "<matplotlib.backends.backend_agg.RendererAgg object at 0x1088ec1c0>",
                                    "variable_type": "RendererAgg",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "cbook._delete_parameter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _is_full_circle_deg(thetamin, thetamax):\n    \"\"\"\n    Determine if a wedge (in degrees) spans the full circle.\n\n    The condition is derived from :class:`~matplotlib.patches.Wedge`.\n    \"\"\"\n    return abs(abs(thetamax - thetamin) - 360.0) < 1e-12",
                "def _is_full_circle_rad(thetamin, thetamax):\n    \"\"\"\n    Determine if a wedge (in radians) spans the full circle.\n\n    The condition is derived from :class:`~matplotlib.patches.Wedge`.\n    \"\"\"\n    return abs(abs(thetamax - thetamin) - 2 * np.pi) < 1.74e-14",
                "def __init__(self, axis=None, use_rmin=True,\n             _apply_theta_transforms=True):\n    mtransforms.Transform.__init__(self)\n    self._axis = axis\n    self._use_rmin = use_rmin\n    self._apply_theta_transforms = _apply_theta_transforms",
                "def transform_non_affine(self, tr):\n    # docstring inherited\n    t, r = np.transpose(tr)\n    # PolarAxes does not use the theta transforms here, but apply them for\n    # backwards-compatibility if not being used by it.\n    if self._apply_theta_transforms and self._axis is not None:\n        t *= self._axis.get_theta_direction()\n        t += self._axis.get_theta_offset()\n    if self._use_rmin and self._axis is not None:\n        r = (r - self._axis.get_rorigin()) * self._axis.get_rsign()\n    r = np.where(r >= 0, r, np.nan)\n    return np.column_stack([r * np.cos(t), r * np.sin(t)])",
                "def transform_path_non_affine(self, path):\n    # docstring inherited\n    if not len(path) or path._interpolation_steps == 1:\n        return Path(self.transform_non_affine(path.vertices), path.codes)\n    xys = []\n    codes = []\n    last_t = last_r = None\n    for trs, c in path.iter_segments():\n        trs = trs.reshape((-1, 2))\n        if c == Path.LINETO:\n            (t, r), = trs\n            if t == last_t:  # Same angle: draw a straight line.\n                xys.extend(self.transform_non_affine(trs))\n                codes.append(Path.LINETO)\n            elif r == last_r:  # Same radius: draw an arc.\n                # The following is complicated by Path.arc() being\n                # \"helpful\" and unwrapping the angles, but we don't want\n                # that behavior here.\n                last_td, td = np.rad2deg([last_t, t])\n                if self._use_rmin and self._axis is not None:\n                    r = ((r - self._axis.get_rorigin())\n                         * self._axis.get_rsign())\n                if last_td <= td:\n                    while td - last_td > 360:\n                        arc = Path.arc(last_td, last_td + 360)\n                        xys.extend(arc.vertices[1:] * r)\n                        codes.extend(arc.codes[1:])\n                        last_td += 360\n                    arc = Path.arc(last_td, td)\n                    xys.extend(arc.vertices[1:] * r)\n                    codes.extend(arc.codes[1:])\n                else:\n                    # The reverse version also relies on the fact that all\n                    # codes but the first one are the same.\n                    while last_td - td > 360:\n                        arc = Path.arc(last_td - 360, last_td)\n                        xys.extend(arc.vertices[::-1][1:] * r)\n                        codes.extend(arc.codes[1:])\n                        last_td -= 360\n                    arc = Path.arc(td, last_td)\n                    xys.extend(arc.vertices[::-1][1:] * r)\n                    codes.extend(arc.codes[1:])\n            else:  # Interpolate.\n                trs = cbook.simple_linear_interpolation(\n                    np.row_stack([(last_t, last_r), trs]),\n                    path._interpolation_steps)[1:]\n                xys.extend(self.transform_non_affine(trs))\n                codes.extend([Path.LINETO] * len(trs))\n        else:  # Not a straight line.\n            xys.extend(self.transform_non_affine(trs))\n            codes.extend([c] * len(trs))\n        last_t, last_r = trs[-1]\n    return Path(xys, codes)",
                "def inverted(self):\n    # docstring inherited\n    return PolarAxes.InvertedPolarTransform(self._axis, self._use_rmin,\n                                            self._apply_theta_transforms)",
                "def __init__(self, scale_transform, limits):\n    \"\"\"\n    *limits* is the view limit of the data.  The only part of\n    its bounds that is used is the y limits (for the radius limits).\n    The theta range is handled by the non-affine transform.\n    \"\"\"\n    mtransforms.Affine2DBase.__init__(self)\n    self._scale_transform = scale_transform\n    self._limits = limits\n    self.set_children(scale_transform, limits)\n    self._mtx = None",
                "def get_matrix(self):\n    # docstring inherited\n    if self._invalid:\n        limits_scaled = self._limits.transformed(self._scale_transform)\n        yscale = limits_scaled.ymax - limits_scaled.ymin\n        affine = mtransforms.Affine2D() \\\n            .scale(0.5 / yscale) \\\n            .translate(0.5, 0.5)\n        self._mtx = affine.get_matrix()\n        self._inverted = None\n        self._invalid = 0\n    return self._mtx",
                "def __init__(self, axis=None, use_rmin=True,\n             _apply_theta_transforms=True):\n    mtransforms.Transform.__init__(self)\n    self._axis = axis\n    self._use_rmin = use_rmin\n    self._apply_theta_transforms = _apply_theta_transforms",
                "def transform_non_affine(self, xy):\n    # docstring inherited\n    x, y = xy.T\n    r = np.hypot(x, y)\n    theta = (np.arctan2(y, x) + 2 * np.pi) % (2 * np.pi)\n    # PolarAxes does not use the theta transforms here, but apply them for\n    # backwards-compatibility if not being used by it.\n    if self._apply_theta_transforms and self._axis is not None:\n        theta -= self._axis.get_theta_offset()\n        theta *= self._axis.get_theta_direction()\n        theta %= 2 * np.pi\n    if self._use_rmin and self._axis is not None:\n        r += self._axis.get_rorigin()\n        r *= self._axis.get_rsign()\n    return np.column_stack([theta, r])",
                "def inverted(self):\n    # docstring inherited\n    return PolarAxes.PolarTransform(self._axis, self._use_rmin,\n                                    self._apply_theta_transforms)",
                "def __call__(self, x, pos=None):\n    vmin, vmax = self.axis.get_view_interval()\n    d = np.rad2deg(abs(vmax - vmin))\n    digits = max(-int(np.log10(d) - 1.5), 0)\n    # Use unicode rather than mathtext with \\circ, so that it will work\n    # correctly with any arbitrary font (assuming it has a degree sign),\n    # whereas $5\\circ$ will only work correctly with one of the supported\n    # math fonts (Computer Modern and STIX).\n    return (\"{value:0.{digits:d}f}\\N{DEGREE SIGN}\"\n            .format(value=np.rad2deg(x), digits=digits))",
                "def __init__(self, axis):\n    self._axis = axis",
                "def get_view_interval(self):\n    return np.rad2deg(self._axis.get_view_interval())",
                "def set_view_interval(self, vmin, vmax):\n    self._axis.set_view_interval(*np.deg2rad((vmin, vmax)))",
                "def get_minpos(self):\n    return np.rad2deg(self._axis.get_minpos())",
                "def get_data_interval(self):\n    return np.rad2deg(self._axis.get_data_interval())",
                "def set_data_interval(self, vmin, vmax):\n    self._axis.set_data_interval(*np.deg2rad((vmin, vmax)))",
                "def get_tick_space(self):\n    return self._axis.get_tick_space()",
                "def __init__(self, base):\n    self.base = base\n    self.axis = self.base.axis = _AxisWrapper(self.base.axis)",
                "def set_axis(self, axis):\n    self.axis = _AxisWrapper(axis)\n    self.base.set_axis(self.axis)",
                "def __call__(self):\n    lim = self.axis.get_view_interval()\n    if _is_full_circle_deg(lim[0], lim[1]):\n        return np.arange(8) * 2 * np.pi / 8\n    else:\n        return np.deg2rad(self.base())",
                "@cbook.deprecated(\"3.2\")\ndef autoscale(self):\n    return self.base.autoscale()",
                "@cbook.deprecated(\"3.3\")\ndef pan(self, numsteps):\n    return self.base.pan(numsteps)",
                "def refresh(self):\n    # docstring inherited\n    return self.base.refresh()",
                "def view_limits(self, vmin, vmax):\n    vmin, vmax = np.rad2deg((vmin, vmax))\n    return np.deg2rad(self.base.view_limits(vmin, vmax))",
                "@cbook.deprecated(\"3.3\")\ndef zoom(self, direction):\n    return self.base.zoom(direction)",
                "def __init__(self, axes, *args, **kwargs):\n    self._text1_translate = mtransforms.ScaledTranslation(\n        0, 0, axes.figure.dpi_scale_trans)\n    self._text2_translate = mtransforms.ScaledTranslation(\n        0, 0, axes.figure.dpi_scale_trans)\n    super().__init__(axes, *args, **kwargs)\n    self.label1.set(\n        rotation_mode='anchor',\n        transform=self.label1.get_transform() + self._text1_translate)\n    self.label2.set(\n        rotation_mode='anchor',\n        transform=self.label2.get_transform() + self._text2_translate)",
                "def _apply_params(self, **kw):\n    super()._apply_params(**kw)\n\n    # Ensure transform is correct; sometimes this gets reset.\n    trans = self.label1.get_transform()\n    if not trans.contains_branch(self._text1_translate):\n        self.label1.set_transform(trans + self._text1_translate)\n    trans = self.label2.get_transform()\n    if not trans.contains_branch(self._text2_translate):\n        self.label2.set_transform(trans + self._text2_translate)",
                "def _update_padding(self, pad, angle):\n    padx = pad * np.cos(angle) / 72\n    pady = pad * np.sin(angle) / 72\n    self._text1_translate._t = (padx, pady)\n    self._text1_translate.invalidate()\n    self._text2_translate._t = (-padx, -pady)\n    self._text2_translate.invalidate()",
                "def update_position(self, loc):\n    super().update_position(loc)\n    axes = self.axes\n    angle = loc * axes.get_theta_direction() + axes.get_theta_offset()\n    text_angle = np.rad2deg(angle) % 360 - 90\n    angle -= np.pi / 2\n\n    marker = self.tick1line.get_marker()\n    if marker in (mmarkers.TICKUP, '|'):\n        trans = mtransforms.Affine2D().scale(1, 1).rotate(angle)\n    elif marker == mmarkers.TICKDOWN:\n        trans = mtransforms.Affine2D().scale(1, -1).rotate(angle)\n    else:\n        # Don't modify custom tick line markers.\n        trans = self.tick1line._marker._transform\n    self.tick1line._marker._transform = trans\n\n    marker = self.tick2line.get_marker()\n    if marker in (mmarkers.TICKUP, '|'):\n        trans = mtransforms.Affine2D().scale(1, 1).rotate(angle)\n    elif marker == mmarkers.TICKDOWN:\n        trans = mtransforms.Affine2D().scale(1, -1).rotate(angle)\n    else:\n        # Don't modify custom tick line markers.\n        trans = self.tick2line._marker._transform\n    self.tick2line._marker._transform = trans\n\n    mode, user_angle = self._labelrotation\n    if mode == 'default':\n        text_angle = user_angle\n    else:\n        if text_angle > 90:\n            text_angle -= 180\n        elif text_angle < -90:\n            text_angle += 180\n        text_angle += user_angle\n    self.label1.set_rotation(text_angle)\n    self.label2.set_rotation(text_angle)\n\n    # This extra padding helps preserve the look from previous releases but\n    # is also needed because labels are anchored to their center.\n    pad = self._pad + 7\n    self._update_padding(pad,\n                         self._loc * axes.get_theta_direction() +\n                         axes.get_theta_offset())",
                "def _get_tick(self, major):\n    if major:\n        tick_kw = self._major_tick_kw\n    else:\n        tick_kw = self._minor_tick_kw\n    return ThetaTick(self.axes, 0, major=major, **tick_kw)",
                "def _wrap_locator_formatter(self):\n    self.set_major_locator(ThetaLocator(self.get_major_locator()))\n    self.set_major_formatter(ThetaFormatter())\n    self.isDefault_majloc = True\n    self.isDefault_majfmt = True",
                "def cla(self):\n    super().cla()\n    self.set_ticks_position('none')\n    self._wrap_locator_formatter()",
                "def _set_scale(self, value, **kwargs):\n    super()._set_scale(value, **kwargs)\n    self._wrap_locator_formatter()",
                "def _copy_tick_props(self, src, dest):\n    \"\"\"Copy the props from src tick to dest tick.\"\"\"\n    if src is None or dest is None:\n        return\n    super()._copy_tick_props(src, dest)\n\n    # Ensure that tick transforms are independent so that padding works.\n    trans = dest._get_text1_transform()[0]\n    dest.label1.set_transform(trans + dest._text1_translate)\n    trans = dest._get_text2_transform()[0]\n    dest.label2.set_transform(trans + dest._text2_translate)",
                "def __init__(self, base, axes=None):\n    self.base = base\n    self._axes = axes",
                "def __call__(self):\n    show_all = True\n    # Ensure previous behaviour with full circle non-annular views.\n    if self._axes:\n        if _is_full_circle_rad(*self._axes.viewLim.intervalx):\n            rorigin = self._axes.get_rorigin() * self._axes.get_rsign()\n            if self._axes.get_rmin() <= rorigin:\n                show_all = False\n    if show_all:\n        return self.base()\n    else:\n        return [tick for tick in self.base() if tick > rorigin]",
                "@cbook.deprecated(\"3.2\")\ndef autoscale(self):\n    return self.base.autoscale()",
                "@cbook.deprecated(\"3.3\")\ndef pan(self, numsteps):\n    return self.base.pan(numsteps)",
                "@cbook.deprecated(\"3.3\")\ndef zoom(self, direction):\n    return self.base.zoom(direction)",
                "@cbook.deprecated(\"3.3\")\ndef refresh(self):\n    # docstring inherited\n    return self.base.refresh()",
                "def nonsingular(self, vmin, vmax):\n    # docstring inherited\n    return ((0, 1) if (vmin, vmax) == (-np.inf, np.inf)  # Init. limits.\n            else self.base.nonsingular(vmin, vmax))",
                "def view_limits(self, vmin, vmax):\n    vmin, vmax = self.base.view_limits(vmin, vmax)\n    if vmax > vmin:\n        # this allows inverted r/y-lims\n        vmin = min(0, vmin)\n    return mtransforms.nonsingular(vmin, vmax)",
                "def __init__(self, axes, pad, mode):\n    mtransforms.ScaledTranslation.__init__(self, pad, pad,\n                                           axes.figure.dpi_scale_trans)\n    self.set_children(axes._realViewLim)\n    self.axes = axes\n    self.mode = mode\n    self.pad = pad",
                "def get_matrix(self):\n    if self._invalid:\n        if self.mode == 'rlabel':\n            angle = (\n                np.deg2rad(self.axes.get_rlabel_position()) *\n                self.axes.get_theta_direction() +\n                self.axes.get_theta_offset()\n            )\n        else:\n            if self.mode == 'min':\n                angle = self.axes._realViewLim.xmin\n            elif self.mode == 'max':\n                angle = self.axes._realViewLim.xmax\n\n        if self.mode in ('rlabel', 'min'):\n            padx = np.cos(angle - np.pi / 2)\n            pady = np.sin(angle - np.pi / 2)\n        else:\n            padx = np.cos(angle + np.pi / 2)\n            pady = np.sin(angle + np.pi / 2)\n\n        self._t = (self.pad * padx / 72, self.pad * pady / 72)\n    return mtransforms.ScaledTranslation.get_matrix(self)",
                "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.label1.set_rotation_mode('anchor')\n    self.label2.set_rotation_mode('anchor')",
                "def _determine_anchor(self, mode, angle, start):\n    # Note: angle is the (spine angle - 90) because it's used for the tick\n    # & text setup, so all numbers below are -90 from (normed) spine angle.\n    if mode == 'auto':\n        if start:\n            if -90 <= angle <= 90:\n                return 'left', 'center'\n            else:\n                return 'right', 'center'\n        else:\n            if -90 <= angle <= 90:\n                return 'right', 'center'\n            else:\n                return 'left', 'center'\n    else:\n        if start:\n            if angle < -68.5:\n                return 'center', 'top'\n            elif angle < -23.5:\n                return 'left', 'top'\n            elif angle < 22.5:\n                return 'left', 'center'\n            elif angle < 67.5:\n                return 'left', 'bottom'\n            elif angle < 112.5:\n                return 'center', 'bottom'\n            elif angle < 157.5:\n                return 'right', 'bottom'\n            elif angle < 202.5:\n                return 'right', 'center'\n            elif angle < 247.5:\n                return 'right', 'top'\n            else:\n                return 'center', 'top'\n        else:\n            if angle < -68.5:\n                return 'center', 'bottom'\n            elif angle < -23.5:\n                return 'right', 'bottom'\n            elif angle < 22.5:\n                return 'right', 'center'\n            elif angle < 67.5:\n                return 'right', 'top'\n            elif angle < 112.5:\n                return 'center', 'top'\n            elif angle < 157.5:\n                return 'left', 'top'\n            elif angle < 202.5:\n                return 'left', 'center'\n            elif angle < 247.5:\n                return 'left', 'bottom'\n            else:\n                return 'center', 'bottom'",
                "def update_position(self, loc):\n    super().update_position(loc)\n    axes = self.axes\n    thetamin = axes.get_thetamin()\n    thetamax = axes.get_thetamax()\n    direction = axes.get_theta_direction()\n    offset_rad = axes.get_theta_offset()\n    offset = np.rad2deg(offset_rad)\n    full = _is_full_circle_deg(thetamin, thetamax)\n\n    if full:\n        angle = (axes.get_rlabel_position() * direction +\n                 offset) % 360 - 90\n        tick_angle = 0\n    else:\n        angle = (thetamin * direction + offset) % 360 - 90\n        if direction > 0:\n            tick_angle = np.deg2rad(angle)\n        else:\n            tick_angle = np.deg2rad(angle + 180)\n    text_angle = (angle + 90) % 180 - 90  # between -90 and +90.\n    mode, user_angle = self._labelrotation\n    if mode == 'auto':\n        text_angle += user_angle\n    else:\n        text_angle = user_angle\n\n    if full:\n        ha = self.label1.get_horizontalalignment()\n        va = self.label1.get_verticalalignment()\n    else:\n        ha, va = self._determine_anchor(mode, angle, direction > 0)\n    self.label1.set_horizontalalignment(ha)\n    self.label1.set_verticalalignment(va)\n    self.label1.set_rotation(text_angle)\n\n    marker = self.tick1line.get_marker()\n    if marker == mmarkers.TICKLEFT:\n        trans = mtransforms.Affine2D().rotate(tick_angle)\n    elif marker == '_':\n        trans = mtransforms.Affine2D().rotate(tick_angle + np.pi / 2)\n    elif marker == mmarkers.TICKRIGHT:\n        trans = mtransforms.Affine2D().scale(-1, 1).rotate(tick_angle)\n    else:\n        # Don't modify custom tick line markers.\n        trans = self.tick1line._marker._transform\n    self.tick1line._marker._transform = trans\n\n    if full:\n        self.label2.set_visible(False)\n        self.tick2line.set_visible(False)\n    angle = (thetamax * direction + offset) % 360 - 90\n    if direction > 0:\n        tick_angle = np.deg2rad(angle)\n    else:\n        tick_angle = np.deg2rad(angle + 180)\n    text_angle = (angle + 90) % 180 - 90  # between -90 and +90.\n    mode, user_angle = self._labelrotation\n    if mode == 'auto':\n        text_angle += user_angle\n    else:\n        text_angle = user_angle\n\n    ha, va = self._determine_anchor(mode, angle, direction < 0)\n    self.label2.set_ha(ha)\n    self.label2.set_va(va)\n    self.label2.set_rotation(text_angle)\n\n    marker = self.tick2line.get_marker()\n    if marker == mmarkers.TICKLEFT:\n        trans = mtransforms.Affine2D().rotate(tick_angle)\n    elif marker == '_':\n        trans = mtransforms.Affine2D().rotate(tick_angle + np.pi / 2)\n    elif marker == mmarkers.TICKRIGHT:\n        trans = mtransforms.Affine2D().scale(-1, 1).rotate(tick_angle)\n    else:\n        # Don't modify custom tick line markers.\n        trans = self.tick2line._marker._transform\n    self.tick2line._marker._transform = trans",
                "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.sticky_edges.y.append(0)",
                "def _get_tick(self, major):\n    if major:\n        tick_kw = self._major_tick_kw\n    else:\n        tick_kw = self._minor_tick_kw\n    return RadialTick(self.axes, 0, major=major, **tick_kw)",
                "def _wrap_locator_formatter(self):\n    self.set_major_locator(RadialLocator(self.get_major_locator(),\n                                         self.axes))\n    self.isDefault_majloc = True",
                "def cla(self):\n    super().cla()\n    self.set_ticks_position('none')\n    self._wrap_locator_formatter()",
                "def _set_scale(self, value, **kwargs):\n    super()._set_scale(value, **kwargs)\n    self._wrap_locator_formatter()",
                "def __init__(self, center, viewLim, originLim, **kwargs):\n    mtransforms.Bbox.__init__(self, [[0, 0], [1, 1]], **kwargs)\n    self._center = center\n    self._viewLim = viewLim\n    self._originLim = originLim\n    self.set_children(viewLim, originLim)",
                "def get_points(self):\n    # docstring inherited\n    if self._invalid:\n        points = self._viewLim.get_points().copy()\n        # Scale angular limits to work with Wedge.\n        points[:, 0] *= 180 / np.pi\n        if points[0, 0] > points[1, 0]:\n            points[:, 0] = points[::-1, 0]\n\n        # Scale radial limits based on origin radius.\n        points[:, 1] -= self._originLim.y0\n\n        # Scale radial limits to match axes limits.\n        rscale = 0.5 / points[1, 1]\n        points[:, 1] *= rscale\n        width = min(points[1, 1] - points[0, 1], 0.5)\n\n        # Generate bounding box for wedge.\n        wedge = mpatches.Wedge(self._center, points[1, 1],\n                               points[0, 0], points[1, 0],\n                               width=width)\n        self.update_from_path(wedge.get_path())\n\n        # Ensure equal aspect ratio.\n        w, h = self._points[1] - self._points[0]\n        deltah = max(w - h, 0) / 2\n        deltaw = max(h - w, 0) / 2\n        self._points += np.array([[-deltaw, -deltah], [deltaw, deltah]])\n\n        self._invalid = 0\n\n    return self._points",
                "def __init__(self, *args,\n             theta_offset=0, theta_direction=1, rlabel_position=22.5,\n             **kwargs):\n    # docstring inherited\n    self._default_theta_offset = theta_offset\n    self._default_theta_direction = theta_direction\n    self._default_rlabel_position = np.deg2rad(rlabel_position)\n    super().__init__(*args, **kwargs)\n    self.use_sticky_edges = True\n    self.set_aspect('equal', adjustable='box', anchor='C')\n    self.cla()",
                "def cla(self):\n    Axes.cla(self)\n\n    self.title.set_y(1.05)\n\n    start = self.spines.get('start', None)\n    if start:\n        start.set_visible(False)\n    end = self.spines.get('end', None)\n    if end:\n        end.set_visible(False)\n    self.set_xlim(0.0, 2 * np.pi)\n\n    self.grid(rcParams['polaraxes.grid'])\n    inner = self.spines.get('inner', None)\n    if inner:\n        inner.set_visible(False)\n\n    self.set_rorigin(None)\n    self.set_theta_offset(self._default_theta_offset)\n    self.set_theta_direction(self._default_theta_direction)",
                "def _init_axis(self):\n    # This is moved out of __init__ because non-separable axes don't use it\n    self.xaxis = ThetaAxis(self)\n    self.yaxis = RadialAxis(self)\n    # Calling polar_axes.xaxis.cla() or polar_axes.xaxis.cla()\n    # results in weird artifacts. Therefore we disable this for\n    # now.\n    # self.spines['polar'].register_axis(self.yaxis)\n    self._update_transScale()",
                "def _set_lim_and_transforms(self):\n    # A view limit where the minimum radius can be locked if the user\n    # specifies an alternate origin.\n    self._originViewLim = mtransforms.LockableBbox(self.viewLim)\n\n    # Handle angular offset and direction.\n    self._direction = mtransforms.Affine2D() \\\n        .scale(self._default_theta_direction, 1.0)\n    self._theta_offset = mtransforms.Affine2D() \\\n        .translate(self._default_theta_offset, 0.0)\n    self.transShift = self._direction + self._theta_offset\n    # A view limit shifted to the correct location after accounting for\n    # orientation and offset.\n    self._realViewLim = mtransforms.TransformedBbox(self.viewLim,\n                                                    self.transShift)\n\n    # Transforms the x and y axis separately by a scale factor\n    # It is assumed that this part will have non-linear components\n    self.transScale = mtransforms.TransformWrapper(\n        mtransforms.IdentityTransform())\n\n    # Scale view limit into a bbox around the selected wedge. This may be\n    # smaller than the usual unit axes rectangle if not plotting the full\n    # circle.\n    self.axesLim = _WedgeBbox((0.5, 0.5),\n                              self._realViewLim, self._originViewLim)\n\n    # Scale the wedge to fill the axes.\n    self.transWedge = mtransforms.BboxTransformFrom(self.axesLim)\n\n    # Scale the axes to fill the figure.\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n\n    # A (possibly non-linear) projection on the (already scaled)\n    # data.  This one is aware of rmin\n    self.transProjection = self.PolarTransform(\n        self,\n        _apply_theta_transforms=False)\n    # Add dependency on rorigin.\n    self.transProjection.set_children(self._originViewLim)\n\n    # An affine transformation on the data, generally to limit the\n    # range of the axes\n    self.transProjectionAffine = self.PolarAffine(self.transScale,\n                                                  self._originViewLim)\n\n    # The complete data transformation stack -- from data all the\n    # way to display coordinates\n    self.transData = (\n        self.transScale + self.transShift + self.transProjection +\n        (self.transProjectionAffine + self.transWedge + self.transAxes))\n\n    # This is the transform for theta-axis ticks.  It is\n    # equivalent to transData, except it always puts r == 0.0 and r == 1.0\n    # at the edge of the axis circles.\n    self._xaxis_transform = (\n        mtransforms.blended_transform_factory(\n            mtransforms.IdentityTransform(),\n            mtransforms.BboxTransformTo(self.viewLim)) +\n        self.transData)\n    # The theta labels are flipped along the radius, so that text 1 is on\n    # the outside by default. This should work the same as before.\n    flipr_transform = mtransforms.Affine2D() \\\n        .translate(0.0, -0.5) \\\n        .scale(1.0, -1.0) \\\n        .translate(0.0, 0.5)\n    self._xaxis_text_transform = flipr_transform + self._xaxis_transform\n\n    # This is the transform for r-axis ticks.  It scales the theta\n    # axis so the gridlines from 0.0 to 1.0, now go from thetamin to\n    # thetamax.\n    self._yaxis_transform = (\n        mtransforms.blended_transform_factory(\n            mtransforms.BboxTransformTo(self.viewLim),\n            mtransforms.IdentityTransform()) +\n        self.transData)\n    # The r-axis labels are put at an angle and padded in the r-direction\n    self._r_label_position = mtransforms.Affine2D() \\\n        .translate(self._default_rlabel_position, 0.0)\n    self._yaxis_text_transform = mtransforms.TransformWrapper(\n        self._r_label_position + self.transData)",
                "def get_xaxis_transform(self, which='grid'):\n    cbook._check_in_list(['tick1', 'tick2', 'grid'], which=which)\n    return self._xaxis_transform",
                "def get_xaxis_text1_transform(self, pad):\n    return self._xaxis_text_transform, 'center', 'center'",
                "def get_xaxis_text2_transform(self, pad):\n    return self._xaxis_text_transform, 'center', 'center'",
                "def get_yaxis_transform(self, which='grid'):\n    if which in ('tick1', 'tick2'):\n        return self._yaxis_text_transform\n    elif which == 'grid':\n        return self._yaxis_transform\n    else:\n        cbook._check_in_list(['tick1', 'tick2', 'grid'], which=which)",
                "def get_yaxis_text1_transform(self, pad):\n    thetamin, thetamax = self._realViewLim.intervalx\n    if _is_full_circle_rad(thetamin, thetamax):\n        return self._yaxis_text_transform, 'bottom', 'left'\n    elif self.get_theta_direction() > 0:\n        halign = 'left'\n        pad_shift = _ThetaShift(self, pad, 'min')\n    else:\n        halign = 'right'\n        pad_shift = _ThetaShift(self, pad, 'max')\n    return self._yaxis_text_transform + pad_shift, 'center', halign",
                "def get_yaxis_text2_transform(self, pad):\n    if self.get_theta_direction() > 0:\n        halign = 'right'\n        pad_shift = _ThetaShift(self, pad, 'max')\n    else:\n        halign = 'left'\n        pad_shift = _ThetaShift(self, pad, 'min')\n    return self._yaxis_text_transform + pad_shift, 'center', halign",
                "@cbook._delete_parameter(\"3.3\", \"args\")\n@cbook._delete_parameter(\"3.3\", \"kwargs\")\ndef draw(self, renderer, *args, **kwargs):\n    thetamin, thetamax = np.rad2deg(self._realViewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    rmin, rmax = ((self._realViewLim.intervaly - self.get_rorigin()) *\n                  self.get_rsign())\n    if isinstance(self.patch, mpatches.Wedge):\n        # Backwards-compatibility: Any subclassed Axes might override the\n        # patch to not be the Wedge that PolarAxes uses.\n        center = self.transWedge.transform((0.5, 0.5))\n        self.patch.set_center(center)\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n\n        edge, _ = self.transWedge.transform((1, 0))\n        radius = edge - center[0]\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n\n        inner_width = radius - width\n        inner = self.spines.get('inner', None)\n        if inner:\n            inner.set_visible(inner_width != 0.0)\n\n    visible = not _is_full_circle_deg(thetamin, thetamax)\n    # For backwards compatibility, any subclassed Axes might override the\n    # spines to not include start/end that PolarAxes uses.\n    start = self.spines.get('start', None)\n    end = self.spines.get('end', None)\n    if start:\n        start.set_visible(visible)\n    if end:\n        end.set_visible(visible)\n    if visible:\n        yaxis_text_transform = self._yaxis_transform\n    else:\n        yaxis_text_transform = self._r_label_position + self.transData\n    if self._yaxis_text_transform != yaxis_text_transform:\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n\n    Axes.draw(self, renderer, *args, **kwargs)",
                "def _gen_axes_patch(self):\n    return mpatches.Wedge((0.5, 0.5), 0.5, 0.0, 360.0)",
                "def _gen_axes_spines(self):\n    spines = OrderedDict([\n        ('polar', mspines.Spine.arc_spine(self, 'top',\n                                          (0.5, 0.5), 0.5, 0.0, 360.0)),\n        ('start', mspines.Spine.linear_spine(self, 'left')),\n        ('end', mspines.Spine.linear_spine(self, 'right')),\n        ('inner', mspines.Spine.arc_spine(self, 'bottom',\n                                          (0.5, 0.5), 0.0, 0.0, 360.0))\n    ])\n    spines['polar'].set_transform(self.transWedge + self.transAxes)\n    spines['inner'].set_transform(self.transWedge + self.transAxes)\n    spines['start'].set_transform(self._yaxis_transform)\n    spines['end'].set_transform(self._yaxis_transform)\n    return spines",
                "def set_thetamax(self, thetamax):\n    \"\"\"Set the maximum theta limit in degrees.\"\"\"\n    self.viewLim.x1 = np.deg2rad(thetamax)",
                "def get_thetamax(self):\n    \"\"\"Return the maximum theta limit in degrees.\"\"\"\n    return np.rad2deg(self.viewLim.xmax)",
                "def set_thetamin(self, thetamin):\n    \"\"\"Set the minimum theta limit in degrees.\"\"\"\n    self.viewLim.x0 = np.deg2rad(thetamin)",
                "def get_thetamin(self):\n    \"\"\"Get the minimum theta limit in degrees.\"\"\"\n    return np.rad2deg(self.viewLim.xmin)",
                "def set_thetalim(self, *args, **kwargs):\n    r\"\"\"\n    Set the minimum and maximum theta values.\n\n    Can take the following signatures:\n\n    - ``set_thetalim(minval, maxval)``: Set the limits in radians.\n    - ``set_thetalim(thetamin=minval, thetamax=maxval)``: Set the limits\n      in degrees.\n\n    where minval and maxval are the minimum and maximum limits. Values are\n    wrapped in to the range :math:`[0, 2\\pi]` (in radians), so for example\n    it is possible to do ``set_thetalim(-np.pi / 2, np.pi / 2)`` to have\n    an axes symmetric around 0. A ValueError is raised if the absolute\n    angle difference is larger than :math:`2\\pi`.\n    \"\"\"\n    thetamin = None\n    thetamax = None\n    left = None\n    right = None\n\n    if len(args) == 2:\n        if args[0] is not None and args[1] is not None:\n            left, right = args\n            if abs(right - left) > 2 * np.pi:\n                raise ValueError('The angle range must be <= 2 pi')\n\n    if 'thetamin' in kwargs:\n        thetamin = np.deg2rad(kwargs.pop('thetamin'))\n    if 'thetamax' in kwargs:\n        thetamax = np.deg2rad(kwargs.pop('thetamax'))\n\n    if thetamin is not None and thetamax is not None:\n        if abs(thetamax - thetamin) > 2 * np.pi:\n            raise ValueError('The angle range must be <= 360 degrees')\n    return tuple(np.rad2deg(self.set_xlim(left=left, right=right,\n                                          xmin=thetamin, xmax=thetamax)))",
                "def set_theta_offset(self, offset):\n    \"\"\"\n    Set the offset for the location of 0 in radians.\n    \"\"\"\n    mtx = self._theta_offset.get_matrix()\n    mtx[0, 2] = offset\n    self._theta_offset.invalidate()",
                "def get_theta_offset(self):\n    \"\"\"\n    Get the offset for the location of 0 in radians.\n    \"\"\"\n    return self._theta_offset.get_matrix()[0, 2]",
                "def set_theta_zero_location(self, loc, offset=0.0):\n    \"\"\"\n    Set the location of theta's zero.\n\n    This simply calls `set_theta_offset` with the correct value in radians.\n\n    Parameters\n    ----------\n    loc : str\n        May be one of \"N\", \"NW\", \"W\", \"SW\", \"S\", \"SE\", \"E\", or \"NE\".\n    offset : float, default: 0\n        An offset in degrees to apply from the specified *loc*. **Note:**\n        this offset is *always* applied counter-clockwise regardless of\n        the direction setting.\n    \"\"\"\n    mapping = {\n        'N': np.pi * 0.5,\n        'NW': np.pi * 0.75,\n        'W': np.pi,\n        'SW': np.pi * 1.25,\n        'S': np.pi * 1.5,\n        'SE': np.pi * 1.75,\n        'E': 0,\n        'NE': np.pi * 0.25}\n    return self.set_theta_offset(mapping[loc] + np.deg2rad(offset))",
                "def set_theta_direction(self, direction):\n    \"\"\"\n    Set the direction in which theta increases.\n\n    clockwise, -1:\n       Theta increases in the clockwise direction\n\n    counterclockwise, anticlockwise, 1:\n       Theta increases in the counterclockwise direction\n    \"\"\"\n    mtx = self._direction.get_matrix()\n    if direction in ('clockwise', -1):\n        mtx[0, 0] = -1\n    elif direction in ('counterclockwise', 'anticlockwise', 1):\n        mtx[0, 0] = 1\n    else:\n        cbook._check_in_list(\n            [-1, 1, 'clockwise', 'counterclockwise', 'anticlockwise'],\n            direction=direction)\n    self._direction.invalidate()",
                "def get_theta_direction(self):\n    \"\"\"\n    Get the direction in which theta increases.\n\n    -1:\n       Theta increases in the clockwise direction\n\n    1:\n       Theta increases in the counterclockwise direction\n    \"\"\"\n    return self._direction.get_matrix()[0, 0]",
                "def set_rmax(self, rmax):\n    \"\"\"\n    Set the outer radial limit.\n\n    Parameters\n    ----------\n    rmax : float\n    \"\"\"\n    self.viewLim.y1 = rmax",
                "def get_rmax(self):\n    \"\"\"\n    Returns\n    -------\n    float\n        Outer radial limit.\n    \"\"\"\n    return self.viewLim.ymax",
                "def set_rmin(self, rmin):\n    \"\"\"\n    Set the inner radial limit.\n\n    Parameters\n    ----------\n    rmin : float\n    \"\"\"\n    self.viewLim.y0 = rmin",
                "def get_rmin(self):\n    \"\"\"\n    Returns\n    -------\n    float\n        The inner radial limit.\n    \"\"\"\n    return self.viewLim.ymin",
                "def set_rorigin(self, rorigin):\n    \"\"\"\n    Update the radial origin.\n\n    Parameters\n    ----------\n    rorigin : float\n    \"\"\"\n    self._originViewLim.locked_y0 = rorigin",
                "def get_rorigin(self):\n    \"\"\"\n    Returns\n    -------\n    float\n    \"\"\"\n    return self._originViewLim.y0",
                "def get_rsign(self):\n    return np.sign(self._originViewLim.y1 - self._originViewLim.y0)",
                "def set_rlim(self, bottom=None, top=None, emit=True, auto=False, **kwargs):\n    \"\"\"\n    See `~.polar.PolarAxes.set_ylim`.\n    \"\"\"\n    if 'rmin' in kwargs:\n        if bottom is None:\n            bottom = kwargs.pop('rmin')\n        else:\n            raise ValueError('Cannot supply both positional \"bottom\"'\n                             'argument and kwarg \"rmin\"')\n    if 'rmax' in kwargs:\n        if top is None:\n            top = kwargs.pop('rmax')\n        else:\n            raise ValueError('Cannot supply both positional \"top\"'\n                             'argument and kwarg \"rmax\"')\n    return self.set_ylim(bottom=bottom, top=top, emit=emit, auto=auto,\n                         **kwargs)",
                "def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n             *, ymin=None, ymax=None):\n    \"\"\"\n    Set the data limits for the radial axis.\n\n    Parameters\n    ----------\n    bottom : float, optional\n        The bottom limit (default: None, which leaves the bottom\n        limit unchanged).\n        The bottom and top ylims may be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n    top : float, optional\n        The top limit (default: None, which leaves the top limit\n        unchanged).\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the y-axis. True turns on,\n        False turns off, None leaves unchanged.\n\n    ymin, ymax : float, optional\n        These arguments are deprecated and will be removed in a future\n        version.  They are equivalent to *bottom* and *top* respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n    \"\"\"\n    if ymin is not None:\n        if bottom is not None:\n            raise ValueError('Cannot supply both positional \"bottom\" '\n                             'argument and kwarg \"ymin\"')\n        else:\n            bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise ValueError('Cannot supply both positional \"top\" '\n                             'argument and kwarg \"ymax\"')\n        else:\n            top = ymax\n    if top is None and np.iterable(bottom):\n        bottom, top = bottom[0], bottom[1]\n    return super().set_ylim(bottom=bottom, top=top, emit=emit, auto=auto)",
                "def get_rlabel_position(self):\n    \"\"\"\n    Returns\n    -------\n    float\n        The theta position of the radius labels in degrees.\n    \"\"\"\n    return np.rad2deg(self._r_label_position.get_matrix()[0, 2])",
                "def set_rlabel_position(self, value):\n    \"\"\"\n    Update the theta position of the radius labels.\n\n    Parameters\n    ----------\n    value : number\n        The angular position of the radius labels in degrees.\n    \"\"\"\n    self._r_label_position.clear().translate(np.deg2rad(value), 0.0)",
                "def set_yscale(self, *args, **kwargs):\n    Axes.set_yscale(self, *args, **kwargs)\n    self.yaxis.set_major_locator(\n        self.RadialLocator(self.yaxis.get_major_locator(), self))",
                "def set_rscale(self, *args, **kwargs):\n    return Axes.set_yscale(self, *args, **kwargs)",
                "def set_rticks(self, *args, **kwargs):\n    return Axes.set_yticks(self, *args, **kwargs)",
                "def set_thetagrids(self, angles, labels=None, fmt=None, **kwargs):\n    \"\"\"\n    Set the theta gridlines in a polar plot.\n\n    Parameters\n    ----------\n    angles : tuple with floats, degrees\n        The angles of the theta gridlines.\n\n    labels : tuple with strings or None\n        The labels to use at each theta gridline. The\n        `.projections.polar.ThetaFormatter` will be used if None.\n\n    fmt : str or None\n        Format string used in `matplotlib.ticker.FormatStrFormatter`.\n        For example '%f'. Note that the angle that is used is in\n        radians.\n\n    Returns\n    -------\n    lines : list of `.lines.Line2D`\n        The theta gridlines.\n\n    labels : list of `.text.Text`\n        The tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        *kwargs* are optional `~.Text` properties for the labels.\n\n    See Also\n    --------\n    .PolarAxes.set_rgrids\n    .Axis.get_gridlines\n    .Axis.get_ticklabels\n    \"\"\"\n\n    # Make sure we take into account unitized data\n    angles = self.convert_yunits(angles)\n    angles = np.deg2rad(angles)\n    self.set_xticks(angles)\n    if labels is not None:\n        self.set_xticklabels(labels)\n    elif fmt is not None:\n        self.xaxis.set_major_formatter(mticker.FormatStrFormatter(fmt))\n    for t in self.xaxis.get_ticklabels():\n        t.update(kwargs)\n    return self.xaxis.get_ticklines(), self.xaxis.get_ticklabels()",
                "def set_rgrids(self, radii, labels=None, angle=None, fmt=None, **kwargs):\n    \"\"\"\n    Set the radial gridlines on a polar plot.\n\n    Parameters\n    ----------\n    radii : tuple with floats\n        The radii for the radial gridlines\n\n    labels : tuple with strings or None\n        The labels to use at each radial gridline. The\n        `matplotlib.ticker.ScalarFormatter` will be used if None.\n\n    angle : float\n        The angular position of the radius labels in degrees.\n\n    fmt : str or None\n        Format string used in `matplotlib.ticker.FormatStrFormatter`.\n        For example '%f'.\n\n    Returns\n    -------\n    lines : list of `.lines.Line2D`\n        The radial gridlines.\n\n    labels : list of `.text.Text`\n        The tick labels.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        *kwargs* are optional `~.Text` properties for the labels.\n\n    See Also\n    --------\n    .PolarAxes.set_thetagrids\n    .Axis.get_gridlines\n    .Axis.get_ticklabels\n    \"\"\"\n    # Make sure we take into account unitized data\n    radii = self.convert_xunits(radii)\n    radii = np.asarray(radii)\n\n    self.set_yticks(radii)\n    if labels is not None:\n        self.set_yticklabels(labels)\n    elif fmt is not None:\n        self.yaxis.set_major_formatter(mticker.FormatStrFormatter(fmt))\n    if angle is None:\n        angle = self.get_rlabel_position()\n    self.set_rlabel_position(angle)\n    for t in self.yaxis.get_ticklabels():\n        t.update(kwargs)\n    return self.yaxis.get_gridlines(), self.yaxis.get_ticklabels()",
                "def set_xscale(self, scale, *args, **kwargs):\n    if scale != 'linear':\n        raise NotImplementedError(\n            \"You can not set the xscale on a polar plot.\")",
                "def format_coord(self, theta, r):\n    # docstring inherited\n    if theta < 0:\n        theta += 2 * np.pi\n    theta /= np.pi\n    return ('\\N{GREEK SMALL LETTER THETA}=%0.3f\\N{GREEK SMALL LETTER PI} '\n            '(%0.3f\\N{DEGREE SIGN}), r=%0.3f') % (theta, theta * 180.0, r)",
                "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the data itself.  For a polar plot,\n    this should always be 1.0\n    \"\"\"\n    return 1.0",
                "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n\n    Polar axes do not support zoom boxes.\n    \"\"\"\n    return False",
                "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports the pan/zoom button functionality.\n\n    For polar axes, this is slightly misleading. Both panning and\n    zooming are performed by the same button. Panning is performed\n    in azimuth while zooming is done along the radial.\n    \"\"\"\n    return True",
                "def start_pan(self, x, y, button):\n    angle = np.deg2rad(self.get_rlabel_position())\n    mode = ''\n    if button == 1:\n        epsilon = np.pi / 45.0\n        t, r = self.transData.inverted().transform((x, y))\n        if angle - epsilon <= t <= angle + epsilon:\n            mode = 'drag_r_labels'\n    elif button == 3:\n        mode = 'zoom'\n\n    self._pan_start = types.SimpleNamespace(\n        rmax=self.get_rmax(),\n        trans=self.transData.frozen(),\n        trans_inverse=self.transData.inverted().frozen(),\n        r_label_angle=self.get_rlabel_position(),\n        x=x,\n        y=y,\n        mode=mode)",
                "def end_pan(self):\n    del self._pan_start",
                "def drag_pan(self, button, key, x, y):\n    p = self._pan_start\n\n    if p.mode == 'drag_r_labels':\n        (startt, startr), (t, r) = p.trans_inverse.transform(\n            [(p.x, p.y), (x, y)])\n\n        # Deal with theta\n        dt = np.rad2deg(startt - t)\n        self.set_rlabel_position(p.r_label_angle - dt)\n\n        trans, vert1, horiz1 = self.get_yaxis_text1_transform(0.0)\n        trans, vert2, horiz2 = self.get_yaxis_text2_transform(0.0)\n        for t in self.yaxis.majorTicks + self.yaxis.minorTicks:\n            t.label1.set_va(vert1)\n            t.label1.set_ha(horiz1)\n            t.label2.set_va(vert2)\n            t.label2.set_ha(horiz2)\n\n    elif p.mode == 'zoom':\n        (startt, startr), (t, r) = p.trans_inverse.transform(\n            [(p.x, p.y), (x, y)])\n\n        # Deal with r\n        scale = r / startr\n        self.set_rmax(p.rmax / scale)"
            ],
            "inscope_function_signatures": [
                "_is_full_circle_deg(thetamin, thetamax)",
                "_is_full_circle_rad(thetamin, thetamax)",
                "__init__(self, axis=None, use_rmin=True, _apply_theta_transforms=True)",
                "transform_non_affine(self, tr)",
                "transform_path_non_affine(self, path)",
                "inverted(self)",
                "__init__(self, scale_transform, limits)",
                "get_matrix(self)",
                "__init__(self, axis=None, use_rmin=True, _apply_theta_transforms=True)",
                "transform_non_affine(self, xy)",
                "inverted(self)",
                "__call__(self, x, pos=None)",
                "__init__(self, axis)",
                "get_view_interval(self)",
                "set_view_interval(self, vmin, vmax)",
                "get_minpos(self)",
                "get_data_interval(self)",
                "set_data_interval(self, vmin, vmax)",
                "get_tick_space(self)",
                "__init__(self, base)",
                "set_axis(self, axis)",
                "__call__(self)",
                "autoscale(self)",
                "pan(self, numsteps)",
                "refresh(self)",
                "view_limits(self, vmin, vmax)",
                "zoom(self, direction)",
                "__init__(self, axes, *args, **kwargs)",
                "_apply_params(self, **kw)",
                "_update_padding(self, pad, angle)",
                "update_position(self, loc)",
                "_get_tick(self, major)",
                "_wrap_locator_formatter(self)",
                "cla(self)",
                "_set_scale(self, value, **kwargs)",
                "_copy_tick_props(self, src, dest)",
                "__init__(self, base, axes=None)",
                "__call__(self)",
                "autoscale(self)",
                "pan(self, numsteps)",
                "zoom(self, direction)",
                "refresh(self)",
                "nonsingular(self, vmin, vmax)",
                "view_limits(self, vmin, vmax)",
                "__init__(self, axes, pad, mode)",
                "get_matrix(self)",
                "__init__(self, *args, **kwargs)",
                "_determine_anchor(self, mode, angle, start)",
                "update_position(self, loc)",
                "__init__(self, *args, **kwargs)",
                "_get_tick(self, major)",
                "_wrap_locator_formatter(self)",
                "cla(self)",
                "_set_scale(self, value, **kwargs)",
                "__init__(self, center, viewLim, originLim, **kwargs)",
                "get_points(self)",
                "__init__(self, *args, **kwargs)",
                "cla(self)",
                "_init_axis(self)",
                "_set_lim_and_transforms(self)",
                "get_xaxis_transform(self, which='grid')",
                "get_xaxis_text1_transform(self, pad)",
                "get_xaxis_text2_transform(self, pad)",
                "get_yaxis_transform(self, which='grid')",
                "get_yaxis_text1_transform(self, pad)",
                "get_yaxis_text2_transform(self, pad)",
                "draw(self, renderer, *args, **kwargs)",
                "_gen_axes_patch(self)",
                "_gen_axes_spines(self)",
                "set_thetamax(self, thetamax)",
                "get_thetamax(self)",
                "set_thetamin(self, thetamin)",
                "get_thetamin(self)",
                "set_thetalim(self, *args, **kwargs)",
                "set_theta_offset(self, offset)",
                "get_theta_offset(self)",
                "set_theta_zero_location(self, loc, offset=0.0)",
                "set_theta_direction(self, direction)",
                "get_theta_direction(self)",
                "set_rmax(self, rmax)",
                "get_rmax(self)",
                "set_rmin(self, rmin)",
                "get_rmin(self)",
                "set_rorigin(self, rorigin)",
                "get_rorigin(self)",
                "get_rsign(self)",
                "set_rlim(self, bottom=None, top=None, emit=True, auto=False, **kwargs)",
                "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                "get_rlabel_position(self)",
                "set_rlabel_position(self, value)",
                "set_yscale(self, *args, **kwargs)",
                "set_rscale(self, *args, **kwargs)",
                "set_rticks(self, *args, **kwargs)",
                "set_thetagrids(self, angles, labels=None, fmt=None, **kwargs)",
                "set_rgrids(self, radii, labels=None, angle=None, fmt=None, **kwargs)",
                "set_xscale(self, scale, *args, **kwargs)",
                "format_coord(self, theta, r)",
                "get_data_ratio(self)",
                "can_zoom(self)",
                "can_pan(self)",
                "start_pan(self, x, y, button)",
                "end_pan(self)",
                "drag_pan(self, button, key, x, y)"
            ],
            "variables_in_file": {
                "mtransforms.Transform": [
                    144,
                    17,
                    153,
                    28
                ],
                "mtransforms": [
                    128,
                    512,
                    900,
                    901,
                    902,
                    135,
                    905,
                    907,
                    655,
                    144,
                    17,
                    657,
                    659,
                    153,
                    284,
                    28,
                    158,
                    286,
                    33,
                    831,
                    834,
                    324,
                    836,
                    326,
                    841,
                    461,
                    334,
                    846,
                    336,
                    464,
                    720,
                    847,
                    856,
                    859,
                    734,
                    481,
                    740,
                    488,
                    111,
                    623,
                    625,
                    627,
                    884,
                    885,
                    886,
                    122,
                    890
                ],
                "input_dims": [
                    24,
                    149
                ],
                "output_dims": [
                    24,
                    149
                ],
                "mtransforms.Transform.__init__": [
                    153,
                    28
                ],
                "self": [
                    28,
                    29,
                    30,
                    31,
                    43,
                    44,
                    45,
                    46,
                    47,
                    54,
                    63,
                    70,
                    71,
                    72,
                    97,
                    100,
                    107,
                    108,
                    122,
                    123,
                    124,
                    125,
                    126,
                    132,
                    133,
                    138,
                    139,
                    140,
                    141,
                    153,
                    154,
                    155,
                    156,
                    170,
                    171,
                    172,
                    174,
                    175,
                    176,
                    181,
                    182,
                    191,
                    204,
                    207,
                    210,
                    213,
                    216,
                    219,
                    222,
                    234,
                    235,
                    238,
                    239,
                    242,
                    246,
                    250,
                    254,
                    258,
                    262,
                    266,
                    284,
                    286,
                    289,
                    291,
                    292,
                    294,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    310,
                    311,
                    312,
                    313,
                    317,
                    322,
                    329,
                    330,
                    332,
                    339,
                    340,
                    342,
                    351,
                    352,
                    356,
                    357,
                    358,
                    374,
                    376,
                    377,
                    380,
                    381,
                    382,
                    383,
                    387,
                    388,
                    392,
                    418,
                    419,
                    424,
                    425,
                    426,
                    427,
                    430,
                    432,
                    436,
                    440,
                    444,
                    449,
                    454,
                    457,
                    481,
                    483,
                    484,
                    485,
                    486,
                    491,
                    492,
                    494,
                    495,
                    496,
                    499,
                    500,
                    501,
                    502,
                    504,
                    511,
                    512,
                    528,
                    529,
                    587,
                    606,
                    613,
                    614,
                    616,
                    617,
                    618,
                    619,
                    621,
                    630,
                    631,
                    634,
                    635,
                    642,
                    648,
                    649,
                    650,
                    651,
                    653,
                    662,
                    663,
                    678,
                    682,
                    684,
                    685,
                    688,
                    689,
                    690,
                    694,
                    695,
                    699,
                    734,
                    735,
                    736,
                    737,
                    738,
                    744,
                    745,
                    752,
                    760,
                    763,
                    766,
                    769,
                    771,
                    773,
                    788,
                    789,
                    790,
                    792,
                    793,
                    794,
                    797,
                    799,
                    801,
                    804,
                    807,
                    809,
                    810,
                    814,
                    815,
                    816,
                    820,
                    821,
                    826,
                    831,
                    834,
                    835,
                    836,
                    837,
                    838,
                    841,
                    842,
                    846,
                    852,
                    853,
                    856,
                    859,
                    863,
                    864,
                    867,
                    871,
                    872,
                    876,
                    877,
                    878,
                    883,
                    886,
                    887,
                    894,
                    899,
                    901,
                    903,
                    905,
                    906,
                    907,
                    908,
                    912,
                    915,
                    918,
                    922,
                    924,
                    929,
                    931,
                    932,
                    934,
                    937,
                    938,
                    941,
                    943,
                    946,
                    947,
                    952,
                    955,
                    956,
                    957,
                    960,
                    961,
                    962,
                    963,
                    965,
                    968,
                    969,
                    972,
                    979,
                    980,
                    986,
                    988,
                    989,
                    990,
                    991,
                    992,
                    994,
                    1001,
                    1003,
                    1004,
                    1005,
                    1008,
                    1009,
                    1010,
                    1011,
                    1016,
                    1020,
                    1024,
                    1028,
                    1065,
                    1072,
                    1074,
                    1080,
                    1106,
                    1118,
                    1127,
                    1139,
                    1149,
                    1158,
                    1168,
                    1177,
                    1187,
                    1195,
                    1198,
                    1216,
                    1278,
                    1289,
                    1292,
                    1293,
                    1294,
                    1297,
                    1300,
                    1341,
                    1343,
                    1345,
                    1347,
                    1348,
                    1350,
                    1392,
                    1395,
                    1397,
                    1399,
                    1401,
                    1402,
                    1403,
                    1405,
                    1448,
                    1452,
                    1458,
                    1459,
                    1460,
                    1461,
                    1462,
                    1468,
                    1471,
                    1479,
                    1481,
                    1482,
                    1483,
                    1495
                ],
                "self._axis": [
                    154,
                    29,
                    170,
                    43,
                    44,
                    45,
                    46,
                    47,
                    171,
                    172,
                    174,
                    175,
                    176,
                    181,
                    70,
                    71,
                    72,
                    204,
                    207,
                    210,
                    213,
                    216,
                    219,
                    222,
                    107
                ],
                "axis": [
                    154,
                    204,
                    29,
                    238
                ],
                "self._use_rmin": [
                    70,
                    107,
                    46,
                    174,
                    181,
                    155,
                    30
                ],
                "use_rmin": [
                    155,
                    30
                ],
                "self._apply_theta_transforms": [
                    170,
                    43,
                    108,
                    182,
                    156,
                    31
                ],
                "_apply_theta_transforms": [
                    156,
                    31
                ],
                "__str__": [
                    128,
                    33,
                    740,
                    488,
                    158
                ],
                "mtransforms._make_str_method": [
                    128,
                    33,
                    740,
                    488,
                    158
                ],
                "t": [
                    40,
                    44,
                    45,
                    1452,
                    1453,
                    49,
                    61,
                    62,
                    1474,
                    1348,
                    69,
                    1349,
                    1478,
                    1483,
                    1484,
                    1485,
                    1486,
                    1487,
                    1490,
                    1403,
                    1404
                ],
                "r": [
                    1418,
                    166,
                    40,
                    1452,
                    47,
                    48,
                    49,
                    175,
                    176,
                    177,
                    61,
                    65,
                    1474,
                    71,
                    76,
                    80,
                    1490,
                    1494,
                    87,
                    91
                ],
                "np.transpose": [
                    40
                ],
                "np": [
                    640,
                    769,
                    1024,
                    1028,
                    261,
                    262,
                    1415,
                    1416,
                    1289,
                    1020,
                    657,
                    790,
                    1054,
                    1278,
                    1058,
                    1060,
                    166,
                    167,
                    40,
                    807,
                    1063,
                    1065,
                    1448,
                    173,
                    1198,
                    1451,
                    48,
                    49,
                    177,
                    308,
                    309,
                    952,
                    1342,
                    319,
                    192,
                    193,
                    320,
                    69,
                    453,
                    199,
                    1478,
                    1098,
                    1099,
                    1100,
                    717,
                    1101,
                    207,
                    592,
                    1102,
                    210,
                    1103,
                    1105,
                    213,
                    1106,
                    216,
                    602,
                    219,
                    604,
                    95,
                    747,
                    494,
                    625,
                    1393,
                    1267,
                    244,
                    246,
                    1016,
                    505,
                    506,
                    508,
                    509,
                    638
                ],
                "tr": [
                    40
                ],
                "self._axis.get_theta_direction": [
                    172,
                    44
                ],
                "self._axis.get_theta_offset": [
                    171,
                    45
                ],
                "self._axis.get_rorigin": [
                    175,
                    71,
                    47
                ],
                "self._axis.get_rsign": [
                    72,
                    176,
                    47
                ],
                "np.where": [
                    48
                ],
                "np.nan": [
                    48
                ],
                "np.column_stack": [
                    49,
                    177
                ],
                "np.cos": [
                    49,
                    508,
                    308,
                    505
                ],
                "np.sin": [
                    49,
                    506,
                    309,
                    509
                ],
                "len": [
                    1051,
                    98,
                    101,
                    53
                ],
                "path": [
                    96,
                    58,
                    53,
                    54
                ],
                "path._interpolation_steps": [
                    96,
                    53
                ],
                "Path": [
                    64,
                    98,
                    103,
                    75,
                    79,
                    54,
                    86,
                    90,
                    60
                ],
                "self.transform_non_affine": [
                    97,
                    100,
                    54,
                    63
                ],
                "path.vertices": [
                    54
                ],
                "path.codes": [
                    54
                ],
                "xys": [
                    97,
                    100,
                    103,
                    76,
                    80,
                    55,
                    87,
                    91,
                    63
                ],
                "codes": [
                    64,
                    98,
                    101,
                    103,
                    77,
                    81,
                    56,
                    88,
                    92
                ],
                "last_t": [
                    69,
                    102,
                    57,
                    62,
                    95
                ],
                "last_r": [
                    65,
                    57,
                    102,
                    95
                ],
                "trs": [
                    97,
                    98,
                    100,
                    101,
                    102,
                    95,
                    58,
                    59,
                    61,
                    94,
                    63
                ],
                "c": [
                    58,
                    60,
                    101
                ],
                "path.iter_segments": [
                    58
                ],
                "trs.reshape": [
                    59
                ],
                "Path.LINETO": [
                    64,
                    98,
                    60
                ],
                "xys.extend": [
                    97,
                    100,
                    76,
                    80,
                    87,
                    91,
                    63
                ],
                "codes.append": [
                    64
                ],
                "last_td": [
                    69,
                    73,
                    74,
                    75,
                    78,
                    79,
                    85,
                    86,
                    89,
                    90
                ],
                "td": [
                    69,
                    73,
                    74,
                    79,
                    85,
                    90
                ],
                "np.rad2deg": [
                    192,
                    1028,
                    69,
                    261,
                    199,
                    1478,
                    1065,
                    207,
                    592,
                    213,
                    952,
                    216,
                    1020,
                    1278,
                    319
                ],
                "arc": [
                    75,
                    76,
                    77,
                    79,
                    80,
                    81,
                    86,
                    87,
                    88,
                    90,
                    91,
                    92
                ],
                "Path.arc": [
                    90,
                    75,
                    86,
                    79
                ],
                "arc.vertices": [
                    80,
                    91,
                    76,
                    87
                ],
                "codes.extend": [
                    98,
                    101,
                    77,
                    81,
                    88,
                    92
                ],
                "arc.codes": [
                    88,
                    81,
                    92,
                    77
                ],
                "cbook.simple_linear_interpolation": [
                    94
                ],
                "cbook": [
                    446,
                    1124,
                    264,
                    911,
                    434,
                    926,
                    949,
                    438,
                    950,
                    248,
                    442,
                    252,
                    94
                ],
                "np.row_stack": [
                    95
                ],
                "PolarAxes.InvertedPolarTransform": [
                    107,
                    1503
                ],
                "PolarAxes": [
                    1504,
                    1505,
                    1506,
                    107,
                    181,
                    1501,
                    1502,
                    1503
                ],
                "mtransforms.Affine2DBase": [
                    122,
                    111
                ],
                "mtransforms.Affine2DBase.__init__": [
                    122
                ],
                "self._scale_transform": [
                    123,
                    133
                ],
                "scale_transform": [
                    123,
                    125
                ],
                "self._limits": [
                    124,
                    133
                ],
                "limits": [
                    124,
                    125
                ],
                "self.set_children": [
                    738,
                    483,
                    125
                ],
                "self._mtx": [
                    138,
                    141,
                    126
                ],
                "self._invalid": [
                    771,
                    132,
                    744,
                    491,
                    140
                ],
                "limits_scaled": [
                    133,
                    134
                ],
                "self._limits.transformed": [
                    133
                ],
                "yscale": [
                    136,
                    134
                ],
                "limits_scaled.ymax": [
                    134
                ],
                "limits_scaled.ymin": [
                    134
                ],
                "affine": [
                    138,
                    135
                ],
                "translate": [
                    836,
                    135,
                    905,
                    1289,
                    890
                ],
                "scale": [
                    1408,
                    834,
                    324,
                    326,
                    135,
                    334,
                    336,
                    627,
                    659,
                    1494,
                    1495,
                    890
                ],
                "mtransforms.Affine2D": [
                    834,
                    324,
                    836,
                    326,
                    135,
                    905,
                    334,
                    623,
                    336,
                    625,
                    655,
                    627,
                    657,
                    659,
                    890
                ],
                "affine.get_matrix": [
                    138
                ],
                "self._inverted": [
                    139
                ],
                "x": [
                    1475,
                    165,
                    166,
                    199,
                    167,
                    1452,
                    1491,
                    1463
                ],
                "y": [
                    1475,
                    165,
                    166,
                    167,
                    1452,
                    1491,
                    1464
                ],
                "xy.T": [
                    165
                ],
                "xy": [
                    165
                ],
                "np.hypot": [
                    166
                ],
                "theta": [
                    1414,
                    167,
                    1415,
                    1416,
                    1418,
                    171,
                    172,
                    173,
                    177
                ],
                "np.arctan2": [
                    167
                ],
                "np.pi": [
                    1415,
                    1416,
                    657,
                    1054,
                    167,
                    807,
                    1063,
                    1451,
                    173,
                    320,
                    1098,
                    1099,
                    1100,
                    717,
                    1101,
                    1102,
                    1103,
                    1105,
                    747,
                    625,
                    244,
                    505,
                    506,
                    508,
                    509
                ],
                "PolarAxes.PolarTransform": [
                    1501,
                    181
                ],
                "mticker.Formatter": [
                    185
                ],
                "mticker": [
                    407,
                    225,
                    1347,
                    1399,
                    185
                ],
                "vmin": [
                    192,
                    261,
                    262,
                    453,
                    454,
                    457,
                    458,
                    460,
                    461,
                    210,
                    219,
                    191
                ],
                "vmax": [
                    192,
                    261,
                    262,
                    453,
                    454,
                    457,
                    458,
                    461,
                    210,
                    219,
                    191
                ],
                "self.axis.get_view_interval": [
                    242,
                    191
                ],
                "self.axis": [
                    235,
                    238,
                    239,
                    242,
                    191
                ],
                "d": [
                    192,
                    193
                ],
                "abs": [
                    192,
                    708,
                    1063,
                    717,
                    1054
                ],
                "digits": [
                    193,
                    199
                ],
                "max": [
                    768,
                    193,
                    767
                ],
                "int": [
                    193
                ],
                "np.log10": [
                    193
                ],
                "format": [
                    198
                ],
                "self._axis.get_view_interval": [
                    207
                ],
                "self._axis.set_view_interval": [
                    210
                ],
                "np.deg2rad": [
                    640,
                    1024,
                    1058,
                    1342,
                    1060,
                    262,
                    1448,
                    1289,
                    494,
                    210,
                    1106,
                    246,
                    790,
                    1016,
                    602,
                    219,
                    604,
                    638
                ],
                "self._axis.get_minpos": [
                    213
                ],
                "self._axis.get_data_interval": [
                    216
                ],
                "self._axis.set_data_interval": [
                    219
                ],
                "self._axis.get_tick_space": [
                    222
                ],
                "mticker.Locator": [
                    225,
                    407
                ],
                "self.base": [
                    449,
                    258,
                    418,
                    262,
                    454,
                    457,
                    234,
                    235,
                    266,
                    430,
                    239,
                    432,
                    436,
                    246,
                    440,
                    250,
                    444,
                    254
                ],
                "base": [
                    418,
                    234
                ],
                "self.base.axis": [
                    235
                ],
                "_AxisWrapper": [
                    235,
                    238
                ],
                "self.base.set_axis": [
                    239
                ],
                "lim": [
                    242,
                    243
                ],
                "_is_full_circle_deg": [
                    976,
                    593,
                    243
                ],
                "np.arange": [
                    244
                ],
                "self.base.autoscale": [
                    250,
                    436
                ],
                "cbook.deprecated": [
                    264,
                    434,
                    438,
                    248,
                    442,
                    252,
                    446
                ],
                "self.base.pan": [
                    440,
                    254
                ],
                "numsteps": [
                    440,
                    254
                ],
                "self.base.refresh": [
                    449,
                    258
                ],
                "self.base.view_limits": [
                    457,
                    262
                ],
                "self.base.zoom": [
                    266,
                    444
                ],
                "direction": [
                    636,
                    1121,
                    1126,
                    616,
                    648,
                    266,
                    590,
                    596,
                    600,
                    601,
                    444,
                    637,
                    1119
                ],
                "maxis.XTick": [
                    269
                ],
                "maxis": [
                    362,
                    515,
                    269,
                    666
                ],
                "self._text1_translate": [
                    291,
                    301,
                    302,
                    310,
                    311,
                    284
                ],
                "mtransforms.ScaledTranslation": [
                    512,
                    481,
                    464,
                    284,
                    286
                ],
                "axes.figure.dpi_scale_trans": [
                    482,
                    285,
                    287
                ],
                "axes.figure": [
                    482,
                    285,
                    287
                ],
                "axes": [
                    288,
                    482,
                    419,
                    483,
                    484,
                    358,
                    359,
                    587,
                    588,
                    589,
                    590,
                    591,
                    596,
                    285,
                    317,
                    318,
                    287
                ],
                "self._text2_translate": [
                    294,
                    304,
                    305,
                    312,
                    313,
                    286
                ],
                "__init__": [
                    288,
                    791,
                    677,
                    527
                ],
                "super": [
                    288,
                    386,
                    677,
                    391,
                    297,
                    586,
                    398,
                    527,
                    693,
                    1269,
                    791,
                    698,
                    316
                ],
                "args": [
                    288,
                    994,
                    677,
                    1292,
                    527,
                    1297,
                    1300,
                    791,
                    1051,
                    1052,
                    1053
                ],
                "kwargs": [
                    391,
                    1292,
                    527,
                    1297,
                    1300,
                    791,
                    288,
                    1057,
                    1058,
                    1059,
                    1060,
                    677,
                    1204,
                    1206,
                    1210,
                    698,
                    1212,
                    1217,
                    1349,
                    734,
                    994,
                    1404
                ],
                "self.label1.set": [
                    289
                ],
                "self.label1": [
                    289,
                    291,
                    613,
                    614,
                    617,
                    618,
                    619,
                    300,
                    302,
                    528,
                    351
                ],
                "self.label1.get_transform": [
                    291,
                    300
                ],
                "self.label2.set": [
                    292
                ],
                "self.label2": [
                    352,
                    292,
                    294,
                    649,
                    650,
                    651,
                    303,
                    305,
                    529,
                    634
                ],
                "self.label2.get_transform": [
                    294,
                    303
                ],
                "_apply_params": [
                    297
                ],
                "kw": [
                    297
                ],
                "trans": [
                    655,
                    401,
                    402,
                    403,
                    404,
                    657,
                    659,
                    662,
                    663,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    324,
                    326,
                    329,
                    330,
                    1481,
                    1482,
                    334,
                    336,
                    339,
                    340,
                    623,
                    625,
                    627,
                    630,
                    631
                ],
                "trans.contains_branch": [
                    304,
                    301
                ],
                "self.label1.set_transform": [
                    302
                ],
                "self.label2.set_transform": [
                    305
                ],
                "padx": [
                    308,
                    310,
                    312,
                    505,
                    508,
                    511
                ],
                "pad": [
                    481,
                    356,
                    357,
                    486,
                    934,
                    937,
                    943,
                    946,
                    308,
                    309
                ],
                "angle": [
                    636,
                    640,
                    641,
                    648,
                    1401,
                    1402,
                    536,
                    541,
                    547,
                    549,
                    551,
                    1448,
                    553,
                    555,
                    557,
                    1453,
                    559,
                    561,
                    308,
                    309,
                    566,
                    568,
                    570,
                    572,
                    318,
                    319,
                    320,
                    574,
                    576,
                    578,
                    324,
                    580,
                    326,
                    334,
                    336,
                    596,
                    600,
                    602,
                    604,
                    605,
                    616,
                    493,
                    500,
                    502,
                    1400,
                    505,
                    506,
                    508,
                    509,
                    638
                ],
                "pady": [
                    309,
                    310,
                    312,
                    506,
                    509,
                    511
                ],
                "self._text1_translate._t": [
                    310
                ],
                "self._text1_translate.invalidate": [
                    311
                ],
                "self._text2_translate._t": [
                    312
                ],
                "self._text2_translate.invalidate": [
                    313
                ],
                "update_position": [
                    586,
                    316
                ],
                "loc": [
                    586,
                    316,
                    1106,
                    318
                ],
                "self.axes": [
                    484,
                    587,
                    685,
                    494,
                    495,
                    496,
                    689,
                    500,
                    502,
                    377,
                    317
                ],
                "axes.get_theta_direction": [
                    590,
                    358,
                    318
                ],
                "axes.get_theta_offset": [
                    591,
                    318,
                    359
                ],
                "text_angle": [
                    352,
                    608,
                    610,
                    641,
                    605,
                    644,
                    351,
                    646,
                    619,
                    651,
                    344,
                    346,
                    347,
                    348,
                    349,
                    350,
                    319
                ],
                "marker": [
                    322,
                    323,
                    325,
                    332,
                    333,
                    621,
                    335,
                    622,
                    624,
                    626,
                    653,
                    654,
                    656,
                    658
                ],
                "self.tick1line.get_marker": [
                    322,
                    621
                ],
                "self.tick1line": [
                    322,
                    329,
                    330,
                    621,
                    630,
                    631
                ],
                "mmarkers.TICKUP": [
                    323,
                    333
                ],
                "mmarkers": [
                    323,
                    325,
                    333,
                    622,
                    335,
                    654,
                    626,
                    658
                ],
                "rotate": [
                    324,
                    326,
                    334,
                    623,
                    336,
                    625,
                    655,
                    627,
                    657,
                    659
                ],
                "mmarkers.TICKDOWN": [
                    325,
                    335
                ],
                "self.tick1line._marker._transform": [
                    329,
                    330,
                    630,
                    631
                ],
                "self.tick1line._marker": [
                    329,
                    330,
                    630,
                    631
                ],
                "self.tick2line.get_marker": [
                    332,
                    653
                ],
                "self.tick2line": [
                    332,
                    653,
                    339,
                    340,
                    662,
                    663,
                    635
                ],
                "self.tick2line._marker._transform": [
                    339,
                    340,
                    662,
                    663
                ],
                "self.tick2line._marker": [
                    339,
                    340,
                    662,
                    663
                ],
                "mode": [
                    642,
                    643,
                    485,
                    616,
                    648,
                    1449,
                    1454,
                    1456,
                    343,
                    534,
                    342,
                    1465,
                    606,
                    607
                ],
                "user_angle": [
                    608,
                    610,
                    642,
                    644,
                    646,
                    606,
                    342,
                    344,
                    350
                ],
                "self._labelrotation": [
                    606,
                    642,
                    342
                ],
                "self.label1.set_rotation": [
                    619,
                    351
                ],
                "self.label2.set_rotation": [
                    352,
                    651
                ],
                "self._pad": [
                    356
                ],
                "self._update_padding": [
                    357
                ],
                "self._loc": [
                    358
                ],
                "maxis.XAxis": [
                    362
                ],
                "__name__": [
                    369,
                    673
                ],
                "axis_name": [
                    674,
                    370
                ],
                "major": [
                    377,
                    681,
                    373,
                    685
                ],
                "tick_kw": [
                    682,
                    684,
                    685,
                    374,
                    376,
                    377
                ],
                "self._major_tick_kw": [
                    682,
                    374
                ],
                "self._minor_tick_kw": [
                    376,
                    684
                ],
                "ThetaTick": [
                    377
                ],
                "self.set_major_locator": [
                    688,
                    380
                ],
                "ThetaLocator": [
                    1506,
                    380
                ],
                "self.get_major_locator": [
                    688,
                    380
                ],
                "self.set_major_formatter": [
                    381
                ],
                "ThetaFormatter": [
                    1504,
                    381
                ],
                "self.isDefault_majloc": [
                    690,
                    382
                ],
                "self.isDefault_majfmt": [
                    383
                ],
                "cla": [
                    386,
                    693
                ],
                "self.set_ticks_position": [
                    387,
                    694
                ],
                "self._wrap_locator_formatter": [
                    392,
                    699,
                    388,
                    695
                ],
                "_set_scale": [
                    698,
                    391
                ],
                "value": [
                    1289,
                    698,
                    391
                ],
                "src": [
                    396,
                    398
                ],
                "dest": [
                    396,
                    398,
                    401,
                    402,
                    403,
                    404
                ],
                "_copy_tick_props": [
                    398
                ],
                "dest._get_text1_transform": [
                    401
                ],
                "dest.label1.set_transform": [
                    402
                ],
                "dest.label1": [
                    402
                ],
                "dest._text1_translate": [
                    402
                ],
                "dest._get_text2_transform": [
                    403
                ],
                "dest.label2.set_transform": [
                    404
                ],
                "dest.label2": [
                    404
                ],
                "dest._text2_translate": [
                    404
                ],
                "self._axes": [
                    419,
                    424,
                    425,
                    426,
                    427
                ],
                "show_all": [
                    428,
                    429,
                    422
                ],
                "_is_full_circle_rad": [
                    425,
                    930
                ],
                "self._axes.viewLim.intervalx": [
                    425
                ],
                "self._axes.viewLim": [
                    425
                ],
                "rorigin": [
                    432,
                    426,
                    427,
                    1187
                ],
                "self._axes.get_rorigin": [
                    426
                ],
                "self._axes.get_rsign": [
                    426
                ],
                "self._axes.get_rmin": [
                    427
                ],
                "tick": [
                    432
                ],
                "np.inf": [
                    453
                ],
                "self.base.nonsingular": [
                    454
                ],
                "min": [
                    460,
                    757,
                    967
                ],
                "mtransforms.nonsingular": [
                    461
                ],
                "mtransforms.ScaledTranslation.__init__": [
                    481
                ],
                "axes._realViewLim": [
                    483
                ],
                "self.mode": [
                    485,
                    492,
                    499,
                    501,
                    504
                ],
                "self.pad": [
                    486,
                    511
                ],
                "self.axes.get_rlabel_position": [
                    494
                ],
                "self.axes.get_theta_direction": [
                    495
                ],
                "self.axes.get_theta_offset": [
                    496
                ],
                "self.axes._realViewLim.xmin": [
                    500
                ],
                "self.axes._realViewLim": [
                    500,
                    502
                ],
                "self.axes._realViewLim.xmax": [
                    502
                ],
                "self._t": [
                    511
                ],
                "mtransforms.ScaledTranslation.get_matrix": [
                    512
                ],
                "maxis.YTick": [
                    515
                ],
                "self.label1.set_rotation_mode": [
                    528
                ],
                "self.label2.set_rotation_mode": [
                    529
                ],
                "start": [
                    801,
                    546,
                    803,
                    802,
                    979,
                    981,
                    982,
                    535
                ],
                "thetamin": [
                    1024,
                    929,
                    930,
                    962,
                    708,
                    1058,
                    1062,
                    1063,
                    1066,
                    588,
                    717,
                    976,
                    593,
                    952,
                    1046,
                    600,
                    953,
                    954
                ],
                "axes.get_thetamin": [
                    588
                ],
                "thetamax": [
                    929,
                    930,
                    963,
                    708,
                    1060,
                    1062,
                    1063,
                    1066,
                    717,
                    589,
                    976,
                    593,
                    1047,
                    952,
                    953,
                    954,
                    636,
                    1016
                ],
                "axes.get_thetamax": [
                    589
                ],
                "offset_rad": [
                    592,
                    591
                ],
                "offset": [
                    592,
                    1073,
                    1106,
                    597,
                    600,
                    636
                ],
                "full": [
                    593,
                    595,
                    612,
                    633
                ],
                "axes.get_rlabel_position": [
                    596
                ],
                "tick_angle": [
                    640,
                    623,
                    655,
                    625,
                    657,
                    627,
                    659,
                    598,
                    602,
                    604,
                    638
                ],
                "ha": [
                    613,
                    616,
                    617,
                    648,
                    649
                ],
                "self.label1.get_horizontalalignment": [
                    613
                ],
                "va": [
                    614,
                    616,
                    648,
                    618,
                    650
                ],
                "self.label1.get_verticalalignment": [
                    614
                ],
                "self._determine_anchor": [
                    616,
                    648
                ],
                "self.label1.set_horizontalalignment": [
                    617
                ],
                "self.label1.set_verticalalignment": [
                    618
                ],
                "mmarkers.TICKLEFT": [
                    654,
                    622
                ],
                "mmarkers.TICKRIGHT": [
                    626,
                    658
                ],
                "self.label2.set_visible": [
                    634
                ],
                "self.tick2line.set_visible": [
                    635
                ],
                "self.label2.set_ha": [
                    649
                ],
                "self.label2.set_va": [
                    650
                ],
                "maxis.YAxis": [
                    666
                ],
                "self.sticky_edges.y.append": [
                    678
                ],
                "self.sticky_edges.y": [
                    678
                ],
                "self.sticky_edges": [
                    678
                ],
                "RadialTick": [
                    685
                ],
                "RadialLocator": [
                    688,
                    1505
                ],
                "mtransforms.Bbox": [
                    720,
                    734
                ],
                "mtransforms.Bbox.__init__": [
                    734
                ],
                "self._center": [
                    760,
                    735
                ],
                "center": [
                    960,
                    961,
                    966,
                    735
                ],
                "self._viewLim": [
                    736,
                    745
                ],
                "viewLim": [
                    736,
                    738
                ],
                "self._originLim": [
                    752,
                    737
                ],
                "originLim": [
                    737,
                    738
                ],
                "points": [
                    745,
                    747,
                    748,
                    749,
                    752,
                    755,
                    756,
                    757,
                    760,
                    761
                ],
                "copy": [
                    745
                ],
                "self._viewLim.get_points": [
                    745
                ],
                "self._originLim.y0": [
                    752
                ],
                "rscale": [
                    755,
                    756
                ],
                "width": [
                    967,
                    969,
                    971,
                    757,
                    762
                ],
                "wedge": [
                    760,
                    763
                ],
                "mpatches.Wedge": [
                    760,
                    997,
                    957
                ],
                "mpatches": [
                    760,
                    997,
                    957
                ],
                "self.update_from_path": [
                    763
                ],
                "wedge.get_path": [
                    763
                ],
                "w": [
                    768,
                    766,
                    767
                ],
                "h": [
                    768,
                    766,
                    767
                ],
                "self._points": [
                    769,
                    773,
                    766
                ],
                "deltah": [
                    769,
                    767
                ],
                "deltaw": [
                    768,
                    769
                ],
                "np.array": [
                    769
                ],
                "Axes": [
                    994,
                    776,
                    1292,
                    1297,
                    1300,
                    797
                ],
                "name": [
                    782
                ],
                "self._default_theta_offset": [
                    788,
                    837,
                    815
                ],
                "theta_offset": [
                    788
                ],
                "self._default_theta_direction": [
                    816,
                    835,
                    789
                ],
                "theta_direction": [
                    789
                ],
                "self._default_rlabel_position": [
                    906,
                    790
                ],
                "rlabel_position": [
                    790
                ],
                "self.use_sticky_edges": [
                    792
                ],
                "self.set_aspect": [
                    793
                ],
                "self.cla": [
                    794
                ],
                "Axes.cla": [
                    797
                ],
                "self.title.set_y": [
                    799
                ],
                "self.title": [
                    799
                ],
                "self.spines.get": [
                    801,
                    804,
                    810,
                    972,
                    979,
                    980
                ],
                "self.spines": [
                    801,
                    804,
                    810,
                    972,
                    979,
                    980
                ],
                "start.set_visible": [
                    803,
                    982
                ],
                "end": [
                    804,
                    805,
                    806,
                    980,
                    983,
                    984
                ],
                "end.set_visible": [
                    984,
                    806
                ],
                "self.set_xlim": [
                    1065,
                    807
                ],
                "self.grid": [
                    809
                ],
                "rcParams": [
                    809
                ],
                "inner": [
                    810,
                    811,
                    972,
                    812,
                    973,
                    974
                ],
                "inner.set_visible": [
                    812,
                    974
                ],
                "self.set_rorigin": [
                    814
                ],
                "self.set_theta_offset": [
                    1106,
                    815
                ],
                "self.set_theta_direction": [
                    816
                ],
                "self.xaxis": [
                    1347,
                    820,
                    1350,
                    1348
                ],
                "ThetaAxis": [
                    820
                ],
                "self.yaxis": [
                    992,
                    1483,
                    1293,
                    1294,
                    821,
                    1399,
                    1403,
                    1405,
                    991
                ],
                "RadialAxis": [
                    821
                ],
                "self._update_transScale": [
                    826
                ],
                "self._originViewLim": [
                    1187,
                    867,
                    872,
                    1195,
                    1198,
                    853,
                    831
                ],
                "mtransforms.LockableBbox": [
                    831
                ],
                "self.viewLim": [
                    1024,
                    1028,
                    901,
                    1158,
                    841,
                    1168,
                    886,
                    1016,
                    1177,
                    1020,
                    1149,
                    831
                ],
                "self._direction": [
                    834,
                    838,
                    1127,
                    1139,
                    1118
                ],
                "self._theta_offset": [
                    836,
                    838,
                    1072,
                    1074,
                    1080
                ],
                "self.transShift": [
                    842,
                    877,
                    838
                ],
                "self._realViewLim": [
                    929,
                    841,
                    853,
                    952,
                    955
                ],
                "mtransforms.TransformedBbox": [
                    841
                ],
                "self.transScale": [
                    877,
                    846,
                    871
                ],
                "mtransforms.TransformWrapper": [
                    907,
                    846
                ],
                "mtransforms.IdentityTransform": [
                    885,
                    902,
                    847
                ],
                "self.axesLim": [
                    856,
                    852
                ],
                "_WedgeBbox": [
                    852
                ],
                "self.transWedge": [
                    960,
                    965,
                    878,
                    1008,
                    1009,
                    856
                ],
                "mtransforms.BboxTransformFrom": [
                    856
                ],
                "self.transAxes": [
                    1008,
                    1009,
                    859,
                    878
                ],
                "mtransforms.BboxTransformTo": [
                    859,
                    901,
                    886
                ],
                "self.bbox": [
                    859
                ],
                "self.transProjection": [
                    867,
                    877,
                    863
                ],
                "self.PolarTransform": [
                    863
                ],
                "self.transProjection.set_children": [
                    867
                ],
                "self.transProjectionAffine": [
                    878,
                    871
                ],
                "self.PolarAffine": [
                    871
                ],
                "self.transData": [
                    903,
                    908,
                    876,
                    1452,
                    1460,
                    1461,
                    887,
                    988
                ],
                "self._xaxis_transform": [
                    912,
                    883,
                    894
                ],
                "mtransforms.blended_transform_factory": [
                    900,
                    884
                ],
                "flipr_transform": [
                    890,
                    894
                ],
                "self._xaxis_text_transform": [
                    918,
                    915,
                    894
                ],
                "self._yaxis_transform": [
                    899,
                    1010,
                    1011,
                    986,
                    924
                ],
                "self._r_label_position": [
                    1289,
                    905,
                    908,
                    988,
                    1278
                ],
                "self._yaxis_text_transform": [
                    931,
                    938,
                    907,
                    947,
                    922,
                    989,
                    990
                ],
                "cbook._check_in_list": [
                    1124,
                    926,
                    911
                ],
                "which": [
                    921,
                    923,
                    926,
                    911
                ],
                "self._realViewLim.intervalx": [
                    952,
                    929
                ],
                "self.get_theta_direction": [
                    932,
                    941
                ],
                "halign": [
                    933,
                    936,
                    938,
                    942,
                    945,
                    947
                ],
                "pad_shift": [
                    934,
                    937,
                    938,
                    943,
                    946,
                    947
                ],
                "_ThetaShift": [
                    937,
                    946,
                    934,
                    943
                ],
                "rmin": [
                    1168,
                    955,
                    967
                ],
                "rmax": [
                    955,
                    1149,
                    967
                ],
                "self._realViewLim.intervaly": [
                    955
                ],
                "self.get_rorigin": [
                    955
                ],
                "self.get_rsign": [
                    956
                ],
                "isinstance": [
                    957
                ],
                "self.patch": [
                    992,
                    961,
                    962,
                    963,
                    968,
                    969,
                    957
                ],
                "self.transWedge.transform": [
                    960,
                    965
                ],
                "self.patch.set_center": [
                    961
                ],
                "self.patch.set_theta1": [
                    962
                ],
                "self.patch.set_theta2": [
                    963
                ],
                "edge": [
                    965,
                    966
                ],
                "_": [
                    965
                ],
                "radius": [
                    968,
                    971,
                    966,
                    967
                ],
                "self.patch.set_radius": [
                    968
                ],
                "self.patch.set_width": [
                    969
                ],
                "inner_width": [
                    971,
                    974
                ],
                "visible": [
                    976,
                    985,
                    982,
                    984
                ],
                "yaxis_text_transform": [
                    986,
                    988,
                    989,
                    990
                ],
                "self._yaxis_text_transform.set": [
                    990
                ],
                "self.yaxis.reset_ticks": [
                    991
                ],
                "self.yaxis.set_clip_path": [
                    992
                ],
                "Axes.draw": [
                    994
                ],
                "renderer": [
                    994
                ],
                "cbook._delete_parameter": [
                    949,
                    950
                ],
                "spines": [
                    1000,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012
                ],
                "OrderedDict": [
                    1000
                ],
                "mspines.Spine.arc_spine": [
                    1001,
                    1005
                ],
                "mspines.Spine": [
                    1001,
                    1003,
                    1004,
                    1005
                ],
                "mspines": [
                    1001,
                    1003,
                    1004,
                    1005
                ],
                "mspines.Spine.linear_spine": [
                    1003,
                    1004
                ],
                "set_transform": [
                    1008,
                    1009,
                    1010,
                    1011
                ],
                "self.viewLim.x1": [
                    1016
                ],
                "self.viewLim.xmax": [
                    1020
                ],
                "self.viewLim.x0": [
                    1024
                ],
                "self.viewLim.xmin": [
                    1028
                ],
                "left": [
                    1048,
                    1065,
                    1053,
                    1054
                ],
                "right": [
                    1049,
                    1053,
                    1054,
                    1065
                ],
                "ValueError": [
                    1064,
                    1257,
                    1263,
                    1208,
                    1214,
                    1055
                ],
                "kwargs.pop": [
                    1058,
                    1060,
                    1212,
                    1206
                ],
                "tuple": [
                    1065
                ],
                "mtx": [
                    1120,
                    1122,
                    1072,
                    1073,
                    1118
                ],
                "self._theta_offset.get_matrix": [
                    1072,
                    1080
                ],
                "self._theta_offset.invalidate": [
                    1074
                ],
                "mapping": [
                    1097,
                    1106
                ],
                "self._direction.get_matrix": [
                    1139,
                    1118
                ],
                "self._direction.invalidate": [
                    1127
                ],
                "self.viewLim.y1": [
                    1149
                ],
                "self.viewLim.ymax": [
                    1158
                ],
                "self.viewLim.y0": [
                    1168
                ],
                "self.viewLim.ymin": [
                    1177
                ],
                "self._originViewLim.locked_y0": [
                    1187
                ],
                "self._originViewLim.y0": [
                    1195,
                    1198
                ],
                "np.sign": [
                    1198
                ],
                "self._originViewLim.y1": [
                    1198
                ],
                "bottom": [
                    1216,
                    1256,
                    1260,
                    1267,
                    1268,
                    1205,
                    1206,
                    1269
                ],
                "top": [
                    1216,
                    1262,
                    1266,
                    1267,
                    1268,
                    1269,
                    1211,
                    1212
                ],
                "self.set_ylim": [
                    1216
                ],
                "emit": [
                    1216,
                    1269
                ],
                "auto": [
                    1216,
                    1269
                ],
                "ymin": [
                    1260,
                    1255
                ],
                "ymax": [
                    1266,
                    1261
                ],
                "np.iterable": [
                    1267
                ],
                "set_ylim": [
                    1269
                ],
                "self._r_label_position.get_matrix": [
                    1278
                ],
                "self._r_label_position.clear": [
                    1289
                ],
                "Axes.set_yscale": [
                    1297,
                    1292
                ],
                "self.yaxis.set_major_locator": [
                    1293
                ],
                "self.RadialLocator": [
                    1294
                ],
                "self.yaxis.get_major_locator": [
                    1294
                ],
                "Axes.set_yticks": [
                    1300
                ],
                "angles": [
                    1341,
                    1342,
                    1343
                ],
                "self.convert_yunits": [
                    1341
                ],
                "self.set_xticks": [
                    1343
                ],
                "labels": [
                    1344,
                    1345,
                    1396,
                    1397
                ],
                "self.set_xticklabels": [
                    1345
                ],
                "fmt": [
                    1346,
                    1347,
                    1398,
                    1399
                ],
                "self.xaxis.set_major_formatter": [
                    1347
                ],
                "mticker.FormatStrFormatter": [
                    1347,
                    1399
                ],
                "self.xaxis.get_ticklabels": [
                    1348,
                    1350
                ],
                "t.update": [
                    1404,
                    1349
                ],
                "self.xaxis.get_ticklines": [
                    1350
                ],
                "radii": [
                    1392,
                    1393,
                    1395
                ],
                "self.convert_xunits": [
                    1392
                ],
                "np.asarray": [
                    1393
                ],
                "self.set_yticks": [
                    1395
                ],
                "self.set_yticklabels": [
                    1397
                ],
                "self.yaxis.set_major_formatter": [
                    1399
                ],
                "self.get_rlabel_position": [
                    1448,
                    1401,
                    1462
                ],
                "self.set_rlabel_position": [
                    1402,
                    1479
                ],
                "self.yaxis.get_ticklabels": [
                    1403,
                    1405
                ],
                "self.yaxis.get_gridlines": [
                    1405
                ],
                "NotImplementedError": [
                    1409
                ],
                "button": [
                    1450,
                    1455
                ],
                "epsilon": [
                    1451,
                    1453
                ],
                "transform": [
                    1452
                ],
                "self.transData.inverted": [
                    1452,
                    1461
                ],
                "self._pan_start": [
                    1458,
                    1468,
                    1471
                ],
                "types.SimpleNamespace": [
                    1458
                ],
                "types": [
                    1458
                ],
                "self.get_rmax": [
                    1459
                ],
                "self.transData.frozen": [
                    1460
                ],
                "frozen": [
                    1461
                ],
                "p": [
                    1473,
                    1474,
                    1475,
                    1479,
                    1489,
                    1490,
                    1491,
                    1495,
                    1471
                ],
                "p.mode": [
                    1473,
                    1489
                ],
                "startt": [
                    1490,
                    1474,
                    1478
                ],
                "startr": [
                    1490,
                    1474,
                    1494
                ],
                "p.trans_inverse.transform": [
                    1490,
                    1474
                ],
                "p.trans_inverse": [
                    1490,
                    1474
                ],
                "p.x": [
                    1475,
                    1491
                ],
                "p.y": [
                    1475,
                    1491
                ],
                "dt": [
                    1478,
                    1479
                ],
                "p.r_label_angle": [
                    1479
                ],
                "vert1": [
                    1481,
                    1484
                ],
                "horiz1": [
                    1481,
                    1485
                ],
                "self.get_yaxis_text1_transform": [
                    1481
                ],
                "vert2": [
                    1482,
                    1486
                ],
                "horiz2": [
                    1482,
                    1487
                ],
                "self.get_yaxis_text2_transform": [
                    1482
                ],
                "self.yaxis.majorTicks": [
                    1483
                ],
                "self.yaxis.minorTicks": [
                    1483
                ],
                "t.label1.set_va": [
                    1484
                ],
                "t.label1": [
                    1484,
                    1485
                ],
                "t.label1.set_ha": [
                    1485
                ],
                "t.label2.set_va": [
                    1486
                ],
                "t.label2": [
                    1486,
                    1487
                ],
                "t.label2.set_ha": [
                    1487
                ],
                "self.set_rmax": [
                    1495
                ],
                "p.rmax": [
                    1495
                ],
                "PolarTransform": [
                    1501
                ],
                "PolarAxes.PolarAffine": [
                    1502
                ],
                "PolarAffine": [
                    1502
                ],
                "InvertedPolarTransform": [
                    1503
                ],
                "PolarAxes.ThetaFormatter": [
                    1504
                ],
                "PolarAxes.RadialLocator": [
                    1505
                ],
                "PolarAxes.ThetaLocator": [
                    1506
                ]
            },
            "filtered_variables_in_file": {
                "mtransforms.Transform": [
                    144,
                    17,
                    153,
                    28
                ],
                "mtransforms": [
                    128,
                    512,
                    900,
                    901,
                    902,
                    135,
                    905,
                    907,
                    655,
                    144,
                    17,
                    657,
                    659,
                    153,
                    284,
                    28,
                    158,
                    286,
                    33,
                    831,
                    834,
                    324,
                    836,
                    326,
                    841,
                    461,
                    334,
                    846,
                    336,
                    464,
                    720,
                    847,
                    856,
                    859,
                    734,
                    481,
                    740,
                    488,
                    111,
                    623,
                    625,
                    627,
                    884,
                    885,
                    886,
                    122,
                    890
                ],
                "input_dims": [
                    24,
                    149
                ],
                "output_dims": [
                    24,
                    149
                ],
                "mtransforms.Transform.__init__": [
                    153,
                    28
                ],
                "self": [
                    28,
                    29,
                    30,
                    31,
                    43,
                    44,
                    45,
                    46,
                    47,
                    54,
                    63,
                    70,
                    71,
                    72,
                    97,
                    100,
                    107,
                    108,
                    122,
                    123,
                    124,
                    125,
                    126,
                    132,
                    133,
                    138,
                    139,
                    140,
                    141,
                    153,
                    154,
                    155,
                    156,
                    170,
                    171,
                    172,
                    174,
                    175,
                    176,
                    181,
                    182,
                    191,
                    204,
                    207,
                    210,
                    213,
                    216,
                    219,
                    222,
                    234,
                    235,
                    238,
                    239,
                    242,
                    246,
                    250,
                    254,
                    258,
                    262,
                    266,
                    284,
                    286,
                    289,
                    291,
                    292,
                    294,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    310,
                    311,
                    312,
                    313,
                    317,
                    322,
                    329,
                    330,
                    332,
                    339,
                    340,
                    342,
                    351,
                    352,
                    356,
                    357,
                    358,
                    374,
                    376,
                    377,
                    380,
                    381,
                    382,
                    383,
                    387,
                    388,
                    392,
                    418,
                    419,
                    424,
                    425,
                    426,
                    427,
                    430,
                    432,
                    436,
                    440,
                    444,
                    449,
                    454,
                    457,
                    481,
                    483,
                    484,
                    485,
                    486,
                    491,
                    492,
                    494,
                    495,
                    496,
                    499,
                    500,
                    501,
                    502,
                    504,
                    511,
                    512,
                    528,
                    529,
                    587,
                    606,
                    613,
                    614,
                    616,
                    617,
                    618,
                    619,
                    621,
                    630,
                    631,
                    634,
                    635,
                    642,
                    648,
                    649,
                    650,
                    651,
                    653,
                    662,
                    663,
                    678,
                    682,
                    684,
                    685,
                    688,
                    689,
                    690,
                    694,
                    695,
                    699,
                    734,
                    735,
                    736,
                    737,
                    738,
                    744,
                    745,
                    752,
                    760,
                    763,
                    766,
                    769,
                    771,
                    773,
                    788,
                    789,
                    790,
                    792,
                    793,
                    794,
                    797,
                    799,
                    801,
                    804,
                    807,
                    809,
                    810,
                    814,
                    815,
                    816,
                    820,
                    821,
                    826,
                    831,
                    834,
                    835,
                    836,
                    837,
                    838,
                    841,
                    842,
                    846,
                    852,
                    853,
                    856,
                    859,
                    863,
                    864,
                    867,
                    871,
                    872,
                    876,
                    877,
                    878,
                    883,
                    886,
                    887,
                    894,
                    899,
                    901,
                    903,
                    905,
                    906,
                    907,
                    908,
                    912,
                    915,
                    918,
                    922,
                    924,
                    929,
                    931,
                    932,
                    934,
                    937,
                    938,
                    941,
                    943,
                    946,
                    947,
                    952,
                    955,
                    956,
                    957,
                    960,
                    961,
                    962,
                    963,
                    965,
                    968,
                    969,
                    972,
                    979,
                    980,
                    986,
                    988,
                    989,
                    990,
                    991,
                    992,
                    994,
                    1001,
                    1003,
                    1004,
                    1005,
                    1008,
                    1009,
                    1010,
                    1011,
                    1016,
                    1020,
                    1024,
                    1028,
                    1065,
                    1072,
                    1074,
                    1080,
                    1106,
                    1118,
                    1127,
                    1139,
                    1149,
                    1158,
                    1168,
                    1177,
                    1187,
                    1195,
                    1198,
                    1216,
                    1278,
                    1289,
                    1292,
                    1293,
                    1294,
                    1297,
                    1300,
                    1341,
                    1343,
                    1345,
                    1347,
                    1348,
                    1350,
                    1392,
                    1395,
                    1397,
                    1399,
                    1401,
                    1402,
                    1403,
                    1405,
                    1448,
                    1452,
                    1458,
                    1459,
                    1460,
                    1461,
                    1462,
                    1468,
                    1471,
                    1479,
                    1481,
                    1482,
                    1483,
                    1495
                ],
                "self._axis": [
                    154,
                    29,
                    170,
                    43,
                    44,
                    45,
                    46,
                    47,
                    171,
                    172,
                    174,
                    175,
                    176,
                    181,
                    70,
                    71,
                    72,
                    204,
                    207,
                    210,
                    213,
                    216,
                    219,
                    222,
                    107
                ],
                "axis": [
                    154,
                    204,
                    29,
                    238
                ],
                "self._use_rmin": [
                    70,
                    107,
                    46,
                    174,
                    181,
                    155,
                    30
                ],
                "use_rmin": [
                    155,
                    30
                ],
                "self._apply_theta_transforms": [
                    170,
                    43,
                    108,
                    182,
                    156,
                    31
                ],
                "_apply_theta_transforms": [
                    156,
                    31
                ],
                "__str__": [
                    128,
                    33,
                    740,
                    488,
                    158
                ],
                "mtransforms._make_str_method": [
                    128,
                    33,
                    740,
                    488,
                    158
                ],
                "t": [
                    40,
                    44,
                    45,
                    1452,
                    1453,
                    49,
                    61,
                    62,
                    1474,
                    1348,
                    69,
                    1349,
                    1478,
                    1483,
                    1484,
                    1485,
                    1486,
                    1487,
                    1490,
                    1403,
                    1404
                ],
                "r": [
                    1418,
                    166,
                    40,
                    1452,
                    47,
                    48,
                    49,
                    175,
                    176,
                    177,
                    61,
                    65,
                    1474,
                    71,
                    76,
                    80,
                    1490,
                    1494,
                    87,
                    91
                ],
                "np.transpose": [
                    40
                ],
                "np": [
                    640,
                    769,
                    1024,
                    1028,
                    261,
                    262,
                    1415,
                    1416,
                    1289,
                    1020,
                    657,
                    790,
                    1054,
                    1278,
                    1058,
                    1060,
                    166,
                    167,
                    40,
                    807,
                    1063,
                    1065,
                    1448,
                    173,
                    1198,
                    1451,
                    48,
                    49,
                    177,
                    308,
                    309,
                    952,
                    1342,
                    319,
                    192,
                    193,
                    320,
                    69,
                    453,
                    199,
                    1478,
                    1098,
                    1099,
                    1100,
                    717,
                    1101,
                    207,
                    592,
                    1102,
                    210,
                    1103,
                    1105,
                    213,
                    1106,
                    216,
                    602,
                    219,
                    604,
                    95,
                    747,
                    494,
                    625,
                    1393,
                    1267,
                    244,
                    246,
                    1016,
                    505,
                    506,
                    508,
                    509,
                    638
                ],
                "tr": [
                    40
                ],
                "self._axis.get_theta_direction": [
                    172,
                    44
                ],
                "self._axis.get_theta_offset": [
                    171,
                    45
                ],
                "self._axis.get_rorigin": [
                    175,
                    71,
                    47
                ],
                "self._axis.get_rsign": [
                    72,
                    176,
                    47
                ],
                "np.where": [
                    48
                ],
                "np.nan": [
                    48
                ],
                "np.column_stack": [
                    49,
                    177
                ],
                "np.cos": [
                    49,
                    508,
                    308,
                    505
                ],
                "np.sin": [
                    49,
                    506,
                    309,
                    509
                ],
                "path": [
                    96,
                    58,
                    53,
                    54
                ],
                "path._interpolation_steps": [
                    96,
                    53
                ],
                "Path": [
                    64,
                    98,
                    103,
                    75,
                    79,
                    54,
                    86,
                    90,
                    60
                ],
                "self.transform_non_affine": [
                    97,
                    100,
                    54,
                    63
                ],
                "path.vertices": [
                    54
                ],
                "path.codes": [
                    54
                ],
                "xys": [
                    97,
                    100,
                    103,
                    76,
                    80,
                    55,
                    87,
                    91,
                    63
                ],
                "codes": [
                    64,
                    98,
                    101,
                    103,
                    77,
                    81,
                    56,
                    88,
                    92
                ],
                "last_t": [
                    69,
                    102,
                    57,
                    62,
                    95
                ],
                "last_r": [
                    65,
                    57,
                    102,
                    95
                ],
                "trs": [
                    97,
                    98,
                    100,
                    101,
                    102,
                    95,
                    58,
                    59,
                    61,
                    94,
                    63
                ],
                "c": [
                    58,
                    60,
                    101
                ],
                "path.iter_segments": [
                    58
                ],
                "trs.reshape": [
                    59
                ],
                "Path.LINETO": [
                    64,
                    98,
                    60
                ],
                "xys.extend": [
                    97,
                    100,
                    76,
                    80,
                    87,
                    91,
                    63
                ],
                "codes.append": [
                    64
                ],
                "last_td": [
                    69,
                    73,
                    74,
                    75,
                    78,
                    79,
                    85,
                    86,
                    89,
                    90
                ],
                "td": [
                    69,
                    73,
                    74,
                    79,
                    85,
                    90
                ],
                "np.rad2deg": [
                    192,
                    1028,
                    69,
                    261,
                    199,
                    1478,
                    1065,
                    207,
                    592,
                    213,
                    952,
                    216,
                    1020,
                    1278,
                    319
                ],
                "arc": [
                    75,
                    76,
                    77,
                    79,
                    80,
                    81,
                    86,
                    87,
                    88,
                    90,
                    91,
                    92
                ],
                "Path.arc": [
                    90,
                    75,
                    86,
                    79
                ],
                "arc.vertices": [
                    80,
                    91,
                    76,
                    87
                ],
                "codes.extend": [
                    98,
                    101,
                    77,
                    81,
                    88,
                    92
                ],
                "arc.codes": [
                    88,
                    81,
                    92,
                    77
                ],
                "cbook.simple_linear_interpolation": [
                    94
                ],
                "cbook": [
                    446,
                    1124,
                    264,
                    911,
                    434,
                    926,
                    949,
                    438,
                    950,
                    248,
                    442,
                    252,
                    94
                ],
                "np.row_stack": [
                    95
                ],
                "PolarAxes.InvertedPolarTransform": [
                    107,
                    1503
                ],
                "PolarAxes": [
                    1504,
                    1505,
                    1506,
                    107,
                    181,
                    1501,
                    1502,
                    1503
                ],
                "mtransforms.Affine2DBase": [
                    122,
                    111
                ],
                "mtransforms.Affine2DBase.__init__": [
                    122
                ],
                "self._scale_transform": [
                    123,
                    133
                ],
                "scale_transform": [
                    123,
                    125
                ],
                "self._limits": [
                    124,
                    133
                ],
                "limits": [
                    124,
                    125
                ],
                "self.set_children": [
                    738,
                    483,
                    125
                ],
                "self._mtx": [
                    138,
                    141,
                    126
                ],
                "self._invalid": [
                    771,
                    132,
                    744,
                    491,
                    140
                ],
                "limits_scaled": [
                    133,
                    134
                ],
                "self._limits.transformed": [
                    133
                ],
                "yscale": [
                    136,
                    134
                ],
                "limits_scaled.ymax": [
                    134
                ],
                "limits_scaled.ymin": [
                    134
                ],
                "affine": [
                    138,
                    135
                ],
                "translate": [
                    836,
                    135,
                    905,
                    1289,
                    890
                ],
                "scale": [
                    1408,
                    834,
                    324,
                    326,
                    135,
                    334,
                    336,
                    627,
                    659,
                    1494,
                    1495,
                    890
                ],
                "mtransforms.Affine2D": [
                    834,
                    324,
                    836,
                    326,
                    135,
                    905,
                    334,
                    623,
                    336,
                    625,
                    655,
                    627,
                    657,
                    659,
                    890
                ],
                "affine.get_matrix": [
                    138
                ],
                "self._inverted": [
                    139
                ],
                "x": [
                    1475,
                    165,
                    166,
                    199,
                    167,
                    1452,
                    1491,
                    1463
                ],
                "y": [
                    1475,
                    165,
                    166,
                    167,
                    1452,
                    1491,
                    1464
                ],
                "xy.T": [
                    165
                ],
                "xy": [
                    165
                ],
                "np.hypot": [
                    166
                ],
                "theta": [
                    1414,
                    167,
                    1415,
                    1416,
                    1418,
                    171,
                    172,
                    173,
                    177
                ],
                "np.arctan2": [
                    167
                ],
                "np.pi": [
                    1415,
                    1416,
                    657,
                    1054,
                    167,
                    807,
                    1063,
                    1451,
                    173,
                    320,
                    1098,
                    1099,
                    1100,
                    717,
                    1101,
                    1102,
                    1103,
                    1105,
                    747,
                    625,
                    244,
                    505,
                    506,
                    508,
                    509
                ],
                "PolarAxes.PolarTransform": [
                    1501,
                    181
                ],
                "mticker.Formatter": [
                    185
                ],
                "mticker": [
                    407,
                    225,
                    1347,
                    1399,
                    185
                ],
                "vmin": [
                    192,
                    261,
                    262,
                    453,
                    454,
                    457,
                    458,
                    460,
                    461,
                    210,
                    219,
                    191
                ],
                "vmax": [
                    192,
                    261,
                    262,
                    453,
                    454,
                    457,
                    458,
                    461,
                    210,
                    219,
                    191
                ],
                "self.axis.get_view_interval": [
                    242,
                    191
                ],
                "self.axis": [
                    235,
                    238,
                    239,
                    242,
                    191
                ],
                "d": [
                    192,
                    193
                ],
                "digits": [
                    193,
                    199
                ],
                "np.log10": [
                    193
                ],
                "self._axis.get_view_interval": [
                    207
                ],
                "self._axis.set_view_interval": [
                    210
                ],
                "np.deg2rad": [
                    640,
                    1024,
                    1058,
                    1342,
                    1060,
                    262,
                    1448,
                    1289,
                    494,
                    210,
                    1106,
                    246,
                    790,
                    1016,
                    602,
                    219,
                    604,
                    638
                ],
                "self._axis.get_minpos": [
                    213
                ],
                "self._axis.get_data_interval": [
                    216
                ],
                "self._axis.set_data_interval": [
                    219
                ],
                "self._axis.get_tick_space": [
                    222
                ],
                "mticker.Locator": [
                    225,
                    407
                ],
                "self.base": [
                    449,
                    258,
                    418,
                    262,
                    454,
                    457,
                    234,
                    235,
                    266,
                    430,
                    239,
                    432,
                    436,
                    246,
                    440,
                    250,
                    444,
                    254
                ],
                "base": [
                    418,
                    234
                ],
                "self.base.axis": [
                    235
                ],
                "_AxisWrapper": [
                    235,
                    238
                ],
                "self.base.set_axis": [
                    239
                ],
                "lim": [
                    242,
                    243
                ],
                "_is_full_circle_deg": [
                    976,
                    593,
                    243
                ],
                "np.arange": [
                    244
                ],
                "self.base.autoscale": [
                    250,
                    436
                ],
                "cbook.deprecated": [
                    264,
                    434,
                    438,
                    248,
                    442,
                    252,
                    446
                ],
                "self.base.pan": [
                    440,
                    254
                ],
                "numsteps": [
                    440,
                    254
                ],
                "self.base.refresh": [
                    449,
                    258
                ],
                "self.base.view_limits": [
                    457,
                    262
                ],
                "self.base.zoom": [
                    266,
                    444
                ],
                "direction": [
                    636,
                    1121,
                    1126,
                    616,
                    648,
                    266,
                    590,
                    596,
                    600,
                    601,
                    444,
                    637,
                    1119
                ],
                "maxis.XTick": [
                    269
                ],
                "maxis": [
                    362,
                    515,
                    269,
                    666
                ],
                "self._text1_translate": [
                    291,
                    301,
                    302,
                    310,
                    311,
                    284
                ],
                "mtransforms.ScaledTranslation": [
                    512,
                    481,
                    464,
                    284,
                    286
                ],
                "axes.figure.dpi_scale_trans": [
                    482,
                    285,
                    287
                ],
                "axes.figure": [
                    482,
                    285,
                    287
                ],
                "axes": [
                    288,
                    482,
                    419,
                    483,
                    484,
                    358,
                    359,
                    587,
                    588,
                    589,
                    590,
                    591,
                    596,
                    285,
                    317,
                    318,
                    287
                ],
                "self._text2_translate": [
                    294,
                    304,
                    305,
                    312,
                    313,
                    286
                ],
                "__init__": [
                    288,
                    791,
                    677,
                    527
                ],
                "args": [
                    288,
                    994,
                    677,
                    1292,
                    527,
                    1297,
                    1300,
                    791,
                    1051,
                    1052,
                    1053
                ],
                "kwargs": [
                    391,
                    1292,
                    527,
                    1297,
                    1300,
                    791,
                    288,
                    1057,
                    1058,
                    1059,
                    1060,
                    677,
                    1204,
                    1206,
                    1210,
                    698,
                    1212,
                    1217,
                    1349,
                    734,
                    994,
                    1404
                ],
                "self.label1.set": [
                    289
                ],
                "self.label1": [
                    289,
                    291,
                    613,
                    614,
                    617,
                    618,
                    619,
                    300,
                    302,
                    528,
                    351
                ],
                "self.label1.get_transform": [
                    291,
                    300
                ],
                "self.label2.set": [
                    292
                ],
                "self.label2": [
                    352,
                    292,
                    294,
                    649,
                    650,
                    651,
                    303,
                    305,
                    529,
                    634
                ],
                "self.label2.get_transform": [
                    294,
                    303
                ],
                "_apply_params": [
                    297
                ],
                "kw": [
                    297
                ],
                "trans": [
                    655,
                    401,
                    402,
                    403,
                    404,
                    657,
                    659,
                    662,
                    663,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    324,
                    326,
                    329,
                    330,
                    1481,
                    1482,
                    334,
                    336,
                    339,
                    340,
                    623,
                    625,
                    627,
                    630,
                    631
                ],
                "trans.contains_branch": [
                    304,
                    301
                ],
                "self.label1.set_transform": [
                    302
                ],
                "self.label2.set_transform": [
                    305
                ],
                "padx": [
                    308,
                    310,
                    312,
                    505,
                    508,
                    511
                ],
                "pad": [
                    481,
                    356,
                    357,
                    486,
                    934,
                    937,
                    943,
                    946,
                    308,
                    309
                ],
                "angle": [
                    636,
                    640,
                    641,
                    648,
                    1401,
                    1402,
                    536,
                    541,
                    547,
                    549,
                    551,
                    1448,
                    553,
                    555,
                    557,
                    1453,
                    559,
                    561,
                    308,
                    309,
                    566,
                    568,
                    570,
                    572,
                    318,
                    319,
                    320,
                    574,
                    576,
                    578,
                    324,
                    580,
                    326,
                    334,
                    336,
                    596,
                    600,
                    602,
                    604,
                    605,
                    616,
                    493,
                    500,
                    502,
                    1400,
                    505,
                    506,
                    508,
                    509,
                    638
                ],
                "pady": [
                    309,
                    310,
                    312,
                    506,
                    509,
                    511
                ],
                "self._text1_translate._t": [
                    310
                ],
                "self._text1_translate.invalidate": [
                    311
                ],
                "self._text2_translate._t": [
                    312
                ],
                "self._text2_translate.invalidate": [
                    313
                ],
                "update_position": [
                    586,
                    316
                ],
                "loc": [
                    586,
                    316,
                    1106,
                    318
                ],
                "self.axes": [
                    484,
                    587,
                    685,
                    494,
                    495,
                    496,
                    689,
                    500,
                    502,
                    377,
                    317
                ],
                "axes.get_theta_direction": [
                    590,
                    358,
                    318
                ],
                "axes.get_theta_offset": [
                    591,
                    318,
                    359
                ],
                "text_angle": [
                    352,
                    608,
                    610,
                    641,
                    605,
                    644,
                    351,
                    646,
                    619,
                    651,
                    344,
                    346,
                    347,
                    348,
                    349,
                    350,
                    319
                ],
                "marker": [
                    322,
                    323,
                    325,
                    332,
                    333,
                    621,
                    335,
                    622,
                    624,
                    626,
                    653,
                    654,
                    656,
                    658
                ],
                "self.tick1line.get_marker": [
                    322,
                    621
                ],
                "self.tick1line": [
                    322,
                    329,
                    330,
                    621,
                    630,
                    631
                ],
                "mmarkers.TICKUP": [
                    323,
                    333
                ],
                "mmarkers": [
                    323,
                    325,
                    333,
                    622,
                    335,
                    654,
                    626,
                    658
                ],
                "rotate": [
                    324,
                    326,
                    334,
                    623,
                    336,
                    625,
                    655,
                    627,
                    657,
                    659
                ],
                "mmarkers.TICKDOWN": [
                    325,
                    335
                ],
                "self.tick1line._marker._transform": [
                    329,
                    330,
                    630,
                    631
                ],
                "self.tick1line._marker": [
                    329,
                    330,
                    630,
                    631
                ],
                "self.tick2line.get_marker": [
                    332,
                    653
                ],
                "self.tick2line": [
                    332,
                    653,
                    339,
                    340,
                    662,
                    663,
                    635
                ],
                "self.tick2line._marker._transform": [
                    339,
                    340,
                    662,
                    663
                ],
                "self.tick2line._marker": [
                    339,
                    340,
                    662,
                    663
                ],
                "mode": [
                    642,
                    643,
                    485,
                    616,
                    648,
                    1449,
                    1454,
                    1456,
                    343,
                    534,
                    342,
                    1465,
                    606,
                    607
                ],
                "user_angle": [
                    608,
                    610,
                    642,
                    644,
                    646,
                    606,
                    342,
                    344,
                    350
                ],
                "self._labelrotation": [
                    606,
                    642,
                    342
                ],
                "self.label1.set_rotation": [
                    619,
                    351
                ],
                "self.label2.set_rotation": [
                    352,
                    651
                ],
                "self._pad": [
                    356
                ],
                "self._update_padding": [
                    357
                ],
                "self._loc": [
                    358
                ],
                "maxis.XAxis": [
                    362
                ],
                "axis_name": [
                    674,
                    370
                ],
                "major": [
                    377,
                    681,
                    373,
                    685
                ],
                "tick_kw": [
                    682,
                    684,
                    685,
                    374,
                    376,
                    377
                ],
                "self._major_tick_kw": [
                    682,
                    374
                ],
                "self._minor_tick_kw": [
                    376,
                    684
                ],
                "ThetaTick": [
                    377
                ],
                "self.set_major_locator": [
                    688,
                    380
                ],
                "ThetaLocator": [
                    1506,
                    380
                ],
                "self.get_major_locator": [
                    688,
                    380
                ],
                "self.set_major_formatter": [
                    381
                ],
                "ThetaFormatter": [
                    1504,
                    381
                ],
                "self.isDefault_majloc": [
                    690,
                    382
                ],
                "self.isDefault_majfmt": [
                    383
                ],
                "cla": [
                    386,
                    693
                ],
                "self.set_ticks_position": [
                    387,
                    694
                ],
                "self._wrap_locator_formatter": [
                    392,
                    699,
                    388,
                    695
                ],
                "_set_scale": [
                    698,
                    391
                ],
                "value": [
                    1289,
                    698,
                    391
                ],
                "src": [
                    396,
                    398
                ],
                "dest": [
                    396,
                    398,
                    401,
                    402,
                    403,
                    404
                ],
                "_copy_tick_props": [
                    398
                ],
                "dest._get_text1_transform": [
                    401
                ],
                "dest.label1.set_transform": [
                    402
                ],
                "dest.label1": [
                    402
                ],
                "dest._text1_translate": [
                    402
                ],
                "dest._get_text2_transform": [
                    403
                ],
                "dest.label2.set_transform": [
                    404
                ],
                "dest.label2": [
                    404
                ],
                "dest._text2_translate": [
                    404
                ],
                "self._axes": [
                    419,
                    424,
                    425,
                    426,
                    427
                ],
                "show_all": [
                    428,
                    429,
                    422
                ],
                "_is_full_circle_rad": [
                    425,
                    930
                ],
                "self._axes.viewLim.intervalx": [
                    425
                ],
                "self._axes.viewLim": [
                    425
                ],
                "rorigin": [
                    432,
                    426,
                    427,
                    1187
                ],
                "self._axes.get_rorigin": [
                    426
                ],
                "self._axes.get_rsign": [
                    426
                ],
                "self._axes.get_rmin": [
                    427
                ],
                "tick": [
                    432
                ],
                "np.inf": [
                    453
                ],
                "self.base.nonsingular": [
                    454
                ],
                "mtransforms.nonsingular": [
                    461
                ],
                "mtransforms.ScaledTranslation.__init__": [
                    481
                ],
                "axes._realViewLim": [
                    483
                ],
                "self.mode": [
                    485,
                    492,
                    499,
                    501,
                    504
                ],
                "self.pad": [
                    486,
                    511
                ],
                "self.axes.get_rlabel_position": [
                    494
                ],
                "self.axes.get_theta_direction": [
                    495
                ],
                "self.axes.get_theta_offset": [
                    496
                ],
                "self.axes._realViewLim.xmin": [
                    500
                ],
                "self.axes._realViewLim": [
                    500,
                    502
                ],
                "self.axes._realViewLim.xmax": [
                    502
                ],
                "self._t": [
                    511
                ],
                "mtransforms.ScaledTranslation.get_matrix": [
                    512
                ],
                "maxis.YTick": [
                    515
                ],
                "self.label1.set_rotation_mode": [
                    528
                ],
                "self.label2.set_rotation_mode": [
                    529
                ],
                "start": [
                    801,
                    546,
                    803,
                    802,
                    979,
                    981,
                    982,
                    535
                ],
                "thetamin": [
                    1024,
                    929,
                    930,
                    962,
                    708,
                    1058,
                    1062,
                    1063,
                    1066,
                    588,
                    717,
                    976,
                    593,
                    952,
                    1046,
                    600,
                    953,
                    954
                ],
                "axes.get_thetamin": [
                    588
                ],
                "thetamax": [
                    929,
                    930,
                    963,
                    708,
                    1060,
                    1062,
                    1063,
                    1066,
                    717,
                    589,
                    976,
                    593,
                    1047,
                    952,
                    953,
                    954,
                    636,
                    1016
                ],
                "axes.get_thetamax": [
                    589
                ],
                "offset_rad": [
                    592,
                    591
                ],
                "offset": [
                    592,
                    1073,
                    1106,
                    597,
                    600,
                    636
                ],
                "full": [
                    593,
                    595,
                    612,
                    633
                ],
                "axes.get_rlabel_position": [
                    596
                ],
                "tick_angle": [
                    640,
                    623,
                    655,
                    625,
                    657,
                    627,
                    659,
                    598,
                    602,
                    604,
                    638
                ],
                "ha": [
                    613,
                    616,
                    617,
                    648,
                    649
                ],
                "self.label1.get_horizontalalignment": [
                    613
                ],
                "va": [
                    614,
                    616,
                    648,
                    618,
                    650
                ],
                "self.label1.get_verticalalignment": [
                    614
                ],
                "self._determine_anchor": [
                    616,
                    648
                ],
                "self.label1.set_horizontalalignment": [
                    617
                ],
                "self.label1.set_verticalalignment": [
                    618
                ],
                "mmarkers.TICKLEFT": [
                    654,
                    622
                ],
                "mmarkers.TICKRIGHT": [
                    626,
                    658
                ],
                "self.label2.set_visible": [
                    634
                ],
                "self.tick2line.set_visible": [
                    635
                ],
                "self.label2.set_ha": [
                    649
                ],
                "self.label2.set_va": [
                    650
                ],
                "maxis.YAxis": [
                    666
                ],
                "self.sticky_edges.y.append": [
                    678
                ],
                "self.sticky_edges.y": [
                    678
                ],
                "self.sticky_edges": [
                    678
                ],
                "RadialTick": [
                    685
                ],
                "RadialLocator": [
                    688,
                    1505
                ],
                "mtransforms.Bbox": [
                    720,
                    734
                ],
                "mtransforms.Bbox.__init__": [
                    734
                ],
                "self._center": [
                    760,
                    735
                ],
                "center": [
                    960,
                    961,
                    966,
                    735
                ],
                "self._viewLim": [
                    736,
                    745
                ],
                "viewLim": [
                    736,
                    738
                ],
                "self._originLim": [
                    752,
                    737
                ],
                "originLim": [
                    737,
                    738
                ],
                "points": [
                    745,
                    747,
                    748,
                    749,
                    752,
                    755,
                    756,
                    757,
                    760,
                    761
                ],
                "copy": [
                    745
                ],
                "self._viewLim.get_points": [
                    745
                ],
                "self._originLim.y0": [
                    752
                ],
                "rscale": [
                    755,
                    756
                ],
                "width": [
                    967,
                    969,
                    971,
                    757,
                    762
                ],
                "wedge": [
                    760,
                    763
                ],
                "mpatches.Wedge": [
                    760,
                    997,
                    957
                ],
                "mpatches": [
                    760,
                    997,
                    957
                ],
                "self.update_from_path": [
                    763
                ],
                "wedge.get_path": [
                    763
                ],
                "w": [
                    768,
                    766,
                    767
                ],
                "h": [
                    768,
                    766,
                    767
                ],
                "self._points": [
                    769,
                    773,
                    766
                ],
                "deltah": [
                    769,
                    767
                ],
                "deltaw": [
                    768,
                    769
                ],
                "np.array": [
                    769
                ],
                "Axes": [
                    994,
                    776,
                    1292,
                    1297,
                    1300,
                    797
                ],
                "name": [
                    782
                ],
                "self._default_theta_offset": [
                    788,
                    837,
                    815
                ],
                "theta_offset": [
                    788
                ],
                "self._default_theta_direction": [
                    816,
                    835,
                    789
                ],
                "theta_direction": [
                    789
                ],
                "self._default_rlabel_position": [
                    906,
                    790
                ],
                "rlabel_position": [
                    790
                ],
                "self.use_sticky_edges": [
                    792
                ],
                "self.set_aspect": [
                    793
                ],
                "self.cla": [
                    794
                ],
                "Axes.cla": [
                    797
                ],
                "self.title.set_y": [
                    799
                ],
                "self.title": [
                    799
                ],
                "self.spines.get": [
                    801,
                    804,
                    810,
                    972,
                    979,
                    980
                ],
                "self.spines": [
                    801,
                    804,
                    810,
                    972,
                    979,
                    980
                ],
                "start.set_visible": [
                    803,
                    982
                ],
                "end": [
                    804,
                    805,
                    806,
                    980,
                    983,
                    984
                ],
                "end.set_visible": [
                    984,
                    806
                ],
                "self.set_xlim": [
                    1065,
                    807
                ],
                "self.grid": [
                    809
                ],
                "rcParams": [
                    809
                ],
                "inner": [
                    810,
                    811,
                    972,
                    812,
                    973,
                    974
                ],
                "inner.set_visible": [
                    812,
                    974
                ],
                "self.set_rorigin": [
                    814
                ],
                "self.set_theta_offset": [
                    1106,
                    815
                ],
                "self.set_theta_direction": [
                    816
                ],
                "self.xaxis": [
                    1347,
                    820,
                    1350,
                    1348
                ],
                "ThetaAxis": [
                    820
                ],
                "self.yaxis": [
                    992,
                    1483,
                    1293,
                    1294,
                    821,
                    1399,
                    1403,
                    1405,
                    991
                ],
                "RadialAxis": [
                    821
                ],
                "self._update_transScale": [
                    826
                ],
                "self._originViewLim": [
                    1187,
                    867,
                    872,
                    1195,
                    1198,
                    853,
                    831
                ],
                "mtransforms.LockableBbox": [
                    831
                ],
                "self.viewLim": [
                    1024,
                    1028,
                    901,
                    1158,
                    841,
                    1168,
                    886,
                    1016,
                    1177,
                    1020,
                    1149,
                    831
                ],
                "self._direction": [
                    834,
                    838,
                    1127,
                    1139,
                    1118
                ],
                "self._theta_offset": [
                    836,
                    838,
                    1072,
                    1074,
                    1080
                ],
                "self.transShift": [
                    842,
                    877,
                    838
                ],
                "self._realViewLim": [
                    929,
                    841,
                    853,
                    952,
                    955
                ],
                "mtransforms.TransformedBbox": [
                    841
                ],
                "self.transScale": [
                    877,
                    846,
                    871
                ],
                "mtransforms.TransformWrapper": [
                    907,
                    846
                ],
                "mtransforms.IdentityTransform": [
                    885,
                    902,
                    847
                ],
                "self.axesLim": [
                    856,
                    852
                ],
                "_WedgeBbox": [
                    852
                ],
                "self.transWedge": [
                    960,
                    965,
                    878,
                    1008,
                    1009,
                    856
                ],
                "mtransforms.BboxTransformFrom": [
                    856
                ],
                "self.transAxes": [
                    1008,
                    1009,
                    859,
                    878
                ],
                "mtransforms.BboxTransformTo": [
                    859,
                    901,
                    886
                ],
                "self.bbox": [
                    859
                ],
                "self.transProjection": [
                    867,
                    877,
                    863
                ],
                "self.PolarTransform": [
                    863
                ],
                "self.transProjection.set_children": [
                    867
                ],
                "self.transProjectionAffine": [
                    878,
                    871
                ],
                "self.PolarAffine": [
                    871
                ],
                "self.transData": [
                    903,
                    908,
                    876,
                    1452,
                    1460,
                    1461,
                    887,
                    988
                ],
                "self._xaxis_transform": [
                    912,
                    883,
                    894
                ],
                "mtransforms.blended_transform_factory": [
                    900,
                    884
                ],
                "flipr_transform": [
                    890,
                    894
                ],
                "self._xaxis_text_transform": [
                    918,
                    915,
                    894
                ],
                "self._yaxis_transform": [
                    899,
                    1010,
                    1011,
                    986,
                    924
                ],
                "self._r_label_position": [
                    1289,
                    905,
                    908,
                    988,
                    1278
                ],
                "self._yaxis_text_transform": [
                    931,
                    938,
                    907,
                    947,
                    922,
                    989,
                    990
                ],
                "cbook._check_in_list": [
                    1124,
                    926,
                    911
                ],
                "which": [
                    921,
                    923,
                    926,
                    911
                ],
                "self._realViewLim.intervalx": [
                    952,
                    929
                ],
                "self.get_theta_direction": [
                    932,
                    941
                ],
                "halign": [
                    933,
                    936,
                    938,
                    942,
                    945,
                    947
                ],
                "pad_shift": [
                    934,
                    937,
                    938,
                    943,
                    946,
                    947
                ],
                "_ThetaShift": [
                    937,
                    946,
                    934,
                    943
                ],
                "rmin": [
                    1168,
                    955,
                    967
                ],
                "rmax": [
                    955,
                    1149,
                    967
                ],
                "self._realViewLim.intervaly": [
                    955
                ],
                "self.get_rorigin": [
                    955
                ],
                "self.get_rsign": [
                    956
                ],
                "self.patch": [
                    992,
                    961,
                    962,
                    963,
                    968,
                    969,
                    957
                ],
                "self.transWedge.transform": [
                    960,
                    965
                ],
                "self.patch.set_center": [
                    961
                ],
                "self.patch.set_theta1": [
                    962
                ],
                "self.patch.set_theta2": [
                    963
                ],
                "edge": [
                    965,
                    966
                ],
                "_": [
                    965
                ],
                "radius": [
                    968,
                    971,
                    966,
                    967
                ],
                "self.patch.set_radius": [
                    968
                ],
                "self.patch.set_width": [
                    969
                ],
                "inner_width": [
                    971,
                    974
                ],
                "visible": [
                    976,
                    985,
                    982,
                    984
                ],
                "yaxis_text_transform": [
                    986,
                    988,
                    989,
                    990
                ],
                "self._yaxis_text_transform.set": [
                    990
                ],
                "self.yaxis.reset_ticks": [
                    991
                ],
                "self.yaxis.set_clip_path": [
                    992
                ],
                "Axes.draw": [
                    994
                ],
                "renderer": [
                    994
                ],
                "cbook._delete_parameter": [
                    949,
                    950
                ],
                "spines": [
                    1000,
                    1008,
                    1009,
                    1010,
                    1011,
                    1012
                ],
                "OrderedDict": [
                    1000
                ],
                "mspines.Spine.arc_spine": [
                    1001,
                    1005
                ],
                "mspines.Spine": [
                    1001,
                    1003,
                    1004,
                    1005
                ],
                "mspines": [
                    1001,
                    1003,
                    1004,
                    1005
                ],
                "mspines.Spine.linear_spine": [
                    1003,
                    1004
                ],
                "set_transform": [
                    1008,
                    1009,
                    1010,
                    1011
                ],
                "self.viewLim.x1": [
                    1016
                ],
                "self.viewLim.xmax": [
                    1020
                ],
                "self.viewLim.x0": [
                    1024
                ],
                "self.viewLim.xmin": [
                    1028
                ],
                "left": [
                    1048,
                    1065,
                    1053,
                    1054
                ],
                "right": [
                    1049,
                    1053,
                    1054,
                    1065
                ],
                "kwargs.pop": [
                    1058,
                    1060,
                    1212,
                    1206
                ],
                "mtx": [
                    1120,
                    1122,
                    1072,
                    1073,
                    1118
                ],
                "self._theta_offset.get_matrix": [
                    1072,
                    1080
                ],
                "self._theta_offset.invalidate": [
                    1074
                ],
                "mapping": [
                    1097,
                    1106
                ],
                "self._direction.get_matrix": [
                    1139,
                    1118
                ],
                "self._direction.invalidate": [
                    1127
                ],
                "self.viewLim.y1": [
                    1149
                ],
                "self.viewLim.ymax": [
                    1158
                ],
                "self.viewLim.y0": [
                    1168
                ],
                "self.viewLim.ymin": [
                    1177
                ],
                "self._originViewLim.locked_y0": [
                    1187
                ],
                "self._originViewLim.y0": [
                    1195,
                    1198
                ],
                "np.sign": [
                    1198
                ],
                "self._originViewLim.y1": [
                    1198
                ],
                "bottom": [
                    1216,
                    1256,
                    1260,
                    1267,
                    1268,
                    1205,
                    1206,
                    1269
                ],
                "top": [
                    1216,
                    1262,
                    1266,
                    1267,
                    1268,
                    1269,
                    1211,
                    1212
                ],
                "self.set_ylim": [
                    1216
                ],
                "emit": [
                    1216,
                    1269
                ],
                "auto": [
                    1216,
                    1269
                ],
                "ymin": [
                    1260,
                    1255
                ],
                "ymax": [
                    1266,
                    1261
                ],
                "np.iterable": [
                    1267
                ],
                "set_ylim": [
                    1269
                ],
                "self._r_label_position.get_matrix": [
                    1278
                ],
                "self._r_label_position.clear": [
                    1289
                ],
                "Axes.set_yscale": [
                    1297,
                    1292
                ],
                "self.yaxis.set_major_locator": [
                    1293
                ],
                "self.RadialLocator": [
                    1294
                ],
                "self.yaxis.get_major_locator": [
                    1294
                ],
                "Axes.set_yticks": [
                    1300
                ],
                "angles": [
                    1341,
                    1342,
                    1343
                ],
                "self.convert_yunits": [
                    1341
                ],
                "self.set_xticks": [
                    1343
                ],
                "labels": [
                    1344,
                    1345,
                    1396,
                    1397
                ],
                "self.set_xticklabels": [
                    1345
                ],
                "fmt": [
                    1346,
                    1347,
                    1398,
                    1399
                ],
                "self.xaxis.set_major_formatter": [
                    1347
                ],
                "mticker.FormatStrFormatter": [
                    1347,
                    1399
                ],
                "self.xaxis.get_ticklabels": [
                    1348,
                    1350
                ],
                "t.update": [
                    1404,
                    1349
                ],
                "self.xaxis.get_ticklines": [
                    1350
                ],
                "radii": [
                    1392,
                    1393,
                    1395
                ],
                "self.convert_xunits": [
                    1392
                ],
                "np.asarray": [
                    1393
                ],
                "self.set_yticks": [
                    1395
                ],
                "self.set_yticklabels": [
                    1397
                ],
                "self.yaxis.set_major_formatter": [
                    1399
                ],
                "self.get_rlabel_position": [
                    1448,
                    1401,
                    1462
                ],
                "self.set_rlabel_position": [
                    1402,
                    1479
                ],
                "self.yaxis.get_ticklabels": [
                    1403,
                    1405
                ],
                "self.yaxis.get_gridlines": [
                    1405
                ],
                "button": [
                    1450,
                    1455
                ],
                "epsilon": [
                    1451,
                    1453
                ],
                "transform": [
                    1452
                ],
                "self.transData.inverted": [
                    1452,
                    1461
                ],
                "self._pan_start": [
                    1458,
                    1468,
                    1471
                ],
                "types.SimpleNamespace": [
                    1458
                ],
                "types": [
                    1458
                ],
                "self.get_rmax": [
                    1459
                ],
                "self.transData.frozen": [
                    1460
                ],
                "frozen": [
                    1461
                ],
                "p": [
                    1473,
                    1474,
                    1475,
                    1479,
                    1489,
                    1490,
                    1491,
                    1495,
                    1471
                ],
                "p.mode": [
                    1473,
                    1489
                ],
                "startt": [
                    1490,
                    1474,
                    1478
                ],
                "startr": [
                    1490,
                    1474,
                    1494
                ],
                "p.trans_inverse.transform": [
                    1490,
                    1474
                ],
                "p.trans_inverse": [
                    1490,
                    1474
                ],
                "p.x": [
                    1475,
                    1491
                ],
                "p.y": [
                    1475,
                    1491
                ],
                "dt": [
                    1478,
                    1479
                ],
                "p.r_label_angle": [
                    1479
                ],
                "vert1": [
                    1481,
                    1484
                ],
                "horiz1": [
                    1481,
                    1485
                ],
                "self.get_yaxis_text1_transform": [
                    1481
                ],
                "vert2": [
                    1482,
                    1486
                ],
                "horiz2": [
                    1482,
                    1487
                ],
                "self.get_yaxis_text2_transform": [
                    1482
                ],
                "self.yaxis.majorTicks": [
                    1483
                ],
                "self.yaxis.minorTicks": [
                    1483
                ],
                "t.label1.set_va": [
                    1484
                ],
                "t.label1": [
                    1484,
                    1485
                ],
                "t.label1.set_ha": [
                    1485
                ],
                "t.label2.set_va": [
                    1486
                ],
                "t.label2": [
                    1486,
                    1487
                ],
                "t.label2.set_ha": [
                    1487
                ],
                "self.set_rmax": [
                    1495
                ],
                "p.rmax": [
                    1495
                ],
                "PolarTransform": [
                    1501
                ],
                "PolarAxes.PolarAffine": [
                    1502
                ],
                "PolarAffine": [
                    1502
                ],
                "InvertedPolarTransform": [
                    1503
                ],
                "PolarAxes.ThetaFormatter": [
                    1504
                ],
                "PolarAxes.RadialLocator": [
                    1505
                ],
                "PolarAxes.ThetaLocator": [
                    1506
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_9/lib/matplotlib/tests/test_polar.py",
                "test_function": "test_polar_invertedylim_rorigin",
                "test_function_code": "@image_comparison(['polar_invertedylim_rorigin.png'], style='default')\ndef test_polar_invertedylim_rorigin():\n    fig = plt.figure()\n    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=True)\n    ax.yaxis.set_inverted(True)\n    # Set the rlims to inverted (2, 0) without calling set_rlim, to check that\n    # viewlims are correctly unstaled before draw()ing.\n    ax.plot([0, 0], [0, 2], c=\"none\")\n    ax.margins(0)\n    ax.set_rorigin(3)",
                "test_error": "matplotlib.testing.exceptions.ImageComparisonFailure: images not close (RMS 6.526):\n\tresult_images/test_polar/polar_invertedylim_rorigin.png\n\tresult_images/test_polar/polar_invertedylim_rorigin-expected.png",
                "full_test_error": "E   matplotlib.testing.exceptions.ImageComparisonFailure: images not close (RMS 6.526):\n    \tresult_images/test_polar/polar_invertedylim_rorigin.png\n    \tresult_images/test_polar/polar_invertedylim_rorigin-expected.png\nAll traceback entries are hidden. Pass `--full-trace` to see hidden and internal frames.",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "image_comparison(['polar_invertedylim_rorigin.png'], style='default')"
                ]
            }
        ]
    }
}