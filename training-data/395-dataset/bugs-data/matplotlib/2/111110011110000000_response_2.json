{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n    \n    Parameters\n    ----------\n    x, y : float or array-like, shape (n, )\n        The data positions.\n    \n    s : float or array-like, shape (n, ), optional\n        The marker size in points**2.\n        Default is ``rcParams['lines.markersize'] ** 2``.\n    \n    c : array-like or list of colors or color, optional\n        The marker colors. Possible values:\n        ...\n    \n    marker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n        The marker style. *marker* can be either an instance of the class\n        or the text shorthand for a particular marker.\n        See :mod:`matplotlib.markers` for more information about marker\n        styles.\n    \n    cmap : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`\n        A `.Colormap` instance or registered colormap name. *cmap* is only\n        used if *c* is an array of floats.\n    \n    ... more parameter documentation ...\n    \n    \"\"\"\n    xlabel = x\n    ylabel = y\n    self._process_unit_info(xdata=xlabel, ydata=ylabel, kwargs=kwargs)\n    x = self.convert_xunits(xlabel)\n    y = self.convert_yunits(ylabel)\n    \n    x = np.array(x) if np.isscalar(x) else np.ravel(x)\n    y = np.array(y) if np.isscalar(y) else np.ravel(y)\n    if len(x) != len(y):\n        raise ValueError(\"x and y must be the same size\")\n    \n    if s is None:\n        s = (20 if rcParams['_internal.classic_mode'] else\n             rcParams['lines.markersize'] ** 2.0)\n    s = np.array(s) if np.isscalar(s) else np.ravel(s)\n    if len(s) not in (1, len(x)):\n        raise ValueError(\"s must be a scalar, or the same size as x and y\")\n    \n    c, colors, edgecolors = \\\n        self._parse_scatter_color_args(\n            c, edgecolors, kwargs, len(x),\n            get_next_color_func=self._get_patches_for_fill.get_next_color)\n    \n    if plotnonfinite and colors is None:\n        c = np.ma.masked_invalid(c)\n        x, y, s, edgecolors, linewidths = \\\n            cbook._combine_masks(x, y, s, edgecolors, linewidths)\n    else:\n        x, y, s, c, colors, edgecolors, linewidths = \\\n            cbook._combine_masks(\n                x, y, s, c, colors, edgecolors, linewidths)\n    \n    scales = s\n    \n    if marker is None:\n        marker = rcParams['scatter.marker']\n    \n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n    \n    path = marker_obj.get_path().transformed(\n        marker_obj.get_transform())\n    if not marker_obj.is_filled():\n        edgecolors = 'face'\n        if linewidths is None:\n            linewidths = rcParams['lines.linewidth']\n        else:\n            linewidths = [lw if lw is not None else rcParams['lines.linewidth']\n                          for lw in np.ravel(linewidths)]\n    \n    offsets = np.column_stack([x, y])\n    \n    collection = mcoll.PathCollection(\n        (path,), scales,\n        facecolors=colors,\n        edgecolors=edgecolors,\n        linewidths=linewidths,\n        offsets=offsets,\n        transOffset=kwargs.pop('transform', self.transData),\n        alpha=alpha\n    )\n    collection.set_transform(mtransforms.IdentityTransform())\n    collection.update(kwargs)\n    \n    if colors is None:\n        collection.set_array(c)\n        collection.set_cmap(cmap)\n        collection.set_norm(norm)\n        collection.norm = mcolors.Normalize(vmin, vmax)\n    \n    self.add_collection(collection)\n    self._request_autoscale_view()\n    \n    return collection"
        }
    ]
}