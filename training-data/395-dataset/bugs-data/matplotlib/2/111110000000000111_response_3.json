{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 4313,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n    \n    Parameters\n    ----------\n    x, y : float or array-like, shape (n, )\n        The data positions.\n    \n    s : float or array-like, shape (n, ), optional\n        The marker size in points**2.\n        Default is ``rcParams['lines.markersize'] ** 2``.\n    \n    c : array-like or list of colors or color, optional\n        The marker colors. Possible values:\n        ...\n    \n    marker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n            The marker style. *marker* can be either an instance of the class\n            or the text shorthand for a particular marker.\n            See :mod:`matplotlib.markers` for more information about marker\n            styles.\n    \n    ...\n    \n    edgecolors : {'face', 'none', *None*} or color or sequence of color, \\\n    default: :rc:`scatter.edgecolors`\n        The edge color of the marker. Possible values:\n        - 'face': The edge color will always be the same as the face color.\n        - 'none': No patch boundary will be drawn.\n        - A color or sequence of colors.\n    \n    ...\n    \n    Returns\n    -------\n    `~matplotlib.collections.PathCollection`\n    \n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.collections.Collection` properties\n    \"\"\"\n    \n    # Process **kwargs to handle aliases, conflicts with explicit kwargs:\n    ...\n    \n    # Process marker and fillstyle parameters\n    if marker is not None:\n        if isinstance(marker, mmarkers.MarkerStyle):\n            marker_obj = marker\n            if marker.fillstyle == 'none':\n                edgecolors = 'face'  # Set edgecolors to 'face' for hollow markers\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n        if marker_obj.fillstyle == 'none':\n            edgecolors = 'face'  # Set edgecolors to 'face' for hollow markers\n    \n    ...\n    \n    offsets = np.ma.column_stack([x, y])\n    \n    collection = mcoll.PathCollection(\n            (path,), scales,\n            facecolors=colors,\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            offsets=offsets,\n            transOffset=kwargs.pop('transform', self.transData),\n            alpha=alpha\n            )\n    \n    ...\n    \n    return collection"
        }
    ]
}