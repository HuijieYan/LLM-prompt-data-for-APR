{
    "matplotlib": [
        {
            "bugID": 2,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 4313,
            "file_name": "/lib/matplotlib/axes/_axes.py",
            "replace_code": "def scatter(self, x, y, s=None, c=None, marker=None, cmap=None, norm=None,\n            vmin=None, vmax=None, alpha=None, linewidths=None,\n            verts=None, edgecolors=None, *, plotnonfinite=False,\n            **kwargs):\n\n    \"\"\"\n    A scatter plot of *y* vs. *x* with varying marker size and/or color.\n    \n    ... (omitted parameters documentation)\n    \n    \"\"\"\n    \n    self._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)\n    x = self.convert_xunits(x)\n    y = self.convert_yunits(y)\n    \n    # np.ma.ravel yields an ndarray, not a masked array,\n    # unless its argument is a masked array.\n    x = np.ma.ravel(x)\n    y = np.ma.ravel(y)\n    if x.size != y.size:\n        raise ValueError(\"x and y must be the same size\")\n    \n    if s is None:\n        s = (20 if rcParams['_internal.classic_mode'] else\n             rcParams['lines.markersize'] ** 2.0)\n    s = np.ma.ravel(s)\n    if len(s) not in (1, x.size):\n        raise ValueError(\"s must be a scalar, or the same size as x and y\")\n    \n    c, colors, edgecolors = \\\n        self._parse_scatter_color_args(\n            c, edgecolors, kwargs, x.size,\n            get_next_color_func=get_next_color)\n    \n    if plotnonfinite and colors is None:\n        c = np.ma.masked_invalid(c)\n        x, y, s, edgecolors, linewidths = \\\n            cbook._combine_masks(x, y, s, edgecolors, linewidths)\n    else:\n        x, y, s, c, colors, edgecolors, linewidths = \\\n            cbook._combine_masks(\n                x, y, s, c, colors, edgecolors, linewidths)\n    \n    scales = s   # Renamed for readability below.\n    \n    # load default marker from rcParams\n    if marker is None:\n        marker = rcParams['scatter.marker']\n    \n    if isinstance(marker, mmarkers.MarkerStyle):\n        marker_obj = marker\n    else:\n        marker_obj = mmarkers.MarkerStyle(marker)\n    marker_obj.set_fillstyle('none')  # set marker's fillstyle to 'none'\n    \n    path = marker_obj.get_path().transformed(\n        marker_obj.get_transform())\n    if not marker_obj.is_filled():\n        edgecolors = 'face'\n        if linewidths is None:\n            linewidths = rcParams['lines.linewidth']\n        elif np.iterable(linewidths):\n            linewidths = [\n                lw if lw is not None else rcParams['lines.linewidth']\n                for lw in linewidths]\n    \n    offsets = np.ma.column_stack([x, y])\n    \n    collection = mcoll.PathCollection(\n            (path,), scales,\n            facecolors=colors,\n            edgecolors=edgecolors,\n            linewidths=linewidths,\n            offsets=offsets,\n            transOffset=kwargs.pop('transform', self.transData),\n            alpha=alpha\n            )\n    collection.set_transform(mtransforms.IdentityTransform())\n    collection.update(kwargs)\n    \n    if colors is None:\n        collection.set_array(c)\n        collection.set_cmap(cmap)\n        collection.set_norm(norm)\n        collection._scale_norm(norm, vmin, vmax)\n    \n    # Classic mode only:\n    # ensure there are margins to allow for the\n    # finite size of the symbols.  In v2.x, margins\n    # are present by default, so we disable this\n    # scatter-specific override.\n    if rcParams['_internal.classic_mode']:\n        if self._xmargin < 0.05 and x.size > 0:\n            self.set_xmargin(0.05)\n        if self._ymargin < 0.05 and x.size > 0:\n            self.set_ymargin(0.05)\n    \n    self.add_collection(collection)\n    self._request_autoscale_view()\n    \n    return collection"
        }
    ]
}