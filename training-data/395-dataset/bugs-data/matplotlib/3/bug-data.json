{
    "matplotlib:3": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_3/lib/matplotlib/markers.py": {
            "buggy_functions": [
                {
                    "function_name": "_recache",
                    "function_code": "def _recache(self):\n    if self._marker_function is None:\n        return\n    self._path = _empty_path\n    self._transform = IdentityTransform()\n    self._alt_path = None\n    self._alt_transform = None\n    self._snap_threshold = None\n    self._joinstyle = 'round'\n    self._capstyle = 'butt'\n    self._filled = True\n    self._marker_function()\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 225,
                    "end_line": 236,
                    "variables": {
                        "self._marker_function": [
                            226,
                            236
                        ],
                        "self": [
                            226,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236
                        ],
                        "self._path": [
                            228
                        ],
                        "_empty_path": [
                            228
                        ],
                        "self._transform": [
                            229
                        ],
                        "IdentityTransform": [
                            229
                        ],
                        "self._alt_path": [
                            230
                        ],
                        "self._alt_transform": [
                            231
                        ],
                        "self._snap_threshold": [
                            232
                        ],
                        "self._joinstyle": [
                            233
                        ],
                        "self._capstyle": [
                            234
                        ],
                        "self._filled": [
                            235
                        ]
                    },
                    "filtered_variables": {
                        "self._marker_function": [
                            226,
                            236
                        ],
                        "self": [
                            226,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236
                        ],
                        "self._path": [
                            228
                        ],
                        "_empty_path": [
                            228
                        ],
                        "self._transform": [
                            229
                        ],
                        "IdentityTransform": [
                            229
                        ],
                        "self._alt_path": [
                            230
                        ],
                        "self._alt_transform": [
                            231
                        ],
                        "self._snap_threshold": [
                            232
                        ],
                        "self._joinstyle": [
                            233
                        ],
                        "self._capstyle": [
                            234
                        ],
                        "self._filled": [
                            235
                        ]
                    },
                    "diff_line_number": 235,
                    "class_data": {
                        "signature": "class MarkerStyle()",
                        "docstring": null,
                        "constructor_docstring": "Attributes\n----------\nmarkers : list of known marks\n\nfillstyles : list of known fillstyles\n\nfilled_markers : list of known filled markers.\n\nParameters\n----------\nmarker : str or array-like, default: None\n    See the descriptions of possible markers in the module docstring.\n\nfillstyle : str, default: 'full'\n    One of 'full', 'left', 'right', 'bottom', 'top', 'none'.",
                        "functions": [
                            "def __init__(self, marker=None, fillstyle=None):\n    \"\"\"\n    Attributes\n    ----------\n    markers : list of known marks\n\n    fillstyles : list of known fillstyles\n\n    filled_markers : list of known filled markers.\n\n    Parameters\n    ----------\n    marker : str or array-like, default: None\n        See the descriptions of possible markers in the module docstring.\n\n    fillstyle : str, default: 'full'\n        One of 'full', 'left', 'right', 'bottom', 'top', 'none'.\n    \"\"\"\n    self._marker_function = None\n    self.set_fillstyle(fillstyle)\n    self.set_marker(marker)",
                            "def _recache(self):\n    if self._marker_function is None:\n        return\n    self._path = _empty_path\n    self._transform = IdentityTransform()\n    self._alt_path = None\n    self._alt_transform = None\n    self._snap_threshold = None\n    self._joinstyle = 'round'\n    self._capstyle = 'butt'\n    self._filled = True\n    self._marker_function()",
                            "def __bool__(self):\n    return bool(len(self._path.vertices))",
                            "def is_filled(self):\n    return self._filled",
                            "def get_fillstyle(self):\n    return self._fillstyle",
                            "def set_fillstyle(self, fillstyle):\n    \"\"\"\n    Sets fillstyle\n\n    Parameters\n    ----------\n    fillstyle : string amongst known fillstyles\n    \"\"\"\n    if fillstyle is None:\n        fillstyle = rcParams['markers.fillstyle']\n    cbook._check_in_list(self.fillstyles, fillstyle=fillstyle)\n    self._fillstyle = fillstyle\n    self._recache()",
                            "def get_joinstyle(self):\n    return self._joinstyle",
                            "def get_capstyle(self):\n    return self._capstyle",
                            "def get_marker(self):\n    return self._marker",
                            "def set_marker(self, marker):\n    if isinstance(marker, np.ndarray) and marker.ndim == 2 and (marker.shape[1] == 2):\n        self._marker_function = self._set_vertices\n    elif isinstance(marker, str) and cbook.is_math_text(marker):\n        self._marker_function = self._set_mathtext_path\n    elif isinstance(marker, Path):\n        self._marker_function = self._set_path_marker\n    elif isinstance(marker, Sized) and len(marker) in (2, 3) and (marker[1] in (0, 1, 2)):\n        self._marker_function = self._set_tuple_marker\n    elif not isinstance(marker, (np.ndarray, list)) and marker in self.markers:\n        self._marker_function = getattr(self, '_set_' + self.markers[marker])\n    elif isinstance(marker, MarkerStyle):\n        self.__dict__.update(marker.__dict__)\n    else:\n        try:\n            Path(marker)\n            self._marker_function = self._set_vertices\n        except ValueError as err:\n            raise ValueError('Unrecognized marker style {!r}'.format(marker)) from err\n    if not isinstance(marker, MarkerStyle):\n        self._marker = marker\n        self._recache()",
                            "def get_path(self):\n    return self._path",
                            "def get_transform(self):\n    return self._transform.frozen()",
                            "def get_alt_path(self):\n    return self._alt_path",
                            "def get_alt_transform(self):\n    return self._alt_transform.frozen()",
                            "def get_snap_threshold(self):\n    return self._snap_threshold",
                            "def _set_nothing(self):\n    self._filled = False",
                            "def _set_custom_marker(self, path):\n    rescale = np.max(np.abs(path.vertices))\n    self._transform = Affine2D().scale(0.5 / rescale)\n    self._path = path",
                            "def _set_path_marker(self):\n    self._set_custom_marker(self._marker)",
                            "def _set_vertices(self):\n    self._set_custom_marker(Path(self._marker))",
                            "def _set_tuple_marker(self):\n    marker = self._marker\n    if len(marker) == 2:\n        numsides, rotation = (marker[0], 0.0)\n    elif len(marker) == 3:\n        numsides, rotation = (marker[0], marker[2])\n    symstyle = marker[1]\n    if symstyle == 0:\n        self._path = Path.unit_regular_polygon(numsides)\n        self._joinstyle = 'miter'\n    elif symstyle == 1:\n        self._path = Path.unit_regular_star(numsides)\n        self._joinstyle = 'bevel'\n    elif symstyle == 2:\n        self._path = Path.unit_regular_asterisk(numsides)\n        self._filled = False\n        self._joinstyle = 'bevel'\n    else:\n        raise ValueError(f'Unexpected tuple marker: {marker}')\n    self._transform = Affine2D().scale(0.5).rotate_deg(rotation)",
                            "def _set_mathtext_path(self):\n    \"\"\"\n    Draws mathtext markers '$...$' using TextPath object.\n\n    Submitted by tcb\n    \"\"\"\n    from matplotlib.text import TextPath\n    text = TextPath(xy=(0, 0), s=self.get_marker(), usetex=rcParams['text.usetex'])\n    if len(text.vertices) == 0:\n        return\n    xmin, ymin = text.vertices.min(axis=0)\n    xmax, ymax = text.vertices.max(axis=0)\n    width = xmax - xmin\n    height = ymax - ymin\n    max_dim = max(width, height)\n    self._transform = Affine2D().translate(-xmin + 0.5 * -width, -ymin + 0.5 * -height).scale(1.0 / max_dim)\n    self._path = text\n    self._snap = False",
                            "def _half_fill(self):\n    return self.get_fillstyle() in self._half_fillstyles",
                            "def _set_circle(self, reduction=1.0):\n    self._transform = Affine2D().scale(0.5 * reduction)\n    self._snap_threshold = np.inf\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = Path.unit_circle()\n    else:\n        if fs == 'bottom':\n            rotate = 270.0\n        elif fs == 'top':\n            rotate = 90.0\n        elif fs == 'left':\n            rotate = 180.0\n        else:\n            rotate = 0.0\n        self._path = self._alt_path = Path.unit_circle_righthalf()\n        self._transform.rotate_deg(rotate)\n        self._alt_transform = self._transform.frozen().rotate_deg(180.0)",
                            "def _set_pixel(self):\n    self._path = Path.unit_rectangle()\n    self._transform = Affine2D().translate(-0.49999, -0.49999)\n    self._snap_threshold = None",
                            "def _set_point(self):\n    self._set_circle(reduction=self._point_size_reduction)",
                            "def _set_triangle(self, rot, skip):\n    self._transform = Affine2D().scale(0.5).rotate_deg(rot)\n    self._snap_threshold = 5.0\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = self._triangle_path\n    else:\n        mpaths = [self._triangle_path_u, self._triangle_path_l, self._triangle_path_d, self._triangle_path_r]\n        if fs == 'top':\n            self._path = mpaths[(0 + skip) % 4]\n            self._alt_path = mpaths[(2 + skip) % 4]\n        elif fs == 'bottom':\n            self._path = mpaths[(2 + skip) % 4]\n            self._alt_path = mpaths[(0 + skip) % 4]\n        elif fs == 'left':\n            self._path = mpaths[(1 + skip) % 4]\n            self._alt_path = mpaths[(3 + skip) % 4]\n        else:\n            self._path = mpaths[(3 + skip) % 4]\n            self._alt_path = mpaths[(1 + skip) % 4]\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                            "def _set_triangle_up(self):\n    return self._set_triangle(0.0, 0)",
                            "def _set_triangle_down(self):\n    return self._set_triangle(180.0, 2)",
                            "def _set_triangle_left(self):\n    return self._set_triangle(90.0, 3)",
                            "def _set_triangle_right(self):\n    return self._set_triangle(270.0, 1)",
                            "def _set_square(self):\n    self._transform = Affine2D().translate(-0.5, -0.5)\n    self._snap_threshold = 2.0\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = Path.unit_rectangle()\n    else:\n        if fs == 'bottom':\n            rotate = 0.0\n        elif fs == 'top':\n            rotate = 180.0\n        elif fs == 'left':\n            rotate = 270.0\n        else:\n            rotate = 90.0\n        self._path = Path([[0.0, 0.0], [1.0, 0.0], [1.0, 0.5], [0.0, 0.5], [0.0, 0.0]])\n        self._alt_path = Path([[0.0, 0.5], [1.0, 0.5], [1.0, 1.0], [0.0, 1.0], [0.0, 0.5]])\n        self._transform.rotate_deg(rotate)\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                            "def _set_diamond(self):\n    self._transform = Affine2D().translate(-0.5, -0.5).rotate_deg(45)\n    self._snap_threshold = 5.0\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = Path.unit_rectangle()\n    else:\n        self._path = Path([[0, 0], [1, 0], [1, 1], [0, 0]])\n        self._alt_path = Path([[0, 0], [0, 1], [1, 1], [0, 0]])\n        if fs == 'bottom':\n            rotate = 270.0\n        elif fs == 'top':\n            rotate = 90.0\n        elif fs == 'left':\n            rotate = 180.0\n        else:\n            rotate = 0.0\n        self._transform.rotate_deg(rotate)\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                            "def _set_thin_diamond(self):\n    self._set_diamond()\n    self._transform.scale(0.6, 1.0)",
                            "def _set_pentagon(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n    polypath = Path.unit_regular_polygon(5)\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n        y = (1 + np.sqrt(5)) / 4.0\n        top = Path([verts[0], verts[1], verts[4], verts[0]])\n        bottom = Path([verts[1], verts[2], verts[3], verts[4], verts[1]])\n        left = Path([verts[0], verts[1], verts[2], [0, -y], verts[0]])\n        right = Path([verts[0], verts[4], verts[3], [0, -y], verts[0]])\n        if fs == 'top':\n            mpath, mpath_alt = (top, bottom)\n        elif fs == 'bottom':\n            mpath, mpath_alt = (bottom, top)\n        elif fs == 'left':\n            mpath, mpath_alt = (left, right)\n        else:\n            mpath, mpath_alt = (right, left)\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                            "def _set_star(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_star(5, innerCircle=0.381966)\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n        top = Path(np.vstack((verts[0:4, :], verts[7:10, :], verts[0])))\n        bottom = Path(np.vstack((verts[3:8, :], verts[3])))\n        left = Path(np.vstack((verts[0:6, :], verts[0])))\n        right = Path(np.vstack((verts[0], verts[5:10, :], verts[0])))\n        if fs == 'top':\n            mpath, mpath_alt = (top, bottom)\n        elif fs == 'bottom':\n            mpath, mpath_alt = (bottom, top)\n        elif fs == 'left':\n            mpath, mpath_alt = (left, right)\n        else:\n            mpath, mpath_alt = (right, left)\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n    self._joinstyle = 'bevel'",
                            "def _set_hexagon1(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = None\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_polygon(6)\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n        x = np.abs(np.cos(5 * np.pi / 6.0))\n        top = Path(np.vstack(([-x, 0], verts[(1, 0, 5), :], [x, 0])))\n        bottom = Path(np.vstack(([-x, 0], verts[2:5, :], [x, 0])))\n        left = Path(verts[(0, 1, 2, 3), :])\n        right = Path(verts[(0, 5, 4, 3), :])\n        if fs == 'top':\n            mpath, mpath_alt = (top, bottom)\n        elif fs == 'bottom':\n            mpath, mpath_alt = (bottom, top)\n        elif fs == 'left':\n            mpath, mpath_alt = (left, right)\n        else:\n            mpath, mpath_alt = (right, left)\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                            "def _set_hexagon2(self):\n    self._transform = Affine2D().scale(0.5).rotate_deg(30)\n    self._snap_threshold = None\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_polygon(6)\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n        x, y = (np.sqrt(3) / 4, 3 / 4.0)\n        top = Path(verts[(1, 0, 5, 4, 1), :])\n        bottom = Path(verts[(1, 2, 3, 4), :])\n        left = Path(np.vstack(([x, y], verts[(0, 1, 2), :], [-x, -y], [x, y])))\n        right = Path(np.vstack(([x, y], verts[(5, 4, 3), :], [-x, -y])))\n        if fs == 'top':\n            mpath, mpath_alt = (top, bottom)\n        elif fs == 'bottom':\n            mpath, mpath_alt = (bottom, top)\n        elif fs == 'left':\n            mpath, mpath_alt = (left, right)\n        else:\n            mpath, mpath_alt = (right, left)\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                            "def _set_octagon(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_polygon(8)\n    if not self._half_fill():\n        self._transform.rotate_deg(22.5)\n        self._path = polypath\n    else:\n        x = np.sqrt(2.0) / 4.0\n        half = Path([[0, -1], [0, 1], [-x, 1], [-1, x], [-1, -x], [-x, -1], [0, -1]])\n        if fs == 'bottom':\n            rotate = 90.0\n        elif fs == 'top':\n            rotate = 270.0\n        elif fs == 'right':\n            rotate = 180.0\n        else:\n            rotate = 0.0\n        self._transform.rotate_deg(rotate)\n        self._path = self._alt_path = half\n        self._alt_transform = self._transform.frozen().rotate_deg(180.0)\n    self._joinstyle = 'miter'",
                            "def _set_vline(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._line_marker_path",
                            "def _set_hline(self):\n    self._set_vline()\n    self._transform = self._transform.rotate_deg(90)",
                            "def _set_tickleft(self):\n    self._transform = Affine2D().scale(-1.0, 1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickhoriz_path",
                            "def _set_tickright(self):\n    self._transform = Affine2D().scale(1.0, 1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickhoriz_path",
                            "def _set_tickup(self):\n    self._transform = Affine2D().scale(1.0, 1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickvert_path",
                            "def _set_tickdown(self):\n    self._transform = Affine2D().scale(1.0, -1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickvert_path",
                            "def _set_tri_down(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n    self._filled = False\n    self._path = self._tri_path",
                            "def _set_tri_up(self):\n    self._set_tri_down()\n    self._transform = self._transform.rotate_deg(180)",
                            "def _set_tri_left(self):\n    self._set_tri_down()\n    self._transform = self._transform.rotate_deg(270)",
                            "def _set_tri_right(self):\n    self._set_tri_down()\n    self._transform = self._transform.rotate_deg(90)",
                            "def _set_caretdown(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 3.0\n    self._filled = False\n    self._path = self._caret_path\n    self._joinstyle = 'miter'",
                            "def _set_caretup(self):\n    self._set_caretdown()\n    self._transform = self._transform.rotate_deg(180)",
                            "def _set_caretleft(self):\n    self._set_caretdown()\n    self._transform = self._transform.rotate_deg(270)",
                            "def _set_caretright(self):\n    self._set_caretdown()\n    self._transform = self._transform.rotate_deg(90)",
                            "def _set_caretdownbase(self):\n    self._set_caretdown()\n    self._path = self._caret_path_base",
                            "def _set_caretupbase(self):\n    self._set_caretdownbase()\n    self._transform = self._transform.rotate_deg(180)",
                            "def _set_caretleftbase(self):\n    self._set_caretdownbase()\n    self._transform = self._transform.rotate_deg(270)",
                            "def _set_caretrightbase(self):\n    self._set_caretdownbase()\n    self._transform = self._transform.rotate_deg(90)",
                            "def _set_plus(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._plus_path",
                            "def _set_x(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 3.0\n    self._filled = False\n    self._path = self._x_path",
                            "def _set_plus_filled(self):\n    self._transform = Affine2D().translate(-0.5, -0.5)\n    self._snap_threshold = 5.0\n    self._joinstyle = 'miter'\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = self._plus_filled_path\n    else:\n        if fs == 'top':\n            rotate, rotate_alt = (0, 180)\n        elif fs == 'bottom':\n            rotate, rotate_alt = (180, 0)\n        elif fs == 'left':\n            rotate, rotate_alt = (90, 270)\n        else:\n            rotate, rotate_alt = (270, 90)\n        self._path = self._plus_filled_path_t\n        self._alt_path = self._plus_filled_path_t\n        self._alt_transform = Affine2D().translate(-0.5, -0.5)\n        self._transform.rotate_deg(rotate)\n        self._alt_transform.rotate_deg(rotate_alt)",
                            "def _set_x_filled(self):\n    self._transform = Affine2D().translate(-0.5, -0.5)\n    self._snap_threshold = 5.0\n    self._joinstyle = 'miter'\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = self._x_filled_path\n    else:\n        if fs == 'top':\n            rotate, rotate_alt = (0, 180)\n        elif fs == 'bottom':\n            rotate, rotate_alt = (180, 0)\n        elif fs == 'left':\n            rotate, rotate_alt = (90, 270)\n        else:\n            rotate, rotate_alt = (270, 90)\n        self._path = self._x_filled_path_t\n        self._alt_path = self._x_filled_path_t\n        self._alt_transform = Affine2D().translate(-0.5, -0.5)\n        self._transform.rotate_deg(rotate)\n        self._alt_transform.rotate_deg(rotate_alt)"
                        ],
                        "constructor_variables": [
                            "_marker_function"
                        ],
                        "class_level_variables": [
                            "markers",
                            "filled_markers",
                            "fillstyles",
                            "_half_fillstyles",
                            "_point_size_reduction",
                            "_triangle_path",
                            "_triangle_path_u",
                            "_triangle_path_d",
                            "_triangle_path_l",
                            "_triangle_path_r",
                            "_line_marker_path",
                            "_tickhoriz_path",
                            "_tickvert_path",
                            "_tri_path",
                            "_caret_path",
                            "_caret_path_base",
                            "_plus_path",
                            "_x_path",
                            "_plus_filled_path",
                            "_plus_filled_path_t",
                            "_x_filled_path",
                            "_x_filled_path_t"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, marker=None, fillstyle=None)",
                            "_recache(self)",
                            "__bool__(self)",
                            "is_filled(self)",
                            "get_fillstyle(self)",
                            "set_fillstyle(self, fillstyle)",
                            "get_joinstyle(self)",
                            "get_capstyle(self)",
                            "get_marker(self)",
                            "set_marker(self, marker)",
                            "get_path(self)",
                            "get_transform(self)",
                            "get_alt_path(self)",
                            "get_alt_transform(self)",
                            "get_snap_threshold(self)",
                            "_set_nothing(self)",
                            "_set_custom_marker(self, path)",
                            "_set_path_marker(self)",
                            "_set_vertices(self)",
                            "_set_tuple_marker(self)",
                            "_set_mathtext_path(self)",
                            "_half_fill(self)",
                            "_set_circle(self, reduction=1.0)",
                            "_set_pixel(self)",
                            "_set_point(self)",
                            "_set_triangle(self, rot, skip)",
                            "_set_triangle_up(self)",
                            "_set_triangle_down(self)",
                            "_set_triangle_left(self)",
                            "_set_triangle_right(self)",
                            "_set_square(self)",
                            "_set_diamond(self)",
                            "_set_thin_diamond(self)",
                            "_set_pentagon(self)",
                            "_set_star(self)",
                            "_set_hexagon1(self)",
                            "_set_hexagon2(self)",
                            "_set_octagon(self)",
                            "_set_vline(self)",
                            "_set_hline(self)",
                            "_set_tickleft(self)",
                            "_set_tickright(self)",
                            "_set_tickup(self)",
                            "_set_tickdown(self)",
                            "_set_tri_down(self)",
                            "_set_tri_up(self)",
                            "_set_tri_left(self)",
                            "_set_tri_right(self)",
                            "_set_caretdown(self)",
                            "_set_caretup(self)",
                            "_set_caretleft(self)",
                            "_set_caretright(self)",
                            "_set_caretdownbase(self)",
                            "_set_caretupbase(self)",
                            "_set_caretleftbase(self)",
                            "_set_caretrightbase(self)",
                            "_set_plus(self)",
                            "_set_x(self)",
                            "_set_plus_filled(self)",
                            "_set_x_filled(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self._marker_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10c3b48e0>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._capstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._filled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._marker_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10c3b48e0>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._capstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._filled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._marker_function": {
                                    "variable_value": "<bound method MarkerStyle._set_circle of <matplotlib.markers.MarkerStyle object at 0x10c3b48e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10c3b48e0>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._capstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._filled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._marker_function": {
                                    "variable_value": "<bound method MarkerStyle._set_circle of <matplotlib.markers.MarkerStyle object at 0x10c3b48e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10c3b48e0>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "Path(array([[ 0.        , -1.        ],\n       [ 0.2652031 , -1.        ],\n       [ 0.51957987, -0.89463369],\n       [ 0.70710678, -0.70710678],\n       [ 0.89463369, -0.51957987],\n       [ 1.        , -0.2652031 ],\n       [ 1.        ,  0.        ],\n       [ 1.        ,  0.2652031 ],\n       [ 0.89463369,  0.51957987],\n       [ 0.70710678,  0.70710678],\n       [ 0.51957987,  0.89463369],\n       [ 0.2652031 ,  1.        ],\n       [ 0.        ,  1.        ],\n       [-0.2652031 ,  1.        ],\n       [-0.51957987,  0.89463369],\n       [-0.70710678,  0.70710678],\n       [-0.89463369,  0.51957987],\n       [-1.        ,  0.2652031 ],\n       [-1.        ,  0.        ],\n       [-1.        , -0.2652031 ],\n       [-0.89463369, -0.51957987],\n       [-0.70710678, -0.70710678],\n       [-0.51957987, -0.89463369],\n       [-0.2652031 , -1.        ],\n       [ 0.        , -1.        ],\n       [ 0.        , -1.        ]]), array([ 1,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n        4,  4,  4,  4,  4,  4,  4,  4, 79], dtype=uint8))",
                                    "variable_type": "Path",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "<matplotlib.transforms.Affine2D object at 0x10c3ecf10>",
                                    "variable_type": "Affine2D",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "'round'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "self._capstyle": {
                                    "variable_value": "'butt'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self._filled": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._marker_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10cde0850>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._capstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._filled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._fillstyle": {
                                    "variable_value": "'none'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            },
                            {
                                "self._marker_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10cde0850>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._capstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._filled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._fillstyle": {
                                    "variable_value": "'none'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            }
                        ],
                        [
                            {
                                "self._marker_function": {
                                    "variable_value": "<bound method MarkerStyle._set_circle of <matplotlib.markers.MarkerStyle object at 0x10cde0850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10cde0850>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._capstyle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._filled": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._fillstyle": {
                                    "variable_value": "'none'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            },
                            {
                                "self._marker_function": {
                                    "variable_value": "<bound method MarkerStyle._set_circle of <matplotlib.markers.MarkerStyle object at 0x10cde0850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.markers.MarkerStyle object at 0x10cde0850>",
                                    "variable_type": "MarkerStyle",
                                    "variable_shape": null
                                },
                                "self._path": {
                                    "variable_value": "Path(array([[ 0.        , -1.        ],\n       [ 0.2652031 , -1.        ],\n       [ 0.51957987, -0.89463369],\n       [ 0.70710678, -0.70710678],\n       [ 0.89463369, -0.51957987],\n       [ 1.        , -0.2652031 ],\n       [ 1.        ,  0.        ],\n       [ 1.        ,  0.2652031 ],\n       [ 0.89463369,  0.51957987],\n       [ 0.70710678,  0.70710678],\n       [ 0.51957987,  0.89463369],\n       [ 0.2652031 ,  1.        ],\n       [ 0.        ,  1.        ],\n       [-0.2652031 ,  1.        ],\n       [-0.51957987,  0.89463369],\n       [-0.70710678,  0.70710678],\n       [-0.89463369,  0.51957987],\n       [-1.        ,  0.2652031 ],\n       [-1.        ,  0.        ],\n       [-1.        , -0.2652031 ],\n       [-0.89463369, -0.51957987],\n       [-0.70710678, -0.70710678],\n       [-0.51957987, -0.89463369],\n       [-0.2652031 , -1.        ],\n       [ 0.        , -1.        ],\n       [ 0.        , -1.        ]]), array([ 1,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,\n        4,  4,  4,  4,  4,  4,  4,  4, 79], dtype=uint8))",
                                    "variable_type": "Path",
                                    "variable_shape": null
                                },
                                "_empty_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._transform": {
                                    "variable_value": "<matplotlib.transforms.Affine2D object at 0x10cdff070>",
                                    "variable_type": "Affine2D",
                                    "variable_shape": null
                                },
                                "IdentityTransform": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._alt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._alt_transform": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._snap_threshold": {
                                    "variable_value": "inf",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self._joinstyle": {
                                    "variable_value": "'round'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "self._capstyle": {
                                    "variable_value": "'butt'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "self._filled": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._fillstyle": {
                                    "variable_value": "'none'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(self, marker=None, fillstyle=None):\n    \"\"\"\n    Attributes\n    ----------\n    markers : list of known marks\n\n    fillstyles : list of known fillstyles\n\n    filled_markers : list of known filled markers.\n\n    Parameters\n    ----------\n    marker : str or array-like, default: None\n        See the descriptions of possible markers in the module docstring.\n\n    fillstyle : str, default: 'full'\n        One of 'full', 'left', 'right', 'bottom', 'top', 'none'.\n    \"\"\"\n    self._marker_function = None\n    self.set_fillstyle(fillstyle)\n    self.set_marker(marker)",
                "def _recache(self):\n    if self._marker_function is None:\n        return\n    self._path = _empty_path\n    self._transform = IdentityTransform()\n    self._alt_path = None\n    self._alt_transform = None\n    self._snap_threshold = None\n    self._joinstyle = 'round'\n    self._capstyle = 'butt'\n    self._filled = True\n    self._marker_function()",
                "def __bool__(self):\n    return bool(len(self._path.vertices))",
                "def is_filled(self):\n    return self._filled",
                "def get_fillstyle(self):\n    return self._fillstyle",
                "def set_fillstyle(self, fillstyle):\n    \"\"\"\n    Sets fillstyle\n\n    Parameters\n    ----------\n    fillstyle : string amongst known fillstyles\n    \"\"\"\n    if fillstyle is None:\n        fillstyle = rcParams['markers.fillstyle']\n    cbook._check_in_list(self.fillstyles, fillstyle=fillstyle)\n    self._fillstyle = fillstyle\n    self._recache()",
                "def get_joinstyle(self):\n    return self._joinstyle",
                "def get_capstyle(self):\n    return self._capstyle",
                "def get_marker(self):\n    return self._marker",
                "def set_marker(self, marker):\n    if (isinstance(marker, np.ndarray) and marker.ndim == 2 and\n            marker.shape[1] == 2):\n        self._marker_function = self._set_vertices\n    elif isinstance(marker, str) and cbook.is_math_text(marker):\n        self._marker_function = self._set_mathtext_path\n    elif isinstance(marker, Path):\n        self._marker_function = self._set_path_marker\n    elif (isinstance(marker, Sized) and len(marker) in (2, 3) and\n            marker[1] in (0, 1, 2)):\n        self._marker_function = self._set_tuple_marker\n    elif (not isinstance(marker, (np.ndarray, list)) and\n          marker in self.markers):\n        self._marker_function = getattr(\n            self, '_set_' + self.markers[marker])\n    elif isinstance(marker, MarkerStyle):\n        self.__dict__.update(marker.__dict__)\n    else:\n        try:\n            Path(marker)\n            self._marker_function = self._set_vertices\n        except ValueError as err:\n            raise ValueError('Unrecognized marker style {!r}'\n                             .format(marker)) from err\n\n    if not isinstance(marker, MarkerStyle):\n        self._marker = marker\n        self._recache()",
                "def get_path(self):\n    return self._path",
                "def get_transform(self):\n    return self._transform.frozen()",
                "def get_alt_path(self):\n    return self._alt_path",
                "def get_alt_transform(self):\n    return self._alt_transform.frozen()",
                "def get_snap_threshold(self):\n    return self._snap_threshold",
                "def _set_nothing(self):\n    self._filled = False",
                "def _set_custom_marker(self, path):\n    rescale = np.max(np.abs(path.vertices))  # max of x's and y's.\n    self._transform = Affine2D().scale(0.5 / rescale)\n    self._path = path",
                "def _set_path_marker(self):\n    self._set_custom_marker(self._marker)",
                "def _set_vertices(self):\n    self._set_custom_marker(Path(self._marker))",
                "def _set_tuple_marker(self):\n    marker = self._marker\n    if len(marker) == 2:\n        numsides, rotation = marker[0], 0.0\n    elif len(marker) == 3:\n        numsides, rotation = marker[0], marker[2]\n    symstyle = marker[1]\n    if symstyle == 0:\n        self._path = Path.unit_regular_polygon(numsides)\n        self._joinstyle = 'miter'\n    elif symstyle == 1:\n        self._path = Path.unit_regular_star(numsides)\n        self._joinstyle = 'bevel'\n    elif symstyle == 2:\n        self._path = Path.unit_regular_asterisk(numsides)\n        self._filled = False\n        self._joinstyle = 'bevel'\n    else:\n        raise ValueError(f\"Unexpected tuple marker: {marker}\")\n    self._transform = Affine2D().scale(0.5).rotate_deg(rotation)",
                "def _set_mathtext_path(self):\n    \"\"\"\n    Draws mathtext markers '$...$' using TextPath object.\n\n    Submitted by tcb\n    \"\"\"\n    from matplotlib.text import TextPath\n\n    # again, the properties could be initialised just once outside\n    # this function\n    text = TextPath(xy=(0, 0), s=self.get_marker(),\n                    usetex=rcParams['text.usetex'])\n    if len(text.vertices) == 0:\n        return\n\n    xmin, ymin = text.vertices.min(axis=0)\n    xmax, ymax = text.vertices.max(axis=0)\n    width = xmax - xmin\n    height = ymax - ymin\n    max_dim = max(width, height)\n    self._transform = Affine2D() \\\n        .translate(-xmin + 0.5 * -width, -ymin + 0.5 * -height) \\\n        .scale(1.0 / max_dim)\n    self._path = text\n    self._snap = False",
                "def _half_fill(self):\n    return self.get_fillstyle() in self._half_fillstyles",
                "def _set_circle(self, reduction=1.0):\n    self._transform = Affine2D().scale(0.5 * reduction)\n    self._snap_threshold = np.inf\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = Path.unit_circle()\n    else:\n        # build a right-half circle\n        if fs == 'bottom':\n            rotate = 270.\n        elif fs == 'top':\n            rotate = 90.\n        elif fs == 'left':\n            rotate = 180.\n        else:\n            rotate = 0.\n\n        self._path = self._alt_path = Path.unit_circle_righthalf()\n        self._transform.rotate_deg(rotate)\n        self._alt_transform = self._transform.frozen().rotate_deg(180.)",
                "def _set_pixel(self):\n    self._path = Path.unit_rectangle()\n    # Ideally, you'd want -0.5, -0.5 here, but then the snapping\n    # algorithm in the Agg backend will round this to a 2x2\n    # rectangle from (-1, -1) to (1, 1).  By offsetting it\n    # slightly, we can force it to be (0, 0) to (1, 1), which both\n    # makes it only be a single pixel and places it correctly\n    # aligned to 1-width stroking (i.e. the ticks).  This hack is\n    # the best of a number of bad alternatives, mainly because the\n    # backends are not aware of what marker is actually being used\n    # beyond just its path data.\n    self._transform = Affine2D().translate(-0.49999, -0.49999)\n    self._snap_threshold = None",
                "def _set_point(self):\n    self._set_circle(reduction=self._point_size_reduction)",
                "def _set_triangle(self, rot, skip):\n    self._transform = Affine2D().scale(0.5).rotate_deg(rot)\n    self._snap_threshold = 5.0\n    fs = self.get_fillstyle()\n\n    if not self._half_fill():\n        self._path = self._triangle_path\n    else:\n        mpaths = [self._triangle_path_u,\n                  self._triangle_path_l,\n                  self._triangle_path_d,\n                  self._triangle_path_r]\n\n        if fs == 'top':\n            self._path = mpaths[(0 + skip) % 4]\n            self._alt_path = mpaths[(2 + skip) % 4]\n        elif fs == 'bottom':\n            self._path = mpaths[(2 + skip) % 4]\n            self._alt_path = mpaths[(0 + skip) % 4]\n        elif fs == 'left':\n            self._path = mpaths[(1 + skip) % 4]\n            self._alt_path = mpaths[(3 + skip) % 4]\n        else:\n            self._path = mpaths[(3 + skip) % 4]\n            self._alt_path = mpaths[(1 + skip) % 4]\n\n        self._alt_transform = self._transform\n\n    self._joinstyle = 'miter'",
                "def _set_triangle_up(self):\n    return self._set_triangle(0.0, 0)",
                "def _set_triangle_down(self):\n    return self._set_triangle(180.0, 2)",
                "def _set_triangle_left(self):\n    return self._set_triangle(90.0, 3)",
                "def _set_triangle_right(self):\n    return self._set_triangle(270.0, 1)",
                "def _set_square(self):\n    self._transform = Affine2D().translate(-0.5, -0.5)\n    self._snap_threshold = 2.0\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = Path.unit_rectangle()\n    else:\n        # build a bottom filled square out of two rectangles, one\n        # filled.  Use the rotation to support left, right, bottom\n        # or top\n        if fs == 'bottom':\n            rotate = 0.\n        elif fs == 'top':\n            rotate = 180.\n        elif fs == 'left':\n            rotate = 270.\n        else:\n            rotate = 90.\n\n        self._path = Path([[0.0, 0.0], [1.0, 0.0], [1.0, 0.5],\n                           [0.0, 0.5], [0.0, 0.0]])\n        self._alt_path = Path([[0.0, 0.5], [1.0, 0.5], [1.0, 1.0],\n                               [0.0, 1.0], [0.0, 0.5]])\n        self._transform.rotate_deg(rotate)\n        self._alt_transform = self._transform\n\n    self._joinstyle = 'miter'",
                "def _set_diamond(self):\n    self._transform = Affine2D().translate(-0.5, -0.5).rotate_deg(45)\n    self._snap_threshold = 5.0\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = Path.unit_rectangle()\n    else:\n        self._path = Path([[0, 0], [1, 0], [1, 1], [0, 0]])\n        self._alt_path = Path([[0, 0], [0, 1], [1, 1], [0, 0]])\n        if fs == 'bottom':\n            rotate = 270.\n        elif fs == 'top':\n            rotate = 90.\n        elif fs == 'left':\n            rotate = 180.\n        else:\n            rotate = 0.\n        self._transform.rotate_deg(rotate)\n        self._alt_transform = self._transform\n    self._joinstyle = 'miter'",
                "def _set_thin_diamond(self):\n    self._set_diamond()\n    self._transform.scale(0.6, 1.0)",
                "def _set_pentagon(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n\n    polypath = Path.unit_regular_polygon(5)\n    fs = self.get_fillstyle()\n\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n\n        y = (1 + np.sqrt(5)) / 4.\n        top = Path([verts[0], verts[1], verts[4], verts[0]])\n        bottom = Path([verts[1], verts[2], verts[3], verts[4], verts[1]])\n        left = Path([verts[0], verts[1], verts[2], [0, -y], verts[0]])\n        right = Path([verts[0], verts[4], verts[3], [0, -y], verts[0]])\n\n        if fs == 'top':\n            mpath, mpath_alt = top, bottom\n        elif fs == 'bottom':\n            mpath, mpath_alt = bottom, top\n        elif fs == 'left':\n            mpath, mpath_alt = left, right\n        else:\n            mpath, mpath_alt = right, left\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n\n    self._joinstyle = 'miter'",
                "def _set_star(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_star(5, innerCircle=0.381966)\n\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n\n        top = Path(np.vstack((verts[0:4, :], verts[7:10, :], verts[0])))\n        bottom = Path(np.vstack((verts[3:8, :], verts[3])))\n        left = Path(np.vstack((verts[0:6, :], verts[0])))\n        right = Path(np.vstack((verts[0], verts[5:10, :], verts[0])))\n\n        if fs == 'top':\n            mpath, mpath_alt = top, bottom\n        elif fs == 'bottom':\n            mpath, mpath_alt = bottom, top\n        elif fs == 'left':\n            mpath, mpath_alt = left, right\n        else:\n            mpath, mpath_alt = right, left\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n\n    self._joinstyle = 'bevel'",
                "def _set_hexagon1(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = None\n\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_polygon(6)\n\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n\n        # not drawing inside lines\n        x = np.abs(np.cos(5 * np.pi / 6.))\n        top = Path(np.vstack(([-x, 0], verts[(1, 0, 5), :], [x, 0])))\n        bottom = Path(np.vstack(([-x, 0], verts[2:5, :], [x, 0])))\n        left = Path(verts[(0, 1, 2, 3), :])\n        right = Path(verts[(0, 5, 4, 3), :])\n\n        if fs == 'top':\n            mpath, mpath_alt = top, bottom\n        elif fs == 'bottom':\n            mpath, mpath_alt = bottom, top\n        elif fs == 'left':\n            mpath, mpath_alt = left, right\n        else:\n            mpath, mpath_alt = right, left\n\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n\n    self._joinstyle = 'miter'",
                "def _set_hexagon2(self):\n    self._transform = Affine2D().scale(0.5).rotate_deg(30)\n    self._snap_threshold = None\n\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_polygon(6)\n\n    if not self._half_fill():\n        self._path = polypath\n    else:\n        verts = polypath.vertices\n\n        # not drawing inside lines\n        x, y = np.sqrt(3) / 4, 3 / 4.\n        top = Path(verts[(1, 0, 5, 4, 1), :])\n        bottom = Path(verts[(1, 2, 3, 4), :])\n        left = Path(np.vstack(([x, y], verts[(0, 1, 2), :],\n                               [-x, -y], [x, y])))\n        right = Path(np.vstack(([x, y], verts[(5, 4, 3), :], [-x, -y])))\n\n        if fs == 'top':\n            mpath, mpath_alt = top, bottom\n        elif fs == 'bottom':\n            mpath, mpath_alt = bottom, top\n        elif fs == 'left':\n            mpath, mpath_alt = left, right\n        else:\n            mpath, mpath_alt = right, left\n\n        self._path = mpath\n        self._alt_path = mpath_alt\n        self._alt_transform = self._transform\n\n    self._joinstyle = 'miter'",
                "def _set_octagon(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n\n    fs = self.get_fillstyle()\n    polypath = Path.unit_regular_polygon(8)\n\n    if not self._half_fill():\n        self._transform.rotate_deg(22.5)\n        self._path = polypath\n    else:\n        x = np.sqrt(2.) / 4.\n        half = Path([[0, -1], [0, 1], [-x, 1], [-1, x],\n                     [-1, -x], [-x, -1], [0, -1]])\n\n        if fs == 'bottom':\n            rotate = 90.\n        elif fs == 'top':\n            rotate = 270.\n        elif fs == 'right':\n            rotate = 180.\n        else:\n            rotate = 0.\n\n        self._transform.rotate_deg(rotate)\n        self._path = self._alt_path = half\n        self._alt_transform = self._transform.frozen().rotate_deg(180.0)\n\n    self._joinstyle = 'miter'",
                "def _set_vline(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._line_marker_path",
                "def _set_hline(self):\n    self._set_vline()\n    self._transform = self._transform.rotate_deg(90)",
                "def _set_tickleft(self):\n    self._transform = Affine2D().scale(-1.0, 1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickhoriz_path",
                "def _set_tickright(self):\n    self._transform = Affine2D().scale(1.0, 1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickhoriz_path",
                "def _set_tickup(self):\n    self._transform = Affine2D().scale(1.0, 1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickvert_path",
                "def _set_tickdown(self):\n    self._transform = Affine2D().scale(1.0, -1.0)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._tickvert_path",
                "def _set_tri_down(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 5.0\n    self._filled = False\n    self._path = self._tri_path",
                "def _set_tri_up(self):\n    self._set_tri_down()\n    self._transform = self._transform.rotate_deg(180)",
                "def _set_tri_left(self):\n    self._set_tri_down()\n    self._transform = self._transform.rotate_deg(270)",
                "def _set_tri_right(self):\n    self._set_tri_down()\n    self._transform = self._transform.rotate_deg(90)",
                "def _set_caretdown(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 3.0\n    self._filled = False\n    self._path = self._caret_path\n    self._joinstyle = 'miter'",
                "def _set_caretup(self):\n    self._set_caretdown()\n    self._transform = self._transform.rotate_deg(180)",
                "def _set_caretleft(self):\n    self._set_caretdown()\n    self._transform = self._transform.rotate_deg(270)",
                "def _set_caretright(self):\n    self._set_caretdown()\n    self._transform = self._transform.rotate_deg(90)",
                "def _set_caretdownbase(self):\n    self._set_caretdown()\n    self._path = self._caret_path_base",
                "def _set_caretupbase(self):\n    self._set_caretdownbase()\n    self._transform = self._transform.rotate_deg(180)",
                "def _set_caretleftbase(self):\n    self._set_caretdownbase()\n    self._transform = self._transform.rotate_deg(270)",
                "def _set_caretrightbase(self):\n    self._set_caretdownbase()\n    self._transform = self._transform.rotate_deg(90)",
                "def _set_plus(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 1.0\n    self._filled = False\n    self._path = self._plus_path",
                "def _set_x(self):\n    self._transform = Affine2D().scale(0.5)\n    self._snap_threshold = 3.0\n    self._filled = False\n    self._path = self._x_path",
                "def _set_plus_filled(self):\n    self._transform = Affine2D().translate(-0.5, -0.5)\n    self._snap_threshold = 5.0\n    self._joinstyle = 'miter'\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = self._plus_filled_path\n    else:\n        # Rotate top half path to support all partitions\n        if fs == 'top':\n            rotate, rotate_alt = 0, 180\n        elif fs == 'bottom':\n            rotate, rotate_alt = 180, 0\n        elif fs == 'left':\n            rotate, rotate_alt = 90, 270\n        else:\n            rotate, rotate_alt = 270, 90\n\n        self._path = self._plus_filled_path_t\n        self._alt_path = self._plus_filled_path_t\n        self._alt_transform = Affine2D().translate(-0.5, -0.5)\n        self._transform.rotate_deg(rotate)\n        self._alt_transform.rotate_deg(rotate_alt)",
                "def _set_x_filled(self):\n    self._transform = Affine2D().translate(-0.5, -0.5)\n    self._snap_threshold = 5.0\n    self._joinstyle = 'miter'\n    fs = self.get_fillstyle()\n    if not self._half_fill():\n        self._path = self._x_filled_path\n    else:\n        # Rotate top half path to support all partitions\n        if fs == 'top':\n            rotate, rotate_alt = 0, 180\n        elif fs == 'bottom':\n            rotate, rotate_alt = 180, 0\n        elif fs == 'left':\n            rotate, rotate_alt = 90, 270\n        else:\n            rotate, rotate_alt = 270, 90\n\n        self._path = self._x_filled_path_t\n        self._alt_path = self._x_filled_path_t\n        self._alt_transform = Affine2D().translate(-0.5, -0.5)\n        self._transform.rotate_deg(rotate)\n        self._alt_transform.rotate_deg(rotate_alt)"
            ],
            "inscope_function_signatures": [
                "__init__(self, marker=None, fillstyle=None)",
                "_recache(self)",
                "__bool__(self)",
                "is_filled(self)",
                "get_fillstyle(self)",
                "set_fillstyle(self, fillstyle)",
                "get_joinstyle(self)",
                "get_capstyle(self)",
                "get_marker(self)",
                "set_marker(self, marker)",
                "get_path(self)",
                "get_transform(self)",
                "get_alt_path(self)",
                "get_alt_transform(self)",
                "get_snap_threshold(self)",
                "_set_nothing(self)",
                "_set_custom_marker(self, path)",
                "_set_path_marker(self)",
                "_set_vertices(self)",
                "_set_tuple_marker(self)",
                "_set_mathtext_path(self)",
                "_half_fill(self)",
                "_set_circle(self, reduction=1.0)",
                "_set_pixel(self)",
                "_set_point(self)",
                "_set_triangle(self, rot, skip)",
                "_set_triangle_up(self)",
                "_set_triangle_down(self)",
                "_set_triangle_left(self)",
                "_set_triangle_right(self)",
                "_set_square(self)",
                "_set_diamond(self)",
                "_set_thin_diamond(self)",
                "_set_pentagon(self)",
                "_set_star(self)",
                "_set_hexagon1(self)",
                "_set_hexagon2(self)",
                "_set_octagon(self)",
                "_set_vline(self)",
                "_set_hline(self)",
                "_set_tickleft(self)",
                "_set_tickright(self)",
                "_set_tickup(self)",
                "_set_tickdown(self)",
                "_set_tri_down(self)",
                "_set_tri_up(self)",
                "_set_tri_left(self)",
                "_set_tri_right(self)",
                "_set_caretdown(self)",
                "_set_caretup(self)",
                "_set_caretleft(self)",
                "_set_caretright(self)",
                "_set_caretdownbase(self)",
                "_set_caretupbase(self)",
                "_set_caretleftbase(self)",
                "_set_caretrightbase(self)",
                "_set_plus(self)",
                "_set_x(self)",
                "_set_plus_filled(self)",
                "_set_x_filled(self)"
            ],
            "variables_in_file": {
                "TICKLEFT": [
                    138,
                    173
                ],
                "TICKRIGHT": [
                    138,
                    174
                ],
                "TICKUP": [
                    138,
                    175
                ],
                "TICKDOWN": [
                    176,
                    138
                ],
                "CARETLEFT": [
                    177,
                    139
                ],
                "CARETRIGHT": [
                    178,
                    139
                ],
                "CARETUP": [
                    139,
                    179
                ],
                "CARETDOWN": [
                    139,
                    180
                ],
                "CARETLEFTBASE": [
                    140,
                    181
                ],
                "CARETRIGHTBASE": [
                    140,
                    182
                ],
                "CARETUPBASE": [
                    140,
                    183
                ],
                "CARETDOWNBASE": [
                    184,
                    140
                ],
                "range": [
                    140
                ],
                "_empty_path": [
                    228,
                    142
                ],
                "Path": [
                    769,
                    395,
                    525,
                    142,
                    400,
                    658,
                    787,
                    276,
                    789,
                    534,
                    535,
                    536,
                    537,
                    665,
                    790,
                    798,
                    416,
                    289,
                    418,
                    800,
                    420,
                    801,
                    423,
                    424,
                    809,
                    683,
                    813,
                    558,
                    565,
                    566,
                    567,
                    568,
                    695,
                    709,
                    326,
                    841,
                    589,
                    845,
                    336,
                    339,
                    723,
                    342,
                    598,
                    599,
                    473,
                    600,
                    601,
                    726,
                    727,
                    728,
                    487,
                    489,
                    632,
                    748,
                    623,
                    501,
                    503,
                    504,
                    633,
                    634,
                    636,
                    383
                ],
                "np.empty": [
                    142
                ],
                "np": [
                    636,
                    567,
                    599,
                    631,
                    664,
                    142,
                    271,
                    533,
                    565,
                    566,
                    568,
                    281,
                    597,
                    598,
                    380,
                    634,
                    318
                ],
                "markers": [
                    147
                ],
                "filled_markers": [
                    193
                ],
                "fillstyles": [
                    197
                ],
                "_half_fillstyles": [
                    198
                ],
                "_point_size_reduction": [
                    201
                ],
                "self._marker_function": [
                    226,
                    290,
                    236,
                    273,
                    275,
                    277,
                    280,
                    283,
                    221
                ],
                "self": [
                    513,
                    514,
                    515,
                    518,
                    519,
                    522,
                    523,
                    526,
                    528,
                    529,
                    547,
                    548,
                    549,
                    551,
                    554,
                    555,
                    557,
                    560,
                    561,
                    578,
                    579,
                    580,
                    582,
                    585,
                    586,
                    588,
                    591,
                    592,
                    612,
                    613,
                    614,
                    616,
                    619,
                    620,
                    622,
                    625,
                    626,
                    738,
                    647,
                    648,
                    649,
                    651,
                    654,
                    655,
                    657,
                    660,
                    661,
                    662,
                    677,
                    678,
                    679,
                    681,
                    686,
                    687,
                    688,
                    689,
                    692,
                    693,
                    698,
                    699,
                    700,
                    701,
                    704,
                    705,
                    706,
                    707,
                    712,
                    713,
                    714,
                    715,
                    718,
                    719,
                    720,
                    721,
                    731,
                    732,
                    221,
                    222,
                    223,
                    733,
                    734,
                    226,
                    737,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    741,
                    742,
                    239,
                    745,
                    746,
                    242,
                    751,
                    752,
                    245,
                    753,
                    754,
                    755,
                    758,
                    759,
                    762,
                    763,
                    766,
                    767,
                    257,
                    258,
                    259,
                    772,
                    773,
                    262,
                    776,
                    265,
                    777,
                    268,
                    780,
                    781,
                    784,
                    273,
                    785,
                    275,
                    277,
                    280,
                    793,
                    282,
                    283,
                    284,
                    794,
                    286,
                    795,
                    796,
                    290,
                    804,
                    805,
                    806,
                    807,
                    296,
                    297,
                    300,
                    303,
                    306,
                    818,
                    819,
                    309,
                    820,
                    821,
                    312,
                    822,
                    823,
                    315,
                    319,
                    320,
                    323,
                    835,
                    836,
                    326,
                    837,
                    838,
                    329,
                    839,
                    336,
                    337,
                    850,
                    339,
                    340,
                    851,
                    342,
                    343,
                    344,
                    852,
                    853,
                    347,
                    854,
                    855,
                    867,
                    868,
                    869,
                    870,
                    359,
                    871,
                    369,
                    372,
                    373,
                    376,
                    379,
                    380,
                    381,
                    382,
                    383,
                    395,
                    396,
                    397,
                    400,
                    410,
                    411,
                    414,
                    427,
                    428,
                    429,
                    431,
                    432,
                    434,
                    435,
                    436,
                    437,
                    440,
                    441,
                    443,
                    444,
                    446,
                    447,
                    449,
                    450,
                    452,
                    454,
                    457,
                    460,
                    463,
                    466,
                    469,
                    470,
                    471,
                    472,
                    473,
                    487,
                    489,
                    491,
                    492,
                    494,
                    497,
                    498,
                    499,
                    500,
                    501,
                    503,
                    504
                ],
                "self.set_fillstyle": [
                    222
                ],
                "fillstyle": [
                    256,
                    257,
                    258,
                    222,
                    255
                ],
                "self.set_marker": [
                    223
                ],
                "marker": [
                    271,
                    272,
                    274,
                    276,
                    278,
                    279,
                    281,
                    282,
                    284,
                    285,
                    286,
                    289,
                    293,
                    295,
                    296,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    346,
                    223
                ],
                "self._path": [
                    773,
                    647,
                    395,
                    400,
                    529,
                    662,
                    796,
                    547,
                    678,
                    807,
                    300,
                    432,
                    561,
                    689,
                    823,
                    440,
                    443,
                    701,
                    446,
                    320,
                    449,
                    578,
                    707,
                    835,
                    715,
                    336,
                    592,
                    721,
                    339,
                    342,
                    855,
                    473,
                    734,
                    867,
                    228,
                    612,
                    487,
                    239,
                    626,
                    754,
                    372,
                    501,
                    503,
                    383
                ],
                "self._transform": [
                    513,
                    514,
                    519,
                    649,
                    522,
                    777,
                    396,
                    397,
                    654,
                    781,
                    785,
                    767,
                    661,
                    793,
                    410,
                    804,
                    549,
                    677,
                    679,
                    554,
                    427,
                    686,
                    303,
                    818,
                    693,
                    698,
                    319,
                    704,
                    452,
                    580,
                    838,
                    712,
                    585,
                    718,
                    850,
                    469,
                    347,
                    731,
                    738,
                    229,
                    614,
                    742,
                    870,
                    746,
                    491,
                    492,
                    619,
                    751,
                    369,
                    497,
                    759,
                    379,
                    763
                ],
                "IdentityTransform": [
                    229
                ],
                "self._alt_path": [
                    450,
                    579,
                    548,
                    613,
                    230,
                    678,
                    648,
                    489,
                    836,
                    395,
                    868,
                    306,
                    504,
                    441,
                    444,
                    447
                ],
                "self._alt_transform": [
                    514,
                    452,
                    549,
                    580,
                    231,
                    614,
                    649,
                    679,
                    837,
                    492,
                    397,
                    839,
                    871,
                    309,
                    869
                ],
                "self._snap_threshold": [
                    523,
                    655,
                    794,
                    411,
                    805,
                    555,
                    428,
                    687,
                    819,
                    312,
                    699,
                    705,
                    713,
                    586,
                    719,
                    851,
                    470,
                    732,
                    232,
                    620,
                    752,
                    498,
                    380
                ],
                "self._joinstyle": [
                    515,
                    262,
                    454,
                    551,
                    233,
                    582,
                    616,
                    651,
                    681,
                    494,
                    337,
                    755,
                    340,
                    820,
                    852,
                    344
                ],
                "self._capstyle": [
                    265,
                    234
                ],
                "self._filled": [
                    795,
                    706,
                    806,
                    714,
                    235,
                    688,
                    720,
                    242,
                    753,
                    343,
                    315,
                    700,
                    733
                ],
                "bool": [
                    239
                ],
                "len": [
                    361,
                    330,
                    332,
                    239,
                    278
                ],
                "self._path.vertices": [
                    239
                ],
                "self._fillstyle": [
                    258,
                    245
                ],
                "rcParams": [
                    256,
                    360
                ],
                "cbook._check_in_list": [
                    257
                ],
                "cbook": [
                    257,
                    274
                ],
                "self.fillstyles": [
                    257
                ],
                "self._recache": [
                    297,
                    259
                ],
                "self._marker": [
                    323,
                    326,
                    296,
                    329,
                    268
                ],
                "isinstance": [
                    295,
                    271,
                    274,
                    276,
                    278,
                    281,
                    285
                ],
                "np.ndarray": [
                    281,
                    271
                ],
                "marker.ndim": [
                    271
                ],
                "marker.shape": [
                    272
                ],
                "self._set_vertices": [
                    273,
                    290
                ],
                "str": [
                    274
                ],
                "cbook.is_math_text": [
                    274
                ],
                "self._set_mathtext_path": [
                    275
                ],
                "self._set_path_marker": [
                    277
                ],
                "Sized": [
                    278
                ],
                "self._set_tuple_marker": [
                    280
                ],
                "list": [
                    281
                ],
                "self.markers": [
                    282,
                    284
                ],
                "getattr": [
                    283
                ],
                "MarkerStyle": [
                    285,
                    295
                ],
                "self.__dict__.update": [
                    286
                ],
                "self.__dict__": [
                    286
                ],
                "marker.__dict__": [
                    286
                ],
                "ValueError": [
                    346,
                    291,
                    292
                ],
                "format": [
                    292
                ],
                "err": [
                    293
                ],
                "self._transform.frozen": [
                    679,
                    397,
                    303
                ],
                "self._alt_transform.frozen": [
                    309
                ],
                "rescale": [
                    318,
                    319
                ],
                "np.max": [
                    318
                ],
                "np.abs": [
                    597,
                    318
                ],
                "path.vertices": [
                    318
                ],
                "path": [
                    320,
                    318
                ],
                "scale": [
                    522,
                    654,
                    793,
                    804,
                    554,
                    427,
                    686,
                    698,
                    319,
                    704,
                    712,
                    585,
                    718,
                    347,
                    731,
                    619,
                    751,
                    369,
                    379
                ],
                "Affine2D": [
                    522,
                    654,
                    793,
                    410,
                    804,
                    554,
                    427,
                    686,
                    818,
                    698,
                    319,
                    704,
                    837,
                    712,
                    585,
                    718,
                    850,
                    469,
                    347,
                    731,
                    869,
                    619,
                    751,
                    369,
                    497,
                    379
                ],
                "self._set_custom_marker": [
                    323,
                    326
                ],
                "numsides": [
                    331,
                    333,
                    336,
                    339,
                    342
                ],
                "rotation": [
                    347,
                    331,
                    333
                ],
                "symstyle": [
                    338,
                    341,
                    334,
                    335
                ],
                "Path.unit_regular_polygon": [
                    589,
                    525,
                    623,
                    336,
                    658
                ],
                "Path.unit_regular_star": [
                    339,
                    558
                ],
                "Path.unit_regular_asterisk": [
                    342
                ],
                "rotate_deg": [
                    679,
                    619,
                    427,
                    397,
                    497,
                    347
                ],
                "text": [
                    359,
                    361,
                    364,
                    365,
                    372
                ],
                "TextPath": [
                    359
                ],
                "self.get_marker": [
                    359
                ],
                "text.vertices": [
                    361,
                    364,
                    365
                ],
                "xmin": [
                    370,
                    364,
                    366
                ],
                "ymin": [
                    370,
                    364,
                    367
                ],
                "text.vertices.min": [
                    364
                ],
                "xmax": [
                    365,
                    366
                ],
                "ymax": [
                    365,
                    367
                ],
                "text.vertices.max": [
                    365
                ],
                "width": [
                    368,
                    370,
                    366
                ],
                "height": [
                    368,
                    370,
                    367
                ],
                "max_dim": [
                    368,
                    371
                ],
                "max": [
                    368
                ],
                "translate": [
                    837,
                    869,
                    369,
                    497,
                    818,
                    850,
                    469,
                    410
                ],
                "self._snap": [
                    373
                ],
                "self.get_fillstyle": [
                    588,
                    429,
                    526,
                    557,
                    622,
                    657,
                    499,
                    821,
                    853,
                    471,
                    376,
                    381
                ],
                "self._half_fillstyles": [
                    376
                ],
                "reduction": [
                    379
                ],
                "np.inf": [
                    380
                ],
                "fs": [
                    640,
                    386,
                    642,
                    388,
                    390,
                    526,
                    657,
                    539,
                    668,
                    541,
                    670,
                    543,
                    672,
                    429,
                    557,
                    821,
                    439,
                    442,
                    570,
                    572,
                    445,
                    574,
                    826,
                    828,
                    830,
                    588,
                    853,
                    471,
                    858,
                    603,
                    860,
                    605,
                    478,
                    607,
                    480,
                    862,
                    482,
                    622,
                    381,
                    499,
                    505,
                    507,
                    509,
                    638
                ],
                "self._half_fill": [
                    431,
                    528,
                    560,
                    591,
                    625,
                    500,
                    660,
                    822,
                    854,
                    472,
                    382
                ],
                "Path.unit_circle": [
                    383
                ],
                "rotate": [
                    512,
                    513,
                    387,
                    389,
                    391,
                    393,
                    396,
                    669,
                    671,
                    673,
                    675,
                    677,
                    827,
                    829,
                    831,
                    833,
                    838,
                    859,
                    861,
                    479,
                    863,
                    481,
                    865,
                    483,
                    485,
                    870,
                    491,
                    506,
                    508,
                    510
                ],
                "Path.unit_circle_righthalf": [
                    395
                ],
                "self._transform.rotate_deg": [
                    513,
                    738,
                    677,
                    742,
                    838,
                    870,
                    777,
                    746,
                    491,
                    396,
                    781,
                    785,
                    661,
                    693,
                    759,
                    763,
                    767
                ],
                "Path.unit_rectangle": [
                    400,
                    473,
                    501
                ],
                "self._set_circle": [
                    414
                ],
                "self._point_size_reduction": [
                    414
                ],
                "_triangle_path": [
                    416
                ],
                "_triangle_path_u": [
                    418
                ],
                "_triangle_path_d": [
                    420
                ],
                "_triangle_path_l": [
                    423
                ],
                "_triangle_path_r": [
                    424
                ],
                "rot": [
                    427
                ],
                "self._triangle_path": [
                    432
                ],
                "mpaths": [
                    449,
                    450,
                    434,
                    440,
                    441,
                    443,
                    444,
                    446,
                    447
                ],
                "self._triangle_path_u": [
                    434
                ],
                "self._triangle_path_l": [
                    435
                ],
                "self._triangle_path_d": [
                    436
                ],
                "self._triangle_path_r": [
                    437
                ],
                "skip": [
                    449,
                    450,
                    440,
                    441,
                    443,
                    444,
                    446,
                    447
                ],
                "self._set_triangle": [
                    457,
                    466,
                    460,
                    463
                ],
                "self._set_diamond": [
                    518
                ],
                "self._transform.scale": [
                    519
                ],
                "polypath": [
                    525,
                    558,
                    589,
                    592,
                    529,
                    561,
                    531,
                    563,
                    594,
                    623,
                    626,
                    628,
                    658,
                    662
                ],
                "verts": [
                    531,
                    534,
                    535,
                    536,
                    537,
                    563,
                    565,
                    566,
                    567,
                    568,
                    594,
                    598,
                    599,
                    600,
                    601,
                    628,
                    632,
                    633,
                    634,
                    636
                ],
                "polypath.vertices": [
                    563,
                    594,
                    531,
                    628
                ],
                "y": [
                    533,
                    631,
                    536,
                    537,
                    634,
                    635,
                    636
                ],
                "np.sqrt": [
                    664,
                    533,
                    631
                ],
                "top": [
                    641,
                    606,
                    639,
                    565,
                    534,
                    598,
                    632,
                    571,
                    540,
                    573,
                    542,
                    604
                ],
                "bottom": [
                    641,
                    599,
                    606,
                    639,
                    566,
                    535,
                    633,
                    571,
                    540,
                    573,
                    542,
                    604
                ],
                "left": [
                    544,
                    577,
                    546,
                    608,
                    610,
                    643,
                    645,
                    600,
                    567,
                    536,
                    634,
                    575
                ],
                "right": [
                    544,
                    577,
                    546,
                    608,
                    610,
                    643,
                    645,
                    601,
                    568,
                    537,
                    636,
                    575
                ],
                "mpath": [
                    641,
                    643,
                    645,
                    647,
                    540,
                    542,
                    544,
                    546,
                    547,
                    571,
                    573,
                    575,
                    577,
                    578,
                    604,
                    606,
                    608,
                    610,
                    612,
                    639
                ],
                "mpath_alt": [
                    641,
                    643,
                    645,
                    648,
                    540,
                    542,
                    544,
                    546,
                    548,
                    571,
                    573,
                    575,
                    577,
                    579,
                    604,
                    606,
                    608,
                    610,
                    613,
                    639
                ],
                "np.vstack": [
                    567,
                    599,
                    565,
                    598,
                    566,
                    568,
                    634,
                    636
                ],
                "x": [
                    599,
                    666,
                    597,
                    598,
                    631,
                    664,
                    665,
                    634,
                    635,
                    636
                ],
                "np.cos": [
                    597
                ],
                "np.pi": [
                    597
                ],
                "half": [
                    665,
                    678
                ],
                "_line_marker_path": [
                    683
                ],
                "self._line_marker_path": [
                    689
                ],
                "self._set_vline": [
                    692
                ],
                "_tickhoriz_path": [
                    695
                ],
                "self._tickhoriz_path": [
                    707,
                    701
                ],
                "_tickvert_path": [
                    709
                ],
                "self._tickvert_path": [
                    721,
                    715
                ],
                "_tri_path": [
                    723
                ],
                "Path.MOVETO": [
                    800,
                    801,
                    727,
                    789,
                    790,
                    726,
                    728
                ],
                "Path.LINETO": [
                    800,
                    801,
                    727,
                    789,
                    790,
                    726,
                    728
                ],
                "self._tri_path": [
                    734
                ],
                "self._set_tri_down": [
                    737,
                    745,
                    741
                ],
                "_caret_path": [
                    748
                ],
                "self._caret_path": [
                    754
                ],
                "self._set_caretdown": [
                    762,
                    772,
                    758,
                    766
                ],
                "_caret_path_base": [
                    769
                ],
                "self._caret_path_base": [
                    773
                ],
                "self._set_caretdownbase": [
                    776,
                    784,
                    780
                ],
                "_plus_path": [
                    787
                ],
                "self._plus_path": [
                    796
                ],
                "_x_path": [
                    798
                ],
                "self._x_path": [
                    807
                ],
                "_plus_filled_path": [
                    809
                ],
                "_plus_filled_path_t": [
                    813
                ],
                "self._plus_filled_path": [
                    823
                ],
                "rotate_alt": [
                    833,
                    859,
                    865,
                    839,
                    871,
                    861,
                    863,
                    827,
                    829,
                    831
                ],
                "self._plus_filled_path_t": [
                    835,
                    836
                ],
                "self._alt_transform.rotate_deg": [
                    871,
                    839
                ],
                "_x_filled_path": [
                    841
                ],
                "_x_filled_path_t": [
                    845
                ],
                "self._x_filled_path": [
                    855
                ],
                "self._x_filled_path_t": [
                    867,
                    868
                ]
            },
            "filtered_variables_in_file": {
                "TICKLEFT": [
                    138,
                    173
                ],
                "TICKRIGHT": [
                    138,
                    174
                ],
                "TICKUP": [
                    138,
                    175
                ],
                "TICKDOWN": [
                    176,
                    138
                ],
                "CARETLEFT": [
                    177,
                    139
                ],
                "CARETRIGHT": [
                    178,
                    139
                ],
                "CARETUP": [
                    139,
                    179
                ],
                "CARETDOWN": [
                    139,
                    180
                ],
                "CARETLEFTBASE": [
                    140,
                    181
                ],
                "CARETRIGHTBASE": [
                    140,
                    182
                ],
                "CARETUPBASE": [
                    140,
                    183
                ],
                "CARETDOWNBASE": [
                    184,
                    140
                ],
                "_empty_path": [
                    228,
                    142
                ],
                "Path": [
                    769,
                    395,
                    525,
                    142,
                    400,
                    658,
                    787,
                    276,
                    789,
                    534,
                    535,
                    536,
                    537,
                    665,
                    790,
                    798,
                    416,
                    289,
                    418,
                    800,
                    420,
                    801,
                    423,
                    424,
                    809,
                    683,
                    813,
                    558,
                    565,
                    566,
                    567,
                    568,
                    695,
                    709,
                    326,
                    841,
                    589,
                    845,
                    336,
                    339,
                    723,
                    342,
                    598,
                    599,
                    473,
                    600,
                    601,
                    726,
                    727,
                    728,
                    487,
                    489,
                    632,
                    748,
                    623,
                    501,
                    503,
                    504,
                    633,
                    634,
                    636,
                    383
                ],
                "np.empty": [
                    142
                ],
                "np": [
                    636,
                    567,
                    599,
                    631,
                    664,
                    142,
                    271,
                    533,
                    565,
                    566,
                    568,
                    281,
                    597,
                    598,
                    380,
                    634,
                    318
                ],
                "markers": [
                    147
                ],
                "filled_markers": [
                    193
                ],
                "fillstyles": [
                    197
                ],
                "_half_fillstyles": [
                    198
                ],
                "_point_size_reduction": [
                    201
                ],
                "self._marker_function": [
                    226,
                    290,
                    236,
                    273,
                    275,
                    277,
                    280,
                    283,
                    221
                ],
                "self": [
                    513,
                    514,
                    515,
                    518,
                    519,
                    522,
                    523,
                    526,
                    528,
                    529,
                    547,
                    548,
                    549,
                    551,
                    554,
                    555,
                    557,
                    560,
                    561,
                    578,
                    579,
                    580,
                    582,
                    585,
                    586,
                    588,
                    591,
                    592,
                    612,
                    613,
                    614,
                    616,
                    619,
                    620,
                    622,
                    625,
                    626,
                    738,
                    647,
                    648,
                    649,
                    651,
                    654,
                    655,
                    657,
                    660,
                    661,
                    662,
                    677,
                    678,
                    679,
                    681,
                    686,
                    687,
                    688,
                    689,
                    692,
                    693,
                    698,
                    699,
                    700,
                    701,
                    704,
                    705,
                    706,
                    707,
                    712,
                    713,
                    714,
                    715,
                    718,
                    719,
                    720,
                    721,
                    731,
                    732,
                    221,
                    222,
                    223,
                    733,
                    734,
                    226,
                    737,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    741,
                    742,
                    239,
                    745,
                    746,
                    242,
                    751,
                    752,
                    245,
                    753,
                    754,
                    755,
                    758,
                    759,
                    762,
                    763,
                    766,
                    767,
                    257,
                    258,
                    259,
                    772,
                    773,
                    262,
                    776,
                    265,
                    777,
                    268,
                    780,
                    781,
                    784,
                    273,
                    785,
                    275,
                    277,
                    280,
                    793,
                    282,
                    283,
                    284,
                    794,
                    286,
                    795,
                    796,
                    290,
                    804,
                    805,
                    806,
                    807,
                    296,
                    297,
                    300,
                    303,
                    306,
                    818,
                    819,
                    309,
                    820,
                    821,
                    312,
                    822,
                    823,
                    315,
                    319,
                    320,
                    323,
                    835,
                    836,
                    326,
                    837,
                    838,
                    329,
                    839,
                    336,
                    337,
                    850,
                    339,
                    340,
                    851,
                    342,
                    343,
                    344,
                    852,
                    853,
                    347,
                    854,
                    855,
                    867,
                    868,
                    869,
                    870,
                    359,
                    871,
                    369,
                    372,
                    373,
                    376,
                    379,
                    380,
                    381,
                    382,
                    383,
                    395,
                    396,
                    397,
                    400,
                    410,
                    411,
                    414,
                    427,
                    428,
                    429,
                    431,
                    432,
                    434,
                    435,
                    436,
                    437,
                    440,
                    441,
                    443,
                    444,
                    446,
                    447,
                    449,
                    450,
                    452,
                    454,
                    457,
                    460,
                    463,
                    466,
                    469,
                    470,
                    471,
                    472,
                    473,
                    487,
                    489,
                    491,
                    492,
                    494,
                    497,
                    498,
                    499,
                    500,
                    501,
                    503,
                    504
                ],
                "self.set_fillstyle": [
                    222
                ],
                "fillstyle": [
                    256,
                    257,
                    258,
                    222,
                    255
                ],
                "self.set_marker": [
                    223
                ],
                "marker": [
                    271,
                    272,
                    274,
                    276,
                    278,
                    279,
                    281,
                    282,
                    284,
                    285,
                    286,
                    289,
                    293,
                    295,
                    296,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    346,
                    223
                ],
                "self._path": [
                    773,
                    647,
                    395,
                    400,
                    529,
                    662,
                    796,
                    547,
                    678,
                    807,
                    300,
                    432,
                    561,
                    689,
                    823,
                    440,
                    443,
                    701,
                    446,
                    320,
                    449,
                    578,
                    707,
                    835,
                    715,
                    336,
                    592,
                    721,
                    339,
                    342,
                    855,
                    473,
                    734,
                    867,
                    228,
                    612,
                    487,
                    239,
                    626,
                    754,
                    372,
                    501,
                    503,
                    383
                ],
                "self._transform": [
                    513,
                    514,
                    519,
                    649,
                    522,
                    777,
                    396,
                    397,
                    654,
                    781,
                    785,
                    767,
                    661,
                    793,
                    410,
                    804,
                    549,
                    677,
                    679,
                    554,
                    427,
                    686,
                    303,
                    818,
                    693,
                    698,
                    319,
                    704,
                    452,
                    580,
                    838,
                    712,
                    585,
                    718,
                    850,
                    469,
                    347,
                    731,
                    738,
                    229,
                    614,
                    742,
                    870,
                    746,
                    491,
                    492,
                    619,
                    751,
                    369,
                    497,
                    759,
                    379,
                    763
                ],
                "IdentityTransform": [
                    229
                ],
                "self._alt_path": [
                    450,
                    579,
                    548,
                    613,
                    230,
                    678,
                    648,
                    489,
                    836,
                    395,
                    868,
                    306,
                    504,
                    441,
                    444,
                    447
                ],
                "self._alt_transform": [
                    514,
                    452,
                    549,
                    580,
                    231,
                    614,
                    649,
                    679,
                    837,
                    492,
                    397,
                    839,
                    871,
                    309,
                    869
                ],
                "self._snap_threshold": [
                    523,
                    655,
                    794,
                    411,
                    805,
                    555,
                    428,
                    687,
                    819,
                    312,
                    699,
                    705,
                    713,
                    586,
                    719,
                    851,
                    470,
                    732,
                    232,
                    620,
                    752,
                    498,
                    380
                ],
                "self._joinstyle": [
                    515,
                    262,
                    454,
                    551,
                    233,
                    582,
                    616,
                    651,
                    681,
                    494,
                    337,
                    755,
                    340,
                    820,
                    852,
                    344
                ],
                "self._capstyle": [
                    265,
                    234
                ],
                "self._filled": [
                    795,
                    706,
                    806,
                    714,
                    235,
                    688,
                    720,
                    242,
                    753,
                    343,
                    315,
                    700,
                    733
                ],
                "self._path.vertices": [
                    239
                ],
                "self._fillstyle": [
                    258,
                    245
                ],
                "rcParams": [
                    256,
                    360
                ],
                "cbook._check_in_list": [
                    257
                ],
                "cbook": [
                    257,
                    274
                ],
                "self.fillstyles": [
                    257
                ],
                "self._recache": [
                    297,
                    259
                ],
                "self._marker": [
                    323,
                    326,
                    296,
                    329,
                    268
                ],
                "np.ndarray": [
                    281,
                    271
                ],
                "marker.ndim": [
                    271
                ],
                "marker.shape": [
                    272
                ],
                "self._set_vertices": [
                    273,
                    290
                ],
                "cbook.is_math_text": [
                    274
                ],
                "self._set_mathtext_path": [
                    275
                ],
                "self._set_path_marker": [
                    277
                ],
                "Sized": [
                    278
                ],
                "self._set_tuple_marker": [
                    280
                ],
                "self.markers": [
                    282,
                    284
                ],
                "MarkerStyle": [
                    285,
                    295
                ],
                "self.__dict__.update": [
                    286
                ],
                "self.__dict__": [
                    286
                ],
                "marker.__dict__": [
                    286
                ],
                "err": [
                    293
                ],
                "self._transform.frozen": [
                    679,
                    397,
                    303
                ],
                "self._alt_transform.frozen": [
                    309
                ],
                "rescale": [
                    318,
                    319
                ],
                "np.max": [
                    318
                ],
                "np.abs": [
                    597,
                    318
                ],
                "path.vertices": [
                    318
                ],
                "path": [
                    320,
                    318
                ],
                "scale": [
                    522,
                    654,
                    793,
                    804,
                    554,
                    427,
                    686,
                    698,
                    319,
                    704,
                    712,
                    585,
                    718,
                    347,
                    731,
                    619,
                    751,
                    369,
                    379
                ],
                "Affine2D": [
                    522,
                    654,
                    793,
                    410,
                    804,
                    554,
                    427,
                    686,
                    818,
                    698,
                    319,
                    704,
                    837,
                    712,
                    585,
                    718,
                    850,
                    469,
                    347,
                    731,
                    869,
                    619,
                    751,
                    369,
                    497,
                    379
                ],
                "self._set_custom_marker": [
                    323,
                    326
                ],
                "numsides": [
                    331,
                    333,
                    336,
                    339,
                    342
                ],
                "rotation": [
                    347,
                    331,
                    333
                ],
                "symstyle": [
                    338,
                    341,
                    334,
                    335
                ],
                "Path.unit_regular_polygon": [
                    589,
                    525,
                    623,
                    336,
                    658
                ],
                "Path.unit_regular_star": [
                    339,
                    558
                ],
                "Path.unit_regular_asterisk": [
                    342
                ],
                "rotate_deg": [
                    679,
                    619,
                    427,
                    397,
                    497,
                    347
                ],
                "text": [
                    359,
                    361,
                    364,
                    365,
                    372
                ],
                "TextPath": [
                    359
                ],
                "self.get_marker": [
                    359
                ],
                "text.vertices": [
                    361,
                    364,
                    365
                ],
                "xmin": [
                    370,
                    364,
                    366
                ],
                "ymin": [
                    370,
                    364,
                    367
                ],
                "text.vertices.min": [
                    364
                ],
                "xmax": [
                    365,
                    366
                ],
                "ymax": [
                    365,
                    367
                ],
                "text.vertices.max": [
                    365
                ],
                "width": [
                    368,
                    370,
                    366
                ],
                "height": [
                    368,
                    370,
                    367
                ],
                "max_dim": [
                    368,
                    371
                ],
                "translate": [
                    837,
                    869,
                    369,
                    497,
                    818,
                    850,
                    469,
                    410
                ],
                "self._snap": [
                    373
                ],
                "self.get_fillstyle": [
                    588,
                    429,
                    526,
                    557,
                    622,
                    657,
                    499,
                    821,
                    853,
                    471,
                    376,
                    381
                ],
                "self._half_fillstyles": [
                    376
                ],
                "reduction": [
                    379
                ],
                "np.inf": [
                    380
                ],
                "fs": [
                    640,
                    386,
                    642,
                    388,
                    390,
                    526,
                    657,
                    539,
                    668,
                    541,
                    670,
                    543,
                    672,
                    429,
                    557,
                    821,
                    439,
                    442,
                    570,
                    572,
                    445,
                    574,
                    826,
                    828,
                    830,
                    588,
                    853,
                    471,
                    858,
                    603,
                    860,
                    605,
                    478,
                    607,
                    480,
                    862,
                    482,
                    622,
                    381,
                    499,
                    505,
                    507,
                    509,
                    638
                ],
                "self._half_fill": [
                    431,
                    528,
                    560,
                    591,
                    625,
                    500,
                    660,
                    822,
                    854,
                    472,
                    382
                ],
                "Path.unit_circle": [
                    383
                ],
                "rotate": [
                    512,
                    513,
                    387,
                    389,
                    391,
                    393,
                    396,
                    669,
                    671,
                    673,
                    675,
                    677,
                    827,
                    829,
                    831,
                    833,
                    838,
                    859,
                    861,
                    479,
                    863,
                    481,
                    865,
                    483,
                    485,
                    870,
                    491,
                    506,
                    508,
                    510
                ],
                "Path.unit_circle_righthalf": [
                    395
                ],
                "self._transform.rotate_deg": [
                    513,
                    738,
                    677,
                    742,
                    838,
                    870,
                    777,
                    746,
                    491,
                    396,
                    781,
                    785,
                    661,
                    693,
                    759,
                    763,
                    767
                ],
                "Path.unit_rectangle": [
                    400,
                    473,
                    501
                ],
                "self._set_circle": [
                    414
                ],
                "self._point_size_reduction": [
                    414
                ],
                "_triangle_path": [
                    416
                ],
                "_triangle_path_u": [
                    418
                ],
                "_triangle_path_d": [
                    420
                ],
                "_triangle_path_l": [
                    423
                ],
                "_triangle_path_r": [
                    424
                ],
                "rot": [
                    427
                ],
                "self._triangle_path": [
                    432
                ],
                "mpaths": [
                    449,
                    450,
                    434,
                    440,
                    441,
                    443,
                    444,
                    446,
                    447
                ],
                "self._triangle_path_u": [
                    434
                ],
                "self._triangle_path_l": [
                    435
                ],
                "self._triangle_path_d": [
                    436
                ],
                "self._triangle_path_r": [
                    437
                ],
                "skip": [
                    449,
                    450,
                    440,
                    441,
                    443,
                    444,
                    446,
                    447
                ],
                "self._set_triangle": [
                    457,
                    466,
                    460,
                    463
                ],
                "self._set_diamond": [
                    518
                ],
                "self._transform.scale": [
                    519
                ],
                "polypath": [
                    525,
                    558,
                    589,
                    592,
                    529,
                    561,
                    531,
                    563,
                    594,
                    623,
                    626,
                    628,
                    658,
                    662
                ],
                "verts": [
                    531,
                    534,
                    535,
                    536,
                    537,
                    563,
                    565,
                    566,
                    567,
                    568,
                    594,
                    598,
                    599,
                    600,
                    601,
                    628,
                    632,
                    633,
                    634,
                    636
                ],
                "polypath.vertices": [
                    563,
                    594,
                    531,
                    628
                ],
                "y": [
                    533,
                    631,
                    536,
                    537,
                    634,
                    635,
                    636
                ],
                "np.sqrt": [
                    664,
                    533,
                    631
                ],
                "top": [
                    641,
                    606,
                    639,
                    565,
                    534,
                    598,
                    632,
                    571,
                    540,
                    573,
                    542,
                    604
                ],
                "bottom": [
                    641,
                    599,
                    606,
                    639,
                    566,
                    535,
                    633,
                    571,
                    540,
                    573,
                    542,
                    604
                ],
                "left": [
                    544,
                    577,
                    546,
                    608,
                    610,
                    643,
                    645,
                    600,
                    567,
                    536,
                    634,
                    575
                ],
                "right": [
                    544,
                    577,
                    546,
                    608,
                    610,
                    643,
                    645,
                    601,
                    568,
                    537,
                    636,
                    575
                ],
                "mpath": [
                    641,
                    643,
                    645,
                    647,
                    540,
                    542,
                    544,
                    546,
                    547,
                    571,
                    573,
                    575,
                    577,
                    578,
                    604,
                    606,
                    608,
                    610,
                    612,
                    639
                ],
                "mpath_alt": [
                    641,
                    643,
                    645,
                    648,
                    540,
                    542,
                    544,
                    546,
                    548,
                    571,
                    573,
                    575,
                    577,
                    579,
                    604,
                    606,
                    608,
                    610,
                    613,
                    639
                ],
                "np.vstack": [
                    567,
                    599,
                    565,
                    598,
                    566,
                    568,
                    634,
                    636
                ],
                "x": [
                    599,
                    666,
                    597,
                    598,
                    631,
                    664,
                    665,
                    634,
                    635,
                    636
                ],
                "np.cos": [
                    597
                ],
                "np.pi": [
                    597
                ],
                "half": [
                    665,
                    678
                ],
                "_line_marker_path": [
                    683
                ],
                "self._line_marker_path": [
                    689
                ],
                "self._set_vline": [
                    692
                ],
                "_tickhoriz_path": [
                    695
                ],
                "self._tickhoriz_path": [
                    707,
                    701
                ],
                "_tickvert_path": [
                    709
                ],
                "self._tickvert_path": [
                    721,
                    715
                ],
                "_tri_path": [
                    723
                ],
                "Path.MOVETO": [
                    800,
                    801,
                    727,
                    789,
                    790,
                    726,
                    728
                ],
                "Path.LINETO": [
                    800,
                    801,
                    727,
                    789,
                    790,
                    726,
                    728
                ],
                "self._tri_path": [
                    734
                ],
                "self._set_tri_down": [
                    737,
                    745,
                    741
                ],
                "_caret_path": [
                    748
                ],
                "self._caret_path": [
                    754
                ],
                "self._set_caretdown": [
                    762,
                    772,
                    758,
                    766
                ],
                "_caret_path_base": [
                    769
                ],
                "self._caret_path_base": [
                    773
                ],
                "self._set_caretdownbase": [
                    776,
                    784,
                    780
                ],
                "_plus_path": [
                    787
                ],
                "self._plus_path": [
                    796
                ],
                "_x_path": [
                    798
                ],
                "self._x_path": [
                    807
                ],
                "_plus_filled_path": [
                    809
                ],
                "_plus_filled_path_t": [
                    813
                ],
                "self._plus_filled_path": [
                    823
                ],
                "rotate_alt": [
                    833,
                    859,
                    865,
                    839,
                    871,
                    861,
                    863,
                    827,
                    829,
                    831
                ],
                "self._plus_filled_path_t": [
                    835,
                    836
                ],
                "self._alt_transform.rotate_deg": [
                    871,
                    839
                ],
                "_x_filled_path": [
                    841
                ],
                "_x_filled_path_t": [
                    845
                ],
                "self._x_filled_path": [
                    855
                ],
                "self._x_filled_path_t": [
                    867,
                    868
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_3/lib/matplotlib/tests/test_marker.py",
                "test_function": "test_marker_fillstyle",
                "test_function_code": "def test_marker_fillstyle():\n    marker_style = markers.MarkerStyle(marker='o', fillstyle='none')\n    assert marker_style.get_fillstyle() == 'none'\n    assert not marker_style.is_filled()",
                "test_error": "assert not True\n +  where True = <bound method MarkerStyle.is_filled of <matplotlib.markers.MarkerStyle object at 0x10d3fb880>>()\n +    where <bound method MarkerStyle.is_filled of <matplotlib.markers.MarkerStyle object at 0x10d3fb880>> = <matplotlib.markers.MarkerStyle object at 0x10d3fb880>.is_filled",
                "full_test_error": "def test_marker_fillstyle():\n        marker_style = markers.MarkerStyle(marker='o', fillstyle='none')\n        assert marker_style.get_fillstyle() == 'none'\n>       assert not marker_style.is_filled()\nE       assert not True\nE        +  where True = <bound method MarkerStyle.is_filled of <matplotlib.markers.MarkerStyle object at 0x10d3fb880>>()\nE        +    where <bound method MarkerStyle.is_filled of <matplotlib.markers.MarkerStyle object at 0x10d3fb880>> = <matplotlib.markers.MarkerStyle object at 0x10d3fb880>.is_filled\n\nlib/matplotlib/tests/test_marker.py:13: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}