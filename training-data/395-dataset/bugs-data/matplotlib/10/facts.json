{
    "1.1.1": "def set_tick_params(self, which='major', reset=False, **kw):\n    \n    cbook._check_in_list(['major', 'minor', 'both'], which=which)\n    kwtrans = self._translate_tick_kw(kw)\n\n    # the kwargs are stored in self._major/minor_tick_kw so that any\n    # future new ticks will automatically get them\n    if reset:\n        if which in ['major', 'both']:\n            self._major_tick_kw.clear()\n            self._major_tick_kw.update(kwtrans)\n        if which in ['minor', 'both']:\n            self._minor_tick_kw.clear()\n            self._minor_tick_kw.update(kwtrans)\n        self.reset_ticks()\n    else:\n        if which in ['major', 'both']:\n            self._major_tick_kw.update(kwtrans)\n            for tick in self.majorTicks:\n                tick._apply_params(**kwtrans)\n        if which in ['minor', 'both']:\n            self._minor_tick_kw.update(kwtrans)\n            for tick in self.minorTicks:\n                tick._apply_params(**kwtrans)\n        # special-case label color to also apply to the offset text\n        if 'labelcolor' in kwtrans:\n            self.offsetText.set_color(kwtrans['labelcolor'])\n\n    self.stale = True\n",
    "1.1.2": "Set appearance parameters for ticks, ticklabels, and gridlines.\n\nFor documentation of keyword arguments, see\n:meth:`matplotlib.axes.Axes.tick_params`.",
    "1.2.1": "class Axis(martist.Artist)",
    "1.2.2": "Base class for `.XAxis` and `.YAxis`.\n\nAttributes\n----------\nisDefault_label : bool\n\naxes : `matplotlib.axes.Axes`\n    The `~.axes.Axes` to which the Axis belongs.\nmajor : `matplotlib.axis.Ticker`\n    Determines the major tick positions and their label format.\nminor : `matplotlib.axis.Ticker`\n    Determines the minor tick positions and their label format.\ncallbacks : `matplotlib.cbook.CallbackRegistry`\n\nlabel : `.Text`\n    The axis label.\nlabelpad : float\n    The distance between the axis label and the tick labels.\n    Defaults to :rc:`axes.labelpad` = 4.\noffsetText : `.Text`\n    A `.Text` object containing the data offset of the ticks (if any).\npickradius : float\n    The acceptance radius for containment tests. See also `.Axis.contains`.\nmajorTicks : list of `.Tick`\n    The major ticks.\nminorTicks : list of `.Tick`\n    The minor ticks.",
    "1.2.3": [
        "reset_ticks(self)",
        "_translate_tick_kw(kw)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_10/lib/matplotlib/axis.py",
    "1.3.2": [
        "_apply_params(self, **kw)",
        "reset_ticks(self)",
        "_translate_tick_kw(kw)"
    ],
    "1.4.1": [
        "def test_offset_text_visible():\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.plot([1.01e9, 1.02e9, 1.03e9])\n    ax.yaxis.set_tick_params(label1On=False, label2On=True)\n    assert ax.yaxis.get_offset_text().get_visible()\n    ax.yaxis.set_tick_params(label2On=False)\n    assert not ax.yaxis.get_offset_text().get_visible()"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_10/lib/matplotlib/tests/test_axes.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert not True\nE        +  where True = <bound method Artist.get_visible of Text(0, 0.5, '')>()\nE        +    where <bound method Artist.get_visible of Text(0, 0.5, '')> = Text(0, 0.5, '').get_visible\nE        +      where Text(0, 0.5, '') = <bound method Axis.get_offset_text of <matplotlib.axis.YAxis object at 0x12075aac0>>()\nE        +        where <bound method Axis.get_offset_text of <matplotlib.axis.YAxis object at 0x12075aac0>> = <matplotlib.axis.YAxis object at 0x12075aac0>.get_offset_text\nE        +          where <matplotlib.axis.YAxis object at 0x12075aac0> = <matplotlib.axes._subplots.AxesSubplot object at 0x12076d9a0>.yaxis"
        ]
    ],
    "2.1.2": [
        [
            "def test_offset_text_visible():\n        fig = plt.figure()\n        ax = fig.add_subplot(1, 1, 1)\n        ax.plot([1.01e9, 1.02e9, 1.03e9])\n        ax.yaxis.set_tick_params(label1On=False, label2On=True)\n        assert ax.yaxis.get_offset_text().get_visible()\n        ax.yaxis.set_tick_params(label2On=False)\n>       assert not ax.yaxis.get_offset_text().get_visible()",
            "\nlib/matplotlib/tests/test_axes.py:5507: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}