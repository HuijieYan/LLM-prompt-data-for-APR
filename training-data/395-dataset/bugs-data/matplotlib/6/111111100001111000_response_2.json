{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n    kwcolor = kwargs.pop('color', None)\n    \n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color'\"\n                         \" kwarg but not both; they differ but\"\n                         \" their functionalities overlap.\")\n    \n    if kwcolor is not None:\n        try:\n            mcolors.to_rgba_array(kwcolor)\n        except ValueError as err:\n            raise ValueError(\n                \"'color' kwarg must be an color or sequence of color \"\n                \"specs.  For a sequence of values to be color-mapped, use \"\n                \"the 'c' argument instead.\") from err\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n    \n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']\n    \n    c_was_none = c is None\n    if c is None:\n        c = (facecolors if facecolors is not None\n             else \"b\" if rcParams['_internal.classic_mode']\n             else get_next_color_func())\n    c_is_string_or_strings = (\n        isinstance(c, str)\n        or (np.iterable(c) and len(c) > 0\n            and isinstance(cbook.safe_first_element(c), str)))\n    \n    c_is_mapped = False if c_was_none else True\n    valid_shape = True\n    \n    if not c_was_none and kwcolor is None and not c_is_string_or_strings:\n        try:\n            c = np.asanyarray(c, dtype=float)\n            c_is_mapped = True\n            if c.size != xsize:\n                c_is_mapped = False\n        except ValueError:\n            pass\n    if not c_is_mapped and c.size in ((3,), (4,)):\n        raise ValueError(\n            \"'c' argument looks like a single numeric RGB or \"\n            \"RGBA sequence, which should be avoided as value-\"\n            \"mapping will have precedence in case its length \"\n            \"matches with 'x' & 'y'.  Please use a 2-D array \"\n            \"with a single row if you really want to specify \"\n            \"the same RGB or RGBA value for all points.\")\n    \n    try:\n        colors = mcolors.to_rgba_array(c) if c_is_mapped else mcolors.to_rgba_array(c)\n    except (TypeError, ValueError) as err:\n        if \"RGBA values should be within 0-1 range\" in str(err):\n            raise\n        else:\n            raise ValueError(\n                f\"'c' argument must be a color, a sequence of colors, \"\n                f\"or a sequence of numbers, not {c}\") from err\n    else:\n        if len(colors) not in (0, 1, xsize):\n            raise ValueError(\n                f\"'c' argument has {c.size} elements, which is inconsistent \"\n                f\"with 'x' and 'y' with size {xsize}.\")\n    \n    return c, colors, edgecolors"
        }
    ]
}