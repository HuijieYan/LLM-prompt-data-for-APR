{
    "1.1.1": "@staticmethod\ndef _parse_scatter_color_args(c, edgecolors, kwargs, xsize,\n                              get_next_color_func):\n    \n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n\n    kwcolor = kwargs.pop('color', None)\n\n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color'\"\n                         \" kwarg but not both; they differ but\"\n                         \" their functionalities overlap.\")\n\n    if kwcolor is not None:\n        try:\n            mcolors.to_rgba_array(kwcolor)\n        except ValueError as err:\n            raise ValueError(\n                \"'color' kwarg must be an color or sequence of color \"\n                \"specs.  For a sequence of values to be color-mapped, use \"\n                \"the 'c' argument instead.\") from err\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n\n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        edgecolors = rcParams['scatter.edgecolors']\n\n    c_was_none = c is None\n    if c is None:\n        c = (facecolors if facecolors is not None\n             else \"b\" if rcParams['_internal.classic_mode']\n             else get_next_color_func())\n    c_is_string_or_strings = (\n        isinstance(c, str)\n        or (np.iterable(c) and len(c) > 0\n            and isinstance(cbook.safe_first_element(c), str)))\n\n    def invalid_shape_exception(csize, xsize):\n        return ValueError(\n            f\"'c' argument has {csize} elements, which is inconsistent \"\n            f\"with 'x' and 'y' with size {xsize}.\")\n\n    c_is_mapped = False  # Unless proven otherwise below.\n    valid_shape = True  # Unless proven otherwise below.\n    if not c_was_none and kwcolor is None and not c_is_string_or_strings:\n        try:  # First, does 'c' look suitable for value-mapping?\n            c = np.asanyarray(c, dtype=float)\n        except ValueError:\n            pass  # Failed to convert to float array; must be color specs.\n        else:\n            # If c can be either mapped values or a RGB(A) color, prefer\n            # the former if shapes match, the latter otherwise.\n            if c.size == xsize:\n                c = c.ravel()\n                c_is_mapped = True\n            else:  # Wrong size; it must not be intended for mapping.\n                if c.shape in ((3,), (4,)):\n                    _log.warning(\n                        \"'c' argument looks like a single numeric RGB or \"\n                        \"RGBA sequence, which should be avoided as value-\"\n                        \"mapping will have precedence in case its length \"\n                        \"matches with 'x' & 'y'.  Please use a 2-D array \"\n                        \"with a single row if you really want to specify \"\n                        \"the same RGB or RGBA value for all points.\")\n                valid_shape = False\n    if not c_is_mapped:\n        try:  # Is 'c' acceptable as PathCollection facecolors?\n            colors = mcolors.to_rgba_array(c)\n        except (TypeError, ValueError) as err:\n            if \"RGBA values should be within 0-1 range\" in str(err):\n                raise\n            else:\n                if not valid_shape:\n                    raise invalid_shape_exception(c.size, xsize) from err\n                # Both the mapping *and* the RGBA conversion failed: pretty\n                # severe failure => one may appreciate a verbose feedback.\n                raise ValueError(\n                    f\"'c' argument must be a color, a sequence of colors, \"\n                    f\"or a sequence of numbers, not {c}\") from err\n        else:\n            if len(colors) not in (0, 1, xsize):\n                # NB: remember that a single color is also acceptable.\n                # Besides *colors* will be an empty array if c == 'none'.\n                raise invalid_shape_exception(len(colors), xsize)\n    else:\n        colors = None  # use cmap, norm after collection is created\n    return c, colors, edgecolors\n",
    "1.1.2": "Helper function to process color related arguments of `.Axes.scatter`.\n\nArgument precedence for facecolors:\n\n- c (if not None)\n- kwargs['facecolors']\n- kwargs['facecolor']\n- kwargs['color'] (==kwcolor)\n- 'b' if in classic mode else the result of ``get_next_color_func()``\n\nArgument precedence for edgecolors:\n\n- edgecolors (is an explicit kw argument in scatter())\n- kwargs['edgecolor']\n- kwargs['color'] (==kwcolor)\n- 'face' if not in classic mode else None\n\nParameters\n----------\nc : color or sequence or sequence of color or None\n    See argument description of `.Axes.scatter`.\nedgecolors : color or sequence of color or {'face', 'none'} or None\n    See argument description of `.Axes.scatter`.\nkwargs : dict\n    Additional kwargs. If these keys exist, we pop and process them:\n    'facecolors', 'facecolor', 'edgecolor', 'color'\n    Note: The dict is modified by this function.\nxsize : int\n    The size of the x and y arrays passed to `.Axes.scatter`.\nget_next_color_func : callable\n    A callable that returns a color. This color is used as facecolor\n    if no other color is provided.\n\n    Note, that this is a function rather than a fixed color value to\n    support conditional evaluation of the next color.  As of the\n    current implementation obtaining the next color from the\n    property cycle advances the cycle. This must only happen if we\n    actually use the color, which will only be decided within this\n    method.\n\nReturns\n-------\nc\n    The input *c* if it was not *None*, else a color derived from the\n    other inputs or defaults.\ncolors : array(N, 4) or None\n    The facecolors as RGBA values, or *None* if a colormap is used.\nedgecolors\n    The edgecolor.",
    "1.2.1": "class Axes(_AxesBase)",
    "1.2.2": "The `Axes` contains most of the figure elements: `~.axis.Axis`,\n`~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\nand sets the coordinate system.\n\nThe `Axes` instance supports callbacks through a callbacks attribute which\nis a `~.cbook.CallbackRegistry` instance.  The events you can connect to\nare 'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(*ax*) where *ax* is the `Axes` instance.\n\nAttributes\n----------\ndataLim : `.Bbox`\n    The bounding box enclosing all data displayed in the Axes.\nviewLim : `.Bbox`\n    The view limits in data coordinates.",
    "1.2.3": [
        "invalid_shape_exception(csize, xsize)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_6/lib/matplotlib/axes/_axes.py",
    "1.3.2": [
        "invalid_shape_exception(csize, xsize)"
    ],
    "1.4.1": [
        "    @pytest.mark.style('default')\n    @check_figures_equal(extensions=[\"png\"])\n    def test_scatter_single_color_c(self, fig_test, fig_ref):\n        rgb = [[1, 0.5, 0.05]]\n        rgba = [[1, 0.5, 0.05, .5]]\n\n        # set via color kwarg\n        ax_ref = fig_ref.subplots()\n        ax_ref.scatter(np.ones(3), range(3), color=rgb)\n        ax_ref.scatter(np.ones(4)*2, range(4), color=rgba)\n\n        # set via broadcasting via c\n        ax_test = fig_test.subplots()\n        ax_test.scatter(np.ones(3), range(3), c=rgb)\n        ax_test.scatter(np.ones(4)*2, range(4), c=rgba)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_6/lib/matplotlib/tests/test_axes.py"
    ],
    "2.1.1": [
        [
            "E           matplotlib.testing.exceptions.ImageComparisonFailure: images not close (RMS 5.043):\nE           \tresult_images/test_axes/test_scatter_single_color_c[png].png\nE           \tresult_images/test_axes/test_scatter_single_color_c[png]-expected.png\nE           \tresult_images/test_axes/test_scatter_single_color_c[png]-failed-diff.png"
        ]
    ],
    "2.1.2": [
        [
            "ext = 'png'\nrequest = <FixtureRequest for <Function test_scatter_single_color_c[png]>>\nargs = (<matplotlib.tests.test_axes.TestScatter object at 0x1179e00a0>,)\nkwargs = {}, file_name = 'test_scatter_single_color_c[png]'\nfig_test = <Figure size 640x480 with 1 Axes>\nfig_ref = <Figure size 640x480 with 1 Axes>\ntest_image_path = PosixPath('/Volumes/SSD2T/bgp_envs/repos/matplotlib_6/result_images/test_axes/test_scatter_single_color_c[png].png')\nref_image_path = PosixPath('/Volumes/SSD2T/bgp_envs/repos/matplotlib_6/result_images/test_axes/test_scatter_single_color_c[png]-expected.png')\n\n    @pytest.mark.parametrize(\"ext\", extensions)\n    def wrapper(*args, ext, request, **kwargs):\n        if 'ext' in old_sig.parameters:\n            kwargs['ext'] = ext\n        if 'request' in old_sig.parameters:\n            kwargs['request'] = request\n    \n        file_name = \"\".join(c for c in request.node.name\n                            if c in ALLOWED_CHARS)\n        try:\n            fig_test = plt.figure(\"test\")\n            fig_ref = plt.figure(\"reference\")\n            func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)\n            test_image_path = result_dir / (file_name + \".\" + ext)\n            ref_image_path = result_dir / (file_name + \"-expected.\" + ext)\n            fig_test.savefig(test_image_path)\n            fig_ref.savefig(ref_image_path)\n>           _raise_on_image_difference(\n                ref_image_path, test_image_path, tol=tol\n            )",
            "\nlib/matplotlib/testing/decorators.py:446: ImageComparisonFailure"
        ]
    ],
    "2.1.3": [
        [
            {
                "kwargs": "{'color': [[1, 0.5, 0.05]]}",
                "xsize": "3"
            },
            {
                "facecolors": "[[1, 0.5, 0.05]]",
                "kwargs": "{}",
                "edgecolors": "[[1, 0.5, 0.05]]",
                "kwcolor": "[[1, 0.5, 0.05]]",
                "c": "[[1, 0.5, 0.05]]",
                "c_was_none": "True",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "False",
                "valid_shape": "True",
                "colors": "array([[1.  , 0.5 , 0.05, 1.  ]])",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x110d72820>"
            }
        ],
        [
            {
                "kwargs": "{'color': [[1, 0.5, 0.05, 0.5]]}",
                "xsize": "4"
            },
            {
                "facecolors": "[[1, 0.5, 0.05, 0.5]]",
                "kwargs": "{}",
                "edgecolors": "[[1, 0.5, 0.05, 0.5]]",
                "kwcolor": "[[1, 0.5, 0.05, 0.5]]",
                "c": "[[1, 0.5, 0.05, 0.5]]",
                "c_was_none": "True",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "False",
                "valid_shape": "True",
                "colors": "array([[1.  , 0.5 , 0.05, 0.5 ]])",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x11ad68310>"
            }
        ],
        [
            {
                "kwargs": "{}",
                "c": "[[1, 0.5, 0.05]]",
                "xsize": "3"
            },
            {
                "edgecolors": "'face'",
                "c": "array([1.  , 0.5 , 0.05])",
                "c_was_none": "False",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "True",
                "valid_shape": "True",
                "c.size": "3",
                "c.shape": "(3,)",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x11ad9f3a0>"
            }
        ],
        [
            {
                "kwargs": "{}",
                "c": "[[1, 0.5, 0.05, 0.5]]",
                "xsize": "4"
            },
            {
                "edgecolors": "'face'",
                "c": "array([1.  , 0.5 , 0.05, 0.5 ])",
                "c_was_none": "False",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "True",
                "valid_shape": "True",
                "c.size": "4",
                "c.shape": "(4,)",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x11ad9fe50>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "kwargs": "dict",
                "xsize": "int"
            },
            {
                "facecolors": "list",
                "kwargs": "dict",
                "edgecolors": "list",
                "kwcolor": "list",
                "c": "list",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "colors": "ndarray",
                "invalid_shape_exception": "function"
            }
        ],
        [
            {
                "kwargs": "dict",
                "xsize": "int"
            },
            {
                "facecolors": "list",
                "kwargs": "dict",
                "edgecolors": "list",
                "kwcolor": "list",
                "c": "list",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "colors": "ndarray",
                "invalid_shape_exception": "function"
            }
        ],
        [
            {
                "kwargs": "dict",
                "c": "list",
                "xsize": "int"
            },
            {
                "edgecolors": "str",
                "c": "ndarray",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "c.size": "int",
                "c.shape": "tuple",
                "invalid_shape_exception": "function"
            }
        ],
        [
            {
                "kwargs": "dict",
                "c": "list",
                "xsize": "int"
            },
            {
                "edgecolors": "str",
                "c": "ndarray",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "c.size": "int",
                "c.shape": "tuple",
                "invalid_shape_exception": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "kwargs": "{'color': [[1, 0.5, 0.05]]}",
                "xsize": "3"
            },
            {
                "facecolors": "[[1, 0.5, 0.05]]",
                "kwargs": "{}",
                "edgecolors": "[[1, 0.5, 0.05]]",
                "kwcolor": "[[1, 0.5, 0.05]]",
                "c": "[[1, 0.5, 0.05]]",
                "c_was_none": "True",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "False",
                "valid_shape": "True",
                "colors": "array([[1.  , 0.5 , 0.05, 1.  ]])",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x119c6b670>"
            }
        ],
        [
            {
                "kwargs": "{'color': [[1, 0.5, 0.05, 0.5]]}",
                "xsize": "4"
            },
            {
                "facecolors": "[[1, 0.5, 0.05, 0.5]]",
                "kwargs": "{}",
                "edgecolors": "[[1, 0.5, 0.05, 0.5]]",
                "kwcolor": "[[1, 0.5, 0.05, 0.5]]",
                "c": "[[1, 0.5, 0.05, 0.5]]",
                "c_was_none": "True",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "False",
                "valid_shape": "True",
                "colors": "array([[1.  , 0.5 , 0.05, 0.5 ]])",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x119cc0160>"
            }
        ],
        [
            {
                "kwargs": "{}",
                "c": "[[1, 0.5, 0.05]]",
                "xsize": "3"
            },
            {
                "edgecolors": "'face'",
                "c": "array([[1.  , 0.5 , 0.05]])",
                "c_was_none": "False",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "False",
                "valid_shape": "True",
                "c.shape": "(1, 3)",
                "c.size": "3",
                "colors": "array([[1.  , 0.5 , 0.05, 1.  ]])",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x11a2c21f0>"
            }
        ],
        [
            {
                "kwargs": "{}",
                "c": "[[1, 0.5, 0.05, 0.5]]",
                "xsize": "4"
            },
            {
                "edgecolors": "'face'",
                "c": "array([[1.  , 0.5 , 0.05, 0.5 ]])",
                "c_was_none": "False",
                "c_is_string_or_strings": "False",
                "c_is_mapped": "False",
                "valid_shape": "True",
                "c.shape": "(1, 4)",
                "c.size": "4",
                "colors": "array([[1.  , 0.5 , 0.05, 0.5 ]])",
                "invalid_shape_exception": "<function Axes._parse_scatter_color_args.<locals>.invalid_shape_exception at 0x11a2c2ca0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "kwargs": "dict",
                "xsize": "int"
            },
            {
                "facecolors": "list",
                "kwargs": "dict",
                "edgecolors": "list",
                "kwcolor": "list",
                "c": "list",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "colors": "ndarray",
                "invalid_shape_exception": "function"
            }
        ],
        [
            {
                "kwargs": "dict",
                "xsize": "int"
            },
            {
                "facecolors": "list",
                "kwargs": "dict",
                "edgecolors": "list",
                "kwcolor": "list",
                "c": "list",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "colors": "ndarray",
                "invalid_shape_exception": "function"
            }
        ],
        [
            {
                "kwargs": "dict",
                "c": "list",
                "xsize": "int"
            },
            {
                "edgecolors": "str",
                "c": "ndarray",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "c.shape": "tuple",
                "c.size": "int",
                "colors": "ndarray",
                "invalid_shape_exception": "function"
            }
        ],
        [
            {
                "kwargs": "dict",
                "c": "list",
                "xsize": "int"
            },
            {
                "edgecolors": "str",
                "c": "ndarray",
                "c_was_none": "bool",
                "c_is_string_or_strings": "bool",
                "c_is_mapped": "bool",
                "valid_shape": "bool",
                "c.shape": "tuple",
                "c.size": "int",
                "colors": "ndarray",
                "invalid_shape_exception": "function"
            }
        ]
    ],
    "3.1.1": [
        "Scatter produce multiple colors for a single RGB/RGBA input\n"
    ],
    "3.1.2": [
        "Bug report\nBug summary\n\nScatter docs say that in order to provide a single RGB/RGBA color for all scatter elements, it is required to pass a 2D array with a single row for c argument input:\n\nIf you want to specify the same RGB or RGBA value for all points, use a 2-D array with a single row. Otherwise, value- matching will have precedence in case of a size matching with x and y.\n\nWhen x/y shape is 3 and RGB is passed as a 2D array with a single row (e.g. c=[[1, 0.5, 0.05]]), or when x/y shape is 4 and RGBA is passed as a 2D array with a single row, the plot elements have several different colors (taken from the default colormap?) while all should have the same color. The problem occurs for both plt.scatter and ax.scatter calls, and also if c input is provided as a numpy array of shape (1,3) for RGB or (1,4) for RGBA instead of a nested list.\n\nCode for reproduction\n\nimport matplotlib.pyplot as plt\nplt.scatter(range(3), range(3), c=[[1, 0.5, 0.05]])\n#alternatively, for RGBA scenario\nplt.scatter(range(4), range(4), c=[[1, 0.5, 0.05, 1]])\n\nExpected outcome\nAll points have the same color: RGB (1, 0.5, 0.05).\n\nMatplotlib version\n\nOperating system: Linux\nMatplotlib version: 3.2.1\nMatplotlib backend (print(matplotlib.get_backend())): agg\nPython version: 3.7.3\nMatplotlib installed through pip\n"
    ]
}