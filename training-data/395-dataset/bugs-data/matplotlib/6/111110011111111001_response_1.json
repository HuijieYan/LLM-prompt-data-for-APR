{
    "matplotlib": [
        {
            "bugID": 6,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 4179,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def _parse_scatter_color_args(c, edgecolors, kwargs, xsize, get_next_color_func):\n\n    facecolors = kwargs.pop('facecolors', None)\n    facecolors = kwargs.pop('facecolor', facecolors)\n    edgecolors = kwargs.pop('edgecolor', edgecolors)\n    \n    kwcolor = kwargs.pop('color', None)\n    \n    if kwcolor is not None and c is not None:\n        raise ValueError(\"Supply a 'c' argument or a 'color' kwarg but not both; they differ but their functionalities overlap.\")\n    \n    if kwcolor is not None:\n        kwcolor = np.atleast_2d(kwcolor)\n        if kwcolor.size == 1:\n            kwcolor = np.repeat(kwcolor, xsize, axis=0)\n        mcolors.to_rgba_array(kwcolor)  # Convert to RGBA values\n        if edgecolors is None:\n            edgecolors = kwcolor\n        if facecolors is None:\n            facecolors = kwcolor\n    \n    if edgecolors is None and not rcParams['_internal.classic_mode']:\n        if (\n            isinstance(edgecolors, str) and\n            edgecolors.lower() == 'none' or edgecolors.lower() == 'face'\n        ):\n            edgecolors = 'face'\n    \n    c_was_none = c is None\n    if c is None:\n        c = (facecolors if facecolors is not None\n             else \"b\" if rcParams['_internal.classic_mode']\n             else get_next_color_func())\n    c_is_string_or_strings = (\n        isinstance(c, str)\n        or (np.iterable(c) and len(c) > 0\n            and isinstance(cbook.safe_first_element(c), str)))\n    \n    if c_was_none and isinstance(c, list) and len(c) == 1:\n        c = c[0]  # Unpack single element list\n    \n    # Validate color array shape and type\n    if not c_was_none and kwcolor is None and not c_is_string_or_strings:\n        c = np.atleast_2d(c)\n        # If c can be either mapped values or a RGB(A) color, prefer the former if shapes match, the latter otherwise.\n        if not c_is_mapped:\n            c = np.asarray(c, dtype=float)\n            if c.shape not in ((3,), (4,)):\n                _log.warning(\n                    \"'c' argument looks like a single numeric RGB or \"\n                    \"RGBA sequence, which should be avoided as value-\"\n                    \"mapping will have precedence in case its length \"\n                    \"matches with 'x' & 'y'.  Please use a 2-D array \"\n                    \"with a single row if you really want to specify \"\n                    \"the same RGB or RGBA value for all points.\")\n    \n    colors = None\n    if c.size != 0:\n        try:\n            # Is 'c' acceptable as PathCollection facecolors?\n            colors = mcolors.to_rgba_array(c)\n            if c.size > 1 and len(colors) not in (0, 1, xsize):\n                raise ValueError(\"Invalid number of colors\")\n        except (TypeError, ValueError) as err:\n            if \"RGBA values should be within 0-1 range\" in str(err):\n                raise\n            else:\n                raise ValueError(\n                    f\"'c' argument must be a color, a sequence of colors, \"\n                    f\"or a sequence of numbers, not {c}\") from err\n    \n    return c, colors, edgecolors"
        }
    ]
}