{
    "matplotlib:8": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_8/lib/matplotlib/axes/_base.py": {
            "buggy_functions": [
                {
                    "function_name": "set_xlim",
                    "function_code": "def set_xlim(self, left=None, right=None, emit=True, auto=False,\n             *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    Parameters\n    ----------\n    left : float, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may also be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    right : float, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off, None leaves unchanged.\n\n    xmin, xmax : float, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and np.iterable(left):\n        left, right = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n\n    if left is None or right is None:\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n\n    if self.get_xscale() == 'log' and (left <= 0 or right <= 0):\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive left xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive right xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(\n            f\"Attempting to set identical left == right == {left} results \"\n            f\"in singular transformations; automatically expanding.\")\n    reverse = left > right\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n    # cast to bool to avoid bad interaction between python 3.8 and np.bool_\n    left, right = sorted([left, right], reverse=bool(reverse))\n\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        # Call all of the other x-axes that are shared with this one\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return left, right\n",
                    "decorators": [],
                    "docstring": "Set the x-axis view limits.\n\nParameters\n----------\nleft : float, optional\n    The left xlim in data coordinates. Passing *None* leaves the\n    limit unchanged.\n\n    The left and right xlims may also be passed as the tuple\n    (*left*, *right*) as the first positional argument (or as\n    the *left* keyword argument).\n\n    .. ACCEPTS: (bottom: float, top: float)\n\nright : float, optional\n    The right xlim in data coordinates. Passing *None* leaves the\n    limit unchanged.\n\nemit : bool, default: True\n    Whether to notify observers of limit change.\n\nauto : bool or None, default: False\n    Whether to turn on autoscaling of the x-axis. True turns on,\n    False turns off, None leaves unchanged.\n\nxmin, xmax : float, optional\n    They are equivalent to left and right respectively,\n    and it is an error to pass both *xmin* and *left* or\n    *xmax* and *right*.\n\nReturns\n-------\nleft, right : (float, float)\n    The new x-axis limits in data coordinates.\n\nSee Also\n--------\nget_xlim\nset_xbound, get_xbound\ninvert_xaxis, xaxis_inverted\n\nNotes\n-----\nThe *left* value may be greater than the *right* value, in which\ncase the x-axis values will decrease from left to right.\n\nExamples\n--------\n>>> set_xlim(left, right)\n>>> set_xlim((left, right))\n>>> left, right = set_xlim(left, right)\n\nOne limit may be left unchanged.\n\n>>> set_xlim(right=right_lim)\n\nLimits may be passed in reverse order to flip the direction of\nthe x-axis. For example, suppose *x* represents the number of\nyears before present. The x-axis limits might be set like the\nfollowing so 5000 years ago is on the left of the plot and the\npresent is on the right.\n\n>>> set_xlim(5000, 0)",
                    "start_line": 3216,
                    "end_line": 3348,
                    "variables": {
                        "right": [
                            3328,
                            3329,
                            3330,
                            3332,
                            3334,
                            3348,
                            3284,
                            3285,
                            3291,
                            3293,
                            3295,
                            3297,
                            3299,
                            3305,
                            3306,
                            3308,
                            3318,
                            3323,
                            3324
                        ],
                        "np.iterable": [
                            3284
                        ],
                        "np": [
                            3284
                        ],
                        "left": [
                            3328,
                            3329,
                            3330,
                            3332,
                            3334,
                            3348,
                            3284,
                            3285,
                            3287,
                            3289,
                            3295,
                            3296,
                            3299,
                            3303,
                            3304,
                            3308,
                            3312,
                            3317,
                            3324,
                            3326
                        ],
                        "xmin": [
                            3289,
                            3286
                        ],
                        "TypeError": [
                            3288,
                            3292
                        ],
                        "xmax": [
                            3290,
                            3293
                        ],
                        "self._process_unit_info": [
                            3295
                        ],
                        "self": [
                            3296,
                            3297,
                            3329,
                            3330,
                            3302,
                            3334,
                            3336,
                            3339,
                            3308,
                            3341,
                            3342,
                            3311,
                            3343,
                            3345,
                            3347,
                            3295
                        ],
                        "self._validate_converted_limits": [
                            3296,
                            3297
                        ],
                        "self.convert_xunits": [
                            3296,
                            3297
                        ],
                        "old_left": [
                            3304,
                            3317,
                            3302,
                            3311
                        ],
                        "old_right": [
                            3306,
                            3323,
                            3302,
                            3311
                        ],
                        "self.get_xlim": [
                            3302,
                            3311
                        ],
                        "self.get_xscale": [
                            3308
                        ],
                        "cbook._warn_external": [
                            3313,
                            3325,
                            3319
                        ],
                        "cbook": [
                            3313,
                            3325,
                            3319
                        ],
                        "reverse": [
                            3328,
                            3332
                        ],
                        "nonsingular": [
                            3329
                        ],
                        "self.xaxis.get_major_locator": [
                            3329
                        ],
                        "self.xaxis": [
                            3329,
                            3330
                        ],
                        "self.xaxis.limit_range_for_scale": [
                            3330
                        ],
                        "sorted": [
                            3332
                        ],
                        "bool": [
                            3336,
                            3332
                        ],
                        "self._viewLim.intervalx": [
                            3334
                        ],
                        "self._viewLim": [
                            3334
                        ],
                        "auto": [
                            3336,
                            3344,
                            3335
                        ],
                        "self._autoscaleXon": [
                            3336
                        ],
                        "emit": [
                            3338
                        ],
                        "self.callbacks.process": [
                            3339
                        ],
                        "self.callbacks": [
                            3339
                        ],
                        "other": [
                            3341,
                            3342,
                            3343,
                            3345,
                            3346
                        ],
                        "self._shared_x_axes.get_siblings": [
                            3341
                        ],
                        "self._shared_x_axes": [
                            3341
                        ],
                        "other.set_xlim": [
                            3343
                        ],
                        "self.viewLim.intervalx": [
                            3343
                        ],
                        "self.viewLim": [
                            3343
                        ],
                        "other.figure": [
                            3345,
                            3346
                        ],
                        "self.figure": [
                            3345
                        ],
                        "other.figure.canvas.draw_idle": [
                            3346
                        ],
                        "other.figure.canvas": [
                            3346
                        ],
                        "self.stale": [
                            3347
                        ]
                    },
                    "filtered_variables": {
                        "right": [
                            3328,
                            3329,
                            3330,
                            3332,
                            3334,
                            3348,
                            3284,
                            3285,
                            3291,
                            3293,
                            3295,
                            3297,
                            3299,
                            3305,
                            3306,
                            3308,
                            3318,
                            3323,
                            3324
                        ],
                        "np.iterable": [
                            3284
                        ],
                        "np": [
                            3284
                        ],
                        "left": [
                            3328,
                            3329,
                            3330,
                            3332,
                            3334,
                            3348,
                            3284,
                            3285,
                            3287,
                            3289,
                            3295,
                            3296,
                            3299,
                            3303,
                            3304,
                            3308,
                            3312,
                            3317,
                            3324,
                            3326
                        ],
                        "xmin": [
                            3289,
                            3286
                        ],
                        "xmax": [
                            3290,
                            3293
                        ],
                        "self._process_unit_info": [
                            3295
                        ],
                        "self": [
                            3296,
                            3297,
                            3329,
                            3330,
                            3302,
                            3334,
                            3336,
                            3339,
                            3308,
                            3341,
                            3342,
                            3311,
                            3343,
                            3345,
                            3347,
                            3295
                        ],
                        "self._validate_converted_limits": [
                            3296,
                            3297
                        ],
                        "self.convert_xunits": [
                            3296,
                            3297
                        ],
                        "old_left": [
                            3304,
                            3317,
                            3302,
                            3311
                        ],
                        "old_right": [
                            3306,
                            3323,
                            3302,
                            3311
                        ],
                        "self.get_xlim": [
                            3302,
                            3311
                        ],
                        "self.get_xscale": [
                            3308
                        ],
                        "cbook._warn_external": [
                            3313,
                            3325,
                            3319
                        ],
                        "cbook": [
                            3313,
                            3325,
                            3319
                        ],
                        "reverse": [
                            3328,
                            3332
                        ],
                        "nonsingular": [
                            3329
                        ],
                        "self.xaxis.get_major_locator": [
                            3329
                        ],
                        "self.xaxis": [
                            3329,
                            3330
                        ],
                        "self.xaxis.limit_range_for_scale": [
                            3330
                        ],
                        "self._viewLim.intervalx": [
                            3334
                        ],
                        "self._viewLim": [
                            3334
                        ],
                        "auto": [
                            3336,
                            3344,
                            3335
                        ],
                        "self._autoscaleXon": [
                            3336
                        ],
                        "emit": [
                            3338
                        ],
                        "self.callbacks.process": [
                            3339
                        ],
                        "self.callbacks": [
                            3339
                        ],
                        "other": [
                            3341,
                            3342,
                            3343,
                            3345,
                            3346
                        ],
                        "self._shared_x_axes.get_siblings": [
                            3341
                        ],
                        "self._shared_x_axes": [
                            3341
                        ],
                        "other.set_xlim": [
                            3343
                        ],
                        "self.viewLim.intervalx": [
                            3343
                        ],
                        "self.viewLim": [
                            3343
                        ],
                        "other.figure": [
                            3345,
                            3346
                        ],
                        "self.figure": [
                            3345
                        ],
                        "other.figure.canvas.draw_idle": [
                            3346
                        ],
                        "other.figure.canvas": [
                            3346
                        ],
                        "self.stale": [
                            3347
                        ]
                    },
                    "diff_line_number": 3334,
                    "class_data": {
                        "signature": "class _AxesBase(martist.Artist)",
                        "docstring": null,
                        "constructor_docstring": "Build an axes in a figure.\n\nParameters\n----------\nfig : `~matplotlib.figure.Figure`\n    The axes is build in the `.Figure` *fig*.\n\nrect : [left, bottom, width, height]\n    The axes is build in the rectangle *rect*. *rect* is in\n    `.Figure` coordinates.\n\nsharex, sharey : `~.axes.Axes`, optional\n    The x or y `~.matplotlib.axis` is shared with the x or\n    y axis in the input `~.axes.Axes`.\n\nframeon : bool, default: True\n    Whether the axes frame is visible.\n\nbox_aspect : None, or a number, optional\n    Sets the aspect of the axes box. See `~.axes.Axes.set_box_aspect`\n    for details.\n\n**kwargs\n    Other optional keyword arguments:\n\n    %(Axes)s\n\nReturns\n-------\n`~.axes.Axes`\n    The new `~.axes.Axes` object.",
                        "functions": [
                            "def __str__(self):\n    return '{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})'.format(type(self).__name__, self._position.bounds)",
                            "def __init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs):\n    \"\"\"\n    Build an axes in a figure.\n\n    Parameters\n    ----------\n    fig : `~matplotlib.figure.Figure`\n        The axes is build in the `.Figure` *fig*.\n\n    rect : [left, bottom, width, height]\n        The axes is build in the rectangle *rect*. *rect* is in\n        `.Figure` coordinates.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        The x or y `~.matplotlib.axis` is shared with the x or\n        y axis in the input `~.axes.Axes`.\n\n    frameon : bool, default: True\n        Whether the axes frame is visible.\n\n    box_aspect : None, or a number, optional\n        Sets the aspect of the axes box. See `~.axes.Axes.set_box_aspect`\n        for details.\n\n    **kwargs\n        Other optional keyword arguments:\n\n        %(Axes)s\n\n    Returns\n    -------\n    `~.axes.Axes`\n        The new `~.axes.Axes` object.\n    \"\"\"\n    martist.Artist.__init__(self)\n    if isinstance(rect, mtransforms.Bbox):\n        self._position = rect\n    else:\n        self._position = mtransforms.Bbox.from_bounds(*rect)\n    if self._position.width < 0 or self._position.height < 0:\n        raise ValueError('Width and height specified must be non-negative')\n    self._originalPosition = self._position.frozen()\n    self.axes = self\n    self._aspect = 'auto'\n    self._adjustable = 'box'\n    self._anchor = 'C'\n    self._stale_viewlim_x = False\n    self._stale_viewlim_y = False\n    self._sharex = None\n    self._sharey = None\n    self.set_label(label)\n    self.set_figure(fig)\n    self.set_box_aspect(box_aspect)\n    self._axes_locator = None\n    self.spines = self._gen_axes_spines()\n    self._init_axis()\n    if facecolor is None:\n        facecolor = mpl.rcParams['axes.facecolor']\n    self._facecolor = facecolor\n    self._frameon = frameon\n    self.set_axisbelow(mpl.rcParams['axes.axisbelow'])\n    self._rasterization_zorder = None\n    self.cla()\n    if sharex is not None:\n        self.sharex(sharex)\n    if sharey is not None:\n        self.sharey(sharey)\n    self.fmt_xdata = None\n    self.fmt_ydata = None\n    self.set_navigate(True)\n    self.set_navigate_mode(None)\n    if xscale:\n        self.set_xscale(xscale)\n    if yscale:\n        self.set_yscale(yscale)\n    self.update(kwargs)\n    if self.xaxis is not None:\n        self._xcid = self.xaxis.callbacks.connect('units finalize', lambda: self._on_units_changed(scalex=True))\n    if self.yaxis is not None:\n        self._ycid = self.yaxis.callbacks.connect('units finalize', lambda: self._on_units_changed(scaley=True))\n    rcParams = mpl.rcParams\n    self.tick_params(top=rcParams['xtick.top'] and rcParams['xtick.minor.top'], bottom=rcParams['xtick.bottom'] and rcParams['xtick.minor.bottom'], labeltop=rcParams['xtick.labeltop'] and rcParams['xtick.minor.top'], labelbottom=rcParams['xtick.labelbottom'] and rcParams['xtick.minor.bottom'], left=rcParams['ytick.left'] and rcParams['ytick.minor.left'], right=rcParams['ytick.right'] and rcParams['ytick.minor.right'], labelleft=rcParams['ytick.labelleft'] and rcParams['ytick.minor.left'], labelright=rcParams['ytick.labelright'] and rcParams['ytick.minor.right'], which='minor')\n    self.tick_params(top=rcParams['xtick.top'] and rcParams['xtick.major.top'], bottom=rcParams['xtick.bottom'] and rcParams['xtick.major.bottom'], labeltop=rcParams['xtick.labeltop'] and rcParams['xtick.major.top'], labelbottom=rcParams['xtick.labelbottom'] and rcParams['xtick.major.bottom'], left=rcParams['ytick.left'] and rcParams['ytick.major.left'], right=rcParams['ytick.right'] and rcParams['ytick.major.right'], labelleft=rcParams['ytick.labelleft'] and rcParams['ytick.major.left'], labelright=rcParams['ytick.labelright'] and rcParams['ytick.major.right'], which='major')\n    self._layoutbox = None\n    self._poslayoutbox = None",
                            "def __getstate__(self):\n    state = super().__getstate__()\n    for key in ['_layoutbox', '_poslayoutbox']:\n        state[key] = None\n    for grouper_name in ['_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        grouper = getattr(self, grouper_name)\n        state[grouper_name] = grouper.get_siblings(self) if self in grouper else None\n    return state",
                            "def __setstate__(self, state):\n    for grouper_name in ['_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        siblings = state.pop(grouper_name)\n        if siblings:\n            getattr(self, grouper_name).join(*siblings)\n    self.__dict__ = state\n    self._stale = True",
                            "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the axes bounding box in display space; *args* and *kwargs*\n    are empty.\n\n    This bounding box does not include the spines, ticks, ticklables,\n    or other labels.  For a bounding box including these elements use\n    `~matplotlib.axes.Axes.get_tightbbox`.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_tightbbox\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.get_window_extent\n\n    \"\"\"\n    return self.bbox",
                            "def _init_axis(self):\n    self.xaxis = maxis.XAxis(self)\n    self.spines['bottom'].register_axis(self.xaxis)\n    self.spines['top'].register_axis(self.xaxis)\n    self.yaxis = maxis.YAxis(self)\n    self.spines['left'].register_axis(self.yaxis)\n    self.spines['right'].register_axis(self.yaxis)\n    self._update_transScale()",
                            "def set_figure(self, fig):\n    martist.Artist.set_figure(self, fig)\n    self.bbox = mtransforms.TransformedBbox(self._position, fig.transFigure)\n    self.dataLim = mtransforms.Bbox.null()\n    self._viewLim = mtransforms.Bbox.unit()\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self._set_lim_and_transforms()",
                            "def _unstale_viewLim(self):\n    scalex = any((ax._stale_viewlim_x for ax in self._shared_x_axes.get_siblings(self)))\n    scaley = any((ax._stale_viewlim_y for ax in self._shared_y_axes.get_siblings(self)))\n    if scalex or scaley:\n        for ax in self._shared_x_axes.get_siblings(self):\n            ax._stale_viewlim_x = False\n        for ax in self._shared_y_axes.get_siblings(self):\n            ax._stale_viewlim_y = False\n        self.autoscale_view(scalex=scalex, scaley=scaley)",
                            "@property\ndef viewLim(self):\n    self._unstale_viewLim()\n    return self._viewLim",
                            "def _request_autoscale_view(self, tight=None, scalex=True, scaley=True):\n    if tight is not None:\n        self._tight = tight\n    if scalex:\n        self._stale_viewlim_x = True\n    if scaley:\n        self._stale_viewlim_y = True",
                            "def _set_lim_and_transforms(self):\n    \"\"\"\n    Set the *_xaxis_transform*, *_yaxis_transform*, *transScale*,\n    *transData*, *transLimits* and *transAxes* transformations.\n\n    .. note::\n\n        This method is primarily used by rectilinear projections of the\n        `~matplotlib.axes.Axes` class, and is meant to be overridden by\n        new kinds of projection axes that need different transformations\n        and limits. (See `~matplotlib.projections.polar.PolarAxes` for an\n        example.)\n    \"\"\"\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self.transLimits = mtransforms.BboxTransformFrom(mtransforms.TransformedBbox(self._viewLim, self.transScale))\n    self.transData = self.transScale + (self.transLimits + self.transAxes)\n    self._xaxis_transform = mtransforms.blended_transform_factory(self.transData, self.transAxes)\n    self._yaxis_transform = mtransforms.blended_transform_factory(self.transAxes, self.transData)",
                            "def get_xaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing x-axis labels, ticks\n    and gridlines.  The x-direction is in data coordinates and the\n    y-direction is in axis coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._xaxis_transform\n    elif which == 'tick1':\n        return self.spines['bottom'].get_spine_transform()\n    elif which == 'tick2':\n        return self.spines['top'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                            "def get_xaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing x-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in data coordinates and the y-direction is in\n        axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['xtick.alignment']\n    return (self.get_xaxis_transform(which='tick1') + mtransforms.ScaledTranslation(0, -1 * pad_points / 72, self.figure.dpi_scale_trans), 'top', labels_align)",
                            "def get_xaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondary x-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in data coordinates and the y-direction\n        is in axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['xtick.alignment']\n    return (self.get_xaxis_transform(which='tick2') + mtransforms.ScaledTranslation(0, pad_points / 72, self.figure.dpi_scale_trans), 'bottom', labels_align)",
                            "def get_yaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing y-axis labels, ticks\n    and gridlines.  The x-direction is in axis coordinates and the\n    y-direction is in data coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._yaxis_transform\n    elif which == 'tick1':\n        return self.spines['left'].get_spine_transform()\n    elif which == 'tick2':\n        return self.spines['right'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                            "def get_yaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing y-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in axis coordinates and the y-direction is in\n        data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['ytick.alignment']\n    return (self.get_yaxis_transform(which='tick1') + mtransforms.ScaledTranslation(-1 * pad_points / 72, 0, self.figure.dpi_scale_trans), labels_align, 'right')",
                            "def get_yaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondart y-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in axis coordinates and the y-direction\n        is in data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['ytick.alignment']\n    return (self.get_yaxis_transform(which='tick2') + mtransforms.ScaledTranslation(pad_points / 72, 0, self.figure.dpi_scale_trans), labels_align, 'left')",
                            "def _update_transScale(self):\n    self.transScale.set(mtransforms.blended_transform_factory(self.xaxis.get_transform(), self.yaxis.get_transform()))\n    for line in getattr(self, 'lines', []):\n        try:\n            line._transformed_path.invalidate()\n        except AttributeError:\n            pass",
                            "def get_position(self, original=False):\n    \"\"\"\n    Get a copy of the axes rectangle as a `.Bbox`.\n\n    Parameters\n    ----------\n    original : bool\n        If ``True``, return the original position. Otherwise return the\n        active position. For an explanation of the positions see\n        `.set_position`.\n\n    Returns\n    -------\n    `.Bbox`\n\n    \"\"\"\n    if original:\n        return self._originalPosition.frozen()\n    else:\n        locator = self.get_axes_locator()\n        if not locator:\n            self.apply_aspect()\n        return self._position.frozen()",
                            "def set_position(self, pos, which='both'):\n    \"\"\"\n    Set the axes position.\n\n    Axes have two position attributes. The 'original' position is the\n    position allocated for the Axes. The 'active' position is the\n    position the Axes is actually drawn at. These positions are usually\n    the same unless a fixed aspect is set to the Axes. See `.set_aspect`\n    for details.\n\n    Parameters\n    ----------\n    pos : [left, bottom, width, height] or `~matplotlib.transforms.Bbox`\n        The new position of the in `.Figure` coordinates.\n\n    which : {'both', 'active', 'original'}, default: 'both'\n        Determines which position variables to change.\n\n    \"\"\"\n    self._set_position(pos, which=which)\n    self._layoutbox = None\n    self._poslayoutbox = None",
                            "def _set_position(self, pos, which='both'):\n    \"\"\"\n    Private version of set_position.\n\n    Call this internally to get the same functionality of `get_position`,\n    but not to take the axis out of the constrained_layout hierarchy.\n    \"\"\"\n    if not isinstance(pos, mtransforms.BboxBase):\n        pos = mtransforms.Bbox.from_bounds(*pos)\n    for ax in self._twinned_axes.get_siblings(self):\n        if which in ('both', 'active'):\n            ax._position.set(pos)\n        if which in ('both', 'original'):\n            ax._originalPosition.set(pos)\n    self.stale = True",
                            "def reset_position(self):\n    \"\"\"\n    Reset the active position to the original position.\n\n    This resets the a possible position change due to aspect constraints.\n    For an explanation of the positions see `.set_position`.\n    \"\"\"\n    for ax in self._twinned_axes.get_siblings(self):\n        pos = ax.get_position(original=True)\n        ax.set_position(pos, which='active')",
                            "def set_axes_locator(self, locator):\n    \"\"\"\n    Set the axes locator.\n\n    Parameters\n    ----------\n    locator : Callable[[Axes, Renderer], Bbox]\n    \"\"\"\n    self._axes_locator = locator\n    self.stale = True",
                            "def get_axes_locator(self):\n    \"\"\"\n    Return the axes_locator.\n    \"\"\"\n    return self._axes_locator",
                            "def _set_artist_props(self, a):\n    \"\"\"Set the boilerplate props for artists added to axes.\"\"\"\n    a.set_figure(self.figure)\n    if not a.is_transform_set():\n        a.set_transform(self.transData)\n    a.axes = self\n    if a.mouseover:\n        self._mouseover_set.add(a)",
                            "def _gen_axes_patch(self):\n    \"\"\"\n    Returns\n    -------\n    Patch\n        The patch used to draw the background of the axes.  It is also used\n        as the clipping path for any data elements on the axes.\n\n        In the standard axes, this is a rectangle, but in other projections\n        it may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)",
                            "def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'):\n    \"\"\"\n    Returns\n    -------\n    dict\n        Mapping of spine names to `.Line2D` or `.Patch` instances that are\n        used to draw axes spines.\n\n        In the standard axes, spines are single line segments, but in other\n        projections they may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return OrderedDict(((side, mspines.Spine.linear_spine(self, side)) for side in ['left', 'right', 'bottom', 'top']))",
                            "def sharex(self, other):\n    \"\"\"\n    Share the x-axis with *other*.\n\n    This is equivalent to passing ``sharex=other`` when constructing the\n    axes, and cannot be used if the x-axis is already being shared with\n    another axes.\n    \"\"\"\n    cbook._check_isinstance(_AxesBase, other=other)\n    if self._sharex is not None and other is not self._sharex:\n        raise ValueError('x-axis is already shared')\n    self._shared_x_axes.join(self, other)\n    self._sharex = other\n    self.xaxis.major = other.xaxis.major\n    self.xaxis.minor = other.xaxis.minor\n    x0, x1 = other.get_xlim()\n    self.set_xlim(x0, x1, emit=False, auto=other.get_autoscalex_on())\n    self.xaxis._scale = other.xaxis._scale",
                            "def sharey(self, other):\n    \"\"\"\n    Share the y-axis with *other*.\n\n    This is equivalent to passing ``sharey=other`` when constructing the\n    axes, and cannot be used if the y-axis is already being shared with\n    another axes.\n    \"\"\"\n    cbook._check_isinstance(_AxesBase, other=other)\n    if self._sharey is not None and other is not self._sharey:\n        raise ValueError('y-axis is already shared')\n    self._shared_y_axes.join(self, other)\n    self._sharey = other\n    self.yaxis.major = other.yaxis.major\n    self.yaxis.minor = other.yaxis.minor\n    y0, y1 = other.get_ylim()\n    self.set_ylim(y0, y1, emit=False, auto=other.get_autoscaley_on())\n    self.yaxis._scale = other.yaxis._scale",
                            "def cla(self):\n    \"\"\"Clear the current axes.\"\"\"\n    if hasattr(self, 'patch'):\n        patch_visible = self.patch.get_visible()\n    else:\n        patch_visible = True\n    xaxis_visible = self.xaxis.get_visible()\n    yaxis_visible = self.yaxis.get_visible()\n    self.xaxis.cla()\n    self.yaxis.cla()\n    for name, spine in self.spines.items():\n        spine.cla()\n    self.ignore_existing_data_limits = True\n    self.callbacks = cbook.CallbackRegistry()\n    if self._sharex is not None:\n        self.sharex(self._sharex)\n    else:\n        self.xaxis._set_scale('linear')\n        try:\n            self.set_xlim(0, 1)\n        except TypeError:\n            pass\n    if self._sharey is not None:\n        self.sharey(self._sharey)\n    else:\n        self.yaxis._set_scale('linear')\n        try:\n            self.set_ylim(0, 1)\n        except TypeError:\n            pass\n    if mpl.rcParams['xtick.minor.visible']:\n        self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if mpl.rcParams['ytick.minor.visible']:\n        self.yaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if self._sharex is None:\n        self._autoscaleXon = True\n    if self._sharey is None:\n        self._autoscaleYon = True\n    self._xmargin = mpl.rcParams['axes.xmargin']\n    self._ymargin = mpl.rcParams['axes.ymargin']\n    self._tight = None\n    self._use_sticky_edges = True\n    self._update_transScale()\n    self._get_lines = _process_plot_var_args(self)\n    self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n    self._gridOn = mpl.rcParams['axes.grid']\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.tables = []\n    self.artists = []\n    self.images = []\n    self._mouseover_set = _OrderedSet()\n    self.child_axes = []\n    self._current_image = None\n    self.legend_ = None\n    self.collections = []\n    self.containers = []\n    self.grid(False)\n    self.grid(self._gridOn, which=mpl.rcParams['axes.grid.which'], axis=mpl.rcParams['axes.grid.axis'])\n    props = font_manager.FontProperties(size=mpl.rcParams['axes.titlesize'], weight=mpl.rcParams['axes.titleweight'])\n    y = mpl.rcParams['axes.titley']\n    if y is None:\n        y = 1.0\n        self._autotitlepos = True\n    else:\n        self._autotitlepos = False\n    self.title = mtext.Text(x=0.5, y=y, text='', fontproperties=props, verticalalignment='baseline', horizontalalignment='center')\n    self._left_title = mtext.Text(x=0.0, y=y, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='left')\n    self._right_title = mtext.Text(x=1.0, y=y, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='right')\n    title_offset_points = mpl.rcParams['axes.titlepad']\n    self._set_title_offset_trans(title_offset_points)\n    for _title in (self.title, self._left_title, self._right_title):\n        self._set_artist_props(_title)\n    self.patch = self._gen_axes_patch()\n    self.patch.set_figure(self.figure)\n    self.patch.set_facecolor(self._facecolor)\n    self.patch.set_edgecolor('None')\n    self.patch.set_linewidth(0)\n    self.patch.set_transform(self.transAxes)\n    self.set_axis_on()\n    self.xaxis.set_clip_path(self.patch)\n    self.yaxis.set_clip_path(self.patch)\n    self._shared_x_axes.clean()\n    self._shared_y_axes.clean()\n    if self._sharex is not None:\n        self.xaxis.set_visible(xaxis_visible)\n        self.patch.set_visible(patch_visible)\n    if self._sharey is not None:\n        self.yaxis.set_visible(yaxis_visible)\n        self.patch.set_visible(patch_visible)\n    self.stale = True",
                            "def clear(self):\n    \"\"\"Clear the axes.\"\"\"\n    self.cla()",
                            "def get_facecolor(self):\n    \"\"\"Get the facecolor of the Axes.\"\"\"\n    return self.patch.get_facecolor()",
                            "def set_facecolor(self, color):\n    \"\"\"\n    Set the facecolor of the Axes.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self._facecolor = color\n    self.stale = True\n    return self.patch.set_facecolor(color)",
                            "def _set_title_offset_trans(self, title_offset_points):\n    \"\"\"\n    Set the offset for the title either from :rc:`axes.titlepad`\n    or from set_title kwarg ``pad``.\n    \"\"\"\n    self.titleOffsetTrans = mtransforms.ScaledTranslation(0.0, title_offset_points / 72, self.figure.dpi_scale_trans)\n    for _title in (self.title, self._left_title, self._right_title):\n        _title.set_transform(self.transAxes + self.titleOffsetTrans)\n        _title.set_clip_box(None)",
                            "def set_prop_cycle(self, *args, **kwargs):\n    \"\"\"\n    Set the property cycle of the Axes.\n\n    The property cycle controls the style properties such as color,\n    marker and linestyle of future plot commands. The style properties\n    of data already added to the Axes are not modified.\n\n    Call signatures::\n\n      set_prop_cycle(cycler)\n      set_prop_cycle(label=values[, label2=values2[, ...]])\n      set_prop_cycle(label, values)\n\n    Form 1 sets given `~cycler.Cycler` object.\n\n    Form 2 creates a `~cycler.Cycler` which cycles over one or more\n    properties simultaneously and set it as the property cycle of the\n    axes. If multiple properties are given, their value lists must have\n    the same length. This is just a shortcut for explicitly creating a\n    cycler and passing it to the function, i.e. it's short for\n    ``set_prop_cycle(cycler(label=values label2=values2, ...))``.\n\n    Form 3 creates a `~cycler.Cycler` for a single property and set it\n    as the property cycle of the axes. This form exists for compatibility\n    with the original `cycler.cycler` interface. Its use is discouraged\n    in favor of the kwarg form, i.e. ``set_prop_cycle(label=values)``.\n\n    Parameters\n    ----------\n    cycler : Cycler\n        Set the given Cycler. *None* resets to the cycle defined by the\n        current style.\n\n    label : str\n        The property key. Must be a valid `.Artist` property.\n        For example, 'color' or 'linestyle'. Aliases are allowed,\n        such as 'c' for 'color' and 'lw' for 'linewidth'.\n\n    values : iterable\n        Finite-length iterable of the property values. These values\n        are validated and will raise a ValueError if invalid.\n\n    See Also\n    --------\n    matplotlib.rcsetup.cycler\n        Convenience function for creating validated cyclers for properties.\n    cycler.cycler\n        The original function for creating unvalidated cyclers.\n\n    Examples\n    --------\n    Setting the property cycle for a single property:\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n\n    Setting the property cycle for simultaneously cycling over multiple\n    properties (e.g. red circle, green plus, blue cross):\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n    ...                   marker=['o', '+', 'x'])\n\n    \"\"\"\n    if args and kwargs:\n        raise TypeError('Cannot supply both positional and keyword arguments to this method.')\n    if len(args) == 1 and args[0] is None:\n        prop_cycle = None\n    else:\n        prop_cycle = cycler(*args, **kwargs)\n    self._get_lines.set_prop_cycle(prop_cycle)\n    self._get_patches_for_fill.set_prop_cycle(prop_cycle)",
                            "def get_aspect(self):\n    return self._aspect",
                            "def set_aspect(self, aspect, adjustable=None, anchor=None, share=False):\n    \"\"\"\n    Set the aspect of the axis scaling, i.e. the ratio of y-unit to x-unit.\n\n    Parameters\n    ----------\n    aspect : {'auto'} or num\n        Possible values:\n\n        ========   =================================================\n        value      description\n        ========   =================================================\n        'auto'     automatic; fill the position rectangle with data.\n        num        a circle will be stretched such that the height\n                   is *num* times the width.  'equal' is a synonym\n                   for ``aspect=1``, i.e. same scaling for x and y.\n        ========   =================================================\n\n    adjustable : None or {'box', 'datalim'}, optional\n        If not ``None``, this defines which parameter will be adjusted to\n        meet the required aspect. See `.set_adjustable` for further\n        details.\n\n    anchor : None or str or 2-tuple of float, optional\n        If not ``None``, this defines where the Axes will be drawn if there\n        is extra space due to aspect constraints. The most common way to\n        to specify the anchor are abbreviations of cardinal directions:\n\n        =====   =====================\n        value   description\n        =====   =====================\n        'C'     centered\n        'SW'    lower left corner\n        'S'     middle of bottom edge\n        'SE'    lower right corner\n        etc.\n        =====   =====================\n\n        See `.set_anchor` for further details.\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_anchor\n        Set the position in case of extra space.\n    \"\"\"\n    if cbook._str_equal(aspect, 'equal'):\n        aspect = 1\n    if not cbook._str_equal(aspect, 'auto'):\n        if self.name == '3d':\n            raise NotImplementedError('It is not currently possible to manually set the aspect on 3D axes')\n        aspect = float(aspect)\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._aspect = aspect\n    if adjustable is None:\n        adjustable = self._adjustable\n    self.set_adjustable(adjustable, share=share)\n    if anchor is not None:\n        self.set_anchor(anchor, share=share)\n    self.stale = True",
                            "def get_adjustable(self):\n    \"\"\"\n    Return whether the Axes will adjust its physical dimension ('box') or\n    its data limits ('datalim') to achieve the desired aspect ratio.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect handling.\n    \"\"\"\n    return self._adjustable",
                            "def set_adjustable(self, adjustable, share=False):\n    \"\"\"\n    Set how the Axes adjusts to achieve the required aspect ratio.\n\n    Parameters\n    ----------\n    adjustable : {'box', 'datalim'}\n        If 'box', change the physical dimensions of the Axes.\n        If 'datalim', change the ``x`` or ``y`` data limits.\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect handling.\n\n    Notes\n    -----\n    Shared Axes (of which twinned Axes are a special case)\n    impose restrictions on how aspect ratios can be imposed.\n    For twinned Axes, use 'datalim'.  For Axes that share both\n    x and y, use 'box'.  Otherwise, either 'datalim' or 'box'\n    may be used.  These limitations are partly a requirement\n    to avoid over-specification, and partly a result of the\n    particular implementation we are currently using, in\n    which the adjustments for aspect ratios are done sequentially\n    and independently on each Axes as it is drawn.\n    \"\"\"\n    cbook._check_in_list(['box', 'datalim'], adjustable=adjustable)\n    if share:\n        axs = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axs = [self]\n    if adjustable == 'datalim' and any((getattr(ax.get_data_ratio, '__func__', None) != _AxesBase.get_data_ratio for ax in axs)):\n        raise ValueError(\"Cannot set axes adjustable to 'datalim' for Axes which override 'get_data_ratio'\")\n    for ax in axs:\n        ax._adjustable = adjustable\n    self.stale = True",
                            "def get_box_aspect(self):\n    \"\"\"\n    Get the axes box aspect.\n    Will be ``None`` if not explicitly specified.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_box_aspect\n        for a description of box aspect.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._box_aspect",
                            "def set_box_aspect(self, aspect=None):\n    \"\"\"\n    Set the axes box aspect. The box aspect is the ratio of the\n    axes height to the axes width in physical units. This is not to be\n    confused with the data aspect, set via `~.Axes.set_aspect`.\n\n    Parameters\n    ----------\n    aspect : None, or a number\n        Changes the physical dimensions of the Axes, such that the ratio\n        of the axes height to the axes width in physical units is equal to\n        *aspect*. If *None*, the axes geometry will not be adjusted.\n\n    Note that calling this function with a number changes the *adjustable*\n    to *datalim*.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    axs = {*self._twinned_axes.get_siblings(self), *self._twinned_axes.get_siblings(self)}\n    if aspect is not None:\n        aspect = float(aspect)\n        for ax in axs:\n            ax.set_adjustable('datalim')\n    for ax in axs:\n        ax._box_aspect = aspect\n        ax.stale = True",
                            "def get_anchor(self):\n    \"\"\"\n    Get the anchor location.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_anchor\n        for a description of the anchor.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._anchor",
                            "def set_anchor(self, anchor, share=False):\n    \"\"\"\n    Define the anchor location.\n\n    The actual drawing area (active position) of the Axes may be smaller\n    than the Bbox (original position) when a fixed aspect is required. The\n    anchor defines where the drawing area will be located within the\n    available space.\n\n    Parameters\n    ----------\n    anchor : 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...}\n        The anchor position may be either:\n\n        - a sequence (*cx*, *cy*). *cx* and *cy* may range from 0\n          to 1, where 0 is left or bottom and 1 is right or top.\n\n        - a string using cardinal directions as abbreviation:\n\n          - 'C' for centered\n          - 'S' (south) for bottom-center\n          - 'SW' (south west) for bottom-left\n          - etc.\n\n          Here is an overview of the possible positions:\n\n          +------+------+------+\n          | 'NW' | 'N'  | 'NE' |\n          +------+------+------+\n          | 'W'  | 'C'  | 'E'  |\n          +------+------+------+\n          | 'SW' | 'S'  | 'SE' |\n          +------+------+------+\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    if not (anchor in mtransforms.Bbox.coefs or len(anchor) == 2):\n        raise ValueError('argument must be among %s' % ', '.join(mtransforms.Bbox.coefs))\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._anchor = anchor\n    self.stale = True",
                            "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the scaled data.\n\n    Notes\n    -----\n    This method is intended to be overridden by new projection types.\n    \"\"\"\n    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())\n    tymin, tymax = self.yaxis.get_transform().transform(self.get_ybound())\n    xsize = max(abs(txmax - txmin), 1e-30)\n    ysize = max(abs(tymax - tymin), 1e-30)\n    return ysize / xsize",
                            "@cbook.deprecated('3.2')\ndef get_data_ratio_log(self):\n    \"\"\"\n    Return the aspect ratio of the raw data in log scale.\n\n    Notes\n    -----\n    Will be used when both axis are in log scale.\n    \"\"\"\n    xmin, xmax = self.get_xbound()\n    ymin, ymax = self.get_ybound()\n    xsize = max(abs(math.log10(xmax) - math.log10(xmin)), 1e-30)\n    ysize = max(abs(math.log10(ymax) - math.log10(ymin)), 1e-30)\n    return ysize / xsize",
                            "def apply_aspect(self, position=None):\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n\n    Depending on `.get_adjustable` this will modify either the\n    Axes box (position) or the view limits. In the former case,\n    `~matplotlib.axes.Axes.get_anchor` will affect the position.\n\n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_anchor\n        Set the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n    aspect = self.get_aspect()\n    if aspect == 'auto' and self._box_aspect is None:\n        self._set_position(position, which='active')\n        return\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n    if self._box_aspect is not None:\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        if aspect == 'auto':\n            return\n    if self._box_aspect is None:\n        self._set_position(position, which='active')\n    else:\n        position = pb1.anchored(self.get_anchor(), pb)\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    xmin, xmax = x_trf.transform(self.get_xbound())\n    ymin, ymax = y_trf.transform(self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n    box_aspect = fig_aspect * (position.height / position.width)\n    data_ratio = box_aspect / aspect\n    y_expander = data_ratio * xsize / ysize - 1\n    if abs(y_expander) < 0.005:\n        return\n    dL = self.dataLim\n    x0, x1 = x_trf.transform(dL.intervalx)\n    y0, y1 = y_trf.transform(dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    xm = 0\n    ym = 0\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both axes are shared\")\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = Ymarg > 0 and y_expander < 0 or (Xmarg < 0 and y_expander > 0)\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(y_trf.inverted().transform([y0, y1]))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(x_trf.inverted().transform([x0, x1]))",
                            "def axis(self, *args, emit=True, **kwargs):\n    \"\"\"\n    Convenience method to get or set some axis properties.\n\n    Call signatures::\n\n      xmin, xmax, ymin, ymax = axis()\n      xmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\n      xmin, xmax, ymin, ymax = axis(option)\n      xmin, xmax, ymin, ymax = axis(**kwargs)\n\n    Parameters\n    ----------\n    xmin, xmax, ymin, ymax : float, optional\n        The axis limits to be set.  This can also be achieved using ::\n\n            ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n    option : bool or str\n        If a bool, turns axis lines and labels on or off. If a string,\n        possible values are:\n\n        ======== ==========================================================\n        Value    Description\n        ======== ==========================================================\n        'on'     Turn on axis lines and labels. Same as ``True``.\n        'off'    Turn off axis lines and labels. Same as ``False``.\n        'equal'  Set equal scaling (i.e., make circles circular) by\n                 changing axis limits. This is the same as\n                 ``ax.set_aspect('equal', adjustable='datalim')``.\n                 Explicit data limits may not be respected in this case.\n        'scaled' Set equal scaling (i.e., make circles circular) by\n                 changing dimensions of the plot box. This is the same as\n                 ``ax.set_aspect('equal', adjustable='box', anchor='C')``.\n                 Additionally, further autoscaling will be disabled.\n        'tight'  Set limits just large enough to show all data, then\n                 disable further autoscaling.\n        'auto'   Automatic scaling (fill plot box with data).\n        'image'  'scaled' with axis limits equal to data limits.\n        'square' Square plot; similar to 'scaled', but initially forcing\n                 ``xmax-xmin == ymax-ymin``.\n        ======== ==========================================================\n\n    emit : bool, default: True\n        Whether observers are notified of the axis limit change.\n        This option is passed on to `~.Axes.set_xlim` and\n        `~.Axes.set_ylim`.\n\n    Returns\n    -------\n    xmin, xmax, ymin, ymax : float\n        The axis limits.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_xlim\n    matplotlib.axes.Axes.set_ylim\n    \"\"\"\n    if len(args) == 1 and isinstance(args[0], (str, bool)):\n        s = args[0]\n        if s is True:\n            s = 'on'\n        if s is False:\n            s = 'off'\n        s = s.lower()\n        if s == 'on':\n            self.set_axis_on()\n        elif s == 'off':\n            self.set_axis_off()\n        elif s in ('equal', 'tight', 'scaled', 'auto', 'image', 'square'):\n            self.set_autoscale_on(True)\n            self.set_aspect('auto')\n            self.autoscale_view(tight=False)\n            if s == 'equal':\n                self.set_aspect('equal', adjustable='datalim')\n            elif s == 'scaled':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n            elif s == 'tight':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n            elif s == 'image':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n                self.set_aspect('equal', adjustable='box', anchor='C')\n            elif s == 'square':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n                xlim = self.get_xlim()\n                ylim = self.get_ylim()\n                edge_size = max(np.diff(xlim), np.diff(ylim))[0]\n                self.set_xlim([xlim[0], xlim[0] + edge_size], emit=emit, auto=False)\n                self.set_ylim([ylim[0], ylim[0] + edge_size], emit=emit, auto=False)\n        else:\n            raise ValueError('Unrecognized string %s to axis; try on or off' % s)\n    else:\n        if len(args) >= 1:\n            if len(args) != 1:\n                cbook.warn_deprecated('3.2', message='Passing more than one positional argument to axis() is deprecated and will raise a TypeError %(removal)s.')\n            limits = args[0]\n            try:\n                xmin, xmax, ymin, ymax = limits\n            except (TypeError, ValueError) as err:\n                raise TypeError('the first argument to axis() must be an interable of the form [xmin, xmax, ymin, ymax]') from err\n        else:\n            xmin = kwargs.pop('xmin', None)\n            xmax = kwargs.pop('xmax', None)\n            ymin = kwargs.pop('ymin', None)\n            ymax = kwargs.pop('ymax', None)\n        xauto = None if xmin is None and xmax is None else False\n        yauto = None if ymin is None and ymax is None else False\n        self.set_xlim(xmin, xmax, emit=emit, auto=xauto)\n        self.set_ylim(ymin, ymax, emit=emit, auto=yauto)\n    if kwargs:\n        raise TypeError(f\"axis() got an unexpected keyword argument '{next(iter(kwargs))}'\")\n    return (*self.get_xlim(), *self.get_ylim())",
                            "def get_legend(self):\n    \"\"\"Return the `.Legend` instance, or None if no legend is defined.\"\"\"\n    return self.legend_",
                            "def get_images(self):\n    \"\"\"Return a list of `.AxesImage`\\\\s contained by the Axes.\"\"\"\n    return cbook.silent_list('AxesImage', self.images)",
                            "def get_lines(self):\n    \"\"\"Return a list of lines contained by the Axes.\"\"\"\n    return cbook.silent_list('Line2D', self.lines)",
                            "def get_xaxis(self):\n    \"\"\"Return the XAxis instance.\"\"\"\n    return self.xaxis",
                            "def get_yaxis(self):\n    \"\"\"Return the YAxis instance.\"\"\"\n    return self.yaxis",
                            "def _sci(self, im):\n    \"\"\"\n    Set the current image.\n\n    This image will be the target of colormap functions like\n    `~.pyplot.viridis`, and other functions such as `~.pyplot.clim`.  The\n    current image is an attribute of the current axes.\n    \"\"\"\n    if isinstance(im, mpl.contour.ContourSet):\n        if im.collections[0] not in self.collections:\n            raise ValueError('ContourSet must be in current Axes')\n    elif im not in self.images and im not in self.collections:\n        raise ValueError('Argument must be an image, collection, or ContourSet in this Axes')\n    self._current_image = im",
                            "def _gci(self):\n    \"\"\"Helper for `~matplotlib.pyplot.gci`; do not use elsewhere.\"\"\"\n    return self._current_image",
                            "def has_data(self):\n    \"\"\"\n    Return *True* if any artists have been added to axes.\n\n    This should not be used to determine whether the *dataLim*\n    need to be updated, and may not actually be useful for\n    anything.\n    \"\"\"\n    return len(self.collections) + len(self.images) + len(self.lines) + len(self.patches) > 0",
                            "def add_artist(self, a):\n    \"\"\"\n    Add an `~.Artist` to the axes, and return the artist.\n\n    Use `add_artist` only for artists for which there is no dedicated\n    \"add\" method; and if necessary, use a method such as `update_datalim`\n    to manually update the dataLim if the artist is to be included in\n    autoscaling.\n\n    If no ``transform`` has been specified when creating the artist (e.g.\n    ``artist.get_transform() == None``) then the transform is set to\n    ``ax.transData``.\n    \"\"\"\n    a.axes = self\n    self.artists.append(a)\n    a._remove_method = self.artists.remove\n    self._set_artist_props(a)\n    a.set_clip_path(self.patch)\n    self.stale = True\n    return a",
                            "def add_child_axes(self, ax):\n    \"\"\"\n    Add an `~.AxesBase` to the axes' children; return the child axes.\n\n    This is the lowlevel version.  See `.axes.Axes.inset_axes`.\n    \"\"\"\n    ax._axes = self\n    ax.stale_callback = martist._stale_axes_callback\n    self.child_axes.append(ax)\n    ax._remove_method = self.child_axes.remove\n    self.stale = True\n    return ax",
                            "def add_collection(self, collection, autolim=True):\n    \"\"\"\n    Add a `~.Collection` to the axes' collections; return the collection.\n    \"\"\"\n    label = collection.get_label()\n    if not label:\n        collection.set_label('_collection%d' % len(self.collections))\n    self.collections.append(collection)\n    collection._remove_method = self.collections.remove\n    self._set_artist_props(collection)\n    if collection.get_clip_path() is None:\n        collection.set_clip_path(self.patch)\n    if autolim:\n        self._unstale_viewLim()\n        self.update_datalim(collection.get_datalim(self.transData))\n    self.stale = True\n    return collection",
                            "def add_image(self, image):\n    \"\"\"\n    Add an `~.AxesImage` to the axes' images; return the image.\n    \"\"\"\n    self._set_artist_props(image)\n    if not image.get_label():\n        image.set_label('_image%d' % len(self.images))\n    self.images.append(image)\n    image._remove_method = self.images.remove\n    self.stale = True\n    return image",
                            "def _update_image_limits(self, image):\n    xmin, xmax, ymin, ymax = image.get_extent()\n    self.axes.update_datalim(((xmin, ymin), (xmax, ymax)))",
                            "def add_line(self, line):\n    \"\"\"\n    Add a `.Line2D` to the axes' lines; return the line.\n    \"\"\"\n    self._set_artist_props(line)\n    if line.get_clip_path() is None:\n        line.set_clip_path(self.patch)\n    self._update_line_limits(line)\n    if not line.get_label():\n        line.set_label('_line%d' % len(self.lines))\n    self.lines.append(line)\n    line._remove_method = self.lines.remove\n    self.stale = True\n    return line",
                            "def _add_text(self, txt):\n    \"\"\"\n    Add a `~.Text` to the axes' texts; return the text.\n    \"\"\"\n    self._set_artist_props(txt)\n    self.texts.append(txt)\n    txt._remove_method = self.texts.remove\n    self.stale = True\n    return txt",
                            "def _update_line_limits(self, line):\n    \"\"\"\n    Figures out the data limit of the given line, updating self.dataLim.\n    \"\"\"\n    path = line.get_path()\n    if path.vertices.size == 0:\n        return\n    line_trans = line.get_transform()\n    if line_trans == self.transData:\n        data_path = path\n    elif any(line_trans.contains_branch_seperately(self.transData)):\n        trans_to_data = line_trans - self.transData\n        if self.transData.is_affine:\n            line_trans_path = line._get_transformed_path()\n            na_path, _ = line_trans_path.get_transformed_path_and_affine()\n            data_path = trans_to_data.transform_path_affine(na_path)\n        else:\n            data_path = trans_to_data.transform_path(path)\n    else:\n        data_path = path\n    if data_path.vertices.size > 0:\n        updatex, updatey = line_trans.contains_branch_seperately(self.transData)\n        self.dataLim.update_from_path(data_path, self.ignore_existing_data_limits, updatex=updatex, updatey=updatey)\n        self.ignore_existing_data_limits = False",
                            "def add_patch(self, p):\n    \"\"\"\n    Add a `~.Patch` to the axes' patches; return the patch.\n    \"\"\"\n    self._set_artist_props(p)\n    if p.get_clip_path() is None:\n        p.set_clip_path(self.patch)\n    self._update_patch_limits(p)\n    self.patches.append(p)\n    p._remove_method = self.patches.remove\n    return p",
                            "def _update_patch_limits(self, patch):\n    \"\"\"Update the data limits for the given patch.\"\"\"\n    if isinstance(patch, mpatches.Rectangle) and (not patch.get_width() and (not patch.get_height())):\n        return\n    vertices = patch.get_path().vertices\n    if vertices.size > 0:\n        xys = patch.get_patch_transform().transform(vertices)\n        if patch.get_data_transform() != self.transData:\n            patch_to_data = patch.get_data_transform() - self.transData\n            xys = patch_to_data.transform(xys)\n        updatex, updatey = patch.get_transform().contains_branch_seperately(self.transData)\n        self.update_datalim(xys, updatex=updatex, updatey=updatey)",
                            "def add_table(self, tab):\n    \"\"\"\n    Add a `~.Table` to the axes' tables; return the table.\n    \"\"\"\n    self._set_artist_props(tab)\n    self.tables.append(tab)\n    tab.set_clip_path(self.patch)\n    tab._remove_method = self.tables.remove\n    return tab",
                            "def add_container(self, container):\n    \"\"\"\n    Add a `~.Container` to the axes' containers; return the container.\n    \"\"\"\n    label = container.get_label()\n    if not label:\n        container.set_label('_container%d' % len(self.containers))\n    self.containers.append(container)\n    container._remove_method = self.containers.remove\n    return container",
                            "def _on_units_changed(self, scalex=False, scaley=False):\n    \"\"\"\n    Callback for processing changes to axis units.\n\n    Currently requests updates of data limits and view limits.\n    \"\"\"\n    self.relim()\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)",
                            "def relim(self, visible_only=False):\n    \"\"\"\n    Recompute the data limits based on current artists.\n\n    At present, `~.Collection` instances are not supported.\n\n    Parameters\n    ----------\n    visible_only : bool, default: False\n        Whether to exclude invisible artists.\n    \"\"\"\n    self.dataLim.ignore(True)\n    self.dataLim.set_points(mtransforms.Bbox.null().get_points())\n    self.ignore_existing_data_limits = True\n    for line in self.lines:\n        if not visible_only or line.get_visible():\n            self._update_line_limits(line)\n    for p in self.patches:\n        if not visible_only or p.get_visible():\n            self._update_patch_limits(p)\n    for image in self.images:\n        if not visible_only or image.get_visible():\n            self._update_image_limits(image)",
                            "def update_datalim(self, xys, updatex=True, updatey=True):\n    \"\"\"\n    Extend the `~.Axes.dataLim` Bbox to include the given points.\n\n    If no data is set currently, the Bbox will ignore its limits and set\n    the bound to be the bounds of the xydata (*xys*). Otherwise, it will\n    compute the bounds of the union of its current data and the data in\n    *xys*.\n\n    Parameters\n    ----------\n    xys : 2D array-like\n        The points to include in the data limits Bbox. This can be either\n        a list of (x, y) tuples or a Nx2 array.\n\n    updatex, updatey : bool, default: True\n        Whether to update the x/y limits.\n    \"\"\"\n    xys = np.asarray(xys)\n    if not len(xys):\n        return\n    self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits, updatex=updatex, updatey=updatey)\n    self.ignore_existing_data_limits = False",
                            "@cbook.deprecated('3.3', alternative='ax.dataLim.set(Bbox.union([ax.dataLim, bounds]))')\ndef update_datalim_bounds(self, bounds):\n    \"\"\"\n    Extend the `~.Axes.datalim` Bbox to include the given\n    `~matplotlib.transforms.Bbox`.\n\n    Parameters\n    ----------\n    bounds : `~matplotlib.transforms.Bbox`\n    \"\"\"\n    self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds]))",
                            "def _process_unit_info(self, xdata=None, ydata=None, kwargs=None):\n    \"\"\"Look for unit *kwargs* and update the axis instances as necessary\"\"\"\n\n    def _process_single_axis(data, axis, unit_name, kwargs):\n        if axis is None:\n            return kwargs\n        if data is not None:\n            if not axis.have_units():\n                axis.update_units(data)\n        if kwargs is not None:\n            units = kwargs.pop(unit_name, axis.units)\n            if self.name == 'polar':\n                polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n                units = kwargs.pop(polar_units[unit_name], units)\n            if units != axis.units:\n                axis.set_units(units)\n                if data is not None:\n                    axis.update_units(data)\n        return kwargs\n    kwargs = _process_single_axis(xdata, self.xaxis, 'xunits', kwargs)\n    kwargs = _process_single_axis(ydata, self.yaxis, 'yunits', kwargs)\n    return kwargs",
                            "def in_axes(self, mouseevent):\n    \"\"\"\n    Return *True* if the given *mouseevent* (in display coords)\n    is in the Axes\n    \"\"\"\n    return self.patch.contains(mouseevent)[0]",
                            "def get_autoscale_on(self):\n    \"\"\"\n    Get whether autoscaling is applied for both axes on plot commands\n    \"\"\"\n    return self._autoscaleXon and self._autoscaleYon",
                            "def get_autoscalex_on(self):\n    \"\"\"\n    Get whether autoscaling for the x-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleXon",
                            "def get_autoscaley_on(self):\n    \"\"\"\n    Get whether autoscaling for the y-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleYon",
                            "def set_autoscale_on(self, b):\n    \"\"\"\n    Set whether autoscaling is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b\n    self._autoscaleYon = b",
                            "def set_autoscalex_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the x-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b",
                            "def set_autoscaley_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the y-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleYon = b",
                            "@property\ndef use_sticky_edges(self):\n    \"\"\"\n    When autoscaling, whether to obey all `Artist.sticky_edges`.\n\n    Default is ``True``.\n\n    Setting this to ``False`` ensures that the specified margins\n    will be applied, even if the plot includes an image, for\n    example, which would otherwise force a view limit to coincide\n    with its data limit.\n\n    The changing this property does not change the plot until\n    `autoscale` or `autoscale_view` is called.\n    \"\"\"\n    return self._use_sticky_edges",
                            "@use_sticky_edges.setter\ndef use_sticky_edges(self, b):\n    self._use_sticky_edges = bool(b)",
                            "def set_xmargin(self, m):\n    \"\"\"\n    Set padding of X data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError('margin must be greater than -0.5')\n    self._xmargin = m\n    self.stale = True",
                            "def set_ymargin(self, m):\n    \"\"\"\n    Set padding of Y data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError('margin must be greater than -0.5')\n    self._ymargin = m\n    self.stale = True",
                            "def margins(self, *margins, x=None, y=None, tight=True):\n    \"\"\"\n    Set or retrieve autoscaling margins.\n\n    The padding added to each limit of the axes is the *margin*\n    times the data interval. All input parameters must be floats\n    within the range [0, 1]. Passing both positional and keyword\n    arguments is invalid and will raise a TypeError. If no\n    arguments (positional or otherwise) are provided, the current\n    margins will remain in place and simply be returned.\n\n    Specifying any margin changes only the autoscaling; for example,\n    if *xmargin* is not None, then *xmargin* times the X data\n    interval will be added to each end of that interval before\n    it is used in autoscaling.\n\n    Parameters\n    ----------\n    *margins : float, optional\n        If a single positional argument is provided, it specifies\n        both margins of the x-axis and y-axis limits. If two\n        positional arguments are provided, they will be interpreted\n        as *xmargin*, *ymargin*. If setting the margin on a single\n        axis is desired, use the keyword arguments described below.\n\n    x, y : float, optional\n        Specific margin values for the x-axis and y-axis,\n        respectively. These cannot be used with positional\n        arguments, but can be used individually to alter on e.g.,\n        only the y-axis.\n\n    tight : bool or None, default: True\n        The *tight* parameter is passed to :meth:`autoscale_view`,\n        which is executed after a margin is changed; the default\n        here is *True*, on the assumption that when margins are\n        specified, no additional padding to match tick marks is\n        usually desired.  Set *tight* to *None* will preserve\n        the previous setting.\n\n    Returns\n    -------\n    xmargin, ymargin : float\n\n    Notes\n    -----\n    If a previously used Axes method such as :meth:`pcolor` has set\n    :attr:`use_sticky_edges` to `True`, only the limits not set by\n    the \"sticky artists\" will be modified. To force all of the\n    margins to be set, set :attr:`use_sticky_edges` to `False`\n    before calling :meth:`margins`.\n    \"\"\"\n    if margins and x is not None and (y is not None):\n        raise TypeError('Cannot pass both positional and keyword arguments for x and/or y.')\n    elif len(margins) == 1:\n        x = y = margins[0]\n    elif len(margins) == 2:\n        x, y = margins\n    elif margins:\n        raise TypeError('Must pass a single positional argument for all margins, or one for each margin (x, y).')\n    if x is None and y is None:\n        if tight is not True:\n            cbook._warn_external(f'ignoring tight={tight!r} in get mode')\n        return (self._xmargin, self._ymargin)\n    if x is not None:\n        self.set_xmargin(x)\n    if y is not None:\n        self.set_ymargin(y)\n    self._request_autoscale_view(tight=tight, scalex=x is not None, scaley=y is not None)",
                            "def set_rasterization_zorder(self, z):\n    \"\"\"\n    Parameters\n    ----------\n    z : float or None\n        zorder below which artists are rasterized.  ``None`` means that\n        artists do not get rasterized based on zorder.\n    \"\"\"\n    self._rasterization_zorder = z\n    self.stale = True",
                            "def get_rasterization_zorder(self):\n    \"\"\"Return the zorder value below which artists will be rasterized.\"\"\"\n    return self._rasterization_zorder",
                            "def autoscale(self, enable=True, axis='both', tight=None):\n    \"\"\"\n    Autoscale the axis view to the data (toggle).\n\n    Convenience method for simple axis view autoscaling.\n    It turns autoscaling on or off, and then,\n    if autoscaling for either axis is on, it performs\n    the autoscaling on the specified axis or axes.\n\n    Parameters\n    ----------\n    enable : bool or None, default: True\n        True turns autoscaling on, False turns it off.\n        None leaves the autoscaling state unchanged.\n    axis : {'both', 'x', 'y'}, default: 'both'\n        Which axis to operate on.\n    tight : bool or None, default: None\n        If True, first set the margins to zero.  Then, this argument is\n        forwarded to `autoscale_view` (regardless of its value); see the\n        description of its behavior there.\n    \"\"\"\n    if enable is None:\n        scalex = True\n        scaley = True\n    else:\n        scalex = False\n        scaley = False\n        if axis in ['x', 'both']:\n            self._autoscaleXon = bool(enable)\n            scalex = self._autoscaleXon\n        if axis in ['y', 'both']:\n            self._autoscaleYon = bool(enable)\n            scaley = self._autoscaleYon\n    if tight and scalex:\n        self._xmargin = 0\n    if tight and scaley:\n        self._ymargin = 0\n    self._request_autoscale_view(tight=tight, scalex=scalex, scaley=scaley)",
                            "def autoscale_view(self, tight=None, scalex=True, scaley=True):\n    \"\"\"\n    Autoscale the view limits using the data limits.\n\n    Parameters\n    ----------\n    tight : bool or None\n        If *True*, only expand the axis limits using the margins.  Note\n        that unlike for `autoscale`, ``tight=True`` does *not* set the\n        margins to zero.\n\n        If *False* and :rc:`axes.autolimit_mode` is 'round_numbers', then\n        after expansion by the margins, further expand the axis limits\n        using the axis major locator.\n\n        If None (the default), reuse the value set in the previous call to\n        `autoscale_view` (the initial value is False, but the default style\n        sets :rc:`axes.autolimit_mode` to 'data', in which case this\n        behaves like True).\n\n    scalex : bool, default: True\n        Whether to autoscale the x axis.\n\n    scaley : bool, default: True\n        Whether to autoscale the y axis.\n\n    Notes\n    -----\n    The autoscaling preserves any preexisting axis direction reversal.\n\n    The data limits are not updated automatically when artist data are\n    changed after the artist has been added to an Axes instance.  In that\n    case, use :meth:`matplotlib.axes.Axes.relim` prior to calling\n    autoscale_view.\n\n    If the views of the axes are fixed, e.g. via `set_xlim`, they will\n    not be changed by autoscale_view().\n    See :meth:`matplotlib.axes.Axes.autoscale` for an alternative.\n    \"\"\"\n    if tight is not None:\n        self._tight = bool(tight)\n    x_stickies = y_stickies = np.array([])\n    if self.use_sticky_edges:\n        if self._xmargin and scalex and self._autoscaleXon:\n            x_stickies = np.sort(np.concatenate([artist.sticky_edges.x for ax in self._shared_x_axes.get_siblings(self) if hasattr(ax, 'lines') for artist in ax.get_children()]))\n        if self._ymargin and scaley and self._autoscaleYon:\n            y_stickies = np.sort(np.concatenate([artist.sticky_edges.y for ax in self._shared_y_axes.get_siblings(self) if hasattr(ax, 'lines') for artist in ax.get_children()]))\n    if self.get_xscale().lower() == 'log':\n        x_stickies = x_stickies[x_stickies > 0]\n    if self.get_yscale().lower() == 'log':\n        y_stickies = y_stickies[y_stickies > 0]\n\n    def handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound):\n        if not (scale and autoscaleon):\n            return\n        shared = shared_axes.get_siblings(self)\n        dl = [ax.dataLim for ax in shared]\n        finite_dl = [d for d in dl if np.isfinite(d).all()]\n        if len(finite_dl):\n            x_finite = [d for d in dl if np.isfinite(d.intervalx).all() and d not in finite_dl]\n            y_finite = [d for d in dl if np.isfinite(d.intervaly).all() and d not in finite_dl]\n            dl = finite_dl\n            dl.extend(x_finite)\n            dl.extend(y_finite)\n        bb = mtransforms.BboxBase.union(dl)\n        x0, x1 = getattr(bb, interval)\n        locator = axis.get_major_locator()\n        x0, x1 = locator.nonsingular(x0, x1)\n\n        def tol(x):\n            return 1e-05 * abs(x) + 1e-08\n        i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n        x0bound = stickies[i0] if i0 != -1 else None\n        i1 = stickies.searchsorted(x1 - tol(x1))\n        x1bound = stickies[i1] if i1 != len(stickies) else None\n        minpos = getattr(bb, minpos)\n        transform = axis.get_transform()\n        inverse_trans = transform.inverted()\n        x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n        x0t, x1t = transform.transform([x0, x1])\n        delta = (x1t - x0t) * margin\n        if not np.isfinite(delta):\n            delta = 0\n        x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n        if x0bound is not None:\n            x0 = max(x0, x0bound)\n        if x1bound is not None:\n            x1 = min(x1, x1bound)\n        if not self._tight:\n            x0, x1 = locator.view_limits(x0, x1)\n        set_bound(x0, x1)\n    handle_single_axis(scalex, self._autoscaleXon, self._shared_x_axes, 'intervalx', 'minposx', self.xaxis, self._xmargin, x_stickies, self.set_xbound)\n    handle_single_axis(scaley, self._autoscaleYon, self._shared_y_axes, 'intervaly', 'minposy', self.yaxis, self._ymargin, y_stickies, self.set_ybound)",
                            "def _get_axis_list(self):\n    return (self.xaxis, self.yaxis)",
                            "def _get_axis_map(self):\n    \"\"\"\n    Return a mapping of `Axis` \"names\" to `Axis` instances.\n\n    The `Axis` name is derived from the attribute under which the instance\n    is stored, so e.g. for polar axes, the theta-axis is still named \"x\"\n    and the r-axis is still named \"y\" (for back-compatibility).\n\n    In practice, this means that the entries are typically \"x\" and \"y\", and\n    additionally \"z\" for 3D axes.\n    \"\"\"\n    d = {}\n    axis_list = self._get_axis_list()\n    for k, v in vars(self).items():\n        if k.endswith('axis') and v in axis_list:\n            d[k[:-len('axis')]] = v\n    return d",
                            "def _update_title_position(self, renderer):\n    \"\"\"\n    Update the title position based on the bounding box enclosing\n    all the ticklabels and x-axis spine and xlabel...\n    \"\"\"\n    if self._autotitlepos is not None and (not self._autotitlepos):\n        _log.debug('title position was updated manually, not adjusting')\n        return\n    titles = (self.title, self._left_title, self._right_title)\n    for title in titles:\n        x, _ = title.get_position()\n        title.set_position((x, 1.0))\n        axs = self._twinned_axes.get_siblings(self)\n        for ax in self.child_axes:\n            if ax is not None:\n                locator = ax.get_axes_locator()\n                if locator:\n                    pos = locator(self, renderer)\n                    ax.apply_aspect(pos)\n                else:\n                    ax.apply_aspect()\n                axs = axs + [ax]\n        top = 0\n        for ax in axs:\n            if ax.xaxis.get_ticks_position() in ['top', 'unknown'] or ax.xaxis.get_label_position() == 'top':\n                bb = ax.xaxis.get_tightbbox(renderer)\n            else:\n                bb = ax.get_window_extent(renderer)\n            if bb is not None:\n                top = max(top, bb.ymax)\n        if title.get_window_extent(renderer).ymin < top:\n            _, y = self.transAxes.inverted().transform((0, top))\n            title.set_position((x, y))\n            if title.get_window_extent(renderer).ymin < top:\n                _, y = self.transAxes.inverted().transform((0.0, 2 * top - title.get_window_extent(renderer).ymin))\n                title.set_position((x, y))\n    ymax = max((title.get_position()[1] for title in titles))\n    for title in titles:\n        x, _ = title.get_position()\n        title.set_position((x, ymax))",
                            "@martist.allow_rasterization\n@cbook._delete_parameter('3.3', 'inframe', alternative='Axes.redraw_in_frame()')\ndef draw(self, renderer=None, inframe=False):\n    if renderer is None:\n        cbook.warn_deprecated('3.3', message=\"Support for not passing the 'renderer' parameter to Axes.draw() is deprecated since %(since)s and will be removed %(removal)s.  Use axes.draw_artist(axes) instead.\")\n        renderer = self.figure._cachedRenderer\n    if renderer is None:\n        raise RuntimeError('No renderer defined')\n    if not self.get_visible():\n        return\n    self._unstale_viewLim()\n    renderer.open_group('axes', gid=self.get_gid())\n    self._stale = True\n    locator = self.get_axes_locator()\n    if locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n    artists = self.get_children()\n    artists.remove(self.patch)\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n    self._update_title_position(renderer)\n    if not self.axison or inframe:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n    if inframe:\n        artists.remove(self.title)\n        artists.remove(self._left_title)\n        artists.remove(self._right_title)\n    if not self.figure.canvas.is_saving():\n        artists = [a for a in artists if not a.get_animated() or a in self.images]\n    artists = sorted(artists, key=attrgetter('zorder'))\n    rasterization_zorder = self._rasterization_zorder\n    if rasterization_zorder is not None and artists and (artists[0].zorder < rasterization_zorder):\n        renderer.start_rasterizing()\n        artists_rasterized = [a for a in artists if a.zorder < rasterization_zorder]\n        artists = [a for a in artists if a.zorder >= rasterization_zorder]\n    else:\n        artists_rasterized = []\n    if self.axison and self._frameon:\n        self.patch.draw(renderer)\n    if artists_rasterized:\n        for a in artists_rasterized:\n            a.draw(renderer)\n        renderer.stop_rasterizing()\n    mimage._draw_list_compositing_images(renderer, self, artists)\n    renderer.close_group('axes')\n    self.stale = False",
                            "def draw_artist(self, a):\n    \"\"\"\n    Efficiently redraw a single artist.\n\n    This method can only be used after an initial draw which caches the\n    renderer.\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError('draw_artist can only be used after an initial draw which caches the renderer')\n    a.draw(self.figure._cachedRenderer)",
                            "def redraw_in_frame(self):\n    \"\"\"\n    Efficiently redraw Axes data, but not axis ticks, labels, etc.\n\n    This method can only be used after an initial draw which caches the\n    renderer.\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError('redraw_in_frame can only be used after an initial draw which caches the renderer')\n    with ExitStack() as stack:\n        for artist in [*self._get_axis_list(), self.title, self._left_title, self._right_title]:\n            stack.push(artist.set_visible, artist.get_visible())\n            artist.set_visible(False)\n        self.draw(self.figure._cachedRenderer)",
                            "def get_renderer_cache(self):\n    return self.figure._cachedRenderer",
                            "def get_frame_on(self):\n    \"\"\"Get whether the axes rectangle patch is drawn.\"\"\"\n    return self._frameon",
                            "def set_frame_on(self, b):\n    \"\"\"\n    Set whether the axes rectangle patch is drawn.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._frameon = b\n    self.stale = True",
                            "def get_axisbelow(self):\n    \"\"\"\n    Get whether axis ticks and gridlines are above or below most artists.\n\n    Returns\n    -------\n    bool or 'line'\n\n    See Also\n    --------\n    set_axisbelow\n    \"\"\"\n    return self._axisbelow",
                            "def set_axisbelow(self, b):\n    \"\"\"\n    Set whether axis ticks and gridlines are above or below most artists.\n\n    This controls the zorder of the ticks and gridlines. For more\n    information on the zorder see :doc:`/gallery/misc/zorder_demo`.\n\n    Parameters\n    ----------\n    b : bool or 'line'\n        Possible values:\n\n        - *True* (zorder = 0.5): Ticks and gridlines are below all Artists.\n        - 'line' (zorder = 1.5): Ticks and gridlines are above patches\n          (e.g. rectangles, with default zorder = 1) but still below lines\n          and markers (with their default zorder = 2).\n        - *False* (zorder = 2.5): Ticks and gridlines are above patches\n          and lines / markers.\n\n    See Also\n    --------\n    get_axisbelow\n    \"\"\"\n    self._axisbelow = axisbelow = validate_axisbelow(b)\n    if axisbelow is True:\n        zorder = 0.5\n    elif axisbelow is False:\n        zorder = 2.5\n    elif axisbelow == 'line':\n        zorder = 1.5\n    else:\n        raise ValueError('Unexpected axisbelow value')\n    for axis in self._get_axis_list():\n        axis.set_zorder(zorder)\n    self.stale = True",
                            "@docstring.dedent_interpd\ndef grid(self, b=None, which='major', axis='both', **kwargs):\n    \"\"\"\n    Configure the grid lines.\n\n    Parameters\n    ----------\n    b : bool or None, optional\n        Whether to show the grid lines. If any *kwargs* are supplied,\n        it is assumed you want the grid on and *b* will be set to True.\n\n        If *b* is *None* and there are no *kwargs*, this toggles the\n        visibility of the lines.\n\n    which : {'major', 'minor', 'both'}, optional\n        The grid lines to apply the changes on.\n\n    axis : {'both', 'x', 'y'}, optional\n        The axis to apply the changes on.\n\n    **kwargs : `.Line2D` properties\n        Define the line properties of the grid, e.g.::\n\n            grid(color='r', linestyle='-', linewidth=2)\n\n        Valid keyword arguments are:\n\n        %(_Line2D_docstr)s\n\n    Notes\n    -----\n    The axis is drawn as a unit, so the effective zorder for drawing the\n    grid is determined by the zorder of each axis, not by the zorder of the\n    `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,\n    use `.set_axisbelow` or, for more control, call the\n    `~.Artist.set_zorder` method of each axis.\n    \"\"\"\n    if len(kwargs):\n        b = True\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        self.xaxis.grid(b, which=which, **kwargs)\n    if axis in ['y', 'both']:\n        self.yaxis.grid(b, which=which, **kwargs)",
                            "def ticklabel_format(self, *, axis='both', style='', scilimits=None, useOffset=None, useLocale=None, useMathText=None):\n    \"\"\"\n    Configure the `.ScalarFormatter` used by default for linear axes.\n\n    If a parameter is not set, the corresponding property of the formatter\n    is left unchanged.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, default: 'both'\n        The axes to configure.  Only major ticks are affected.\n\n    style : {'sci', 'scientific', 'plain'}\n        Whether to use scientific notation.\n        The formatter default is to use scientific notation.\n\n    scilimits : pair of ints (m, n)\n        Scientific notation is used only for numbers outside the range\n        10\\\\ :sup:`m` to 10\\\\ :sup:`n` (and only if the formatter is\n        configured to use scientific notation at all).  Use (0, 0) to\n        include all numbers.  Use (m, m) where m != 0 to fix the order of\n        magnitude to 10\\\\ :sup:`m`.\n        The formatter default is :rc:`axes.formatter.limits`.\n\n    useOffset : bool or float\n        If True, the offset is calculated as needed.\n        If False, no offset is used.\n        If a numeric value, it sets the offset.\n        The formatter default is :rc:`axes.formatter.useoffset`.\n\n    useLocale : bool\n        Whether to format the number using the current locale or using the\n        C (English) locale.  This affects e.g. the decimal separator.  The\n        formatter default is :rc:`axes.formatter.use_locale`.\n\n    useMathText : bool\n        Render the offset and scientific notation in mathtext.\n        The formatter default is :rc:`axes.formatter.use_mathtext`.\n\n    Raises\n    ------\n    AttributeError\n        If the current formatter is not a `.ScalarFormatter`.\n    \"\"\"\n    style = style.lower()\n    axis = axis.lower()\n    if scilimits is not None:\n        try:\n            m, n = scilimits\n            m + n + 1\n        except (ValueError, TypeError) as err:\n            raise ValueError('scilimits must be a sequence of 2 integers') from err\n    STYLES = {'sci': True, 'scientific': True, 'plain': False, '': None}\n    is_sci_style = cbook._check_getitem(STYLES, style=style)\n    axis_map = {**{k: [v] for k, v in self._get_axis_map().items()}, 'both': self._get_axis_list()}\n    axises = cbook._check_getitem(axis_map, axis=axis)\n    try:\n        for axis in axises:\n            if is_sci_style is not None:\n                axis.major.formatter.set_scientific(is_sci_style)\n            if scilimits is not None:\n                axis.major.formatter.set_powerlimits(scilimits)\n            if useOffset is not None:\n                axis.major.formatter.set_useOffset(useOffset)\n            if useLocale is not None:\n                axis.major.formatter.set_useLocale(useLocale)\n            if useMathText is not None:\n                axis.major.formatter.set_useMathText(useMathText)\n    except AttributeError as err:\n        raise AttributeError('This method only works with the ScalarFormatter') from err",
                            "def locator_params(self, axis='both', tight=None, **kwargs):\n    \"\"\"\n    Control behavior of major tick locators.\n\n    Because the locator is involved in autoscaling, `~.Axes.autoscale_view`\n    is called automatically after the parameters are changed.\n\n    Parameters\n    ----------\n    axis : {'both', 'x', 'y'}, default: 'both'\n        The axis on which to operate.\n\n    tight : bool or None, optional\n        Parameter passed to `~.Axes.autoscale_view`.\n        Default is None, for no change.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Remaining keyword arguments are passed to directly to the\n        ``set_params()`` method of the locator. Supported keywords depend\n        on the type of the locator. See for example\n        `~.ticker.MaxNLocator.set_params` for the `.ticker.MaxNLocator`\n        used by default for linear axes.\n\n    Examples\n    --------\n    When plotting small subplots, one might want to reduce the maximum\n    number of ticks and use tight bounds, for example::\n\n        ax.locator_params(tight=True, nbins=4)\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    update_x = axis in ['x', 'both']\n    update_y = axis in ['y', 'both']\n    if update_x:\n        self.xaxis.get_major_locator().set_params(**kwargs)\n    if update_y:\n        self.yaxis.get_major_locator().set_params(**kwargs)\n    self._request_autoscale_view(tight=tight, scalex=update_x, scaley=update_y)\n    self.stale = True",
                            "def tick_params(self, axis='both', **kwargs):\n    \"\"\"\n    Change the appearance of ticks, tick labels, and gridlines.\n\n    Tick properties that are not explicitly set using the keyword\n    arguments remain unchanged unless *reset* is True.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, default: 'both'\n        The axis to which the parameters are applied.\n    which : {'major', 'minor', 'both'}, default: 'major'\n        The group of ticks to which the parameters are applied.\n    reset : bool, default: False\n        Whether to reset the ticks to defaults before updating them.\n\n    Other Parameters\n    ----------------\n    direction : {'in', 'out', 'inout'}\n        Puts ticks inside the axes, outside the axes, or both.\n    length : float\n        Tick length in points.\n    width : float\n        Tick width in points.\n    color : color\n        Tick color.\n    pad : float\n        Distance in points between tick and label.\n    labelsize : float or str\n        Tick label font size in points or as a string (e.g., 'large').\n    labelcolor : color\n        Tick label color.\n    colors : color\n        Tick color and label color.\n    zorder : float\n        Tick and label zorder.\n    bottom, top, left, right : bool\n        Whether to draw the respective ticks.\n    labelbottom, labeltop, labelleft, labelright : bool\n        Whether to draw the respective tick labels.\n    labelrotation : float\n        Tick label rotation\n    grid_color : color\n        Gridline color.\n    grid_alpha : float\n        Transparency of gridlines: 0 (transparent) to 1 (opaque).\n    grid_linewidth : float\n        Width of gridlines in points.\n    grid_linestyle : str\n        Any valid `.Line2D` line style spec.\n\n    Examples\n    --------\n    ::\n\n        ax.tick_params(direction='out', length=6, width=2, colors='r',\n                       grid_color='r', grid_alpha=0.5)\n\n    This will make all major ticks be red, pointing out of the box,\n    and with dimensions 6 points by 2 points.  Tick labels will\n    also be red.  Gridlines will be red and translucent.\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        xkw = dict(kwargs)\n        xkw.pop('left', None)\n        xkw.pop('right', None)\n        xkw.pop('labelleft', None)\n        xkw.pop('labelright', None)\n        self.xaxis.set_tick_params(**xkw)\n    if axis in ['y', 'both']:\n        ykw = dict(kwargs)\n        ykw.pop('top', None)\n        ykw.pop('bottom', None)\n        ykw.pop('labeltop', None)\n        ykw.pop('labelbottom', None)\n        self.yaxis.set_tick_params(**ykw)",
                            "def set_axis_off(self):\n    \"\"\"\n    Turn the x- and y-axis off.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = False\n    self.stale = True",
                            "def set_axis_on(self):\n    \"\"\"\n    Turn the x- and y-axis on.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = True\n    self.stale = True",
                            "def invert_xaxis(self):\n    \"\"\"\n    Invert the x-axis.\n\n    See Also\n    --------\n    xaxis_inverted\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    self.xaxis.set_inverted(not self.xaxis.get_inverted())",
                            "def get_xbound(self):\n    \"\"\"\n    Return the lower and upper x-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    left, right = self.get_xlim()\n    if left < right:\n        return (left, right)\n    else:\n        return (right, left)",
                            "def set_xbound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the x-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (`.get_autoscalex_on()`).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n    old_lower, old_upper = self.get_xbound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n    self.set_xlim(sorted((lower, upper), reverse=bool(self.xaxis_inverted())), auto=None)",
                            "def get_xlim(self):\n    \"\"\"\n    Return the x-axis view limits.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The current x-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The x-axis may be inverted, in which case the *left* value will\n    be greater than the *right* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervalx)",
                            "def _validate_converted_limits(self, limit, convert):\n    \"\"\"\n    Raise ValueError if converted limits are non-finite.\n\n    Note that this function also accepts None as a limit argument.\n\n    Returns\n    -------\n    The limit value after call to convert(), or None if limit is None.\n    \"\"\"\n    if limit is not None:\n        converted_limit = convert(limit)\n        if isinstance(converted_limit, Real) and (not np.isfinite(converted_limit)):\n            raise ValueError('Axis limits cannot be NaN or Inf')\n        return converted_limit",
                            "def set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    Parameters\n    ----------\n    left : float, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may also be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    right : float, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off, None leaves unchanged.\n\n    xmin, xmax : float, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and np.iterable(left):\n        left, right = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n    if left is None or right is None:\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n    if self.get_xscale() == 'log' and (left <= 0 or right <= 0):\n        old_left, old_right = self.get_xlim()\n        if left <= 0:\n            cbook._warn_external('Attempted to set non-positive left xlim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external('Attempted to set non-positive right xlim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')\n    reverse = left > right\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n    left, right = sorted([left, right], reverse=bool(reverse))\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return (left, right)",
                            "def set_xscale(self, value, **kwargs):\n    \"\"\"\n    Set the x-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    old_default_lims = self.xaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    g = self.get_shared_x_axes()\n    for ax in g.get_siblings(self):\n        ax.xaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    new_default_lims = self.xaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    if old_default_lims != new_default_lims:\n        self.autoscale_view(scaley=False)",
                            "def invert_yaxis(self):\n    \"\"\"\n    Invert the y-axis.\n\n    See Also\n    --------\n    yaxis_inverted\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    self.yaxis.set_inverted(not self.yaxis.get_inverted())",
                            "def get_ybound(self):\n    \"\"\"\n    Return the lower and upper y-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    bottom, top = self.get_ylim()\n    if bottom < top:\n        return (bottom, top)\n    else:\n        return (top, bottom)",
                            "def set_ybound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the y-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (`.get_autoscaley_on()`).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n    old_lower, old_upper = self.get_ybound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n    self.set_ylim(sorted((lower, upper), reverse=bool(self.yaxis_inverted())), auto=None)",
                            "def get_ylim(self):\n    \"\"\"\n    Return the y-axis view limits.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The current y-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The y-axis may be inverted, in which case the *bottom* value\n    will be greater than the *top* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervaly)",
                            "def set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):\n    \"\"\"\n    Set the y-axis view limits.\n\n    Parameters\n    ----------\n    bottom : float, optional\n        The bottom ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The bottom and top ylims may also be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    top : float, optional\n        The top ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the y-axis. *True* turns on,\n        *False* turns off, *None* leaves unchanged.\n\n    ymin, ymax : float, optional\n        They are equivalent to bottom and top respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The *bottom* value may be greater than the *top* value, in which\n    case the y-axis values will decrease from *bottom* to *top*.\n\n    Examples\n    --------\n    >>> set_ylim(bottom, top)\n    >>> set_ylim((bottom, top))\n    >>> bottom, top = set_ylim(bottom, top)\n\n    One limit may be left unchanged.\n\n    >>> set_ylim(top=top_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the y-axis. For example, suppose ``y`` represents depth of the\n    ocean in m. The y-axis limits might be set like the following\n    so 5000 m depth is at the bottom of the plot and the surface,\n    0 m, is at the top.\n\n    >>> set_ylim(5000, 0)\n    \"\"\"\n    if top is None and np.iterable(bottom):\n        bottom, top = bottom\n    if ymin is not None:\n        if bottom is not None:\n            raise TypeError('Cannot pass both `ymin` and `bottom`')\n        bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise TypeError('Cannot pass both `ymax` and `top`')\n        top = ymax\n    self._process_unit_info(ydata=(bottom, top))\n    bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n    top = self._validate_converted_limits(top, self.convert_yunits)\n    if bottom is None or top is None:\n        old_bottom, old_top = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):\n        old_bottom, old_top = self.get_ylim()\n        if bottom <= 0:\n            cbook._warn_external('Attempted to set non-positive bottom ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            bottom = old_bottom\n        if top <= 0:\n            cbook._warn_external('Attempted to set non-positive top ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            top = old_top\n    if bottom == top:\n        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')\n    reverse = bottom > top\n    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n    bottom, top = sorted([bottom, top], reverse=bool(reverse))\n    self._viewLim.intervaly = (bottom, top)\n    if auto is not None:\n        self._autoscaleYon = bool(auto)\n    if emit:\n        self.callbacks.process('ylim_changed', self)\n        for other in self._shared_y_axes.get_siblings(self):\n            if other is not self:\n                other.set_ylim(self.viewLim.intervaly, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return (bottom, top)",
                            "def set_yscale(self, value, **kwargs):\n    \"\"\"\n    Set the y-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    old_default_lims = self.yaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    g = self.get_shared_y_axes()\n    for ax in g.get_siblings(self):\n        ax.yaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    new_default_lims = self.yaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    if old_default_lims != new_default_lims:\n        self.autoscale_view(scalex=False)",
                            "def format_xdata(self, x):\n    \"\"\"\n    Return *x* formatted as an x-value.\n\n    This function will use the `.fmt_xdata` attribute if it is not None,\n    else will fall back on the xaxis major formatter.\n    \"\"\"\n    return (self.fmt_xdata if self.fmt_xdata is not None else self.xaxis.get_major_formatter().format_data_short)(x)",
                            "def format_ydata(self, y):\n    \"\"\"\n    Return *y* formatted as an y-value.\n\n    This function will use the `.fmt_ydata` attribute if it is not None,\n    else will fall back on the yaxis major formatter.\n    \"\"\"\n    return (self.fmt_ydata if self.fmt_ydata is not None else self.yaxis.get_major_formatter().format_data_short)(y)",
                            "def format_coord(self, x, y):\n    \"\"\"Return a format string formatting the *x*, *y* coordinates.\"\"\"\n    if x is None:\n        xs = '???'\n    else:\n        xs = self.format_xdata(x)\n    if y is None:\n        ys = '???'\n    else:\n        ys = self.format_ydata(y)\n    return 'x=%s y=%s' % (xs, ys)",
                            "def minorticks_on(self):\n    \"\"\"\n    Display minor ticks on the axes.\n\n    Displaying minor ticks may reduce performance; you may turn them off\n    using `minorticks_off()` if drawing speed is a problem.\n    \"\"\"\n    for ax in (self.xaxis, self.yaxis):\n        scale = ax.get_scale()\n        if scale == 'log':\n            s = ax._scale\n            ax.set_minor_locator(mticker.LogLocator(s.base, s.subs))\n        elif scale == 'symlog':\n            s = ax._scale\n            ax.set_minor_locator(mticker.SymmetricalLogLocator(s._transform, s.subs))\n        else:\n            ax.set_minor_locator(mticker.AutoMinorLocator())",
                            "def minorticks_off(self):\n    \"\"\"Remove minor ticks from the axes.\"\"\"\n    self.xaxis.set_minor_locator(mticker.NullLocator())\n    self.yaxis.set_minor_locator(mticker.NullLocator())",
                            "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n    \"\"\"\n    return True",
                            "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports any pan/zoom button functionality.\n    \"\"\"\n    return True",
                            "def get_navigate(self):\n    \"\"\"\n    Get whether the axes responds to navigation commands\n    \"\"\"\n    return self._navigate",
                            "def set_navigate(self, b):\n    \"\"\"\n    Set whether the axes responds to navigation toolbar commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._navigate = b",
                            "def get_navigate_mode(self):\n    \"\"\"\n    Get the navigation toolbar button status: 'PAN', 'ZOOM', or None\n    \"\"\"\n    return self._navigate_mode",
                            "def set_navigate_mode(self, b):\n    \"\"\"\n    Set the navigation toolbar button status;\n\n    .. warning::\n        this is not a user-API function.\n\n    \"\"\"\n    self._navigate_mode = b",
                            "def _get_view(self):\n    \"\"\"\n    Save information required to reproduce the current view.\n\n    Called before a view is changed, such as during a pan or zoom\n    initiated by the user. You may return any information you deem\n    necessary to describe the view.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation saves the view limits. You *must* implement\n        :meth:`_set_view` if you implement this method.\n    \"\"\"\n    xmin, xmax = self.get_xlim()\n    ymin, ymax = self.get_ylim()\n    return (xmin, xmax, ymin, ymax)",
                            "def _set_view(self, view):\n    \"\"\"\n    Apply a previously saved view.\n\n    Called when restoring a view, such as with the navigation buttons.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation restores the view limits. You *must*\n        implement :meth:`_get_view` if you implement this method.\n    \"\"\"\n    xmin, xmax, ymin, ymax = view\n    self.set_xlim((xmin, xmax))\n    self.set_ylim((ymin, ymax))",
                            "def _set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False):\n    \"\"\"\n    Update view from a selection bbox.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation sets the view limits to the bbox directly.\n\n    Parameters\n    ----------\n    bbox : 4-tuple or 3 tuple\n        * If bbox is a 4 tuple, it is the selected bounding box limits,\n          in *display* coordinates.\n        * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where\n          (xp, yp) is the center of zooming and scl the scale factor to\n          zoom by.\n\n    direction : str\n        The direction to apply the bounding box.\n            * `'in'` - The bounding box describes the view directly, i.e.,\n                       it zooms in.\n            * `'out'` - The bounding box describes the size to make the\n                        existing view, i.e., it zooms out.\n\n    mode : str or None\n        The selection mode, whether to apply the bounding box in only the\n        `'x'` direction, `'y'` direction or both (`None`).\n\n    twinx : bool\n        Whether this axis is twinned in the *x*-direction.\n\n    twiny : bool\n        Whether this axis is twinned in the *y*-direction.\n    \"\"\"\n    if len(bbox) == 3:\n        Xmin, Xmax = self.get_xlim()\n        Ymin, Ymax = self.get_ylim()\n        xp, yp, scl = bbox\n        if scl == 0:\n            scl = 1.0\n        if scl > 1:\n            direction = 'in'\n        else:\n            direction = 'out'\n            scl = 1 / scl\n        tranD2C = self.transData.transform\n        xmin, ymin = tranD2C((Xmin, Ymin))\n        xmax, ymax = tranD2C((Xmax, Ymax))\n        xwidth = xmax - xmin\n        ywidth = ymax - ymin\n        xcen = (xmax + xmin) * 0.5\n        ycen = (ymax + ymin) * 0.5\n        xzc = (xp * (scl - 1) + xcen) / scl\n        yzc = (yp * (scl - 1) + ycen) / scl\n        bbox = [xzc - xwidth / 2.0 / scl, yzc - ywidth / 2.0 / scl, xzc + xwidth / 2.0 / scl, yzc + ywidth / 2.0 / scl]\n    elif len(bbox) != 4:\n        cbook._warn_external('Warning in _set_view_from_bbox: bounding box is not a tuple of length 3 or 4. Ignoring the view change.')\n        return\n    xmin0, xmax0 = self.get_xbound()\n    ymin0, ymax0 = self.get_ybound()\n    startx, starty, stopx, stopy = bbox\n    (startx, starty), (stopx, stopy) = self.transData.inverted().transform([(startx, starty), (stopx, stopy)])\n    xmin, xmax = np.clip(sorted([startx, stopx]), xmin0, xmax0)\n    ymin, ymax = np.clip(sorted([starty, stopy]), ymin0, ymax0)\n    if twinx or mode == 'y':\n        xmin, xmax = (xmin0, xmax0)\n    if twiny or mode == 'x':\n        ymin, ymax = (ymin0, ymax0)\n    if direction == 'in':\n        new_xbound = (xmin, xmax)\n        new_ybound = (ymin, ymax)\n    elif direction == 'out':\n        x_trf = self.xaxis.get_transform()\n        sxmin0, sxmax0, sxmin, sxmax = x_trf.transform([xmin0, xmax0, xmin, xmax])\n        factor = (sxmax0 - sxmin0) / (sxmax - sxmin)\n        sxmin1 = sxmin0 - factor * (sxmin - sxmin0)\n        sxmax1 = sxmax0 + factor * (sxmax0 - sxmax)\n        new_xbound = x_trf.inverted().transform([sxmin1, sxmax1])\n        y_trf = self.yaxis.get_transform()\n        symin0, symax0, symin, symax = y_trf.transform([ymin0, ymax0, ymin, ymax])\n        factor = (symax0 - symin0) / (symax - symin)\n        symin1 = symin0 - factor * (symin - symin0)\n        symax1 = symax0 + factor * (symax0 - symax)\n        new_ybound = y_trf.inverted().transform([symin1, symax1])\n    if not twinx and mode != 'y':\n        self.set_xbound(new_xbound)\n    if not twiny and mode != 'x':\n        self.set_ybound(new_ybound)",
                            "def start_pan(self, x, y, button):\n    \"\"\"\n    Called when a pan operation has started.\n\n    Parameters\n    ----------\n    x, y : float\n        The mouse coordinates in display coords.\n    button : `.MouseButton`\n        The pressed mouse button.\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    self._pan_start = types.SimpleNamespace(lim=self.viewLim.frozen(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), bbox=self.bbox.frozen(), x=x, y=y)",
                            "def end_pan(self):\n    \"\"\"\n    Called when a pan operation completes (when the mouse button is up.)\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    del self._pan_start",
                            "def drag_pan(self, button, key, x, y):\n    \"\"\"\n    Called when the mouse moves during a pan operation.\n\n    Parameters\n    ----------\n    button : `.MouseButton`\n        The pressed mouse button.\n    key : str or None\n        The pressed key, if any.\n    x, y : float\n        The mouse coordinates in display coords.\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n\n    def format_deltas(key, dx, dy):\n        if key == 'control':\n            if abs(dx) > abs(dy):\n                dy = dx\n            else:\n                dx = dy\n        elif key == 'x':\n            dy = 0\n        elif key == 'y':\n            dx = 0\n        elif key == 'shift':\n            if 2 * abs(dx) < abs(dy):\n                dx = 0\n            elif 2 * abs(dy) < abs(dx):\n                dy = 0\n            elif abs(dx) > abs(dy):\n                dy = dy / abs(dy) * abs(dx)\n            else:\n                dx = dx / abs(dx) * abs(dy)\n        return (dx, dy)\n    p = self._pan_start\n    dx = x - p.x\n    dy = y - p.y\n    if dx == dy == 0:\n        return\n    if button == 1:\n        dx, dy = format_deltas(key, dx, dy)\n        result = p.bbox.translated(-dx, -dy).transformed(p.trans_inverse)\n    elif button == 3:\n        try:\n            dx = -dx / self.bbox.width\n            dy = -dy / self.bbox.height\n            dx, dy = format_deltas(key, dx, dy)\n            if self.get_aspect() != 'auto':\n                dx = dy = 0.5 * (dx + dy)\n            alpha = np.power(10.0, (dx, dy))\n            start = np.array([p.x, p.y])\n            oldpoints = p.lim.transformed(p.trans)\n            newpoints = start + alpha * (oldpoints - start)\n            result = mtransforms.Bbox(newpoints).transformed(p.trans_inverse)\n        except OverflowError:\n            cbook._warn_external('Overflow while panning')\n            return\n    else:\n        return\n    valid = np.isfinite(result.transformed(p.trans))\n    points = result.get_points().astype(object)\n    points[~valid] = None\n    self.set_xlim(points[:, 0])\n    self.set_ylim(points[:, 1])",
                            "def get_children(self):\n    return [*self.collections, *self.patches, *self.lines, *self.texts, *self.artists, *self.spines.values(), *self._get_axis_list(), self.title, self._left_title, self._right_title, *self.tables, *self.images, *self.child_axes, *([self.legend_] if self.legend_ is not None else []), self.patch]",
                            "def contains(self, mouseevent):\n    inside, info = self._default_contains(mouseevent)\n    if inside is not None:\n        return (inside, info)\n    return self.patch.contains(mouseevent)",
                            "def contains_point(self, point):\n    \"\"\"\n    Return whether *point* (pair of pixel coordinates) is inside the axes\n    patch.\n    \"\"\"\n    return self.patch.contains_point(point, radius=1.0)",
                            "def get_default_bbox_extra_artists(self):\n    \"\"\"\n    Return a default list of artists that are used for the bounding box\n    calculation.\n\n    Artists are excluded either by not being visible or\n    ``artist.set_in_layout(False)``.\n    \"\"\"\n    artists = self.get_children()\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n    if not self.axison:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n    artists.remove(self.title)\n    artists.remove(self._left_title)\n    artists.remove(self._right_title)\n    return [artist for artist in artists if artist.get_visible() and artist.get_in_layout()]",
                            "def get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None, *, for_layout_only=False):\n    \"\"\"\n    Return the tight bounding box of the axes, including axis and their\n    decorators (xlabel, title, etc).\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` subclass\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of the axes are\n        included in the tight bounding box.\n\n    call_axes_locator : bool, default: True\n        If *call_axes_locator* is ``False``, it does not call the\n        ``_axes_locator`` attribute, which is necessary to get the correct\n        bounding box. ``call_axes_locator=False`` can be used if the\n        caller is only interested in the relative size of the tightbbox\n        compared to the axes bbox.\n\n    for_layout_only : default: False\n        The bounding box will *not* include the x-extent of the title and\n        the xlabel, or the y-extent of the ylabel.\n\n    Returns\n    -------\n    `.BboxBase`\n        Bounding box in figure pixel coordinates.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_window_extent\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.Spine.get_window_extent\n    \"\"\"\n    bb = []\n    if not self.get_visible():\n        return None\n    locator = self.get_axes_locator()\n    if locator and call_axes_locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n    if self.axison:\n        if self.xaxis.get_visible():\n            try:\n                bb_xaxis = self.xaxis.get_tightbbox(renderer, for_layout_only=for_layout_only)\n            except TypeError:\n                bb_xaxis = self.xaxis.get_tightbbox(renderer)\n            if bb_xaxis:\n                bb.append(bb_xaxis)\n        if self.yaxis.get_visible():\n            try:\n                bb_yaxis = self.yaxis.get_tightbbox(renderer, for_layout_only=for_layout_only)\n            except TypeError:\n                bb_yaxis = self.yaxis.get_tightbbox(renderer)\n            if bb_yaxis:\n                bb.append(bb_yaxis)\n    self._update_title_position(renderer)\n    axbbox = self.get_window_extent(renderer)\n    bb.append(axbbox)\n    for title in [self.title, self._left_title, self._right_title]:\n        if title.get_visible():\n            bt = title.get_window_extent(renderer)\n            if for_layout_only and bt.width > 0:\n                bt.x0 = (bt.x0 + bt.x1) / 2 - 0.5\n                bt.x1 = bt.x0 + 1.0\n            bb.append(bt)\n    bbox_artists = bbox_extra_artists\n    if bbox_artists is None:\n        bbox_artists = self.get_default_bbox_extra_artists()\n    for a in bbox_artists:\n        clip_extent = a._get_clipping_extent_bbox()\n        if clip_extent is not None:\n            clip_extent = mtransforms.Bbox.intersection(clip_extent, axbbox)\n            if np.all(clip_extent.extents == axbbox.extents):\n                continue\n        bbox = a.get_tightbbox(renderer)\n        if bbox is not None and 0 < bbox.width < np.inf and (0 < bbox.height < np.inf):\n            bb.append(bbox)\n    return mtransforms.Bbox.union([b for b in bb if b.width != 0 or b.height != 0])",
                            "def _make_twin_axes(self, *args, **kwargs):\n    \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n    if 'sharex' in kwargs and 'sharey' in kwargs:\n        raise ValueError('Twinned Axes may share only one axis')\n    ax2 = self.figure.add_axes(self.get_position(True), *args, **kwargs)\n    self.set_adjustable('datalim')\n    ax2.set_adjustable('datalim')\n    self._twinned_axes.join(self, ax2)\n    return ax2",
                            "def twinx(self):\n    \"\"\"\n    Create a twin Axes sharing the xaxis.\n\n    Create a new Axes with an invisible x-axis and an independent\n    y-axis positioned opposite to the original one (i.e. at right). The\n    x-axis autoscale setting will be inherited from the original\n    Axes.  To ensure that the tick marks of both y-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twinx, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharex=self)\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    ax2.yaxis.set_offset_position('right')\n    ax2.set_autoscalex_on(self.get_autoscalex_on())\n    self.yaxis.tick_left()\n    ax2.xaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                            "def twiny(self):\n    \"\"\"\n    Create a twin Axes sharing the yaxis.\n\n    Create a new Axes with an invisible y-axis and an independent\n    x-axis positioned opposite to the original one (i.e. at top). The\n    y-axis autoscale setting will be inherited from the original Axes.\n    To ensure that the tick marks of both x-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twiny, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharey=self)\n    ax2.xaxis.tick_top()\n    ax2.xaxis.set_label_position('top')\n    ax2.set_autoscaley_on(self.get_autoscaley_on())\n    self.xaxis.tick_bottom()\n    ax2.yaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                            "def get_shared_x_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for x axes.\"\"\"\n    return self._shared_x_axes",
                            "def get_shared_y_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n    return self._shared_y_axes",
                            "def _process_single_axis(data, axis, unit_name, kwargs):\n    if axis is None:\n        return kwargs\n    if data is not None:\n        if not axis.have_units():\n            axis.update_units(data)\n    if kwargs is not None:\n        units = kwargs.pop(unit_name, axis.units)\n        if self.name == 'polar':\n            polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n            units = kwargs.pop(polar_units[unit_name], units)\n        if units != axis.units:\n            axis.set_units(units)\n            if data is not None:\n                axis.update_units(data)\n    return kwargs",
                            "def handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound):\n    if not (scale and autoscaleon):\n        return\n    shared = shared_axes.get_siblings(self)\n    dl = [ax.dataLim for ax in shared]\n    finite_dl = [d for d in dl if np.isfinite(d).all()]\n    if len(finite_dl):\n        x_finite = [d for d in dl if np.isfinite(d.intervalx).all() and d not in finite_dl]\n        y_finite = [d for d in dl if np.isfinite(d.intervaly).all() and d not in finite_dl]\n        dl = finite_dl\n        dl.extend(x_finite)\n        dl.extend(y_finite)\n    bb = mtransforms.BboxBase.union(dl)\n    x0, x1 = getattr(bb, interval)\n    locator = axis.get_major_locator()\n    x0, x1 = locator.nonsingular(x0, x1)\n\n    def tol(x):\n        return 1e-05 * abs(x) + 1e-08\n    i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n    x0bound = stickies[i0] if i0 != -1 else None\n    i1 = stickies.searchsorted(x1 - tol(x1))\n    x1bound = stickies[i1] if i1 != len(stickies) else None\n    minpos = getattr(bb, minpos)\n    transform = axis.get_transform()\n    inverse_trans = transform.inverted()\n    x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n    x0t, x1t = transform.transform([x0, x1])\n    delta = (x1t - x0t) * margin\n    if not np.isfinite(delta):\n        delta = 0\n    x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n    if x0bound is not None:\n        x0 = max(x0, x0bound)\n    if x1bound is not None:\n        x1 = min(x1, x1bound)\n    if not self._tight:\n        x0, x1 = locator.view_limits(x0, x1)\n    set_bound(x0, x1)",
                            "def format_deltas(key, dx, dy):\n    if key == 'control':\n        if abs(dx) > abs(dy):\n            dy = dx\n        else:\n            dx = dy\n    elif key == 'x':\n        dy = 0\n    elif key == 'y':\n        dx = 0\n    elif key == 'shift':\n        if 2 * abs(dx) < abs(dy):\n            dx = 0\n        elif 2 * abs(dy) < abs(dx):\n            dy = 0\n        elif abs(dx) > abs(dy):\n            dy = dy / abs(dy) * abs(dx)\n        else:\n            dx = dx / abs(dx) * abs(dy)\n    return (dx, dy)",
                            "def tol(x):\n    return 1e-05 * abs(x) + 1e-08"
                        ],
                        "constructor_variables": [
                            "_frameon",
                            "_rasterization_zorder",
                            "fmt_xdata",
                            "spines",
                            "_stale_viewlim_y",
                            "_layoutbox",
                            "_stale_viewlim_x",
                            "axes",
                            "_sharex",
                            "facecolor",
                            "_facecolor",
                            "_originalPosition",
                            "_poslayoutbox",
                            "_xcid",
                            "_sharey",
                            "_position",
                            "_anchor",
                            "fmt_ydata",
                            "_adjustable",
                            "_aspect",
                            "_ycid",
                            "rcParams",
                            "_axes_locator"
                        ],
                        "class_level_variables": [
                            "name",
                            "_shared_x_axes",
                            "_shared_y_axes",
                            "_twinned_axes",
                            "get_xgridlines",
                            "get_xticklines",
                            "get_ygridlines",
                            "get_yticklines",
                            "xaxis_inverted",
                            "get_xscale",
                            "get_xticks",
                            "set_xticks",
                            "get_xmajorticklabels",
                            "get_xminorticklabels",
                            "get_xticklabels",
                            "set_xticklabels",
                            "yaxis_inverted",
                            "get_yscale",
                            "get_yticks",
                            "set_yticks",
                            "get_ymajorticklabels",
                            "get_yminorticklabels",
                            "get_yticklabels",
                            "set_yticklabels",
                            "xaxis_date",
                            "yaxis_date"
                        ],
                        "class_decorators": [
                            "cbook._define_aliases({'facecolor': ['fc']})"
                        ],
                        "function_signatures": [
                            "__str__(self)",
                            "__init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "get_window_extent(self, *args, **kwargs)",
                            "_init_axis(self)",
                            "set_figure(self, fig)",
                            "_unstale_viewLim(self)",
                            "viewLim(self)",
                            "_request_autoscale_view(self, tight=None, scalex=True, scaley=True)",
                            "_set_lim_and_transforms(self)",
                            "get_xaxis_transform(self, which='grid')",
                            "get_xaxis_text1_transform(self, pad_points)",
                            "get_xaxis_text2_transform(self, pad_points)",
                            "get_yaxis_transform(self, which='grid')",
                            "get_yaxis_text1_transform(self, pad_points)",
                            "get_yaxis_text2_transform(self, pad_points)",
                            "_update_transScale(self)",
                            "get_position(self, original=False)",
                            "set_position(self, pos, which='both')",
                            "_set_position(self, pos, which='both')",
                            "reset_position(self)",
                            "set_axes_locator(self, locator)",
                            "get_axes_locator(self)",
                            "_set_artist_props(self, a)",
                            "_gen_axes_patch(self)",
                            "_gen_axes_spines(self, locations=None, offset=0.0, units='inches')",
                            "sharex(self, other)",
                            "sharey(self, other)",
                            "cla(self)",
                            "clear(self)",
                            "get_facecolor(self)",
                            "set_facecolor(self, color)",
                            "_set_title_offset_trans(self, title_offset_points)",
                            "set_prop_cycle(self, *args, **kwargs)",
                            "get_aspect(self)",
                            "set_aspect(self, aspect, adjustable=None, anchor=None, share=False)",
                            "get_adjustable(self)",
                            "set_adjustable(self, adjustable, share=False)",
                            "get_box_aspect(self)",
                            "set_box_aspect(self, aspect=None)",
                            "get_anchor(self)",
                            "set_anchor(self, anchor, share=False)",
                            "get_data_ratio(self)",
                            "get_data_ratio_log(self)",
                            "apply_aspect(self, position=None)",
                            "axis(self, *args, **kwargs)",
                            "get_legend(self)",
                            "get_images(self)",
                            "get_lines(self)",
                            "get_xaxis(self)",
                            "get_yaxis(self)",
                            "_sci(self, im)",
                            "_gci(self)",
                            "has_data(self)",
                            "add_artist(self, a)",
                            "add_child_axes(self, ax)",
                            "add_collection(self, collection, autolim=True)",
                            "add_image(self, image)",
                            "_update_image_limits(self, image)",
                            "add_line(self, line)",
                            "_add_text(self, txt)",
                            "_update_line_limits(self, line)",
                            "add_patch(self, p)",
                            "_update_patch_limits(self, patch)",
                            "add_table(self, tab)",
                            "add_container(self, container)",
                            "_on_units_changed(self, scalex=False, scaley=False)",
                            "relim(self, visible_only=False)",
                            "update_datalim(self, xys, updatex=True, updatey=True)",
                            "update_datalim_bounds(self, bounds)",
                            "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
                            "in_axes(self, mouseevent)",
                            "get_autoscale_on(self)",
                            "get_autoscalex_on(self)",
                            "get_autoscaley_on(self)",
                            "set_autoscale_on(self, b)",
                            "set_autoscalex_on(self, b)",
                            "set_autoscaley_on(self, b)",
                            "use_sticky_edges(self)",
                            "use_sticky_edges(self, b)",
                            "set_xmargin(self, m)",
                            "set_ymargin(self, m)",
                            "margins(self, *margins)",
                            "set_rasterization_zorder(self, z)",
                            "get_rasterization_zorder(self)",
                            "autoscale(self, enable=True, axis='both', tight=None)",
                            "autoscale_view(self, tight=None, scalex=True, scaley=True)",
                            "_get_axis_list(self)",
                            "_get_axis_map(self)",
                            "_update_title_position(self, renderer)",
                            "draw(self, renderer=None, inframe=False)",
                            "draw_artist(self, a)",
                            "redraw_in_frame(self)",
                            "get_renderer_cache(self)",
                            "get_frame_on(self)",
                            "set_frame_on(self, b)",
                            "get_axisbelow(self)",
                            "set_axisbelow(self, b)",
                            "grid(self, b=None, which='major', axis='both', **kwargs)",
                            "ticklabel_format(self)",
                            "locator_params(self, axis='both', tight=None, **kwargs)",
                            "tick_params(self, axis='both', **kwargs)",
                            "set_axis_off(self)",
                            "set_axis_on(self)",
                            "invert_xaxis(self)",
                            "get_xbound(self)",
                            "set_xbound(self, lower=None, upper=None)",
                            "get_xlim(self)",
                            "_validate_converted_limits(self, limit, convert)",
                            "set_xlim(self, left=None, right=None, emit=True, auto=False)",
                            "set_xscale(self, value, **kwargs)",
                            "invert_yaxis(self)",
                            "get_ybound(self)",
                            "set_ybound(self, lower=None, upper=None)",
                            "get_ylim(self)",
                            "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                            "set_yscale(self, value, **kwargs)",
                            "format_xdata(self, x)",
                            "format_ydata(self, y)",
                            "format_coord(self, x, y)",
                            "minorticks_on(self)",
                            "minorticks_off(self)",
                            "can_zoom(self)",
                            "can_pan(self)",
                            "get_navigate(self)",
                            "set_navigate(self, b)",
                            "get_navigate_mode(self)",
                            "set_navigate_mode(self, b)",
                            "_get_view(self)",
                            "_set_view(self, view)",
                            "_set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False)",
                            "start_pan(self, x, y, button)",
                            "end_pan(self)",
                            "drag_pan(self, button, key, x, y)",
                            "get_children(self)",
                            "contains(self, mouseevent)",
                            "contains_point(self, point)",
                            "get_default_bbox_extra_artists(self)",
                            "get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None)",
                            "_make_twin_axes(self, *args, **kwargs)",
                            "twinx(self)",
                            "twiny(self)",
                            "get_shared_x_axes(self)",
                            "get_shared_y_axes(self)",
                            "_process_single_axis(data, axis, unit_name, kwargs)",
                            "handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound)",
                            "format_deltas(key, dx, dy)",
                            "tol(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106b47c0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106b4e50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106b47c0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106b4e50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106b47c0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106b4e50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106b47c0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106b4e50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1106b4160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106a0a90>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106a0280>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106a0a90>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106a0280>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106a0a90>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106a0280>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1106a0a90>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1106a0280>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a7400a0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11052c280>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8f40>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11052c280>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8f40>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11052c280>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8f40>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11052c280>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8f40>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11063ad60>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1105d4760>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1105d4760>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1105d4760>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1105d4760>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1104c8340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1105d4e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11a6cb4f0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11a6cf850>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11a6cb4f0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11a6cf850>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11a6cb4f0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11a6cf850>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x11a6cb4f0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11a6cf850>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x11a740940>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x110650760>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x110668070>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x110668670>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x110650760>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x110668070>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x110668670>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x110650760>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x110650760>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x110668070>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x110668670>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x110650760>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x110668070>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x110668670>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x110650760>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11a9eed90>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x110650760>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114260970>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114260970>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114260970>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114260970>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260520>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260520>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x113ecdc70>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x113ecd340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x113ecdc70>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x113ecd340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x113ecdc70>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x113ecd340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x113ecdc70>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x113ecd340>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x1142595b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1142608b0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260d30>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1142608b0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260d30>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1142608b0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260d30>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, -0.5], [1.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x1142608b0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114260d30>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114260400>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114260400>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114432b50>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1144321f0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114432b50>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1144321f0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114432b50>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1144321f0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114432b50>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x1144321f0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114432c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114391fd0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114391700>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114391fd0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114391700>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114391fd0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114391700>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114391fd0>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114391700>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x113e648e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114430d30>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114428370>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114430d30>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114428370>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "right": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114430d30>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114428370>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "right": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "left": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "xmin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "xmax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_xunits": {
                                    "variable_value": "<bound method Artist.convert_xunits of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_left": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_right": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_xlim": {
                                    "variable_value": "<bound method _AxesBase.get_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_xscale": {
                                    "variable_value": "<bound method _AxesBase.get_xscale of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.xaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.xaxis": {
                                    "variable_value": "<matplotlib.axis.XAxis object at 0x114430d30>",
                                    "variable_type": "XAxis",
                                    "variable_shape": null
                                },
                                "self.xaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_x_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x113d44d60>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_x": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleXon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x114428370>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x114430910>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_xlim": {
                                    "variable_value": "<bound method _AxesBase.set_xlim of <matplotlib.axes._subplots.AxesSubplot object at 0x114430910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervalx": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "set_ylim",
                    "function_code": "def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n             *, ymin=None, ymax=None):\n    \"\"\"\n    Set the y-axis view limits.\n\n    Parameters\n    ----------\n    bottom : float, optional\n        The bottom ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The bottom and top ylims may also be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    top : float, optional\n        The top ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the y-axis. *True* turns on,\n        *False* turns off, *None* leaves unchanged.\n\n    ymin, ymax : float, optional\n        They are equivalent to bottom and top respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The *bottom* value may be greater than the *top* value, in which\n    case the y-axis values will decrease from *bottom* to *top*.\n\n    Examples\n    --------\n    >>> set_ylim(bottom, top)\n    >>> set_ylim((bottom, top))\n    >>> bottom, top = set_ylim(bottom, top)\n\n    One limit may be left unchanged.\n\n    >>> set_ylim(top=top_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the y-axis. For example, suppose ``y`` represents depth of the\n    ocean in m. The y-axis limits might be set like the following\n    so 5000 m depth is at the bottom of the plot and the surface,\n    0 m, is at the top.\n\n    >>> set_ylim(5000, 0)\n    \"\"\"\n    if top is None and np.iterable(bottom):\n        bottom, top = bottom\n    if ymin is not None:\n        if bottom is not None:\n            raise TypeError('Cannot pass both `ymin` and `bottom`')\n        bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise TypeError('Cannot pass both `ymax` and `top`')\n        top = ymax\n\n    self._process_unit_info(ydata=(bottom, top))\n    bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n    top = self._validate_converted_limits(top, self.convert_yunits)\n\n    if bottom is None or top is None:\n        # Axes init calls set_ylim(0, 1) before get_ylim() can be called,\n        # so only grab the limits if we really need them.\n        old_bottom, old_top = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n\n    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_bottom, old_top = self.get_ylim()\n        if bottom <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive bottom ylim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            bottom = old_bottom\n        if top <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive top ylim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            top = old_top\n    if bottom == top:\n        cbook._warn_external(\n            f\"Attempting to set identical bottom == top == {bottom} \"\n            f\"results in singular transformations; automatically \"\n            f\"expanding.\")\n    reverse = bottom > top\n    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n    # cast to bool to avoid bad interaction between python 3.8 and np.bool_\n    bottom, top = sorted([bottom, top], reverse=bool(reverse))\n\n    self._viewLim.intervaly = (bottom, top)\n    if auto is not None:\n        self._autoscaleYon = bool(auto)\n\n    if emit:\n        self.callbacks.process('ylim_changed', self)\n        # Call all of the other y-axes that are shared with this one\n        for other in self._shared_y_axes.get_siblings(self):\n            if other is not self:\n                other.set_ylim(self.viewLim.intervaly,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return bottom, top\n",
                    "decorators": [],
                    "docstring": "Set the y-axis view limits.\n\nParameters\n----------\nbottom : float, optional\n    The bottom ylim in data coordinates. Passing *None* leaves the\n    limit unchanged.\n\n    The bottom and top ylims may also be passed as the tuple\n    (*bottom*, *top*) as the first positional argument (or as\n    the *bottom* keyword argument).\n\n    .. ACCEPTS: (bottom: float, top: float)\n\ntop : float, optional\n    The top ylim in data coordinates. Passing *None* leaves the\n    limit unchanged.\n\nemit : bool, default: True\n    Whether to notify observers of limit change.\n\nauto : bool or None, default: False\n    Whether to turn on autoscaling of the y-axis. *True* turns on,\n    *False* turns off, *None* leaves unchanged.\n\nymin, ymax : float, optional\n    They are equivalent to bottom and top respectively,\n    and it is an error to pass both *ymin* and *bottom* or\n    *ymax* and *top*.\n\nReturns\n-------\nbottom, top : (float, float)\n    The new y-axis limits in data coordinates.\n\nSee Also\n--------\nget_ylim\nset_ybound, get_ybound\ninvert_yaxis, yaxis_inverted\n\nNotes\n-----\nThe *bottom* value may be greater than the *top* value, in which\ncase the y-axis values will decrease from *bottom* to *top*.\n\nExamples\n--------\n>>> set_ylim(bottom, top)\n>>> set_ylim((bottom, top))\n>>> bottom, top = set_ylim(bottom, top)\n\nOne limit may be left unchanged.\n\n>>> set_ylim(top=top_lim)\n\nLimits may be passed in reverse order to flip the direction of\nthe y-axis. For example, suppose ``y`` represents depth of the\nocean in m. The y-axis limits might be set like the following\nso 5000 m depth is at the bottom of the plot and the surface,\n0 m, is at the top.\n\n>>> set_ylim(5000, 0)",
                    "start_line": 3485,
                    "end_line": 3617,
                    "variables": {
                        "top": [
                            3586,
                            3591,
                            3592,
                            3597,
                            3598,
                            3599,
                            3601,
                            3603,
                            3617,
                            3552,
                            3553,
                            3559,
                            3561,
                            3563,
                            3565,
                            3567,
                            3573,
                            3574,
                            3576
                        ],
                        "np.iterable": [
                            3552
                        ],
                        "np": [
                            3552
                        ],
                        "bottom": [
                            3585,
                            3592,
                            3594,
                            3597,
                            3598,
                            3599,
                            3601,
                            3603,
                            3617,
                            3552,
                            3553,
                            3555,
                            3557,
                            3563,
                            3564,
                            3567,
                            3571,
                            3572,
                            3576,
                            3580
                        ],
                        "ymin": [
                            3554,
                            3557
                        ],
                        "TypeError": [
                            3560,
                            3556
                        ],
                        "ymax": [
                            3561,
                            3558
                        ],
                        "self._process_unit_info": [
                            3563
                        ],
                        "self": [
                            3616,
                            3608,
                            3563,
                            3564,
                            3565,
                            3598,
                            3599,
                            3570,
                            3603,
                            3605,
                            3576,
                            3610,
                            3579,
                            3611,
                            3612,
                            3614
                        ],
                        "self._validate_converted_limits": [
                            3564,
                            3565
                        ],
                        "self.convert_yunits": [
                            3564,
                            3565
                        ],
                        "old_bottom": [
                            3585,
                            3570,
                            3579,
                            3572
                        ],
                        "old_top": [
                            3570,
                            3579,
                            3574,
                            3591
                        ],
                        "self.get_ylim": [
                            3570,
                            3579
                        ],
                        "self.get_yscale": [
                            3576
                        ],
                        "cbook._warn_external": [
                            3593,
                            3587,
                            3581
                        ],
                        "cbook": [
                            3593,
                            3587,
                            3581
                        ],
                        "reverse": [
                            3601,
                            3597
                        ],
                        "nonsingular": [
                            3598
                        ],
                        "self.yaxis.get_major_locator": [
                            3598
                        ],
                        "self.yaxis": [
                            3598,
                            3599
                        ],
                        "self.yaxis.limit_range_for_scale": [
                            3599
                        ],
                        "sorted": [
                            3601
                        ],
                        "bool": [
                            3601,
                            3605
                        ],
                        "self._viewLim.intervaly": [
                            3603
                        ],
                        "self._viewLim": [
                            3603
                        ],
                        "auto": [
                            3613,
                            3604,
                            3605
                        ],
                        "self._autoscaleYon": [
                            3605
                        ],
                        "emit": [
                            3607
                        ],
                        "self.callbacks.process": [
                            3608
                        ],
                        "self.callbacks": [
                            3608
                        ],
                        "other": [
                            3610,
                            3611,
                            3612,
                            3614,
                            3615
                        ],
                        "self._shared_y_axes.get_siblings": [
                            3610
                        ],
                        "self._shared_y_axes": [
                            3610
                        ],
                        "other.set_ylim": [
                            3612
                        ],
                        "self.viewLim.intervaly": [
                            3612
                        ],
                        "self.viewLim": [
                            3612
                        ],
                        "other.figure": [
                            3614,
                            3615
                        ],
                        "self.figure": [
                            3614
                        ],
                        "other.figure.canvas.draw_idle": [
                            3615
                        ],
                        "other.figure.canvas": [
                            3615
                        ],
                        "self.stale": [
                            3616
                        ]
                    },
                    "filtered_variables": {
                        "top": [
                            3586,
                            3591,
                            3592,
                            3597,
                            3598,
                            3599,
                            3601,
                            3603,
                            3617,
                            3552,
                            3553,
                            3559,
                            3561,
                            3563,
                            3565,
                            3567,
                            3573,
                            3574,
                            3576
                        ],
                        "np.iterable": [
                            3552
                        ],
                        "np": [
                            3552
                        ],
                        "bottom": [
                            3585,
                            3592,
                            3594,
                            3597,
                            3598,
                            3599,
                            3601,
                            3603,
                            3617,
                            3552,
                            3553,
                            3555,
                            3557,
                            3563,
                            3564,
                            3567,
                            3571,
                            3572,
                            3576,
                            3580
                        ],
                        "ymin": [
                            3554,
                            3557
                        ],
                        "ymax": [
                            3561,
                            3558
                        ],
                        "self._process_unit_info": [
                            3563
                        ],
                        "self": [
                            3616,
                            3608,
                            3563,
                            3564,
                            3565,
                            3598,
                            3599,
                            3570,
                            3603,
                            3605,
                            3576,
                            3610,
                            3579,
                            3611,
                            3612,
                            3614
                        ],
                        "self._validate_converted_limits": [
                            3564,
                            3565
                        ],
                        "self.convert_yunits": [
                            3564,
                            3565
                        ],
                        "old_bottom": [
                            3585,
                            3570,
                            3579,
                            3572
                        ],
                        "old_top": [
                            3570,
                            3579,
                            3574,
                            3591
                        ],
                        "self.get_ylim": [
                            3570,
                            3579
                        ],
                        "self.get_yscale": [
                            3576
                        ],
                        "cbook._warn_external": [
                            3593,
                            3587,
                            3581
                        ],
                        "cbook": [
                            3593,
                            3587,
                            3581
                        ],
                        "reverse": [
                            3601,
                            3597
                        ],
                        "nonsingular": [
                            3598
                        ],
                        "self.yaxis.get_major_locator": [
                            3598
                        ],
                        "self.yaxis": [
                            3598,
                            3599
                        ],
                        "self.yaxis.limit_range_for_scale": [
                            3599
                        ],
                        "self._viewLim.intervaly": [
                            3603
                        ],
                        "self._viewLim": [
                            3603
                        ],
                        "auto": [
                            3613,
                            3604,
                            3605
                        ],
                        "self._autoscaleYon": [
                            3605
                        ],
                        "emit": [
                            3607
                        ],
                        "self.callbacks.process": [
                            3608
                        ],
                        "self.callbacks": [
                            3608
                        ],
                        "other": [
                            3610,
                            3611,
                            3612,
                            3614,
                            3615
                        ],
                        "self._shared_y_axes.get_siblings": [
                            3610
                        ],
                        "self._shared_y_axes": [
                            3610
                        ],
                        "other.set_ylim": [
                            3612
                        ],
                        "self.viewLim.intervaly": [
                            3612
                        ],
                        "self.viewLim": [
                            3612
                        ],
                        "other.figure": [
                            3614,
                            3615
                        ],
                        "self.figure": [
                            3614
                        ],
                        "other.figure.canvas.draw_idle": [
                            3615
                        ],
                        "other.figure.canvas": [
                            3615
                        ],
                        "self.stale": [
                            3616
                        ]
                    },
                    "diff_line_number": 3603,
                    "class_data": {
                        "signature": "class _AxesBase(martist.Artist)",
                        "docstring": null,
                        "constructor_docstring": "Build an axes in a figure.\n\nParameters\n----------\nfig : `~matplotlib.figure.Figure`\n    The axes is build in the `.Figure` *fig*.\n\nrect : [left, bottom, width, height]\n    The axes is build in the rectangle *rect*. *rect* is in\n    `.Figure` coordinates.\n\nsharex, sharey : `~.axes.Axes`, optional\n    The x or y `~.matplotlib.axis` is shared with the x or\n    y axis in the input `~.axes.Axes`.\n\nframeon : bool, default: True\n    Whether the axes frame is visible.\n\nbox_aspect : None, or a number, optional\n    Sets the aspect of the axes box. See `~.axes.Axes.set_box_aspect`\n    for details.\n\n**kwargs\n    Other optional keyword arguments:\n\n    %(Axes)s\n\nReturns\n-------\n`~.axes.Axes`\n    The new `~.axes.Axes` object.",
                        "functions": [
                            "def __str__(self):\n    return '{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})'.format(type(self).__name__, self._position.bounds)",
                            "def __init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs):\n    \"\"\"\n    Build an axes in a figure.\n\n    Parameters\n    ----------\n    fig : `~matplotlib.figure.Figure`\n        The axes is build in the `.Figure` *fig*.\n\n    rect : [left, bottom, width, height]\n        The axes is build in the rectangle *rect*. *rect* is in\n        `.Figure` coordinates.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        The x or y `~.matplotlib.axis` is shared with the x or\n        y axis in the input `~.axes.Axes`.\n\n    frameon : bool, default: True\n        Whether the axes frame is visible.\n\n    box_aspect : None, or a number, optional\n        Sets the aspect of the axes box. See `~.axes.Axes.set_box_aspect`\n        for details.\n\n    **kwargs\n        Other optional keyword arguments:\n\n        %(Axes)s\n\n    Returns\n    -------\n    `~.axes.Axes`\n        The new `~.axes.Axes` object.\n    \"\"\"\n    martist.Artist.__init__(self)\n    if isinstance(rect, mtransforms.Bbox):\n        self._position = rect\n    else:\n        self._position = mtransforms.Bbox.from_bounds(*rect)\n    if self._position.width < 0 or self._position.height < 0:\n        raise ValueError('Width and height specified must be non-negative')\n    self._originalPosition = self._position.frozen()\n    self.axes = self\n    self._aspect = 'auto'\n    self._adjustable = 'box'\n    self._anchor = 'C'\n    self._stale_viewlim_x = False\n    self._stale_viewlim_y = False\n    self._sharex = None\n    self._sharey = None\n    self.set_label(label)\n    self.set_figure(fig)\n    self.set_box_aspect(box_aspect)\n    self._axes_locator = None\n    self.spines = self._gen_axes_spines()\n    self._init_axis()\n    if facecolor is None:\n        facecolor = mpl.rcParams['axes.facecolor']\n    self._facecolor = facecolor\n    self._frameon = frameon\n    self.set_axisbelow(mpl.rcParams['axes.axisbelow'])\n    self._rasterization_zorder = None\n    self.cla()\n    if sharex is not None:\n        self.sharex(sharex)\n    if sharey is not None:\n        self.sharey(sharey)\n    self.fmt_xdata = None\n    self.fmt_ydata = None\n    self.set_navigate(True)\n    self.set_navigate_mode(None)\n    if xscale:\n        self.set_xscale(xscale)\n    if yscale:\n        self.set_yscale(yscale)\n    self.update(kwargs)\n    if self.xaxis is not None:\n        self._xcid = self.xaxis.callbacks.connect('units finalize', lambda: self._on_units_changed(scalex=True))\n    if self.yaxis is not None:\n        self._ycid = self.yaxis.callbacks.connect('units finalize', lambda: self._on_units_changed(scaley=True))\n    rcParams = mpl.rcParams\n    self.tick_params(top=rcParams['xtick.top'] and rcParams['xtick.minor.top'], bottom=rcParams['xtick.bottom'] and rcParams['xtick.minor.bottom'], labeltop=rcParams['xtick.labeltop'] and rcParams['xtick.minor.top'], labelbottom=rcParams['xtick.labelbottom'] and rcParams['xtick.minor.bottom'], left=rcParams['ytick.left'] and rcParams['ytick.minor.left'], right=rcParams['ytick.right'] and rcParams['ytick.minor.right'], labelleft=rcParams['ytick.labelleft'] and rcParams['ytick.minor.left'], labelright=rcParams['ytick.labelright'] and rcParams['ytick.minor.right'], which='minor')\n    self.tick_params(top=rcParams['xtick.top'] and rcParams['xtick.major.top'], bottom=rcParams['xtick.bottom'] and rcParams['xtick.major.bottom'], labeltop=rcParams['xtick.labeltop'] and rcParams['xtick.major.top'], labelbottom=rcParams['xtick.labelbottom'] and rcParams['xtick.major.bottom'], left=rcParams['ytick.left'] and rcParams['ytick.major.left'], right=rcParams['ytick.right'] and rcParams['ytick.major.right'], labelleft=rcParams['ytick.labelleft'] and rcParams['ytick.major.left'], labelright=rcParams['ytick.labelright'] and rcParams['ytick.major.right'], which='major')\n    self._layoutbox = None\n    self._poslayoutbox = None",
                            "def __getstate__(self):\n    state = super().__getstate__()\n    for key in ['_layoutbox', '_poslayoutbox']:\n        state[key] = None\n    for grouper_name in ['_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        grouper = getattr(self, grouper_name)\n        state[grouper_name] = grouper.get_siblings(self) if self in grouper else None\n    return state",
                            "def __setstate__(self, state):\n    for grouper_name in ['_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        siblings = state.pop(grouper_name)\n        if siblings:\n            getattr(self, grouper_name).join(*siblings)\n    self.__dict__ = state\n    self._stale = True",
                            "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the axes bounding box in display space; *args* and *kwargs*\n    are empty.\n\n    This bounding box does not include the spines, ticks, ticklables,\n    or other labels.  For a bounding box including these elements use\n    `~matplotlib.axes.Axes.get_tightbbox`.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_tightbbox\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.get_window_extent\n\n    \"\"\"\n    return self.bbox",
                            "def _init_axis(self):\n    self.xaxis = maxis.XAxis(self)\n    self.spines['bottom'].register_axis(self.xaxis)\n    self.spines['top'].register_axis(self.xaxis)\n    self.yaxis = maxis.YAxis(self)\n    self.spines['left'].register_axis(self.yaxis)\n    self.spines['right'].register_axis(self.yaxis)\n    self._update_transScale()",
                            "def set_figure(self, fig):\n    martist.Artist.set_figure(self, fig)\n    self.bbox = mtransforms.TransformedBbox(self._position, fig.transFigure)\n    self.dataLim = mtransforms.Bbox.null()\n    self._viewLim = mtransforms.Bbox.unit()\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self._set_lim_and_transforms()",
                            "def _unstale_viewLim(self):\n    scalex = any((ax._stale_viewlim_x for ax in self._shared_x_axes.get_siblings(self)))\n    scaley = any((ax._stale_viewlim_y for ax in self._shared_y_axes.get_siblings(self)))\n    if scalex or scaley:\n        for ax in self._shared_x_axes.get_siblings(self):\n            ax._stale_viewlim_x = False\n        for ax in self._shared_y_axes.get_siblings(self):\n            ax._stale_viewlim_y = False\n        self.autoscale_view(scalex=scalex, scaley=scaley)",
                            "@property\ndef viewLim(self):\n    self._unstale_viewLim()\n    return self._viewLim",
                            "def _request_autoscale_view(self, tight=None, scalex=True, scaley=True):\n    if tight is not None:\n        self._tight = tight\n    if scalex:\n        self._stale_viewlim_x = True\n    if scaley:\n        self._stale_viewlim_y = True",
                            "def _set_lim_and_transforms(self):\n    \"\"\"\n    Set the *_xaxis_transform*, *_yaxis_transform*, *transScale*,\n    *transData*, *transLimits* and *transAxes* transformations.\n\n    .. note::\n\n        This method is primarily used by rectilinear projections of the\n        `~matplotlib.axes.Axes` class, and is meant to be overridden by\n        new kinds of projection axes that need different transformations\n        and limits. (See `~matplotlib.projections.polar.PolarAxes` for an\n        example.)\n    \"\"\"\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n    self.transScale = mtransforms.TransformWrapper(mtransforms.IdentityTransform())\n    self.transLimits = mtransforms.BboxTransformFrom(mtransforms.TransformedBbox(self._viewLim, self.transScale))\n    self.transData = self.transScale + (self.transLimits + self.transAxes)\n    self._xaxis_transform = mtransforms.blended_transform_factory(self.transData, self.transAxes)\n    self._yaxis_transform = mtransforms.blended_transform_factory(self.transAxes, self.transData)",
                            "def get_xaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing x-axis labels, ticks\n    and gridlines.  The x-direction is in data coordinates and the\n    y-direction is in axis coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._xaxis_transform\n    elif which == 'tick1':\n        return self.spines['bottom'].get_spine_transform()\n    elif which == 'tick2':\n        return self.spines['top'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                            "def get_xaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing x-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in data coordinates and the y-direction is in\n        axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['xtick.alignment']\n    return (self.get_xaxis_transform(which='tick1') + mtransforms.ScaledTranslation(0, -1 * pad_points / 72, self.figure.dpi_scale_trans), 'top', labels_align)",
                            "def get_xaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondary x-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in data coordinates and the y-direction\n        is in axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['xtick.alignment']\n    return (self.get_xaxis_transform(which='tick2') + mtransforms.ScaledTranslation(0, pad_points / 72, self.figure.dpi_scale_trans), 'bottom', labels_align)",
                            "def get_yaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing y-axis labels, ticks\n    and gridlines.  The x-direction is in axis coordinates and the\n    y-direction is in data coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._yaxis_transform\n    elif which == 'tick1':\n        return self.spines['left'].get_spine_transform()\n    elif which == 'tick2':\n        return self.spines['right'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                            "def get_yaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing y-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in axis coordinates and the y-direction is in\n        data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['ytick.alignment']\n    return (self.get_yaxis_transform(which='tick1') + mtransforms.ScaledTranslation(-1 * pad_points / 72, 0, self.figure.dpi_scale_trans), labels_align, 'right')",
                            "def get_yaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondart y-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in axis coordinates and the y-direction\n        is in data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams['ytick.alignment']\n    return (self.get_yaxis_transform(which='tick2') + mtransforms.ScaledTranslation(pad_points / 72, 0, self.figure.dpi_scale_trans), labels_align, 'left')",
                            "def _update_transScale(self):\n    self.transScale.set(mtransforms.blended_transform_factory(self.xaxis.get_transform(), self.yaxis.get_transform()))\n    for line in getattr(self, 'lines', []):\n        try:\n            line._transformed_path.invalidate()\n        except AttributeError:\n            pass",
                            "def get_position(self, original=False):\n    \"\"\"\n    Get a copy of the axes rectangle as a `.Bbox`.\n\n    Parameters\n    ----------\n    original : bool\n        If ``True``, return the original position. Otherwise return the\n        active position. For an explanation of the positions see\n        `.set_position`.\n\n    Returns\n    -------\n    `.Bbox`\n\n    \"\"\"\n    if original:\n        return self._originalPosition.frozen()\n    else:\n        locator = self.get_axes_locator()\n        if not locator:\n            self.apply_aspect()\n        return self._position.frozen()",
                            "def set_position(self, pos, which='both'):\n    \"\"\"\n    Set the axes position.\n\n    Axes have two position attributes. The 'original' position is the\n    position allocated for the Axes. The 'active' position is the\n    position the Axes is actually drawn at. These positions are usually\n    the same unless a fixed aspect is set to the Axes. See `.set_aspect`\n    for details.\n\n    Parameters\n    ----------\n    pos : [left, bottom, width, height] or `~matplotlib.transforms.Bbox`\n        The new position of the in `.Figure` coordinates.\n\n    which : {'both', 'active', 'original'}, default: 'both'\n        Determines which position variables to change.\n\n    \"\"\"\n    self._set_position(pos, which=which)\n    self._layoutbox = None\n    self._poslayoutbox = None",
                            "def _set_position(self, pos, which='both'):\n    \"\"\"\n    Private version of set_position.\n\n    Call this internally to get the same functionality of `get_position`,\n    but not to take the axis out of the constrained_layout hierarchy.\n    \"\"\"\n    if not isinstance(pos, mtransforms.BboxBase):\n        pos = mtransforms.Bbox.from_bounds(*pos)\n    for ax in self._twinned_axes.get_siblings(self):\n        if which in ('both', 'active'):\n            ax._position.set(pos)\n        if which in ('both', 'original'):\n            ax._originalPosition.set(pos)\n    self.stale = True",
                            "def reset_position(self):\n    \"\"\"\n    Reset the active position to the original position.\n\n    This resets the a possible position change due to aspect constraints.\n    For an explanation of the positions see `.set_position`.\n    \"\"\"\n    for ax in self._twinned_axes.get_siblings(self):\n        pos = ax.get_position(original=True)\n        ax.set_position(pos, which='active')",
                            "def set_axes_locator(self, locator):\n    \"\"\"\n    Set the axes locator.\n\n    Parameters\n    ----------\n    locator : Callable[[Axes, Renderer], Bbox]\n    \"\"\"\n    self._axes_locator = locator\n    self.stale = True",
                            "def get_axes_locator(self):\n    \"\"\"\n    Return the axes_locator.\n    \"\"\"\n    return self._axes_locator",
                            "def _set_artist_props(self, a):\n    \"\"\"Set the boilerplate props for artists added to axes.\"\"\"\n    a.set_figure(self.figure)\n    if not a.is_transform_set():\n        a.set_transform(self.transData)\n    a.axes = self\n    if a.mouseover:\n        self._mouseover_set.add(a)",
                            "def _gen_axes_patch(self):\n    \"\"\"\n    Returns\n    -------\n    Patch\n        The patch used to draw the background of the axes.  It is also used\n        as the clipping path for any data elements on the axes.\n\n        In the standard axes, this is a rectangle, but in other projections\n        it may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)",
                            "def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'):\n    \"\"\"\n    Returns\n    -------\n    dict\n        Mapping of spine names to `.Line2D` or `.Patch` instances that are\n        used to draw axes spines.\n\n        In the standard axes, spines are single line segments, but in other\n        projections they may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return OrderedDict(((side, mspines.Spine.linear_spine(self, side)) for side in ['left', 'right', 'bottom', 'top']))",
                            "def sharex(self, other):\n    \"\"\"\n    Share the x-axis with *other*.\n\n    This is equivalent to passing ``sharex=other`` when constructing the\n    axes, and cannot be used if the x-axis is already being shared with\n    another axes.\n    \"\"\"\n    cbook._check_isinstance(_AxesBase, other=other)\n    if self._sharex is not None and other is not self._sharex:\n        raise ValueError('x-axis is already shared')\n    self._shared_x_axes.join(self, other)\n    self._sharex = other\n    self.xaxis.major = other.xaxis.major\n    self.xaxis.minor = other.xaxis.minor\n    x0, x1 = other.get_xlim()\n    self.set_xlim(x0, x1, emit=False, auto=other.get_autoscalex_on())\n    self.xaxis._scale = other.xaxis._scale",
                            "def sharey(self, other):\n    \"\"\"\n    Share the y-axis with *other*.\n\n    This is equivalent to passing ``sharey=other`` when constructing the\n    axes, and cannot be used if the y-axis is already being shared with\n    another axes.\n    \"\"\"\n    cbook._check_isinstance(_AxesBase, other=other)\n    if self._sharey is not None and other is not self._sharey:\n        raise ValueError('y-axis is already shared')\n    self._shared_y_axes.join(self, other)\n    self._sharey = other\n    self.yaxis.major = other.yaxis.major\n    self.yaxis.minor = other.yaxis.minor\n    y0, y1 = other.get_ylim()\n    self.set_ylim(y0, y1, emit=False, auto=other.get_autoscaley_on())\n    self.yaxis._scale = other.yaxis._scale",
                            "def cla(self):\n    \"\"\"Clear the current axes.\"\"\"\n    if hasattr(self, 'patch'):\n        patch_visible = self.patch.get_visible()\n    else:\n        patch_visible = True\n    xaxis_visible = self.xaxis.get_visible()\n    yaxis_visible = self.yaxis.get_visible()\n    self.xaxis.cla()\n    self.yaxis.cla()\n    for name, spine in self.spines.items():\n        spine.cla()\n    self.ignore_existing_data_limits = True\n    self.callbacks = cbook.CallbackRegistry()\n    if self._sharex is not None:\n        self.sharex(self._sharex)\n    else:\n        self.xaxis._set_scale('linear')\n        try:\n            self.set_xlim(0, 1)\n        except TypeError:\n            pass\n    if self._sharey is not None:\n        self.sharey(self._sharey)\n    else:\n        self.yaxis._set_scale('linear')\n        try:\n            self.set_ylim(0, 1)\n        except TypeError:\n            pass\n    if mpl.rcParams['xtick.minor.visible']:\n        self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if mpl.rcParams['ytick.minor.visible']:\n        self.yaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if self._sharex is None:\n        self._autoscaleXon = True\n    if self._sharey is None:\n        self._autoscaleYon = True\n    self._xmargin = mpl.rcParams['axes.xmargin']\n    self._ymargin = mpl.rcParams['axes.ymargin']\n    self._tight = None\n    self._use_sticky_edges = True\n    self._update_transScale()\n    self._get_lines = _process_plot_var_args(self)\n    self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n    self._gridOn = mpl.rcParams['axes.grid']\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.tables = []\n    self.artists = []\n    self.images = []\n    self._mouseover_set = _OrderedSet()\n    self.child_axes = []\n    self._current_image = None\n    self.legend_ = None\n    self.collections = []\n    self.containers = []\n    self.grid(False)\n    self.grid(self._gridOn, which=mpl.rcParams['axes.grid.which'], axis=mpl.rcParams['axes.grid.axis'])\n    props = font_manager.FontProperties(size=mpl.rcParams['axes.titlesize'], weight=mpl.rcParams['axes.titleweight'])\n    y = mpl.rcParams['axes.titley']\n    if y is None:\n        y = 1.0\n        self._autotitlepos = True\n    else:\n        self._autotitlepos = False\n    self.title = mtext.Text(x=0.5, y=y, text='', fontproperties=props, verticalalignment='baseline', horizontalalignment='center')\n    self._left_title = mtext.Text(x=0.0, y=y, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='left')\n    self._right_title = mtext.Text(x=1.0, y=y, text='', fontproperties=props.copy(), verticalalignment='baseline', horizontalalignment='right')\n    title_offset_points = mpl.rcParams['axes.titlepad']\n    self._set_title_offset_trans(title_offset_points)\n    for _title in (self.title, self._left_title, self._right_title):\n        self._set_artist_props(_title)\n    self.patch = self._gen_axes_patch()\n    self.patch.set_figure(self.figure)\n    self.patch.set_facecolor(self._facecolor)\n    self.patch.set_edgecolor('None')\n    self.patch.set_linewidth(0)\n    self.patch.set_transform(self.transAxes)\n    self.set_axis_on()\n    self.xaxis.set_clip_path(self.patch)\n    self.yaxis.set_clip_path(self.patch)\n    self._shared_x_axes.clean()\n    self._shared_y_axes.clean()\n    if self._sharex is not None:\n        self.xaxis.set_visible(xaxis_visible)\n        self.patch.set_visible(patch_visible)\n    if self._sharey is not None:\n        self.yaxis.set_visible(yaxis_visible)\n        self.patch.set_visible(patch_visible)\n    self.stale = True",
                            "def clear(self):\n    \"\"\"Clear the axes.\"\"\"\n    self.cla()",
                            "def get_facecolor(self):\n    \"\"\"Get the facecolor of the Axes.\"\"\"\n    return self.patch.get_facecolor()",
                            "def set_facecolor(self, color):\n    \"\"\"\n    Set the facecolor of the Axes.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self._facecolor = color\n    self.stale = True\n    return self.patch.set_facecolor(color)",
                            "def _set_title_offset_trans(self, title_offset_points):\n    \"\"\"\n    Set the offset for the title either from :rc:`axes.titlepad`\n    or from set_title kwarg ``pad``.\n    \"\"\"\n    self.titleOffsetTrans = mtransforms.ScaledTranslation(0.0, title_offset_points / 72, self.figure.dpi_scale_trans)\n    for _title in (self.title, self._left_title, self._right_title):\n        _title.set_transform(self.transAxes + self.titleOffsetTrans)\n        _title.set_clip_box(None)",
                            "def set_prop_cycle(self, *args, **kwargs):\n    \"\"\"\n    Set the property cycle of the Axes.\n\n    The property cycle controls the style properties such as color,\n    marker and linestyle of future plot commands. The style properties\n    of data already added to the Axes are not modified.\n\n    Call signatures::\n\n      set_prop_cycle(cycler)\n      set_prop_cycle(label=values[, label2=values2[, ...]])\n      set_prop_cycle(label, values)\n\n    Form 1 sets given `~cycler.Cycler` object.\n\n    Form 2 creates a `~cycler.Cycler` which cycles over one or more\n    properties simultaneously and set it as the property cycle of the\n    axes. If multiple properties are given, their value lists must have\n    the same length. This is just a shortcut for explicitly creating a\n    cycler and passing it to the function, i.e. it's short for\n    ``set_prop_cycle(cycler(label=values label2=values2, ...))``.\n\n    Form 3 creates a `~cycler.Cycler` for a single property and set it\n    as the property cycle of the axes. This form exists for compatibility\n    with the original `cycler.cycler` interface. Its use is discouraged\n    in favor of the kwarg form, i.e. ``set_prop_cycle(label=values)``.\n\n    Parameters\n    ----------\n    cycler : Cycler\n        Set the given Cycler. *None* resets to the cycle defined by the\n        current style.\n\n    label : str\n        The property key. Must be a valid `.Artist` property.\n        For example, 'color' or 'linestyle'. Aliases are allowed,\n        such as 'c' for 'color' and 'lw' for 'linewidth'.\n\n    values : iterable\n        Finite-length iterable of the property values. These values\n        are validated and will raise a ValueError if invalid.\n\n    See Also\n    --------\n    matplotlib.rcsetup.cycler\n        Convenience function for creating validated cyclers for properties.\n    cycler.cycler\n        The original function for creating unvalidated cyclers.\n\n    Examples\n    --------\n    Setting the property cycle for a single property:\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n\n    Setting the property cycle for simultaneously cycling over multiple\n    properties (e.g. red circle, green plus, blue cross):\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n    ...                   marker=['o', '+', 'x'])\n\n    \"\"\"\n    if args and kwargs:\n        raise TypeError('Cannot supply both positional and keyword arguments to this method.')\n    if len(args) == 1 and args[0] is None:\n        prop_cycle = None\n    else:\n        prop_cycle = cycler(*args, **kwargs)\n    self._get_lines.set_prop_cycle(prop_cycle)\n    self._get_patches_for_fill.set_prop_cycle(prop_cycle)",
                            "def get_aspect(self):\n    return self._aspect",
                            "def set_aspect(self, aspect, adjustable=None, anchor=None, share=False):\n    \"\"\"\n    Set the aspect of the axis scaling, i.e. the ratio of y-unit to x-unit.\n\n    Parameters\n    ----------\n    aspect : {'auto'} or num\n        Possible values:\n\n        ========   =================================================\n        value      description\n        ========   =================================================\n        'auto'     automatic; fill the position rectangle with data.\n        num        a circle will be stretched such that the height\n                   is *num* times the width.  'equal' is a synonym\n                   for ``aspect=1``, i.e. same scaling for x and y.\n        ========   =================================================\n\n    adjustable : None or {'box', 'datalim'}, optional\n        If not ``None``, this defines which parameter will be adjusted to\n        meet the required aspect. See `.set_adjustable` for further\n        details.\n\n    anchor : None or str or 2-tuple of float, optional\n        If not ``None``, this defines where the Axes will be drawn if there\n        is extra space due to aspect constraints. The most common way to\n        to specify the anchor are abbreviations of cardinal directions:\n\n        =====   =====================\n        value   description\n        =====   =====================\n        'C'     centered\n        'SW'    lower left corner\n        'S'     middle of bottom edge\n        'SE'    lower right corner\n        etc.\n        =====   =====================\n\n        See `.set_anchor` for further details.\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_anchor\n        Set the position in case of extra space.\n    \"\"\"\n    if cbook._str_equal(aspect, 'equal'):\n        aspect = 1\n    if not cbook._str_equal(aspect, 'auto'):\n        if self.name == '3d':\n            raise NotImplementedError('It is not currently possible to manually set the aspect on 3D axes')\n        aspect = float(aspect)\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._aspect = aspect\n    if adjustable is None:\n        adjustable = self._adjustable\n    self.set_adjustable(adjustable, share=share)\n    if anchor is not None:\n        self.set_anchor(anchor, share=share)\n    self.stale = True",
                            "def get_adjustable(self):\n    \"\"\"\n    Return whether the Axes will adjust its physical dimension ('box') or\n    its data limits ('datalim') to achieve the desired aspect ratio.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect handling.\n    \"\"\"\n    return self._adjustable",
                            "def set_adjustable(self, adjustable, share=False):\n    \"\"\"\n    Set how the Axes adjusts to achieve the required aspect ratio.\n\n    Parameters\n    ----------\n    adjustable : {'box', 'datalim'}\n        If 'box', change the physical dimensions of the Axes.\n        If 'datalim', change the ``x`` or ``y`` data limits.\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect handling.\n\n    Notes\n    -----\n    Shared Axes (of which twinned Axes are a special case)\n    impose restrictions on how aspect ratios can be imposed.\n    For twinned Axes, use 'datalim'.  For Axes that share both\n    x and y, use 'box'.  Otherwise, either 'datalim' or 'box'\n    may be used.  These limitations are partly a requirement\n    to avoid over-specification, and partly a result of the\n    particular implementation we are currently using, in\n    which the adjustments for aspect ratios are done sequentially\n    and independently on each Axes as it is drawn.\n    \"\"\"\n    cbook._check_in_list(['box', 'datalim'], adjustable=adjustable)\n    if share:\n        axs = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axs = [self]\n    if adjustable == 'datalim' and any((getattr(ax.get_data_ratio, '__func__', None) != _AxesBase.get_data_ratio for ax in axs)):\n        raise ValueError(\"Cannot set axes adjustable to 'datalim' for Axes which override 'get_data_ratio'\")\n    for ax in axs:\n        ax._adjustable = adjustable\n    self.stale = True",
                            "def get_box_aspect(self):\n    \"\"\"\n    Get the axes box aspect.\n    Will be ``None`` if not explicitly specified.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_box_aspect\n        for a description of box aspect.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._box_aspect",
                            "def set_box_aspect(self, aspect=None):\n    \"\"\"\n    Set the axes box aspect. The box aspect is the ratio of the\n    axes height to the axes width in physical units. This is not to be\n    confused with the data aspect, set via `~.Axes.set_aspect`.\n\n    Parameters\n    ----------\n    aspect : None, or a number\n        Changes the physical dimensions of the Axes, such that the ratio\n        of the axes height to the axes width in physical units is equal to\n        *aspect*. If *None*, the axes geometry will not be adjusted.\n\n    Note that calling this function with a number changes the *adjustable*\n    to *datalim*.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    axs = {*self._twinned_axes.get_siblings(self), *self._twinned_axes.get_siblings(self)}\n    if aspect is not None:\n        aspect = float(aspect)\n        for ax in axs:\n            ax.set_adjustable('datalim')\n    for ax in axs:\n        ax._box_aspect = aspect\n        ax.stale = True",
                            "def get_anchor(self):\n    \"\"\"\n    Get the anchor location.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_anchor\n        for a description of the anchor.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._anchor",
                            "def set_anchor(self, anchor, share=False):\n    \"\"\"\n    Define the anchor location.\n\n    The actual drawing area (active position) of the Axes may be smaller\n    than the Bbox (original position) when a fixed aspect is required. The\n    anchor defines where the drawing area will be located within the\n    available space.\n\n    Parameters\n    ----------\n    anchor : 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...}\n        The anchor position may be either:\n\n        - a sequence (*cx*, *cy*). *cx* and *cy* may range from 0\n          to 1, where 0 is left or bottom and 1 is right or top.\n\n        - a string using cardinal directions as abbreviation:\n\n          - 'C' for centered\n          - 'S' (south) for bottom-center\n          - 'SW' (south west) for bottom-left\n          - etc.\n\n          Here is an overview of the possible positions:\n\n          +------+------+------+\n          | 'NW' | 'N'  | 'NE' |\n          +------+------+------+\n          | 'W'  | 'C'  | 'E'  |\n          +------+------+------+\n          | 'SW' | 'S'  | 'SE' |\n          +------+------+------+\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    if not (anchor in mtransforms.Bbox.coefs or len(anchor) == 2):\n        raise ValueError('argument must be among %s' % ', '.join(mtransforms.Bbox.coefs))\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self), *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._anchor = anchor\n    self.stale = True",
                            "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the scaled data.\n\n    Notes\n    -----\n    This method is intended to be overridden by new projection types.\n    \"\"\"\n    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())\n    tymin, tymax = self.yaxis.get_transform().transform(self.get_ybound())\n    xsize = max(abs(txmax - txmin), 1e-30)\n    ysize = max(abs(tymax - tymin), 1e-30)\n    return ysize / xsize",
                            "@cbook.deprecated('3.2')\ndef get_data_ratio_log(self):\n    \"\"\"\n    Return the aspect ratio of the raw data in log scale.\n\n    Notes\n    -----\n    Will be used when both axis are in log scale.\n    \"\"\"\n    xmin, xmax = self.get_xbound()\n    ymin, ymax = self.get_ybound()\n    xsize = max(abs(math.log10(xmax) - math.log10(xmin)), 1e-30)\n    ysize = max(abs(math.log10(ymax) - math.log10(ymin)), 1e-30)\n    return ysize / xsize",
                            "def apply_aspect(self, position=None):\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n\n    Depending on `.get_adjustable` this will modify either the\n    Axes box (position) or the view limits. In the former case,\n    `~matplotlib.axes.Axes.get_anchor` will affect the position.\n\n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_anchor\n        Set the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n    aspect = self.get_aspect()\n    if aspect == 'auto' and self._box_aspect is None:\n        self._set_position(position, which='active')\n        return\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n    if self._box_aspect is not None:\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        if aspect == 'auto':\n            return\n    if self._box_aspect is None:\n        self._set_position(position, which='active')\n    else:\n        position = pb1.anchored(self.get_anchor(), pb)\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    xmin, xmax = x_trf.transform(self.get_xbound())\n    ymin, ymax = y_trf.transform(self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n    box_aspect = fig_aspect * (position.height / position.width)\n    data_ratio = box_aspect / aspect\n    y_expander = data_ratio * xsize / ysize - 1\n    if abs(y_expander) < 0.005:\n        return\n    dL = self.dataLim\n    x0, x1 = x_trf.transform(dL.intervalx)\n    y0, y1 = y_trf.transform(dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    xm = 0\n    ym = 0\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both axes are shared\")\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = Ymarg > 0 and y_expander < 0 or (Xmarg < 0 and y_expander > 0)\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(y_trf.inverted().transform([y0, y1]))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(x_trf.inverted().transform([x0, x1]))",
                            "def axis(self, *args, emit=True, **kwargs):\n    \"\"\"\n    Convenience method to get or set some axis properties.\n\n    Call signatures::\n\n      xmin, xmax, ymin, ymax = axis()\n      xmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\n      xmin, xmax, ymin, ymax = axis(option)\n      xmin, xmax, ymin, ymax = axis(**kwargs)\n\n    Parameters\n    ----------\n    xmin, xmax, ymin, ymax : float, optional\n        The axis limits to be set.  This can also be achieved using ::\n\n            ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n    option : bool or str\n        If a bool, turns axis lines and labels on or off. If a string,\n        possible values are:\n\n        ======== ==========================================================\n        Value    Description\n        ======== ==========================================================\n        'on'     Turn on axis lines and labels. Same as ``True``.\n        'off'    Turn off axis lines and labels. Same as ``False``.\n        'equal'  Set equal scaling (i.e., make circles circular) by\n                 changing axis limits. This is the same as\n                 ``ax.set_aspect('equal', adjustable='datalim')``.\n                 Explicit data limits may not be respected in this case.\n        'scaled' Set equal scaling (i.e., make circles circular) by\n                 changing dimensions of the plot box. This is the same as\n                 ``ax.set_aspect('equal', adjustable='box', anchor='C')``.\n                 Additionally, further autoscaling will be disabled.\n        'tight'  Set limits just large enough to show all data, then\n                 disable further autoscaling.\n        'auto'   Automatic scaling (fill plot box with data).\n        'image'  'scaled' with axis limits equal to data limits.\n        'square' Square plot; similar to 'scaled', but initially forcing\n                 ``xmax-xmin == ymax-ymin``.\n        ======== ==========================================================\n\n    emit : bool, default: True\n        Whether observers are notified of the axis limit change.\n        This option is passed on to `~.Axes.set_xlim` and\n        `~.Axes.set_ylim`.\n\n    Returns\n    -------\n    xmin, xmax, ymin, ymax : float\n        The axis limits.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_xlim\n    matplotlib.axes.Axes.set_ylim\n    \"\"\"\n    if len(args) == 1 and isinstance(args[0], (str, bool)):\n        s = args[0]\n        if s is True:\n            s = 'on'\n        if s is False:\n            s = 'off'\n        s = s.lower()\n        if s == 'on':\n            self.set_axis_on()\n        elif s == 'off':\n            self.set_axis_off()\n        elif s in ('equal', 'tight', 'scaled', 'auto', 'image', 'square'):\n            self.set_autoscale_on(True)\n            self.set_aspect('auto')\n            self.autoscale_view(tight=False)\n            if s == 'equal':\n                self.set_aspect('equal', adjustable='datalim')\n            elif s == 'scaled':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n            elif s == 'tight':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n            elif s == 'image':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n                self.set_aspect('equal', adjustable='box', anchor='C')\n            elif s == 'square':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n                xlim = self.get_xlim()\n                ylim = self.get_ylim()\n                edge_size = max(np.diff(xlim), np.diff(ylim))[0]\n                self.set_xlim([xlim[0], xlim[0] + edge_size], emit=emit, auto=False)\n                self.set_ylim([ylim[0], ylim[0] + edge_size], emit=emit, auto=False)\n        else:\n            raise ValueError('Unrecognized string %s to axis; try on or off' % s)\n    else:\n        if len(args) >= 1:\n            if len(args) != 1:\n                cbook.warn_deprecated('3.2', message='Passing more than one positional argument to axis() is deprecated and will raise a TypeError %(removal)s.')\n            limits = args[0]\n            try:\n                xmin, xmax, ymin, ymax = limits\n            except (TypeError, ValueError) as err:\n                raise TypeError('the first argument to axis() must be an interable of the form [xmin, xmax, ymin, ymax]') from err\n        else:\n            xmin = kwargs.pop('xmin', None)\n            xmax = kwargs.pop('xmax', None)\n            ymin = kwargs.pop('ymin', None)\n            ymax = kwargs.pop('ymax', None)\n        xauto = None if xmin is None and xmax is None else False\n        yauto = None if ymin is None and ymax is None else False\n        self.set_xlim(xmin, xmax, emit=emit, auto=xauto)\n        self.set_ylim(ymin, ymax, emit=emit, auto=yauto)\n    if kwargs:\n        raise TypeError(f\"axis() got an unexpected keyword argument '{next(iter(kwargs))}'\")\n    return (*self.get_xlim(), *self.get_ylim())",
                            "def get_legend(self):\n    \"\"\"Return the `.Legend` instance, or None if no legend is defined.\"\"\"\n    return self.legend_",
                            "def get_images(self):\n    \"\"\"Return a list of `.AxesImage`\\\\s contained by the Axes.\"\"\"\n    return cbook.silent_list('AxesImage', self.images)",
                            "def get_lines(self):\n    \"\"\"Return a list of lines contained by the Axes.\"\"\"\n    return cbook.silent_list('Line2D', self.lines)",
                            "def get_xaxis(self):\n    \"\"\"Return the XAxis instance.\"\"\"\n    return self.xaxis",
                            "def get_yaxis(self):\n    \"\"\"Return the YAxis instance.\"\"\"\n    return self.yaxis",
                            "def _sci(self, im):\n    \"\"\"\n    Set the current image.\n\n    This image will be the target of colormap functions like\n    `~.pyplot.viridis`, and other functions such as `~.pyplot.clim`.  The\n    current image is an attribute of the current axes.\n    \"\"\"\n    if isinstance(im, mpl.contour.ContourSet):\n        if im.collections[0] not in self.collections:\n            raise ValueError('ContourSet must be in current Axes')\n    elif im not in self.images and im not in self.collections:\n        raise ValueError('Argument must be an image, collection, or ContourSet in this Axes')\n    self._current_image = im",
                            "def _gci(self):\n    \"\"\"Helper for `~matplotlib.pyplot.gci`; do not use elsewhere.\"\"\"\n    return self._current_image",
                            "def has_data(self):\n    \"\"\"\n    Return *True* if any artists have been added to axes.\n\n    This should not be used to determine whether the *dataLim*\n    need to be updated, and may not actually be useful for\n    anything.\n    \"\"\"\n    return len(self.collections) + len(self.images) + len(self.lines) + len(self.patches) > 0",
                            "def add_artist(self, a):\n    \"\"\"\n    Add an `~.Artist` to the axes, and return the artist.\n\n    Use `add_artist` only for artists for which there is no dedicated\n    \"add\" method; and if necessary, use a method such as `update_datalim`\n    to manually update the dataLim if the artist is to be included in\n    autoscaling.\n\n    If no ``transform`` has been specified when creating the artist (e.g.\n    ``artist.get_transform() == None``) then the transform is set to\n    ``ax.transData``.\n    \"\"\"\n    a.axes = self\n    self.artists.append(a)\n    a._remove_method = self.artists.remove\n    self._set_artist_props(a)\n    a.set_clip_path(self.patch)\n    self.stale = True\n    return a",
                            "def add_child_axes(self, ax):\n    \"\"\"\n    Add an `~.AxesBase` to the axes' children; return the child axes.\n\n    This is the lowlevel version.  See `.axes.Axes.inset_axes`.\n    \"\"\"\n    ax._axes = self\n    ax.stale_callback = martist._stale_axes_callback\n    self.child_axes.append(ax)\n    ax._remove_method = self.child_axes.remove\n    self.stale = True\n    return ax",
                            "def add_collection(self, collection, autolim=True):\n    \"\"\"\n    Add a `~.Collection` to the axes' collections; return the collection.\n    \"\"\"\n    label = collection.get_label()\n    if not label:\n        collection.set_label('_collection%d' % len(self.collections))\n    self.collections.append(collection)\n    collection._remove_method = self.collections.remove\n    self._set_artist_props(collection)\n    if collection.get_clip_path() is None:\n        collection.set_clip_path(self.patch)\n    if autolim:\n        self._unstale_viewLim()\n        self.update_datalim(collection.get_datalim(self.transData))\n    self.stale = True\n    return collection",
                            "def add_image(self, image):\n    \"\"\"\n    Add an `~.AxesImage` to the axes' images; return the image.\n    \"\"\"\n    self._set_artist_props(image)\n    if not image.get_label():\n        image.set_label('_image%d' % len(self.images))\n    self.images.append(image)\n    image._remove_method = self.images.remove\n    self.stale = True\n    return image",
                            "def _update_image_limits(self, image):\n    xmin, xmax, ymin, ymax = image.get_extent()\n    self.axes.update_datalim(((xmin, ymin), (xmax, ymax)))",
                            "def add_line(self, line):\n    \"\"\"\n    Add a `.Line2D` to the axes' lines; return the line.\n    \"\"\"\n    self._set_artist_props(line)\n    if line.get_clip_path() is None:\n        line.set_clip_path(self.patch)\n    self._update_line_limits(line)\n    if not line.get_label():\n        line.set_label('_line%d' % len(self.lines))\n    self.lines.append(line)\n    line._remove_method = self.lines.remove\n    self.stale = True\n    return line",
                            "def _add_text(self, txt):\n    \"\"\"\n    Add a `~.Text` to the axes' texts; return the text.\n    \"\"\"\n    self._set_artist_props(txt)\n    self.texts.append(txt)\n    txt._remove_method = self.texts.remove\n    self.stale = True\n    return txt",
                            "def _update_line_limits(self, line):\n    \"\"\"\n    Figures out the data limit of the given line, updating self.dataLim.\n    \"\"\"\n    path = line.get_path()\n    if path.vertices.size == 0:\n        return\n    line_trans = line.get_transform()\n    if line_trans == self.transData:\n        data_path = path\n    elif any(line_trans.contains_branch_seperately(self.transData)):\n        trans_to_data = line_trans - self.transData\n        if self.transData.is_affine:\n            line_trans_path = line._get_transformed_path()\n            na_path, _ = line_trans_path.get_transformed_path_and_affine()\n            data_path = trans_to_data.transform_path_affine(na_path)\n        else:\n            data_path = trans_to_data.transform_path(path)\n    else:\n        data_path = path\n    if data_path.vertices.size > 0:\n        updatex, updatey = line_trans.contains_branch_seperately(self.transData)\n        self.dataLim.update_from_path(data_path, self.ignore_existing_data_limits, updatex=updatex, updatey=updatey)\n        self.ignore_existing_data_limits = False",
                            "def add_patch(self, p):\n    \"\"\"\n    Add a `~.Patch` to the axes' patches; return the patch.\n    \"\"\"\n    self._set_artist_props(p)\n    if p.get_clip_path() is None:\n        p.set_clip_path(self.patch)\n    self._update_patch_limits(p)\n    self.patches.append(p)\n    p._remove_method = self.patches.remove\n    return p",
                            "def _update_patch_limits(self, patch):\n    \"\"\"Update the data limits for the given patch.\"\"\"\n    if isinstance(patch, mpatches.Rectangle) and (not patch.get_width() and (not patch.get_height())):\n        return\n    vertices = patch.get_path().vertices\n    if vertices.size > 0:\n        xys = patch.get_patch_transform().transform(vertices)\n        if patch.get_data_transform() != self.transData:\n            patch_to_data = patch.get_data_transform() - self.transData\n            xys = patch_to_data.transform(xys)\n        updatex, updatey = patch.get_transform().contains_branch_seperately(self.transData)\n        self.update_datalim(xys, updatex=updatex, updatey=updatey)",
                            "def add_table(self, tab):\n    \"\"\"\n    Add a `~.Table` to the axes' tables; return the table.\n    \"\"\"\n    self._set_artist_props(tab)\n    self.tables.append(tab)\n    tab.set_clip_path(self.patch)\n    tab._remove_method = self.tables.remove\n    return tab",
                            "def add_container(self, container):\n    \"\"\"\n    Add a `~.Container` to the axes' containers; return the container.\n    \"\"\"\n    label = container.get_label()\n    if not label:\n        container.set_label('_container%d' % len(self.containers))\n    self.containers.append(container)\n    container._remove_method = self.containers.remove\n    return container",
                            "def _on_units_changed(self, scalex=False, scaley=False):\n    \"\"\"\n    Callback for processing changes to axis units.\n\n    Currently requests updates of data limits and view limits.\n    \"\"\"\n    self.relim()\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)",
                            "def relim(self, visible_only=False):\n    \"\"\"\n    Recompute the data limits based on current artists.\n\n    At present, `~.Collection` instances are not supported.\n\n    Parameters\n    ----------\n    visible_only : bool, default: False\n        Whether to exclude invisible artists.\n    \"\"\"\n    self.dataLim.ignore(True)\n    self.dataLim.set_points(mtransforms.Bbox.null().get_points())\n    self.ignore_existing_data_limits = True\n    for line in self.lines:\n        if not visible_only or line.get_visible():\n            self._update_line_limits(line)\n    for p in self.patches:\n        if not visible_only or p.get_visible():\n            self._update_patch_limits(p)\n    for image in self.images:\n        if not visible_only or image.get_visible():\n            self._update_image_limits(image)",
                            "def update_datalim(self, xys, updatex=True, updatey=True):\n    \"\"\"\n    Extend the `~.Axes.dataLim` Bbox to include the given points.\n\n    If no data is set currently, the Bbox will ignore its limits and set\n    the bound to be the bounds of the xydata (*xys*). Otherwise, it will\n    compute the bounds of the union of its current data and the data in\n    *xys*.\n\n    Parameters\n    ----------\n    xys : 2D array-like\n        The points to include in the data limits Bbox. This can be either\n        a list of (x, y) tuples or a Nx2 array.\n\n    updatex, updatey : bool, default: True\n        Whether to update the x/y limits.\n    \"\"\"\n    xys = np.asarray(xys)\n    if not len(xys):\n        return\n    self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits, updatex=updatex, updatey=updatey)\n    self.ignore_existing_data_limits = False",
                            "@cbook.deprecated('3.3', alternative='ax.dataLim.set(Bbox.union([ax.dataLim, bounds]))')\ndef update_datalim_bounds(self, bounds):\n    \"\"\"\n    Extend the `~.Axes.datalim` Bbox to include the given\n    `~matplotlib.transforms.Bbox`.\n\n    Parameters\n    ----------\n    bounds : `~matplotlib.transforms.Bbox`\n    \"\"\"\n    self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds]))",
                            "def _process_unit_info(self, xdata=None, ydata=None, kwargs=None):\n    \"\"\"Look for unit *kwargs* and update the axis instances as necessary\"\"\"\n\n    def _process_single_axis(data, axis, unit_name, kwargs):\n        if axis is None:\n            return kwargs\n        if data is not None:\n            if not axis.have_units():\n                axis.update_units(data)\n        if kwargs is not None:\n            units = kwargs.pop(unit_name, axis.units)\n            if self.name == 'polar':\n                polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n                units = kwargs.pop(polar_units[unit_name], units)\n            if units != axis.units:\n                axis.set_units(units)\n                if data is not None:\n                    axis.update_units(data)\n        return kwargs\n    kwargs = _process_single_axis(xdata, self.xaxis, 'xunits', kwargs)\n    kwargs = _process_single_axis(ydata, self.yaxis, 'yunits', kwargs)\n    return kwargs",
                            "def in_axes(self, mouseevent):\n    \"\"\"\n    Return *True* if the given *mouseevent* (in display coords)\n    is in the Axes\n    \"\"\"\n    return self.patch.contains(mouseevent)[0]",
                            "def get_autoscale_on(self):\n    \"\"\"\n    Get whether autoscaling is applied for both axes on plot commands\n    \"\"\"\n    return self._autoscaleXon and self._autoscaleYon",
                            "def get_autoscalex_on(self):\n    \"\"\"\n    Get whether autoscaling for the x-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleXon",
                            "def get_autoscaley_on(self):\n    \"\"\"\n    Get whether autoscaling for the y-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleYon",
                            "def set_autoscale_on(self, b):\n    \"\"\"\n    Set whether autoscaling is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b\n    self._autoscaleYon = b",
                            "def set_autoscalex_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the x-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b",
                            "def set_autoscaley_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the y-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleYon = b",
                            "@property\ndef use_sticky_edges(self):\n    \"\"\"\n    When autoscaling, whether to obey all `Artist.sticky_edges`.\n\n    Default is ``True``.\n\n    Setting this to ``False`` ensures that the specified margins\n    will be applied, even if the plot includes an image, for\n    example, which would otherwise force a view limit to coincide\n    with its data limit.\n\n    The changing this property does not change the plot until\n    `autoscale` or `autoscale_view` is called.\n    \"\"\"\n    return self._use_sticky_edges",
                            "@use_sticky_edges.setter\ndef use_sticky_edges(self, b):\n    self._use_sticky_edges = bool(b)",
                            "def set_xmargin(self, m):\n    \"\"\"\n    Set padding of X data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError('margin must be greater than -0.5')\n    self._xmargin = m\n    self.stale = True",
                            "def set_ymargin(self, m):\n    \"\"\"\n    Set padding of Y data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError('margin must be greater than -0.5')\n    self._ymargin = m\n    self.stale = True",
                            "def margins(self, *margins, x=None, y=None, tight=True):\n    \"\"\"\n    Set or retrieve autoscaling margins.\n\n    The padding added to each limit of the axes is the *margin*\n    times the data interval. All input parameters must be floats\n    within the range [0, 1]. Passing both positional and keyword\n    arguments is invalid and will raise a TypeError. If no\n    arguments (positional or otherwise) are provided, the current\n    margins will remain in place and simply be returned.\n\n    Specifying any margin changes only the autoscaling; for example,\n    if *xmargin* is not None, then *xmargin* times the X data\n    interval will be added to each end of that interval before\n    it is used in autoscaling.\n\n    Parameters\n    ----------\n    *margins : float, optional\n        If a single positional argument is provided, it specifies\n        both margins of the x-axis and y-axis limits. If two\n        positional arguments are provided, they will be interpreted\n        as *xmargin*, *ymargin*. If setting the margin on a single\n        axis is desired, use the keyword arguments described below.\n\n    x, y : float, optional\n        Specific margin values for the x-axis and y-axis,\n        respectively. These cannot be used with positional\n        arguments, but can be used individually to alter on e.g.,\n        only the y-axis.\n\n    tight : bool or None, default: True\n        The *tight* parameter is passed to :meth:`autoscale_view`,\n        which is executed after a margin is changed; the default\n        here is *True*, on the assumption that when margins are\n        specified, no additional padding to match tick marks is\n        usually desired.  Set *tight* to *None* will preserve\n        the previous setting.\n\n    Returns\n    -------\n    xmargin, ymargin : float\n\n    Notes\n    -----\n    If a previously used Axes method such as :meth:`pcolor` has set\n    :attr:`use_sticky_edges` to `True`, only the limits not set by\n    the \"sticky artists\" will be modified. To force all of the\n    margins to be set, set :attr:`use_sticky_edges` to `False`\n    before calling :meth:`margins`.\n    \"\"\"\n    if margins and x is not None and (y is not None):\n        raise TypeError('Cannot pass both positional and keyword arguments for x and/or y.')\n    elif len(margins) == 1:\n        x = y = margins[0]\n    elif len(margins) == 2:\n        x, y = margins\n    elif margins:\n        raise TypeError('Must pass a single positional argument for all margins, or one for each margin (x, y).')\n    if x is None and y is None:\n        if tight is not True:\n            cbook._warn_external(f'ignoring tight={tight!r} in get mode')\n        return (self._xmargin, self._ymargin)\n    if x is not None:\n        self.set_xmargin(x)\n    if y is not None:\n        self.set_ymargin(y)\n    self._request_autoscale_view(tight=tight, scalex=x is not None, scaley=y is not None)",
                            "def set_rasterization_zorder(self, z):\n    \"\"\"\n    Parameters\n    ----------\n    z : float or None\n        zorder below which artists are rasterized.  ``None`` means that\n        artists do not get rasterized based on zorder.\n    \"\"\"\n    self._rasterization_zorder = z\n    self.stale = True",
                            "def get_rasterization_zorder(self):\n    \"\"\"Return the zorder value below which artists will be rasterized.\"\"\"\n    return self._rasterization_zorder",
                            "def autoscale(self, enable=True, axis='both', tight=None):\n    \"\"\"\n    Autoscale the axis view to the data (toggle).\n\n    Convenience method for simple axis view autoscaling.\n    It turns autoscaling on or off, and then,\n    if autoscaling for either axis is on, it performs\n    the autoscaling on the specified axis or axes.\n\n    Parameters\n    ----------\n    enable : bool or None, default: True\n        True turns autoscaling on, False turns it off.\n        None leaves the autoscaling state unchanged.\n    axis : {'both', 'x', 'y'}, default: 'both'\n        Which axis to operate on.\n    tight : bool or None, default: None\n        If True, first set the margins to zero.  Then, this argument is\n        forwarded to `autoscale_view` (regardless of its value); see the\n        description of its behavior there.\n    \"\"\"\n    if enable is None:\n        scalex = True\n        scaley = True\n    else:\n        scalex = False\n        scaley = False\n        if axis in ['x', 'both']:\n            self._autoscaleXon = bool(enable)\n            scalex = self._autoscaleXon\n        if axis in ['y', 'both']:\n            self._autoscaleYon = bool(enable)\n            scaley = self._autoscaleYon\n    if tight and scalex:\n        self._xmargin = 0\n    if tight and scaley:\n        self._ymargin = 0\n    self._request_autoscale_view(tight=tight, scalex=scalex, scaley=scaley)",
                            "def autoscale_view(self, tight=None, scalex=True, scaley=True):\n    \"\"\"\n    Autoscale the view limits using the data limits.\n\n    Parameters\n    ----------\n    tight : bool or None\n        If *True*, only expand the axis limits using the margins.  Note\n        that unlike for `autoscale`, ``tight=True`` does *not* set the\n        margins to zero.\n\n        If *False* and :rc:`axes.autolimit_mode` is 'round_numbers', then\n        after expansion by the margins, further expand the axis limits\n        using the axis major locator.\n\n        If None (the default), reuse the value set in the previous call to\n        `autoscale_view` (the initial value is False, but the default style\n        sets :rc:`axes.autolimit_mode` to 'data', in which case this\n        behaves like True).\n\n    scalex : bool, default: True\n        Whether to autoscale the x axis.\n\n    scaley : bool, default: True\n        Whether to autoscale the y axis.\n\n    Notes\n    -----\n    The autoscaling preserves any preexisting axis direction reversal.\n\n    The data limits are not updated automatically when artist data are\n    changed after the artist has been added to an Axes instance.  In that\n    case, use :meth:`matplotlib.axes.Axes.relim` prior to calling\n    autoscale_view.\n\n    If the views of the axes are fixed, e.g. via `set_xlim`, they will\n    not be changed by autoscale_view().\n    See :meth:`matplotlib.axes.Axes.autoscale` for an alternative.\n    \"\"\"\n    if tight is not None:\n        self._tight = bool(tight)\n    x_stickies = y_stickies = np.array([])\n    if self.use_sticky_edges:\n        if self._xmargin and scalex and self._autoscaleXon:\n            x_stickies = np.sort(np.concatenate([artist.sticky_edges.x for ax in self._shared_x_axes.get_siblings(self) if hasattr(ax, 'lines') for artist in ax.get_children()]))\n        if self._ymargin and scaley and self._autoscaleYon:\n            y_stickies = np.sort(np.concatenate([artist.sticky_edges.y for ax in self._shared_y_axes.get_siblings(self) if hasattr(ax, 'lines') for artist in ax.get_children()]))\n    if self.get_xscale().lower() == 'log':\n        x_stickies = x_stickies[x_stickies > 0]\n    if self.get_yscale().lower() == 'log':\n        y_stickies = y_stickies[y_stickies > 0]\n\n    def handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound):\n        if not (scale and autoscaleon):\n            return\n        shared = shared_axes.get_siblings(self)\n        dl = [ax.dataLim for ax in shared]\n        finite_dl = [d for d in dl if np.isfinite(d).all()]\n        if len(finite_dl):\n            x_finite = [d for d in dl if np.isfinite(d.intervalx).all() and d not in finite_dl]\n            y_finite = [d for d in dl if np.isfinite(d.intervaly).all() and d not in finite_dl]\n            dl = finite_dl\n            dl.extend(x_finite)\n            dl.extend(y_finite)\n        bb = mtransforms.BboxBase.union(dl)\n        x0, x1 = getattr(bb, interval)\n        locator = axis.get_major_locator()\n        x0, x1 = locator.nonsingular(x0, x1)\n\n        def tol(x):\n            return 1e-05 * abs(x) + 1e-08\n        i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n        x0bound = stickies[i0] if i0 != -1 else None\n        i1 = stickies.searchsorted(x1 - tol(x1))\n        x1bound = stickies[i1] if i1 != len(stickies) else None\n        minpos = getattr(bb, minpos)\n        transform = axis.get_transform()\n        inverse_trans = transform.inverted()\n        x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n        x0t, x1t = transform.transform([x0, x1])\n        delta = (x1t - x0t) * margin\n        if not np.isfinite(delta):\n            delta = 0\n        x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n        if x0bound is not None:\n            x0 = max(x0, x0bound)\n        if x1bound is not None:\n            x1 = min(x1, x1bound)\n        if not self._tight:\n            x0, x1 = locator.view_limits(x0, x1)\n        set_bound(x0, x1)\n    handle_single_axis(scalex, self._autoscaleXon, self._shared_x_axes, 'intervalx', 'minposx', self.xaxis, self._xmargin, x_stickies, self.set_xbound)\n    handle_single_axis(scaley, self._autoscaleYon, self._shared_y_axes, 'intervaly', 'minposy', self.yaxis, self._ymargin, y_stickies, self.set_ybound)",
                            "def _get_axis_list(self):\n    return (self.xaxis, self.yaxis)",
                            "def _get_axis_map(self):\n    \"\"\"\n    Return a mapping of `Axis` \"names\" to `Axis` instances.\n\n    The `Axis` name is derived from the attribute under which the instance\n    is stored, so e.g. for polar axes, the theta-axis is still named \"x\"\n    and the r-axis is still named \"y\" (for back-compatibility).\n\n    In practice, this means that the entries are typically \"x\" and \"y\", and\n    additionally \"z\" for 3D axes.\n    \"\"\"\n    d = {}\n    axis_list = self._get_axis_list()\n    for k, v in vars(self).items():\n        if k.endswith('axis') and v in axis_list:\n            d[k[:-len('axis')]] = v\n    return d",
                            "def _update_title_position(self, renderer):\n    \"\"\"\n    Update the title position based on the bounding box enclosing\n    all the ticklabels and x-axis spine and xlabel...\n    \"\"\"\n    if self._autotitlepos is not None and (not self._autotitlepos):\n        _log.debug('title position was updated manually, not adjusting')\n        return\n    titles = (self.title, self._left_title, self._right_title)\n    for title in titles:\n        x, _ = title.get_position()\n        title.set_position((x, 1.0))\n        axs = self._twinned_axes.get_siblings(self)\n        for ax in self.child_axes:\n            if ax is not None:\n                locator = ax.get_axes_locator()\n                if locator:\n                    pos = locator(self, renderer)\n                    ax.apply_aspect(pos)\n                else:\n                    ax.apply_aspect()\n                axs = axs + [ax]\n        top = 0\n        for ax in axs:\n            if ax.xaxis.get_ticks_position() in ['top', 'unknown'] or ax.xaxis.get_label_position() == 'top':\n                bb = ax.xaxis.get_tightbbox(renderer)\n            else:\n                bb = ax.get_window_extent(renderer)\n            if bb is not None:\n                top = max(top, bb.ymax)\n        if title.get_window_extent(renderer).ymin < top:\n            _, y = self.transAxes.inverted().transform((0, top))\n            title.set_position((x, y))\n            if title.get_window_extent(renderer).ymin < top:\n                _, y = self.transAxes.inverted().transform((0.0, 2 * top - title.get_window_extent(renderer).ymin))\n                title.set_position((x, y))\n    ymax = max((title.get_position()[1] for title in titles))\n    for title in titles:\n        x, _ = title.get_position()\n        title.set_position((x, ymax))",
                            "@martist.allow_rasterization\n@cbook._delete_parameter('3.3', 'inframe', alternative='Axes.redraw_in_frame()')\ndef draw(self, renderer=None, inframe=False):\n    if renderer is None:\n        cbook.warn_deprecated('3.3', message=\"Support for not passing the 'renderer' parameter to Axes.draw() is deprecated since %(since)s and will be removed %(removal)s.  Use axes.draw_artist(axes) instead.\")\n        renderer = self.figure._cachedRenderer\n    if renderer is None:\n        raise RuntimeError('No renderer defined')\n    if not self.get_visible():\n        return\n    self._unstale_viewLim()\n    renderer.open_group('axes', gid=self.get_gid())\n    self._stale = True\n    locator = self.get_axes_locator()\n    if locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n    artists = self.get_children()\n    artists.remove(self.patch)\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n    self._update_title_position(renderer)\n    if not self.axison or inframe:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n    if inframe:\n        artists.remove(self.title)\n        artists.remove(self._left_title)\n        artists.remove(self._right_title)\n    if not self.figure.canvas.is_saving():\n        artists = [a for a in artists if not a.get_animated() or a in self.images]\n    artists = sorted(artists, key=attrgetter('zorder'))\n    rasterization_zorder = self._rasterization_zorder\n    if rasterization_zorder is not None and artists and (artists[0].zorder < rasterization_zorder):\n        renderer.start_rasterizing()\n        artists_rasterized = [a for a in artists if a.zorder < rasterization_zorder]\n        artists = [a for a in artists if a.zorder >= rasterization_zorder]\n    else:\n        artists_rasterized = []\n    if self.axison and self._frameon:\n        self.patch.draw(renderer)\n    if artists_rasterized:\n        for a in artists_rasterized:\n            a.draw(renderer)\n        renderer.stop_rasterizing()\n    mimage._draw_list_compositing_images(renderer, self, artists)\n    renderer.close_group('axes')\n    self.stale = False",
                            "def draw_artist(self, a):\n    \"\"\"\n    Efficiently redraw a single artist.\n\n    This method can only be used after an initial draw which caches the\n    renderer.\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError('draw_artist can only be used after an initial draw which caches the renderer')\n    a.draw(self.figure._cachedRenderer)",
                            "def redraw_in_frame(self):\n    \"\"\"\n    Efficiently redraw Axes data, but not axis ticks, labels, etc.\n\n    This method can only be used after an initial draw which caches the\n    renderer.\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError('redraw_in_frame can only be used after an initial draw which caches the renderer')\n    with ExitStack() as stack:\n        for artist in [*self._get_axis_list(), self.title, self._left_title, self._right_title]:\n            stack.push(artist.set_visible, artist.get_visible())\n            artist.set_visible(False)\n        self.draw(self.figure._cachedRenderer)",
                            "def get_renderer_cache(self):\n    return self.figure._cachedRenderer",
                            "def get_frame_on(self):\n    \"\"\"Get whether the axes rectangle patch is drawn.\"\"\"\n    return self._frameon",
                            "def set_frame_on(self, b):\n    \"\"\"\n    Set whether the axes rectangle patch is drawn.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._frameon = b\n    self.stale = True",
                            "def get_axisbelow(self):\n    \"\"\"\n    Get whether axis ticks and gridlines are above or below most artists.\n\n    Returns\n    -------\n    bool or 'line'\n\n    See Also\n    --------\n    set_axisbelow\n    \"\"\"\n    return self._axisbelow",
                            "def set_axisbelow(self, b):\n    \"\"\"\n    Set whether axis ticks and gridlines are above or below most artists.\n\n    This controls the zorder of the ticks and gridlines. For more\n    information on the zorder see :doc:`/gallery/misc/zorder_demo`.\n\n    Parameters\n    ----------\n    b : bool or 'line'\n        Possible values:\n\n        - *True* (zorder = 0.5): Ticks and gridlines are below all Artists.\n        - 'line' (zorder = 1.5): Ticks and gridlines are above patches\n          (e.g. rectangles, with default zorder = 1) but still below lines\n          and markers (with their default zorder = 2).\n        - *False* (zorder = 2.5): Ticks and gridlines are above patches\n          and lines / markers.\n\n    See Also\n    --------\n    get_axisbelow\n    \"\"\"\n    self._axisbelow = axisbelow = validate_axisbelow(b)\n    if axisbelow is True:\n        zorder = 0.5\n    elif axisbelow is False:\n        zorder = 2.5\n    elif axisbelow == 'line':\n        zorder = 1.5\n    else:\n        raise ValueError('Unexpected axisbelow value')\n    for axis in self._get_axis_list():\n        axis.set_zorder(zorder)\n    self.stale = True",
                            "@docstring.dedent_interpd\ndef grid(self, b=None, which='major', axis='both', **kwargs):\n    \"\"\"\n    Configure the grid lines.\n\n    Parameters\n    ----------\n    b : bool or None, optional\n        Whether to show the grid lines. If any *kwargs* are supplied,\n        it is assumed you want the grid on and *b* will be set to True.\n\n        If *b* is *None* and there are no *kwargs*, this toggles the\n        visibility of the lines.\n\n    which : {'major', 'minor', 'both'}, optional\n        The grid lines to apply the changes on.\n\n    axis : {'both', 'x', 'y'}, optional\n        The axis to apply the changes on.\n\n    **kwargs : `.Line2D` properties\n        Define the line properties of the grid, e.g.::\n\n            grid(color='r', linestyle='-', linewidth=2)\n\n        Valid keyword arguments are:\n\n        %(_Line2D_docstr)s\n\n    Notes\n    -----\n    The axis is drawn as a unit, so the effective zorder for drawing the\n    grid is determined by the zorder of each axis, not by the zorder of the\n    `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,\n    use `.set_axisbelow` or, for more control, call the\n    `~.Artist.set_zorder` method of each axis.\n    \"\"\"\n    if len(kwargs):\n        b = True\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        self.xaxis.grid(b, which=which, **kwargs)\n    if axis in ['y', 'both']:\n        self.yaxis.grid(b, which=which, **kwargs)",
                            "def ticklabel_format(self, *, axis='both', style='', scilimits=None, useOffset=None, useLocale=None, useMathText=None):\n    \"\"\"\n    Configure the `.ScalarFormatter` used by default for linear axes.\n\n    If a parameter is not set, the corresponding property of the formatter\n    is left unchanged.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, default: 'both'\n        The axes to configure.  Only major ticks are affected.\n\n    style : {'sci', 'scientific', 'plain'}\n        Whether to use scientific notation.\n        The formatter default is to use scientific notation.\n\n    scilimits : pair of ints (m, n)\n        Scientific notation is used only for numbers outside the range\n        10\\\\ :sup:`m` to 10\\\\ :sup:`n` (and only if the formatter is\n        configured to use scientific notation at all).  Use (0, 0) to\n        include all numbers.  Use (m, m) where m != 0 to fix the order of\n        magnitude to 10\\\\ :sup:`m`.\n        The formatter default is :rc:`axes.formatter.limits`.\n\n    useOffset : bool or float\n        If True, the offset is calculated as needed.\n        If False, no offset is used.\n        If a numeric value, it sets the offset.\n        The formatter default is :rc:`axes.formatter.useoffset`.\n\n    useLocale : bool\n        Whether to format the number using the current locale or using the\n        C (English) locale.  This affects e.g. the decimal separator.  The\n        formatter default is :rc:`axes.formatter.use_locale`.\n\n    useMathText : bool\n        Render the offset and scientific notation in mathtext.\n        The formatter default is :rc:`axes.formatter.use_mathtext`.\n\n    Raises\n    ------\n    AttributeError\n        If the current formatter is not a `.ScalarFormatter`.\n    \"\"\"\n    style = style.lower()\n    axis = axis.lower()\n    if scilimits is not None:\n        try:\n            m, n = scilimits\n            m + n + 1\n        except (ValueError, TypeError) as err:\n            raise ValueError('scilimits must be a sequence of 2 integers') from err\n    STYLES = {'sci': True, 'scientific': True, 'plain': False, '': None}\n    is_sci_style = cbook._check_getitem(STYLES, style=style)\n    axis_map = {**{k: [v] for k, v in self._get_axis_map().items()}, 'both': self._get_axis_list()}\n    axises = cbook._check_getitem(axis_map, axis=axis)\n    try:\n        for axis in axises:\n            if is_sci_style is not None:\n                axis.major.formatter.set_scientific(is_sci_style)\n            if scilimits is not None:\n                axis.major.formatter.set_powerlimits(scilimits)\n            if useOffset is not None:\n                axis.major.formatter.set_useOffset(useOffset)\n            if useLocale is not None:\n                axis.major.formatter.set_useLocale(useLocale)\n            if useMathText is not None:\n                axis.major.formatter.set_useMathText(useMathText)\n    except AttributeError as err:\n        raise AttributeError('This method only works with the ScalarFormatter') from err",
                            "def locator_params(self, axis='both', tight=None, **kwargs):\n    \"\"\"\n    Control behavior of major tick locators.\n\n    Because the locator is involved in autoscaling, `~.Axes.autoscale_view`\n    is called automatically after the parameters are changed.\n\n    Parameters\n    ----------\n    axis : {'both', 'x', 'y'}, default: 'both'\n        The axis on which to operate.\n\n    tight : bool or None, optional\n        Parameter passed to `~.Axes.autoscale_view`.\n        Default is None, for no change.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Remaining keyword arguments are passed to directly to the\n        ``set_params()`` method of the locator. Supported keywords depend\n        on the type of the locator. See for example\n        `~.ticker.MaxNLocator.set_params` for the `.ticker.MaxNLocator`\n        used by default for linear axes.\n\n    Examples\n    --------\n    When plotting small subplots, one might want to reduce the maximum\n    number of ticks and use tight bounds, for example::\n\n        ax.locator_params(tight=True, nbins=4)\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    update_x = axis in ['x', 'both']\n    update_y = axis in ['y', 'both']\n    if update_x:\n        self.xaxis.get_major_locator().set_params(**kwargs)\n    if update_y:\n        self.yaxis.get_major_locator().set_params(**kwargs)\n    self._request_autoscale_view(tight=tight, scalex=update_x, scaley=update_y)\n    self.stale = True",
                            "def tick_params(self, axis='both', **kwargs):\n    \"\"\"\n    Change the appearance of ticks, tick labels, and gridlines.\n\n    Tick properties that are not explicitly set using the keyword\n    arguments remain unchanged unless *reset* is True.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, default: 'both'\n        The axis to which the parameters are applied.\n    which : {'major', 'minor', 'both'}, default: 'major'\n        The group of ticks to which the parameters are applied.\n    reset : bool, default: False\n        Whether to reset the ticks to defaults before updating them.\n\n    Other Parameters\n    ----------------\n    direction : {'in', 'out', 'inout'}\n        Puts ticks inside the axes, outside the axes, or both.\n    length : float\n        Tick length in points.\n    width : float\n        Tick width in points.\n    color : color\n        Tick color.\n    pad : float\n        Distance in points between tick and label.\n    labelsize : float or str\n        Tick label font size in points or as a string (e.g., 'large').\n    labelcolor : color\n        Tick label color.\n    colors : color\n        Tick color and label color.\n    zorder : float\n        Tick and label zorder.\n    bottom, top, left, right : bool\n        Whether to draw the respective ticks.\n    labelbottom, labeltop, labelleft, labelright : bool\n        Whether to draw the respective tick labels.\n    labelrotation : float\n        Tick label rotation\n    grid_color : color\n        Gridline color.\n    grid_alpha : float\n        Transparency of gridlines: 0 (transparent) to 1 (opaque).\n    grid_linewidth : float\n        Width of gridlines in points.\n    grid_linestyle : str\n        Any valid `.Line2D` line style spec.\n\n    Examples\n    --------\n    ::\n\n        ax.tick_params(direction='out', length=6, width=2, colors='r',\n                       grid_color='r', grid_alpha=0.5)\n\n    This will make all major ticks be red, pointing out of the box,\n    and with dimensions 6 points by 2 points.  Tick labels will\n    also be red.  Gridlines will be red and translucent.\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        xkw = dict(kwargs)\n        xkw.pop('left', None)\n        xkw.pop('right', None)\n        xkw.pop('labelleft', None)\n        xkw.pop('labelright', None)\n        self.xaxis.set_tick_params(**xkw)\n    if axis in ['y', 'both']:\n        ykw = dict(kwargs)\n        ykw.pop('top', None)\n        ykw.pop('bottom', None)\n        ykw.pop('labeltop', None)\n        ykw.pop('labelbottom', None)\n        self.yaxis.set_tick_params(**ykw)",
                            "def set_axis_off(self):\n    \"\"\"\n    Turn the x- and y-axis off.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = False\n    self.stale = True",
                            "def set_axis_on(self):\n    \"\"\"\n    Turn the x- and y-axis on.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = True\n    self.stale = True",
                            "def invert_xaxis(self):\n    \"\"\"\n    Invert the x-axis.\n\n    See Also\n    --------\n    xaxis_inverted\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    self.xaxis.set_inverted(not self.xaxis.get_inverted())",
                            "def get_xbound(self):\n    \"\"\"\n    Return the lower and upper x-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    left, right = self.get_xlim()\n    if left < right:\n        return (left, right)\n    else:\n        return (right, left)",
                            "def set_xbound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the x-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (`.get_autoscalex_on()`).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n    old_lower, old_upper = self.get_xbound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n    self.set_xlim(sorted((lower, upper), reverse=bool(self.xaxis_inverted())), auto=None)",
                            "def get_xlim(self):\n    \"\"\"\n    Return the x-axis view limits.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The current x-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The x-axis may be inverted, in which case the *left* value will\n    be greater than the *right* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervalx)",
                            "def _validate_converted_limits(self, limit, convert):\n    \"\"\"\n    Raise ValueError if converted limits are non-finite.\n\n    Note that this function also accepts None as a limit argument.\n\n    Returns\n    -------\n    The limit value after call to convert(), or None if limit is None.\n    \"\"\"\n    if limit is not None:\n        converted_limit = convert(limit)\n        if isinstance(converted_limit, Real) and (not np.isfinite(converted_limit)):\n            raise ValueError('Axis limits cannot be NaN or Inf')\n        return converted_limit",
                            "def set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    Parameters\n    ----------\n    left : float, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may also be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    right : float, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off, None leaves unchanged.\n\n    xmin, xmax : float, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and np.iterable(left):\n        left, right = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n    if left is None or right is None:\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n    if self.get_xscale() == 'log' and (left <= 0 or right <= 0):\n        old_left, old_right = self.get_xlim()\n        if left <= 0:\n            cbook._warn_external('Attempted to set non-positive left xlim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external('Attempted to set non-positive right xlim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(f'Attempting to set identical left == right == {left} results in singular transformations; automatically expanding.')\n    reverse = left > right\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n    left, right = sorted([left, right], reverse=bool(reverse))\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return (left, right)",
                            "def set_xscale(self, value, **kwargs):\n    \"\"\"\n    Set the x-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    old_default_lims = self.xaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    g = self.get_shared_x_axes()\n    for ax in g.get_siblings(self):\n        ax.xaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    new_default_lims = self.xaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    if old_default_lims != new_default_lims:\n        self.autoscale_view(scaley=False)",
                            "def invert_yaxis(self):\n    \"\"\"\n    Invert the y-axis.\n\n    See Also\n    --------\n    yaxis_inverted\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    self.yaxis.set_inverted(not self.yaxis.get_inverted())",
                            "def get_ybound(self):\n    \"\"\"\n    Return the lower and upper y-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    bottom, top = self.get_ylim()\n    if bottom < top:\n        return (bottom, top)\n    else:\n        return (top, bottom)",
                            "def set_ybound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the y-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (`.get_autoscaley_on()`).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n    old_lower, old_upper = self.get_ybound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n    self.set_ylim(sorted((lower, upper), reverse=bool(self.yaxis_inverted())), auto=None)",
                            "def get_ylim(self):\n    \"\"\"\n    Return the y-axis view limits.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The current y-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The y-axis may be inverted, in which case the *bottom* value\n    will be greater than the *top* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervaly)",
                            "def set_ylim(self, bottom=None, top=None, emit=True, auto=False, *, ymin=None, ymax=None):\n    \"\"\"\n    Set the y-axis view limits.\n\n    Parameters\n    ----------\n    bottom : float, optional\n        The bottom ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The bottom and top ylims may also be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    top : float, optional\n        The top ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the y-axis. *True* turns on,\n        *False* turns off, *None* leaves unchanged.\n\n    ymin, ymax : float, optional\n        They are equivalent to bottom and top respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The *bottom* value may be greater than the *top* value, in which\n    case the y-axis values will decrease from *bottom* to *top*.\n\n    Examples\n    --------\n    >>> set_ylim(bottom, top)\n    >>> set_ylim((bottom, top))\n    >>> bottom, top = set_ylim(bottom, top)\n\n    One limit may be left unchanged.\n\n    >>> set_ylim(top=top_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the y-axis. For example, suppose ``y`` represents depth of the\n    ocean in m. The y-axis limits might be set like the following\n    so 5000 m depth is at the bottom of the plot and the surface,\n    0 m, is at the top.\n\n    >>> set_ylim(5000, 0)\n    \"\"\"\n    if top is None and np.iterable(bottom):\n        bottom, top = bottom\n    if ymin is not None:\n        if bottom is not None:\n            raise TypeError('Cannot pass both `ymin` and `bottom`')\n        bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise TypeError('Cannot pass both `ymax` and `top`')\n        top = ymax\n    self._process_unit_info(ydata=(bottom, top))\n    bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n    top = self._validate_converted_limits(top, self.convert_yunits)\n    if bottom is None or top is None:\n        old_bottom, old_top = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):\n        old_bottom, old_top = self.get_ylim()\n        if bottom <= 0:\n            cbook._warn_external('Attempted to set non-positive bottom ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            bottom = old_bottom\n        if top <= 0:\n            cbook._warn_external('Attempted to set non-positive top ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n            top = old_top\n    if bottom == top:\n        cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')\n    reverse = bottom > top\n    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n    bottom, top = sorted([bottom, top], reverse=bool(reverse))\n    self._viewLim.intervaly = (bottom, top)\n    if auto is not None:\n        self._autoscaleYon = bool(auto)\n    if emit:\n        self.callbacks.process('ylim_changed', self)\n        for other in self._shared_y_axes.get_siblings(self):\n            if other is not self:\n                other.set_ylim(self.viewLim.intervaly, emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return (bottom, top)",
                            "def set_yscale(self, value, **kwargs):\n    \"\"\"\n    Set the y-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    old_default_lims = self.yaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    g = self.get_shared_y_axes()\n    for ax in g.get_siblings(self):\n        ax.yaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    new_default_lims = self.yaxis.get_major_locator().nonsingular(-np.inf, np.inf)\n    if old_default_lims != new_default_lims:\n        self.autoscale_view(scalex=False)",
                            "def format_xdata(self, x):\n    \"\"\"\n    Return *x* formatted as an x-value.\n\n    This function will use the `.fmt_xdata` attribute if it is not None,\n    else will fall back on the xaxis major formatter.\n    \"\"\"\n    return (self.fmt_xdata if self.fmt_xdata is not None else self.xaxis.get_major_formatter().format_data_short)(x)",
                            "def format_ydata(self, y):\n    \"\"\"\n    Return *y* formatted as an y-value.\n\n    This function will use the `.fmt_ydata` attribute if it is not None,\n    else will fall back on the yaxis major formatter.\n    \"\"\"\n    return (self.fmt_ydata if self.fmt_ydata is not None else self.yaxis.get_major_formatter().format_data_short)(y)",
                            "def format_coord(self, x, y):\n    \"\"\"Return a format string formatting the *x*, *y* coordinates.\"\"\"\n    if x is None:\n        xs = '???'\n    else:\n        xs = self.format_xdata(x)\n    if y is None:\n        ys = '???'\n    else:\n        ys = self.format_ydata(y)\n    return 'x=%s y=%s' % (xs, ys)",
                            "def minorticks_on(self):\n    \"\"\"\n    Display minor ticks on the axes.\n\n    Displaying minor ticks may reduce performance; you may turn them off\n    using `minorticks_off()` if drawing speed is a problem.\n    \"\"\"\n    for ax in (self.xaxis, self.yaxis):\n        scale = ax.get_scale()\n        if scale == 'log':\n            s = ax._scale\n            ax.set_minor_locator(mticker.LogLocator(s.base, s.subs))\n        elif scale == 'symlog':\n            s = ax._scale\n            ax.set_minor_locator(mticker.SymmetricalLogLocator(s._transform, s.subs))\n        else:\n            ax.set_minor_locator(mticker.AutoMinorLocator())",
                            "def minorticks_off(self):\n    \"\"\"Remove minor ticks from the axes.\"\"\"\n    self.xaxis.set_minor_locator(mticker.NullLocator())\n    self.yaxis.set_minor_locator(mticker.NullLocator())",
                            "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n    \"\"\"\n    return True",
                            "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports any pan/zoom button functionality.\n    \"\"\"\n    return True",
                            "def get_navigate(self):\n    \"\"\"\n    Get whether the axes responds to navigation commands\n    \"\"\"\n    return self._navigate",
                            "def set_navigate(self, b):\n    \"\"\"\n    Set whether the axes responds to navigation toolbar commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._navigate = b",
                            "def get_navigate_mode(self):\n    \"\"\"\n    Get the navigation toolbar button status: 'PAN', 'ZOOM', or None\n    \"\"\"\n    return self._navigate_mode",
                            "def set_navigate_mode(self, b):\n    \"\"\"\n    Set the navigation toolbar button status;\n\n    .. warning::\n        this is not a user-API function.\n\n    \"\"\"\n    self._navigate_mode = b",
                            "def _get_view(self):\n    \"\"\"\n    Save information required to reproduce the current view.\n\n    Called before a view is changed, such as during a pan or zoom\n    initiated by the user. You may return any information you deem\n    necessary to describe the view.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation saves the view limits. You *must* implement\n        :meth:`_set_view` if you implement this method.\n    \"\"\"\n    xmin, xmax = self.get_xlim()\n    ymin, ymax = self.get_ylim()\n    return (xmin, xmax, ymin, ymax)",
                            "def _set_view(self, view):\n    \"\"\"\n    Apply a previously saved view.\n\n    Called when restoring a view, such as with the navigation buttons.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation restores the view limits. You *must*\n        implement :meth:`_get_view` if you implement this method.\n    \"\"\"\n    xmin, xmax, ymin, ymax = view\n    self.set_xlim((xmin, xmax))\n    self.set_ylim((ymin, ymax))",
                            "def _set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False):\n    \"\"\"\n    Update view from a selection bbox.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation sets the view limits to the bbox directly.\n\n    Parameters\n    ----------\n    bbox : 4-tuple or 3 tuple\n        * If bbox is a 4 tuple, it is the selected bounding box limits,\n          in *display* coordinates.\n        * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where\n          (xp, yp) is the center of zooming and scl the scale factor to\n          zoom by.\n\n    direction : str\n        The direction to apply the bounding box.\n            * `'in'` - The bounding box describes the view directly, i.e.,\n                       it zooms in.\n            * `'out'` - The bounding box describes the size to make the\n                        existing view, i.e., it zooms out.\n\n    mode : str or None\n        The selection mode, whether to apply the bounding box in only the\n        `'x'` direction, `'y'` direction or both (`None`).\n\n    twinx : bool\n        Whether this axis is twinned in the *x*-direction.\n\n    twiny : bool\n        Whether this axis is twinned in the *y*-direction.\n    \"\"\"\n    if len(bbox) == 3:\n        Xmin, Xmax = self.get_xlim()\n        Ymin, Ymax = self.get_ylim()\n        xp, yp, scl = bbox\n        if scl == 0:\n            scl = 1.0\n        if scl > 1:\n            direction = 'in'\n        else:\n            direction = 'out'\n            scl = 1 / scl\n        tranD2C = self.transData.transform\n        xmin, ymin = tranD2C((Xmin, Ymin))\n        xmax, ymax = tranD2C((Xmax, Ymax))\n        xwidth = xmax - xmin\n        ywidth = ymax - ymin\n        xcen = (xmax + xmin) * 0.5\n        ycen = (ymax + ymin) * 0.5\n        xzc = (xp * (scl - 1) + xcen) / scl\n        yzc = (yp * (scl - 1) + ycen) / scl\n        bbox = [xzc - xwidth / 2.0 / scl, yzc - ywidth / 2.0 / scl, xzc + xwidth / 2.0 / scl, yzc + ywidth / 2.0 / scl]\n    elif len(bbox) != 4:\n        cbook._warn_external('Warning in _set_view_from_bbox: bounding box is not a tuple of length 3 or 4. Ignoring the view change.')\n        return\n    xmin0, xmax0 = self.get_xbound()\n    ymin0, ymax0 = self.get_ybound()\n    startx, starty, stopx, stopy = bbox\n    (startx, starty), (stopx, stopy) = self.transData.inverted().transform([(startx, starty), (stopx, stopy)])\n    xmin, xmax = np.clip(sorted([startx, stopx]), xmin0, xmax0)\n    ymin, ymax = np.clip(sorted([starty, stopy]), ymin0, ymax0)\n    if twinx or mode == 'y':\n        xmin, xmax = (xmin0, xmax0)\n    if twiny or mode == 'x':\n        ymin, ymax = (ymin0, ymax0)\n    if direction == 'in':\n        new_xbound = (xmin, xmax)\n        new_ybound = (ymin, ymax)\n    elif direction == 'out':\n        x_trf = self.xaxis.get_transform()\n        sxmin0, sxmax0, sxmin, sxmax = x_trf.transform([xmin0, xmax0, xmin, xmax])\n        factor = (sxmax0 - sxmin0) / (sxmax - sxmin)\n        sxmin1 = sxmin0 - factor * (sxmin - sxmin0)\n        sxmax1 = sxmax0 + factor * (sxmax0 - sxmax)\n        new_xbound = x_trf.inverted().transform([sxmin1, sxmax1])\n        y_trf = self.yaxis.get_transform()\n        symin0, symax0, symin, symax = y_trf.transform([ymin0, ymax0, ymin, ymax])\n        factor = (symax0 - symin0) / (symax - symin)\n        symin1 = symin0 - factor * (symin - symin0)\n        symax1 = symax0 + factor * (symax0 - symax)\n        new_ybound = y_trf.inverted().transform([symin1, symax1])\n    if not twinx and mode != 'y':\n        self.set_xbound(new_xbound)\n    if not twiny and mode != 'x':\n        self.set_ybound(new_ybound)",
                            "def start_pan(self, x, y, button):\n    \"\"\"\n    Called when a pan operation has started.\n\n    Parameters\n    ----------\n    x, y : float\n        The mouse coordinates in display coords.\n    button : `.MouseButton`\n        The pressed mouse button.\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    self._pan_start = types.SimpleNamespace(lim=self.viewLim.frozen(), trans=self.transData.frozen(), trans_inverse=self.transData.inverted().frozen(), bbox=self.bbox.frozen(), x=x, y=y)",
                            "def end_pan(self):\n    \"\"\"\n    Called when a pan operation completes (when the mouse button is up.)\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    del self._pan_start",
                            "def drag_pan(self, button, key, x, y):\n    \"\"\"\n    Called when the mouse moves during a pan operation.\n\n    Parameters\n    ----------\n    button : `.MouseButton`\n        The pressed mouse button.\n    key : str or None\n        The pressed key, if any.\n    x, y : float\n        The mouse coordinates in display coords.\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n\n    def format_deltas(key, dx, dy):\n        if key == 'control':\n            if abs(dx) > abs(dy):\n                dy = dx\n            else:\n                dx = dy\n        elif key == 'x':\n            dy = 0\n        elif key == 'y':\n            dx = 0\n        elif key == 'shift':\n            if 2 * abs(dx) < abs(dy):\n                dx = 0\n            elif 2 * abs(dy) < abs(dx):\n                dy = 0\n            elif abs(dx) > abs(dy):\n                dy = dy / abs(dy) * abs(dx)\n            else:\n                dx = dx / abs(dx) * abs(dy)\n        return (dx, dy)\n    p = self._pan_start\n    dx = x - p.x\n    dy = y - p.y\n    if dx == dy == 0:\n        return\n    if button == 1:\n        dx, dy = format_deltas(key, dx, dy)\n        result = p.bbox.translated(-dx, -dy).transformed(p.trans_inverse)\n    elif button == 3:\n        try:\n            dx = -dx / self.bbox.width\n            dy = -dy / self.bbox.height\n            dx, dy = format_deltas(key, dx, dy)\n            if self.get_aspect() != 'auto':\n                dx = dy = 0.5 * (dx + dy)\n            alpha = np.power(10.0, (dx, dy))\n            start = np.array([p.x, p.y])\n            oldpoints = p.lim.transformed(p.trans)\n            newpoints = start + alpha * (oldpoints - start)\n            result = mtransforms.Bbox(newpoints).transformed(p.trans_inverse)\n        except OverflowError:\n            cbook._warn_external('Overflow while panning')\n            return\n    else:\n        return\n    valid = np.isfinite(result.transformed(p.trans))\n    points = result.get_points().astype(object)\n    points[~valid] = None\n    self.set_xlim(points[:, 0])\n    self.set_ylim(points[:, 1])",
                            "def get_children(self):\n    return [*self.collections, *self.patches, *self.lines, *self.texts, *self.artists, *self.spines.values(), *self._get_axis_list(), self.title, self._left_title, self._right_title, *self.tables, *self.images, *self.child_axes, *([self.legend_] if self.legend_ is not None else []), self.patch]",
                            "def contains(self, mouseevent):\n    inside, info = self._default_contains(mouseevent)\n    if inside is not None:\n        return (inside, info)\n    return self.patch.contains(mouseevent)",
                            "def contains_point(self, point):\n    \"\"\"\n    Return whether *point* (pair of pixel coordinates) is inside the axes\n    patch.\n    \"\"\"\n    return self.patch.contains_point(point, radius=1.0)",
                            "def get_default_bbox_extra_artists(self):\n    \"\"\"\n    Return a default list of artists that are used for the bounding box\n    calculation.\n\n    Artists are excluded either by not being visible or\n    ``artist.set_in_layout(False)``.\n    \"\"\"\n    artists = self.get_children()\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n    if not self.axison:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n    artists.remove(self.title)\n    artists.remove(self._left_title)\n    artists.remove(self._right_title)\n    return [artist for artist in artists if artist.get_visible() and artist.get_in_layout()]",
                            "def get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None, *, for_layout_only=False):\n    \"\"\"\n    Return the tight bounding box of the axes, including axis and their\n    decorators (xlabel, title, etc).\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` subclass\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of the axes are\n        included in the tight bounding box.\n\n    call_axes_locator : bool, default: True\n        If *call_axes_locator* is ``False``, it does not call the\n        ``_axes_locator`` attribute, which is necessary to get the correct\n        bounding box. ``call_axes_locator=False`` can be used if the\n        caller is only interested in the relative size of the tightbbox\n        compared to the axes bbox.\n\n    for_layout_only : default: False\n        The bounding box will *not* include the x-extent of the title and\n        the xlabel, or the y-extent of the ylabel.\n\n    Returns\n    -------\n    `.BboxBase`\n        Bounding box in figure pixel coordinates.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_window_extent\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.Spine.get_window_extent\n    \"\"\"\n    bb = []\n    if not self.get_visible():\n        return None\n    locator = self.get_axes_locator()\n    if locator and call_axes_locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n    if self.axison:\n        if self.xaxis.get_visible():\n            try:\n                bb_xaxis = self.xaxis.get_tightbbox(renderer, for_layout_only=for_layout_only)\n            except TypeError:\n                bb_xaxis = self.xaxis.get_tightbbox(renderer)\n            if bb_xaxis:\n                bb.append(bb_xaxis)\n        if self.yaxis.get_visible():\n            try:\n                bb_yaxis = self.yaxis.get_tightbbox(renderer, for_layout_only=for_layout_only)\n            except TypeError:\n                bb_yaxis = self.yaxis.get_tightbbox(renderer)\n            if bb_yaxis:\n                bb.append(bb_yaxis)\n    self._update_title_position(renderer)\n    axbbox = self.get_window_extent(renderer)\n    bb.append(axbbox)\n    for title in [self.title, self._left_title, self._right_title]:\n        if title.get_visible():\n            bt = title.get_window_extent(renderer)\n            if for_layout_only and bt.width > 0:\n                bt.x0 = (bt.x0 + bt.x1) / 2 - 0.5\n                bt.x1 = bt.x0 + 1.0\n            bb.append(bt)\n    bbox_artists = bbox_extra_artists\n    if bbox_artists is None:\n        bbox_artists = self.get_default_bbox_extra_artists()\n    for a in bbox_artists:\n        clip_extent = a._get_clipping_extent_bbox()\n        if clip_extent is not None:\n            clip_extent = mtransforms.Bbox.intersection(clip_extent, axbbox)\n            if np.all(clip_extent.extents == axbbox.extents):\n                continue\n        bbox = a.get_tightbbox(renderer)\n        if bbox is not None and 0 < bbox.width < np.inf and (0 < bbox.height < np.inf):\n            bb.append(bbox)\n    return mtransforms.Bbox.union([b for b in bb if b.width != 0 or b.height != 0])",
                            "def _make_twin_axes(self, *args, **kwargs):\n    \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n    if 'sharex' in kwargs and 'sharey' in kwargs:\n        raise ValueError('Twinned Axes may share only one axis')\n    ax2 = self.figure.add_axes(self.get_position(True), *args, **kwargs)\n    self.set_adjustable('datalim')\n    ax2.set_adjustable('datalim')\n    self._twinned_axes.join(self, ax2)\n    return ax2",
                            "def twinx(self):\n    \"\"\"\n    Create a twin Axes sharing the xaxis.\n\n    Create a new Axes with an invisible x-axis and an independent\n    y-axis positioned opposite to the original one (i.e. at right). The\n    x-axis autoscale setting will be inherited from the original\n    Axes.  To ensure that the tick marks of both y-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twinx, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharex=self)\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    ax2.yaxis.set_offset_position('right')\n    ax2.set_autoscalex_on(self.get_autoscalex_on())\n    self.yaxis.tick_left()\n    ax2.xaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                            "def twiny(self):\n    \"\"\"\n    Create a twin Axes sharing the yaxis.\n\n    Create a new Axes with an invisible y-axis and an independent\n    x-axis positioned opposite to the original one (i.e. at top). The\n    y-axis autoscale setting will be inherited from the original Axes.\n    To ensure that the tick marks of both x-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twiny, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharey=self)\n    ax2.xaxis.tick_top()\n    ax2.xaxis.set_label_position('top')\n    ax2.set_autoscaley_on(self.get_autoscaley_on())\n    self.xaxis.tick_bottom()\n    ax2.yaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                            "def get_shared_x_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for x axes.\"\"\"\n    return self._shared_x_axes",
                            "def get_shared_y_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n    return self._shared_y_axes",
                            "def _process_single_axis(data, axis, unit_name, kwargs):\n    if axis is None:\n        return kwargs\n    if data is not None:\n        if not axis.have_units():\n            axis.update_units(data)\n    if kwargs is not None:\n        units = kwargs.pop(unit_name, axis.units)\n        if self.name == 'polar':\n            polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n            units = kwargs.pop(polar_units[unit_name], units)\n        if units != axis.units:\n            axis.set_units(units)\n            if data is not None:\n                axis.update_units(data)\n    return kwargs",
                            "def handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound):\n    if not (scale and autoscaleon):\n        return\n    shared = shared_axes.get_siblings(self)\n    dl = [ax.dataLim for ax in shared]\n    finite_dl = [d for d in dl if np.isfinite(d).all()]\n    if len(finite_dl):\n        x_finite = [d for d in dl if np.isfinite(d.intervalx).all() and d not in finite_dl]\n        y_finite = [d for d in dl if np.isfinite(d.intervaly).all() and d not in finite_dl]\n        dl = finite_dl\n        dl.extend(x_finite)\n        dl.extend(y_finite)\n    bb = mtransforms.BboxBase.union(dl)\n    x0, x1 = getattr(bb, interval)\n    locator = axis.get_major_locator()\n    x0, x1 = locator.nonsingular(x0, x1)\n\n    def tol(x):\n        return 1e-05 * abs(x) + 1e-08\n    i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n    x0bound = stickies[i0] if i0 != -1 else None\n    i1 = stickies.searchsorted(x1 - tol(x1))\n    x1bound = stickies[i1] if i1 != len(stickies) else None\n    minpos = getattr(bb, minpos)\n    transform = axis.get_transform()\n    inverse_trans = transform.inverted()\n    x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n    x0t, x1t = transform.transform([x0, x1])\n    delta = (x1t - x0t) * margin\n    if not np.isfinite(delta):\n        delta = 0\n    x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n    if x0bound is not None:\n        x0 = max(x0, x0bound)\n    if x1bound is not None:\n        x1 = min(x1, x1bound)\n    if not self._tight:\n        x0, x1 = locator.view_limits(x0, x1)\n    set_bound(x0, x1)",
                            "def format_deltas(key, dx, dy):\n    if key == 'control':\n        if abs(dx) > abs(dy):\n            dy = dx\n        else:\n            dx = dy\n    elif key == 'x':\n        dy = 0\n    elif key == 'y':\n        dx = 0\n    elif key == 'shift':\n        if 2 * abs(dx) < abs(dy):\n            dx = 0\n        elif 2 * abs(dy) < abs(dx):\n            dy = 0\n        elif abs(dx) > abs(dy):\n            dy = dy / abs(dy) * abs(dx)\n        else:\n            dx = dx / abs(dx) * abs(dy)\n    return (dx, dy)",
                            "def tol(x):\n    return 1e-05 * abs(x) + 1e-08"
                        ],
                        "constructor_variables": [
                            "_frameon",
                            "_rasterization_zorder",
                            "fmt_xdata",
                            "spines",
                            "_stale_viewlim_y",
                            "_layoutbox",
                            "_stale_viewlim_x",
                            "axes",
                            "_sharex",
                            "facecolor",
                            "_facecolor",
                            "_originalPosition",
                            "_poslayoutbox",
                            "_xcid",
                            "_sharey",
                            "_position",
                            "_anchor",
                            "fmt_ydata",
                            "_adjustable",
                            "_aspect",
                            "_ycid",
                            "rcParams",
                            "_axes_locator"
                        ],
                        "class_level_variables": [
                            "name",
                            "_shared_x_axes",
                            "_shared_y_axes",
                            "_twinned_axes",
                            "get_xgridlines",
                            "get_xticklines",
                            "get_ygridlines",
                            "get_yticklines",
                            "xaxis_inverted",
                            "get_xscale",
                            "get_xticks",
                            "set_xticks",
                            "get_xmajorticklabels",
                            "get_xminorticklabels",
                            "get_xticklabels",
                            "set_xticklabels",
                            "yaxis_inverted",
                            "get_yscale",
                            "get_yticks",
                            "set_yticks",
                            "get_ymajorticklabels",
                            "get_yminorticklabels",
                            "get_yticklabels",
                            "set_yticklabels",
                            "xaxis_date",
                            "yaxis_date"
                        ],
                        "class_decorators": [
                            "cbook._define_aliases({'facecolor': ['fc']})"
                        ],
                        "function_signatures": [
                            "__str__(self)",
                            "__init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "get_window_extent(self, *args, **kwargs)",
                            "_init_axis(self)",
                            "set_figure(self, fig)",
                            "_unstale_viewLim(self)",
                            "viewLim(self)",
                            "_request_autoscale_view(self, tight=None, scalex=True, scaley=True)",
                            "_set_lim_and_transforms(self)",
                            "get_xaxis_transform(self, which='grid')",
                            "get_xaxis_text1_transform(self, pad_points)",
                            "get_xaxis_text2_transform(self, pad_points)",
                            "get_yaxis_transform(self, which='grid')",
                            "get_yaxis_text1_transform(self, pad_points)",
                            "get_yaxis_text2_transform(self, pad_points)",
                            "_update_transScale(self)",
                            "get_position(self, original=False)",
                            "set_position(self, pos, which='both')",
                            "_set_position(self, pos, which='both')",
                            "reset_position(self)",
                            "set_axes_locator(self, locator)",
                            "get_axes_locator(self)",
                            "_set_artist_props(self, a)",
                            "_gen_axes_patch(self)",
                            "_gen_axes_spines(self, locations=None, offset=0.0, units='inches')",
                            "sharex(self, other)",
                            "sharey(self, other)",
                            "cla(self)",
                            "clear(self)",
                            "get_facecolor(self)",
                            "set_facecolor(self, color)",
                            "_set_title_offset_trans(self, title_offset_points)",
                            "set_prop_cycle(self, *args, **kwargs)",
                            "get_aspect(self)",
                            "set_aspect(self, aspect, adjustable=None, anchor=None, share=False)",
                            "get_adjustable(self)",
                            "set_adjustable(self, adjustable, share=False)",
                            "get_box_aspect(self)",
                            "set_box_aspect(self, aspect=None)",
                            "get_anchor(self)",
                            "set_anchor(self, anchor, share=False)",
                            "get_data_ratio(self)",
                            "get_data_ratio_log(self)",
                            "apply_aspect(self, position=None)",
                            "axis(self, *args, **kwargs)",
                            "get_legend(self)",
                            "get_images(self)",
                            "get_lines(self)",
                            "get_xaxis(self)",
                            "get_yaxis(self)",
                            "_sci(self, im)",
                            "_gci(self)",
                            "has_data(self)",
                            "add_artist(self, a)",
                            "add_child_axes(self, ax)",
                            "add_collection(self, collection, autolim=True)",
                            "add_image(self, image)",
                            "_update_image_limits(self, image)",
                            "add_line(self, line)",
                            "_add_text(self, txt)",
                            "_update_line_limits(self, line)",
                            "add_patch(self, p)",
                            "_update_patch_limits(self, patch)",
                            "add_table(self, tab)",
                            "add_container(self, container)",
                            "_on_units_changed(self, scalex=False, scaley=False)",
                            "relim(self, visible_only=False)",
                            "update_datalim(self, xys, updatex=True, updatey=True)",
                            "update_datalim_bounds(self, bounds)",
                            "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
                            "in_axes(self, mouseevent)",
                            "get_autoscale_on(self)",
                            "get_autoscalex_on(self)",
                            "get_autoscaley_on(self)",
                            "set_autoscale_on(self, b)",
                            "set_autoscalex_on(self, b)",
                            "set_autoscaley_on(self, b)",
                            "use_sticky_edges(self)",
                            "use_sticky_edges(self, b)",
                            "set_xmargin(self, m)",
                            "set_ymargin(self, m)",
                            "margins(self, *margins)",
                            "set_rasterization_zorder(self, z)",
                            "get_rasterization_zorder(self)",
                            "autoscale(self, enable=True, axis='both', tight=None)",
                            "autoscale_view(self, tight=None, scalex=True, scaley=True)",
                            "_get_axis_list(self)",
                            "_get_axis_map(self)",
                            "_update_title_position(self, renderer)",
                            "draw(self, renderer=None, inframe=False)",
                            "draw_artist(self, a)",
                            "redraw_in_frame(self)",
                            "get_renderer_cache(self)",
                            "get_frame_on(self)",
                            "set_frame_on(self, b)",
                            "get_axisbelow(self)",
                            "set_axisbelow(self, b)",
                            "grid(self, b=None, which='major', axis='both', **kwargs)",
                            "ticklabel_format(self)",
                            "locator_params(self, axis='both', tight=None, **kwargs)",
                            "tick_params(self, axis='both', **kwargs)",
                            "set_axis_off(self)",
                            "set_axis_on(self)",
                            "invert_xaxis(self)",
                            "get_xbound(self)",
                            "set_xbound(self, lower=None, upper=None)",
                            "get_xlim(self)",
                            "_validate_converted_limits(self, limit, convert)",
                            "set_xlim(self, left=None, right=None, emit=True, auto=False)",
                            "set_xscale(self, value, **kwargs)",
                            "invert_yaxis(self)",
                            "get_ybound(self)",
                            "set_ybound(self, lower=None, upper=None)",
                            "get_ylim(self)",
                            "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                            "set_yscale(self, value, **kwargs)",
                            "format_xdata(self, x)",
                            "format_ydata(self, y)",
                            "format_coord(self, x, y)",
                            "minorticks_on(self)",
                            "minorticks_off(self)",
                            "can_zoom(self)",
                            "can_pan(self)",
                            "get_navigate(self)",
                            "set_navigate(self, b)",
                            "get_navigate_mode(self)",
                            "set_navigate_mode(self, b)",
                            "_get_view(self)",
                            "_set_view(self, view)",
                            "_set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False)",
                            "start_pan(self, x, y, button)",
                            "end_pan(self)",
                            "drag_pan(self, button, key, x, y)",
                            "get_children(self)",
                            "contains(self, mouseevent)",
                            "contains_point(self, point)",
                            "get_default_bbox_extra_artists(self)",
                            "get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None)",
                            "_make_twin_axes(self, *args, **kwargs)",
                            "twinx(self)",
                            "twiny(self)",
                            "get_shared_x_axes(self)",
                            "get_shared_y_axes(self)",
                            "_process_single_axis(data, axis, unit_name, kwargs)",
                            "handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound)",
                            "format_deltas(key, dx, dy)",
                            "tol(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x115dbbeb0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115dbbe50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x115dbbeb0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115dbbe50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x115dbbeb0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115dbbe50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.15000000000000002], [120.0, 0.15000000000000002]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x115dbbeb0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115dbbe50>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115dbb160>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fe2b2e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fe28fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fe2b2e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fe28fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fe2b2e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fe28fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.15000000000000002], [120.0, 0.15000000000000002]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fe2b2e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fe28fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115da7580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fec61c0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fec60a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fec61c0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fec60a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fec61c0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fec60a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.15000000000000002], [120.0, 0.15000000000000002]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fec61c0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fec60a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11feb9700>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff2a160>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff2a0a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff2a160>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff2a0a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff2a160>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, 0.0], [0.15000000000000002, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff2a0a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, 0.0], [0.15000000000000002, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff2a160>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff2a0a0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff21640>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff182e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff18fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff182e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff18fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff182e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff18fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11ff182e0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11ff18fd0>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11ff7c8e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fdd6d90>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fdd6940>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fdd6d90>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fdd6940>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fdd6d90>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, 0.0], [0.15000000000000002, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fdd6940>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, 0.0], [0.15000000000000002, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11fdd6d90>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11fdd6940>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x120135e50>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11fea21c0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.15000000000000002, -20.0], [0.15000000000000002, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11567cdc0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11567cd60>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11567cdc0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11567cd60>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11567cdc0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11567cd60>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.15000000000000002], [120.0, 0.15000000000000002]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11567cdc0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11567cd60>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11567c2b0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f6bce50>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115669820>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f6bce50>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115669820>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f6bce50>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115669820>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.15000000000000002], [120.0, 0.15000000000000002]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f6bce50>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x115669820>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x115674850>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x115674850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f75a0d0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f751f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f75a0d0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f751f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "(-0.5, 0.5)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f75a0d0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f751f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.15000000000000002], [120.0, 0.15000000000000002]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-0.5",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f75a0d0>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f751f70>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f751610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-20.0, -0.5], [120.0, 0.5]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f7be070>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f7b4f10>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f7be070>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f7b4f10>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f7be070>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f7b4f10>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f7be070>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f7b4f10>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f7b4550>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f819f40>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f819e20>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f819f40>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f819e20>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f819f40>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f819e20>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f819f40>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f819e20>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f8193d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f87da30>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f87d910>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "0.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f87da30>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f87d910>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[0.0, 0.0], [1.0, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 0 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "top": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "[-20.0, 120.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f87da30>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f87d910>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, 0.0], [0.5, 1.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "top": {
                                    "variable_value": "120.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "np.iterable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bottom": {
                                    "variable_value": "-20.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "ymin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "ymax": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._process_unit_info": {
                                    "variable_value": "<bound method _AxesBase._process_unit_info of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._validate_converted_limits": {
                                    "variable_value": "<bound method _AxesBase._validate_converted_limits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.convert_yunits": {
                                    "variable_value": "<bound method Artist.convert_yunits of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "old_bottom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "old_top": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.get_ylim": {
                                    "variable_value": "<bound method _AxesBase.get_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.get_yscale": {
                                    "variable_value": "<bound method _AxesBase.get_yscale of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "cbook._warn_external": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbook": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "nonsingular": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.yaxis.get_major_locator": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.yaxis": {
                                    "variable_value": "<matplotlib.axis.YAxis object at 0x11f87da30>",
                                    "variable_type": "YAxis",
                                    "variable_shape": null
                                },
                                "self.yaxis.limit_range_for_scale": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "ax": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes.get_siblings": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shared_y_axes": {
                                    "variable_value": "<matplotlib.cbook.Grouper object at 0x11f9f3e20>",
                                    "variable_type": "Grouper",
                                    "variable_shape": null
                                },
                                "ax._stale_viewlim_y": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "auto": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._autoscaleYon": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "emit": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.callbacks.process": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.callbacks": {
                                    "variable_value": "<matplotlib.cbook.CallbackRegistry object at 0x11f87d910>",
                                    "variable_type": "CallbackRegistry",
                                    "variable_shape": null
                                },
                                "other": {
                                    "variable_value": "<matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>",
                                    "variable_type": "AxesSubplot",
                                    "variable_shape": null
                                },
                                "other.set_ylim": {
                                    "variable_value": "<bound method _AxesBase.set_ylim of <matplotlib.axes._subplots.AxesSubplot object at 0x11f872e80>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.viewLim.intervaly": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.viewLim": {
                                    "variable_value": "Bbox([[-0.5, -20.0], [0.5, 120.0]])",
                                    "variable_type": "Bbox",
                                    "variable_shape": null
                                },
                                "other.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "self.figure": {
                                    "variable_value": "<Figure size 640x480 with 1 Axes>",
                                    "variable_type": "Figure",
                                    "variable_shape": null
                                },
                                "other.figure.canvas.draw_idle": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "other.figure.canvas": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stale": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _process_plot_format(fmt):\n    \"\"\"\n    Convert a MATLAB style color/line style format string to a (*linestyle*,\n    *marker*, *color*) tuple.\n\n    Example format strings include:\n\n    * 'ko': black circles\n    * '.b': blue dots\n    * 'r--': red dashed lines\n    * 'C2--': the third color in the color cycle, dashed lines\n\n    See Also\n    --------\n    matplotlib.Line2D.lineStyles, matplotlib.colors.cnames\n        All possible styles and color format strings.\n    \"\"\"\n\n    linestyle = None\n    marker = None\n    color = None\n\n    # Is fmt just a colorspec?\n    try:\n        color = mcolors.to_rgba(fmt)\n\n        # We need to differentiate grayscale '1.0' from tri_down marker '1'\n        try:\n            fmtint = str(int(fmt))\n        except ValueError:\n            return linestyle, marker, color  # Yes\n        else:\n            if fmt != fmtint:\n                # user definitely doesn't want tri_down marker\n                return linestyle, marker, color  # Yes\n            else:\n                # ignore converted color\n                color = None\n    except ValueError:\n        pass  # No, not just a color.\n\n    i = 0\n    while i < len(fmt):\n        c = fmt[i]\n        if fmt[i:i+2] in mlines.lineStyles:  # First, the two-char styles.\n            if linestyle is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two linestyle symbols' % fmt)\n            linestyle = fmt[i:i+2]\n            i += 2\n        elif c in mlines.lineStyles:\n            if linestyle is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two linestyle symbols' % fmt)\n            linestyle = c\n            i += 1\n        elif c in mlines.lineMarkers:\n            if marker is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two marker symbols' % fmt)\n            marker = c\n            i += 1\n        elif c in mcolors.get_named_colors_mapping():\n            if color is not None:\n                raise ValueError(\n                    'Illegal format string \"%s\"; two color symbols' % fmt)\n            color = c\n            i += 1\n        elif c == 'C' and i < len(fmt) - 1:\n            color_cycle_number = int(fmt[i + 1])\n            color = mcolors.to_rgba(\"C{}\".format(color_cycle_number))\n            i += 2\n        else:\n            raise ValueError(\n                'Unrecognized character %c in format string' % c)\n\n    if linestyle is None and marker is None:\n        linestyle = mpl.rcParams['lines.linestyle']\n    if linestyle is None:\n        linestyle = 'None'\n    if marker is None:\n        marker = 'None'\n\n    return linestyle, marker, color",
                "def __init__(self, attr_name, method_name, *, doc_sub=None):\n    self.attr_name = attr_name\n    self.method_name = method_name\n    self.doc_sub = doc_sub",
                "def __set_name__(self, owner, name):\n    # This is called at the end of the class body as\n    # ``self.__set_name__(cls, name_under_which_self_is_assigned)``; we\n    # rely on that to give the wrapper the correct __name__/__qualname__.\n    get_method = attrgetter(f\"{self.attr_name}.{self.method_name}\")\n\n    def wrapper(self, *args, **kwargs):\n        return get_method(self)(*args, **kwargs)\n\n    wrapper.__module__ = owner.__module__\n    wrapper.__name__ = name\n    wrapper.__qualname__ = f\"{owner.__qualname__}.{name}\"\n    # Manually copy the signature instead of using functools.wraps because\n    # displaying the Axis method source when asking for the Axes method\n    # source would be confusing.\n    wrapped_method = getattr(maxis.Axis, self.method_name)\n    wrapper.__signature__ = inspect.signature(wrapped_method)\n    doc = wrapped_method.__doc__\n    if doc:\n        doc_sub = {\"this Axis\": f\"the {self.attr_name}\",\n                   **(self.doc_sub or {})}\n        for k, v in doc_sub.items():\n            assert k in doc, \\\n                (f\"The definition of {wrapper.__qualname__} expected that \"\n                 f\"the docstring of Axis.{self.method_name} contains \"\n                 f\"{k!r} as a substring.\")\n            doc = doc.replace(k, v)\n        wrapper.__doc__ = inspect.cleandoc(doc)\n\n    setattr(owner, name, wrapper)",
                "def __init__(self, axes, command='plot'):\n    self.axes = axes\n    self.command = command\n    self.set_prop_cycle()",
                "def __getstate__(self):\n    # note: it is not possible to pickle a generator (and thus a cycler).\n    return {'axes': self.axes, 'command': self.command}",
                "def __setstate__(self, state):\n    self.__dict__ = state.copy()\n    self.set_prop_cycle()",
                "def set_prop_cycle(self, *args, **kwargs):\n    # Can't do `args == (None,)` as that crashes cycler.\n    if not (args or kwargs) or (len(args) == 1 and args[0] is None):\n        prop_cycler = mpl.rcParams['axes.prop_cycle']\n    else:\n        prop_cycler = cycler(*args, **kwargs)\n\n    self.prop_cycler = itertools.cycle(prop_cycler)\n    # This should make a copy\n    self._prop_keys = prop_cycler.keys",
                "def __call__(self, *args, data=None, **kwargs):\n    self.axes._process_unit_info(kwargs=kwargs)\n\n    for pos_only in \"xy\":\n        if pos_only in kwargs:\n            raise TypeError(\"{} got an unexpected keyword argument {!r}\"\n                            .format(self.command, pos_only))\n\n    if not args:\n        return\n\n    if data is not None:  # Process the 'data' kwarg.\n        replaced = [mpl._replacer(data, arg) for arg in args]\n        if len(args) == 1:\n            label_namer_idx = 0\n        elif len(args) == 2:  # Can be x, y or y, c.\n            # Figure out what the second argument is.\n            # 1) If the second argument cannot be a format shorthand, the\n            #    second argument is the label_namer.\n            # 2) Otherwise (it could have been a format shorthand),\n            #    a) if we did perform a substitution, emit a warning, and\n            #       use it as label_namer.\n            #    b) otherwise, it is indeed a format shorthand; use the\n            #       first argument as label_namer.\n            try:\n                _process_plot_format(args[1])\n            except ValueError:  # case 1)\n                label_namer_idx = 1\n            else:\n                if replaced[1] is not args[1]:  # case 2a)\n                    cbook._warn_external(\n                        f\"Second argument {args[1]!r} is ambiguous: could \"\n                        f\"be a format string but is in 'data'; using as \"\n                        f\"data.  If it was intended as data, set the \"\n                        f\"format string to an empty string to suppress \"\n                        f\"this warning.  If it was intended as a format \"\n                        f\"string, explicitly pass the x-values as well.  \"\n                        f\"Alternatively, rename the entry in 'data'.\",\n                        RuntimeWarning)\n                    label_namer_idx = 1\n                else:  # case 2b)\n                    label_namer_idx = 0\n        elif len(args) == 3:\n            label_namer_idx = 1\n        else:\n            raise ValueError(\n                \"Using arbitrary long args with data is not supported due \"\n                \"to ambiguity of arguments; use multiple plotting calls \"\n                \"instead\")\n        if kwargs.get(\"label\") is None:\n            kwargs[\"label\"] = mpl._label_from_arg(\n                replaced[label_namer_idx], args[label_namer_idx])\n        args = replaced\n\n    # Repeatedly grab (x, y) or (x, y, format) from the front of args and\n    # massage them into arguments to plot() or fill().\n    while args:\n        this, args = args[:2], args[2:]\n        if args and isinstance(args[0], str):\n            this += args[0],\n            args = args[1:]\n        yield from self._plot_args(this, kwargs)",
                "def get_next_color(self):\n    \"\"\"Return the next color in the cycle.\"\"\"\n    if 'color' not in self._prop_keys:\n        return 'k'\n    return next(self.prop_cycler)['color']",
                "def _getdefaults(self, ignore, kw):\n    \"\"\"\n    If some keys in the property cycle (excluding those in the set\n    *ignore*) are absent or set to None in the dict *kw*, return a copy\n    of the next entry in the property cycle, excluding keys in *ignore*.\n    Otherwise, don't advance the property cycle, and return an empty dict.\n    \"\"\"\n    prop_keys = self._prop_keys - ignore\n    if any(kw.get(k, None) is None for k in prop_keys):\n        # Need to copy this dictionary or else the next time around\n        # in the cycle, the dictionary could be missing entries.\n        default_dict = next(self.prop_cycler).copy()\n        for p in ignore:\n            default_dict.pop(p, None)\n    else:\n        default_dict = {}\n    return default_dict",
                "def _setdefaults(self, defaults, kw):\n    \"\"\"\n    Add to the dict *kw* the entries in the dict *default* that are absent\n    or set to None in *kw*.\n    \"\"\"\n    for k in defaults:\n        if kw.get(k, None) is None:\n            kw[k] = defaults[k]",
                "def _makeline(self, x, y, kw, kwargs):\n    kw = {**kw, **kwargs}  # Don't modify the original kw.\n    default_dict = self._getdefaults(set(), kw)\n    self._setdefaults(default_dict, kw)\n    seg = mlines.Line2D(x, y, **kw)\n    return seg",
                "def _makefill(self, x, y, kw, kwargs):\n    # Polygon doesn't directly support unitized inputs.\n    x = self.axes.convert_xunits(x)\n    y = self.axes.convert_yunits(y)\n\n    kw = kw.copy()  # Don't modify the original kw.\n    kwargs = kwargs.copy()\n\n    # Ignore 'marker'-related properties as they aren't Polygon\n    # properties, but they are Line2D properties, and so they are\n    # likely to appear in the default cycler construction.\n    # This is done here to the defaults dictionary as opposed to the\n    # other two dictionaries because we do want to capture when a\n    # *user* explicitly specifies a marker which should be an error.\n    # We also want to prevent advancing the cycler if there are no\n    # defaults needed after ignoring the given properties.\n    ignores = {'marker', 'markersize', 'markeredgecolor',\n               'markerfacecolor', 'markeredgewidth'}\n    # Also ignore anything provided by *kwargs*.\n    for k, v in kwargs.items():\n        if v is not None:\n            ignores.add(k)\n\n    # Only using the first dictionary to use as basis\n    # for getting defaults for back-compat reasons.\n    # Doing it with both seems to mess things up in\n    # various places (probably due to logic bugs elsewhere).\n    default_dict = self._getdefaults(ignores, kw)\n    self._setdefaults(default_dict, kw)\n\n    # Looks like we don't want \"color\" to be interpreted to\n    # mean both facecolor and edgecolor for some reason.\n    # So the \"kw\" dictionary is thrown out, and only its\n    # 'color' value is kept and translated as a 'facecolor'.\n    # This design should probably be revisited as it increases\n    # complexity.\n    facecolor = kw.get('color', None)\n\n    # Throw out 'color' as it is now handled as a facecolor\n    default_dict.pop('color', None)\n\n    # To get other properties set from the cycler\n    # modify the kwargs dictionary.\n    self._setdefaults(default_dict, kwargs)\n\n    seg = mpatches.Polygon(np.column_stack((x, y)),\n                           facecolor=facecolor,\n                           fill=kwargs.get('fill', True),\n                           closed=kw['closed'])\n    seg.set(**kwargs)\n    return seg",
                "def _plot_args(self, tup, kwargs):\n    if len(tup) > 1 and isinstance(tup[-1], str):\n        linestyle, marker, color = _process_plot_format(tup[-1])\n        tup = tup[:-1]\n    elif len(tup) == 3:\n        raise ValueError('third arg must be a format string')\n    else:\n        linestyle, marker, color = None, None, None\n\n    # Don't allow any None value; these would be up-converted to one\n    # element array of None which causes problems downstream.\n    if any(v is None for v in tup):\n        raise ValueError(\"x, y, and format string must not be None\")\n\n    kw = {}\n    for k, v in zip(('linestyle', 'marker', 'color'),\n                    (linestyle, marker, color)):\n        if v is not None:\n            kw[k] = v\n\n    if len(tup) == 2:\n        x = _check_1d(tup[0])\n        y = _check_1d(tup[-1])\n    else:\n        x, y = index_of(tup[-1])\n\n    if self.axes.xaxis is not None:\n        self.axes.xaxis.update_units(x)\n    if self.axes.yaxis is not None:\n        self.axes.yaxis.update_units(y)\n\n    if x.shape[0] != y.shape[0]:\n        raise ValueError(f\"x and y must have same first dimension, but \"\n                         f\"have shapes {x.shape} and {y.shape}\")\n    if x.ndim > 2 or y.ndim > 2:\n        raise ValueError(f\"x and y can be no greater than 2-D, but have \"\n                         f\"shapes {x.shape} and {y.shape}\")\n    if x.ndim == 1:\n        x = x[:, np.newaxis]\n    if y.ndim == 1:\n        y = y[:, np.newaxis]\n\n    if self.command == 'plot':\n        func = self._makeline\n    else:\n        kw['closed'] = kwargs.get('closed', True)\n        func = self._makefill\n\n    ncx, ncy = x.shape[1], y.shape[1]\n    if ncx > 1 and ncy > 1 and ncx != ncy:\n        raise ValueError(f\"x has {ncx} columns but y has {ncy} columns\")\n    return [func(x[:, j % ncx], y[:, j % ncy], kw, kwargs)\n            for j in range(max(ncx, ncy))]",
                "def __str__(self):\n    return \"{0}({1[0]:g},{1[1]:g};{1[2]:g}x{1[3]:g})\".format(\n        type(self).__name__, self._position.bounds)",
                "def __init__(self, fig, rect,\n             facecolor=None,  # defaults to rc axes.facecolor\n             frameon=True,\n             sharex=None,  # use Axes instance's xaxis info\n             sharey=None,  # use Axes instance's yaxis info\n             label='',\n             xscale=None,\n             yscale=None,\n             box_aspect=None,\n             **kwargs\n             ):\n    \"\"\"\n    Build an axes in a figure.\n\n    Parameters\n    ----------\n    fig : `~matplotlib.figure.Figure`\n        The axes is build in the `.Figure` *fig*.\n\n    rect : [left, bottom, width, height]\n        The axes is build in the rectangle *rect*. *rect* is in\n        `.Figure` coordinates.\n\n    sharex, sharey : `~.axes.Axes`, optional\n        The x or y `~.matplotlib.axis` is shared with the x or\n        y axis in the input `~.axes.Axes`.\n\n    frameon : bool, default: True\n        Whether the axes frame is visible.\n\n    box_aspect : None, or a number, optional\n        Sets the aspect of the axes box. See `~.axes.Axes.set_box_aspect`\n        for details.\n\n    **kwargs\n        Other optional keyword arguments:\n\n        %(Axes)s\n\n    Returns\n    -------\n    `~.axes.Axes`\n        The new `~.axes.Axes` object.\n    \"\"\"\n\n    martist.Artist.__init__(self)\n    if isinstance(rect, mtransforms.Bbox):\n        self._position = rect\n    else:\n        self._position = mtransforms.Bbox.from_bounds(*rect)\n    if self._position.width < 0 or self._position.height < 0:\n        raise ValueError('Width and height specified must be non-negative')\n    self._originalPosition = self._position.frozen()\n    self.axes = self\n    self._aspect = 'auto'\n    self._adjustable = 'box'\n    self._anchor = 'C'\n    self._stale_viewlim_x = False\n    self._stale_viewlim_y = False\n    self._sharex = None\n    self._sharey = None\n    self.set_label(label)\n    self.set_figure(fig)\n    self.set_box_aspect(box_aspect)\n    self._axes_locator = None  # Optionally set via update(kwargs).\n\n    self.spines = self._gen_axes_spines()\n\n    # this call may differ for non-sep axes, e.g., polar\n    self._init_axis()\n    if facecolor is None:\n        facecolor = mpl.rcParams['axes.facecolor']\n    self._facecolor = facecolor\n    self._frameon = frameon\n    self.set_axisbelow(mpl.rcParams['axes.axisbelow'])\n\n    self._rasterization_zorder = None\n    self.cla()\n\n    if sharex is not None:\n        self.sharex(sharex)\n    if sharey is not None:\n        self.sharey(sharey)\n\n    # funcs used to format x and y - fall back on major formatters\n    self.fmt_xdata = None\n    self.fmt_ydata = None\n\n    self.set_navigate(True)\n    self.set_navigate_mode(None)\n\n    if xscale:\n        self.set_xscale(xscale)\n    if yscale:\n        self.set_yscale(yscale)\n\n    self.update(kwargs)\n\n    if self.xaxis is not None:\n        self._xcid = self.xaxis.callbacks.connect(\n            'units finalize', lambda: self._on_units_changed(scalex=True))\n\n    if self.yaxis is not None:\n        self._ycid = self.yaxis.callbacks.connect(\n            'units finalize', lambda: self._on_units_changed(scaley=True))\n\n    rcParams = mpl.rcParams\n    self.tick_params(\n        top=rcParams['xtick.top'] and rcParams['xtick.minor.top'],\n        bottom=rcParams['xtick.bottom'] and rcParams['xtick.minor.bottom'],\n        labeltop=(rcParams['xtick.labeltop'] and\n                  rcParams['xtick.minor.top']),\n        labelbottom=(rcParams['xtick.labelbottom'] and\n                     rcParams['xtick.minor.bottom']),\n        left=rcParams['ytick.left'] and rcParams['ytick.minor.left'],\n        right=rcParams['ytick.right'] and rcParams['ytick.minor.right'],\n        labelleft=(rcParams['ytick.labelleft'] and\n                   rcParams['ytick.minor.left']),\n        labelright=(rcParams['ytick.labelright'] and\n                    rcParams['ytick.minor.right']),\n        which='minor')\n\n    self.tick_params(\n        top=rcParams['xtick.top'] and rcParams['xtick.major.top'],\n        bottom=rcParams['xtick.bottom'] and rcParams['xtick.major.bottom'],\n        labeltop=(rcParams['xtick.labeltop'] and\n                  rcParams['xtick.major.top']),\n        labelbottom=(rcParams['xtick.labelbottom'] and\n                     rcParams['xtick.major.bottom']),\n        left=rcParams['ytick.left'] and rcParams['ytick.major.left'],\n        right=rcParams['ytick.right'] and rcParams['ytick.major.right'],\n        labelleft=(rcParams['ytick.labelleft'] and\n                   rcParams['ytick.major.left']),\n        labelright=(rcParams['ytick.labelright'] and\n                    rcParams['ytick.major.right']),\n        which='major')\n\n    self._layoutbox = None\n    self._poslayoutbox = None",
                "def __getstate__(self):\n    # The renderer should be re-created by the figure, and then cached at\n    # that point.\n    state = super().__getstate__()\n    for key in ['_layoutbox', '_poslayoutbox']:\n        state[key] = None\n    # Prune the sharing & twinning info to only contain the current group.\n    for grouper_name in [\n            '_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        grouper = getattr(self, grouper_name)\n        state[grouper_name] = (grouper.get_siblings(self)\n                               if self in grouper else None)\n    return state",
                "def __setstate__(self, state):\n    # Merge the grouping info back into the global groupers.\n    for grouper_name in [\n            '_shared_x_axes', '_shared_y_axes', '_twinned_axes']:\n        siblings = state.pop(grouper_name)\n        if siblings:\n            getattr(self, grouper_name).join(*siblings)\n    self.__dict__ = state\n    self._stale = True",
                "def get_window_extent(self, *args, **kwargs):\n    \"\"\"\n    Return the axes bounding box in display space; *args* and *kwargs*\n    are empty.\n\n    This bounding box does not include the spines, ticks, ticklables,\n    or other labels.  For a bounding box including these elements use\n    `~matplotlib.axes.Axes.get_tightbbox`.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_tightbbox\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.get_window_extent\n\n    \"\"\"\n    return self.bbox",
                "def _init_axis(self):\n    # This is moved out of __init__ because non-separable axes don't use it\n    self.xaxis = maxis.XAxis(self)\n    self.spines['bottom'].register_axis(self.xaxis)\n    self.spines['top'].register_axis(self.xaxis)\n    self.yaxis = maxis.YAxis(self)\n    self.spines['left'].register_axis(self.yaxis)\n    self.spines['right'].register_axis(self.yaxis)\n    self._update_transScale()",
                "def set_figure(self, fig):\n    # docstring inherited\n    martist.Artist.set_figure(self, fig)\n\n    self.bbox = mtransforms.TransformedBbox(self._position,\n                                            fig.transFigure)\n    # these will be updated later as data is added\n    self.dataLim = mtransforms.Bbox.null()\n    self._viewLim = mtransforms.Bbox.unit()\n    self.transScale = mtransforms.TransformWrapper(\n        mtransforms.IdentityTransform())\n\n    self._set_lim_and_transforms()",
                "def _unstale_viewLim(self):\n    # We should arrange to store this information once per share-group\n    # instead of on every axis.\n    scalex = any(ax._stale_viewlim_x\n                 for ax in self._shared_x_axes.get_siblings(self))\n    scaley = any(ax._stale_viewlim_y\n                 for ax in self._shared_y_axes.get_siblings(self))\n    if scalex or scaley:\n        for ax in self._shared_x_axes.get_siblings(self):\n            ax._stale_viewlim_x = False\n        for ax in self._shared_y_axes.get_siblings(self):\n            ax._stale_viewlim_y = False\n        self.autoscale_view(scalex=scalex, scaley=scaley)",
                "@property\ndef viewLim(self):\n    self._unstale_viewLim()\n    return self._viewLim",
                "def _request_autoscale_view(self, tight=None, scalex=True, scaley=True):\n    if tight is not None:\n        self._tight = tight\n    if scalex:\n        self._stale_viewlim_x = True  # Else keep old state.\n    if scaley:\n        self._stale_viewlim_y = True",
                "def _set_lim_and_transforms(self):\n    \"\"\"\n    Set the *_xaxis_transform*, *_yaxis_transform*, *transScale*,\n    *transData*, *transLimits* and *transAxes* transformations.\n\n    .. note::\n\n        This method is primarily used by rectilinear projections of the\n        `~matplotlib.axes.Axes` class, and is meant to be overridden by\n        new kinds of projection axes that need different transformations\n        and limits. (See `~matplotlib.projections.polar.PolarAxes` for an\n        example.)\n    \"\"\"\n    self.transAxes = mtransforms.BboxTransformTo(self.bbox)\n\n    # Transforms the x and y axis separately by a scale factor.\n    # It is assumed that this part will have non-linear components\n    # (e.g., for a log scale).\n    self.transScale = mtransforms.TransformWrapper(\n        mtransforms.IdentityTransform())\n\n    # An affine transformation on the data, generally to limit the\n    # range of the axes\n    self.transLimits = mtransforms.BboxTransformFrom(\n        mtransforms.TransformedBbox(self._viewLim, self.transScale))\n\n    # The parentheses are important for efficiency here -- they\n    # group the last two (which are usually affines) separately\n    # from the first (which, with log-scaling can be non-affine).\n    self.transData = self.transScale + (self.transLimits + self.transAxes)\n\n    self._xaxis_transform = mtransforms.blended_transform_factory(\n        self.transData, self.transAxes)\n    self._yaxis_transform = mtransforms.blended_transform_factory(\n        self.transAxes, self.transData)",
                "def get_xaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing x-axis labels, ticks\n    and gridlines.  The x-direction is in data coordinates and the\n    y-direction is in axis coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._xaxis_transform\n    elif which == 'tick1':\n        # for cartesian projection, this is bottom spine\n        return self.spines['bottom'].get_spine_transform()\n    elif which == 'tick2':\n        # for cartesian projection, this is top spine\n        return self.spines['top'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                "def get_xaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing x-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in data coordinates and the y-direction is in\n        axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams[\"xtick.alignment\"]\n    return (self.get_xaxis_transform(which='tick1') +\n            mtransforms.ScaledTranslation(0, -1 * pad_points / 72,\n                                          self.figure.dpi_scale_trans),\n            \"top\", labels_align)",
                "def get_xaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondary x-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in data coordinates and the y-direction\n        is in axis corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams[\"xtick.alignment\"]\n    return (self.get_xaxis_transform(which='tick2') +\n            mtransforms.ScaledTranslation(0, pad_points / 72,\n                                          self.figure.dpi_scale_trans),\n            \"bottom\", labels_align)",
                "def get_yaxis_transform(self, which='grid'):\n    \"\"\"\n    Get the transformation used for drawing y-axis labels, ticks\n    and gridlines.  The x-direction is in axis coordinates and the\n    y-direction is in data coordinates.\n\n    .. note::\n\n        This transformation is primarily used by the\n        `~matplotlib.axis.Axis` class, and is meant to be\n        overridden by new kinds of projections that may need to\n        place axis elements in different locations.\n    \"\"\"\n    if which == 'grid':\n        return self._yaxis_transform\n    elif which == 'tick1':\n        # for cartesian projection, this is bottom spine\n        return self.spines['left'].get_spine_transform()\n    elif which == 'tick2':\n        # for cartesian projection, this is top spine\n        return self.spines['right'].get_spine_transform()\n    else:\n        raise ValueError('unknown value for which')",
                "def get_yaxis_text1_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing y-axis labels, which will add\n        *pad_points* of padding (in points) between the axes and the label.\n        The x-direction is in axis coordinates and the y-direction is in\n        data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams[\"ytick.alignment\"]\n    return (self.get_yaxis_transform(which='tick1') +\n            mtransforms.ScaledTranslation(-1 * pad_points / 72, 0,\n                                          self.figure.dpi_scale_trans),\n            labels_align, \"right\")",
                "def get_yaxis_text2_transform(self, pad_points):\n    \"\"\"\n    Returns\n    -------\n    transform : Transform\n        The transform used for drawing secondart y-axis labels, which will\n        add *pad_points* of padding (in points) between the axes and the\n        label.  The x-direction is in axis coordinates and the y-direction\n        is in data corrdinates\n    valign : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}\n        The text vertical alignment.\n    halign : {'center', 'left', 'right'}\n        The text horizontal alignment.\n\n    Notes\n    -----\n    This transformation is primarily used by the `~matplotlib.axis.Axis`\n    class, and is meant to be overridden by new kinds of projections that\n    may need to place axis elements in different locations.\n    \"\"\"\n    labels_align = mpl.rcParams[\"ytick.alignment\"]\n    return (self.get_yaxis_transform(which='tick2') +\n            mtransforms.ScaledTranslation(pad_points / 72, 0,\n                                          self.figure.dpi_scale_trans),\n            labels_align, \"left\")",
                "def _update_transScale(self):\n    self.transScale.set(\n        mtransforms.blended_transform_factory(\n            self.xaxis.get_transform(), self.yaxis.get_transform()))\n    for line in getattr(self, \"lines\", []):  # Not set during init.\n        try:\n            line._transformed_path.invalidate()\n        except AttributeError:\n            pass",
                "def get_position(self, original=False):\n    \"\"\"\n    Get a copy of the axes rectangle as a `.Bbox`.\n\n    Parameters\n    ----------\n    original : bool\n        If ``True``, return the original position. Otherwise return the\n        active position. For an explanation of the positions see\n        `.set_position`.\n\n    Returns\n    -------\n    `.Bbox`\n\n    \"\"\"\n    if original:\n        return self._originalPosition.frozen()\n    else:\n        locator = self.get_axes_locator()\n        if not locator:\n            self.apply_aspect()\n        return self._position.frozen()",
                "def set_position(self, pos, which='both'):\n    \"\"\"\n    Set the axes position.\n\n    Axes have two position attributes. The 'original' position is the\n    position allocated for the Axes. The 'active' position is the\n    position the Axes is actually drawn at. These positions are usually\n    the same unless a fixed aspect is set to the Axes. See `.set_aspect`\n    for details.\n\n    Parameters\n    ----------\n    pos : [left, bottom, width, height] or `~matplotlib.transforms.Bbox`\n        The new position of the in `.Figure` coordinates.\n\n    which : {'both', 'active', 'original'}, default: 'both'\n        Determines which position variables to change.\n\n    \"\"\"\n    self._set_position(pos, which=which)\n    # because this is being called externally to the library we\n    # zero the constrained layout parts.\n    self._layoutbox = None\n    self._poslayoutbox = None",
                "def _set_position(self, pos, which='both'):\n    \"\"\"\n    Private version of set_position.\n\n    Call this internally to get the same functionality of `get_position`,\n    but not to take the axis out of the constrained_layout hierarchy.\n    \"\"\"\n    if not isinstance(pos, mtransforms.BboxBase):\n        pos = mtransforms.Bbox.from_bounds(*pos)\n    for ax in self._twinned_axes.get_siblings(self):\n        if which in ('both', 'active'):\n            ax._position.set(pos)\n        if which in ('both', 'original'):\n            ax._originalPosition.set(pos)\n    self.stale = True",
                "def reset_position(self):\n    \"\"\"\n    Reset the active position to the original position.\n\n    This resets the a possible position change due to aspect constraints.\n    For an explanation of the positions see `.set_position`.\n    \"\"\"\n    for ax in self._twinned_axes.get_siblings(self):\n        pos = ax.get_position(original=True)\n        ax.set_position(pos, which='active')",
                "def set_axes_locator(self, locator):\n    \"\"\"\n    Set the axes locator.\n\n    Parameters\n    ----------\n    locator : Callable[[Axes, Renderer], Bbox]\n    \"\"\"\n    self._axes_locator = locator\n    self.stale = True",
                "def get_axes_locator(self):\n    \"\"\"\n    Return the axes_locator.\n    \"\"\"\n    return self._axes_locator",
                "def _set_artist_props(self, a):\n    \"\"\"Set the boilerplate props for artists added to axes.\"\"\"\n    a.set_figure(self.figure)\n    if not a.is_transform_set():\n        a.set_transform(self.transData)\n\n    a.axes = self\n    if a.mouseover:\n        self._mouseover_set.add(a)",
                "def _gen_axes_patch(self):\n    \"\"\"\n    Returns\n    -------\n    Patch\n        The patch used to draw the background of the axes.  It is also used\n        as the clipping path for any data elements on the axes.\n\n        In the standard axes, this is a rectangle, but in other projections\n        it may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)",
                "def _gen_axes_spines(self, locations=None, offset=0.0, units='inches'):\n    \"\"\"\n    Returns\n    -------\n    dict\n        Mapping of spine names to `.Line2D` or `.Patch` instances that are\n        used to draw axes spines.\n\n        In the standard axes, spines are single line segments, but in other\n        projections they may not be.\n\n    Notes\n    -----\n    Intended to be overridden by new projection types.\n    \"\"\"\n    return OrderedDict((side, mspines.Spine.linear_spine(self, side))\n                       for side in ['left', 'right', 'bottom', 'top'])",
                "def sharex(self, other):\n    \"\"\"\n    Share the x-axis with *other*.\n\n    This is equivalent to passing ``sharex=other`` when constructing the\n    axes, and cannot be used if the x-axis is already being shared with\n    another axes.\n    \"\"\"\n    cbook._check_isinstance(_AxesBase, other=other)\n    if self._sharex is not None and other is not self._sharex:\n        raise ValueError(\"x-axis is already shared\")\n    self._shared_x_axes.join(self, other)\n    self._sharex = other\n    self.xaxis.major = other.xaxis.major  # Ticker instances holding\n    self.xaxis.minor = other.xaxis.minor  # locator and formatter.\n    x0, x1 = other.get_xlim()\n    self.set_xlim(x0, x1, emit=False, auto=other.get_autoscalex_on())\n    self.xaxis._scale = other.xaxis._scale",
                "def sharey(self, other):\n    \"\"\"\n    Share the y-axis with *other*.\n\n    This is equivalent to passing ``sharey=other`` when constructing the\n    axes, and cannot be used if the y-axis is already being shared with\n    another axes.\n    \"\"\"\n    cbook._check_isinstance(_AxesBase, other=other)\n    if self._sharey is not None and other is not self._sharey:\n        raise ValueError(\"y-axis is already shared\")\n    self._shared_y_axes.join(self, other)\n    self._sharey = other\n    self.yaxis.major = other.yaxis.major  # Ticker instances holding\n    self.yaxis.minor = other.yaxis.minor  # locator and formatter.\n    y0, y1 = other.get_ylim()\n    self.set_ylim(y0, y1, emit=False, auto=other.get_autoscaley_on())\n    self.yaxis._scale = other.yaxis._scale",
                "def cla(self):\n    \"\"\"Clear the current axes.\"\"\"\n    # Note: this is called by Axes.__init__()\n\n    # stash the current visibility state\n    if hasattr(self, 'patch'):\n        patch_visible = self.patch.get_visible()\n    else:\n        patch_visible = True\n\n    xaxis_visible = self.xaxis.get_visible()\n    yaxis_visible = self.yaxis.get_visible()\n\n    self.xaxis.cla()\n    self.yaxis.cla()\n\n    for name, spine in self.spines.items():\n        spine.cla()\n\n    self.ignore_existing_data_limits = True\n    self.callbacks = cbook.CallbackRegistry()\n\n    if self._sharex is not None:\n        self.sharex(self._sharex)\n    else:\n        self.xaxis._set_scale('linear')\n        try:\n            self.set_xlim(0, 1)\n        except TypeError:\n            pass\n    if self._sharey is not None:\n        self.sharey(self._sharey)\n    else:\n        self.yaxis._set_scale('linear')\n        try:\n            self.set_ylim(0, 1)\n        except TypeError:\n            pass\n\n    # update the minor locator for x and y axis based on rcParams\n    if mpl.rcParams['xtick.minor.visible']:\n        self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n    if mpl.rcParams['ytick.minor.visible']:\n        self.yaxis.set_minor_locator(mticker.AutoMinorLocator())\n\n    if self._sharex is None:\n        self._autoscaleXon = True\n    if self._sharey is None:\n        self._autoscaleYon = True\n    self._xmargin = mpl.rcParams['axes.xmargin']\n    self._ymargin = mpl.rcParams['axes.ymargin']\n    self._tight = None\n    self._use_sticky_edges = True\n    self._update_transScale()  # needed?\n\n    self._get_lines = _process_plot_var_args(self)\n    self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n\n    self._gridOn = mpl.rcParams['axes.grid']\n    self.lines = []\n    self.patches = []\n    self.texts = []\n    self.tables = []\n    self.artists = []\n    self.images = []\n    self._mouseover_set = _OrderedSet()\n    self.child_axes = []\n    self._current_image = None  # strictly for pyplot via _sci, _gci\n    self.legend_ = None\n    self.collections = []  # collection.Collection instances\n    self.containers = []\n\n    self.grid(False)  # Disable grid on init to use rcParameter\n    self.grid(self._gridOn, which=mpl.rcParams['axes.grid.which'],\n              axis=mpl.rcParams['axes.grid.axis'])\n    props = font_manager.FontProperties(\n        size=mpl.rcParams['axes.titlesize'],\n        weight=mpl.rcParams['axes.titleweight'])\n\n    y = mpl.rcParams['axes.titley']\n    if y is None:\n        y = 1.0\n        self._autotitlepos = True\n    else:\n        self._autotitlepos = False\n\n    self.title = mtext.Text(\n        x=0.5, y=y, text='',\n        fontproperties=props,\n        verticalalignment='baseline',\n        horizontalalignment='center',\n        )\n    self._left_title = mtext.Text(\n        x=0.0, y=y, text='',\n        fontproperties=props.copy(),\n        verticalalignment='baseline',\n        horizontalalignment='left', )\n    self._right_title = mtext.Text(\n        x=1.0, y=y, text='',\n        fontproperties=props.copy(),\n        verticalalignment='baseline',\n        horizontalalignment='right',\n        )\n    title_offset_points = mpl.rcParams['axes.titlepad']\n    # refactor this out so it can be called in ax.set_title if\n    # pad argument used...\n    self._set_title_offset_trans(title_offset_points)\n\n    for _title in (self.title, self._left_title, self._right_title):\n        self._set_artist_props(_title)\n\n    # The patch draws the background of the axes.  We want this to be below\n    # the other artists.  We use the frame to draw the edges so we are\n    # setting the edgecolor to None.\n    self.patch = self._gen_axes_patch()\n    self.patch.set_figure(self.figure)\n    self.patch.set_facecolor(self._facecolor)\n    self.patch.set_edgecolor('None')\n    self.patch.set_linewidth(0)\n    self.patch.set_transform(self.transAxes)\n\n    self.set_axis_on()\n\n    self.xaxis.set_clip_path(self.patch)\n    self.yaxis.set_clip_path(self.patch)\n\n    self._shared_x_axes.clean()\n    self._shared_y_axes.clean()\n    if self._sharex is not None:\n        self.xaxis.set_visible(xaxis_visible)\n        self.patch.set_visible(patch_visible)\n    if self._sharey is not None:\n        self.yaxis.set_visible(yaxis_visible)\n        self.patch.set_visible(patch_visible)\n\n    self.stale = True",
                "def clear(self):\n    \"\"\"Clear the axes.\"\"\"\n    self.cla()",
                "def get_facecolor(self):\n    \"\"\"Get the facecolor of the Axes.\"\"\"\n    return self.patch.get_facecolor()",
                "def set_facecolor(self, color):\n    \"\"\"\n    Set the facecolor of the Axes.\n\n    Parameters\n    ----------\n    color : color\n    \"\"\"\n    self._facecolor = color\n    self.stale = True\n    return self.patch.set_facecolor(color)",
                "def _set_title_offset_trans(self, title_offset_points):\n    \"\"\"\n    Set the offset for the title either from :rc:`axes.titlepad`\n    or from set_title kwarg ``pad``.\n    \"\"\"\n    self.titleOffsetTrans = mtransforms.ScaledTranslation(\n            0.0, title_offset_points / 72,\n            self.figure.dpi_scale_trans)\n    for _title in (self.title, self._left_title, self._right_title):\n        _title.set_transform(self.transAxes + self.titleOffsetTrans)\n        _title.set_clip_box(None)",
                "def set_prop_cycle(self, *args, **kwargs):\n    \"\"\"\n    Set the property cycle of the Axes.\n\n    The property cycle controls the style properties such as color,\n    marker and linestyle of future plot commands. The style properties\n    of data already added to the Axes are not modified.\n\n    Call signatures::\n\n      set_prop_cycle(cycler)\n      set_prop_cycle(label=values[, label2=values2[, ...]])\n      set_prop_cycle(label, values)\n\n    Form 1 sets given `~cycler.Cycler` object.\n\n    Form 2 creates a `~cycler.Cycler` which cycles over one or more\n    properties simultaneously and set it as the property cycle of the\n    axes. If multiple properties are given, their value lists must have\n    the same length. This is just a shortcut for explicitly creating a\n    cycler and passing it to the function, i.e. it's short for\n    ``set_prop_cycle(cycler(label=values label2=values2, ...))``.\n\n    Form 3 creates a `~cycler.Cycler` for a single property and set it\n    as the property cycle of the axes. This form exists for compatibility\n    with the original `cycler.cycler` interface. Its use is discouraged\n    in favor of the kwarg form, i.e. ``set_prop_cycle(label=values)``.\n\n    Parameters\n    ----------\n    cycler : Cycler\n        Set the given Cycler. *None* resets to the cycle defined by the\n        current style.\n\n    label : str\n        The property key. Must be a valid `.Artist` property.\n        For example, 'color' or 'linestyle'. Aliases are allowed,\n        such as 'c' for 'color' and 'lw' for 'linewidth'.\n\n    values : iterable\n        Finite-length iterable of the property values. These values\n        are validated and will raise a ValueError if invalid.\n\n    See Also\n    --------\n    matplotlib.rcsetup.cycler\n        Convenience function for creating validated cyclers for properties.\n    cycler.cycler\n        The original function for creating unvalidated cyclers.\n\n    Examples\n    --------\n    Setting the property cycle for a single property:\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n\n    Setting the property cycle for simultaneously cycling over multiple\n    properties (e.g. red circle, green plus, blue cross):\n\n    >>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n    ...                   marker=['o', '+', 'x'])\n\n    \"\"\"\n    if args and kwargs:\n        raise TypeError(\"Cannot supply both positional and keyword \"\n                        \"arguments to this method.\")\n    # Can't do `args == (None,)` as that crashes cycler.\n    if len(args) == 1 and args[0] is None:\n        prop_cycle = None\n    else:\n        prop_cycle = cycler(*args, **kwargs)\n    self._get_lines.set_prop_cycle(prop_cycle)\n    self._get_patches_for_fill.set_prop_cycle(prop_cycle)",
                "def get_aspect(self):\n    return self._aspect",
                "def set_aspect(self, aspect, adjustable=None, anchor=None, share=False):\n    \"\"\"\n    Set the aspect of the axis scaling, i.e. the ratio of y-unit to x-unit.\n\n    Parameters\n    ----------\n    aspect : {'auto'} or num\n        Possible values:\n\n        ========   =================================================\n        value      description\n        ========   =================================================\n        'auto'     automatic; fill the position rectangle with data.\n        num        a circle will be stretched such that the height\n                   is *num* times the width.  'equal' is a synonym\n                   for ``aspect=1``, i.e. same scaling for x and y.\n        ========   =================================================\n\n    adjustable : None or {'box', 'datalim'}, optional\n        If not ``None``, this defines which parameter will be adjusted to\n        meet the required aspect. See `.set_adjustable` for further\n        details.\n\n    anchor : None or str or 2-tuple of float, optional\n        If not ``None``, this defines where the Axes will be drawn if there\n        is extra space due to aspect constraints. The most common way to\n        to specify the anchor are abbreviations of cardinal directions:\n\n        =====   =====================\n        value   description\n        =====   =====================\n        'C'     centered\n        'SW'    lower left corner\n        'S'     middle of bottom edge\n        'SE'    lower right corner\n        etc.\n        =====   =====================\n\n        See `.set_anchor` for further details.\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_anchor\n        Set the position in case of extra space.\n    \"\"\"\n    if cbook._str_equal(aspect, 'equal'):\n        aspect = 1\n    if not cbook._str_equal(aspect, 'auto'):\n        if self.name == '3d':\n            raise NotImplementedError(\n                'It is not currently possible to manually set the aspect '\n                'on 3D axes')\n        aspect = float(aspect)  # raise ValueError if necessary\n\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self),\n                *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n\n    for ax in axes:\n        ax._aspect = aspect\n\n    if adjustable is None:\n        adjustable = self._adjustable\n    self.set_adjustable(adjustable, share=share)  # Handle sharing.\n\n    if anchor is not None:\n        self.set_anchor(anchor, share=share)\n    self.stale = True",
                "def get_adjustable(self):\n    \"\"\"\n    Return whether the Axes will adjust its physical dimension ('box') or\n    its data limits ('datalim') to achieve the desired aspect ratio.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect handling.\n    \"\"\"\n    return self._adjustable",
                "def set_adjustable(self, adjustable, share=False):\n    \"\"\"\n    Set how the Axes adjusts to achieve the required aspect ratio.\n\n    Parameters\n    ----------\n    adjustable : {'box', 'datalim'}\n        If 'box', change the physical dimensions of the Axes.\n        If 'datalim', change the ``x`` or ``y`` data limits.\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect handling.\n\n    Notes\n    -----\n    Shared Axes (of which twinned Axes are a special case)\n    impose restrictions on how aspect ratios can be imposed.\n    For twinned Axes, use 'datalim'.  For Axes that share both\n    x and y, use 'box'.  Otherwise, either 'datalim' or 'box'\n    may be used.  These limitations are partly a requirement\n    to avoid over-specification, and partly a result of the\n    particular implementation we are currently using, in\n    which the adjustments for aspect ratios are done sequentially\n    and independently on each Axes as it is drawn.\n    \"\"\"\n    cbook._check_in_list([\"box\", \"datalim\"], adjustable=adjustable)\n    if share:\n        axs = {*self._shared_x_axes.get_siblings(self),\n               *self._shared_y_axes.get_siblings(self)}\n    else:\n        axs = [self]\n    if (adjustable == \"datalim\"\n            and any(getattr(ax.get_data_ratio, \"__func__\", None)\n                    != _AxesBase.get_data_ratio\n                    for ax in axs)):\n        # Limits adjustment by apply_aspect assumes that the axes' aspect\n        # ratio can be computed from the data limits and scales.\n        raise ValueError(\"Cannot set axes adjustable to 'datalim' for \"\n                         \"Axes which override 'get_data_ratio'\")\n    for ax in axs:\n        ax._adjustable = adjustable\n    self.stale = True",
                "def get_box_aspect(self):\n    \"\"\"\n    Get the axes box aspect.\n    Will be ``None`` if not explicitly specified.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_box_aspect\n        for a description of box aspect.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._box_aspect",
                "def set_box_aspect(self, aspect=None):\n    \"\"\"\n    Set the axes box aspect. The box aspect is the ratio of the\n    axes height to the axes width in physical units. This is not to be\n    confused with the data aspect, set via `~.Axes.set_aspect`.\n\n    Parameters\n    ----------\n    aspect : None, or a number\n        Changes the physical dimensions of the Axes, such that the ratio\n        of the axes height to the axes width in physical units is equal to\n        *aspect*. If *None*, the axes geometry will not be adjusted.\n\n    Note that calling this function with a number changes the *adjustable*\n    to *datalim*.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    axs = {*self._twinned_axes.get_siblings(self),\n           *self._twinned_axes.get_siblings(self)}\n\n    if aspect is not None:\n        aspect = float(aspect)\n        # when box_aspect is set to other than \u00b4None`,\n        # adjustable must be \"datalim\"\n        for ax in axs:\n            ax.set_adjustable(\"datalim\")\n\n    for ax in axs:\n        ax._box_aspect = aspect\n        ax.stale = True",
                "def get_anchor(self):\n    \"\"\"\n    Get the anchor location.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_anchor\n        for a description of the anchor.\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    return self._anchor",
                "def set_anchor(self, anchor, share=False):\n    \"\"\"\n    Define the anchor location.\n\n    The actual drawing area (active position) of the Axes may be smaller\n    than the Bbox (original position) when a fixed aspect is required. The\n    anchor defines where the drawing area will be located within the\n    available space.\n\n    Parameters\n    ----------\n    anchor : 2-tuple of floats or {'C', 'SW', 'S', 'SE', ...}\n        The anchor position may be either:\n\n        - a sequence (*cx*, *cy*). *cx* and *cy* may range from 0\n          to 1, where 0 is left or bottom and 1 is right or top.\n\n        - a string using cardinal directions as abbreviation:\n\n          - 'C' for centered\n          - 'S' (south) for bottom-center\n          - 'SW' (south west) for bottom-left\n          - etc.\n\n          Here is an overview of the possible positions:\n\n          +------+------+------+\n          | 'NW' | 'N'  | 'NE' |\n          +------+------+------+\n          | 'W'  | 'C'  | 'E'  |\n          +------+------+------+\n          | 'SW' | 'S'  | 'SE' |\n          +------+------+------+\n\n    share : bool, default: False\n        If ``True``, apply the settings to all shared Axes.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        for a description of aspect handling.\n    \"\"\"\n    if not (anchor in mtransforms.Bbox.coefs or len(anchor) == 2):\n        raise ValueError('argument must be among %s' %\n                         ', '.join(mtransforms.Bbox.coefs))\n    if share:\n        axes = {*self._shared_x_axes.get_siblings(self),\n                *self._shared_y_axes.get_siblings(self)}\n    else:\n        axes = [self]\n    for ax in axes:\n        ax._anchor = anchor\n\n    self.stale = True",
                "def get_data_ratio(self):\n    \"\"\"\n    Return the aspect ratio of the scaled data.\n\n    Notes\n    -----\n    This method is intended to be overridden by new projection types.\n    \"\"\"\n    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())\n    tymin, tymax = self.yaxis.get_transform().transform(self.get_ybound())\n    xsize = max(abs(txmax - txmin), 1e-30)\n    ysize = max(abs(tymax - tymin), 1e-30)\n    return ysize / xsize",
                "@cbook.deprecated(\"3.2\")\ndef get_data_ratio_log(self):\n    \"\"\"\n    Return the aspect ratio of the raw data in log scale.\n\n    Notes\n    -----\n    Will be used when both axis are in log scale.\n    \"\"\"\n    xmin, xmax = self.get_xbound()\n    ymin, ymax = self.get_ybound()\n\n    xsize = max(abs(math.log10(xmax) - math.log10(xmin)), 1e-30)\n    ysize = max(abs(math.log10(ymax) - math.log10(ymin)), 1e-30)\n\n    return ysize / xsize",
                "def apply_aspect(self, position=None):\n    \"\"\"\n    Adjust the Axes for a specified data aspect ratio.\n\n    Depending on `.get_adjustable` this will modify either the\n    Axes box (position) or the view limits. In the former case,\n    `~matplotlib.axes.Axes.get_anchor` will affect the position.\n\n    Notes\n    -----\n    This is called automatically when each Axes is drawn.  You may need\n    to call it yourself if you need to update the Axes position and/or\n    view limits before the Figure is drawn.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_aspect\n        For a description of aspect ratio handling.\n    matplotlib.axes.Axes.set_adjustable\n        Set how the Axes adjusts to achieve the required aspect ratio.\n    matplotlib.axes.Axes.set_anchor\n        Set the position in case of extra space.\n    \"\"\"\n    if position is None:\n        position = self.get_position(original=True)\n\n    aspect = self.get_aspect()\n\n    if aspect == 'auto' and self._box_aspect is None:\n        self._set_position(position, which='active')\n        return\n\n    fig_width, fig_height = self.get_figure().get_size_inches()\n    fig_aspect = fig_height / fig_width\n\n    if self._adjustable == 'box':\n        if self in self._twinned_axes:\n            raise RuntimeError(\"Adjustable 'box' is not allowed in a \"\n                               \"twinned Axes; use 'datalim' instead\")\n        box_aspect = aspect * self.get_data_ratio()\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        return\n\n    # The following is only seen if self._adjustable == 'datalim'\n    if self._box_aspect is not None:\n        pb = position.frozen()\n        pb1 = pb.shrunk_to_aspect(self._box_aspect, pb, fig_aspect)\n        self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')\n        if aspect == \"auto\":\n            return\n\n    # reset active to original in case it had been changed by prior use\n    # of 'box'\n    if self._box_aspect is None:\n        self._set_position(position, which='active')\n    else:\n        position = pb1.anchored(self.get_anchor(), pb)\n\n    x_trf = self.xaxis.get_transform()\n    y_trf = self.yaxis.get_transform()\n    xmin, xmax = x_trf.transform(self.get_xbound())\n    ymin, ymax = y_trf.transform(self.get_ybound())\n    xsize = max(abs(xmax - xmin), 1e-30)\n    ysize = max(abs(ymax - ymin), 1e-30)\n\n    box_aspect = fig_aspect * (position.height / position.width)\n    data_ratio = box_aspect / aspect\n\n    y_expander = data_ratio * xsize / ysize - 1\n    # If y_expander > 0, the dy/dx viewLim ratio needs to increase\n    if abs(y_expander) < 0.005:\n        return\n\n    dL = self.dataLim\n    x0, x1 = x_trf.transform(dL.intervalx)\n    y0, y1 = y_trf.transform(dL.intervaly)\n    xr = 1.05 * (x1 - x0)\n    yr = 1.05 * (y1 - y0)\n\n    xmarg = xsize - xr\n    ymarg = ysize - yr\n    Ysize = data_ratio * xsize\n    Xsize = ysize / data_ratio\n    Xmarg = Xsize - xr\n    Ymarg = Ysize - yr\n    # Setting these targets to, e.g., 0.05*xr does not seem to help.\n    xm = 0\n    ym = 0\n\n    shared_x = self in self._shared_x_axes\n    shared_y = self in self._shared_y_axes\n    # Not sure whether we need this check:\n    if shared_x and shared_y:\n        raise RuntimeError(\"adjustable='datalim' is not allowed when both \"\n                           \"axes are shared\")\n\n    # If y is shared, then we are only allowed to change x, etc.\n    if shared_y:\n        adjust_y = False\n    else:\n        if xmarg > xm and ymarg > ym:\n            adjy = ((Ymarg > 0 and y_expander < 0) or\n                    (Xmarg < 0 and y_expander > 0))\n        else:\n            adjy = y_expander > 0\n        adjust_y = shared_x or adjy  # (Ymarg > xmarg)\n\n    if adjust_y:\n        yc = 0.5 * (ymin + ymax)\n        y0 = yc - Ysize / 2.0\n        y1 = yc + Ysize / 2.0\n        self.set_ybound(y_trf.inverted().transform([y0, y1]))\n    else:\n        xc = 0.5 * (xmin + xmax)\n        x0 = xc - Xsize / 2.0\n        x1 = xc + Xsize / 2.0\n        self.set_xbound(x_trf.inverted().transform([x0, x1]))",
                "def axis(self, *args, emit=True, **kwargs):\n    \"\"\"\n    Convenience method to get or set some axis properties.\n\n    Call signatures::\n\n      xmin, xmax, ymin, ymax = axis()\n      xmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\n      xmin, xmax, ymin, ymax = axis(option)\n      xmin, xmax, ymin, ymax = axis(**kwargs)\n\n    Parameters\n    ----------\n    xmin, xmax, ymin, ymax : float, optional\n        The axis limits to be set.  This can also be achieved using ::\n\n            ax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n    option : bool or str\n        If a bool, turns axis lines and labels on or off. If a string,\n        possible values are:\n\n        ======== ==========================================================\n        Value    Description\n        ======== ==========================================================\n        'on'     Turn on axis lines and labels. Same as ``True``.\n        'off'    Turn off axis lines and labels. Same as ``False``.\n        'equal'  Set equal scaling (i.e., make circles circular) by\n                 changing axis limits. This is the same as\n                 ``ax.set_aspect('equal', adjustable='datalim')``.\n                 Explicit data limits may not be respected in this case.\n        'scaled' Set equal scaling (i.e., make circles circular) by\n                 changing dimensions of the plot box. This is the same as\n                 ``ax.set_aspect('equal', adjustable='box', anchor='C')``.\n                 Additionally, further autoscaling will be disabled.\n        'tight'  Set limits just large enough to show all data, then\n                 disable further autoscaling.\n        'auto'   Automatic scaling (fill plot box with data).\n        'image'  'scaled' with axis limits equal to data limits.\n        'square' Square plot; similar to 'scaled', but initially forcing\n                 ``xmax-xmin == ymax-ymin``.\n        ======== ==========================================================\n\n    emit : bool, default: True\n        Whether observers are notified of the axis limit change.\n        This option is passed on to `~.Axes.set_xlim` and\n        `~.Axes.set_ylim`.\n\n    Returns\n    -------\n    xmin, xmax, ymin, ymax : float\n        The axis limits.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.set_xlim\n    matplotlib.axes.Axes.set_ylim\n    \"\"\"\n    if len(args) == 1 and isinstance(args[0], (str, bool)):\n        s = args[0]\n        if s is True:\n            s = 'on'\n        if s is False:\n            s = 'off'\n        s = s.lower()\n        if s == 'on':\n            self.set_axis_on()\n        elif s == 'off':\n            self.set_axis_off()\n        elif s in ('equal', 'tight', 'scaled', 'auto', 'image', 'square'):\n            self.set_autoscale_on(True)\n            self.set_aspect('auto')\n            self.autoscale_view(tight=False)\n            # self.apply_aspect()\n            if s == 'equal':\n                self.set_aspect('equal', adjustable='datalim')\n            elif s == 'scaled':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)  # Req. by Mark Bakker\n            elif s == 'tight':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n            elif s == 'image':\n                self.autoscale_view(tight=True)\n                self.set_autoscale_on(False)\n                self.set_aspect('equal', adjustable='box', anchor='C')\n            elif s == 'square':\n                self.set_aspect('equal', adjustable='box', anchor='C')\n                self.set_autoscale_on(False)\n                xlim = self.get_xlim()\n                ylim = self.get_ylim()\n                edge_size = max(np.diff(xlim), np.diff(ylim))[0]\n                self.set_xlim([xlim[0], xlim[0] + edge_size],\n                              emit=emit, auto=False)\n                self.set_ylim([ylim[0], ylim[0] + edge_size],\n                              emit=emit, auto=False)\n        else:\n            raise ValueError('Unrecognized string %s to axis; '\n                             'try on or off' % s)\n    else:\n        if len(args) >= 1:\n            if len(args) != 1:\n                cbook.warn_deprecated(\n                    \"3.2\", message=\"Passing more than one positional \"\n                    \"argument to axis() is deprecated and will raise a \"\n                    \"TypeError %(removal)s.\")\n            limits = args[0]\n            try:\n                xmin, xmax, ymin, ymax = limits\n            except (TypeError, ValueError) as err:\n                raise TypeError('the first argument to axis() must be an '\n                                'interable of the form '\n                                '[xmin, xmax, ymin, ymax]') from err\n        else:\n            xmin = kwargs.pop('xmin', None)\n            xmax = kwargs.pop('xmax', None)\n            ymin = kwargs.pop('ymin', None)\n            ymax = kwargs.pop('ymax', None)\n        xauto = (None  # Keep autoscale state as is.\n                 if xmin is None and xmax is None\n                 else False)  # Turn off autoscale.\n        yauto = (None\n                 if ymin is None and ymax is None\n                 else False)\n        self.set_xlim(xmin, xmax, emit=emit, auto=xauto)\n        self.set_ylim(ymin, ymax, emit=emit, auto=yauto)\n    if kwargs:\n        raise TypeError(f\"axis() got an unexpected keyword argument \"\n                        f\"'{next(iter(kwargs))}'\")\n    return (*self.get_xlim(), *self.get_ylim())",
                "def get_legend(self):\n    \"\"\"Return the `.Legend` instance, or None if no legend is defined.\"\"\"\n    return self.legend_",
                "def get_images(self):\n    r\"\"\"Return a list of `.AxesImage`\\s contained by the Axes.\"\"\"\n    return cbook.silent_list('AxesImage', self.images)",
                "def get_lines(self):\n    \"\"\"Return a list of lines contained by the Axes.\"\"\"\n    return cbook.silent_list('Line2D', self.lines)",
                "def get_xaxis(self):\n    \"\"\"Return the XAxis instance.\"\"\"\n    return self.xaxis",
                "def get_yaxis(self):\n    \"\"\"Return the YAxis instance.\"\"\"\n    return self.yaxis",
                "def _sci(self, im):\n    \"\"\"\n    Set the current image.\n\n    This image will be the target of colormap functions like\n    `~.pyplot.viridis`, and other functions such as `~.pyplot.clim`.  The\n    current image is an attribute of the current axes.\n    \"\"\"\n    if isinstance(im, mpl.contour.ContourSet):\n        if im.collections[0] not in self.collections:\n            raise ValueError(\"ContourSet must be in current Axes\")\n    elif im not in self.images and im not in self.collections:\n        raise ValueError(\"Argument must be an image, collection, or \"\n                         \"ContourSet in this Axes\")\n    self._current_image = im",
                "def _gci(self):\n    \"\"\"Helper for `~matplotlib.pyplot.gci`; do not use elsewhere.\"\"\"\n    return self._current_image",
                "def has_data(self):\n    \"\"\"\n    Return *True* if any artists have been added to axes.\n\n    This should not be used to determine whether the *dataLim*\n    need to be updated, and may not actually be useful for\n    anything.\n    \"\"\"\n    return (\n        len(self.collections) +\n        len(self.images) +\n        len(self.lines) +\n        len(self.patches)) > 0",
                "def add_artist(self, a):\n    \"\"\"\n    Add an `~.Artist` to the axes, and return the artist.\n\n    Use `add_artist` only for artists for which there is no dedicated\n    \"add\" method; and if necessary, use a method such as `update_datalim`\n    to manually update the dataLim if the artist is to be included in\n    autoscaling.\n\n    If no ``transform`` has been specified when creating the artist (e.g.\n    ``artist.get_transform() == None``) then the transform is set to\n    ``ax.transData``.\n    \"\"\"\n    a.axes = self\n    self.artists.append(a)\n    a._remove_method = self.artists.remove\n    self._set_artist_props(a)\n    a.set_clip_path(self.patch)\n    self.stale = True\n    return a",
                "def add_child_axes(self, ax):\n    \"\"\"\n    Add an `~.AxesBase` to the axes' children; return the child axes.\n\n    This is the lowlevel version.  See `.axes.Axes.inset_axes`.\n    \"\"\"\n\n    # normally axes have themselves as the axes, but these need to have\n    # their parent...\n    # Need to bypass the getter...\n    ax._axes = self\n    ax.stale_callback = martist._stale_axes_callback\n\n    self.child_axes.append(ax)\n    ax._remove_method = self.child_axes.remove\n    self.stale = True\n    return ax",
                "def add_collection(self, collection, autolim=True):\n    \"\"\"\n    Add a `~.Collection` to the axes' collections; return the collection.\n    \"\"\"\n    label = collection.get_label()\n    if not label:\n        collection.set_label('_collection%d' % len(self.collections))\n    self.collections.append(collection)\n    collection._remove_method = self.collections.remove\n    self._set_artist_props(collection)\n\n    if collection.get_clip_path() is None:\n        collection.set_clip_path(self.patch)\n\n    if autolim:\n        # Make sure viewLim is not stale (mostly to match\n        # pre-lazy-autoscale behavior, which is not really better).\n        self._unstale_viewLim()\n        self.update_datalim(collection.get_datalim(self.transData))\n\n    self.stale = True\n    return collection",
                "def add_image(self, image):\n    \"\"\"\n    Add an `~.AxesImage` to the axes' images; return the image.\n    \"\"\"\n    self._set_artist_props(image)\n    if not image.get_label():\n        image.set_label('_image%d' % len(self.images))\n    self.images.append(image)\n    image._remove_method = self.images.remove\n    self.stale = True\n    return image",
                "def _update_image_limits(self, image):\n    xmin, xmax, ymin, ymax = image.get_extent()\n    self.axes.update_datalim(((xmin, ymin), (xmax, ymax)))",
                "def add_line(self, line):\n    \"\"\"\n    Add a `.Line2D` to the axes' lines; return the line.\n    \"\"\"\n    self._set_artist_props(line)\n    if line.get_clip_path() is None:\n        line.set_clip_path(self.patch)\n\n    self._update_line_limits(line)\n    if not line.get_label():\n        line.set_label('_line%d' % len(self.lines))\n    self.lines.append(line)\n    line._remove_method = self.lines.remove\n    self.stale = True\n    return line",
                "def _add_text(self, txt):\n    \"\"\"\n    Add a `~.Text` to the axes' texts; return the text.\n    \"\"\"\n    self._set_artist_props(txt)\n    self.texts.append(txt)\n    txt._remove_method = self.texts.remove\n    self.stale = True\n    return txt",
                "def _update_line_limits(self, line):\n    \"\"\"\n    Figures out the data limit of the given line, updating self.dataLim.\n    \"\"\"\n    path = line.get_path()\n    if path.vertices.size == 0:\n        return\n\n    line_trans = line.get_transform()\n\n    if line_trans == self.transData:\n        data_path = path\n\n    elif any(line_trans.contains_branch_seperately(self.transData)):\n        # identify the transform to go from line's coordinates\n        # to data coordinates\n        trans_to_data = line_trans - self.transData\n\n        # if transData is affine we can use the cached non-affine component\n        # of line's path. (since the non-affine part of line_trans is\n        # entirely encapsulated in trans_to_data).\n        if self.transData.is_affine:\n            line_trans_path = line._get_transformed_path()\n            na_path, _ = line_trans_path.get_transformed_path_and_affine()\n            data_path = trans_to_data.transform_path_affine(na_path)\n        else:\n            data_path = trans_to_data.transform_path(path)\n    else:\n        # for backwards compatibility we update the dataLim with the\n        # coordinate range of the given path, even though the coordinate\n        # systems are completely different. This may occur in situations\n        # such as when ax.transAxes is passed through for absolute\n        # positioning.\n        data_path = path\n\n    if data_path.vertices.size > 0:\n        updatex, updatey = line_trans.contains_branch_seperately(\n            self.transData)\n        self.dataLim.update_from_path(data_path,\n                                      self.ignore_existing_data_limits,\n                                      updatex=updatex,\n                                      updatey=updatey)\n        self.ignore_existing_data_limits = False",
                "def add_patch(self, p):\n    \"\"\"\n    Add a `~.Patch` to the axes' patches; return the patch.\n    \"\"\"\n    self._set_artist_props(p)\n    if p.get_clip_path() is None:\n        p.set_clip_path(self.patch)\n    self._update_patch_limits(p)\n    self.patches.append(p)\n    p._remove_method = self.patches.remove\n    return p",
                "def _update_patch_limits(self, patch):\n    \"\"\"Update the data limits for the given patch.\"\"\"\n    # hist can add zero height Rectangles, which is useful to keep\n    # the bins, counts and patches lined up, but it throws off log\n    # scaling.  We'll ignore rects with zero height or width in\n    # the auto-scaling\n\n    # cannot check for '==0' since unitized data may not compare to zero\n    # issue #2150 - we update the limits if patch has non zero width\n    # or height.\n    if (isinstance(patch, mpatches.Rectangle) and\n            ((not patch.get_width()) and (not patch.get_height()))):\n        return\n    vertices = patch.get_path().vertices\n    if vertices.size > 0:\n        xys = patch.get_patch_transform().transform(vertices)\n        if patch.get_data_transform() != self.transData:\n            patch_to_data = (patch.get_data_transform() -\n                             self.transData)\n            xys = patch_to_data.transform(xys)\n\n        updatex, updatey = patch.get_transform().\\\n            contains_branch_seperately(self.transData)\n        self.update_datalim(xys, updatex=updatex,\n                            updatey=updatey)",
                "def add_table(self, tab):\n    \"\"\"\n    Add a `~.Table` to the axes' tables; return the table.\n    \"\"\"\n    self._set_artist_props(tab)\n    self.tables.append(tab)\n    tab.set_clip_path(self.patch)\n    tab._remove_method = self.tables.remove\n    return tab",
                "def add_container(self, container):\n    \"\"\"\n    Add a `~.Container` to the axes' containers; return the container.\n    \"\"\"\n    label = container.get_label()\n    if not label:\n        container.set_label('_container%d' % len(self.containers))\n    self.containers.append(container)\n    container._remove_method = self.containers.remove\n    return container",
                "def _on_units_changed(self, scalex=False, scaley=False):\n    \"\"\"\n    Callback for processing changes to axis units.\n\n    Currently requests updates of data limits and view limits.\n    \"\"\"\n    self.relim()\n    self._request_autoscale_view(scalex=scalex, scaley=scaley)",
                "def relim(self, visible_only=False):\n    \"\"\"\n    Recompute the data limits based on current artists.\n\n    At present, `~.Collection` instances are not supported.\n\n    Parameters\n    ----------\n    visible_only : bool, default: False\n        Whether to exclude invisible artists.\n    \"\"\"\n    # Collections are deliberately not supported (yet); see\n    # the TODO note in artists.py.\n    self.dataLim.ignore(True)\n    self.dataLim.set_points(mtransforms.Bbox.null().get_points())\n    self.ignore_existing_data_limits = True\n\n    for line in self.lines:\n        if not visible_only or line.get_visible():\n            self._update_line_limits(line)\n\n    for p in self.patches:\n        if not visible_only or p.get_visible():\n            self._update_patch_limits(p)\n\n    for image in self.images:\n        if not visible_only or image.get_visible():\n            self._update_image_limits(image)",
                "def update_datalim(self, xys, updatex=True, updatey=True):\n    \"\"\"\n    Extend the `~.Axes.dataLim` Bbox to include the given points.\n\n    If no data is set currently, the Bbox will ignore its limits and set\n    the bound to be the bounds of the xydata (*xys*). Otherwise, it will\n    compute the bounds of the union of its current data and the data in\n    *xys*.\n\n    Parameters\n    ----------\n    xys : 2D array-like\n        The points to include in the data limits Bbox. This can be either\n        a list of (x, y) tuples or a Nx2 array.\n\n    updatex, updatey : bool, default: True\n        Whether to update the x/y limits.\n    \"\"\"\n    xys = np.asarray(xys)\n    if not len(xys):\n        return\n    self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits,\n                                     updatex=updatex, updatey=updatey)\n    self.ignore_existing_data_limits = False",
                "@cbook.deprecated(\n    \"3.3\", alternative=\"ax.dataLim.set(Bbox.union([ax.dataLim, bounds]))\")\ndef update_datalim_bounds(self, bounds):\n    \"\"\"\n    Extend the `~.Axes.datalim` Bbox to include the given\n    `~matplotlib.transforms.Bbox`.\n\n    Parameters\n    ----------\n    bounds : `~matplotlib.transforms.Bbox`\n    \"\"\"\n    self.dataLim.set(mtransforms.Bbox.union([self.dataLim, bounds]))",
                "def _process_unit_info(self, xdata=None, ydata=None, kwargs=None):\n    \"\"\"Look for unit *kwargs* and update the axis instances as necessary\"\"\"\n\n    def _process_single_axis(data, axis, unit_name, kwargs):\n        # Return if there's no axis set\n        if axis is None:\n            return kwargs\n\n        if data is not None:\n            # We only need to update if there is nothing set yet.\n            if not axis.have_units():\n                axis.update_units(data)\n\n        # Check for units in the kwargs, and if present update axis\n        if kwargs is not None:\n            units = kwargs.pop(unit_name, axis.units)\n            if self.name == 'polar':\n                polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n                units = kwargs.pop(polar_units[unit_name], units)\n\n            if units != axis.units:\n                axis.set_units(units)\n                # If the units being set imply a different converter,\n                # we need to update.\n                if data is not None:\n                    axis.update_units(data)\n        return kwargs\n\n    kwargs = _process_single_axis(xdata, self.xaxis, 'xunits', kwargs)\n    kwargs = _process_single_axis(ydata, self.yaxis, 'yunits', kwargs)\n    return kwargs",
                "def in_axes(self, mouseevent):\n    \"\"\"\n    Return *True* if the given *mouseevent* (in display coords)\n    is in the Axes\n    \"\"\"\n    return self.patch.contains(mouseevent)[0]",
                "def get_autoscale_on(self):\n    \"\"\"\n    Get whether autoscaling is applied for both axes on plot commands\n    \"\"\"\n    return self._autoscaleXon and self._autoscaleYon",
                "def get_autoscalex_on(self):\n    \"\"\"\n    Get whether autoscaling for the x-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleXon",
                "def get_autoscaley_on(self):\n    \"\"\"\n    Get whether autoscaling for the y-axis is applied on plot commands\n    \"\"\"\n    return self._autoscaleYon",
                "def set_autoscale_on(self, b):\n    \"\"\"\n    Set whether autoscaling is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b\n    self._autoscaleYon = b",
                "def set_autoscalex_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the x-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleXon = b",
                "def set_autoscaley_on(self, b):\n    \"\"\"\n    Set whether autoscaling for the y-axis is applied on plot commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._autoscaleYon = b",
                "@property\ndef use_sticky_edges(self):\n    \"\"\"\n    When autoscaling, whether to obey all `Artist.sticky_edges`.\n\n    Default is ``True``.\n\n    Setting this to ``False`` ensures that the specified margins\n    will be applied, even if the plot includes an image, for\n    example, which would otherwise force a view limit to coincide\n    with its data limit.\n\n    The changing this property does not change the plot until\n    `autoscale` or `autoscale_view` is called.\n    \"\"\"\n    return self._use_sticky_edges",
                "@use_sticky_edges.setter\ndef use_sticky_edges(self, b):\n    self._use_sticky_edges = bool(b)",
                "def set_xmargin(self, m):\n    \"\"\"\n    Set padding of X data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError(\"margin must be greater than -0.5\")\n    self._xmargin = m\n    self.stale = True",
                "def set_ymargin(self, m):\n    \"\"\"\n    Set padding of Y data limits prior to autoscaling.\n\n    *m* times the data interval will be added to each\n    end of that interval before it is used in autoscaling.\n    For example, if your data is in the range [0, 2], a factor of\n    ``m = 0.1`` will result in a range [-0.2, 2.2].\n\n    Negative values -0.5 < m < 0 will result in clipping of the data range.\n    I.e. for a data range [0, 2], a factor of ``m = -0.1`` will result in\n    a range [0.2, 1.8].\n\n    Parameters\n    ----------\n    m : float greater than -0.5\n    \"\"\"\n    if m <= -0.5:\n        raise ValueError(\"margin must be greater than -0.5\")\n    self._ymargin = m\n    self.stale = True",
                "def margins(self, *margins, x=None, y=None, tight=True):\n    \"\"\"\n    Set or retrieve autoscaling margins.\n\n    The padding added to each limit of the axes is the *margin*\n    times the data interval. All input parameters must be floats\n    within the range [0, 1]. Passing both positional and keyword\n    arguments is invalid and will raise a TypeError. If no\n    arguments (positional or otherwise) are provided, the current\n    margins will remain in place and simply be returned.\n\n    Specifying any margin changes only the autoscaling; for example,\n    if *xmargin* is not None, then *xmargin* times the X data\n    interval will be added to each end of that interval before\n    it is used in autoscaling.\n\n    Parameters\n    ----------\n    *margins : float, optional\n        If a single positional argument is provided, it specifies\n        both margins of the x-axis and y-axis limits. If two\n        positional arguments are provided, they will be interpreted\n        as *xmargin*, *ymargin*. If setting the margin on a single\n        axis is desired, use the keyword arguments described below.\n\n    x, y : float, optional\n        Specific margin values for the x-axis and y-axis,\n        respectively. These cannot be used with positional\n        arguments, but can be used individually to alter on e.g.,\n        only the y-axis.\n\n    tight : bool or None, default: True\n        The *tight* parameter is passed to :meth:`autoscale_view`,\n        which is executed after a margin is changed; the default\n        here is *True*, on the assumption that when margins are\n        specified, no additional padding to match tick marks is\n        usually desired.  Set *tight* to *None* will preserve\n        the previous setting.\n\n    Returns\n    -------\n    xmargin, ymargin : float\n\n    Notes\n    -----\n    If a previously used Axes method such as :meth:`pcolor` has set\n    :attr:`use_sticky_edges` to `True`, only the limits not set by\n    the \"sticky artists\" will be modified. To force all of the\n    margins to be set, set :attr:`use_sticky_edges` to `False`\n    before calling :meth:`margins`.\n    \"\"\"\n\n    if margins and x is not None and y is not None:\n        raise TypeError('Cannot pass both positional and keyword '\n                        'arguments for x and/or y.')\n    elif len(margins) == 1:\n        x = y = margins[0]\n    elif len(margins) == 2:\n        x, y = margins\n    elif margins:\n        raise TypeError('Must pass a single positional argument for all '\n                        'margins, or one for each margin (x, y).')\n\n    if x is None and y is None:\n        if tight is not True:\n            cbook._warn_external(f'ignoring tight={tight!r} in get mode')\n        return self._xmargin, self._ymargin\n\n    if x is not None:\n        self.set_xmargin(x)\n    if y is not None:\n        self.set_ymargin(y)\n\n    self._request_autoscale_view(\n        tight=tight, scalex=(x is not None), scaley=(y is not None)\n    )",
                "def set_rasterization_zorder(self, z):\n    \"\"\"\n    Parameters\n    ----------\n    z : float or None\n        zorder below which artists are rasterized.  ``None`` means that\n        artists do not get rasterized based on zorder.\n    \"\"\"\n    self._rasterization_zorder = z\n    self.stale = True",
                "def get_rasterization_zorder(self):\n    \"\"\"Return the zorder value below which artists will be rasterized.\"\"\"\n    return self._rasterization_zorder",
                "def autoscale(self, enable=True, axis='both', tight=None):\n    \"\"\"\n    Autoscale the axis view to the data (toggle).\n\n    Convenience method for simple axis view autoscaling.\n    It turns autoscaling on or off, and then,\n    if autoscaling for either axis is on, it performs\n    the autoscaling on the specified axis or axes.\n\n    Parameters\n    ----------\n    enable : bool or None, default: True\n        True turns autoscaling on, False turns it off.\n        None leaves the autoscaling state unchanged.\n    axis : {'both', 'x', 'y'}, default: 'both'\n        Which axis to operate on.\n    tight : bool or None, default: None\n        If True, first set the margins to zero.  Then, this argument is\n        forwarded to `autoscale_view` (regardless of its value); see the\n        description of its behavior there.\n    \"\"\"\n    if enable is None:\n        scalex = True\n        scaley = True\n    else:\n        scalex = False\n        scaley = False\n        if axis in ['x', 'both']:\n            self._autoscaleXon = bool(enable)\n            scalex = self._autoscaleXon\n        if axis in ['y', 'both']:\n            self._autoscaleYon = bool(enable)\n            scaley = self._autoscaleYon\n    if tight and scalex:\n        self._xmargin = 0\n    if tight and scaley:\n        self._ymargin = 0\n    self._request_autoscale_view(tight=tight, scalex=scalex, scaley=scaley)",
                "def autoscale_view(self, tight=None, scalex=True, scaley=True):\n    \"\"\"\n    Autoscale the view limits using the data limits.\n\n    Parameters\n    ----------\n    tight : bool or None\n        If *True*, only expand the axis limits using the margins.  Note\n        that unlike for `autoscale`, ``tight=True`` does *not* set the\n        margins to zero.\n\n        If *False* and :rc:`axes.autolimit_mode` is 'round_numbers', then\n        after expansion by the margins, further expand the axis limits\n        using the axis major locator.\n\n        If None (the default), reuse the value set in the previous call to\n        `autoscale_view` (the initial value is False, but the default style\n        sets :rc:`axes.autolimit_mode` to 'data', in which case this\n        behaves like True).\n\n    scalex : bool, default: True\n        Whether to autoscale the x axis.\n\n    scaley : bool, default: True\n        Whether to autoscale the y axis.\n\n    Notes\n    -----\n    The autoscaling preserves any preexisting axis direction reversal.\n\n    The data limits are not updated automatically when artist data are\n    changed after the artist has been added to an Axes instance.  In that\n    case, use :meth:`matplotlib.axes.Axes.relim` prior to calling\n    autoscale_view.\n\n    If the views of the axes are fixed, e.g. via `set_xlim`, they will\n    not be changed by autoscale_view().\n    See :meth:`matplotlib.axes.Axes.autoscale` for an alternative.\n    \"\"\"\n    if tight is not None:\n        self._tight = bool(tight)\n\n    x_stickies = y_stickies = np.array([])\n    if self.use_sticky_edges:\n        # Only iterate over axes and artists if needed.  The check for\n        # ``hasattr(ax, \"lines\")`` is necessary because this can be called\n        # very early in the axes init process (e.g., for twin axes) when\n        # these attributes don't even exist yet, in which case\n        # `get_children` would raise an AttributeError.\n        if self._xmargin and scalex and self._autoscaleXon:\n            x_stickies = np.sort(np.concatenate([\n                artist.sticky_edges.x\n                for ax in self._shared_x_axes.get_siblings(self)\n                if hasattr(ax, \"lines\")\n                for artist in ax.get_children()]))\n        if self._ymargin and scaley and self._autoscaleYon:\n            y_stickies = np.sort(np.concatenate([\n                artist.sticky_edges.y\n                for ax in self._shared_y_axes.get_siblings(self)\n                if hasattr(ax, \"lines\")\n                for artist in ax.get_children()]))\n    if self.get_xscale().lower() == 'log':\n        x_stickies = x_stickies[x_stickies > 0]\n    if self.get_yscale().lower() == 'log':\n        y_stickies = y_stickies[y_stickies > 0]\n\n    def handle_single_axis(scale, autoscaleon, shared_axes, interval,\n                           minpos, axis, margin, stickies, set_bound):\n\n        if not (scale and autoscaleon):\n            return  # nothing to do...\n\n        shared = shared_axes.get_siblings(self)\n        dl = [ax.dataLim for ax in shared]\n        # ignore non-finite data limits if good limits exist\n        finite_dl = [d for d in dl if np.isfinite(d).all()]\n        if len(finite_dl):\n            # if finite limits exist for at least one axis (and the\n            # other is infinite), restore the finite limits\n            x_finite = [d for d in dl\n                        if (np.isfinite(d.intervalx).all() and\n                            (d not in finite_dl))]\n            y_finite = [d for d in dl\n                        if (np.isfinite(d.intervaly).all() and\n                            (d not in finite_dl))]\n\n            dl = finite_dl\n            dl.extend(x_finite)\n            dl.extend(y_finite)\n\n        bb = mtransforms.BboxBase.union(dl)\n        x0, x1 = getattr(bb, interval)\n        # If x0 and x1 are non finite, use the locator to figure out\n        # default limits.\n        locator = axis.get_major_locator()\n        x0, x1 = locator.nonsingular(x0, x1)\n\n        # Prevent margin addition from crossing a sticky value.  Small\n        # tolerances (whose values come from isclose()) must be used due to\n        # floating point issues with streamplot.\n        def tol(x): return 1e-5 * abs(x) + 1e-8\n        # Index of largest element < x0 + tol, if any.\n        i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n        x0bound = stickies[i0] if i0 != -1 else None\n        # Index of smallest element > x1 - tol, if any.\n        i1 = stickies.searchsorted(x1 - tol(x1))\n        x1bound = stickies[i1] if i1 != len(stickies) else None\n\n        # Add the margin in figure space and then transform back, to handle\n        # non-linear scales.\n        minpos = getattr(bb, minpos)\n        transform = axis.get_transform()\n        inverse_trans = transform.inverted()\n        x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n        x0t, x1t = transform.transform([x0, x1])\n        delta = (x1t - x0t) * margin\n        if not np.isfinite(delta):\n            delta = 0  # If a bound isn't finite, set margin to zero.\n        x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n\n        # Apply sticky bounds.\n        if x0bound is not None:\n            x0 = max(x0, x0bound)\n        if x1bound is not None:\n            x1 = min(x1, x1bound)\n\n        if not self._tight:\n            x0, x1 = locator.view_limits(x0, x1)\n        set_bound(x0, x1)\n        # End of definition of internal function 'handle_single_axis'.\n\n    handle_single_axis(\n        scalex, self._autoscaleXon, self._shared_x_axes, 'intervalx',\n        'minposx', self.xaxis, self._xmargin, x_stickies, self.set_xbound)\n    handle_single_axis(\n        scaley, self._autoscaleYon, self._shared_y_axes, 'intervaly',\n        'minposy', self.yaxis, self._ymargin, y_stickies, self.set_ybound)",
                "def _get_axis_list(self):\n    return self.xaxis, self.yaxis",
                "def _get_axis_map(self):\n    \"\"\"\n    Return a mapping of `Axis` \"names\" to `Axis` instances.\n\n    The `Axis` name is derived from the attribute under which the instance\n    is stored, so e.g. for polar axes, the theta-axis is still named \"x\"\n    and the r-axis is still named \"y\" (for back-compatibility).\n\n    In practice, this means that the entries are typically \"x\" and \"y\", and\n    additionally \"z\" for 3D axes.\n    \"\"\"\n    d = {}\n    axis_list = self._get_axis_list()\n    for k, v in vars(self).items():\n        if k.endswith(\"axis\") and v in axis_list:\n            d[k[:-len(\"axis\")]] = v\n    return d",
                "def _update_title_position(self, renderer):\n    \"\"\"\n    Update the title position based on the bounding box enclosing\n    all the ticklabels and x-axis spine and xlabel...\n    \"\"\"\n\n    if self._autotitlepos is not None and not self._autotitlepos:\n        _log.debug('title position was updated manually, not adjusting')\n        return\n\n    titles = (self.title, self._left_title, self._right_title)\n\n    for title in titles:\n        x, _ = title.get_position()\n        # need to start again in case of window resizing\n        title.set_position((x, 1.0))\n        # need to check all our twins too...\n        axs = self._twinned_axes.get_siblings(self)\n        # and all the children\n        for ax in self.child_axes:\n            if ax is not None:\n                locator = ax.get_axes_locator()\n                if locator:\n                    pos = locator(self, renderer)\n                    ax.apply_aspect(pos)\n                else:\n                    ax.apply_aspect()\n                axs = axs + [ax]\n        top = 0\n        for ax in axs:\n            if (ax.xaxis.get_ticks_position() in ['top', 'unknown']\n                    or ax.xaxis.get_label_position() == 'top'):\n                bb = ax.xaxis.get_tightbbox(renderer)\n            else:\n                bb = ax.get_window_extent(renderer)\n            if bb is not None:\n                top = max(top, bb.ymax)\n        if title.get_window_extent(renderer).ymin < top:\n            _, y = self.transAxes.inverted().transform((0, top))\n            title.set_position((x, y))\n            # empirically, this doesn't always get the min to top,\n            # so we need to adjust again.\n            if title.get_window_extent(renderer).ymin < top:\n                _, y = self.transAxes.inverted().transform(\n                    (0., 2 * top - title.get_window_extent(renderer).ymin))\n                title.set_position((x, y))\n\n    ymax = max(title.get_position()[1] for title in titles)\n    for title in titles:\n        # now line up all the titles at the highest baseline.\n        x, _ = title.get_position()\n        title.set_position((x, ymax))",
                "@martist.allow_rasterization\n@cbook._delete_parameter(\n    \"3.3\", \"inframe\", alternative=\"Axes.redraw_in_frame()\")\ndef draw(self, renderer=None, inframe=False):\n    # docstring inherited\n    if renderer is None:\n        cbook.warn_deprecated(\n            \"3.3\", message=\"Support for not passing the 'renderer' \"\n            \"parameter to Axes.draw() is deprecated since %(since)s and \"\n            \"will be removed %(removal)s.  Use axes.draw_artist(axes) \"\n            \"instead.\")\n        renderer = self.figure._cachedRenderer\n    if renderer is None:\n        raise RuntimeError('No renderer defined')\n    if not self.get_visible():\n        return\n    self._unstale_viewLim()\n\n    renderer.open_group('axes', gid=self.get_gid())\n\n    # prevent triggering call backs during the draw process\n    self._stale = True\n\n    # loop over self and child axes...\n    locator = self.get_axes_locator()\n    if locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n\n    artists = self.get_children()\n    artists.remove(self.patch)\n\n    # the frame draws the edges around the axes patch -- we\n    # decouple these so the patch can be in the background and the\n    # frame in the foreground. Do this before drawing the axis\n    # objects so that the spine has the opportunity to update them.\n    if not (self.axison and self._frameon):\n        for spine in self.spines.values():\n            artists.remove(spine)\n\n    self._update_title_position(renderer)\n\n    if not self.axison or inframe:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n\n    if inframe:\n        artists.remove(self.title)\n        artists.remove(self._left_title)\n        artists.remove(self._right_title)\n\n    if not self.figure.canvas.is_saving():\n        artists = [a for a in artists\n                   if not a.get_animated() or a in self.images]\n    artists = sorted(artists, key=attrgetter('zorder'))\n\n    # rasterize artists with negative zorder\n    # if the minimum zorder is negative, start rasterization\n    rasterization_zorder = self._rasterization_zorder\n\n    if (rasterization_zorder is not None and\n            artists and artists[0].zorder < rasterization_zorder):\n        renderer.start_rasterizing()\n        artists_rasterized = [a for a in artists\n                              if a.zorder < rasterization_zorder]\n        artists = [a for a in artists\n                   if a.zorder >= rasterization_zorder]\n    else:\n        artists_rasterized = []\n\n    # the patch draws the background rectangle -- the frame below\n    # will draw the edges\n    if self.axison and self._frameon:\n        self.patch.draw(renderer)\n\n    if artists_rasterized:\n        for a in artists_rasterized:\n            a.draw(renderer)\n        renderer.stop_rasterizing()\n\n    mimage._draw_list_compositing_images(renderer, self, artists)\n\n    renderer.close_group('axes')\n    self.stale = False",
                "def draw_artist(self, a):\n    \"\"\"\n    Efficiently redraw a single artist.\n\n    This method can only be used after an initial draw which caches the\n    renderer.\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError(\"draw_artist can only be used after an \"\n                             \"initial draw which caches the renderer\")\n    a.draw(self.figure._cachedRenderer)",
                "def redraw_in_frame(self):\n    \"\"\"\n    Efficiently redraw Axes data, but not axis ticks, labels, etc.\n\n    This method can only be used after an initial draw which caches the\n    renderer.\n    \"\"\"\n    if self.figure._cachedRenderer is None:\n        raise AttributeError(\"redraw_in_frame can only be used after an \"\n                             \"initial draw which caches the renderer\")\n    with ExitStack() as stack:\n        for artist in [*self._get_axis_list(),\n                       self.title, self._left_title, self._right_title]:\n            stack.push(artist.set_visible, artist.get_visible())\n            artist.set_visible(False)\n        self.draw(self.figure._cachedRenderer)",
                "def get_renderer_cache(self):\n    return self.figure._cachedRenderer",
                "def get_frame_on(self):\n    \"\"\"Get whether the axes rectangle patch is drawn.\"\"\"\n    return self._frameon",
                "def set_frame_on(self, b):\n    \"\"\"\n    Set whether the axes rectangle patch is drawn.\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._frameon = b\n    self.stale = True",
                "def get_axisbelow(self):\n    \"\"\"\n    Get whether axis ticks and gridlines are above or below most artists.\n\n    Returns\n    -------\n    bool or 'line'\n\n    See Also\n    --------\n    set_axisbelow\n    \"\"\"\n    return self._axisbelow",
                "def set_axisbelow(self, b):\n    \"\"\"\n    Set whether axis ticks and gridlines are above or below most artists.\n\n    This controls the zorder of the ticks and gridlines. For more\n    information on the zorder see :doc:`/gallery/misc/zorder_demo`.\n\n    Parameters\n    ----------\n    b : bool or 'line'\n        Possible values:\n\n        - *True* (zorder = 0.5): Ticks and gridlines are below all Artists.\n        - 'line' (zorder = 1.5): Ticks and gridlines are above patches\n          (e.g. rectangles, with default zorder = 1) but still below lines\n          and markers (with their default zorder = 2).\n        - *False* (zorder = 2.5): Ticks and gridlines are above patches\n          and lines / markers.\n\n    See Also\n    --------\n    get_axisbelow\n    \"\"\"\n    self._axisbelow = axisbelow = validate_axisbelow(b)\n    if axisbelow is True:\n        zorder = 0.5\n    elif axisbelow is False:\n        zorder = 2.5\n    elif axisbelow == \"line\":\n        zorder = 1.5\n    else:\n        raise ValueError(\"Unexpected axisbelow value\")\n    for axis in self._get_axis_list():\n        axis.set_zorder(zorder)\n    self.stale = True",
                "@docstring.dedent_interpd\ndef grid(self, b=None, which='major', axis='both', **kwargs):\n    \"\"\"\n    Configure the grid lines.\n\n    Parameters\n    ----------\n    b : bool or None, optional\n        Whether to show the grid lines. If any *kwargs* are supplied,\n        it is assumed you want the grid on and *b* will be set to True.\n\n        If *b* is *None* and there are no *kwargs*, this toggles the\n        visibility of the lines.\n\n    which : {'major', 'minor', 'both'}, optional\n        The grid lines to apply the changes on.\n\n    axis : {'both', 'x', 'y'}, optional\n        The axis to apply the changes on.\n\n    **kwargs : `.Line2D` properties\n        Define the line properties of the grid, e.g.::\n\n            grid(color='r', linestyle='-', linewidth=2)\n\n        Valid keyword arguments are:\n\n        %(_Line2D_docstr)s\n\n    Notes\n    -----\n    The axis is drawn as a unit, so the effective zorder for drawing the\n    grid is determined by the zorder of each axis, not by the zorder of the\n    `.Line2D` objects comprising the grid.  Therefore, to set grid zorder,\n    use `.set_axisbelow` or, for more control, call the\n    `~.Artist.set_zorder` method of each axis.\n    \"\"\"\n    if len(kwargs):\n        b = True\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        self.xaxis.grid(b, which=which, **kwargs)\n    if axis in ['y', 'both']:\n        self.yaxis.grid(b, which=which, **kwargs)",
                "def ticklabel_format(self, *, axis='both', style='', scilimits=None,\n                     useOffset=None, useLocale=None, useMathText=None):\n    r\"\"\"\n    Configure the `.ScalarFormatter` used by default for linear axes.\n\n    If a parameter is not set, the corresponding property of the formatter\n    is left unchanged.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, default: 'both'\n        The axes to configure.  Only major ticks are affected.\n\n    style : {'sci', 'scientific', 'plain'}\n        Whether to use scientific notation.\n        The formatter default is to use scientific notation.\n\n    scilimits : pair of ints (m, n)\n        Scientific notation is used only for numbers outside the range\n        10\\ :sup:`m` to 10\\ :sup:`n` (and only if the formatter is\n        configured to use scientific notation at all).  Use (0, 0) to\n        include all numbers.  Use (m, m) where m != 0 to fix the order of\n        magnitude to 10\\ :sup:`m`.\n        The formatter default is :rc:`axes.formatter.limits`.\n\n    useOffset : bool or float\n        If True, the offset is calculated as needed.\n        If False, no offset is used.\n        If a numeric value, it sets the offset.\n        The formatter default is :rc:`axes.formatter.useoffset`.\n\n    useLocale : bool\n        Whether to format the number using the current locale or using the\n        C (English) locale.  This affects e.g. the decimal separator.  The\n        formatter default is :rc:`axes.formatter.use_locale`.\n\n    useMathText : bool\n        Render the offset and scientific notation in mathtext.\n        The formatter default is :rc:`axes.formatter.use_mathtext`.\n\n    Raises\n    ------\n    AttributeError\n        If the current formatter is not a `.ScalarFormatter`.\n    \"\"\"\n    style = style.lower()\n    axis = axis.lower()\n    if scilimits is not None:\n        try:\n            m, n = scilimits\n            m + n + 1  # check that both are numbers\n        except (ValueError, TypeError) as err:\n            raise ValueError(\"scilimits must be a sequence of 2 integers\"\n                             ) from err\n    STYLES = {'sci': True, 'scientific': True, 'plain': False, '': None}\n    is_sci_style = cbook._check_getitem(STYLES, style=style)\n    axis_map = {**{k: [v] for k, v in self._get_axis_map().items()},\n                'both': self._get_axis_list()}\n    axises = cbook._check_getitem(axis_map, axis=axis)\n    try:\n        for axis in axises:\n            if is_sci_style is not None:\n                axis.major.formatter.set_scientific(is_sci_style)\n            if scilimits is not None:\n                axis.major.formatter.set_powerlimits(scilimits)\n            if useOffset is not None:\n                axis.major.formatter.set_useOffset(useOffset)\n            if useLocale is not None:\n                axis.major.formatter.set_useLocale(useLocale)\n            if useMathText is not None:\n                axis.major.formatter.set_useMathText(useMathText)\n    except AttributeError as err:\n        raise AttributeError(\n            \"This method only works with the ScalarFormatter\") from err",
                "def locator_params(self, axis='both', tight=None, **kwargs):\n    \"\"\"\n    Control behavior of major tick locators.\n\n    Because the locator is involved in autoscaling, `~.Axes.autoscale_view`\n    is called automatically after the parameters are changed.\n\n    Parameters\n    ----------\n    axis : {'both', 'x', 'y'}, default: 'both'\n        The axis on which to operate.\n\n    tight : bool or None, optional\n        Parameter passed to `~.Axes.autoscale_view`.\n        Default is None, for no change.\n\n    Other Parameters\n    ----------------\n    **kwargs\n        Remaining keyword arguments are passed to directly to the\n        ``set_params()`` method of the locator. Supported keywords depend\n        on the type of the locator. See for example\n        `~.ticker.MaxNLocator.set_params` for the `.ticker.MaxNLocator`\n        used by default for linear axes.\n\n    Examples\n    --------\n    When plotting small subplots, one might want to reduce the maximum\n    number of ticks and use tight bounds, for example::\n\n        ax.locator_params(tight=True, nbins=4)\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    update_x = axis in ['x', 'both']\n    update_y = axis in ['y', 'both']\n    if update_x:\n        self.xaxis.get_major_locator().set_params(**kwargs)\n    if update_y:\n        self.yaxis.get_major_locator().set_params(**kwargs)\n    self._request_autoscale_view(tight=tight,\n                                 scalex=update_x, scaley=update_y)\n    self.stale = True",
                "def tick_params(self, axis='both', **kwargs):\n    \"\"\"\n    Change the appearance of ticks, tick labels, and gridlines.\n\n    Tick properties that are not explicitly set using the keyword\n    arguments remain unchanged unless *reset* is True.\n\n    Parameters\n    ----------\n    axis : {'x', 'y', 'both'}, default: 'both'\n        The axis to which the parameters are applied.\n    which : {'major', 'minor', 'both'}, default: 'major'\n        The group of ticks to which the parameters are applied.\n    reset : bool, default: False\n        Whether to reset the ticks to defaults before updating them.\n\n    Other Parameters\n    ----------------\n    direction : {'in', 'out', 'inout'}\n        Puts ticks inside the axes, outside the axes, or both.\n    length : float\n        Tick length in points.\n    width : float\n        Tick width in points.\n    color : color\n        Tick color.\n    pad : float\n        Distance in points between tick and label.\n    labelsize : float or str\n        Tick label font size in points or as a string (e.g., 'large').\n    labelcolor : color\n        Tick label color.\n    colors : color\n        Tick color and label color.\n    zorder : float\n        Tick and label zorder.\n    bottom, top, left, right : bool\n        Whether to draw the respective ticks.\n    labelbottom, labeltop, labelleft, labelright : bool\n        Whether to draw the respective tick labels.\n    labelrotation : float\n        Tick label rotation\n    grid_color : color\n        Gridline color.\n    grid_alpha : float\n        Transparency of gridlines: 0 (transparent) to 1 (opaque).\n    grid_linewidth : float\n        Width of gridlines in points.\n    grid_linestyle : str\n        Any valid `.Line2D` line style spec.\n\n    Examples\n    --------\n    ::\n\n        ax.tick_params(direction='out', length=6, width=2, colors='r',\n                       grid_color='r', grid_alpha=0.5)\n\n    This will make all major ticks be red, pointing out of the box,\n    and with dimensions 6 points by 2 points.  Tick labels will\n    also be red.  Gridlines will be red and translucent.\n\n    \"\"\"\n    cbook._check_in_list(['x', 'y', 'both'], axis=axis)\n    if axis in ['x', 'both']:\n        xkw = dict(kwargs)\n        xkw.pop('left', None)\n        xkw.pop('right', None)\n        xkw.pop('labelleft', None)\n        xkw.pop('labelright', None)\n        self.xaxis.set_tick_params(**xkw)\n    if axis in ['y', 'both']:\n        ykw = dict(kwargs)\n        ykw.pop('top', None)\n        ykw.pop('bottom', None)\n        ykw.pop('labeltop', None)\n        ykw.pop('labelbottom', None)\n        self.yaxis.set_tick_params(**ykw)",
                "def set_axis_off(self):\n    \"\"\"\n    Turn the x- and y-axis off.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = False\n    self.stale = True",
                "def set_axis_on(self):\n    \"\"\"\n    Turn the x- and y-axis on.\n\n    This affects the axis lines, ticks, ticklabels, grid and axis labels.\n    \"\"\"\n    self.axison = True\n    self.stale = True",
                "def invert_xaxis(self):\n    \"\"\"\n    Invert the x-axis.\n\n    See Also\n    --------\n    xaxis_inverted\n    get_xlim, set_xlim\n    get_xbound, set_xbound\n    \"\"\"\n    self.xaxis.set_inverted(not self.xaxis.get_inverted())",
                "def get_xbound(self):\n    \"\"\"\n    Return the lower and upper x-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    left, right = self.get_xlim()\n    if left < right:\n        return left, right\n    else:\n        return right, left",
                "def set_xbound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the x-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (`.get_autoscalex_on()`).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_xbound\n    get_xlim, set_xlim\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n\n    old_lower, old_upper = self.get_xbound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n\n    self.set_xlim(sorted((lower, upper),\n                         reverse=bool(self.xaxis_inverted())),\n                  auto=None)",
                "def get_xlim(self):\n    \"\"\"\n    Return the x-axis view limits.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The current x-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The x-axis may be inverted, in which case the *left* value will\n    be greater than the *right* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervalx)",
                "def _validate_converted_limits(self, limit, convert):\n    \"\"\"\n    Raise ValueError if converted limits are non-finite.\n\n    Note that this function also accepts None as a limit argument.\n\n    Returns\n    -------\n    The limit value after call to convert(), or None if limit is None.\n    \"\"\"\n    if limit is not None:\n        converted_limit = convert(limit)\n        if (isinstance(converted_limit, Real)\n                and not np.isfinite(converted_limit)):\n            raise ValueError(\"Axis limits cannot be NaN or Inf\")\n        return converted_limit",
                "def set_xlim(self, left=None, right=None, emit=True, auto=False,\n             *, xmin=None, xmax=None):\n    \"\"\"\n    Set the x-axis view limits.\n\n    Parameters\n    ----------\n    left : float, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The left and right xlims may also be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    right : float, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off, None leaves unchanged.\n\n    xmin, xmax : float, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n\n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n\n    Notes\n    -----\n    The *left* value may be greater than the *right* value, in which\n    case the x-axis values will decrease from left to right.\n\n    Examples\n    --------\n    >>> set_xlim(left, right)\n    >>> set_xlim((left, right))\n    >>> left, right = set_xlim(left, right)\n\n    One limit may be left unchanged.\n\n    >>> set_xlim(right=right_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the x-axis. For example, suppose *x* represents the number of\n    years before present. The x-axis limits might be set like the\n    following so 5000 years ago is on the left of the plot and the\n    present is on the right.\n\n    >>> set_xlim(5000, 0)\n\n    \"\"\"\n    if right is None and np.iterable(left):\n        left, right = left\n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n\n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n\n    if left is None or right is None:\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left is None:\n            left = old_left\n        if right is None:\n            right = old_right\n\n    if self.get_xscale() == 'log' and (left <= 0 or right <= 0):\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_left, old_right = self.get_xlim()\n        if left <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive left xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            left = old_left\n        if right <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive right xlim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            right = old_right\n    if left == right:\n        cbook._warn_external(\n            f\"Attempting to set identical left == right == {left} results \"\n            f\"in singular transformations; automatically expanding.\")\n    reverse = left > right\n    left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n    left, right = self.xaxis.limit_range_for_scale(left, right)\n    # cast to bool to avoid bad interaction between python 3.8 and np.bool_\n    left, right = sorted([left, right], reverse=bool(reverse))\n\n    self._viewLim.intervalx = (left, right)\n    if auto is not None:\n        self._autoscaleXon = bool(auto)\n\n    if emit:\n        self.callbacks.process('xlim_changed', self)\n        # Call all of the other x-axes that are shared with this one\n        for other in self._shared_x_axes.get_siblings(self):\n            if other is not self:\n                other.set_xlim(self.viewLim.intervalx,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return left, right",
                "def set_xscale(self, value, **kwargs):\n    \"\"\"\n    Set the x-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    old_default_lims = (self.xaxis.get_major_locator()\n                        .nonsingular(-np.inf, np.inf))\n    g = self.get_shared_x_axes()\n    for ax in g.get_siblings(self):\n        ax.xaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    new_default_lims = (self.xaxis.get_major_locator()\n                        .nonsingular(-np.inf, np.inf))\n    if old_default_lims != new_default_lims:\n        # Force autoscaling now, to take advantage of the scale locator's\n        # nonsingular() before it possibly gets swapped out by the user.\n        self.autoscale_view(scaley=False)",
                "def invert_yaxis(self):\n    \"\"\"\n    Invert the y-axis.\n\n    See Also\n    --------\n    yaxis_inverted\n    get_ylim, set_ylim\n    get_ybound, set_ybound\n    \"\"\"\n    self.yaxis.set_inverted(not self.yaxis.get_inverted())",
                "def get_ybound(self):\n    \"\"\"\n    Return the lower and upper y-axis bounds, in increasing order.\n\n    See Also\n    --------\n    set_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    bottom, top = self.get_ylim()\n    if bottom < top:\n        return bottom, top\n    else:\n        return top, bottom",
                "def set_ybound(self, lower=None, upper=None):\n    \"\"\"\n    Set the lower and upper numerical bounds of the y-axis.\n\n    This method will honor axes inversion regardless of parameter order.\n    It will not change the autoscaling setting (`.get_autoscaley_on()`).\n\n    Parameters\n    ----------\n    lower, upper : float or None\n        The lower and upper bounds. If *None*, the respective axis bound\n        is not modified.\n\n    See Also\n    --------\n    get_ybound\n    get_ylim, set_ylim\n    invert_yaxis, yaxis_inverted\n    \"\"\"\n    if upper is None and np.iterable(lower):\n        lower, upper = lower\n\n    old_lower, old_upper = self.get_ybound()\n    if lower is None:\n        lower = old_lower\n    if upper is None:\n        upper = old_upper\n\n    self.set_ylim(sorted((lower, upper),\n                         reverse=bool(self.yaxis_inverted())),\n                  auto=None)",
                "def get_ylim(self):\n    \"\"\"\n    Return the y-axis view limits.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The current y-axis limits in data coordinates.\n\n    See Also\n    --------\n    set_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The y-axis may be inverted, in which case the *bottom* value\n    will be greater than the *top* value.\n\n    \"\"\"\n    return tuple(self.viewLim.intervaly)",
                "def set_ylim(self, bottom=None, top=None, emit=True, auto=False,\n             *, ymin=None, ymax=None):\n    \"\"\"\n    Set the y-axis view limits.\n\n    Parameters\n    ----------\n    bottom : float, optional\n        The bottom ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n        The bottom and top ylims may also be passed as the tuple\n        (*bottom*, *top*) as the first positional argument (or as\n        the *bottom* keyword argument).\n\n        .. ACCEPTS: (bottom: float, top: float)\n\n    top : float, optional\n        The top ylim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n\n    emit : bool, default: True\n        Whether to notify observers of limit change.\n\n    auto : bool or None, default: False\n        Whether to turn on autoscaling of the y-axis. *True* turns on,\n        *False* turns off, *None* leaves unchanged.\n\n    ymin, ymax : float, optional\n        They are equivalent to bottom and top respectively,\n        and it is an error to pass both *ymin* and *bottom* or\n        *ymax* and *top*.\n\n    Returns\n    -------\n    bottom, top : (float, float)\n        The new y-axis limits in data coordinates.\n\n    See Also\n    --------\n    get_ylim\n    set_ybound, get_ybound\n    invert_yaxis, yaxis_inverted\n\n    Notes\n    -----\n    The *bottom* value may be greater than the *top* value, in which\n    case the y-axis values will decrease from *bottom* to *top*.\n\n    Examples\n    --------\n    >>> set_ylim(bottom, top)\n    >>> set_ylim((bottom, top))\n    >>> bottom, top = set_ylim(bottom, top)\n\n    One limit may be left unchanged.\n\n    >>> set_ylim(top=top_lim)\n\n    Limits may be passed in reverse order to flip the direction of\n    the y-axis. For example, suppose ``y`` represents depth of the\n    ocean in m. The y-axis limits might be set like the following\n    so 5000 m depth is at the bottom of the plot and the surface,\n    0 m, is at the top.\n\n    >>> set_ylim(5000, 0)\n    \"\"\"\n    if top is None and np.iterable(bottom):\n        bottom, top = bottom\n    if ymin is not None:\n        if bottom is not None:\n            raise TypeError('Cannot pass both `ymin` and `bottom`')\n        bottom = ymin\n    if ymax is not None:\n        if top is not None:\n            raise TypeError('Cannot pass both `ymax` and `top`')\n        top = ymax\n\n    self._process_unit_info(ydata=(bottom, top))\n    bottom = self._validate_converted_limits(bottom, self.convert_yunits)\n    top = self._validate_converted_limits(top, self.convert_yunits)\n\n    if bottom is None or top is None:\n        # Axes init calls set_ylim(0, 1) before get_ylim() can be called,\n        # so only grab the limits if we really need them.\n        old_bottom, old_top = self.get_ylim()\n        if bottom is None:\n            bottom = old_bottom\n        if top is None:\n            top = old_top\n\n    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):\n        # Axes init calls set_xlim(0, 1) before get_xlim() can be called,\n        # so only grab the limits if we really need them.\n        old_bottom, old_top = self.get_ylim()\n        if bottom <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive bottom ylim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            bottom = old_bottom\n        if top <= 0:\n            cbook._warn_external(\n                'Attempted to set non-positive top ylim on a '\n                'log-scaled axis.\\n'\n                'Invalid limit will be ignored.')\n            top = old_top\n    if bottom == top:\n        cbook._warn_external(\n            f\"Attempting to set identical bottom == top == {bottom} \"\n            f\"results in singular transformations; automatically \"\n            f\"expanding.\")\n    reverse = bottom > top\n    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n    # cast to bool to avoid bad interaction between python 3.8 and np.bool_\n    bottom, top = sorted([bottom, top], reverse=bool(reverse))\n\n    self._viewLim.intervaly = (bottom, top)\n    if auto is not None:\n        self._autoscaleYon = bool(auto)\n\n    if emit:\n        self.callbacks.process('ylim_changed', self)\n        # Call all of the other y-axes that are shared with this one\n        for other in self._shared_y_axes.get_siblings(self):\n            if other is not self:\n                other.set_ylim(self.viewLim.intervaly,\n                               emit=False, auto=auto)\n                if other.figure != self.figure:\n                    other.figure.canvas.draw_idle()\n    self.stale = True\n    return bottom, top",
                "def set_yscale(self, value, **kwargs):\n    \"\"\"\n    Set the y-axis scale.\n\n    Parameters\n    ----------\n    value : {\"linear\", \"log\", \"symlog\", \"logit\", ...}\n        The axis scale type to apply.\n\n    **kwargs\n        Different keyword arguments are accepted, depending on the scale.\n        See the respective class keyword arguments:\n\n        - `matplotlib.scale.LinearScale`\n        - `matplotlib.scale.LogScale`\n        - `matplotlib.scale.SymmetricalLogScale`\n        - `matplotlib.scale.LogitScale`\n\n    Notes\n    -----\n    By default, Matplotlib supports the above mentioned scales.\n    Additionally, custom scales may be registered using\n    `matplotlib.scale.register_scale`. These scales can then also\n    be used here.\n    \"\"\"\n    old_default_lims = (self.yaxis.get_major_locator()\n                        .nonsingular(-np.inf, np.inf))\n    g = self.get_shared_y_axes()\n    for ax in g.get_siblings(self):\n        ax.yaxis._set_scale(value, **kwargs)\n        ax._update_transScale()\n        ax.stale = True\n    new_default_lims = (self.yaxis.get_major_locator()\n                        .nonsingular(-np.inf, np.inf))\n    if old_default_lims != new_default_lims:\n        # Force autoscaling now, to take advantage of the scale locator's\n        # nonsingular() before it possibly gets swapped out by the user.\n        self.autoscale_view(scalex=False)",
                "def format_xdata(self, x):\n    \"\"\"\n    Return *x* formatted as an x-value.\n\n    This function will use the `.fmt_xdata` attribute if it is not None,\n    else will fall back on the xaxis major formatter.\n    \"\"\"\n    return (self.fmt_xdata if self.fmt_xdata is not None\n            else self.xaxis.get_major_formatter().format_data_short)(x)",
                "def format_ydata(self, y):\n    \"\"\"\n    Return *y* formatted as an y-value.\n\n    This function will use the `.fmt_ydata` attribute if it is not None,\n    else will fall back on the yaxis major formatter.\n    \"\"\"\n    return (self.fmt_ydata if self.fmt_ydata is not None\n            else self.yaxis.get_major_formatter().format_data_short)(y)",
                "def format_coord(self, x, y):\n    \"\"\"Return a format string formatting the *x*, *y* coordinates.\"\"\"\n    if x is None:\n        xs = '???'\n    else:\n        xs = self.format_xdata(x)\n    if y is None:\n        ys = '???'\n    else:\n        ys = self.format_ydata(y)\n    return 'x=%s y=%s' % (xs, ys)",
                "def minorticks_on(self):\n    \"\"\"\n    Display minor ticks on the axes.\n\n    Displaying minor ticks may reduce performance; you may turn them off\n    using `minorticks_off()` if drawing speed is a problem.\n    \"\"\"\n    for ax in (self.xaxis, self.yaxis):\n        scale = ax.get_scale()\n        if scale == 'log':\n            s = ax._scale\n            ax.set_minor_locator(mticker.LogLocator(s.base, s.subs))\n        elif scale == 'symlog':\n            s = ax._scale\n            ax.set_minor_locator(\n                mticker.SymmetricalLogLocator(s._transform, s.subs))\n        else:\n            ax.set_minor_locator(mticker.AutoMinorLocator())",
                "def minorticks_off(self):\n    \"\"\"Remove minor ticks from the axes.\"\"\"\n    self.xaxis.set_minor_locator(mticker.NullLocator())\n    self.yaxis.set_minor_locator(mticker.NullLocator())",
                "def can_zoom(self):\n    \"\"\"\n    Return *True* if this axes supports the zoom box button functionality.\n    \"\"\"\n    return True",
                "def can_pan(self):\n    \"\"\"\n    Return *True* if this axes supports any pan/zoom button functionality.\n    \"\"\"\n    return True",
                "def get_navigate(self):\n    \"\"\"\n    Get whether the axes responds to navigation commands\n    \"\"\"\n    return self._navigate",
                "def set_navigate(self, b):\n    \"\"\"\n    Set whether the axes responds to navigation toolbar commands\n\n    Parameters\n    ----------\n    b : bool\n    \"\"\"\n    self._navigate = b",
                "def get_navigate_mode(self):\n    \"\"\"\n    Get the navigation toolbar button status: 'PAN', 'ZOOM', or None\n    \"\"\"\n    return self._navigate_mode",
                "def set_navigate_mode(self, b):\n    \"\"\"\n    Set the navigation toolbar button status;\n\n    .. warning::\n        this is not a user-API function.\n\n    \"\"\"\n    self._navigate_mode = b",
                "def _get_view(self):\n    \"\"\"\n    Save information required to reproduce the current view.\n\n    Called before a view is changed, such as during a pan or zoom\n    initiated by the user. You may return any information you deem\n    necessary to describe the view.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation saves the view limits. You *must* implement\n        :meth:`_set_view` if you implement this method.\n    \"\"\"\n    xmin, xmax = self.get_xlim()\n    ymin, ymax = self.get_ylim()\n    return xmin, xmax, ymin, ymax",
                "def _set_view(self, view):\n    \"\"\"\n    Apply a previously saved view.\n\n    Called when restoring a view, such as with the navigation buttons.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation restores the view limits. You *must*\n        implement :meth:`_get_view` if you implement this method.\n    \"\"\"\n    xmin, xmax, ymin, ymax = view\n    self.set_xlim((xmin, xmax))\n    self.set_ylim((ymin, ymax))",
                "def _set_view_from_bbox(self, bbox, direction='in',\n                        mode=None, twinx=False, twiny=False):\n    \"\"\"\n    Update view from a selection bbox.\n\n    .. note::\n\n        Intended to be overridden by new projection types, but if not, the\n        default implementation sets the view limits to the bbox directly.\n\n    Parameters\n    ----------\n    bbox : 4-tuple or 3 tuple\n        * If bbox is a 4 tuple, it is the selected bounding box limits,\n          in *display* coordinates.\n        * If bbox is a 3 tuple, it is an (xp, yp, scl) triple, where\n          (xp, yp) is the center of zooming and scl the scale factor to\n          zoom by.\n\n    direction : str\n        The direction to apply the bounding box.\n            * `'in'` - The bounding box describes the view directly, i.e.,\n                       it zooms in.\n            * `'out'` - The bounding box describes the size to make the\n                        existing view, i.e., it zooms out.\n\n    mode : str or None\n        The selection mode, whether to apply the bounding box in only the\n        `'x'` direction, `'y'` direction or both (`None`).\n\n    twinx : bool\n        Whether this axis is twinned in the *x*-direction.\n\n    twiny : bool\n        Whether this axis is twinned in the *y*-direction.\n    \"\"\"\n    if len(bbox) == 3:\n        Xmin, Xmax = self.get_xlim()\n        Ymin, Ymax = self.get_ylim()\n\n        xp, yp, scl = bbox  # Zooming code\n\n        if scl == 0:  # Should not happen\n            scl = 1.\n\n        if scl > 1:\n            direction = 'in'\n        else:\n            direction = 'out'\n            scl = 1/scl\n\n        # get the limits of the axes\n        tranD2C = self.transData.transform\n        xmin, ymin = tranD2C((Xmin, Ymin))\n        xmax, ymax = tranD2C((Xmax, Ymax))\n\n        # set the range\n        xwidth = xmax - xmin\n        ywidth = ymax - ymin\n        xcen = (xmax + xmin)*.5\n        ycen = (ymax + ymin)*.5\n        xzc = (xp*(scl - 1) + xcen)/scl\n        yzc = (yp*(scl - 1) + ycen)/scl\n\n        bbox = [xzc - xwidth/2./scl, yzc - ywidth/2./scl,\n                xzc + xwidth/2./scl, yzc + ywidth/2./scl]\n    elif len(bbox) != 4:\n        # should be len 3 or 4 but nothing else\n        cbook._warn_external(\n            \"Warning in _set_view_from_bbox: bounding box is not a tuple \"\n            \"of length 3 or 4. Ignoring the view change.\")\n        return\n\n    # Original limits.\n    xmin0, xmax0 = self.get_xbound()\n    ymin0, ymax0 = self.get_ybound()\n    # The zoom box in screen coords.\n    startx, starty, stopx, stopy = bbox\n    # Convert to data coords.\n    (startx, starty), (stopx, stopy) = self.transData.inverted().transform(\n        [(startx, starty), (stopx, stopy)])\n    # Clip to axes limits.\n    xmin, xmax = np.clip(sorted([startx, stopx]), xmin0, xmax0)\n    ymin, ymax = np.clip(sorted([starty, stopy]), ymin0, ymax0)\n    # Don't double-zoom twinned axes or if zooming only the other axis.\n    if twinx or mode == \"y\":\n        xmin, xmax = xmin0, xmax0\n    if twiny or mode == \"x\":\n        ymin, ymax = ymin0, ymax0\n\n    if direction == \"in\":\n        new_xbound = xmin, xmax\n        new_ybound = ymin, ymax\n\n    elif direction == \"out\":\n        x_trf = self.xaxis.get_transform()\n        sxmin0, sxmax0, sxmin, sxmax = x_trf.transform(\n            [xmin0, xmax0, xmin, xmax])  # To screen space.\n        factor = (sxmax0 - sxmin0) / (sxmax - sxmin)  # Unzoom factor.\n        # Move original bounds away by\n        # (factor) x (distance between unzoom box and axes bbox).\n        sxmin1 = sxmin0 - factor * (sxmin - sxmin0)\n        sxmax1 = sxmax0 + factor * (sxmax0 - sxmax)\n        # And back to data space.\n        new_xbound = x_trf.inverted().transform([sxmin1, sxmax1])\n\n        y_trf = self.yaxis.get_transform()\n        symin0, symax0, symin, symax = y_trf.transform(\n            [ymin0, ymax0, ymin, ymax])\n        factor = (symax0 - symin0) / (symax - symin)\n        symin1 = symin0 - factor * (symin - symin0)\n        symax1 = symax0 + factor * (symax0 - symax)\n        new_ybound = y_trf.inverted().transform([symin1, symax1])\n\n    if not twinx and mode != \"y\":\n        self.set_xbound(new_xbound)\n    if not twiny and mode != \"x\":\n        self.set_ybound(new_ybound)",
                "def start_pan(self, x, y, button):\n    \"\"\"\n    Called when a pan operation has started.\n\n    Parameters\n    ----------\n    x, y : float\n        The mouse coordinates in display coords.\n    button : `.MouseButton`\n        The pressed mouse button.\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    self._pan_start = types.SimpleNamespace(\n        lim=self.viewLim.frozen(),\n        trans=self.transData.frozen(),\n        trans_inverse=self.transData.inverted().frozen(),\n        bbox=self.bbox.frozen(),\n        x=x,\n        y=y)",
                "def end_pan(self):\n    \"\"\"\n    Called when a pan operation completes (when the mouse button is up.)\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    del self._pan_start",
                "def drag_pan(self, button, key, x, y):\n    \"\"\"\n    Called when the mouse moves during a pan operation.\n\n    Parameters\n    ----------\n    button : `.MouseButton`\n        The pressed mouse button.\n    key : str or None\n        The pressed key, if any.\n    x, y : float\n        The mouse coordinates in display coords.\n\n    Notes\n    -----\n    This is intended to be overridden by new projection types.\n    \"\"\"\n    def format_deltas(key, dx, dy):\n        if key == 'control':\n            if abs(dx) > abs(dy):\n                dy = dx\n            else:\n                dx = dy\n        elif key == 'x':\n            dy = 0\n        elif key == 'y':\n            dx = 0\n        elif key == 'shift':\n            if 2 * abs(dx) < abs(dy):\n                dx = 0\n            elif 2 * abs(dy) < abs(dx):\n                dy = 0\n            elif abs(dx) > abs(dy):\n                dy = dy / abs(dy) * abs(dx)\n            else:\n                dx = dx / abs(dx) * abs(dy)\n        return dx, dy\n\n    p = self._pan_start\n    dx = x - p.x\n    dy = y - p.y\n    if dx == dy == 0:\n        return\n    if button == 1:\n        dx, dy = format_deltas(key, dx, dy)\n        result = p.bbox.translated(-dx, -dy).transformed(p.trans_inverse)\n    elif button == 3:\n        try:\n            dx = -dx / self.bbox.width\n            dy = -dy / self.bbox.height\n            dx, dy = format_deltas(key, dx, dy)\n            if self.get_aspect() != 'auto':\n                dx = dy = 0.5 * (dx + dy)\n            alpha = np.power(10.0, (dx, dy))\n            start = np.array([p.x, p.y])\n            oldpoints = p.lim.transformed(p.trans)\n            newpoints = start + alpha * (oldpoints - start)\n            result = (mtransforms.Bbox(newpoints)\n                      .transformed(p.trans_inverse))\n        except OverflowError:\n            cbook._warn_external('Overflow while panning')\n            return\n    else:\n        return\n\n    valid = np.isfinite(result.transformed(p.trans))\n    points = result.get_points().astype(object)\n    # Just ignore invalid limits (typically, underflow in log-scale).\n    points[~valid] = None\n    self.set_xlim(points[:, 0])\n    self.set_ylim(points[:, 1])",
                "def get_children(self):\n    # docstring inherited.\n    return [\n        *self.collections,\n        *self.patches,\n        *self.lines,\n        *self.texts,\n        *self.artists,\n        *self.spines.values(),\n        *self._get_axis_list(),\n        self.title, self._left_title, self._right_title,\n        *self.tables,\n        *self.images,\n        *self.child_axes,\n        *([self.legend_] if self.legend_ is not None else []),\n        self.patch,\n    ]",
                "def contains(self, mouseevent):\n    # docstring inherited.\n    inside, info = self._default_contains(mouseevent)\n    if inside is not None:\n        return inside, info\n    return self.patch.contains(mouseevent)",
                "def contains_point(self, point):\n    \"\"\"\n    Return whether *point* (pair of pixel coordinates) is inside the axes\n    patch.\n    \"\"\"\n    return self.patch.contains_point(point, radius=1.0)",
                "def get_default_bbox_extra_artists(self):\n    \"\"\"\n    Return a default list of artists that are used for the bounding box\n    calculation.\n\n    Artists are excluded either by not being visible or\n    ``artist.set_in_layout(False)``.\n    \"\"\"\n\n    artists = self.get_children()\n\n    if not (self.axison and self._frameon):\n        # don't do bbox on spines if frame not on.\n        for spine in self.spines.values():\n            artists.remove(spine)\n\n    if not self.axison:\n        for _axis in self._get_axis_list():\n            artists.remove(_axis)\n\n    artists.remove(self.title)\n    artists.remove(self._left_title)\n    artists.remove(self._right_title)\n\n    return [artist for artist in artists\n            if (artist.get_visible() and artist.get_in_layout())]",
                "def get_tightbbox(self, renderer, call_axes_locator=True,\n                  bbox_extra_artists=None, *, for_layout_only=False):\n    \"\"\"\n    Return the tight bounding box of the axes, including axis and their\n    decorators (xlabel, title, etc).\n\n    Artists that have ``artist.set_in_layout(False)`` are not included\n    in the bbox.\n\n    Parameters\n    ----------\n    renderer : `.RendererBase` subclass\n        renderer that will be used to draw the figures (i.e.\n        ``fig.canvas.get_renderer()``)\n\n    bbox_extra_artists : list of `.Artist` or ``None``\n        List of artists to include in the tight bounding box.  If\n        ``None`` (default), then all artist children of the axes are\n        included in the tight bounding box.\n\n    call_axes_locator : bool, default: True\n        If *call_axes_locator* is ``False``, it does not call the\n        ``_axes_locator`` attribute, which is necessary to get the correct\n        bounding box. ``call_axes_locator=False`` can be used if the\n        caller is only interested in the relative size of the tightbbox\n        compared to the axes bbox.\n\n    for_layout_only : default: False\n        The bounding box will *not* include the x-extent of the title and\n        the xlabel, or the y-extent of the ylabel.\n\n    Returns\n    -------\n    `.BboxBase`\n        Bounding box in figure pixel coordinates.\n\n    See Also\n    --------\n    matplotlib.axes.Axes.get_window_extent\n    matplotlib.axis.Axis.get_tightbbox\n    matplotlib.spines.Spine.get_window_extent\n    \"\"\"\n\n    bb = []\n\n    if not self.get_visible():\n        return None\n\n    locator = self.get_axes_locator()\n    if locator and call_axes_locator:\n        pos = locator(self, renderer)\n        self.apply_aspect(pos)\n    else:\n        self.apply_aspect()\n\n    if self.axison:\n        if self.xaxis.get_visible():\n            try:\n                bb_xaxis = self.xaxis.get_tightbbox(\n                    renderer, for_layout_only=for_layout_only)\n            except TypeError:\n                # in case downstream library has redefined axis:\n                bb_xaxis = self.xaxis.get_tightbbox(renderer)\n            if bb_xaxis:\n                bb.append(bb_xaxis)\n        if self.yaxis.get_visible():\n            try:\n                bb_yaxis = self.yaxis.get_tightbbox(\n                    renderer, for_layout_only=for_layout_only)\n            except TypeError:\n                # in case downstream library has redefined axis:\n                bb_yaxis = self.yaxis.get_tightbbox(renderer)\n            if bb_yaxis:\n                bb.append(bb_yaxis)\n    self._update_title_position(renderer)\n    axbbox = self.get_window_extent(renderer)\n    bb.append(axbbox)\n\n    for title in [self.title, self._left_title, self._right_title]:\n        if title.get_visible():\n            bt = title.get_window_extent(renderer)\n            if for_layout_only and bt.width > 0:\n                # make the title bbox 1 pixel wide so its width\n                # is not accounted for in bbox calculations in\n                # tight/constrained_layout\n                bt.x0 = (bt.x0 + bt.x1) / 2 - 0.5\n                bt.x1 = bt.x0 + 1.0\n            bb.append(bt)\n\n    bbox_artists = bbox_extra_artists\n    if bbox_artists is None:\n        bbox_artists = self.get_default_bbox_extra_artists()\n\n    for a in bbox_artists:\n        # Extra check here to quickly see if clipping is on and\n        # contained in the axes.  If it is, don't get the tightbbox for\n        # this artist because this can be expensive:\n        clip_extent = a._get_clipping_extent_bbox()\n        if clip_extent is not None:\n            clip_extent = mtransforms.Bbox.intersection(\n                clip_extent, axbbox)\n            if np.all(clip_extent.extents == axbbox.extents):\n                # clip extent is inside the axes bbox so don't check\n                # this artist\n                continue\n        bbox = a.get_tightbbox(renderer)\n        if (bbox is not None\n                and 0 < bbox.width < np.inf\n                and 0 < bbox.height < np.inf):\n            bb.append(bbox)\n    return mtransforms.Bbox.union(\n        [b for b in bb if b.width != 0 or b.height != 0])",
                "def _make_twin_axes(self, *args, **kwargs):\n    \"\"\"Make a twinx axes of self. This is used for twinx and twiny.\"\"\"\n    # Typically, SubplotBase._make_twin_axes is called instead of this.\n    if 'sharex' in kwargs and 'sharey' in kwargs:\n        raise ValueError(\"Twinned Axes may share only one axis\")\n    ax2 = self.figure.add_axes(self.get_position(True), *args, **kwargs)\n    self.set_adjustable('datalim')\n    ax2.set_adjustable('datalim')\n    self._twinned_axes.join(self, ax2)\n    return ax2",
                "def twinx(self):\n    \"\"\"\n    Create a twin Axes sharing the xaxis.\n\n    Create a new Axes with an invisible x-axis and an independent\n    y-axis positioned opposite to the original one (i.e. at right). The\n    x-axis autoscale setting will be inherited from the original\n    Axes.  To ensure that the tick marks of both y-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twinx, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharex=self)\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    ax2.yaxis.set_offset_position('right')\n    ax2.set_autoscalex_on(self.get_autoscalex_on())\n    self.yaxis.tick_left()\n    ax2.xaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                "def twiny(self):\n    \"\"\"\n    Create a twin Axes sharing the yaxis.\n\n    Create a new Axes with an invisible y-axis and an independent\n    x-axis positioned opposite to the original one (i.e. at top). The\n    y-axis autoscale setting will be inherited from the original Axes.\n    To ensure that the tick marks of both x-axes align, see\n    `~matplotlib.ticker.LinearLocator`.\n\n    Returns\n    -------\n    Axes\n        The newly created Axes instance\n\n    Notes\n    -----\n    For those who are 'picking' artists while using twiny, pick\n    events are only called for the artists in the top-most axes.\n    \"\"\"\n    ax2 = self._make_twin_axes(sharey=self)\n    ax2.xaxis.tick_top()\n    ax2.xaxis.set_label_position('top')\n    ax2.set_autoscaley_on(self.get_autoscaley_on())\n    self.xaxis.tick_bottom()\n    ax2.yaxis.set_visible(False)\n    ax2.patch.set_visible(False)\n    return ax2",
                "def get_shared_x_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for x axes.\"\"\"\n    return self._shared_x_axes",
                "def get_shared_y_axes(self):\n    \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n    return self._shared_y_axes",
                "def wrapper(self, *args, **kwargs):\n    return get_method(self)(*args, **kwargs)",
                "def _process_single_axis(data, axis, unit_name, kwargs):\n    # Return if there's no axis set\n    if axis is None:\n        return kwargs\n\n    if data is not None:\n        # We only need to update if there is nothing set yet.\n        if not axis.have_units():\n            axis.update_units(data)\n\n    # Check for units in the kwargs, and if present update axis\n    if kwargs is not None:\n        units = kwargs.pop(unit_name, axis.units)\n        if self.name == 'polar':\n            polar_units = {'xunits': 'thetaunits', 'yunits': 'runits'}\n            units = kwargs.pop(polar_units[unit_name], units)\n\n        if units != axis.units:\n            axis.set_units(units)\n            # If the units being set imply a different converter,\n            # we need to update.\n            if data is not None:\n                axis.update_units(data)\n    return kwargs",
                "def handle_single_axis(scale, autoscaleon, shared_axes, interval,\n                       minpos, axis, margin, stickies, set_bound):\n\n    if not (scale and autoscaleon):\n        return  # nothing to do...\n\n    shared = shared_axes.get_siblings(self)\n    dl = [ax.dataLim for ax in shared]\n    # ignore non-finite data limits if good limits exist\n    finite_dl = [d for d in dl if np.isfinite(d).all()]\n    if len(finite_dl):\n        # if finite limits exist for at least one axis (and the\n        # other is infinite), restore the finite limits\n        x_finite = [d for d in dl\n                    if (np.isfinite(d.intervalx).all() and\n                        (d not in finite_dl))]\n        y_finite = [d for d in dl\n                    if (np.isfinite(d.intervaly).all() and\n                        (d not in finite_dl))]\n\n        dl = finite_dl\n        dl.extend(x_finite)\n        dl.extend(y_finite)\n\n    bb = mtransforms.BboxBase.union(dl)\n    x0, x1 = getattr(bb, interval)\n    # If x0 and x1 are non finite, use the locator to figure out\n    # default limits.\n    locator = axis.get_major_locator()\n    x0, x1 = locator.nonsingular(x0, x1)\n\n    # Prevent margin addition from crossing a sticky value.  Small\n    # tolerances (whose values come from isclose()) must be used due to\n    # floating point issues with streamplot.\n    def tol(x): return 1e-5 * abs(x) + 1e-8\n    # Index of largest element < x0 + tol, if any.\n    i0 = stickies.searchsorted(x0 + tol(x0)) - 1\n    x0bound = stickies[i0] if i0 != -1 else None\n    # Index of smallest element > x1 - tol, if any.\n    i1 = stickies.searchsorted(x1 - tol(x1))\n    x1bound = stickies[i1] if i1 != len(stickies) else None\n\n    # Add the margin in figure space and then transform back, to handle\n    # non-linear scales.\n    minpos = getattr(bb, minpos)\n    transform = axis.get_transform()\n    inverse_trans = transform.inverted()\n    x0, x1 = axis._scale.limit_range_for_scale(x0, x1, minpos)\n    x0t, x1t = transform.transform([x0, x1])\n    delta = (x1t - x0t) * margin\n    if not np.isfinite(delta):\n        delta = 0  # If a bound isn't finite, set margin to zero.\n    x0, x1 = inverse_trans.transform([x0t - delta, x1t + delta])\n\n    # Apply sticky bounds.\n    if x0bound is not None:\n        x0 = max(x0, x0bound)\n    if x1bound is not None:\n        x1 = min(x1, x1bound)\n\n    if not self._tight:\n        x0, x1 = locator.view_limits(x0, x1)\n    set_bound(x0, x1)",
                "def format_deltas(key, dx, dy):\n    if key == 'control':\n        if abs(dx) > abs(dy):\n            dy = dx\n        else:\n            dx = dy\n    elif key == 'x':\n        dy = 0\n    elif key == 'y':\n        dx = 0\n    elif key == 'shift':\n        if 2 * abs(dx) < abs(dy):\n            dx = 0\n        elif 2 * abs(dy) < abs(dx):\n            dy = 0\n        elif abs(dx) > abs(dy):\n            dy = dy / abs(dy) * abs(dx)\n        else:\n            dx = dx / abs(dx) * abs(dy)\n    return dx, dy",
                "def tol(x): return 1e-5 * abs(x) + 1e-8"
            ],
            "inscope_function_signatures": [
                "_process_plot_format(fmt)",
                "__init__(self, attr_name, method_name)",
                "__set_name__(self, owner, name)",
                "__init__(self, axes, command='plot')",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "set_prop_cycle(self, *args, **kwargs)",
                "__call__(self, *args, **kwargs)",
                "get_next_color(self)",
                "_getdefaults(self, ignore, kw)",
                "_setdefaults(self, defaults, kw)",
                "_makeline(self, x, y, kw, kwargs)",
                "_makefill(self, x, y, kw, kwargs)",
                "_plot_args(self, tup, kwargs)",
                "__str__(self)",
                "__init__(self, fig, rect, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "get_window_extent(self, *args, **kwargs)",
                "_init_axis(self)",
                "set_figure(self, fig)",
                "_unstale_viewLim(self)",
                "viewLim(self)",
                "_request_autoscale_view(self, tight=None, scalex=True, scaley=True)",
                "_set_lim_and_transforms(self)",
                "get_xaxis_transform(self, which='grid')",
                "get_xaxis_text1_transform(self, pad_points)",
                "get_xaxis_text2_transform(self, pad_points)",
                "get_yaxis_transform(self, which='grid')",
                "get_yaxis_text1_transform(self, pad_points)",
                "get_yaxis_text2_transform(self, pad_points)",
                "_update_transScale(self)",
                "get_position(self, original=False)",
                "set_position(self, pos, which='both')",
                "_set_position(self, pos, which='both')",
                "reset_position(self)",
                "set_axes_locator(self, locator)",
                "get_axes_locator(self)",
                "_set_artist_props(self, a)",
                "_gen_axes_patch(self)",
                "_gen_axes_spines(self, locations=None, offset=0.0, units='inches')",
                "sharex(self, other)",
                "sharey(self, other)",
                "cla(self)",
                "clear(self)",
                "get_facecolor(self)",
                "set_facecolor(self, color)",
                "_set_title_offset_trans(self, title_offset_points)",
                "set_prop_cycle(self, *args, **kwargs)",
                "get_aspect(self)",
                "set_aspect(self, aspect, adjustable=None, anchor=None, share=False)",
                "get_adjustable(self)",
                "set_adjustable(self, adjustable, share=False)",
                "get_box_aspect(self)",
                "set_box_aspect(self, aspect=None)",
                "get_anchor(self)",
                "set_anchor(self, anchor, share=False)",
                "get_data_ratio(self)",
                "get_data_ratio_log(self)",
                "apply_aspect(self, position=None)",
                "axis(self, *args, **kwargs)",
                "get_legend(self)",
                "get_images(self)",
                "get_lines(self)",
                "get_xaxis(self)",
                "get_yaxis(self)",
                "_sci(self, im)",
                "_gci(self)",
                "has_data(self)",
                "add_artist(self, a)",
                "add_child_axes(self, ax)",
                "add_collection(self, collection, autolim=True)",
                "add_image(self, image)",
                "_update_image_limits(self, image)",
                "add_line(self, line)",
                "_add_text(self, txt)",
                "_update_line_limits(self, line)",
                "add_patch(self, p)",
                "_update_patch_limits(self, patch)",
                "add_table(self, tab)",
                "add_container(self, container)",
                "_on_units_changed(self, scalex=False, scaley=False)",
                "relim(self, visible_only=False)",
                "update_datalim(self, xys, updatex=True, updatey=True)",
                "update_datalim_bounds(self, bounds)",
                "_process_unit_info(self, xdata=None, ydata=None, kwargs=None)",
                "in_axes(self, mouseevent)",
                "get_autoscale_on(self)",
                "get_autoscalex_on(self)",
                "get_autoscaley_on(self)",
                "set_autoscale_on(self, b)",
                "set_autoscalex_on(self, b)",
                "set_autoscaley_on(self, b)",
                "use_sticky_edges(self)",
                "use_sticky_edges(self, b)",
                "set_xmargin(self, m)",
                "set_ymargin(self, m)",
                "margins(self, *margins)",
                "set_rasterization_zorder(self, z)",
                "get_rasterization_zorder(self)",
                "autoscale(self, enable=True, axis='both', tight=None)",
                "autoscale_view(self, tight=None, scalex=True, scaley=True)",
                "_get_axis_list(self)",
                "_get_axis_map(self)",
                "_update_title_position(self, renderer)",
                "draw(self, renderer=None, inframe=False)",
                "draw_artist(self, a)",
                "redraw_in_frame(self)",
                "get_renderer_cache(self)",
                "get_frame_on(self)",
                "set_frame_on(self, b)",
                "get_axisbelow(self)",
                "set_axisbelow(self, b)",
                "grid(self, b=None, which='major', axis='both', **kwargs)",
                "ticklabel_format(self)",
                "locator_params(self, axis='both', tight=None, **kwargs)",
                "tick_params(self, axis='both', **kwargs)",
                "set_axis_off(self)",
                "set_axis_on(self)",
                "invert_xaxis(self)",
                "get_xbound(self)",
                "set_xbound(self, lower=None, upper=None)",
                "get_xlim(self)",
                "_validate_converted_limits(self, limit, convert)",
                "set_xlim(self, left=None, right=None, emit=True, auto=False)",
                "set_xscale(self, value, **kwargs)",
                "invert_yaxis(self)",
                "get_ybound(self)",
                "set_ybound(self, lower=None, upper=None)",
                "get_ylim(self)",
                "set_ylim(self, bottom=None, top=None, emit=True, auto=False)",
                "set_yscale(self, value, **kwargs)",
                "format_xdata(self, x)",
                "format_ydata(self, y)",
                "format_coord(self, x, y)",
                "minorticks_on(self)",
                "minorticks_off(self)",
                "can_zoom(self)",
                "can_pan(self)",
                "get_navigate(self)",
                "set_navigate(self, b)",
                "get_navigate_mode(self)",
                "set_navigate_mode(self, b)",
                "_get_view(self)",
                "_set_view(self, view)",
                "_set_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False)",
                "start_pan(self, x, y, button)",
                "end_pan(self)",
                "drag_pan(self, button, key, x, y)",
                "get_children(self)",
                "contains(self, mouseevent)",
                "contains_point(self, point)",
                "get_default_bbox_extra_artists(self)",
                "get_tightbbox(self, renderer, call_axes_locator=True, bbox_extra_artists=None)",
                "_make_twin_axes(self, *args, **kwargs)",
                "twinx(self)",
                "twiny(self)",
                "get_shared_x_axes(self)",
                "get_shared_y_axes(self)",
                "wrapper(self, *args, **kwargs)",
                "_process_single_axis(data, axis, unit_name, kwargs)",
                "handle_single_axis(scale, autoscaleon, shared_axes, interval, minpos, axis, margin, stickies, set_bound)",
                "format_deltas(key, dx, dy)",
                "tol(x)"
            ],
            "variables_in_file": {
                "_log": [
                    2618,
                    30
                ],
                "logging.getLogger": [
                    30
                ],
                "logging": [
                    30
                ],
                "__name__": [
                    429,
                    30
                ],
                "self.attr_name": [
                    75,
                    52,
                    60
                ],
                "self": [
                    2060,
                    2062,
                    2066,
                    2067,
                    2074,
                    2075,
                    2076,
                    2077,
                    2086,
                    2087,
                    2088,
                    4136,
                    4139,
                    4141,
                    4142,
                    4144,
                    2097,
                    2098,
                    4146,
                    52,
                    53,
                    54,
                    4147,
                    4149,
                    4153,
                    60,
                    4156,
                    4158,
                    63,
                    2113,
                    2114,
                    2115,
                    4162,
                    2117,
                    4165,
                    71,
                    2119,
                    2121,
                    4166,
                    75,
                    76,
                    2123,
                    2125,
                    2127,
                    80,
                    4169,
                    4182,
                    2150,
                    2152,
                    4209,
                    4210,
                    4212,
                    2165,
                    2183,
                    4235,
                    4239,
                    4240,
                    2195,
                    2196,
                    2204,
                    2210,
                    2216,
                    4265,
                    4268,
                    4269,
                    2222,
                    4276,
                    2232,
                    2233,
                    186,
                    187,
                    188,
                    4280,
                    192,
                    195,
                    196,
                    2243,
                    205,
                    2253,
                    207,
                    210,
                    215,
                    2270,
                    2274,
                    2296,
                    2297,
                    270,
                    2318,
                    2319,
                    274,
                    276,
                    285,
                    289,
                    307,
                    308,
                    314,
                    315,
                    339,
                    340,
                    2387,
                    2390,
                    2392,
                    2394,
                    355,
                    2406,
                    2407,
                    2411,
                    390,
                    391,
                    392,
                    393,
                    2441,
                    2442,
                    2444,
                    2445,
                    2447,
                    2449,
                    2450,
                    406,
                    407,
                    410,
                    429,
                    2492,
                    2495,
                    2501,
                    2504,
                    2507,
                    2510,
                    2513,
                    2515,
                    476,
                    2524,
                    478,
                    480,
                    481,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    497,
                    500,
                    503,
                    504,
                    505,
                    507,
                    508,
                    511,
                    513,
                    516,
                    517,
                    519,
                    520,
                    523,
                    525,
                    527,
                    529,
                    530,
                    531,
                    2578,
                    533,
                    534,
                    535,
                    2584,
                    2585,
                    538,
                    2587,
                    2588,
                    2591,
                    553,
                    2605,
                    2606,
                    568,
                    569,
                    2617,
                    2621,
                    580,
                    581,
                    582,
                    2628,
                    2630,
                    2634,
                    591,
                    592,
                    593,
                    2649,
                    2654,
                    611,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    621,
                    625,
                    627,
                    2676,
                    630,
                    631,
                    632,
                    2679,
                    2681,
                    635,
                    2683,
                    2686,
                    641,
                    2689,
                    643,
                    2691,
                    645,
                    2692,
                    647,
                    2694,
                    649,
                    2696,
                    2697,
                    653,
                    654,
                    2703,
                    2704,
                    2707,
                    660,
                    2709,
                    662,
                    2710,
                    664,
                    2714,
                    2715,
                    2716,
                    2718,
                    2720,
                    2725,
                    679,
                    684,
                    689,
                    690,
                    2739,
                    2740,
                    695,
                    697,
                    698,
                    699,
                    700,
                    2747,
                    2750,
                    2759,
                    2762,
                    716,
                    719,
                    722,
                    2771,
                    2775,
                    2776,
                    2779,
                    2782,
                    2788,
                    747,
                    749,
                    2798,
                    2799,
                    2813,
                    773,
                    775,
                    2838,
                    792,
                    795,
                    798,
                    2847,
                    2849,
                    823,
                    825,
                    2892,
                    2894,
                    849,
                    851,
                    855,
                    857,
                    858,
                    881,
                    883,
                    885,
                    886,
                    2952,
                    2953,
                    907,
                    910,
                    911,
                    922,
                    927,
                    936,
                    948,
                    949,
                    955,
                    959,
                    3008,
                    961,
                    3010,
                    963,
                    3011,
                    965,
                    3013,
                    999,
                    1011,
                    1013,
                    1014,
                    1015,
                    1016,
                    1018,
                    1019,
                    1030,
                    1032,
                    1033,
                    1034,
                    1035,
                    1037,
                    1038,
                    3085,
                    3092,
                    1045,
                    1046,
                    1050,
                    1051,
                    3100,
                    1053,
                    1054,
                    3101,
                    1056,
                    1059,
                    1060,
                    3109,
                    1062,
                    1063,
                    3110,
                    1065,
                    1067,
                    1070,
                    1071,
                    1073,
                    1075,
                    3124,
                    1081,
                    1083,
                    1085,
                    1086,
                    1087,
                    1088,
                    1089,
                    1090,
                    1091,
                    1092,
                    1093,
                    3138,
                    1095,
                    1096,
                    1098,
                    1099,
                    1100,
                    1101,
                    1102,
                    1103,
                    1104,
                    1105,
                    1106,
                    1107,
                    1108,
                    1109,
                    1110,
                    1112,
                    1113,
                    3166,
                    1122,
                    1124,
                    3172,
                    1126,
                    3173,
                    1132,
                    1137,
                    1146,
                    1148,
                    1149,
                    3197,
                    1154,
                    1155,
                    1156,
                    1157,
                    1158,
                    1159,
                    1161,
                    1163,
                    1164,
                    1166,
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172,
                    1173,
                    1175,
                    1179,
                    1183,
                    1193,
                    1194,
                    1195,
                    1202,
                    1204,
                    1205,
                    1206,
                    3295,
                    3296,
                    3297,
                    3302,
                    3308,
                    3311,
                    1280,
                    1281,
                    3329,
                    3330,
                    1284,
                    3334,
                    3336,
                    3339,
                    3341,
                    3342,
                    3343,
                    3345,
                    3347,
                    3377,
                    3379,
                    3380,
                    3384,
                    1339,
                    3389,
                    1346,
                    1347,
                    1349,
                    1355,
                    1356,
                    1359,
                    1360,
                    3410,
                    1374,
                    3424,
                    3452,
                    1408,
                    1409,
                    3458,
                    1411,
                    3459,
                    1422,
                    3483,
                    1436,
                    1459,
                    1460,
                    1484,
                    3563,
                    3564,
                    3565,
                    3570,
                    3576,
                    3579,
                    1532,
                    1533,
                    1535,
                    1539,
                    1549,
                    1550,
                    3598,
                    3599,
                    3603,
                    3605,
                    3608,
                    3610,
                    3611,
                    1564,
                    1565,
                    3612,
                    3614,
                    3616,
                    1596,
                    1598,
                    3646,
                    1600,
                    1601,
                    3648,
                    3649,
                    1604,
                    3653,
                    1607,
                    1608,
                    3658,
                    1611,
                    1614,
                    1618,
                    1620,
                    1621,
                    1627,
                    1628,
                    1630,
                    3679,
                    1632,
                    1633,
                    1634,
                    1635,
                    3680,
                    3689,
                    3690,
                    1647,
                    3697,
                    3701,
                    1663,
                    1664,
                    3711,
                    3725,
                    3726,
                    1685,
                    1690,
                    3746,
                    3756,
                    3762,
                    3772,
                    3788,
                    3789,
                    3805,
                    1758,
                    3806,
                    1760,
                    1762,
                    1763,
                    1764,
                    1767,
                    1769,
                    1770,
                    1772,
                    1773,
                    1775,
                    1776,
                    1777,
                    1779,
                    1780,
                    1781,
                    1782,
                    1784,
                    1786,
                    3845,
                    3846,
                    3860,
                    1816,
                    1817,
                    1821,
                    1825,
                    1829,
                    1833,
                    3882,
                    3883,
                    1837,
                    3887,
                    1841,
                    3903,
                    1859,
                    1861,
                    1864,
                    3914,
                    1868,
                    3923,
                    3925,
                    1879,
                    1880,
                    1881,
                    1882,
                    3942,
                    3943,
                    3944,
                    1897,
                    1898,
                    1899,
                    1900,
                    1901,
                    1902,
                    3945,
                    3946,
                    3958,
                    1915,
                    1918,
                    1919,
                    1920,
                    1929,
                    1930,
                    1931,
                    1932,
                    1935,
                    1940,
                    1941,
                    1943,
                    1950,
                    3998,
                    1952,
                    1953,
                    1954,
                    1955,
                    1960,
                    4008,
                    4009,
                    4011,
                    1966,
                    1968,
                    1970,
                    1972,
                    1973,
                    1974,
                    1975,
                    4029,
                    1982,
                    1983,
                    1984,
                    1985,
                    4030,
                    4035,
                    4036,
                    4037,
                    4038,
                    4039,
                    4040,
                    4041,
                    4042,
                    4043,
                    4044,
                    4045,
                    1998,
                    4046,
                    4047,
                    2001,
                    2004,
                    4052,
                    4055,
                    2009,
                    4062,
                    2025,
                    2026,
                    2027,
                    4073,
                    4075,
                    2030,
                    4077,
                    4080,
                    4081,
                    2036,
                    4084,
                    2038,
                    2039,
                    2040,
                    2041,
                    4085,
                    4086
                ],
                "attr_name": [
                    52
                ],
                "self.method_name": [
                    80,
                    60,
                    53,
                    71
                ],
                "method_name": [
                    53
                ],
                "self.doc_sub": [
                    76,
                    54
                ],
                "doc_sub": [
                    75,
                    77,
                    54
                ],
                "get_method": [
                    60,
                    63
                ],
                "attrgetter": [
                    2721,
                    60
                ],
                "args": [
                    1792,
                    1793,
                    260,
                    261,
                    1798,
                    265,
                    266,
                    267,
                    268,
                    269,
                    63,
                    200,
                    203,
                    1750,
                    1751,
                    217,
                    221,
                    222,
                    224,
                    234,
                    238,
                    240,
                    4209,
                    1272,
                    251,
                    1276,
                    1279
                ],
                "kwargs": [
                    258,
                    259,
                    2181,
                    2182,
                    3080,
                    2185,
                    270,
                    527,
                    1806,
                    1807,
                    1808,
                    1809,
                    2193,
                    2195,
                    2196,
                    2197,
                    3087,
                    409,
                    1818,
                    1820,
                    415,
                    306,
                    3381,
                    318,
                    63,
                    3008,
                    3010,
                    3650,
                    200,
                    2888,
                    203,
                    331,
                    2892,
                    2894,
                    210,
                    213,
                    355,
                    359,
                    361,
                    4207,
                    4209,
                    1272,
                    2173,
                    1279
                ],
                "wrapper.__module__": [
                    65
                ],
                "wrapper": [
                    65,
                    66,
                    67,
                    72,
                    79,
                    83,
                    85
                ],
                "owner.__module__": [
                    65
                ],
                "owner": [
                    65,
                    67,
                    85
                ],
                "wrapper.__name__": [
                    66
                ],
                "name": [
                    1056,
                    66,
                    67,
                    421,
                    85
                ],
                "wrapper.__qualname__": [
                    67,
                    79
                ],
                "owner.__qualname__": [
                    67
                ],
                "wrapped_method": [
                    72,
                    73,
                    71
                ],
                "getattr": [
                    2562,
                    580,
                    1413,
                    71,
                    591,
                    2543,
                    858
                ],
                "maxis.Axis": [
                    71
                ],
                "maxis": [
                    618,
                    615,
                    71
                ],
                "wrapper.__signature__": [
                    72
                ],
                "inspect.signature": [
                    72
                ],
                "inspect": [
                    72,
                    83
                ],
                "doc": [
                    73,
                    74,
                    78,
                    82,
                    83
                ],
                "wrapped_method.__doc__": [
                    73
                ],
                "k": [
                    382,
                    2952,
                    331,
                    77,
                    78,
                    301,
                    302,
                    81,
                    82,
                    303,
                    333,
                    2606,
                    2607,
                    2608,
                    379,
                    286
                ],
                "v": [
                    2952,
                    331,
                    332,
                    77,
                    2606,
                    2607,
                    2608,
                    82,
                    375,
                    379,
                    381,
                    382
                ],
                "doc_sub.items": [
                    77
                ],
                "doc.replace": [
                    82
                ],
                "wrapper.__doc__": [
                    83
                ],
                "inspect.cleandoc": [
                    83
                ],
                "setattr": [
                    85
                ],
                "linestyle": [
                    164,
                    133,
                    165,
                    166,
                    136,
                    167,
                    106,
                    139,
                    171,
                    142,
                    366,
                    371,
                    118,
                    122,
                    380
                ],
                "marker": [
                    164,
                    168,
                    169,
                    107,
                    171,
                    366,
                    145,
                    371,
                    148,
                    118,
                    122,
                    380
                ],
                "color": [
                    154,
                    1193,
                    171,
                    108,
                    1195,
                    366,
                    112,
                    371,
                    118,
                    151,
                    122,
                    380,
                    125,
                    158
                ],
                "mcolors.to_rgba": [
                    112,
                    158
                ],
                "mcolors": [
                    112,
                    158,
                    150
                ],
                "fmt": [
                    130,
                    131,
                    132,
                    135,
                    136,
                    141,
                    112,
                    147,
                    116,
                    120,
                    153,
                    156,
                    157
                ],
                "fmtint": [
                    120,
                    116
                ],
                "str": [
                    267,
                    116,
                    365,
                    1750
                ],
                "int": [
                    116,
                    157
                ],
                "ValueError": [
                    2947,
                    2948,
                    134,
                    1031,
                    1801,
                    1418,
                    140,
                    396,
                    2317,
                    399,
                    3213,
                    146,
                    152,
                    414,
                    2846,
                    800,
                    161,
                    1860,
                    1862,
                    724,
                    482,
                    235,
                    4208,
                    369,
                    1012,
                    117,
                    2295,
                    376,
                    1529,
                    126,
                    1789,
                    254
                ],
                "i": [
                    129,
                    130,
                    131,
                    132,
                    136,
                    137,
                    143,
                    149,
                    155,
                    156,
                    157,
                    159
                ],
                "len": [
                    384,
                    1792,
                    130,
                    1793,
                    3844,
                    1929,
                    156,
                    1952,
                    3874,
                    2086,
                    2608,
                    1972,
                    200,
                    2376,
                    2378,
                    2888,
                    1750,
                    1879,
                    1880,
                    1881,
                    1882,
                    222,
                    224,
                    2528,
                    2148,
                    365,
                    368,
                    1528,
                    251,
                    1276,
                    2558
                ],
                "c": [
                    162,
                    131,
                    138,
                    142,
                    144,
                    148,
                    150,
                    154,
                    156
                ],
                "mlines.lineStyles": [
                    138,
                    132
                ],
                "mlines": [
                    144,
                    138,
                    132,
                    309
                ],
                "mlines.lineMarkers": [
                    144
                ],
                "mcolors.get_named_colors_mapping": [
                    150
                ],
                "color_cycle_number": [
                    157,
                    158
                ],
                "format": [
                    428,
                    214,
                    158
                ],
                "mpl.rcParams": [
                    772,
                    537,
                    165,
                    822,
                    1080,
                    1082,
                    1089,
                    1090,
                    201,
                    1098,
                    848,
                    1113,
                    1114,
                    1116,
                    1117,
                    1119,
                    746,
                    502,
                    1143,
                    505
                ],
                "mpl": [
                    259,
                    772,
                    537,
                    165,
                    822,
                    1080,
                    1082,
                    1089,
                    1090,
                    1858,
                    201,
                    1098,
                    848,
                    1113,
                    1114,
                    1116,
                    221,
                    1117,
                    1119,
                    746,
                    502,
                    1143,
                    505
                ],
                "self.axes": [
                    192,
                    484,
                    390,
                    391,
                    392,
                    393,
                    1960,
                    314,
                    210,
                    186,
                    315
                ],
                "axes": [
                    1536,
                    1346,
                    1349,
                    1351,
                    186,
                    1532,
                    1535
                ],
                "self.command": [
                    192,
                    187,
                    406,
                    215
                ],
                "command": [
                    187
                ],
                "self.set_prop_cycle": [
                    196,
                    188
                ],
                "self.__dict__": [
                    592,
                    195
                ],
                "state.copy": [
                    195
                ],
                "state": [
                    576,
                    195,
                    581,
                    583,
                    589,
                    592,
                    574
                ],
                "prop_cycler": [
                    201,
                    203,
                    205,
                    207
                ],
                "cycler": [
                    203,
                    1279
                ],
                "self.prop_cycler": [
                    289,
                    276,
                    205
                ],
                "itertools.cycle": [
                    205
                ],
                "itertools": [
                    205
                ],
                "self._prop_keys": [
                    274,
                    285,
                    207
                ],
                "prop_cycler.keys": [
                    207
                ],
                "self.axes._process_unit_info": [
                    210
                ],
                "pos_only": [
                    212,
                    213,
                    215
                ],
                "TypeError": [
                    4160,
                    2947,
                    3556,
                    2374,
                    3560,
                    1801,
                    1802,
                    1068,
                    2381,
                    1076,
                    214,
                    4151,
                    3288,
                    1273,
                    1819,
                    3292
                ],
                "data": [
                    2178,
                    2191,
                    2192,
                    220,
                    221,
                    2175
                ],
                "replaced": [
                    261,
                    260,
                    221,
                    238
                ],
                "mpl._replacer": [
                    221
                ],
                "arg": [
                    221
                ],
                "label_namer_idx": [
                    260,
                    236,
                    248,
                    250,
                    252,
                    223
                ],
                "_process_plot_format": [
                    234,
                    366
                ],
                "cbook._warn_external": [
                    3581,
                    3587,
                    3876,
                    3593,
                    239,
                    3313,
                    2386,
                    4020,
                    3319,
                    3325
                ],
                "cbook": [
                    1794,
                    3587,
                    1029,
                    3078,
                    2951,
                    3593,
                    2954,
                    1555,
                    419,
                    1060,
                    1829,
                    3876,
                    423,
                    424,
                    425,
                    1833,
                    4020,
                    1336,
                    1338,
                    3004,
                    2890,
                    2386,
                    3581,
                    2154,
                    2666,
                    239,
                    2671,
                    3313,
                    1010,
                    3319,
                    3325,
                    1406
                ],
                "RuntimeWarning": [
                    247
                ],
                "kwargs.get": [
                    409,
                    258,
                    359
                ],
                "mpl._label_from_arg": [
                    259
                ],
                "this": [
                    266,
                    268,
                    270
                ],
                "isinstance": [
                    1858,
                    2054,
                    267,
                    3211,
                    365,
                    1750,
                    920,
                    477
                ],
                "self._plot_args": [
                    270
                ],
                "next": [
                    289,
                    276,
                    1820
                ],
                "prop_keys": [
                    285,
                    286
                ],
                "ignore": [
                    290,
                    285
                ],
                "any": [
                    640,
                    642,
                    1413,
                    2001,
                    375,
                    286
                ],
                "kw.get": [
                    302,
                    348,
                    286
                ],
                "kw": [
                    382,
                    360,
                    302,
                    303,
                    306,
                    307,
                    308,
                    309,
                    339,
                    340,
                    409,
                    378,
                    348,
                    317,
                    286,
                    415
                ],
                "default_dict": [
                    289,
                    291,
                    355,
                    293,
                    294,
                    307,
                    308,
                    339,
                    340,
                    351
                ],
                "copy": [
                    289
                ],
                "p": [
                    3998,
                    3999,
                    4000,
                    290,
                    291,
                    4005,
                    4014,
                    4015,
                    4018,
                    4025,
                    2121,
                    2122,
                    2123,
                    2036,
                    2037,
                    2038,
                    2039,
                    2040,
                    2041,
                    2042
                ],
                "default_dict.pop": [
                    291,
                    351
                ],
                "defaults": [
                    301,
                    303
                ],
                "self._getdefaults": [
                    339,
                    307
                ],
                "set": [
                    307
                ],
                "self._setdefaults": [
                    355,
                    308,
                    340
                ],
                "seg": [
                    357,
                    361,
                    362,
                    309,
                    310
                ],
                "mlines.Line2D": [
                    309
                ],
                "x": [
                    385,
                    388,
                    391,
                    395,
                    397,
                    398,
                    400,
                    401,
                    402,
                    412,
                    415,
                    3999,
                    309,
                    314,
                    2624,
                    2626,
                    2373,
                    2377,
                    2379,
                    2384,
                    2389,
                    2390,
                    2650,
                    2395,
                    2656,
                    3680,
                    357,
                    2661,
                    2662,
                    3947,
                    3694,
                    3697,
                    2552
                ],
                "y": [
                    386,
                    388,
                    393,
                    395,
                    397,
                    398,
                    400,
                    403,
                    404,
                    412,
                    415,
                    4000,
                    309,
                    315,
                    2373,
                    2377,
                    2379,
                    2384,
                    2391,
                    2392,
                    2649,
                    2650,
                    2395,
                    2654,
                    1119,
                    1120,
                    1121,
                    2656,
                    357,
                    1127,
                    3690,
                    3948,
                    1133,
                    1138,
                    3698,
                    3701
                ],
                "self.axes.convert_xunits": [
                    314
                ],
                "self.axes.convert_yunits": [
                    315
                ],
                "kw.copy": [
                    317
                ],
                "kwargs.copy": [
                    318
                ],
                "ignores": [
                    328,
                    339,
                    333
                ],
                "kwargs.items": [
                    331
                ],
                "ignores.add": [
                    333
                ],
                "facecolor": [
                    358,
                    501,
                    502,
                    503,
                    348
                ],
                "mpatches.Polygon": [
                    357
                ],
                "mpatches": [
                    357,
                    982,
                    2054
                ],
                "np.column_stack": [
                    357
                ],
                "np": [
                    2568,
                    3212,
                    402,
                    404,
                    4013,
                    4014,
                    3378,
                    3890,
                    3891,
                    3385,
                    4025,
                    2494,
                    3647,
                    2502,
                    3654,
                    2508,
                    3284,
                    3163,
                    2527,
                    3552,
                    4192,
                    2147,
                    2532,
                    357,
                    4198,
                    2535,
                    4199,
                    1783,
                    3449
                ],
                "seg.set": [
                    361
                ],
                "tup": [
                    384,
                    385,
                    386,
                    388,
                    365,
                    366,
                    367,
                    368,
                    375
                ],
                "zip": [
                    379
                ],
                "_check_1d": [
                    385,
                    386
                ],
                "index_of": [
                    388
                ],
                "self.axes.xaxis": [
                    390,
                    391
                ],
                "self.axes.xaxis.update_units": [
                    391
                ],
                "self.axes.yaxis": [
                    392,
                    393
                ],
                "self.axes.yaxis.update_units": [
                    393
                ],
                "x.shape": [
                    400,
                    395,
                    412,
                    397
                ],
                "y.shape": [
                    400,
                    395,
                    412,
                    397
                ],
                "x.ndim": [
                    401,
                    398
                ],
                "y.ndim": [
                    403,
                    398
                ],
                "np.newaxis": [
                    402,
                    404
                ],
                "func": [
                    415,
                    410,
                    407
                ],
                "self._makeline": [
                    407
                ],
                "self._makefill": [
                    410
                ],
                "ncx": [
                    416,
                    412,
                    413,
                    414,
                    415
                ],
                "ncy": [
                    416,
                    412,
                    413,
                    414,
                    415
                ],
                "j": [
                    416,
                    415
                ],
                "range": [
                    416
                ],
                "max": [
                    416,
                    1568,
                    2658,
                    1636,
                    1637,
                    2647,
                    2574,
                    1551,
                    1552,
                    1783,
                    1567
                ],
                "martist.Artist": [
                    625,
                    476,
                    420
                ],
                "martist": [
                    420,
                    2665,
                    625,
                    476,
                    1916
                ],
                "_shared_x_axes": [
                    423
                ],
                "cbook.Grouper": [
                    424,
                    425,
                    423
                ],
                "_shared_y_axes": [
                    424
                ],
                "_twinned_axes": [
                    425
                ],
                "type": [
                    429
                ],
                "self._position.bounds": [
                    429
                ],
                "self._position": [
                    480,
                    481,
                    483,
                    429,
                    627,
                    886,
                    478
                ],
                "martist.Artist.__init__": [
                    476
                ],
                "rect": [
                    480,
                    477,
                    478
                ],
                "mtransforms.Bbox": [
                    480,
                    2114,
                    4201,
                    4017,
                    2165,
                    630,
                    631,
                    1528,
                    921,
                    1530,
                    477,
                    4190
                ],
                "mtransforms": [
                    774,
                    1528,
                    920,
                    921,
                    679,
                    684,
                    685,
                    689,
                    690,
                    1202,
                    4017,
                    824,
                    697,
                    699,
                    2114,
                    850,
                    856,
                    477,
                    4190,
                    480,
                    4201,
                    748,
                    2542,
                    627,
                    2165,
                    630,
                    631,
                    632,
                    633,
                    1530
                ],
                "mtransforms.Bbox.from_bounds": [
                    480,
                    921
                ],
                "self._position.width": [
                    481
                ],
                "self._position.height": [
                    481
                ],
                "self._originalPosition": [
                    881,
                    483
                ],
                "self._position.frozen": [
                    483,
                    886
                ],
                "self._aspect": [
                    1284,
                    485
                ],
                "self._adjustable": [
                    1374,
                    1355,
                    486,
                    1607
                ],
                "self._anchor": [
                    1484,
                    487
                ],
                "self._stale_viewlim_x": [
                    488,
                    662
                ],
                "self._stale_viewlim_y": [
                    664,
                    489
                ],
                "self._sharex": [
                    1062,
                    1063,
                    490,
                    1168,
                    1011,
                    1014,
                    1085
                ],
                "self._sharey": [
                    1030,
                    1033,
                    491,
                    1070,
                    1071,
                    1171,
                    1087
                ],
                "self.set_label": [
                    492
                ],
                "label": [
                    2084,
                    2085,
                    1927,
                    1928,
                    492
                ],
                "self.set_figure": [
                    493
                ],
                "fig": [
                    625,
                    628,
                    493
                ],
                "self.set_box_aspect": [
                    494
                ],
                "box_aspect": [
                    1639,
                    1640,
                    1611,
                    1613,
                    494
                ],
                "self._axes_locator": [
                    955,
                    948,
                    495
                ],
                "self.spines": [
                    1056,
                    616,
                    617,
                    4040,
                    619,
                    620,
                    4077,
                    719,
                    2704,
                    497,
                    722,
                    795,
                    798
                ],
                "self._gen_axes_spines": [
                    497
                ],
                "self._init_axis": [
                    500
                ],
                "self._facecolor": [
                    1193,
                    1156,
                    503
                ],
                "self._frameon": [
                    2788,
                    4075,
                    2798,
                    2703,
                    2739,
                    504
                ],
                "frameon": [
                    504
                ],
                "self.set_axisbelow": [
                    505
                ],
                "self._rasterization_zorder": [
                    2411,
                    507,
                    2725,
                    2406
                ],
                "self.cla": [
                    1179,
                    508
                ],
                "sharex": [
                    510,
                    511
                ],
                "self.sharex": [
                    1063,
                    511
                ],
                "sharey": [
                    512,
                    513
                ],
                "self.sharey": [
                    513,
                    1071
                ],
                "self.fmt_xdata": [
                    516,
                    3679
                ],
                "self.fmt_ydata": [
                    3689,
                    517
                ],
                "self.set_navigate": [
                    519
                ],
                "self.set_navigate_mode": [
                    520
                ],
                "xscale": [
                    522,
                    523
                ],
                "self.set_xscale": [
                    523
                ],
                "yscale": [
                    524,
                    525
                ],
                "self.set_yscale": [
                    525
                ],
                "self.update": [
                    527
                ],
                "self.xaxis": [
                    3329,
                    3330,
                    1163,
                    1549,
                    3085,
                    3725,
                    529,
                    530,
                    1169,
                    2195,
                    2585,
                    1050,
                    1053,
                    2591,
                    1065,
                    1837,
                    4269,
                    3377,
                    4147,
                    3124,
                    4149,
                    3384,
                    1081,
                    4153,
                    3903,
                    3008,
                    2892,
                    857,
                    1632,
                    3680,
                    615,
                    616,
                    617,
                    1015,
                    1016,
                    1019,
                    3711
                ],
                "self._xcid": [
                    530
                ],
                "self.xaxis.callbacks.connect": [
                    530
                ],
                "self.xaxis.callbacks": [
                    530
                ],
                "self._on_units_changed": [
                    531,
                    535
                ],
                "self.yaxis": [
                    1034,
                    1035,
                    1164,
                    1038,
                    1550,
                    3598,
                    3599,
                    3726,
                    4240,
                    1172,
                    533,
                    534,
                    2196,
                    3092,
                    1051,
                    2588,
                    1054,
                    2591,
                    1073,
                    1841,
                    1083,
                    4156,
                    3646,
                    4158,
                    3010,
                    4162,
                    3653,
                    3914,
                    2894,
                    3410,
                    857,
                    1633,
                    618,
                    619,
                    620,
                    3690,
                    3711
                ],
                "self._ycid": [
                    534
                ],
                "self.yaxis.callbacks.connect": [
                    534
                ],
                "self.yaxis.callbacks": [
                    534
                ],
                "rcParams": [
                    537,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565
                ],
                "self.tick_params": [
                    553,
                    538
                ],
                "self._layoutbox": [
                    568,
                    910
                ],
                "self._poslayoutbox": [
                    569,
                    911
                ],
                "__getstate__": [
                    574
                ],
                "super": [
                    574
                ],
                "key": [
                    576,
                    4004,
                    3978,
                    4010,
                    3983,
                    3985,
                    3987,
                    575
                ],
                "grouper_name": [
                    578,
                    580,
                    581,
                    587,
                    589,
                    591
                ],
                "grouper": [
                    580,
                    581,
                    582
                ],
                "grouper.get_siblings": [
                    581
                ],
                "siblings": [
                    589,
                    590,
                    591
                ],
                "state.pop": [
                    589
                ],
                "join": [
                    1530,
                    591
                ],
                "self._stale": [
                    593,
                    2686
                ],
                "self.bbox": [
                    611,
                    679,
                    4008,
                    4009,
                    3946,
                    627
                ],
                "maxis.XAxis": [
                    615
                ],
                "register_axis": [
                    616,
                    617,
                    619,
                    620
                ],
                "maxis.YAxis": [
                    618
                ],
                "self._update_transScale": [
                    1093,
                    621
                ],
                "martist.Artist.set_figure": [
                    625
                ],
                "mtransforms.TransformedBbox": [
                    690,
                    627
                ],
                "fig.transFigure": [
                    628
                ],
                "self.dataLim": [
                    2113,
                    2114,
                    2150,
                    2026,
                    1647,
                    2165,
                    630
                ],
                "mtransforms.Bbox.null": [
                    2114,
                    630
                ],
                "self._viewLim": [
                    3334,
                    654,
                    690,
                    3603,
                    631
                ],
                "mtransforms.Bbox.unit": [
                    631
                ],
                "self.transScale": [
                    695,
                    684,
                    690,
                    855,
                    632
                ],
                "mtransforms.TransformWrapper": [
                    632,
                    684
                ],
                "mtransforms.IdentityTransform": [
                    633,
                    685
                ],
                "self._set_lim_and_transforms": [
                    635
                ],
                "scalex": [
                    640,
                    2435,
                    644,
                    2501,
                    2438,
                    649,
                    2442,
                    2446,
                    2098,
                    2450,
                    661,
                    2584
                ],
                "ax._stale_viewlim_x": [
                    640,
                    646
                ],
                "ax": [
                    640,
                    641,
                    642,
                    643,
                    1536,
                    645,
                    646,
                    647,
                    648,
                    1413,
                    1415,
                    3714,
                    1420,
                    1421,
                    3717,
                    3718,
                    3721,
                    3715,
                    922,
                    924,
                    926,
                    936,
                    937,
                    938,
                    3380,
                    3381,
                    1537,
                    3382,
                    3383,
                    1466,
                    1467,
                    1469,
                    1470,
                    1471,
                    3649,
                    1921,
                    3650,
                    3651,
                    3652,
                    2630,
                    1351,
                    1352,
                    2504,
                    2505,
                    2506,
                    2631,
                    2632,
                    2510,
                    2511,
                    2512,
                    2635,
                    2637,
                    2638,
                    2640,
                    2641,
                    2642,
                    2643,
                    2645,
                    2525,
                    3711,
                    3712,
                    1915,
                    1916,
                    1918,
                    1919
                ],
                "self._shared_x_axes.get_siblings": [
                    1408,
                    641,
                    1346,
                    645,
                    2504,
                    3341,
                    1532
                ],
                "self._shared_x_axes": [
                    1408,
                    641,
                    1346,
                    645,
                    2504,
                    3341,
                    1166,
                    4276,
                    1013,
                    2584,
                    1532,
                    1663
                ],
                "scaley": [
                    642,
                    644,
                    2436,
                    2439,
                    649,
                    2507,
                    2445,
                    2448,
                    2098,
                    2450,
                    663,
                    2587
                ],
                "ax._stale_viewlim_y": [
                    648,
                    642
                ],
                "self._shared_y_axes.get_siblings": [
                    1409,
                    1347,
                    643,
                    647,
                    2510,
                    3610,
                    1533
                ],
                "self._shared_y_axes": [
                    1664,
                    1409,
                    643,
                    1347,
                    647,
                    1032,
                    2510,
                    1167,
                    4280,
                    3610,
                    2587,
                    1533
                ],
                "self.autoscale_view": [
                    1764,
                    649,
                    3658,
                    1772,
                    1775,
                    3389
                ],
                "self._unstale_viewLim": [
                    2681,
                    1940,
                    653
                ],
                "property": [
                    651,
                    2255
                ],
                "tight": [
                    3011,
                    2446,
                    2448,
                    2385,
                    2386,
                    659,
                    660,
                    2450,
                    2491,
                    2395,
                    2492
                ],
                "self._tight": [
                    2578,
                    2492,
                    1091,
                    660
                ],
                "self.transAxes": [
                    1159,
                    679,
                    1206,
                    695,
                    2649,
                    698,
                    700,
                    2654
                ],
                "mtransforms.BboxTransformTo": [
                    679
                ],
                "self.transLimits": [
                    689,
                    695
                ],
                "mtransforms.BboxTransformFrom": [
                    689
                ],
                "self.transData": [
                    961,
                    3944,
                    2025,
                    3945,
                    2060,
                    1998,
                    2062,
                    3887,
                    2001,
                    2066,
                    2004,
                    1941,
                    3860,
                    695,
                    2009,
                    698,
                    700
                ],
                "self._xaxis_transform": [
                    697,
                    716
                ],
                "mtransforms.blended_transform_factory": [
                    856,
                    697,
                    699
                ],
                "self._yaxis_transform": [
                    792,
                    699
                ],
                "which": [
                    715,
                    907,
                    717,
                    2892,
                    2894,
                    720,
                    791,
                    793,
                    923,
                    796,
                    925
                ],
                "get_spine_transform": [
                    722,
                    795,
                    798,
                    719
                ],
                "labels_align": [
                    772,
                    776,
                    746,
                    750,
                    848,
                    852,
                    822,
                    826
                ],
                "self.get_xaxis_transform": [
                    747,
                    773
                ],
                "mtransforms.ScaledTranslation": [
                    774,
                    748,
                    850,
                    1202,
                    824
                ],
                "pad_points": [
                    824,
                    850,
                    748,
                    774
                ],
                "self.figure.dpi_scale_trans": [
                    775,
                    749,
                    851,
                    1204,
                    825
                ],
                "self.figure": [
                    1155,
                    775,
                    2759,
                    3614,
                    2762,
                    749,
                    2782,
                    3345,
                    4209,
                    851,
                    1204,
                    2676,
                    2771,
                    825,
                    2779,
                    2718,
                    959
                ],
                "self.get_yaxis_transform": [
                    849,
                    823
                ],
                "self.transScale.set": [
                    855
                ],
                "self.xaxis.get_transform": [
                    1632,
                    857,
                    1549,
                    3903
                ],
                "self.yaxis.get_transform": [
                    857,
                    3914,
                    1550,
                    1633
                ],
                "line": [
                    2010,
                    2117,
                    2118,
                    2119,
                    1992,
                    1996,
                    1966,
                    1967,
                    1968,
                    1970,
                    1971,
                    1972,
                    1973,
                    1974,
                    1976,
                    858,
                    860
                ],
                "line._transformed_path.invalidate": [
                    860
                ],
                "line._transformed_path": [
                    860
                ],
                "AttributeError": [
                    2760,
                    2772,
                    2967,
                    2968,
                    861
                ],
                "original": [
                    880
                ],
                "self._originalPosition.frozen": [
                    881
                ],
                "locator": [
                    2689,
                    2690,
                    2691,
                    2632,
                    2633,
                    2634,
                    4139,
                    4140,
                    4141,
                    2546,
                    883,
                    948,
                    884,
                    2547,
                    2579
                ],
                "self.get_axes_locator": [
                    2689,
                    4139,
                    883
                ],
                "self.apply_aspect": [
                    2692,
                    2694,
                    4142,
                    4144,
                    885
                ],
                "self._set_position": [
                    1601,
                    907,
                    1614,
                    1621,
                    1628
                ],
                "pos": [
                    2691,
                    2692,
                    937,
                    938,
                    907,
                    2634,
                    2635,
                    4141,
                    4142,
                    920,
                    921,
                    924,
                    926
                ],
                "mtransforms.BboxBase": [
                    920,
                    2542
                ],
                "self._twinned_axes.get_siblings": [
                    2628,
                    936,
                    1459,
                    1460,
                    922
                ],
                "self._twinned_axes": [
                    2628,
                    936,
                    1608,
                    1459,
                    1460,
                    4212,
                    922
                ],
                "ax._position.set": [
                    924
                ],
                "ax._position": [
                    924
                ],
                "ax._originalPosition.set": [
                    926
                ],
                "ax._originalPosition": [
                    926
                ],
                "self.stale": [
                    1920,
                    1539,
                    1422,
                    2319,
                    3347,
                    1943,
                    1175,
                    3101,
                    927,
                    3616,
                    2849,
                    1955,
                    3110,
                    1194,
                    949,
                    1975,
                    2750,
                    1985,
                    3013,
                    1360,
                    2407,
                    1902,
                    2799,
                    2297
                ],
                "ax.get_position": [
                    937
                ],
                "ax.set_position": [
                    938
                ],
                "a.set_figure": [
                    959
                ],
                "a": [
                    2719,
                    2720,
                    2730,
                    2731,
                    2732,
                    2733,
                    2743,
                    2744,
                    959,
                    960,
                    961,
                    963,
                    964,
                    965,
                    2762,
                    4184,
                    4188,
                    4196,
                    1897,
                    1898,
                    1899,
                    1900,
                    1901,
                    1903
                ],
                "a.is_transform_set": [
                    960
                ],
                "a.set_transform": [
                    961
                ],
                "a.axes": [
                    1897,
                    963
                ],
                "a.mouseover": [
                    964
                ],
                "self._mouseover_set.add": [
                    965
                ],
                "self._mouseover_set": [
                    1105,
                    965
                ],
                "mpatches.Rectangle": [
                    982,
                    2054
                ],
                "OrderedDict": [
                    999
                ],
                "side": [
                    1000,
                    999
                ],
                "mspines.Spine.linear_spine": [
                    999
                ],
                "mspines.Spine": [
                    999
                ],
                "mspines": [
                    999
                ],
                "cbook._check_isinstance": [
                    1010,
                    1029
                ],
                "_AxesBase": [
                    1010,
                    1029,
                    1414
                ],
                "other": [
                    1029,
                    1030,
                    1032,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    3341,
                    3342,
                    3343,
                    3345,
                    3346,
                    3610,
                    3611,
                    3612,
                    3614,
                    3615,
                    1010,
                    1011,
                    1013,
                    1014,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019
                ],
                "self._shared_x_axes.join": [
                    1013
                ],
                "self.xaxis.major": [
                    1015
                ],
                "other.xaxis.major": [
                    1015
                ],
                "other.xaxis": [
                    1016,
                    1019,
                    1015
                ],
                "self.xaxis.minor": [
                    1016
                ],
                "other.xaxis.minor": [
                    1016
                ],
                "x0": [
                    2565,
                    2566,
                    2570,
                    2574,
                    2543,
                    1648,
                    1650,
                    2547,
                    2554,
                    2579,
                    2580,
                    1690,
                    1688,
                    1017,
                    1018
                ],
                "x1": [
                    2565,
                    2566,
                    2570,
                    2543,
                    1648,
                    2576,
                    1689,
                    1650,
                    2547,
                    2579,
                    2580,
                    1690,
                    1017,
                    1018,
                    2557
                ],
                "other.get_xlim": [
                    1017
                ],
                "self.set_xlim": [
                    3172,
                    1067,
                    4029,
                    1816,
                    1784,
                    1018,
                    3805
                ],
                "other.get_autoscalex_on": [
                    1018
                ],
                "self.xaxis._scale": [
                    1019
                ],
                "other.xaxis._scale": [
                    1019
                ],
                "self._shared_y_axes.join": [
                    1032
                ],
                "self.yaxis.major": [
                    1034
                ],
                "other.yaxis.major": [
                    1034
                ],
                "other.yaxis": [
                    1034,
                    1035,
                    1038
                ],
                "self.yaxis.minor": [
                    1035
                ],
                "other.yaxis.minor": [
                    1035
                ],
                "y0": [
                    1036,
                    1037,
                    1649,
                    1651,
                    1683,
                    1685
                ],
                "y1": [
                    1036,
                    1037,
                    1649,
                    1651,
                    1684,
                    1685
                ],
                "other.get_ylim": [
                    1036
                ],
                "self.set_ylim": [
                    3458,
                    1037,
                    1075,
                    4030,
                    1817,
                    1786,
                    3806
                ],
                "other.get_autoscaley_on": [
                    1037
                ],
                "self.yaxis._scale": [
                    1038
                ],
                "other.yaxis._scale": [
                    1038
                ],
                "hasattr": [
                    2505,
                    1045,
                    2511
                ],
                "patch_visible": [
                    1048,
                    1170,
                    1173,
                    1046
                ],
                "self.patch.get_visible": [
                    1046
                ],
                "self.patch": [
                    1154,
                    1155,
                    1156,
                    1157,
                    1158,
                    1159,
                    2697,
                    1163,
                    1164,
                    1935,
                    1170,
                    1173,
                    1046,
                    2204,
                    2076,
                    1183,
                    1195,
                    1968,
                    2740,
                    4047,
                    4055,
                    4062,
                    1901,
                    2038
                ],
                "xaxis_visible": [
                    1169,
                    1050
                ],
                "self.xaxis.get_visible": [
                    1050,
                    4147
                ],
                "yaxis_visible": [
                    1051,
                    1172
                ],
                "self.yaxis.get_visible": [
                    1051,
                    4156
                ],
                "self.xaxis.cla": [
                    1053
                ],
                "self.yaxis.cla": [
                    1054
                ],
                "spine": [
                    1056,
                    1057,
                    4077,
                    4078,
                    2704,
                    2705
                ],
                "self.spines.items": [
                    1056
                ],
                "spine.cla": [
                    1057
                ],
                "self.ignore_existing_data_limits": [
                    2115,
                    1059,
                    2150,
                    2152,
                    2027,
                    2030
                ],
                "self.callbacks": [
                    3608,
                    3339,
                    1060
                ],
                "cbook.CallbackRegistry": [
                    1060
                ],
                "self.xaxis._set_scale": [
                    1065
                ],
                "self.yaxis._set_scale": [
                    1073
                ],
                "self.xaxis.set_minor_locator": [
                    1081,
                    3725
                ],
                "mticker.AutoMinorLocator": [
                    1081,
                    3721,
                    1083
                ],
                "mticker": [
                    3715,
                    3719,
                    3721,
                    3725,
                    3726,
                    1081,
                    1083
                ],
                "self.yaxis.set_minor_locator": [
                    1083,
                    3726
                ],
                "self._autoscaleXon": [
                    2210,
                    2243,
                    2501,
                    2216,
                    2441,
                    2442,
                    2584,
                    3336,
                    2232,
                    1086
                ],
                "self._autoscaleYon": [
                    1088,
                    2210,
                    2507,
                    2444,
                    2253,
                    2222,
                    2445,
                    3605,
                    2233,
                    2587
                ],
                "self._xmargin": [
                    1089,
                    2501,
                    2447,
                    2387,
                    2296,
                    2585
                ],
                "self._ymargin": [
                    1090,
                    2507,
                    2318,
                    2449,
                    2387,
                    2588
                ],
                "self._use_sticky_edges": [
                    2274,
                    1092,
                    2270
                ],
                "self._get_lines": [
                    1280,
                    1095
                ],
                "_process_plot_var_args": [
                    1096,
                    1095
                ],
                "self._get_patches_for_fill": [
                    1096,
                    1281
                ],
                "self._gridOn": [
                    1113,
                    1098
                ],
                "self.lines": [
                    2117,
                    4037,
                    1833,
                    1099,
                    1972,
                    1973,
                    1974,
                    1881
                ],
                "self.patches": [
                    4036,
                    2121,
                    1100,
                    2040,
                    2041,
                    1882
                ],
                "self.texts": [
                    1984,
                    1101,
                    4038,
                    1983
                ],
                "self.tables": [
                    4043,
                    2075,
                    2077,
                    1102
                ],
                "self.artists": [
                    1898,
                    1899,
                    4039,
                    1103
                ],
                "self.images": [
                    1952,
                    1953,
                    1954,
                    2720,
                    1861,
                    1829,
                    4044,
                    2125,
                    1104,
                    1880
                ],
                "_OrderedSet": [
                    1105
                ],
                "self.child_axes": [
                    2630,
                    4045,
                    1106,
                    1918,
                    1919
                ],
                "self._current_image": [
                    1864,
                    1107,
                    1868
                ],
                "self.legend_": [
                    1825,
                    1108,
                    4046
                ],
                "self.collections": [
                    1859,
                    4035,
                    1861,
                    1929,
                    1930,
                    1931,
                    1109,
                    1879
                ],
                "self.containers": [
                    2086,
                    2088,
                    1110,
                    2087
                ],
                "self.grid": [
                    1112,
                    1113
                ],
                "props": [
                    1128,
                    1139,
                    1115,
                    1134
                ],
                "font_manager.FontProperties": [
                    1115
                ],
                "font_manager": [
                    1115
                ],
                "self._autotitlepos": [
                    2617,
                    1122,
                    1124
                ],
                "self.title": [
                    1126,
                    4169,
                    4042,
                    4084,
                    1205,
                    2776,
                    2714,
                    1148,
                    2621
                ],
                "mtext.Text": [
                    1137,
                    1132,
                    1126
                ],
                "mtext": [
                    1137,
                    1132,
                    1126
                ],
                "self._left_title": [
                    4169,
                    4042,
                    1132,
                    1205,
                    4085,
                    2776,
                    2715,
                    1148,
                    2621
                ],
                "props.copy": [
                    1139,
                    1134
                ],
                "self._right_title": [
                    4169,
                    4042,
                    1148,
                    1137,
                    1205,
                    4086,
                    2776,
                    2716,
                    2621
                ],
                "title_offset_points": [
                    1146,
                    1203,
                    1143
                ],
                "self._set_title_offset_trans": [
                    1146
                ],
                "_title": [
                    1205,
                    1206,
                    1207,
                    1148,
                    1149
                ],
                "self._set_artist_props": [
                    1932,
                    1900,
                    1966,
                    1982,
                    2036,
                    2074,
                    1149,
                    1950
                ],
                "self._gen_axes_patch": [
                    1154
                ],
                "self.patch.set_figure": [
                    1155
                ],
                "self.patch.set_facecolor": [
                    1195,
                    1156
                ],
                "self.patch.set_edgecolor": [
                    1157
                ],
                "self.patch.set_linewidth": [
                    1158
                ],
                "self.patch.set_transform": [
                    1159
                ],
                "self.set_axis_on": [
                    1161,
                    1758
                ],
                "self.xaxis.set_clip_path": [
                    1163
                ],
                "self.yaxis.set_clip_path": [
                    1164
                ],
                "self._shared_x_axes.clean": [
                    1166
                ],
                "self._shared_y_axes.clean": [
                    1167
                ],
                "self.xaxis.set_visible": [
                    1169
                ],
                "self.patch.set_visible": [
                    1170,
                    1173
                ],
                "self.yaxis.set_visible": [
                    1172
                ],
                "self.patch.get_facecolor": [
                    1183
                ],
                "self.titleOffsetTrans": [
                    1202,
                    1206
                ],
                "_title.set_transform": [
                    1206
                ],
                "_title.set_clip_box": [
                    1207
                ],
                "prop_cycle": [
                    1280,
                    1281,
                    1277,
                    1279
                ],
                "self._get_lines.set_prop_cycle": [
                    1280
                ],
                "self._get_patches_for_fill.set_prop_cycle": [
                    1281
                ],
                "cbook._str_equal": [
                    1336,
                    1338
                ],
                "aspect": [
                    1600,
                    1352,
                    1598,
                    1640,
                    1611,
                    1462,
                    1463,
                    1336,
                    1337,
                    1338,
                    1622,
                    1470,
                    1343
                ],
                "self.name": [
                    1339,
                    2183
                ],
                "NotImplementedError": [
                    1340
                ],
                "float": [
                    1463,
                    1343
                ],
                "share": [
                    1345,
                    1356,
                    1359,
                    1531,
                    1407
                ],
                "ax._aspect": [
                    1352
                ],
                "adjustable": [
                    1412,
                    1354,
                    1355,
                    1356,
                    1421,
                    1406
                ],
                "self.set_adjustable": [
                    4210,
                    1356
                ],
                "anchor": [
                    1528,
                    1537,
                    1358,
                    1359
                ],
                "self.set_anchor": [
                    1359
                ],
                "cbook._check_in_list": [
                    2890,
                    3004,
                    1406,
                    3078
                ],
                "axs": [
                    1408,
                    1411,
                    2628,
                    1415,
                    1420,
                    2638,
                    2640,
                    1459,
                    1466,
                    1469
                ],
                "ax.get_data_ratio": [
                    1413
                ],
                "_AxesBase.get_data_ratio": [
                    1414
                ],
                "ax._adjustable": [
                    1421
                ],
                "self._box_aspect": [
                    1600,
                    1618,
                    1620,
                    1627,
                    1436
                ],
                "ax.set_adjustable": [
                    1467
                ],
                "ax._box_aspect": [
                    1470
                ],
                "ax.stale": [
                    3652,
                    3383,
                    1471
                ],
                "mtransforms.Bbox.coefs": [
                    1528,
                    1530
                ],
                "ax._anchor": [
                    1537
                ],
                "txmin": [
                    1549,
                    1551
                ],
                "txmax": [
                    1549,
                    1551
                ],
                "transform": [
                    2563,
                    2564,
                    2566,
                    3912,
                    2059,
                    1549,
                    1550,
                    3887,
                    3920,
                    1685,
                    2649,
                    1690,
                    2654
                ],
                "self.get_xbound": [
                    1634,
                    3882,
                    1549,
                    1564,
                    3166
                ],
                "tymin": [
                    1552,
                    1550
                ],
                "tymax": [
                    1552,
                    1550
                ],
                "self.get_ybound": [
                    1635,
                    3883,
                    1550,
                    3452,
                    1565
                ],
                "xsize": [
                    1570,
                    1636,
                    1642,
                    1551,
                    1553,
                    1653,
                    1655,
                    1567
                ],
                "abs": [
                    1568,
                    1636,
                    1637,
                    3979,
                    1644,
                    1551,
                    1552,
                    3988,
                    3992,
                    3990,
                    2552,
                    3993,
                    3995,
                    1567
                ],
                "ysize": [
                    1568,
                    1570,
                    1637,
                    1642,
                    1552,
                    1553,
                    1654,
                    1656
                ],
                "xmin": [
                    1800,
                    1806,
                    1811,
                    3861,
                    1687,
                    1816,
                    3865,
                    3867,
                    1564,
                    1567,
                    1959,
                    1960,
                    3890,
                    3894,
                    3899,
                    3905,
                    3788,
                    3790,
                    3286,
                    3289,
                    3804,
                    3805,
                    1634,
                    1636
                ],
                "xmax": [
                    1800,
                    1807,
                    1811,
                    3862,
                    1687,
                    1816,
                    3865,
                    3867,
                    1564,
                    1567,
                    1959,
                    1960,
                    3890,
                    3894,
                    3899,
                    3905,
                    3788,
                    3790,
                    3290,
                    3804,
                    3805,
                    3293,
                    1634,
                    1636
                ],
                "ymin": [
                    1800,
                    1808,
                    1682,
                    3861,
                    1814,
                    1817,
                    3866,
                    3868,
                    1565,
                    1568,
                    1959,
                    1960,
                    3891,
                    3896,
                    3900,
                    3916,
                    3789,
                    3790,
                    2648,
                    3804,
                    2653,
                    3806,
                    2655,
                    3554,
                    1635,
                    1637,
                    3557
                ],
                "ymax": [
                    1800,
                    1809,
                    1682,
                    1814,
                    3862,
                    1817,
                    3866,
                    3868,
                    1565,
                    1568,
                    1959,
                    1960,
                    3891,
                    3896,
                    3900,
                    3916,
                    3789,
                    3790,
                    3804,
                    3806,
                    2658,
                    1635,
                    1637,
                    2662,
                    3558,
                    3561
                ],
                "math.log10": [
                    1568,
                    1567
                ],
                "math": [
                    1568,
                    1567
                ],
                "cbook.deprecated": [
                    2154,
                    1555
                ],
                "position": [
                    1601,
                    1639,
                    1612,
                    1619,
                    1595,
                    1596,
                    1630,
                    1628
                ],
                "self.get_position": [
                    4209,
                    1596
                ],
                "self.get_aspect": [
                    4011,
                    1598
                ],
                "fig_width": [
                    1604,
                    1605
                ],
                "fig_height": [
                    1604,
                    1605
                ],
                "get_size_inches": [
                    1604
                ],
                "self.get_figure": [
                    1604
                ],
                "fig_aspect": [
                    1639,
                    1613,
                    1605,
                    1620
                ],
                "RuntimeError": [
                    1609,
                    1667,
                    2678
                ],
                "self.get_data_ratio": [
                    1611
                ],
                "pb": [
                    1612,
                    1613,
                    1614,
                    1619,
                    1620,
                    1621,
                    1630
                ],
                "position.frozen": [
                    1619,
                    1612
                ],
                "pb1": [
                    1613,
                    1614,
                    1620,
                    1621,
                    1630
                ],
                "pb.shrunk_to_aspect": [
                    1620,
                    1613
                ],
                "pb1.anchored": [
                    1630,
                    1621,
                    1614
                ],
                "self.get_anchor": [
                    1630,
                    1621,
                    1614
                ],
                "x_trf": [
                    1632,
                    3904,
                    1634,
                    3912,
                    1648,
                    1690,
                    3903
                ],
                "y_trf": [
                    1633,
                    1635,
                    3914,
                    3915,
                    3920,
                    1649,
                    1685
                ],
                "x_trf.transform": [
                    1648,
                    1634,
                    3904
                ],
                "y_trf.transform": [
                    1649,
                    3915,
                    1635
                ],
                "position.height": [
                    1639
                ],
                "position.width": [
                    1639
                ],
                "data_ratio": [
                    1640,
                    1642,
                    1656,
                    1655
                ],
                "y_expander": [
                    1642,
                    1675,
                    1676,
                    1644,
                    1678
                ],
                "dL": [
                    1648,
                    1649,
                    1647
                ],
                "dL.intervalx": [
                    1648
                ],
                "dL.intervaly": [
                    1649
                ],
                "xr": [
                    1657,
                    1650,
                    1653
                ],
                "yr": [
                    1658,
                    1651,
                    1654
                ],
                "xmarg": [
                    1674,
                    1653
                ],
                "ymarg": [
                    1674,
                    1654
                ],
                "Ysize": [
                    1658,
                    1683,
                    1684,
                    1655
                ],
                "Xsize": [
                    1656,
                    1657,
                    1689,
                    1688
                ],
                "Xmarg": [
                    1657,
                    1676
                ],
                "Ymarg": [
                    1658,
                    1675
                ],
                "xm": [
                    1674,
                    1660
                ],
                "ym": [
                    1674,
                    1661
                ],
                "shared_x": [
                    1679,
                    1666,
                    1663
                ],
                "shared_y": [
                    1664,
                    1666,
                    1671
                ],
                "adjust_y": [
                    1672,
                    1681,
                    1679
                ],
                "adjy": [
                    1675,
                    1678,
                    1679
                ],
                "yc": [
                    1682,
                    1683,
                    1684
                ],
                "self.set_ybound": [
                    3925,
                    2588,
                    1685
                ],
                "y_trf.inverted": [
                    3920,
                    1685
                ],
                "xc": [
                    1688,
                    1689,
                    1687
                ],
                "self.set_xbound": [
                    2585,
                    1690,
                    3923
                ],
                "x_trf.inverted": [
                    3912,
                    1690
                ],
                "bool": [
                    2274,
                    3459,
                    3332,
                    3173,
                    3336,
                    2441,
                    2444,
                    3601,
                    3605,
                    1750,
                    2492
                ],
                "s": [
                    3714,
                    3715,
                    3717,
                    3719,
                    1751,
                    1752,
                    1753,
                    1754,
                    1755,
                    1756,
                    1757,
                    1759,
                    1761,
                    1766,
                    1768,
                    1771,
                    1774,
                    1778,
                    1790
                ],
                "s.lower": [
                    1756
                ],
                "self.set_axis_off": [
                    1760
                ],
                "self.set_autoscale_on": [
                    1762,
                    1770,
                    1773,
                    1776,
                    1780
                ],
                "self.set_aspect": [
                    1763,
                    1767,
                    1769,
                    1777,
                    1779
                ],
                "xlim": [
                    1784,
                    1781,
                    1783
                ],
                "self.get_xlim": [
                    3138,
                    3845,
                    3302,
                    3788,
                    3311,
                    1781,
                    1821
                ],
                "ylim": [
                    1786,
                    1782,
                    1783
                ],
                "self.get_ylim": [
                    3424,
                    3846,
                    3789,
                    3570,
                    1782,
                    3579,
                    1821
                ],
                "edge_size": [
                    1784,
                    1786,
                    1783
                ],
                "np.diff": [
                    1783
                ],
                "emit": [
                    3338,
                    1817,
                    3607,
                    1816,
                    1785,
                    1787
                ],
                "cbook.warn_deprecated": [
                    1794,
                    2671
                ],
                "limits": [
                    1800,
                    1798
                ],
                "err": [
                    2969,
                    1804,
                    2949
                ],
                "kwargs.pop": [
                    2182,
                    2185,
                    1806,
                    1807,
                    1808,
                    1809
                ],
                "xauto": [
                    1816,
                    1810
                ],
                "yauto": [
                    1817,
                    1813
                ],
                "iter": [
                    1820
                ],
                "cbook.silent_list": [
                    1833,
                    1829
                ],
                "get_xgridlines": [
                    1843
                ],
                "_axis_method_wrapper": [
                    3350,
                    3619,
                    1843,
                    1844,
                    1845,
                    3126,
                    1846,
                    3391,
                    3392,
                    3393,
                    3394,
                    3395,
                    3396,
                    3660,
                    3661,
                    3662,
                    3663,
                    3664,
                    3665,
                    3412,
                    3669,
                    3670
                ],
                "get_xticklines": [
                    1844
                ],
                "get_ygridlines": [
                    1845
                ],
                "get_yticklines": [
                    1846
                ],
                "im": [
                    1864,
                    1858,
                    1859,
                    1861
                ],
                "mpl.contour.ContourSet": [
                    1858
                ],
                "mpl.contour": [
                    1858
                ],
                "im.collections": [
                    1859
                ],
                "self.artists.append": [
                    1898
                ],
                "a._remove_method": [
                    1899
                ],
                "self.artists.remove": [
                    1899
                ],
                "a.set_clip_path": [
                    1901
                ],
                "ax._axes": [
                    1915
                ],
                "ax.stale_callback": [
                    1916
                ],
                "martist._stale_axes_callback": [
                    1916
                ],
                "self.child_axes.append": [
                    1918
                ],
                "ax._remove_method": [
                    1919
                ],
                "self.child_axes.remove": [
                    1919
                ],
                "collection.get_label": [
                    1927
                ],
                "collection": [
                    1927,
                    1929,
                    1930,
                    1931,
                    1932,
                    1934,
                    1935,
                    1941,
                    1944
                ],
                "collection.set_label": [
                    1929
                ],
                "self.collections.append": [
                    1930
                ],
                "collection._remove_method": [
                    1931
                ],
                "self.collections.remove": [
                    1931
                ],
                "collection.get_clip_path": [
                    1934
                ],
                "collection.set_clip_path": [
                    1935
                ],
                "autolim": [
                    1937
                ],
                "self.update_datalim": [
                    2067,
                    1941
                ],
                "collection.get_datalim": [
                    1941
                ],
                "image": [
                    1952,
                    1953,
                    1954,
                    1956,
                    1959,
                    2125,
                    2126,
                    2127,
                    1950,
                    1951
                ],
                "image.get_label": [
                    1951
                ],
                "image.set_label": [
                    1952
                ],
                "self.images.append": [
                    1953
                ],
                "image._remove_method": [
                    1954
                ],
                "self.images.remove": [
                    1954
                ],
                "image.get_extent": [
                    1959
                ],
                "self.axes.update_datalim": [
                    1960
                ],
                "line.get_clip_path": [
                    1967
                ],
                "line.set_clip_path": [
                    1968
                ],
                "self._update_line_limits": [
                    1970,
                    2119
                ],
                "line.get_label": [
                    1971
                ],
                "line.set_label": [
                    1972
                ],
                "self.lines.append": [
                    1973
                ],
                "line._remove_method": [
                    1974
                ],
                "self.lines.remove": [
                    1974
                ],
                "txt": [
                    1984,
                    1986,
                    1982,
                    1983
                ],
                "self.texts.append": [
                    1983
                ],
                "txt._remove_method": [
                    1984
                ],
                "self.texts.remove": [
                    1984
                ],
                "path": [
                    2021,
                    1992,
                    1993,
                    1999,
                    2014
                ],
                "line.get_path": [
                    1992
                ],
                "path.vertices.size": [
                    1993
                ],
                "path.vertices": [
                    1993
                ],
                "line_trans": [
                    2024,
                    1996,
                    1998,
                    2001,
                    2004
                ],
                "line.get_transform": [
                    1996
                ],
                "data_path": [
                    2021,
                    2023,
                    2026,
                    1999,
                    2012,
                    2014
                ],
                "line_trans.contains_branch_seperately": [
                    2024,
                    2001
                ],
                "trans_to_data": [
                    2012,
                    2004,
                    2014
                ],
                "self.transData.is_affine": [
                    2009
                ],
                "line_trans_path": [
                    2010,
                    2011
                ],
                "line._get_transformed_path": [
                    2010
                ],
                "na_path": [
                    2011,
                    2012
                ],
                "_": [
                    2624,
                    2661,
                    2649,
                    2011,
                    2654
                ],
                "line_trans_path.get_transformed_path_and_affine": [
                    2011
                ],
                "trans_to_data.transform_path_affine": [
                    2012
                ],
                "trans_to_data.transform_path": [
                    2014
                ],
                "data_path.vertices.size": [
                    2023
                ],
                "data_path.vertices": [
                    2023
                ],
                "updatex": [
                    2151,
                    2024,
                    2028,
                    2065,
                    2067
                ],
                "updatey": [
                    2151,
                    2024,
                    2029,
                    2065,
                    2068
                ],
                "self.dataLim.update_from_path": [
                    2026
                ],
                "p.get_clip_path": [
                    2037
                ],
                "p.set_clip_path": [
                    2038
                ],
                "self._update_patch_limits": [
                    2123,
                    2039
                ],
                "self.patches.append": [
                    2040
                ],
                "p._remove_method": [
                    2041
                ],
                "self.patches.remove": [
                    2041
                ],
                "patch": [
                    2054,
                    2055,
                    2057,
                    2059,
                    2060,
                    2061,
                    2065
                ],
                "patch.get_width": [
                    2055
                ],
                "patch.get_height": [
                    2055
                ],
                "vertices": [
                    2057,
                    2058,
                    2059
                ],
                "patch.get_path": [
                    2057
                ],
                "vertices.size": [
                    2058
                ],
                "xys": [
                    2147,
                    2148,
                    2150,
                    2059,
                    2063,
                    2067
                ],
                "patch.get_patch_transform": [
                    2059
                ],
                "patch.get_data_transform": [
                    2060,
                    2061
                ],
                "patch_to_data": [
                    2061,
                    2063
                ],
                "patch_to_data.transform": [
                    2063
                ],
                "contains_branch_seperately": [
                    2065
                ],
                "patch.get_transform": [
                    2065
                ],
                "tab": [
                    2074,
                    2075,
                    2076,
                    2077,
                    2078
                ],
                "self.tables.append": [
                    2075
                ],
                "tab.set_clip_path": [
                    2076
                ],
                "tab._remove_method": [
                    2077
                ],
                "self.tables.remove": [
                    2077
                ],
                "container.get_label": [
                    2084
                ],
                "container": [
                    2084,
                    2086,
                    2087,
                    2088,
                    2089
                ],
                "container.set_label": [
                    2086
                ],
                "self.containers.append": [
                    2087
                ],
                "container._remove_method": [
                    2088
                ],
                "self.containers.remove": [
                    2088
                ],
                "self.relim": [
                    2097
                ],
                "self._request_autoscale_view": [
                    2098,
                    3011,
                    2394,
                    2450
                ],
                "self.dataLim.ignore": [
                    2113
                ],
                "self.dataLim.set_points": [
                    2114
                ],
                "get_points": [
                    2114
                ],
                "visible_only": [
                    2126,
                    2122,
                    2118
                ],
                "line.get_visible": [
                    2118
                ],
                "p.get_visible": [
                    2122
                ],
                "image.get_visible": [
                    2126
                ],
                "self._update_image_limits": [
                    2127
                ],
                "np.asarray": [
                    2147
                ],
                "self.dataLim.update_from_data_xy": [
                    2150
                ],
                "self.dataLim.set": [
                    2165
                ],
                "mtransforms.Bbox.union": [
                    4201,
                    2165
                ],
                "bounds": [
                    2165
                ],
                "axis": [
                    2177,
                    2178,
                    2563,
                    2565,
                    2182,
                    3078,
                    2440,
                    3079,
                    2954,
                    2187,
                    2188,
                    2443,
                    2956,
                    2958,
                    2192,
                    2960,
                    2962,
                    3086,
                    2964,
                    2966,
                    2847,
                    2848,
                    3004,
                    3005,
                    3006,
                    2890,
                    2891,
                    2893,
                    2546,
                    2172,
                    2942
                ],
                "axis.have_units": [
                    2177
                ],
                "axis.update_units": [
                    2192,
                    2178
                ],
                "units": [
                    2185,
                    2187,
                    2188,
                    2182
                ],
                "unit_name": [
                    2185,
                    2182
                ],
                "axis.units": [
                    2187,
                    2182
                ],
                "polar_units": [
                    2184,
                    2185
                ],
                "axis.set_units": [
                    2188
                ],
                "_process_single_axis": [
                    2195,
                    2196
                ],
                "xdata": [
                    2195
                ],
                "ydata": [
                    2196
                ],
                "self.patch.contains": [
                    2204,
                    4055
                ],
                "mouseevent": [
                    4052,
                    2204,
                    4055
                ],
                "b": [
                    2274,
                    2243,
                    2889,
                    4202,
                    2892,
                    2253,
                    2798,
                    2894,
                    3756,
                    2838,
                    2232,
                    2233,
                    3772
                ],
                "use_sticky_edges.setter": [
                    2272
                ],
                "use_sticky_edges": [
                    2272
                ],
                "m": [
                    2945,
                    2946,
                    2316,
                    2318,
                    2294,
                    2296
                ],
                "margins": [
                    2373,
                    2376,
                    2377,
                    2378,
                    2379,
                    2380
                ],
                "self.set_xmargin": [
                    2390
                ],
                "self.set_ymargin": [
                    2392
                ],
                "z": [
                    2406
                ],
                "enable": [
                    2441,
                    2434,
                    2444
                ],
                "x_stickies": [
                    2585,
                    2514,
                    2502,
                    2494
                ],
                "y_stickies": [
                    2516,
                    2508,
                    2588,
                    2494
                ],
                "np.array": [
                    4014,
                    2494
                ],
                "self.use_sticky_edges": [
                    2495
                ],
                "np.sort": [
                    2508,
                    2502
                ],
                "np.concatenate": [
                    2508,
                    2502
                ],
                "artist.sticky_edges.x": [
                    2503
                ],
                "artist.sticky_edges": [
                    2509,
                    2503
                ],
                "artist": [
                    2503,
                    2506,
                    2509,
                    2512,
                    2775,
                    4088,
                    2777,
                    2778,
                    4089
                ],
                "ax.get_children": [
                    2512,
                    2506
                ],
                "artist.sticky_edges.y": [
                    2509
                ],
                "lower": [
                    3168,
                    3458,
                    3172,
                    2513,
                    2515,
                    3449,
                    3450,
                    3163,
                    3164,
                    3453,
                    3454,
                    3167
                ],
                "self.get_xscale": [
                    2513,
                    3308
                ],
                "self.get_yscale": [
                    3576,
                    2515
                ],
                "scale": [
                    3712,
                    2521,
                    3713,
                    3716
                ],
                "autoscaleon": [
                    2521
                ],
                "shared": [
                    2524,
                    2525
                ],
                "shared_axes.get_siblings": [
                    2524
                ],
                "shared_axes": [
                    2524
                ],
                "dl": [
                    2531,
                    2534,
                    2538,
                    2539,
                    2540,
                    2542,
                    2525,
                    2527
                ],
                "ax.dataLim": [
                    2525
                ],
                "finite_dl": [
                    2528,
                    2533,
                    2536,
                    2538,
                    2527
                ],
                "d": [
                    2531,
                    2532,
                    2533,
                    2534,
                    2535,
                    2536,
                    2604,
                    2608,
                    2609,
                    2527
                ],
                "all": [
                    2535,
                    2532,
                    2527
                ],
                "np.isfinite": [
                    2532,
                    2535,
                    2568,
                    3212,
                    4025,
                    2527
                ],
                "x_finite": [
                    2531,
                    2539
                ],
                "d.intervalx": [
                    2532
                ],
                "y_finite": [
                    2540,
                    2534
                ],
                "d.intervaly": [
                    2535
                ],
                "dl.extend": [
                    2539,
                    2540
                ],
                "bb": [
                    2562,
                    4164,
                    4134,
                    4167,
                    4200,
                    4202,
                    2542,
                    2543,
                    4178,
                    2643,
                    2645,
                    2646,
                    2647,
                    4155
                ],
                "mtransforms.BboxBase.union": [
                    2542
                ],
                "interval": [
                    2543
                ],
                "axis.get_major_locator": [
                    2546
                ],
                "locator.nonsingular": [
                    2547
                ],
                "i0": [
                    2554,
                    2555
                ],
                "stickies.searchsorted": [
                    2554,
                    2557
                ],
                "stickies": [
                    2554,
                    2555,
                    2557,
                    2558
                ],
                "tol": [
                    2554,
                    2557
                ],
                "x0bound": [
                    2555,
                    2573,
                    2574
                ],
                "i1": [
                    2557,
                    2558
                ],
                "x1bound": [
                    2576,
                    2558,
                    2575
                ],
                "minpos": [
                    2562,
                    2565
                ],
                "axis.get_transform": [
                    2563
                ],
                "inverse_trans": [
                    2570,
                    2564
                ],
                "transform.inverted": [
                    2564
                ],
                "axis._scale.limit_range_for_scale": [
                    2565
                ],
                "axis._scale": [
                    2565
                ],
                "x0t": [
                    2570,
                    2566,
                    2567
                ],
                "x1t": [
                    2570,
                    2566,
                    2567
                ],
                "transform.transform": [
                    2566
                ],
                "delta": [
                    2568,
                    2569,
                    2570,
                    2567
                ],
                "margin": [
                    2567
                ],
                "inverse_trans.transform": [
                    2570
                ],
                "min": [
                    2576
                ],
                "locator.view_limits": [
                    2579
                ],
                "set_bound": [
                    2580
                ],
                "handle_single_axis": [
                    2586,
                    2583
                ],
                "axis_list": [
                    2605,
                    2607
                ],
                "self._get_axis_list": [
                    2953,
                    4041,
                    2605,
                    4081,
                    2710,
                    2775,
                    2847
                ],
                "items": [
                    2952,
                    2606
                ],
                "vars": [
                    2606
                ],
                "k.endswith": [
                    2607
                ],
                "_log.debug": [
                    2618
                ],
                "titles": [
                    2658,
                    2659,
                    2621,
                    2623
                ],
                "title": [
                    2624,
                    2656,
                    2626,
                    2658,
                    2659,
                    2661,
                    2662,
                    4169,
                    4170,
                    4171,
                    2655,
                    2648,
                    2650,
                    2653,
                    2623
                ],
                "title.get_position": [
                    2624,
                    2658,
                    2661
                ],
                "title.set_position": [
                    2656,
                    2626,
                    2650,
                    2662
                ],
                "ax.get_axes_locator": [
                    2632
                ],
                "renderer": [
                    2691,
                    2707,
                    2729,
                    4141,
                    2740,
                    4150,
                    2744,
                    2745,
                    4153,
                    2747,
                    2749,
                    4159,
                    4162,
                    4165,
                    4166,
                    2634,
                    4171,
                    2643,
                    2645,
                    2648,
                    2653,
                    2655,
                    4196,
                    2670,
                    2676,
                    2677,
                    2683
                ],
                "ax.apply_aspect": [
                    2635,
                    2637
                ],
                "top": [
                    3586,
                    3591,
                    3592,
                    3597,
                    3598,
                    3599,
                    3601,
                    3603,
                    3617,
                    2639,
                    2647,
                    2648,
                    2649,
                    2653,
                    2655,
                    3424,
                    3425,
                    3426,
                    3552,
                    3428,
                    3553,
                    3559,
                    3561,
                    3563,
                    3565,
                    3567,
                    3573,
                    3574,
                    3576
                ],
                "ax.xaxis.get_ticks_position": [
                    2641
                ],
                "ax.xaxis": [
                    2641,
                    2642,
                    2643,
                    3381
                ],
                "ax.xaxis.get_label_position": [
                    2642
                ],
                "ax.xaxis.get_tightbbox": [
                    2643
                ],
                "ax.get_window_extent": [
                    2645
                ],
                "bb.ymax": [
                    2647
                ],
                "title.get_window_extent": [
                    2648,
                    4171,
                    2653,
                    2655
                ],
                "self.transAxes.inverted": [
                    2649,
                    2654
                ],
                "self.figure._cachedRenderer": [
                    2759,
                    2762,
                    2771,
                    2676,
                    2779,
                    2782
                ],
                "self.get_visible": [
                    4136,
                    2679
                ],
                "renderer.open_group": [
                    2683
                ],
                "self.get_gid": [
                    2683
                ],
                "artists": [
                    2696,
                    2697,
                    2705,
                    2711,
                    2714,
                    2715,
                    2716,
                    2719,
                    2721,
                    2728,
                    2730,
                    2732,
                    2747,
                    4073,
                    4078,
                    4082,
                    4084,
                    4085,
                    4086,
                    4088
                ],
                "self.get_children": [
                    2696,
                    4073
                ],
                "artists.remove": [
                    2697,
                    4078,
                    2705,
                    4082,
                    4084,
                    4085,
                    4086,
                    2711,
                    2714,
                    2715,
                    2716
                ],
                "self.axison": [
                    3109,
                    4075,
                    2703,
                    4080,
                    4146,
                    2739,
                    2709,
                    3100
                ],
                "self.spines.values": [
                    2704,
                    4077,
                    4040
                ],
                "self._update_title_position": [
                    2707,
                    4165
                ],
                "inframe": [
                    2713,
                    2709
                ],
                "_axis": [
                    4081,
                    4082,
                    2710,
                    2711
                ],
                "self.figure.canvas.is_saving": [
                    2718
                ],
                "self.figure.canvas": [
                    2718
                ],
                "a.get_animated": [
                    2720
                ],
                "sorted": [
                    2721,
                    3458,
                    3172,
                    3332,
                    3601,
                    3890,
                    3891
                ],
                "rasterization_zorder": [
                    2725,
                    2727,
                    2728,
                    2731,
                    2733
                ],
                "zorder": [
                    2848,
                    2728,
                    2840,
                    2842,
                    2844
                ],
                "renderer.start_rasterizing": [
                    2729
                ],
                "artists_rasterized": [
                    2743,
                    2730,
                    2742,
                    2735
                ],
                "a.zorder": [
                    2731,
                    2733
                ],
                "self.patch.draw": [
                    2740
                ],
                "a.draw": [
                    2744,
                    2762
                ],
                "renderer.stop_rasterizing": [
                    2745
                ],
                "mimage._draw_list_compositing_images": [
                    2747
                ],
                "mimage": [
                    2747
                ],
                "renderer.close_group": [
                    2749
                ],
                "martist.allow_rasterization": [
                    2665
                ],
                "cbook._delete_parameter": [
                    2666
                ],
                "ExitStack": [
                    2774
                ],
                "stack": [
                    2777,
                    2774
                ],
                "stack.push": [
                    2777
                ],
                "artist.set_visible": [
                    2777,
                    2778
                ],
                "artist.get_visible": [
                    2777,
                    4089
                ],
                "self.draw": [
                    2779
                ],
                "self._axisbelow": [
                    2813,
                    2838
                ],
                "axisbelow": [
                    2841,
                    2843,
                    2838,
                    2839
                ],
                "validate_axisbelow": [
                    2838
                ],
                "axis.set_zorder": [
                    2848
                ],
                "self.xaxis.grid": [
                    2892
                ],
                "self.yaxis.grid": [
                    2894
                ],
                "docstring.dedent_interpd": [
                    2851
                ],
                "docstring": [
                    2851
                ],
                "style": [
                    2941,
                    2951
                ],
                "style.lower": [
                    2941
                ],
                "axis.lower": [
                    2942
                ],
                "scilimits": [
                    2959,
                    2945,
                    2960,
                    2943
                ],
                "n": [
                    2945,
                    2946
                ],
                "STYLES": [
                    2950,
                    2951
                ],
                "is_sci_style": [
                    2957,
                    2958,
                    2951
                ],
                "cbook._check_getitem": [
                    2954,
                    2951
                ],
                "axis_map": [
                    2952,
                    2954
                ],
                "self._get_axis_map": [
                    2952
                ],
                "axises": [
                    2954,
                    2956
                ],
                "axis.major.formatter.set_scientific": [
                    2958
                ],
                "axis.major.formatter": [
                    2958,
                    2960,
                    2962,
                    2964,
                    2966
                ],
                "axis.major": [
                    2958,
                    2960,
                    2962,
                    2964,
                    2966
                ],
                "axis.major.formatter.set_powerlimits": [
                    2960
                ],
                "useOffset": [
                    2961,
                    2962
                ],
                "axis.major.formatter.set_useOffset": [
                    2962
                ],
                "useLocale": [
                    2963,
                    2964
                ],
                "axis.major.formatter.set_useLocale": [
                    2964
                ],
                "useMathText": [
                    2965,
                    2966
                ],
                "axis.major.formatter.set_useMathText": [
                    2966
                ],
                "update_x": [
                    3012,
                    3005,
                    3007
                ],
                "update_y": [
                    3009,
                    3012,
                    3006
                ],
                "set_params": [
                    3008,
                    3010
                ],
                "self.xaxis.get_major_locator": [
                    3008,
                    3329,
                    3384,
                    3377
                ],
                "self.yaxis.get_major_locator": [
                    3646,
                    3010,
                    3653,
                    3598
                ],
                "xkw": [
                    3080,
                    3081,
                    3082,
                    3083,
                    3084,
                    3085
                ],
                "dict": [
                    3080,
                    3087
                ],
                "xkw.pop": [
                    3081,
                    3082,
                    3083,
                    3084
                ],
                "self.xaxis.set_tick_params": [
                    3085
                ],
                "ykw": [
                    3087,
                    3088,
                    3089,
                    3090,
                    3091,
                    3092
                ],
                "ykw.pop": [
                    3088,
                    3089,
                    3090,
                    3091
                ],
                "self.yaxis.set_tick_params": [
                    3092
                ],
                "self.xaxis.set_inverted": [
                    3124
                ],
                "self.xaxis.get_inverted": [
                    3124
                ],
                "xaxis_inverted": [
                    3126
                ],
                "left": [
                    3328,
                    3329,
                    3330,
                    3332,
                    3334,
                    3348,
                    3138,
                    3139,
                    3140,
                    3142,
                    3284,
                    3285,
                    3287,
                    3289,
                    3295,
                    3296,
                    3299,
                    3303,
                    3304,
                    3308,
                    3312,
                    3317,
                    3324,
                    3326
                ],
                "right": [
                    3328,
                    3329,
                    3330,
                    3332,
                    3334,
                    3348,
                    3138,
                    3139,
                    3140,
                    3142,
                    3284,
                    3285,
                    3291,
                    3293,
                    3295,
                    3297,
                    3299,
                    3305,
                    3306,
                    3308,
                    3318,
                    3323,
                    3324
                ],
                "upper": [
                    3456,
                    3169,
                    3170,
                    3458,
                    3172,
                    3449,
                    3450,
                    3163,
                    3164,
                    3455
                ],
                "np.iterable": [
                    3552,
                    3449,
                    3163,
                    3284
                ],
                "old_lower": [
                    3168,
                    3454,
                    3452,
                    3166
                ],
                "old_upper": [
                    3456,
                    3170,
                    3452,
                    3166
                ],
                "self.xaxis_inverted": [
                    3173
                ],
                "tuple": [
                    3483,
                    3197
                ],
                "self.viewLim.intervalx": [
                    3197,
                    3343
                ],
                "self.viewLim": [
                    3943,
                    3343,
                    3483,
                    3612,
                    3197
                ],
                "limit": [
                    3209,
                    3210
                ],
                "converted_limit": [
                    3210,
                    3211,
                    3212,
                    3214
                ],
                "convert": [
                    3210
                ],
                "Real": [
                    3211
                ],
                "self._process_unit_info": [
                    3563,
                    3295
                ],
                "self._validate_converted_limits": [
                    3296,
                    3297,
                    3564,
                    3565
                ],
                "self.convert_xunits": [
                    3296,
                    3297
                ],
                "old_left": [
                    3304,
                    3317,
                    3302,
                    3311
                ],
                "old_right": [
                    3306,
                    3323,
                    3302,
                    3311
                ],
                "reverse": [
                    3328,
                    3601,
                    3332,
                    3597
                ],
                "nonsingular": [
                    3329,
                    3653,
                    3598,
                    3377,
                    3384,
                    3646
                ],
                "self.xaxis.limit_range_for_scale": [
                    3330
                ],
                "self._viewLim.intervalx": [
                    3334
                ],
                "auto": [
                    3335,
                    3336,
                    3344,
                    3604,
                    3605,
                    3613
                ],
                "self.callbacks.process": [
                    3608,
                    3339
                ],
                "other.set_xlim": [
                    3343
                ],
                "other.figure": [
                    3345,
                    3346,
                    3614,
                    3615
                ],
                "other.figure.canvas.draw_idle": [
                    3346,
                    3615
                ],
                "other.figure.canvas": [
                    3346,
                    3615
                ],
                "get_xscale": [
                    3350
                ],
                "old_default_lims": [
                    3377,
                    3386,
                    3646,
                    3655
                ],
                "np.inf": [
                    4198,
                    3654,
                    4199,
                    3378,
                    3385,
                    3647
                ],
                "g": [
                    3648,
                    3649,
                    3379,
                    3380
                ],
                "self.get_shared_x_axes": [
                    3379
                ],
                "g.get_siblings": [
                    3649,
                    3380
                ],
                "ax.xaxis._set_scale": [
                    3381
                ],
                "value": [
                    3650,
                    3381
                ],
                "ax._update_transScale": [
                    3651,
                    3382
                ],
                "new_default_lims": [
                    3384,
                    3386,
                    3653,
                    3655
                ],
                "get_xticks": [
                    3391
                ],
                "set_xticks": [
                    3392
                ],
                "get_xmajorticklabels": [
                    3393
                ],
                "get_xminorticklabels": [
                    3394
                ],
                "get_xticklabels": [
                    3395
                ],
                "set_xticklabels": [
                    3396
                ],
                "self.yaxis.set_inverted": [
                    3410
                ],
                "self.yaxis.get_inverted": [
                    3410
                ],
                "yaxis_inverted": [
                    3412
                ],
                "bottom": [
                    3585,
                    3592,
                    3594,
                    3597,
                    3598,
                    3599,
                    3601,
                    3603,
                    3617,
                    3424,
                    3425,
                    3426,
                    3552,
                    3428,
                    3553,
                    3555,
                    3557,
                    3563,
                    3564,
                    3567,
                    3571,
                    3572,
                    3576,
                    3580
                ],
                "self.yaxis_inverted": [
                    3459
                ],
                "self.viewLim.intervaly": [
                    3483,
                    3612
                ],
                "self.convert_yunits": [
                    3564,
                    3565
                ],
                "old_bottom": [
                    3585,
                    3570,
                    3579,
                    3572
                ],
                "old_top": [
                    3570,
                    3579,
                    3574,
                    3591
                ],
                "self.yaxis.limit_range_for_scale": [
                    3599
                ],
                "self._viewLim.intervaly": [
                    3603
                ],
                "other.set_ylim": [
                    3612
                ],
                "get_yscale": [
                    3619
                ],
                "self.get_shared_y_axes": [
                    3648
                ],
                "ax.yaxis._set_scale": [
                    3650
                ],
                "ax.yaxis": [
                    3650
                ],
                "get_yticks": [
                    3660
                ],
                "set_yticks": [
                    3661
                ],
                "get_ymajorticklabels": [
                    3662
                ],
                "get_yminorticklabels": [
                    3663
                ],
                "get_yticklabels": [
                    3664
                ],
                "set_yticklabels": [
                    3665
                ],
                "xaxis_date": [
                    3669
                ],
                "yaxis_date": [
                    3670
                ],
                "format_data_short": [
                    3680,
                    3690
                ],
                "self.xaxis.get_major_formatter": [
                    3680
                ],
                "self.yaxis.get_major_formatter": [
                    3690
                ],
                "xs": [
                    3697,
                    3702,
                    3695
                ],
                "self.format_xdata": [
                    3697
                ],
                "ys": [
                    3699,
                    3701,
                    3702
                ],
                "self.format_ydata": [
                    3701
                ],
                "ax.get_scale": [
                    3712
                ],
                "ax._scale": [
                    3714,
                    3717
                ],
                "ax.set_minor_locator": [
                    3721,
                    3715,
                    3718
                ],
                "mticker.LogLocator": [
                    3715
                ],
                "s.base": [
                    3715
                ],
                "s.subs": [
                    3715,
                    3719
                ],
                "mticker.SymmetricalLogLocator": [
                    3719
                ],
                "s._transform": [
                    3719
                ],
                "mticker.NullLocator": [
                    3725,
                    3726
                ],
                "self._navigate": [
                    3746,
                    3756
                ],
                "self._navigate_mode": [
                    3762,
                    3772
                ],
                "view": [
                    3804
                ],
                "bbox": [
                    3872,
                    3874,
                    3844,
                    4196,
                    4197,
                    4198,
                    3848,
                    4199,
                    4200,
                    3885
                ],
                "Xmin": [
                    3861,
                    3845
                ],
                "Xmax": [
                    3845,
                    3862
                ],
                "Ymin": [
                    3861,
                    3846
                ],
                "Ymax": [
                    3846,
                    3862
                ],
                "xp": [
                    3848,
                    3869
                ],
                "yp": [
                    3848,
                    3870
                ],
                "scl": [
                    3872,
                    3873,
                    3848,
                    3850,
                    3851,
                    3853,
                    3857,
                    3869,
                    3870
                ],
                "direction": [
                    3856,
                    3898,
                    3902,
                    3854
                ],
                "tranD2C": [
                    3860,
                    3861,
                    3862
                ],
                "self.transData.transform": [
                    3860
                ],
                "xwidth": [
                    3872,
                    3865,
                    3873
                ],
                "ywidth": [
                    3872,
                    3873,
                    3866
                ],
                "xcen": [
                    3867,
                    3869
                ],
                "ycen": [
                    3868,
                    3870
                ],
                "xzc": [
                    3872,
                    3873,
                    3869
                ],
                "yzc": [
                    3872,
                    3873,
                    3870
                ],
                "xmin0": [
                    3905,
                    3882,
                    3890,
                    3894
                ],
                "xmax0": [
                    3905,
                    3882,
                    3890,
                    3894
                ],
                "ymin0": [
                    3896,
                    3891,
                    3883,
                    3916
                ],
                "ymax0": [
                    3896,
                    3891,
                    3883,
                    3916
                ],
                "startx": [
                    3888,
                    3890,
                    3885,
                    3887
                ],
                "starty": [
                    3888,
                    3891,
                    3885,
                    3887
                ],
                "stopx": [
                    3888,
                    3890,
                    3885,
                    3887
                ],
                "stopy": [
                    3888,
                    3891,
                    3885,
                    3887
                ],
                "self.transData.inverted": [
                    3945,
                    3887
                ],
                "np.clip": [
                    3890,
                    3891
                ],
                "twinx": [
                    3922,
                    3893
                ],
                "mode": [
                    3922,
                    3924,
                    3893,
                    3895
                ],
                "twiny": [
                    3924,
                    3895
                ],
                "new_xbound": [
                    3912,
                    3923,
                    3899
                ],
                "new_ybound": [
                    3920,
                    3900,
                    3925
                ],
                "sxmin0": [
                    3904,
                    3906,
                    3909
                ],
                "sxmax0": [
                    3904,
                    3906,
                    3910
                ],
                "sxmin": [
                    3904,
                    3906,
                    3909
                ],
                "sxmax": [
                    3904,
                    3906,
                    3910
                ],
                "factor": [
                    3906,
                    3909,
                    3910,
                    3917,
                    3918,
                    3919
                ],
                "sxmin1": [
                    3912,
                    3909
                ],
                "sxmax1": [
                    3912,
                    3910
                ],
                "symin0": [
                    3915,
                    3917,
                    3918
                ],
                "symax0": [
                    3915,
                    3917,
                    3919
                ],
                "symin": [
                    3915,
                    3917,
                    3918
                ],
                "symax": [
                    3915,
                    3917,
                    3919
                ],
                "symin1": [
                    3920,
                    3918
                ],
                "symax1": [
                    3920,
                    3919
                ],
                "self._pan_start": [
                    3958,
                    3998,
                    3942
                ],
                "types.SimpleNamespace": [
                    3942
                ],
                "types": [
                    3942
                ],
                "self.viewLim.frozen": [
                    3943
                ],
                "self.transData.frozen": [
                    3944
                ],
                "frozen": [
                    3945
                ],
                "self.bbox.frozen": [
                    3946
                ],
                "dx": [
                    3979,
                    3980,
                    3982,
                    3986,
                    3988,
                    3989,
                    3990,
                    3992,
                    3993,
                    3995,
                    3996,
                    3999,
                    4001,
                    4004,
                    4005,
                    4008,
                    4010,
                    4012,
                    4013
                ],
                "dy": [
                    3979,
                    3980,
                    3982,
                    3984,
                    3988,
                    3990,
                    3991,
                    3992,
                    3993,
                    3995,
                    3996,
                    4000,
                    4001,
                    4004,
                    4005,
                    4009,
                    4010,
                    4012,
                    4013
                ],
                "p.x": [
                    4014,
                    3999
                ],
                "p.y": [
                    4000,
                    4014
                ],
                "button": [
                    4003,
                    4006
                ],
                "format_deltas": [
                    4010,
                    4004
                ],
                "result": [
                    4017,
                    4026,
                    4025,
                    4005
                ],
                "transformed": [
                    4017,
                    4005
                ],
                "p.bbox.translated": [
                    4005
                ],
                "p.bbox": [
                    4005
                ],
                "p.trans_inverse": [
                    4018,
                    4005
                ],
                "self.bbox.width": [
                    4008
                ],
                "self.bbox.height": [
                    4009
                ],
                "alpha": [
                    4016,
                    4013
                ],
                "np.power": [
                    4013
                ],
                "start": [
                    4016,
                    4014
                ],
                "oldpoints": [
                    4016,
                    4015
                ],
                "p.lim.transformed": [
                    4015
                ],
                "p.lim": [
                    4015
                ],
                "p.trans": [
                    4025,
                    4015
                ],
                "newpoints": [
                    4016,
                    4017
                ],
                "OverflowError": [
                    4019
                ],
                "valid": [
                    4025,
                    4028
                ],
                "result.transformed": [
                    4025
                ],
                "points": [
                    4026,
                    4028,
                    4029,
                    4030
                ],
                "astype": [
                    4026
                ],
                "result.get_points": [
                    4026
                ],
                "object": [
                    4026
                ],
                "inside": [
                    4052,
                    4053,
                    4054
                ],
                "info": [
                    4052,
                    4054
                ],
                "self._default_contains": [
                    4052
                ],
                "self.patch.contains_point": [
                    4062
                ],
                "point": [
                    4062
                ],
                "artist.get_in_layout": [
                    4089
                ],
                "call_axes_locator": [
                    4140
                ],
                "bb_xaxis": [
                    4153,
                    4154,
                    4155,
                    4149
                ],
                "self.xaxis.get_tightbbox": [
                    4153,
                    4149
                ],
                "for_layout_only": [
                    4172,
                    4150,
                    4159
                ],
                "bb.append": [
                    4164,
                    4167,
                    4200,
                    4178,
                    4155
                ],
                "bb_yaxis": [
                    4162,
                    4163,
                    4164,
                    4158
                ],
                "self.yaxis.get_tightbbox": [
                    4162,
                    4158
                ],
                "axbbox": [
                    4192,
                    4191,
                    4166,
                    4167
                ],
                "self.get_window_extent": [
                    4166
                ],
                "title.get_visible": [
                    4170
                ],
                "bt": [
                    4171,
                    4172,
                    4176,
                    4177,
                    4178
                ],
                "bt.width": [
                    4172
                ],
                "bt.x0": [
                    4176,
                    4177
                ],
                "bt.x1": [
                    4176,
                    4177
                ],
                "bbox_artists": [
                    4184,
                    4180,
                    4181,
                    4182
                ],
                "bbox_extra_artists": [
                    4180
                ],
                "self.get_default_bbox_extra_artists": [
                    4182
                ],
                "clip_extent": [
                    4192,
                    4188,
                    4189,
                    4190,
                    4191
                ],
                "a._get_clipping_extent_bbox": [
                    4188
                ],
                "mtransforms.Bbox.intersection": [
                    4190
                ],
                "np.all": [
                    4192
                ],
                "clip_extent.extents": [
                    4192
                ],
                "axbbox.extents": [
                    4192
                ],
                "a.get_tightbbox": [
                    4196
                ],
                "bbox.width": [
                    4198
                ],
                "bbox.height": [
                    4199
                ],
                "b.width": [
                    4202
                ],
                "b.height": [
                    4202
                ],
                "ax2": [
                    4235,
                    4236,
                    4237,
                    4238,
                    4239,
                    4241,
                    4242,
                    4243,
                    4265,
                    4266,
                    4267,
                    4268,
                    4270,
                    4271,
                    4272,
                    4209,
                    4211,
                    4212,
                    4213
                ],
                "self.figure.add_axes": [
                    4209
                ],
                "ax2.set_adjustable": [
                    4211
                ],
                "self._twinned_axes.join": [
                    4212
                ],
                "self._make_twin_axes": [
                    4265,
                    4235
                ],
                "ax2.yaxis.tick_right": [
                    4236
                ],
                "ax2.yaxis": [
                    4270,
                    4236,
                    4237,
                    4238
                ],
                "ax2.yaxis.set_label_position": [
                    4237
                ],
                "ax2.yaxis.set_offset_position": [
                    4238
                ],
                "ax2.set_autoscalex_on": [
                    4239
                ],
                "self.get_autoscalex_on": [
                    4239
                ],
                "self.yaxis.tick_left": [
                    4240
                ],
                "ax2.xaxis.set_visible": [
                    4241
                ],
                "ax2.xaxis": [
                    4241,
                    4266,
                    4267
                ],
                "ax2.patch.set_visible": [
                    4242,
                    4271
                ],
                "ax2.patch": [
                    4242,
                    4271
                ],
                "ax2.xaxis.tick_top": [
                    4266
                ],
                "ax2.xaxis.set_label_position": [
                    4267
                ],
                "ax2.set_autoscaley_on": [
                    4268
                ],
                "self.get_autoscaley_on": [
                    4268
                ],
                "self.xaxis.tick_bottom": [
                    4269
                ],
                "ax2.yaxis.set_visible": [
                    4270
                ],
                "cbook._define_aliases": [
                    419
                ]
            },
            "filtered_variables_in_file": {
                "_log": [
                    2618,
                    30
                ],
                "logging.getLogger": [
                    30
                ],
                "logging": [
                    30
                ],
                "self.attr_name": [
                    75,
                    52,
                    60
                ],
                "self": [
                    2060,
                    2062,
                    2066,
                    2067,
                    2074,
                    2075,
                    2076,
                    2077,
                    2086,
                    2087,
                    2088,
                    4136,
                    4139,
                    4141,
                    4142,
                    4144,
                    2097,
                    2098,
                    4146,
                    52,
                    53,
                    54,
                    4147,
                    4149,
                    4153,
                    60,
                    4156,
                    4158,
                    63,
                    2113,
                    2114,
                    2115,
                    4162,
                    2117,
                    4165,
                    71,
                    2119,
                    2121,
                    4166,
                    75,
                    76,
                    2123,
                    2125,
                    2127,
                    80,
                    4169,
                    4182,
                    2150,
                    2152,
                    4209,
                    4210,
                    4212,
                    2165,
                    2183,
                    4235,
                    4239,
                    4240,
                    2195,
                    2196,
                    2204,
                    2210,
                    2216,
                    4265,
                    4268,
                    4269,
                    2222,
                    4276,
                    2232,
                    2233,
                    186,
                    187,
                    188,
                    4280,
                    192,
                    195,
                    196,
                    2243,
                    205,
                    2253,
                    207,
                    210,
                    215,
                    2270,
                    2274,
                    2296,
                    2297,
                    270,
                    2318,
                    2319,
                    274,
                    276,
                    285,
                    289,
                    307,
                    308,
                    314,
                    315,
                    339,
                    340,
                    2387,
                    2390,
                    2392,
                    2394,
                    355,
                    2406,
                    2407,
                    2411,
                    390,
                    391,
                    392,
                    393,
                    2441,
                    2442,
                    2444,
                    2445,
                    2447,
                    2449,
                    2450,
                    406,
                    407,
                    410,
                    429,
                    2492,
                    2495,
                    2501,
                    2504,
                    2507,
                    2510,
                    2513,
                    2515,
                    476,
                    2524,
                    478,
                    480,
                    481,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    497,
                    500,
                    503,
                    504,
                    505,
                    507,
                    508,
                    511,
                    513,
                    516,
                    517,
                    519,
                    520,
                    523,
                    525,
                    527,
                    529,
                    530,
                    531,
                    2578,
                    533,
                    534,
                    535,
                    2584,
                    2585,
                    538,
                    2587,
                    2588,
                    2591,
                    553,
                    2605,
                    2606,
                    568,
                    569,
                    2617,
                    2621,
                    580,
                    581,
                    582,
                    2628,
                    2630,
                    2634,
                    591,
                    592,
                    593,
                    2649,
                    2654,
                    611,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    621,
                    625,
                    627,
                    2676,
                    630,
                    631,
                    632,
                    2679,
                    2681,
                    635,
                    2683,
                    2686,
                    641,
                    2689,
                    643,
                    2691,
                    645,
                    2692,
                    647,
                    2694,
                    649,
                    2696,
                    2697,
                    653,
                    654,
                    2703,
                    2704,
                    2707,
                    660,
                    2709,
                    662,
                    2710,
                    664,
                    2714,
                    2715,
                    2716,
                    2718,
                    2720,
                    2725,
                    679,
                    684,
                    689,
                    690,
                    2739,
                    2740,
                    695,
                    697,
                    698,
                    699,
                    700,
                    2747,
                    2750,
                    2759,
                    2762,
                    716,
                    719,
                    722,
                    2771,
                    2775,
                    2776,
                    2779,
                    2782,
                    2788,
                    747,
                    749,
                    2798,
                    2799,
                    2813,
                    773,
                    775,
                    2838,
                    792,
                    795,
                    798,
                    2847,
                    2849,
                    823,
                    825,
                    2892,
                    2894,
                    849,
                    851,
                    855,
                    857,
                    858,
                    881,
                    883,
                    885,
                    886,
                    2952,
                    2953,
                    907,
                    910,
                    911,
                    922,
                    927,
                    936,
                    948,
                    949,
                    955,
                    959,
                    3008,
                    961,
                    3010,
                    963,
                    3011,
                    965,
                    3013,
                    999,
                    1011,
                    1013,
                    1014,
                    1015,
                    1016,
                    1018,
                    1019,
                    1030,
                    1032,
                    1033,
                    1034,
                    1035,
                    1037,
                    1038,
                    3085,
                    3092,
                    1045,
                    1046,
                    1050,
                    1051,
                    3100,
                    1053,
                    1054,
                    3101,
                    1056,
                    1059,
                    1060,
                    3109,
                    1062,
                    1063,
                    3110,
                    1065,
                    1067,
                    1070,
                    1071,
                    1073,
                    1075,
                    3124,
                    1081,
                    1083,
                    1085,
                    1086,
                    1087,
                    1088,
                    1089,
                    1090,
                    1091,
                    1092,
                    1093,
                    3138,
                    1095,
                    1096,
                    1098,
                    1099,
                    1100,
                    1101,
                    1102,
                    1103,
                    1104,
                    1105,
                    1106,
                    1107,
                    1108,
                    1109,
                    1110,
                    1112,
                    1113,
                    3166,
                    1122,
                    1124,
                    3172,
                    1126,
                    3173,
                    1132,
                    1137,
                    1146,
                    1148,
                    1149,
                    3197,
                    1154,
                    1155,
                    1156,
                    1157,
                    1158,
                    1159,
                    1161,
                    1163,
                    1164,
                    1166,
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172,
                    1173,
                    1175,
                    1179,
                    1183,
                    1193,
                    1194,
                    1195,
                    1202,
                    1204,
                    1205,
                    1206,
                    3295,
                    3296,
                    3297,
                    3302,
                    3308,
                    3311,
                    1280,
                    1281,
                    3329,
                    3330,
                    1284,
                    3334,
                    3336,
                    3339,
                    3341,
                    3342,
                    3343,
                    3345,
                    3347,
                    3377,
                    3379,
                    3380,
                    3384,
                    1339,
                    3389,
                    1346,
                    1347,
                    1349,
                    1355,
                    1356,
                    1359,
                    1360,
                    3410,
                    1374,
                    3424,
                    3452,
                    1408,
                    1409,
                    3458,
                    1411,
                    3459,
                    1422,
                    3483,
                    1436,
                    1459,
                    1460,
                    1484,
                    3563,
                    3564,
                    3565,
                    3570,
                    3576,
                    3579,
                    1532,
                    1533,
                    1535,
                    1539,
                    1549,
                    1550,
                    3598,
                    3599,
                    3603,
                    3605,
                    3608,
                    3610,
                    3611,
                    1564,
                    1565,
                    3612,
                    3614,
                    3616,
                    1596,
                    1598,
                    3646,
                    1600,
                    1601,
                    3648,
                    3649,
                    1604,
                    3653,
                    1607,
                    1608,
                    3658,
                    1611,
                    1614,
                    1618,
                    1620,
                    1621,
                    1627,
                    1628,
                    1630,
                    3679,
                    1632,
                    1633,
                    1634,
                    1635,
                    3680,
                    3689,
                    3690,
                    1647,
                    3697,
                    3701,
                    1663,
                    1664,
                    3711,
                    3725,
                    3726,
                    1685,
                    1690,
                    3746,
                    3756,
                    3762,
                    3772,
                    3788,
                    3789,
                    3805,
                    1758,
                    3806,
                    1760,
                    1762,
                    1763,
                    1764,
                    1767,
                    1769,
                    1770,
                    1772,
                    1773,
                    1775,
                    1776,
                    1777,
                    1779,
                    1780,
                    1781,
                    1782,
                    1784,
                    1786,
                    3845,
                    3846,
                    3860,
                    1816,
                    1817,
                    1821,
                    1825,
                    1829,
                    1833,
                    3882,
                    3883,
                    1837,
                    3887,
                    1841,
                    3903,
                    1859,
                    1861,
                    1864,
                    3914,
                    1868,
                    3923,
                    3925,
                    1879,
                    1880,
                    1881,
                    1882,
                    3942,
                    3943,
                    3944,
                    1897,
                    1898,
                    1899,
                    1900,
                    1901,
                    1902,
                    3945,
                    3946,
                    3958,
                    1915,
                    1918,
                    1919,
                    1920,
                    1929,
                    1930,
                    1931,
                    1932,
                    1935,
                    1940,
                    1941,
                    1943,
                    1950,
                    3998,
                    1952,
                    1953,
                    1954,
                    1955,
                    1960,
                    4008,
                    4009,
                    4011,
                    1966,
                    1968,
                    1970,
                    1972,
                    1973,
                    1974,
                    1975,
                    4029,
                    1982,
                    1983,
                    1984,
                    1985,
                    4030,
                    4035,
                    4036,
                    4037,
                    4038,
                    4039,
                    4040,
                    4041,
                    4042,
                    4043,
                    4044,
                    4045,
                    1998,
                    4046,
                    4047,
                    2001,
                    2004,
                    4052,
                    4055,
                    2009,
                    4062,
                    2025,
                    2026,
                    2027,
                    4073,
                    4075,
                    2030,
                    4077,
                    4080,
                    4081,
                    2036,
                    4084,
                    2038,
                    2039,
                    2040,
                    2041,
                    4085,
                    4086
                ],
                "attr_name": [
                    52
                ],
                "self.method_name": [
                    80,
                    60,
                    53,
                    71
                ],
                "method_name": [
                    53
                ],
                "self.doc_sub": [
                    76,
                    54
                ],
                "doc_sub": [
                    75,
                    77,
                    54
                ],
                "get_method": [
                    60,
                    63
                ],
                "attrgetter": [
                    2721,
                    60
                ],
                "args": [
                    1792,
                    1793,
                    260,
                    261,
                    1798,
                    265,
                    266,
                    267,
                    268,
                    269,
                    63,
                    200,
                    203,
                    1750,
                    1751,
                    217,
                    221,
                    222,
                    224,
                    234,
                    238,
                    240,
                    4209,
                    1272,
                    251,
                    1276,
                    1279
                ],
                "kwargs": [
                    258,
                    259,
                    2181,
                    2182,
                    3080,
                    2185,
                    270,
                    527,
                    1806,
                    1807,
                    1808,
                    1809,
                    2193,
                    2195,
                    2196,
                    2197,
                    3087,
                    409,
                    1818,
                    1820,
                    415,
                    306,
                    3381,
                    318,
                    63,
                    3008,
                    3010,
                    3650,
                    200,
                    2888,
                    203,
                    331,
                    2892,
                    2894,
                    210,
                    213,
                    355,
                    359,
                    361,
                    4207,
                    4209,
                    1272,
                    2173,
                    1279
                ],
                "wrapper.__module__": [
                    65
                ],
                "wrapper": [
                    65,
                    66,
                    67,
                    72,
                    79,
                    83,
                    85
                ],
                "owner.__module__": [
                    65
                ],
                "owner": [
                    65,
                    67,
                    85
                ],
                "wrapper.__name__": [
                    66
                ],
                "name": [
                    1056,
                    66,
                    67,
                    421,
                    85
                ],
                "wrapper.__qualname__": [
                    67,
                    79
                ],
                "owner.__qualname__": [
                    67
                ],
                "wrapped_method": [
                    72,
                    73,
                    71
                ],
                "maxis.Axis": [
                    71
                ],
                "maxis": [
                    618,
                    615,
                    71
                ],
                "wrapper.__signature__": [
                    72
                ],
                "inspect.signature": [
                    72
                ],
                "inspect": [
                    72,
                    83
                ],
                "doc": [
                    73,
                    74,
                    78,
                    82,
                    83
                ],
                "wrapped_method.__doc__": [
                    73
                ],
                "k": [
                    382,
                    2952,
                    331,
                    77,
                    78,
                    301,
                    302,
                    81,
                    82,
                    303,
                    333,
                    2606,
                    2607,
                    2608,
                    379,
                    286
                ],
                "v": [
                    2952,
                    331,
                    332,
                    77,
                    2606,
                    2607,
                    2608,
                    82,
                    375,
                    379,
                    381,
                    382
                ],
                "doc_sub.items": [
                    77
                ],
                "doc.replace": [
                    82
                ],
                "wrapper.__doc__": [
                    83
                ],
                "inspect.cleandoc": [
                    83
                ],
                "linestyle": [
                    164,
                    133,
                    165,
                    166,
                    136,
                    167,
                    106,
                    139,
                    171,
                    142,
                    366,
                    371,
                    118,
                    122,
                    380
                ],
                "marker": [
                    164,
                    168,
                    169,
                    107,
                    171,
                    366,
                    145,
                    371,
                    148,
                    118,
                    122,
                    380
                ],
                "color": [
                    154,
                    1193,
                    171,
                    108,
                    1195,
                    366,
                    112,
                    371,
                    118,
                    151,
                    122,
                    380,
                    125,
                    158
                ],
                "mcolors.to_rgba": [
                    112,
                    158
                ],
                "mcolors": [
                    112,
                    158,
                    150
                ],
                "fmt": [
                    130,
                    131,
                    132,
                    135,
                    136,
                    141,
                    112,
                    147,
                    116,
                    120,
                    153,
                    156,
                    157
                ],
                "fmtint": [
                    120,
                    116
                ],
                "i": [
                    129,
                    130,
                    131,
                    132,
                    136,
                    137,
                    143,
                    149,
                    155,
                    156,
                    157,
                    159
                ],
                "c": [
                    162,
                    131,
                    138,
                    142,
                    144,
                    148,
                    150,
                    154,
                    156
                ],
                "mlines.lineStyles": [
                    138,
                    132
                ],
                "mlines": [
                    144,
                    138,
                    132,
                    309
                ],
                "mlines.lineMarkers": [
                    144
                ],
                "mcolors.get_named_colors_mapping": [
                    150
                ],
                "color_cycle_number": [
                    157,
                    158
                ],
                "mpl.rcParams": [
                    772,
                    537,
                    165,
                    822,
                    1080,
                    1082,
                    1089,
                    1090,
                    201,
                    1098,
                    848,
                    1113,
                    1114,
                    1116,
                    1117,
                    1119,
                    746,
                    502,
                    1143,
                    505
                ],
                "mpl": [
                    259,
                    772,
                    537,
                    165,
                    822,
                    1080,
                    1082,
                    1089,
                    1090,
                    1858,
                    201,
                    1098,
                    848,
                    1113,
                    1114,
                    1116,
                    221,
                    1117,
                    1119,
                    746,
                    502,
                    1143,
                    505
                ],
                "self.axes": [
                    192,
                    484,
                    390,
                    391,
                    392,
                    393,
                    1960,
                    314,
                    210,
                    186,
                    315
                ],
                "axes": [
                    1536,
                    1346,
                    1349,
                    1351,
                    186,
                    1532,
                    1535
                ],
                "self.command": [
                    192,
                    187,
                    406,
                    215
                ],
                "command": [
                    187
                ],
                "self.set_prop_cycle": [
                    196,
                    188
                ],
                "self.__dict__": [
                    592,
                    195
                ],
                "state.copy": [
                    195
                ],
                "state": [
                    576,
                    195,
                    581,
                    583,
                    589,
                    592,
                    574
                ],
                "prop_cycler": [
                    201,
                    203,
                    205,
                    207
                ],
                "cycler": [
                    203,
                    1279
                ],
                "self.prop_cycler": [
                    289,
                    276,
                    205
                ],
                "itertools.cycle": [
                    205
                ],
                "itertools": [
                    205
                ],
                "self._prop_keys": [
                    274,
                    285,
                    207
                ],
                "prop_cycler.keys": [
                    207
                ],
                "self.axes._process_unit_info": [
                    210
                ],
                "pos_only": [
                    212,
                    213,
                    215
                ],
                "data": [
                    2178,
                    2191,
                    2192,
                    220,
                    221,
                    2175
                ],
                "replaced": [
                    261,
                    260,
                    221,
                    238
                ],
                "mpl._replacer": [
                    221
                ],
                "arg": [
                    221
                ],
                "label_namer_idx": [
                    260,
                    236,
                    248,
                    250,
                    252,
                    223
                ],
                "_process_plot_format": [
                    234,
                    366
                ],
                "cbook._warn_external": [
                    3581,
                    3587,
                    3876,
                    3593,
                    239,
                    3313,
                    2386,
                    4020,
                    3319,
                    3325
                ],
                "cbook": [
                    1794,
                    3587,
                    1029,
                    3078,
                    2951,
                    3593,
                    2954,
                    1555,
                    419,
                    1060,
                    1829,
                    3876,
                    423,
                    424,
                    425,
                    1833,
                    4020,
                    1336,
                    1338,
                    3004,
                    2890,
                    2386,
                    3581,
                    2154,
                    2666,
                    239,
                    2671,
                    3313,
                    1010,
                    3319,
                    3325,
                    1406
                ],
                "kwargs.get": [
                    409,
                    258,
                    359
                ],
                "mpl._label_from_arg": [
                    259
                ],
                "this": [
                    266,
                    268,
                    270
                ],
                "self._plot_args": [
                    270
                ],
                "prop_keys": [
                    285,
                    286
                ],
                "ignore": [
                    290,
                    285
                ],
                "kw.get": [
                    302,
                    348,
                    286
                ],
                "kw": [
                    382,
                    360,
                    302,
                    303,
                    306,
                    307,
                    308,
                    309,
                    339,
                    340,
                    409,
                    378,
                    348,
                    317,
                    286,
                    415
                ],
                "default_dict": [
                    289,
                    291,
                    355,
                    293,
                    294,
                    307,
                    308,
                    339,
                    340,
                    351
                ],
                "copy": [
                    289
                ],
                "p": [
                    3998,
                    3999,
                    4000,
                    290,
                    291,
                    4005,
                    4014,
                    4015,
                    4018,
                    4025,
                    2121,
                    2122,
                    2123,
                    2036,
                    2037,
                    2038,
                    2039,
                    2040,
                    2041,
                    2042
                ],
                "default_dict.pop": [
                    291,
                    351
                ],
                "defaults": [
                    301,
                    303
                ],
                "self._getdefaults": [
                    339,
                    307
                ],
                "self._setdefaults": [
                    355,
                    308,
                    340
                ],
                "seg": [
                    357,
                    361,
                    362,
                    309,
                    310
                ],
                "mlines.Line2D": [
                    309
                ],
                "x": [
                    385,
                    388,
                    391,
                    395,
                    397,
                    398,
                    400,
                    401,
                    402,
                    412,
                    415,
                    3999,
                    309,
                    314,
                    2624,
                    2626,
                    2373,
                    2377,
                    2379,
                    2384,
                    2389,
                    2390,
                    2650,
                    2395,
                    2656,
                    3680,
                    357,
                    2661,
                    2662,
                    3947,
                    3694,
                    3697,
                    2552
                ],
                "y": [
                    386,
                    388,
                    393,
                    395,
                    397,
                    398,
                    400,
                    403,
                    404,
                    412,
                    415,
                    4000,
                    309,
                    315,
                    2373,
                    2377,
                    2379,
                    2384,
                    2391,
                    2392,
                    2649,
                    2650,
                    2395,
                    2654,
                    1119,
                    1120,
                    1121,
                    2656,
                    357,
                    1127,
                    3690,
                    3948,
                    1133,
                    1138,
                    3698,
                    3701
                ],
                "self.axes.convert_xunits": [
                    314
                ],
                "self.axes.convert_yunits": [
                    315
                ],
                "kw.copy": [
                    317
                ],
                "kwargs.copy": [
                    318
                ],
                "ignores": [
                    328,
                    339,
                    333
                ],
                "kwargs.items": [
                    331
                ],
                "ignores.add": [
                    333
                ],
                "facecolor": [
                    358,
                    501,
                    502,
                    503,
                    348
                ],
                "mpatches.Polygon": [
                    357
                ],
                "mpatches": [
                    357,
                    982,
                    2054
                ],
                "np.column_stack": [
                    357
                ],
                "np": [
                    2568,
                    3212,
                    402,
                    404,
                    4013,
                    4014,
                    3378,
                    3890,
                    3891,
                    3385,
                    4025,
                    2494,
                    3647,
                    2502,
                    3654,
                    2508,
                    3284,
                    3163,
                    2527,
                    3552,
                    4192,
                    2147,
                    2532,
                    357,
                    4198,
                    2535,
                    4199,
                    1783,
                    3449
                ],
                "seg.set": [
                    361
                ],
                "tup": [
                    384,
                    385,
                    386,
                    388,
                    365,
                    366,
                    367,
                    368,
                    375
                ],
                "_check_1d": [
                    385,
                    386
                ],
                "index_of": [
                    388
                ],
                "self.axes.xaxis": [
                    390,
                    391
                ],
                "self.axes.xaxis.update_units": [
                    391
                ],
                "self.axes.yaxis": [
                    392,
                    393
                ],
                "self.axes.yaxis.update_units": [
                    393
                ],
                "x.shape": [
                    400,
                    395,
                    412,
                    397
                ],
                "y.shape": [
                    400,
                    395,
                    412,
                    397
                ],
                "x.ndim": [
                    401,
                    398
                ],
                "y.ndim": [
                    403,
                    398
                ],
                "np.newaxis": [
                    402,
                    404
                ],
                "func": [
                    415,
                    410,
                    407
                ],
                "self._makeline": [
                    407
                ],
                "self._makefill": [
                    410
                ],
                "ncx": [
                    416,
                    412,
                    413,
                    414,
                    415
                ],
                "ncy": [
                    416,
                    412,
                    413,
                    414,
                    415
                ],
                "j": [
                    416,
                    415
                ],
                "martist.Artist": [
                    625,
                    476,
                    420
                ],
                "martist": [
                    420,
                    2665,
                    625,
                    476,
                    1916
                ],
                "_shared_x_axes": [
                    423
                ],
                "cbook.Grouper": [
                    424,
                    425,
                    423
                ],
                "_shared_y_axes": [
                    424
                ],
                "_twinned_axes": [
                    425
                ],
                "self._position.bounds": [
                    429
                ],
                "self._position": [
                    480,
                    481,
                    483,
                    429,
                    627,
                    886,
                    478
                ],
                "martist.Artist.__init__": [
                    476
                ],
                "rect": [
                    480,
                    477,
                    478
                ],
                "mtransforms.Bbox": [
                    480,
                    2114,
                    4201,
                    4017,
                    2165,
                    630,
                    631,
                    1528,
                    921,
                    1530,
                    477,
                    4190
                ],
                "mtransforms": [
                    774,
                    1528,
                    920,
                    921,
                    679,
                    684,
                    685,
                    689,
                    690,
                    1202,
                    4017,
                    824,
                    697,
                    699,
                    2114,
                    850,
                    856,
                    477,
                    4190,
                    480,
                    4201,
                    748,
                    2542,
                    627,
                    2165,
                    630,
                    631,
                    632,
                    633,
                    1530
                ],
                "mtransforms.Bbox.from_bounds": [
                    480,
                    921
                ],
                "self._position.width": [
                    481
                ],
                "self._position.height": [
                    481
                ],
                "self._originalPosition": [
                    881,
                    483
                ],
                "self._position.frozen": [
                    483,
                    886
                ],
                "self._aspect": [
                    1284,
                    485
                ],
                "self._adjustable": [
                    1374,
                    1355,
                    486,
                    1607
                ],
                "self._anchor": [
                    1484,
                    487
                ],
                "self._stale_viewlim_x": [
                    488,
                    662
                ],
                "self._stale_viewlim_y": [
                    664,
                    489
                ],
                "self._sharex": [
                    1062,
                    1063,
                    490,
                    1168,
                    1011,
                    1014,
                    1085
                ],
                "self._sharey": [
                    1030,
                    1033,
                    491,
                    1070,
                    1071,
                    1171,
                    1087
                ],
                "self.set_label": [
                    492
                ],
                "label": [
                    2084,
                    2085,
                    1927,
                    1928,
                    492
                ],
                "self.set_figure": [
                    493
                ],
                "fig": [
                    625,
                    628,
                    493
                ],
                "self.set_box_aspect": [
                    494
                ],
                "box_aspect": [
                    1639,
                    1640,
                    1611,
                    1613,
                    494
                ],
                "self._axes_locator": [
                    955,
                    948,
                    495
                ],
                "self.spines": [
                    1056,
                    616,
                    617,
                    4040,
                    619,
                    620,
                    4077,
                    719,
                    2704,
                    497,
                    722,
                    795,
                    798
                ],
                "self._gen_axes_spines": [
                    497
                ],
                "self._init_axis": [
                    500
                ],
                "self._facecolor": [
                    1193,
                    1156,
                    503
                ],
                "self._frameon": [
                    2788,
                    4075,
                    2798,
                    2703,
                    2739,
                    504
                ],
                "frameon": [
                    504
                ],
                "self.set_axisbelow": [
                    505
                ],
                "self._rasterization_zorder": [
                    2411,
                    507,
                    2725,
                    2406
                ],
                "self.cla": [
                    1179,
                    508
                ],
                "sharex": [
                    510,
                    511
                ],
                "self.sharex": [
                    1063,
                    511
                ],
                "sharey": [
                    512,
                    513
                ],
                "self.sharey": [
                    513,
                    1071
                ],
                "self.fmt_xdata": [
                    516,
                    3679
                ],
                "self.fmt_ydata": [
                    3689,
                    517
                ],
                "self.set_navigate": [
                    519
                ],
                "self.set_navigate_mode": [
                    520
                ],
                "xscale": [
                    522,
                    523
                ],
                "self.set_xscale": [
                    523
                ],
                "yscale": [
                    524,
                    525
                ],
                "self.set_yscale": [
                    525
                ],
                "self.update": [
                    527
                ],
                "self.xaxis": [
                    3329,
                    3330,
                    1163,
                    1549,
                    3085,
                    3725,
                    529,
                    530,
                    1169,
                    2195,
                    2585,
                    1050,
                    1053,
                    2591,
                    1065,
                    1837,
                    4269,
                    3377,
                    4147,
                    3124,
                    4149,
                    3384,
                    1081,
                    4153,
                    3903,
                    3008,
                    2892,
                    857,
                    1632,
                    3680,
                    615,
                    616,
                    617,
                    1015,
                    1016,
                    1019,
                    3711
                ],
                "self._xcid": [
                    530
                ],
                "self.xaxis.callbacks.connect": [
                    530
                ],
                "self.xaxis.callbacks": [
                    530
                ],
                "self._on_units_changed": [
                    531,
                    535
                ],
                "self.yaxis": [
                    1034,
                    1035,
                    1164,
                    1038,
                    1550,
                    3598,
                    3599,
                    3726,
                    4240,
                    1172,
                    533,
                    534,
                    2196,
                    3092,
                    1051,
                    2588,
                    1054,
                    2591,
                    1073,
                    1841,
                    1083,
                    4156,
                    3646,
                    4158,
                    3010,
                    4162,
                    3653,
                    3914,
                    2894,
                    3410,
                    857,
                    1633,
                    618,
                    619,
                    620,
                    3690,
                    3711
                ],
                "self._ycid": [
                    534
                ],
                "self.yaxis.callbacks.connect": [
                    534
                ],
                "self.yaxis.callbacks": [
                    534
                ],
                "rcParams": [
                    537,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565
                ],
                "self.tick_params": [
                    553,
                    538
                ],
                "self._layoutbox": [
                    568,
                    910
                ],
                "self._poslayoutbox": [
                    569,
                    911
                ],
                "__getstate__": [
                    574
                ],
                "key": [
                    576,
                    4004,
                    3978,
                    4010,
                    3983,
                    3985,
                    3987,
                    575
                ],
                "grouper_name": [
                    578,
                    580,
                    581,
                    587,
                    589,
                    591
                ],
                "grouper": [
                    580,
                    581,
                    582
                ],
                "grouper.get_siblings": [
                    581
                ],
                "siblings": [
                    589,
                    590,
                    591
                ],
                "state.pop": [
                    589
                ],
                "join": [
                    1530,
                    591
                ],
                "self._stale": [
                    593,
                    2686
                ],
                "self.bbox": [
                    611,
                    679,
                    4008,
                    4009,
                    3946,
                    627
                ],
                "maxis.XAxis": [
                    615
                ],
                "register_axis": [
                    616,
                    617,
                    619,
                    620
                ],
                "maxis.YAxis": [
                    618
                ],
                "self._update_transScale": [
                    1093,
                    621
                ],
                "martist.Artist.set_figure": [
                    625
                ],
                "mtransforms.TransformedBbox": [
                    690,
                    627
                ],
                "fig.transFigure": [
                    628
                ],
                "self.dataLim": [
                    2113,
                    2114,
                    2150,
                    2026,
                    1647,
                    2165,
                    630
                ],
                "mtransforms.Bbox.null": [
                    2114,
                    630
                ],
                "self._viewLim": [
                    3334,
                    654,
                    690,
                    3603,
                    631
                ],
                "mtransforms.Bbox.unit": [
                    631
                ],
                "self.transScale": [
                    695,
                    684,
                    690,
                    855,
                    632
                ],
                "mtransforms.TransformWrapper": [
                    632,
                    684
                ],
                "mtransforms.IdentityTransform": [
                    633,
                    685
                ],
                "self._set_lim_and_transforms": [
                    635
                ],
                "scalex": [
                    640,
                    2435,
                    644,
                    2501,
                    2438,
                    649,
                    2442,
                    2446,
                    2098,
                    2450,
                    661,
                    2584
                ],
                "ax._stale_viewlim_x": [
                    640,
                    646
                ],
                "ax": [
                    640,
                    641,
                    642,
                    643,
                    1536,
                    645,
                    646,
                    647,
                    648,
                    1413,
                    1415,
                    3714,
                    1420,
                    1421,
                    3717,
                    3718,
                    3721,
                    3715,
                    922,
                    924,
                    926,
                    936,
                    937,
                    938,
                    3380,
                    3381,
                    1537,
                    3382,
                    3383,
                    1466,
                    1467,
                    1469,
                    1470,
                    1471,
                    3649,
                    1921,
                    3650,
                    3651,
                    3652,
                    2630,
                    1351,
                    1352,
                    2504,
                    2505,
                    2506,
                    2631,
                    2632,
                    2510,
                    2511,
                    2512,
                    2635,
                    2637,
                    2638,
                    2640,
                    2641,
                    2642,
                    2643,
                    2645,
                    2525,
                    3711,
                    3712,
                    1915,
                    1916,
                    1918,
                    1919
                ],
                "self._shared_x_axes.get_siblings": [
                    1408,
                    641,
                    1346,
                    645,
                    2504,
                    3341,
                    1532
                ],
                "self._shared_x_axes": [
                    1408,
                    641,
                    1346,
                    645,
                    2504,
                    3341,
                    1166,
                    4276,
                    1013,
                    2584,
                    1532,
                    1663
                ],
                "scaley": [
                    642,
                    644,
                    2436,
                    2439,
                    649,
                    2507,
                    2445,
                    2448,
                    2098,
                    2450,
                    663,
                    2587
                ],
                "ax._stale_viewlim_y": [
                    648,
                    642
                ],
                "self._shared_y_axes.get_siblings": [
                    1409,
                    1347,
                    643,
                    647,
                    2510,
                    3610,
                    1533
                ],
                "self._shared_y_axes": [
                    1664,
                    1409,
                    643,
                    1347,
                    647,
                    1032,
                    2510,
                    1167,
                    4280,
                    3610,
                    2587,
                    1533
                ],
                "self.autoscale_view": [
                    1764,
                    649,
                    3658,
                    1772,
                    1775,
                    3389
                ],
                "self._unstale_viewLim": [
                    2681,
                    1940,
                    653
                ],
                "tight": [
                    3011,
                    2446,
                    2448,
                    2385,
                    2386,
                    659,
                    660,
                    2450,
                    2491,
                    2395,
                    2492
                ],
                "self._tight": [
                    2578,
                    2492,
                    1091,
                    660
                ],
                "self.transAxes": [
                    1159,
                    679,
                    1206,
                    695,
                    2649,
                    698,
                    700,
                    2654
                ],
                "mtransforms.BboxTransformTo": [
                    679
                ],
                "self.transLimits": [
                    689,
                    695
                ],
                "mtransforms.BboxTransformFrom": [
                    689
                ],
                "self.transData": [
                    961,
                    3944,
                    2025,
                    3945,
                    2060,
                    1998,
                    2062,
                    3887,
                    2001,
                    2066,
                    2004,
                    1941,
                    3860,
                    695,
                    2009,
                    698,
                    700
                ],
                "self._xaxis_transform": [
                    697,
                    716
                ],
                "mtransforms.blended_transform_factory": [
                    856,
                    697,
                    699
                ],
                "self._yaxis_transform": [
                    792,
                    699
                ],
                "which": [
                    715,
                    907,
                    717,
                    2892,
                    2894,
                    720,
                    791,
                    793,
                    923,
                    796,
                    925
                ],
                "get_spine_transform": [
                    722,
                    795,
                    798,
                    719
                ],
                "labels_align": [
                    772,
                    776,
                    746,
                    750,
                    848,
                    852,
                    822,
                    826
                ],
                "self.get_xaxis_transform": [
                    747,
                    773
                ],
                "mtransforms.ScaledTranslation": [
                    774,
                    748,
                    850,
                    1202,
                    824
                ],
                "pad_points": [
                    824,
                    850,
                    748,
                    774
                ],
                "self.figure.dpi_scale_trans": [
                    775,
                    749,
                    851,
                    1204,
                    825
                ],
                "self.figure": [
                    1155,
                    775,
                    2759,
                    3614,
                    2762,
                    749,
                    2782,
                    3345,
                    4209,
                    851,
                    1204,
                    2676,
                    2771,
                    825,
                    2779,
                    2718,
                    959
                ],
                "self.get_yaxis_transform": [
                    849,
                    823
                ],
                "self.transScale.set": [
                    855
                ],
                "self.xaxis.get_transform": [
                    1632,
                    857,
                    1549,
                    3903
                ],
                "self.yaxis.get_transform": [
                    857,
                    3914,
                    1550,
                    1633
                ],
                "line": [
                    2010,
                    2117,
                    2118,
                    2119,
                    1992,
                    1996,
                    1966,
                    1967,
                    1968,
                    1970,
                    1971,
                    1972,
                    1973,
                    1974,
                    1976,
                    858,
                    860
                ],
                "line._transformed_path.invalidate": [
                    860
                ],
                "line._transformed_path": [
                    860
                ],
                "original": [
                    880
                ],
                "self._originalPosition.frozen": [
                    881
                ],
                "locator": [
                    2689,
                    2690,
                    2691,
                    2632,
                    2633,
                    2634,
                    4139,
                    4140,
                    4141,
                    2546,
                    883,
                    948,
                    884,
                    2547,
                    2579
                ],
                "self.get_axes_locator": [
                    2689,
                    4139,
                    883
                ],
                "self.apply_aspect": [
                    2692,
                    2694,
                    4142,
                    4144,
                    885
                ],
                "self._set_position": [
                    1601,
                    907,
                    1614,
                    1621,
                    1628
                ],
                "pos": [
                    2691,
                    2692,
                    937,
                    938,
                    907,
                    2634,
                    2635,
                    4141,
                    4142,
                    920,
                    921,
                    924,
                    926
                ],
                "mtransforms.BboxBase": [
                    920,
                    2542
                ],
                "self._twinned_axes.get_siblings": [
                    2628,
                    936,
                    1459,
                    1460,
                    922
                ],
                "self._twinned_axes": [
                    2628,
                    936,
                    1608,
                    1459,
                    1460,
                    4212,
                    922
                ],
                "ax._position.set": [
                    924
                ],
                "ax._position": [
                    924
                ],
                "ax._originalPosition.set": [
                    926
                ],
                "ax._originalPosition": [
                    926
                ],
                "self.stale": [
                    1920,
                    1539,
                    1422,
                    2319,
                    3347,
                    1943,
                    1175,
                    3101,
                    927,
                    3616,
                    2849,
                    1955,
                    3110,
                    1194,
                    949,
                    1975,
                    2750,
                    1985,
                    3013,
                    1360,
                    2407,
                    1902,
                    2799,
                    2297
                ],
                "ax.get_position": [
                    937
                ],
                "ax.set_position": [
                    938
                ],
                "a.set_figure": [
                    959
                ],
                "a": [
                    2719,
                    2720,
                    2730,
                    2731,
                    2732,
                    2733,
                    2743,
                    2744,
                    959,
                    960,
                    961,
                    963,
                    964,
                    965,
                    2762,
                    4184,
                    4188,
                    4196,
                    1897,
                    1898,
                    1899,
                    1900,
                    1901,
                    1903
                ],
                "a.is_transform_set": [
                    960
                ],
                "a.set_transform": [
                    961
                ],
                "a.axes": [
                    1897,
                    963
                ],
                "a.mouseover": [
                    964
                ],
                "self._mouseover_set.add": [
                    965
                ],
                "self._mouseover_set": [
                    1105,
                    965
                ],
                "mpatches.Rectangle": [
                    982,
                    2054
                ],
                "OrderedDict": [
                    999
                ],
                "side": [
                    1000,
                    999
                ],
                "mspines.Spine.linear_spine": [
                    999
                ],
                "mspines.Spine": [
                    999
                ],
                "mspines": [
                    999
                ],
                "cbook._check_isinstance": [
                    1010,
                    1029
                ],
                "_AxesBase": [
                    1010,
                    1029,
                    1414
                ],
                "other": [
                    1029,
                    1030,
                    1032,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    3341,
                    3342,
                    3343,
                    3345,
                    3346,
                    3610,
                    3611,
                    3612,
                    3614,
                    3615,
                    1010,
                    1011,
                    1013,
                    1014,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019
                ],
                "self._shared_x_axes.join": [
                    1013
                ],
                "self.xaxis.major": [
                    1015
                ],
                "other.xaxis.major": [
                    1015
                ],
                "other.xaxis": [
                    1016,
                    1019,
                    1015
                ],
                "self.xaxis.minor": [
                    1016
                ],
                "other.xaxis.minor": [
                    1016
                ],
                "x0": [
                    2565,
                    2566,
                    2570,
                    2574,
                    2543,
                    1648,
                    1650,
                    2547,
                    2554,
                    2579,
                    2580,
                    1690,
                    1688,
                    1017,
                    1018
                ],
                "x1": [
                    2565,
                    2566,
                    2570,
                    2543,
                    1648,
                    2576,
                    1689,
                    1650,
                    2547,
                    2579,
                    2580,
                    1690,
                    1017,
                    1018,
                    2557
                ],
                "other.get_xlim": [
                    1017
                ],
                "self.set_xlim": [
                    3172,
                    1067,
                    4029,
                    1816,
                    1784,
                    1018,
                    3805
                ],
                "other.get_autoscalex_on": [
                    1018
                ],
                "self.xaxis._scale": [
                    1019
                ],
                "other.xaxis._scale": [
                    1019
                ],
                "self._shared_y_axes.join": [
                    1032
                ],
                "self.yaxis.major": [
                    1034
                ],
                "other.yaxis.major": [
                    1034
                ],
                "other.yaxis": [
                    1034,
                    1035,
                    1038
                ],
                "self.yaxis.minor": [
                    1035
                ],
                "other.yaxis.minor": [
                    1035
                ],
                "y0": [
                    1036,
                    1037,
                    1649,
                    1651,
                    1683,
                    1685
                ],
                "y1": [
                    1036,
                    1037,
                    1649,
                    1651,
                    1684,
                    1685
                ],
                "other.get_ylim": [
                    1036
                ],
                "self.set_ylim": [
                    3458,
                    1037,
                    1075,
                    4030,
                    1817,
                    1786,
                    3806
                ],
                "other.get_autoscaley_on": [
                    1037
                ],
                "self.yaxis._scale": [
                    1038
                ],
                "other.yaxis._scale": [
                    1038
                ],
                "patch_visible": [
                    1048,
                    1170,
                    1173,
                    1046
                ],
                "self.patch.get_visible": [
                    1046
                ],
                "self.patch": [
                    1154,
                    1155,
                    1156,
                    1157,
                    1158,
                    1159,
                    2697,
                    1163,
                    1164,
                    1935,
                    1170,
                    1173,
                    1046,
                    2204,
                    2076,
                    1183,
                    1195,
                    1968,
                    2740,
                    4047,
                    4055,
                    4062,
                    1901,
                    2038
                ],
                "xaxis_visible": [
                    1169,
                    1050
                ],
                "self.xaxis.get_visible": [
                    1050,
                    4147
                ],
                "yaxis_visible": [
                    1051,
                    1172
                ],
                "self.yaxis.get_visible": [
                    1051,
                    4156
                ],
                "self.xaxis.cla": [
                    1053
                ],
                "self.yaxis.cla": [
                    1054
                ],
                "spine": [
                    1056,
                    1057,
                    4077,
                    4078,
                    2704,
                    2705
                ],
                "self.spines.items": [
                    1056
                ],
                "spine.cla": [
                    1057
                ],
                "self.ignore_existing_data_limits": [
                    2115,
                    1059,
                    2150,
                    2152,
                    2027,
                    2030
                ],
                "self.callbacks": [
                    3608,
                    3339,
                    1060
                ],
                "cbook.CallbackRegistry": [
                    1060
                ],
                "self.xaxis._set_scale": [
                    1065
                ],
                "self.yaxis._set_scale": [
                    1073
                ],
                "self.xaxis.set_minor_locator": [
                    1081,
                    3725
                ],
                "mticker.AutoMinorLocator": [
                    1081,
                    3721,
                    1083
                ],
                "mticker": [
                    3715,
                    3719,
                    3721,
                    3725,
                    3726,
                    1081,
                    1083
                ],
                "self.yaxis.set_minor_locator": [
                    1083,
                    3726
                ],
                "self._autoscaleXon": [
                    2210,
                    2243,
                    2501,
                    2216,
                    2441,
                    2442,
                    2584,
                    3336,
                    2232,
                    1086
                ],
                "self._autoscaleYon": [
                    1088,
                    2210,
                    2507,
                    2444,
                    2253,
                    2222,
                    2445,
                    3605,
                    2233,
                    2587
                ],
                "self._xmargin": [
                    1089,
                    2501,
                    2447,
                    2387,
                    2296,
                    2585
                ],
                "self._ymargin": [
                    1090,
                    2507,
                    2318,
                    2449,
                    2387,
                    2588
                ],
                "self._use_sticky_edges": [
                    2274,
                    1092,
                    2270
                ],
                "self._get_lines": [
                    1280,
                    1095
                ],
                "_process_plot_var_args": [
                    1096,
                    1095
                ],
                "self._get_patches_for_fill": [
                    1096,
                    1281
                ],
                "self._gridOn": [
                    1113,
                    1098
                ],
                "self.lines": [
                    2117,
                    4037,
                    1833,
                    1099,
                    1972,
                    1973,
                    1974,
                    1881
                ],
                "self.patches": [
                    4036,
                    2121,
                    1100,
                    2040,
                    2041,
                    1882
                ],
                "self.texts": [
                    1984,
                    1101,
                    4038,
                    1983
                ],
                "self.tables": [
                    4043,
                    2075,
                    2077,
                    1102
                ],
                "self.artists": [
                    1898,
                    1899,
                    4039,
                    1103
                ],
                "self.images": [
                    1952,
                    1953,
                    1954,
                    2720,
                    1861,
                    1829,
                    4044,
                    2125,
                    1104,
                    1880
                ],
                "_OrderedSet": [
                    1105
                ],
                "self.child_axes": [
                    2630,
                    4045,
                    1106,
                    1918,
                    1919
                ],
                "self._current_image": [
                    1864,
                    1107,
                    1868
                ],
                "self.legend_": [
                    1825,
                    1108,
                    4046
                ],
                "self.collections": [
                    1859,
                    4035,
                    1861,
                    1929,
                    1930,
                    1931,
                    1109,
                    1879
                ],
                "self.containers": [
                    2086,
                    2088,
                    1110,
                    2087
                ],
                "self.grid": [
                    1112,
                    1113
                ],
                "props": [
                    1128,
                    1139,
                    1115,
                    1134
                ],
                "font_manager.FontProperties": [
                    1115
                ],
                "font_manager": [
                    1115
                ],
                "self._autotitlepos": [
                    2617,
                    1122,
                    1124
                ],
                "self.title": [
                    1126,
                    4169,
                    4042,
                    4084,
                    1205,
                    2776,
                    2714,
                    1148,
                    2621
                ],
                "mtext.Text": [
                    1137,
                    1132,
                    1126
                ],
                "mtext": [
                    1137,
                    1132,
                    1126
                ],
                "self._left_title": [
                    4169,
                    4042,
                    1132,
                    1205,
                    4085,
                    2776,
                    2715,
                    1148,
                    2621
                ],
                "props.copy": [
                    1139,
                    1134
                ],
                "self._right_title": [
                    4169,
                    4042,
                    1148,
                    1137,
                    1205,
                    4086,
                    2776,
                    2716,
                    2621
                ],
                "title_offset_points": [
                    1146,
                    1203,
                    1143
                ],
                "self._set_title_offset_trans": [
                    1146
                ],
                "_title": [
                    1205,
                    1206,
                    1207,
                    1148,
                    1149
                ],
                "self._set_artist_props": [
                    1932,
                    1900,
                    1966,
                    1982,
                    2036,
                    2074,
                    1149,
                    1950
                ],
                "self._gen_axes_patch": [
                    1154
                ],
                "self.patch.set_figure": [
                    1155
                ],
                "self.patch.set_facecolor": [
                    1195,
                    1156
                ],
                "self.patch.set_edgecolor": [
                    1157
                ],
                "self.patch.set_linewidth": [
                    1158
                ],
                "self.patch.set_transform": [
                    1159
                ],
                "self.set_axis_on": [
                    1161,
                    1758
                ],
                "self.xaxis.set_clip_path": [
                    1163
                ],
                "self.yaxis.set_clip_path": [
                    1164
                ],
                "self._shared_x_axes.clean": [
                    1166
                ],
                "self._shared_y_axes.clean": [
                    1167
                ],
                "self.xaxis.set_visible": [
                    1169
                ],
                "self.patch.set_visible": [
                    1170,
                    1173
                ],
                "self.yaxis.set_visible": [
                    1172
                ],
                "self.patch.get_facecolor": [
                    1183
                ],
                "self.titleOffsetTrans": [
                    1202,
                    1206
                ],
                "_title.set_transform": [
                    1206
                ],
                "_title.set_clip_box": [
                    1207
                ],
                "prop_cycle": [
                    1280,
                    1281,
                    1277,
                    1279
                ],
                "self._get_lines.set_prop_cycle": [
                    1280
                ],
                "self._get_patches_for_fill.set_prop_cycle": [
                    1281
                ],
                "cbook._str_equal": [
                    1336,
                    1338
                ],
                "aspect": [
                    1600,
                    1352,
                    1598,
                    1640,
                    1611,
                    1462,
                    1463,
                    1336,
                    1337,
                    1338,
                    1622,
                    1470,
                    1343
                ],
                "self.name": [
                    1339,
                    2183
                ],
                "share": [
                    1345,
                    1356,
                    1359,
                    1531,
                    1407
                ],
                "ax._aspect": [
                    1352
                ],
                "adjustable": [
                    1412,
                    1354,
                    1355,
                    1356,
                    1421,
                    1406
                ],
                "self.set_adjustable": [
                    4210,
                    1356
                ],
                "anchor": [
                    1528,
                    1537,
                    1358,
                    1359
                ],
                "self.set_anchor": [
                    1359
                ],
                "cbook._check_in_list": [
                    2890,
                    3004,
                    1406,
                    3078
                ],
                "axs": [
                    1408,
                    1411,
                    2628,
                    1415,
                    1420,
                    2638,
                    2640,
                    1459,
                    1466,
                    1469
                ],
                "ax.get_data_ratio": [
                    1413
                ],
                "_AxesBase.get_data_ratio": [
                    1414
                ],
                "ax._adjustable": [
                    1421
                ],
                "self._box_aspect": [
                    1600,
                    1618,
                    1620,
                    1627,
                    1436
                ],
                "ax.set_adjustable": [
                    1467
                ],
                "ax._box_aspect": [
                    1470
                ],
                "ax.stale": [
                    3652,
                    3383,
                    1471
                ],
                "mtransforms.Bbox.coefs": [
                    1528,
                    1530
                ],
                "ax._anchor": [
                    1537
                ],
                "txmin": [
                    1549,
                    1551
                ],
                "txmax": [
                    1549,
                    1551
                ],
                "transform": [
                    2563,
                    2564,
                    2566,
                    3912,
                    2059,
                    1549,
                    1550,
                    3887,
                    3920,
                    1685,
                    2649,
                    1690,
                    2654
                ],
                "self.get_xbound": [
                    1634,
                    3882,
                    1549,
                    1564,
                    3166
                ],
                "tymin": [
                    1552,
                    1550
                ],
                "tymax": [
                    1552,
                    1550
                ],
                "self.get_ybound": [
                    1635,
                    3883,
                    1550,
                    3452,
                    1565
                ],
                "xsize": [
                    1570,
                    1636,
                    1642,
                    1551,
                    1553,
                    1653,
                    1655,
                    1567
                ],
                "ysize": [
                    1568,
                    1570,
                    1637,
                    1642,
                    1552,
                    1553,
                    1654,
                    1656
                ],
                "xmin": [
                    1800,
                    1806,
                    1811,
                    3861,
                    1687,
                    1816,
                    3865,
                    3867,
                    1564,
                    1567,
                    1959,
                    1960,
                    3890,
                    3894,
                    3899,
                    3905,
                    3788,
                    3790,
                    3286,
                    3289,
                    3804,
                    3805,
                    1634,
                    1636
                ],
                "xmax": [
                    1800,
                    1807,
                    1811,
                    3862,
                    1687,
                    1816,
                    3865,
                    3867,
                    1564,
                    1567,
                    1959,
                    1960,
                    3890,
                    3894,
                    3899,
                    3905,
                    3788,
                    3790,
                    3290,
                    3804,
                    3805,
                    3293,
                    1634,
                    1636
                ],
                "ymin": [
                    1800,
                    1808,
                    1682,
                    3861,
                    1814,
                    1817,
                    3866,
                    3868,
                    1565,
                    1568,
                    1959,
                    1960,
                    3891,
                    3896,
                    3900,
                    3916,
                    3789,
                    3790,
                    2648,
                    3804,
                    2653,
                    3806,
                    2655,
                    3554,
                    1635,
                    1637,
                    3557
                ],
                "ymax": [
                    1800,
                    1809,
                    1682,
                    1814,
                    3862,
                    1817,
                    3866,
                    3868,
                    1565,
                    1568,
                    1959,
                    1960,
                    3891,
                    3896,
                    3900,
                    3916,
                    3789,
                    3790,
                    3804,
                    3806,
                    2658,
                    1635,
                    1637,
                    2662,
                    3558,
                    3561
                ],
                "math.log10": [
                    1568,
                    1567
                ],
                "math": [
                    1568,
                    1567
                ],
                "cbook.deprecated": [
                    2154,
                    1555
                ],
                "position": [
                    1601,
                    1639,
                    1612,
                    1619,
                    1595,
                    1596,
                    1630,
                    1628
                ],
                "self.get_position": [
                    4209,
                    1596
                ],
                "self.get_aspect": [
                    4011,
                    1598
                ],
                "fig_width": [
                    1604,
                    1605
                ],
                "fig_height": [
                    1604,
                    1605
                ],
                "get_size_inches": [
                    1604
                ],
                "self.get_figure": [
                    1604
                ],
                "fig_aspect": [
                    1639,
                    1613,
                    1605,
                    1620
                ],
                "self.get_data_ratio": [
                    1611
                ],
                "pb": [
                    1612,
                    1613,
                    1614,
                    1619,
                    1620,
                    1621,
                    1630
                ],
                "position.frozen": [
                    1619,
                    1612
                ],
                "pb1": [
                    1613,
                    1614,
                    1620,
                    1621,
                    1630
                ],
                "pb.shrunk_to_aspect": [
                    1620,
                    1613
                ],
                "pb1.anchored": [
                    1630,
                    1621,
                    1614
                ],
                "self.get_anchor": [
                    1630,
                    1621,
                    1614
                ],
                "x_trf": [
                    1632,
                    3904,
                    1634,
                    3912,
                    1648,
                    1690,
                    3903
                ],
                "y_trf": [
                    1633,
                    1635,
                    3914,
                    3915,
                    3920,
                    1649,
                    1685
                ],
                "x_trf.transform": [
                    1648,
                    1634,
                    3904
                ],
                "y_trf.transform": [
                    1649,
                    3915,
                    1635
                ],
                "position.height": [
                    1639
                ],
                "position.width": [
                    1639
                ],
                "data_ratio": [
                    1640,
                    1642,
                    1656,
                    1655
                ],
                "y_expander": [
                    1642,
                    1675,
                    1676,
                    1644,
                    1678
                ],
                "dL": [
                    1648,
                    1649,
                    1647
                ],
                "dL.intervalx": [
                    1648
                ],
                "dL.intervaly": [
                    1649
                ],
                "xr": [
                    1657,
                    1650,
                    1653
                ],
                "yr": [
                    1658,
                    1651,
                    1654
                ],
                "xmarg": [
                    1674,
                    1653
                ],
                "ymarg": [
                    1674,
                    1654
                ],
                "Ysize": [
                    1658,
                    1683,
                    1684,
                    1655
                ],
                "Xsize": [
                    1656,
                    1657,
                    1689,
                    1688
                ],
                "Xmarg": [
                    1657,
                    1676
                ],
                "Ymarg": [
                    1658,
                    1675
                ],
                "xm": [
                    1674,
                    1660
                ],
                "ym": [
                    1674,
                    1661
                ],
                "shared_x": [
                    1679,
                    1666,
                    1663
                ],
                "shared_y": [
                    1664,
                    1666,
                    1671
                ],
                "adjust_y": [
                    1672,
                    1681,
                    1679
                ],
                "adjy": [
                    1675,
                    1678,
                    1679
                ],
                "yc": [
                    1682,
                    1683,
                    1684
                ],
                "self.set_ybound": [
                    3925,
                    2588,
                    1685
                ],
                "y_trf.inverted": [
                    3920,
                    1685
                ],
                "xc": [
                    1688,
                    1689,
                    1687
                ],
                "self.set_xbound": [
                    2585,
                    1690,
                    3923
                ],
                "x_trf.inverted": [
                    3912,
                    1690
                ],
                "s": [
                    3714,
                    3715,
                    3717,
                    3719,
                    1751,
                    1752,
                    1753,
                    1754,
                    1755,
                    1756,
                    1757,
                    1759,
                    1761,
                    1766,
                    1768,
                    1771,
                    1774,
                    1778,
                    1790
                ],
                "s.lower": [
                    1756
                ],
                "self.set_axis_off": [
                    1760
                ],
                "self.set_autoscale_on": [
                    1762,
                    1770,
                    1773,
                    1776,
                    1780
                ],
                "self.set_aspect": [
                    1763,
                    1767,
                    1769,
                    1777,
                    1779
                ],
                "xlim": [
                    1784,
                    1781,
                    1783
                ],
                "self.get_xlim": [
                    3138,
                    3845,
                    3302,
                    3788,
                    3311,
                    1781,
                    1821
                ],
                "ylim": [
                    1786,
                    1782,
                    1783
                ],
                "self.get_ylim": [
                    3424,
                    3846,
                    3789,
                    3570,
                    1782,
                    3579,
                    1821
                ],
                "edge_size": [
                    1784,
                    1786,
                    1783
                ],
                "np.diff": [
                    1783
                ],
                "emit": [
                    3338,
                    1817,
                    3607,
                    1816,
                    1785,
                    1787
                ],
                "cbook.warn_deprecated": [
                    1794,
                    2671
                ],
                "limits": [
                    1800,
                    1798
                ],
                "err": [
                    2969,
                    1804,
                    2949
                ],
                "kwargs.pop": [
                    2182,
                    2185,
                    1806,
                    1807,
                    1808,
                    1809
                ],
                "xauto": [
                    1816,
                    1810
                ],
                "yauto": [
                    1817,
                    1813
                ],
                "cbook.silent_list": [
                    1833,
                    1829
                ],
                "get_xgridlines": [
                    1843
                ],
                "_axis_method_wrapper": [
                    3350,
                    3619,
                    1843,
                    1844,
                    1845,
                    3126,
                    1846,
                    3391,
                    3392,
                    3393,
                    3394,
                    3395,
                    3396,
                    3660,
                    3661,
                    3662,
                    3663,
                    3664,
                    3665,
                    3412,
                    3669,
                    3670
                ],
                "get_xticklines": [
                    1844
                ],
                "get_ygridlines": [
                    1845
                ],
                "get_yticklines": [
                    1846
                ],
                "im": [
                    1864,
                    1858,
                    1859,
                    1861
                ],
                "mpl.contour.ContourSet": [
                    1858
                ],
                "mpl.contour": [
                    1858
                ],
                "im.collections": [
                    1859
                ],
                "self.artists.append": [
                    1898
                ],
                "a._remove_method": [
                    1899
                ],
                "self.artists.remove": [
                    1899
                ],
                "a.set_clip_path": [
                    1901
                ],
                "ax._axes": [
                    1915
                ],
                "ax.stale_callback": [
                    1916
                ],
                "martist._stale_axes_callback": [
                    1916
                ],
                "self.child_axes.append": [
                    1918
                ],
                "ax._remove_method": [
                    1919
                ],
                "self.child_axes.remove": [
                    1919
                ],
                "collection.get_label": [
                    1927
                ],
                "collection": [
                    1927,
                    1929,
                    1930,
                    1931,
                    1932,
                    1934,
                    1935,
                    1941,
                    1944
                ],
                "collection.set_label": [
                    1929
                ],
                "self.collections.append": [
                    1930
                ],
                "collection._remove_method": [
                    1931
                ],
                "self.collections.remove": [
                    1931
                ],
                "collection.get_clip_path": [
                    1934
                ],
                "collection.set_clip_path": [
                    1935
                ],
                "autolim": [
                    1937
                ],
                "self.update_datalim": [
                    2067,
                    1941
                ],
                "collection.get_datalim": [
                    1941
                ],
                "image": [
                    1952,
                    1953,
                    1954,
                    1956,
                    1959,
                    2125,
                    2126,
                    2127,
                    1950,
                    1951
                ],
                "image.get_label": [
                    1951
                ],
                "image.set_label": [
                    1952
                ],
                "self.images.append": [
                    1953
                ],
                "image._remove_method": [
                    1954
                ],
                "self.images.remove": [
                    1954
                ],
                "image.get_extent": [
                    1959
                ],
                "self.axes.update_datalim": [
                    1960
                ],
                "line.get_clip_path": [
                    1967
                ],
                "line.set_clip_path": [
                    1968
                ],
                "self._update_line_limits": [
                    1970,
                    2119
                ],
                "line.get_label": [
                    1971
                ],
                "line.set_label": [
                    1972
                ],
                "self.lines.append": [
                    1973
                ],
                "line._remove_method": [
                    1974
                ],
                "self.lines.remove": [
                    1974
                ],
                "txt": [
                    1984,
                    1986,
                    1982,
                    1983
                ],
                "self.texts.append": [
                    1983
                ],
                "txt._remove_method": [
                    1984
                ],
                "self.texts.remove": [
                    1984
                ],
                "path": [
                    2021,
                    1992,
                    1993,
                    1999,
                    2014
                ],
                "line.get_path": [
                    1992
                ],
                "path.vertices.size": [
                    1993
                ],
                "path.vertices": [
                    1993
                ],
                "line_trans": [
                    2024,
                    1996,
                    1998,
                    2001,
                    2004
                ],
                "line.get_transform": [
                    1996
                ],
                "data_path": [
                    2021,
                    2023,
                    2026,
                    1999,
                    2012,
                    2014
                ],
                "line_trans.contains_branch_seperately": [
                    2024,
                    2001
                ],
                "trans_to_data": [
                    2012,
                    2004,
                    2014
                ],
                "self.transData.is_affine": [
                    2009
                ],
                "line_trans_path": [
                    2010,
                    2011
                ],
                "line._get_transformed_path": [
                    2010
                ],
                "na_path": [
                    2011,
                    2012
                ],
                "_": [
                    2624,
                    2661,
                    2649,
                    2011,
                    2654
                ],
                "line_trans_path.get_transformed_path_and_affine": [
                    2011
                ],
                "trans_to_data.transform_path_affine": [
                    2012
                ],
                "trans_to_data.transform_path": [
                    2014
                ],
                "data_path.vertices.size": [
                    2023
                ],
                "data_path.vertices": [
                    2023
                ],
                "updatex": [
                    2151,
                    2024,
                    2028,
                    2065,
                    2067
                ],
                "updatey": [
                    2151,
                    2024,
                    2029,
                    2065,
                    2068
                ],
                "self.dataLim.update_from_path": [
                    2026
                ],
                "p.get_clip_path": [
                    2037
                ],
                "p.set_clip_path": [
                    2038
                ],
                "self._update_patch_limits": [
                    2123,
                    2039
                ],
                "self.patches.append": [
                    2040
                ],
                "p._remove_method": [
                    2041
                ],
                "self.patches.remove": [
                    2041
                ],
                "patch": [
                    2054,
                    2055,
                    2057,
                    2059,
                    2060,
                    2061,
                    2065
                ],
                "patch.get_width": [
                    2055
                ],
                "patch.get_height": [
                    2055
                ],
                "vertices": [
                    2057,
                    2058,
                    2059
                ],
                "patch.get_path": [
                    2057
                ],
                "vertices.size": [
                    2058
                ],
                "xys": [
                    2147,
                    2148,
                    2150,
                    2059,
                    2063,
                    2067
                ],
                "patch.get_patch_transform": [
                    2059
                ],
                "patch.get_data_transform": [
                    2060,
                    2061
                ],
                "patch_to_data": [
                    2061,
                    2063
                ],
                "patch_to_data.transform": [
                    2063
                ],
                "contains_branch_seperately": [
                    2065
                ],
                "patch.get_transform": [
                    2065
                ],
                "tab": [
                    2074,
                    2075,
                    2076,
                    2077,
                    2078
                ],
                "self.tables.append": [
                    2075
                ],
                "tab.set_clip_path": [
                    2076
                ],
                "tab._remove_method": [
                    2077
                ],
                "self.tables.remove": [
                    2077
                ],
                "container.get_label": [
                    2084
                ],
                "container": [
                    2084,
                    2086,
                    2087,
                    2088,
                    2089
                ],
                "container.set_label": [
                    2086
                ],
                "self.containers.append": [
                    2087
                ],
                "container._remove_method": [
                    2088
                ],
                "self.containers.remove": [
                    2088
                ],
                "self.relim": [
                    2097
                ],
                "self._request_autoscale_view": [
                    2098,
                    3011,
                    2394,
                    2450
                ],
                "self.dataLim.ignore": [
                    2113
                ],
                "self.dataLim.set_points": [
                    2114
                ],
                "get_points": [
                    2114
                ],
                "visible_only": [
                    2126,
                    2122,
                    2118
                ],
                "line.get_visible": [
                    2118
                ],
                "p.get_visible": [
                    2122
                ],
                "image.get_visible": [
                    2126
                ],
                "self._update_image_limits": [
                    2127
                ],
                "np.asarray": [
                    2147
                ],
                "self.dataLim.update_from_data_xy": [
                    2150
                ],
                "self.dataLim.set": [
                    2165
                ],
                "mtransforms.Bbox.union": [
                    4201,
                    2165
                ],
                "bounds": [
                    2165
                ],
                "axis": [
                    2177,
                    2178,
                    2563,
                    2565,
                    2182,
                    3078,
                    2440,
                    3079,
                    2954,
                    2187,
                    2188,
                    2443,
                    2956,
                    2958,
                    2192,
                    2960,
                    2962,
                    3086,
                    2964,
                    2966,
                    2847,
                    2848,
                    3004,
                    3005,
                    3006,
                    2890,
                    2891,
                    2893,
                    2546,
                    2172,
                    2942
                ],
                "axis.have_units": [
                    2177
                ],
                "axis.update_units": [
                    2192,
                    2178
                ],
                "units": [
                    2185,
                    2187,
                    2188,
                    2182
                ],
                "unit_name": [
                    2185,
                    2182
                ],
                "axis.units": [
                    2187,
                    2182
                ],
                "polar_units": [
                    2184,
                    2185
                ],
                "axis.set_units": [
                    2188
                ],
                "_process_single_axis": [
                    2195,
                    2196
                ],
                "xdata": [
                    2195
                ],
                "ydata": [
                    2196
                ],
                "self.patch.contains": [
                    2204,
                    4055
                ],
                "mouseevent": [
                    4052,
                    2204,
                    4055
                ],
                "b": [
                    2274,
                    2243,
                    2889,
                    4202,
                    2892,
                    2253,
                    2798,
                    2894,
                    3756,
                    2838,
                    2232,
                    2233,
                    3772
                ],
                "use_sticky_edges.setter": [
                    2272
                ],
                "use_sticky_edges": [
                    2272
                ],
                "m": [
                    2945,
                    2946,
                    2316,
                    2318,
                    2294,
                    2296
                ],
                "margins": [
                    2373,
                    2376,
                    2377,
                    2378,
                    2379,
                    2380
                ],
                "self.set_xmargin": [
                    2390
                ],
                "self.set_ymargin": [
                    2392
                ],
                "z": [
                    2406
                ],
                "enable": [
                    2441,
                    2434,
                    2444
                ],
                "x_stickies": [
                    2585,
                    2514,
                    2502,
                    2494
                ],
                "y_stickies": [
                    2516,
                    2508,
                    2588,
                    2494
                ],
                "np.array": [
                    4014,
                    2494
                ],
                "self.use_sticky_edges": [
                    2495
                ],
                "np.sort": [
                    2508,
                    2502
                ],
                "np.concatenate": [
                    2508,
                    2502
                ],
                "artist.sticky_edges.x": [
                    2503
                ],
                "artist.sticky_edges": [
                    2509,
                    2503
                ],
                "artist": [
                    2503,
                    2506,
                    2509,
                    2512,
                    2775,
                    4088,
                    2777,
                    2778,
                    4089
                ],
                "ax.get_children": [
                    2512,
                    2506
                ],
                "artist.sticky_edges.y": [
                    2509
                ],
                "lower": [
                    3168,
                    3458,
                    3172,
                    2513,
                    2515,
                    3449,
                    3450,
                    3163,
                    3164,
                    3453,
                    3454,
                    3167
                ],
                "self.get_xscale": [
                    2513,
                    3308
                ],
                "self.get_yscale": [
                    3576,
                    2515
                ],
                "scale": [
                    3712,
                    2521,
                    3713,
                    3716
                ],
                "autoscaleon": [
                    2521
                ],
                "shared": [
                    2524,
                    2525
                ],
                "shared_axes.get_siblings": [
                    2524
                ],
                "shared_axes": [
                    2524
                ],
                "dl": [
                    2531,
                    2534,
                    2538,
                    2539,
                    2540,
                    2542,
                    2525,
                    2527
                ],
                "ax.dataLim": [
                    2525
                ],
                "finite_dl": [
                    2528,
                    2533,
                    2536,
                    2538,
                    2527
                ],
                "d": [
                    2531,
                    2532,
                    2533,
                    2534,
                    2535,
                    2536,
                    2604,
                    2608,
                    2609,
                    2527
                ],
                "np.isfinite": [
                    2532,
                    2535,
                    2568,
                    3212,
                    4025,
                    2527
                ],
                "x_finite": [
                    2531,
                    2539
                ],
                "d.intervalx": [
                    2532
                ],
                "y_finite": [
                    2540,
                    2534
                ],
                "d.intervaly": [
                    2535
                ],
                "dl.extend": [
                    2539,
                    2540
                ],
                "bb": [
                    2562,
                    4164,
                    4134,
                    4167,
                    4200,
                    4202,
                    2542,
                    2543,
                    4178,
                    2643,
                    2645,
                    2646,
                    2647,
                    4155
                ],
                "mtransforms.BboxBase.union": [
                    2542
                ],
                "interval": [
                    2543
                ],
                "axis.get_major_locator": [
                    2546
                ],
                "locator.nonsingular": [
                    2547
                ],
                "i0": [
                    2554,
                    2555
                ],
                "stickies.searchsorted": [
                    2554,
                    2557
                ],
                "stickies": [
                    2554,
                    2555,
                    2557,
                    2558
                ],
                "tol": [
                    2554,
                    2557
                ],
                "x0bound": [
                    2555,
                    2573,
                    2574
                ],
                "i1": [
                    2557,
                    2558
                ],
                "x1bound": [
                    2576,
                    2558,
                    2575
                ],
                "minpos": [
                    2562,
                    2565
                ],
                "axis.get_transform": [
                    2563
                ],
                "inverse_trans": [
                    2570,
                    2564
                ],
                "transform.inverted": [
                    2564
                ],
                "axis._scale.limit_range_for_scale": [
                    2565
                ],
                "axis._scale": [
                    2565
                ],
                "x0t": [
                    2570,
                    2566,
                    2567
                ],
                "x1t": [
                    2570,
                    2566,
                    2567
                ],
                "transform.transform": [
                    2566
                ],
                "delta": [
                    2568,
                    2569,
                    2570,
                    2567
                ],
                "margin": [
                    2567
                ],
                "inverse_trans.transform": [
                    2570
                ],
                "locator.view_limits": [
                    2579
                ],
                "set_bound": [
                    2580
                ],
                "handle_single_axis": [
                    2586,
                    2583
                ],
                "axis_list": [
                    2605,
                    2607
                ],
                "self._get_axis_list": [
                    2953,
                    4041,
                    2605,
                    4081,
                    2710,
                    2775,
                    2847
                ],
                "items": [
                    2952,
                    2606
                ],
                "k.endswith": [
                    2607
                ],
                "_log.debug": [
                    2618
                ],
                "titles": [
                    2658,
                    2659,
                    2621,
                    2623
                ],
                "title": [
                    2624,
                    2656,
                    2626,
                    2658,
                    2659,
                    2661,
                    2662,
                    4169,
                    4170,
                    4171,
                    2655,
                    2648,
                    2650,
                    2653,
                    2623
                ],
                "title.get_position": [
                    2624,
                    2658,
                    2661
                ],
                "title.set_position": [
                    2656,
                    2626,
                    2650,
                    2662
                ],
                "ax.get_axes_locator": [
                    2632
                ],
                "renderer": [
                    2691,
                    2707,
                    2729,
                    4141,
                    2740,
                    4150,
                    2744,
                    2745,
                    4153,
                    2747,
                    2749,
                    4159,
                    4162,
                    4165,
                    4166,
                    2634,
                    4171,
                    2643,
                    2645,
                    2648,
                    2653,
                    2655,
                    4196,
                    2670,
                    2676,
                    2677,
                    2683
                ],
                "ax.apply_aspect": [
                    2635,
                    2637
                ],
                "top": [
                    3586,
                    3591,
                    3592,
                    3597,
                    3598,
                    3599,
                    3601,
                    3603,
                    3617,
                    2639,
                    2647,
                    2648,
                    2649,
                    2653,
                    2655,
                    3424,
                    3425,
                    3426,
                    3552,
                    3428,
                    3553,
                    3559,
                    3561,
                    3563,
                    3565,
                    3567,
                    3573,
                    3574,
                    3576
                ],
                "ax.xaxis.get_ticks_position": [
                    2641
                ],
                "ax.xaxis": [
                    2641,
                    2642,
                    2643,
                    3381
                ],
                "ax.xaxis.get_label_position": [
                    2642
                ],
                "ax.xaxis.get_tightbbox": [
                    2643
                ],
                "ax.get_window_extent": [
                    2645
                ],
                "bb.ymax": [
                    2647
                ],
                "title.get_window_extent": [
                    2648,
                    4171,
                    2653,
                    2655
                ],
                "self.transAxes.inverted": [
                    2649,
                    2654
                ],
                "self.figure._cachedRenderer": [
                    2759,
                    2762,
                    2771,
                    2676,
                    2779,
                    2782
                ],
                "self.get_visible": [
                    4136,
                    2679
                ],
                "renderer.open_group": [
                    2683
                ],
                "self.get_gid": [
                    2683
                ],
                "artists": [
                    2696,
                    2697,
                    2705,
                    2711,
                    2714,
                    2715,
                    2716,
                    2719,
                    2721,
                    2728,
                    2730,
                    2732,
                    2747,
                    4073,
                    4078,
                    4082,
                    4084,
                    4085,
                    4086,
                    4088
                ],
                "self.get_children": [
                    2696,
                    4073
                ],
                "artists.remove": [
                    2697,
                    4078,
                    2705,
                    4082,
                    4084,
                    4085,
                    4086,
                    2711,
                    2714,
                    2715,
                    2716
                ],
                "self.axison": [
                    3109,
                    4075,
                    2703,
                    4080,
                    4146,
                    2739,
                    2709,
                    3100
                ],
                "self.spines.values": [
                    2704,
                    4077,
                    4040
                ],
                "self._update_title_position": [
                    2707,
                    4165
                ],
                "inframe": [
                    2713,
                    2709
                ],
                "_axis": [
                    4081,
                    4082,
                    2710,
                    2711
                ],
                "self.figure.canvas.is_saving": [
                    2718
                ],
                "self.figure.canvas": [
                    2718
                ],
                "a.get_animated": [
                    2720
                ],
                "rasterization_zorder": [
                    2725,
                    2727,
                    2728,
                    2731,
                    2733
                ],
                "zorder": [
                    2848,
                    2728,
                    2840,
                    2842,
                    2844
                ],
                "renderer.start_rasterizing": [
                    2729
                ],
                "artists_rasterized": [
                    2743,
                    2730,
                    2742,
                    2735
                ],
                "a.zorder": [
                    2731,
                    2733
                ],
                "self.patch.draw": [
                    2740
                ],
                "a.draw": [
                    2744,
                    2762
                ],
                "renderer.stop_rasterizing": [
                    2745
                ],
                "mimage._draw_list_compositing_images": [
                    2747
                ],
                "mimage": [
                    2747
                ],
                "renderer.close_group": [
                    2749
                ],
                "martist.allow_rasterization": [
                    2665
                ],
                "cbook._delete_parameter": [
                    2666
                ],
                "ExitStack": [
                    2774
                ],
                "stack": [
                    2777,
                    2774
                ],
                "stack.push": [
                    2777
                ],
                "artist.set_visible": [
                    2777,
                    2778
                ],
                "artist.get_visible": [
                    2777,
                    4089
                ],
                "self.draw": [
                    2779
                ],
                "self._axisbelow": [
                    2813,
                    2838
                ],
                "axisbelow": [
                    2841,
                    2843,
                    2838,
                    2839
                ],
                "validate_axisbelow": [
                    2838
                ],
                "axis.set_zorder": [
                    2848
                ],
                "self.xaxis.grid": [
                    2892
                ],
                "self.yaxis.grid": [
                    2894
                ],
                "docstring.dedent_interpd": [
                    2851
                ],
                "docstring": [
                    2851
                ],
                "style": [
                    2941,
                    2951
                ],
                "style.lower": [
                    2941
                ],
                "axis.lower": [
                    2942
                ],
                "scilimits": [
                    2959,
                    2945,
                    2960,
                    2943
                ],
                "n": [
                    2945,
                    2946
                ],
                "STYLES": [
                    2950,
                    2951
                ],
                "is_sci_style": [
                    2957,
                    2958,
                    2951
                ],
                "cbook._check_getitem": [
                    2954,
                    2951
                ],
                "axis_map": [
                    2952,
                    2954
                ],
                "self._get_axis_map": [
                    2952
                ],
                "axises": [
                    2954,
                    2956
                ],
                "axis.major.formatter.set_scientific": [
                    2958
                ],
                "axis.major.formatter": [
                    2958,
                    2960,
                    2962,
                    2964,
                    2966
                ],
                "axis.major": [
                    2958,
                    2960,
                    2962,
                    2964,
                    2966
                ],
                "axis.major.formatter.set_powerlimits": [
                    2960
                ],
                "useOffset": [
                    2961,
                    2962
                ],
                "axis.major.formatter.set_useOffset": [
                    2962
                ],
                "useLocale": [
                    2963,
                    2964
                ],
                "axis.major.formatter.set_useLocale": [
                    2964
                ],
                "useMathText": [
                    2965,
                    2966
                ],
                "axis.major.formatter.set_useMathText": [
                    2966
                ],
                "update_x": [
                    3012,
                    3005,
                    3007
                ],
                "update_y": [
                    3009,
                    3012,
                    3006
                ],
                "set_params": [
                    3008,
                    3010
                ],
                "self.xaxis.get_major_locator": [
                    3008,
                    3329,
                    3384,
                    3377
                ],
                "self.yaxis.get_major_locator": [
                    3646,
                    3010,
                    3653,
                    3598
                ],
                "xkw": [
                    3080,
                    3081,
                    3082,
                    3083,
                    3084,
                    3085
                ],
                "xkw.pop": [
                    3081,
                    3082,
                    3083,
                    3084
                ],
                "self.xaxis.set_tick_params": [
                    3085
                ],
                "ykw": [
                    3087,
                    3088,
                    3089,
                    3090,
                    3091,
                    3092
                ],
                "ykw.pop": [
                    3088,
                    3089,
                    3090,
                    3091
                ],
                "self.yaxis.set_tick_params": [
                    3092
                ],
                "self.xaxis.set_inverted": [
                    3124
                ],
                "self.xaxis.get_inverted": [
                    3124
                ],
                "xaxis_inverted": [
                    3126
                ],
                "left": [
                    3328,
                    3329,
                    3330,
                    3332,
                    3334,
                    3348,
                    3138,
                    3139,
                    3140,
                    3142,
                    3284,
                    3285,
                    3287,
                    3289,
                    3295,
                    3296,
                    3299,
                    3303,
                    3304,
                    3308,
                    3312,
                    3317,
                    3324,
                    3326
                ],
                "right": [
                    3328,
                    3329,
                    3330,
                    3332,
                    3334,
                    3348,
                    3138,
                    3139,
                    3140,
                    3142,
                    3284,
                    3285,
                    3291,
                    3293,
                    3295,
                    3297,
                    3299,
                    3305,
                    3306,
                    3308,
                    3318,
                    3323,
                    3324
                ],
                "upper": [
                    3456,
                    3169,
                    3170,
                    3458,
                    3172,
                    3449,
                    3450,
                    3163,
                    3164,
                    3455
                ],
                "np.iterable": [
                    3552,
                    3449,
                    3163,
                    3284
                ],
                "old_lower": [
                    3168,
                    3454,
                    3452,
                    3166
                ],
                "old_upper": [
                    3456,
                    3170,
                    3452,
                    3166
                ],
                "self.xaxis_inverted": [
                    3173
                ],
                "self.viewLim.intervalx": [
                    3197,
                    3343
                ],
                "self.viewLim": [
                    3943,
                    3343,
                    3483,
                    3612,
                    3197
                ],
                "limit": [
                    3209,
                    3210
                ],
                "converted_limit": [
                    3210,
                    3211,
                    3212,
                    3214
                ],
                "convert": [
                    3210
                ],
                "Real": [
                    3211
                ],
                "self._process_unit_info": [
                    3563,
                    3295
                ],
                "self._validate_converted_limits": [
                    3296,
                    3297,
                    3564,
                    3565
                ],
                "self.convert_xunits": [
                    3296,
                    3297
                ],
                "old_left": [
                    3304,
                    3317,
                    3302,
                    3311
                ],
                "old_right": [
                    3306,
                    3323,
                    3302,
                    3311
                ],
                "reverse": [
                    3328,
                    3601,
                    3332,
                    3597
                ],
                "nonsingular": [
                    3329,
                    3653,
                    3598,
                    3377,
                    3384,
                    3646
                ],
                "self.xaxis.limit_range_for_scale": [
                    3330
                ],
                "self._viewLim.intervalx": [
                    3334
                ],
                "auto": [
                    3335,
                    3336,
                    3344,
                    3604,
                    3605,
                    3613
                ],
                "self.callbacks.process": [
                    3608,
                    3339
                ],
                "other.set_xlim": [
                    3343
                ],
                "other.figure": [
                    3345,
                    3346,
                    3614,
                    3615
                ],
                "other.figure.canvas.draw_idle": [
                    3346,
                    3615
                ],
                "other.figure.canvas": [
                    3346,
                    3615
                ],
                "get_xscale": [
                    3350
                ],
                "old_default_lims": [
                    3377,
                    3386,
                    3646,
                    3655
                ],
                "np.inf": [
                    4198,
                    3654,
                    4199,
                    3378,
                    3385,
                    3647
                ],
                "g": [
                    3648,
                    3649,
                    3379,
                    3380
                ],
                "self.get_shared_x_axes": [
                    3379
                ],
                "g.get_siblings": [
                    3649,
                    3380
                ],
                "ax.xaxis._set_scale": [
                    3381
                ],
                "value": [
                    3650,
                    3381
                ],
                "ax._update_transScale": [
                    3651,
                    3382
                ],
                "new_default_lims": [
                    3384,
                    3386,
                    3653,
                    3655
                ],
                "get_xticks": [
                    3391
                ],
                "set_xticks": [
                    3392
                ],
                "get_xmajorticklabels": [
                    3393
                ],
                "get_xminorticklabels": [
                    3394
                ],
                "get_xticklabels": [
                    3395
                ],
                "set_xticklabels": [
                    3396
                ],
                "self.yaxis.set_inverted": [
                    3410
                ],
                "self.yaxis.get_inverted": [
                    3410
                ],
                "yaxis_inverted": [
                    3412
                ],
                "bottom": [
                    3585,
                    3592,
                    3594,
                    3597,
                    3598,
                    3599,
                    3601,
                    3603,
                    3617,
                    3424,
                    3425,
                    3426,
                    3552,
                    3428,
                    3553,
                    3555,
                    3557,
                    3563,
                    3564,
                    3567,
                    3571,
                    3572,
                    3576,
                    3580
                ],
                "self.yaxis_inverted": [
                    3459
                ],
                "self.viewLim.intervaly": [
                    3483,
                    3612
                ],
                "self.convert_yunits": [
                    3564,
                    3565
                ],
                "old_bottom": [
                    3585,
                    3570,
                    3579,
                    3572
                ],
                "old_top": [
                    3570,
                    3579,
                    3574,
                    3591
                ],
                "self.yaxis.limit_range_for_scale": [
                    3599
                ],
                "self._viewLim.intervaly": [
                    3603
                ],
                "other.set_ylim": [
                    3612
                ],
                "get_yscale": [
                    3619
                ],
                "self.get_shared_y_axes": [
                    3648
                ],
                "ax.yaxis._set_scale": [
                    3650
                ],
                "ax.yaxis": [
                    3650
                ],
                "get_yticks": [
                    3660
                ],
                "set_yticks": [
                    3661
                ],
                "get_ymajorticklabels": [
                    3662
                ],
                "get_yminorticklabels": [
                    3663
                ],
                "get_yticklabels": [
                    3664
                ],
                "set_yticklabels": [
                    3665
                ],
                "xaxis_date": [
                    3669
                ],
                "yaxis_date": [
                    3670
                ],
                "format_data_short": [
                    3680,
                    3690
                ],
                "self.xaxis.get_major_formatter": [
                    3680
                ],
                "self.yaxis.get_major_formatter": [
                    3690
                ],
                "xs": [
                    3697,
                    3702,
                    3695
                ],
                "self.format_xdata": [
                    3697
                ],
                "ys": [
                    3699,
                    3701,
                    3702
                ],
                "self.format_ydata": [
                    3701
                ],
                "ax.get_scale": [
                    3712
                ],
                "ax._scale": [
                    3714,
                    3717
                ],
                "ax.set_minor_locator": [
                    3721,
                    3715,
                    3718
                ],
                "mticker.LogLocator": [
                    3715
                ],
                "s.base": [
                    3715
                ],
                "s.subs": [
                    3715,
                    3719
                ],
                "mticker.SymmetricalLogLocator": [
                    3719
                ],
                "s._transform": [
                    3719
                ],
                "mticker.NullLocator": [
                    3725,
                    3726
                ],
                "self._navigate": [
                    3746,
                    3756
                ],
                "self._navigate_mode": [
                    3762,
                    3772
                ],
                "view": [
                    3804
                ],
                "bbox": [
                    3872,
                    3874,
                    3844,
                    4196,
                    4197,
                    4198,
                    3848,
                    4199,
                    4200,
                    3885
                ],
                "Xmin": [
                    3861,
                    3845
                ],
                "Xmax": [
                    3845,
                    3862
                ],
                "Ymin": [
                    3861,
                    3846
                ],
                "Ymax": [
                    3846,
                    3862
                ],
                "xp": [
                    3848,
                    3869
                ],
                "yp": [
                    3848,
                    3870
                ],
                "scl": [
                    3872,
                    3873,
                    3848,
                    3850,
                    3851,
                    3853,
                    3857,
                    3869,
                    3870
                ],
                "direction": [
                    3856,
                    3898,
                    3902,
                    3854
                ],
                "tranD2C": [
                    3860,
                    3861,
                    3862
                ],
                "self.transData.transform": [
                    3860
                ],
                "xwidth": [
                    3872,
                    3865,
                    3873
                ],
                "ywidth": [
                    3872,
                    3873,
                    3866
                ],
                "xcen": [
                    3867,
                    3869
                ],
                "ycen": [
                    3868,
                    3870
                ],
                "xzc": [
                    3872,
                    3873,
                    3869
                ],
                "yzc": [
                    3872,
                    3873,
                    3870
                ],
                "xmin0": [
                    3905,
                    3882,
                    3890,
                    3894
                ],
                "xmax0": [
                    3905,
                    3882,
                    3890,
                    3894
                ],
                "ymin0": [
                    3896,
                    3891,
                    3883,
                    3916
                ],
                "ymax0": [
                    3896,
                    3891,
                    3883,
                    3916
                ],
                "startx": [
                    3888,
                    3890,
                    3885,
                    3887
                ],
                "starty": [
                    3888,
                    3891,
                    3885,
                    3887
                ],
                "stopx": [
                    3888,
                    3890,
                    3885,
                    3887
                ],
                "stopy": [
                    3888,
                    3891,
                    3885,
                    3887
                ],
                "self.transData.inverted": [
                    3945,
                    3887
                ],
                "np.clip": [
                    3890,
                    3891
                ],
                "twinx": [
                    3922,
                    3893
                ],
                "mode": [
                    3922,
                    3924,
                    3893,
                    3895
                ],
                "twiny": [
                    3924,
                    3895
                ],
                "new_xbound": [
                    3912,
                    3923,
                    3899
                ],
                "new_ybound": [
                    3920,
                    3900,
                    3925
                ],
                "sxmin0": [
                    3904,
                    3906,
                    3909
                ],
                "sxmax0": [
                    3904,
                    3906,
                    3910
                ],
                "sxmin": [
                    3904,
                    3906,
                    3909
                ],
                "sxmax": [
                    3904,
                    3906,
                    3910
                ],
                "factor": [
                    3906,
                    3909,
                    3910,
                    3917,
                    3918,
                    3919
                ],
                "sxmin1": [
                    3912,
                    3909
                ],
                "sxmax1": [
                    3912,
                    3910
                ],
                "symin0": [
                    3915,
                    3917,
                    3918
                ],
                "symax0": [
                    3915,
                    3917,
                    3919
                ],
                "symin": [
                    3915,
                    3917,
                    3918
                ],
                "symax": [
                    3915,
                    3917,
                    3919
                ],
                "symin1": [
                    3920,
                    3918
                ],
                "symax1": [
                    3920,
                    3919
                ],
                "self._pan_start": [
                    3958,
                    3998,
                    3942
                ],
                "types.SimpleNamespace": [
                    3942
                ],
                "types": [
                    3942
                ],
                "self.viewLim.frozen": [
                    3943
                ],
                "self.transData.frozen": [
                    3944
                ],
                "frozen": [
                    3945
                ],
                "self.bbox.frozen": [
                    3946
                ],
                "dx": [
                    3979,
                    3980,
                    3982,
                    3986,
                    3988,
                    3989,
                    3990,
                    3992,
                    3993,
                    3995,
                    3996,
                    3999,
                    4001,
                    4004,
                    4005,
                    4008,
                    4010,
                    4012,
                    4013
                ],
                "dy": [
                    3979,
                    3980,
                    3982,
                    3984,
                    3988,
                    3990,
                    3991,
                    3992,
                    3993,
                    3995,
                    3996,
                    4000,
                    4001,
                    4004,
                    4005,
                    4009,
                    4010,
                    4012,
                    4013
                ],
                "p.x": [
                    4014,
                    3999
                ],
                "p.y": [
                    4000,
                    4014
                ],
                "button": [
                    4003,
                    4006
                ],
                "format_deltas": [
                    4010,
                    4004
                ],
                "result": [
                    4017,
                    4026,
                    4025,
                    4005
                ],
                "transformed": [
                    4017,
                    4005
                ],
                "p.bbox.translated": [
                    4005
                ],
                "p.bbox": [
                    4005
                ],
                "p.trans_inverse": [
                    4018,
                    4005
                ],
                "self.bbox.width": [
                    4008
                ],
                "self.bbox.height": [
                    4009
                ],
                "alpha": [
                    4016,
                    4013
                ],
                "np.power": [
                    4013
                ],
                "start": [
                    4016,
                    4014
                ],
                "oldpoints": [
                    4016,
                    4015
                ],
                "p.lim.transformed": [
                    4015
                ],
                "p.lim": [
                    4015
                ],
                "p.trans": [
                    4025,
                    4015
                ],
                "newpoints": [
                    4016,
                    4017
                ],
                "valid": [
                    4025,
                    4028
                ],
                "result.transformed": [
                    4025
                ],
                "points": [
                    4026,
                    4028,
                    4029,
                    4030
                ],
                "astype": [
                    4026
                ],
                "result.get_points": [
                    4026
                ],
                "inside": [
                    4052,
                    4053,
                    4054
                ],
                "info": [
                    4052,
                    4054
                ],
                "self._default_contains": [
                    4052
                ],
                "self.patch.contains_point": [
                    4062
                ],
                "point": [
                    4062
                ],
                "artist.get_in_layout": [
                    4089
                ],
                "call_axes_locator": [
                    4140
                ],
                "bb_xaxis": [
                    4153,
                    4154,
                    4155,
                    4149
                ],
                "self.xaxis.get_tightbbox": [
                    4153,
                    4149
                ],
                "for_layout_only": [
                    4172,
                    4150,
                    4159
                ],
                "bb.append": [
                    4164,
                    4167,
                    4200,
                    4178,
                    4155
                ],
                "bb_yaxis": [
                    4162,
                    4163,
                    4164,
                    4158
                ],
                "self.yaxis.get_tightbbox": [
                    4162,
                    4158
                ],
                "axbbox": [
                    4192,
                    4191,
                    4166,
                    4167
                ],
                "self.get_window_extent": [
                    4166
                ],
                "title.get_visible": [
                    4170
                ],
                "bt": [
                    4171,
                    4172,
                    4176,
                    4177,
                    4178
                ],
                "bt.width": [
                    4172
                ],
                "bt.x0": [
                    4176,
                    4177
                ],
                "bt.x1": [
                    4176,
                    4177
                ],
                "bbox_artists": [
                    4184,
                    4180,
                    4181,
                    4182
                ],
                "bbox_extra_artists": [
                    4180
                ],
                "self.get_default_bbox_extra_artists": [
                    4182
                ],
                "clip_extent": [
                    4192,
                    4188,
                    4189,
                    4190,
                    4191
                ],
                "a._get_clipping_extent_bbox": [
                    4188
                ],
                "mtransforms.Bbox.intersection": [
                    4190
                ],
                "np.all": [
                    4192
                ],
                "clip_extent.extents": [
                    4192
                ],
                "axbbox.extents": [
                    4192
                ],
                "a.get_tightbbox": [
                    4196
                ],
                "bbox.width": [
                    4198
                ],
                "bbox.height": [
                    4199
                ],
                "b.width": [
                    4202
                ],
                "b.height": [
                    4202
                ],
                "ax2": [
                    4235,
                    4236,
                    4237,
                    4238,
                    4239,
                    4241,
                    4242,
                    4243,
                    4265,
                    4266,
                    4267,
                    4268,
                    4270,
                    4271,
                    4272,
                    4209,
                    4211,
                    4212,
                    4213
                ],
                "self.figure.add_axes": [
                    4209
                ],
                "ax2.set_adjustable": [
                    4211
                ],
                "self._twinned_axes.join": [
                    4212
                ],
                "self._make_twin_axes": [
                    4265,
                    4235
                ],
                "ax2.yaxis.tick_right": [
                    4236
                ],
                "ax2.yaxis": [
                    4270,
                    4236,
                    4237,
                    4238
                ],
                "ax2.yaxis.set_label_position": [
                    4237
                ],
                "ax2.yaxis.set_offset_position": [
                    4238
                ],
                "ax2.set_autoscalex_on": [
                    4239
                ],
                "self.get_autoscalex_on": [
                    4239
                ],
                "self.yaxis.tick_left": [
                    4240
                ],
                "ax2.xaxis.set_visible": [
                    4241
                ],
                "ax2.xaxis": [
                    4241,
                    4266,
                    4267
                ],
                "ax2.patch.set_visible": [
                    4242,
                    4271
                ],
                "ax2.patch": [
                    4242,
                    4271
                ],
                "ax2.xaxis.tick_top": [
                    4266
                ],
                "ax2.xaxis.set_label_position": [
                    4267
                ],
                "ax2.set_autoscaley_on": [
                    4268
                ],
                "self.get_autoscaley_on": [
                    4268
                ],
                "self.xaxis.tick_bottom": [
                    4269
                ],
                "ax2.yaxis.set_visible": [
                    4270
                ],
                "cbook._define_aliases": [
                    419
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_8/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_unautoscaley",
                "test_function_code": "@pytest.mark.parametrize('auto', (True, False, None))\ndef test_unautoscaley(auto):\n    fig, ax = plt.subplots()\n    x = np.arange(100)\n    y = np.linspace(-.1, .1, 100)\n    ax.scatter(x, y)\n\n    post_auto = ax.get_autoscaley_on() if auto is None else auto\n\n    ax.set_ylim((-.5, .5), auto=auto)\n    assert post_auto == ax.get_autoscaley_on()\n    fig.canvas.draw()\n    assert_array_equal(ax.get_ylim(), (-.5, .5))",
                "test_error": "AssertionError: \nArrays are not equal\n\nMismatched elements: 2 / 2 (100%)\nMax absolute difference: 0.35\nMax relative difference: 0.7\n x: array([-0.15,  0.15])\n y: array([-0.5,  0.5])",
                "full_test_error": "auto = True\n\n    @pytest.mark.parametrize('auto', (True, False, None))\n    def test_unautoscaley(auto):\n        fig, ax = plt.subplots()\n        x = np.arange(100)\n        y = np.linspace(-.1, .1, 100)\n        ax.scatter(x, y)\n    \n        post_auto = ax.get_autoscaley_on() if auto is None else auto\n    \n        ax.set_ylim((-.5, .5), auto=auto)\n        assert post_auto == ax.get_autoscaley_on()\n        fig.canvas.draw()\n>       assert_array_equal(ax.get_ylim(), (-.5, .5))\n\nlib/matplotlib/tests/test_axes.py:6228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<built-in function eq>, (-0.15000000000000002, 0.15000000000000002), (-0.5, 0.5))\nkwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not equal\nE           \nE           Mismatched elements: 2 / 2 (100%)\nE           Max absolute difference: 0.35\nE           Max relative difference: 0.7\nE            x: array([-0.15,  0.15])\nE            y: array([-0.5,  0.5])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('auto', (True, False, None))"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_8/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_unautoscaley",
                "test_function_code": "@pytest.mark.parametrize('auto', (True, False, None))\ndef test_unautoscaley(auto):\n    fig, ax = plt.subplots()\n    x = np.arange(100)\n    y = np.linspace(-.1, .1, 100)\n    ax.scatter(x, y)\n\n    post_auto = ax.get_autoscaley_on() if auto is None else auto\n\n    ax.set_ylim((-.5, .5), auto=auto)\n    assert post_auto == ax.get_autoscaley_on()\n    fig.canvas.draw()\n    assert_array_equal(ax.get_ylim(), (-.5, .5))",
                "test_error": "AssertionError: \nArrays are not equal\n\nMismatched elements: 2 / 2 (100%)\nMax absolute difference: 0.35\nMax relative difference: 0.7\n x: array([-0.15,  0.15])\n y: array([-0.5,  0.5])",
                "full_test_error": "auto = None\n\n    @pytest.mark.parametrize('auto', (True, False, None))\n    def test_unautoscaley(auto):\n        fig, ax = plt.subplots()\n        x = np.arange(100)\n        y = np.linspace(-.1, .1, 100)\n        ax.scatter(x, y)\n    \n        post_auto = ax.get_autoscaley_on() if auto is None else auto\n    \n        ax.set_ylim((-.5, .5), auto=auto)\n        assert post_auto == ax.get_autoscaley_on()\n        fig.canvas.draw()\n>       assert_array_equal(ax.get_ylim(), (-.5, .5))\n\nlib/matplotlib/tests/test_axes.py:6228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<built-in function eq>, (-0.15000000000000002, 0.15000000000000002), (-0.5, 0.5))\nkwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not equal\nE           \nE           Mismatched elements: 2 / 2 (100%)\nE           Max absolute difference: 0.35\nE           Max relative difference: 0.7\nE            x: array([-0.15,  0.15])\nE            y: array([-0.5,  0.5])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('auto', (True, False, None))"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_8/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_unautoscalex",
                "test_function_code": "@pytest.mark.parametrize('auto', (True, False, None))\ndef test_unautoscalex(auto):\n    fig, ax = plt.subplots()\n    x = np.arange(100)\n    y = np.linspace(-.1, .1, 100)\n    ax.scatter(y, x)\n\n    post_auto = ax.get_autoscalex_on() if auto is None else auto\n\n    ax.set_xlim((-.5, .5), auto=auto)\n    assert post_auto == ax.get_autoscalex_on()\n    fig.canvas.draw()\n    assert_array_equal(ax.get_xlim(), (-.5, .5))",
                "test_error": "AssertionError: \nArrays are not equal\n\nMismatched elements: 2 / 2 (100%)\nMax absolute difference: 0.35\nMax relative difference: 0.7\n x: array([-0.15,  0.15])\n y: array([-0.5,  0.5])",
                "full_test_error": "auto = True\n\n    @pytest.mark.parametrize('auto', (True, False, None))\n    def test_unautoscalex(auto):\n        fig, ax = plt.subplots()\n        x = np.arange(100)\n        y = np.linspace(-.1, .1, 100)\n        ax.scatter(y, x)\n    \n        post_auto = ax.get_autoscalex_on() if auto is None else auto\n    \n        ax.set_xlim((-.5, .5), auto=auto)\n        assert post_auto == ax.get_autoscalex_on()\n        fig.canvas.draw()\n>       assert_array_equal(ax.get_xlim(), (-.5, .5))\n\nlib/matplotlib/tests/test_axes.py:6243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<built-in function eq>, (-0.15000000000000002, 0.15000000000000002), (-0.5, 0.5))\nkwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not equal\nE           \nE           Mismatched elements: 2 / 2 (100%)\nE           Max absolute difference: 0.35\nE           Max relative difference: 0.7\nE            x: array([-0.15,  0.15])\nE            y: array([-0.5,  0.5])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('auto', (True, False, None))"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_8/lib/matplotlib/tests/test_axes.py",
                "test_function": "test_unautoscalex",
                "test_function_code": "@pytest.mark.parametrize('auto', (True, False, None))\ndef test_unautoscalex(auto):\n    fig, ax = plt.subplots()\n    x = np.arange(100)\n    y = np.linspace(-.1, .1, 100)\n    ax.scatter(y, x)\n\n    post_auto = ax.get_autoscalex_on() if auto is None else auto\n\n    ax.set_xlim((-.5, .5), auto=auto)\n    assert post_auto == ax.get_autoscalex_on()\n    fig.canvas.draw()\n    assert_array_equal(ax.get_xlim(), (-.5, .5))",
                "test_error": "AssertionError: \nArrays are not equal\n\nMismatched elements: 2 / 2 (100%)\nMax absolute difference: 0.35\nMax relative difference: 0.7\n x: array([-0.15,  0.15])\n y: array([-0.5,  0.5])",
                "full_test_error": "auto = None\n\n    @pytest.mark.parametrize('auto', (True, False, None))\n    def test_unautoscalex(auto):\n        fig, ax = plt.subplots()\n        x = np.arange(100)\n        y = np.linspace(-.1, .1, 100)\n        ax.scatter(y, x)\n    \n        post_auto = ax.get_autoscalex_on() if auto is None else auto\n    \n        ax.set_xlim((-.5, .5), auto=auto)\n        assert post_auto == ax.get_autoscalex_on()\n        fig.canvas.draw()\n>       assert_array_equal(ax.get_xlim(), (-.5, .5))\n\nlib/matplotlib/tests/test_axes.py:6243: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<built-in function eq>, (-0.15000000000000002, 0.15000000000000002), (-0.5, 0.5))\nkwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not equal\nE           \nE           Mismatched elements: 2 / 2 (100%)\nE           Max absolute difference: 0.35\nE           Max relative difference: 0.7\nE            x: array([-0.15,  0.15])\nE            y: array([-0.5,  0.5])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('auto', (True, False, None))"
                ]
            }
        ]
    }
}