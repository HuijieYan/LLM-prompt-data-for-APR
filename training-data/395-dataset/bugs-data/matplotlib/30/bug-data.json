{
    "matplotlib:30": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_30/lib/matplotlib/colors.py": {
            "buggy_functions": [
                {
                    "function_name": "makeMappingArray",
                    "function_code": "def makeMappingArray(N, data, gamma=1.0):\n    \"\"\"Create an *N* -element 1-d lookup table\n\n    *data* represented by a list of x,y0,y1 mapping correspondences.\n    Each element in this list represents how a value between 0 and 1\n    (inclusive) represented by x is mapped to a corresponding value\n    between 0 and 1 (inclusive). The two values of y are to allow\n    for discontinuous mapping functions (say as might be found in a\n    sawtooth) where y0 represents the value of y for values of x\n    <= to that given, and y1 is the value to be used for x > than\n    that given). The list must start with x=0, end with x=1, and\n    all values of x must be in increasing order. Values between\n    the given mapping points are determined by simple linear interpolation.\n\n    Alternatively, data can be a function mapping values between 0 - 1\n    to 0 - 1.\n\n    The function returns an array \"result\" where ``result[x*(N-1)]``\n    gives the closest value for values of x between 0 and 1.\n    \"\"\"\n\n    if callable(data):\n        xind = np.linspace(0, 1, N) ** gamma\n        lut = np.clip(np.array(data(xind), dtype=float), 0, 1)\n        return lut\n\n    try:\n        adata = np.array(data)\n    except Exception:\n        raise TypeError(\"data must be convertible to an array\")\n    shape = adata.shape\n    if len(shape) != 2 or shape[1] != 3:\n        raise ValueError(\"data must be nx3 format\")\n\n    x = adata[:, 0]\n    y0 = adata[:, 1]\n    y1 = adata[:, 2]\n\n    if x[0] != 0. or x[-1] != 1.0:\n        raise ValueError(\n            \"data mapping points must start with x=0 and end with x=1\")\n    if (np.diff(x) < 0).any():\n        raise ValueError(\"data mapping points must have x in increasing order\")\n    # begin generation of lookup table\n    x = x * (N - 1)\n    xind = (N - 1) * np.linspace(0, 1, N) ** gamma\n    ind = np.searchsorted(x, xind)[1:-1]\n\n    distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])\n    lut = np.concatenate([\n        [y1[0]],\n        distance * (y0[ind] - y1[ind - 1]) + y1[ind - 1],\n        [y0[-1]],\n    ])\n    # ensure that the lut is confined to values between 0 and 1 by clipping it\n    return np.clip(lut, 0.0, 1.0)\n",
                    "decorators": [],
                    "docstring": "Create an *N* -element 1-d lookup table\n\n*data* represented by a list of x,y0,y1 mapping correspondences.\nEach element in this list represents how a value between 0 and 1\n(inclusive) represented by x is mapped to a corresponding value\nbetween 0 and 1 (inclusive). The two values of y are to allow\nfor discontinuous mapping functions (say as might be found in a\nsawtooth) where y0 represents the value of y for values of x\n<= to that given, and y1 is the value to be used for x > than\nthat given). The list must start with x=0, end with x=1, and\nall values of x must be in increasing order. Values between\nthe given mapping points are determined by simple linear interpolation.\n\nAlternatively, data can be a function mapping values between 0 - 1\nto 0 - 1.\n\nThe function returns an array \"result\" where ``result[x*(N-1)]``\ngives the closest value for values of x between 0 and 1.",
                    "start_line": 336,
                    "end_line": 391,
                    "variables": {
                        "callable": [
                            357
                        ],
                        "data": [
                            363,
                            357,
                            359
                        ],
                        "xind": [
                            384,
                            358,
                            359,
                            381,
                            382
                        ],
                        "np.linspace": [
                            381,
                            358
                        ],
                        "np": [
                            385,
                            358,
                            359,
                            391,
                            363,
                            377,
                            381,
                            382
                        ],
                        "N": [
                            380,
                            381,
                            358
                        ],
                        "gamma": [
                            381,
                            358
                        ],
                        "lut": [
                            360,
                            385,
                            391,
                            359
                        ],
                        "np.clip": [
                            391,
                            359
                        ],
                        "np.array": [
                            363,
                            359
                        ],
                        "float": [
                            359
                        ],
                        "adata": [
                            363,
                            366,
                            370,
                            371,
                            372
                        ],
                        "Exception": [
                            364
                        ],
                        "TypeError": [
                            365
                        ],
                        "shape": [
                            366,
                            367
                        ],
                        "adata.shape": [
                            366
                        ],
                        "len": [
                            367
                        ],
                        "ValueError": [
                            368,
                            378,
                            375
                        ],
                        "x": [
                            384,
                            370,
                            374,
                            377,
                            380,
                            382
                        ],
                        "y0": [
                            388,
                            371,
                            387
                        ],
                        "y1": [
                            386,
                            387,
                            372
                        ],
                        "any": [
                            377
                        ],
                        "np.diff": [
                            377
                        ],
                        "ind": [
                            384,
                            387,
                            382
                        ],
                        "np.searchsorted": [
                            382
                        ],
                        "distance": [
                            384,
                            387
                        ],
                        "np.concatenate": [
                            385
                        ]
                    },
                    "filtered_variables": {
                        "data": [
                            363,
                            357,
                            359
                        ],
                        "xind": [
                            384,
                            358,
                            359,
                            381,
                            382
                        ],
                        "np.linspace": [
                            381,
                            358
                        ],
                        "np": [
                            385,
                            358,
                            359,
                            391,
                            363,
                            377,
                            381,
                            382
                        ],
                        "N": [
                            380,
                            381,
                            358
                        ],
                        "gamma": [
                            381,
                            358
                        ],
                        "lut": [
                            360,
                            385,
                            391,
                            359
                        ],
                        "np.clip": [
                            391,
                            359
                        ],
                        "np.array": [
                            363,
                            359
                        ],
                        "adata": [
                            363,
                            366,
                            370,
                            371,
                            372
                        ],
                        "shape": [
                            366,
                            367
                        ],
                        "adata.shape": [
                            366
                        ],
                        "x": [
                            384,
                            370,
                            374,
                            377,
                            380,
                            382
                        ],
                        "y0": [
                            388,
                            371,
                            387
                        ],
                        "y1": [
                            386,
                            387,
                            372
                        ],
                        "np.diff": [
                            377
                        ],
                        "ind": [
                            384,
                            387,
                            382
                        ],
                        "np.searchsorted": [
                            382
                        ],
                        "distance": [
                            384,
                            387
                        ],
                        "np.concatenate": [
                            385
                        ]
                    },
                    "diff_line_number": 380,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": "array([0., 1., 2., 3., 4.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "5"
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": "array([1. , 0.6, 0.2, 0.1, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "5"
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": "array([[0. , 1. , 1. ],\n       [0.5, 0.2, 0.2],\n       [1. , 0. , 0. ]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "adata.shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([0., 2., 4.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y0": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y1": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": "array([1, 1, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": "array([0.5, 1. , 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": "array([0., 1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": "array([1., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": "array([[0. , 1. , 1. ],\n       [0.5, 0.2, 0.2],\n       [1. , 0. , 0. ]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "adata.shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([0. , 0.5, 1. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y0": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y1": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": "array([], dtype=int64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": "array([0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": "array([1., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": "array([[0. , 1. , 1. ],\n       [0.5, 0.2, 0.2],\n       [1. , 0. , 0. ]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "adata.shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([0., 0., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y0": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y1": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": "array([], dtype=int64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": "array([0., 1., 2., 3., 4.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "5"
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": "array([1. , 0.6, 0.2, 0.1, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "5"
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": "array([[0. , 1. , 1. ],\n       [0.5, 0.2, 0.2],\n       [1. , 0. , 0. ]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "adata.shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([0., 2., 4.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y0": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y1": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": "array([1, 1, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": "array([0.5, 1. , 0.5])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y0": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "[(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "xind": {
                                    "variable_value": "array([0., 1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.linspace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "N": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "gamma": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "lut": {
                                    "variable_value": "array([1., 0.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "2"
                                },
                                "np.clip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "adata": {
                                    "variable_value": "array([[0. , 1. , 1. ],\n       [0.5, 0.2, 0.2],\n       [1. , 0. , 0. ]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "adata.shape": {
                                    "variable_value": "(3, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([0. , 0.5, 1. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y0": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "y1": {
                                    "variable_value": "array([1. , 0.2, 0. ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "np.diff": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ind": {
                                    "variable_value": "array([], dtype=int64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.searchsorted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "distance": {
                                    "variable_value": "array([], dtype=float64)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "0"
                                },
                                "np.concatenate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_named_colors_mapping():\n    \"\"\"Return the global mapping of names to named colors.\"\"\"\n    return _colors_full_map",
                "def _sanitize_extrema(ex):\n    if ex is None:\n        return ex\n    try:\n        ret = ex.item()\n    except AttributeError:\n        ret = float(ex)\n    return ret",
                "def _is_nth_color(c):\n    \"\"\"Return whether *c* can be interpreted as an item in the color cycle.\"\"\"\n    return isinstance(c, str) and re.match(r\"\\AC[0-9]+\\Z\", c)",
                "def is_color_like(c):\n    \"\"\"Return whether *c* can be interpreted as an RGB(A) color.\"\"\"\n    # Special-case nth color syntax because it cannot be parsed during setup.\n    if _is_nth_color(c):\n        return True\n    try:\n        to_rgba(c)\n    except ValueError:\n        return False\n    else:\n        return True",
                "def same_color(c1, c2):\n    \"\"\"\n    Compare two colors to see if they are the same.\n\n    Parameters\n    ----------\n    c1, c2 : Matplotlib colors\n\n    Returns\n    -------\n    bool\n        ``True`` if *c1* and *c2* are the same color, otherwise ``False``.\n    \"\"\"\n    return (to_rgba_array(c1) == to_rgba_array(c2)).all()",
                "def to_rgba(c, alpha=None):\n    \"\"\"\n    Convert *c* to an RGBA color.\n\n    Parameters\n    ----------\n    c : Matplotlib color\n\n    alpha : scalar, optional\n        If *alpha* is not ``None``, it forces the alpha value, except if *c* is\n        ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.\n\n    Returns\n    -------\n    tuple\n        Tuple of ``(r, g, b, a)`` scalars.\n    \"\"\"\n    # Special-case nth color syntax because it should not be cached.\n    if _is_nth_color(c):\n        from matplotlib import rcParams\n        prop_cycler = rcParams['axes.prop_cycle']\n        colors = prop_cycler.by_key().get('color', ['k'])\n        c = colors[int(c[1:]) % len(colors)]\n    try:\n        rgba = _colors_full_map.cache[c, alpha]\n    except (KeyError, TypeError):  # Not in cache, or unhashable.\n        rgba = None\n    if rgba is None:  # Suppress exception chaining of cache lookup failure.\n        rgba = _to_rgba_no_colorcycle(c, alpha)\n        try:\n            _colors_full_map.cache[c, alpha] = rgba\n        except TypeError:\n            pass\n    return rgba",
                "def _to_rgba_no_colorcycle(c, alpha=None):\n    \"\"\"Convert *c* to an RGBA color, with no support for color-cycle syntax.\n\n    If *alpha* is not ``None``, it forces the alpha value, except if *c* is\n    ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.\n    \"\"\"\n    orig_c = c\n    if isinstance(c, str):\n        if c.lower() == \"none\":\n            return (0., 0., 0., 0.)\n        # Named color.\n        try:\n            # This may turn c into a non-string, so we check again below.\n            c = _colors_full_map[c]\n        except KeyError:\n            try:\n                c = _colors_full_map[c.lower()]\n            except KeyError:\n                pass\n            else:\n                if len(orig_c) == 1:\n                    cbook.warn_deprecated(\n                        \"3.1\", message=\"Support for uppercase \"\n                        \"single-letter colors is deprecated since Matplotlib \"\n                        \"%(since)s and will be removed %(removal)s; please \"\n                        \"use lowercase instead.\")\n    if isinstance(c, str):\n        # hex color with no alpha.\n        match = re.match(r\"\\A#[a-fA-F0-9]{6}\\Z\", c)\n        if match:\n            return (tuple(int(n, 16) / 255\n                          for n in [c[1:3], c[3:5], c[5:7]])\n                    + (alpha if alpha is not None else 1.,))\n        # hex color with alpha.\n        match = re.match(r\"\\A#[a-fA-F0-9]{8}\\Z\", c)\n        if match:\n            color = [int(n, 16) / 255\n                     for n in [c[1:3], c[3:5], c[5:7], c[7:9]]]\n            if alpha is not None:\n                color[-1] = alpha\n            return tuple(color)\n        # string gray.\n        try:\n            return (float(c),) * 3 + (alpha if alpha is not None else 1.,)\n        except ValueError:\n            pass\n        raise ValueError(\"Invalid RGBA argument: {!r}\".format(orig_c))\n    # tuple color.\n    c = np.array(c)\n    if not np.can_cast(c.dtype, float, \"same_kind\") or c.ndim != 1:\n        # Test the dtype explicitly as `map(float, ...)`, `np.array(...,\n        # float)` and `np.array(...).astype(float)` all convert \"0.5\" to 0.5.\n        # Test dimensionality to reject single floats.\n        raise ValueError(\"Invalid RGBA argument: {!r}\".format(orig_c))\n    # Return a tuple to prevent the cached value from being modified.\n    c = tuple(c.astype(float))\n    if len(c) not in [3, 4]:\n        raise ValueError(\"RGBA sequence should have length 3 or 4\")\n    if len(c) == 3 and alpha is None:\n        alpha = 1\n    if alpha is not None:\n        c = c[:3] + (alpha,)\n    if any(elem < 0 or elem > 1 for elem in c):\n        raise ValueError(\"RGBA values should be within 0-1 range\")\n    return c",
                "def to_rgba_array(c, alpha=None):\n    \"\"\"Convert *c* to a (n, 4) array of RGBA colors.\n\n    If *alpha* is not ``None``, it forces the alpha value.  If *c* is\n    ``\"none\"`` (case-insensitive) or an empty list, an empty array is returned.\n    \"\"\"\n    # Special-case inputs that are already arrays, for performance.  (If the\n    # array has the wrong kind or shape, raise the error during one-at-a-time\n    # conversion.)\n    if (isinstance(c, np.ndarray) and c.dtype.kind in \"if\"\n            and c.ndim == 2 and c.shape[1] in [3, 4]):\n        if c.shape[1] == 3:\n            result = np.column_stack([c, np.zeros(len(c))])\n            result[:, -1] = alpha if alpha is not None else 1.\n        elif c.shape[1] == 4:\n            result = c.copy()\n            if alpha is not None:\n                result[:, -1] = alpha\n        if np.any((result < 0) | (result > 1)):\n            raise ValueError(\"RGBA values should be within 0-1 range\")\n        return result\n    # Handle single values.\n    # Note that this occurs *after* handling inputs that are already arrays, as\n    # `to_rgba(c, alpha)` (below) is expensive for such inputs, due to the need\n    # to format the array in the ValueError message(!).\n    if cbook._str_lower_equal(c, \"none\"):\n        return np.zeros((0, 4), float)\n    try:\n        return np.array([to_rgba(c, alpha)], float)\n    except (ValueError, TypeError):\n        pass\n    # Convert one at a time.\n    result = np.empty((len(c), 4), float)\n    for i, cc in enumerate(c):\n        result[i] = to_rgba(cc, alpha)\n    return result",
                "def to_rgb(c):\n    \"\"\"Convert *c* to an RGB color, silently dropping the alpha channel.\"\"\"\n    return to_rgba(c)[:3]",
                "def to_hex(c, keep_alpha=False):\n    \"\"\"Convert *c* to a hex color.\n\n    Uses the ``#rrggbb`` format if *keep_alpha* is False (the default),\n    ``#rrggbbaa`` otherwise.\n    \"\"\"\n    c = to_rgba(c)\n    if not keep_alpha:\n        c = c[:3]\n    return \"#\" + \"\".join(format(int(np.round(val * 255)), \"02x\")\n                         for val in c)",
                "def makeMappingArray(N, data, gamma=1.0):\n    \"\"\"Create an *N* -element 1-d lookup table\n\n    *data* represented by a list of x,y0,y1 mapping correspondences.\n    Each element in this list represents how a value between 0 and 1\n    (inclusive) represented by x is mapped to a corresponding value\n    between 0 and 1 (inclusive). The two values of y are to allow\n    for discontinuous mapping functions (say as might be found in a\n    sawtooth) where y0 represents the value of y for values of x\n    <= to that given, and y1 is the value to be used for x > than\n    that given). The list must start with x=0, end with x=1, and\n    all values of x must be in increasing order. Values between\n    the given mapping points are determined by simple linear interpolation.\n\n    Alternatively, data can be a function mapping values between 0 - 1\n    to 0 - 1.\n\n    The function returns an array \"result\" where ``result[x*(N-1)]``\n    gives the closest value for values of x between 0 and 1.\n    \"\"\"\n\n    if callable(data):\n        xind = np.linspace(0, 1, N) ** gamma\n        lut = np.clip(np.array(data(xind), dtype=float), 0, 1)\n        return lut\n\n    try:\n        adata = np.array(data)\n    except Exception:\n        raise TypeError(\"data must be convertible to an array\")\n    shape = adata.shape\n    if len(shape) != 2 or shape[1] != 3:\n        raise ValueError(\"data must be nx3 format\")\n\n    x = adata[:, 0]\n    y0 = adata[:, 1]\n    y1 = adata[:, 2]\n\n    if x[0] != 0. or x[-1] != 1.0:\n        raise ValueError(\n            \"data mapping points must start with x=0 and end with x=1\")\n    if (np.diff(x) < 0).any():\n        raise ValueError(\"data mapping points must have x in increasing order\")\n    # begin generation of lookup table\n    x = x * (N - 1)\n    xind = (N - 1) * np.linspace(0, 1, N) ** gamma\n    ind = np.searchsorted(x, xind)[1:-1]\n\n    distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])\n    lut = np.concatenate([\n        [y1[0]],\n        distance * (y0[ind] - y1[ind - 1]) + y1[ind - 1],\n        [y0[-1]],\n    ])\n    # ensure that the lut is confined to values between 0 and 1 by clipping it\n    return np.clip(lut, 0.0, 1.0)",
                "def rgb_to_hsv(arr):\n    \"\"\"\n    Convert float rgb values (in the range [0, 1]), in a numpy array to hsv\n    values.\n\n    Parameters\n    ----------\n    arr : (..., 3) array-like\n       All values must be in the range [0, 1]\n\n    Returns\n    -------\n    hsv : (..., 3) ndarray\n       Colors converted to hsv values in range [0, 1]\n    \"\"\"\n    arr = np.asarray(arr)\n\n    # check length of the last dimension, should be _some_ sort of rgb\n    if arr.shape[-1] != 3:\n        raise ValueError(\"Last dimension of input array must be 3; \"\n                         \"shape {} was found.\".format(arr.shape))\n\n    in_shape = arr.shape\n    arr = np.array(\n        arr, copy=False,\n        dtype=np.promote_types(arr.dtype, np.float32),  # Don't work on ints.\n        ndmin=2,  # In case input was 1D.\n    )\n    out = np.zeros_like(arr)\n    arr_max = arr.max(-1)\n    ipos = arr_max > 0\n    delta = arr.ptp(-1)\n    s = np.zeros_like(delta)\n    s[ipos] = delta[ipos] / arr_max[ipos]\n    ipos = delta > 0\n    # red is max\n    idx = (arr[..., 0] == arr_max) & ipos\n    out[idx, 0] = (arr[idx, 1] - arr[idx, 2]) / delta[idx]\n    # green is max\n    idx = (arr[..., 1] == arr_max) & ipos\n    out[idx, 0] = 2. + (arr[idx, 2] - arr[idx, 0]) / delta[idx]\n    # blue is max\n    idx = (arr[..., 2] == arr_max) & ipos\n    out[idx, 0] = 4. + (arr[idx, 0] - arr[idx, 1]) / delta[idx]\n\n    out[..., 0] = (out[..., 0] / 6.0) % 1.0\n    out[..., 1] = s\n    out[..., 2] = arr_max\n\n    return out.reshape(in_shape)",
                "def hsv_to_rgb(hsv):\n    \"\"\"\n    Convert hsv values to rgb.\n\n    Parameters\n    ----------\n    hsv : (..., 3) array-like\n       All values assumed to be in range [0, 1]\n\n    Returns\n    -------\n    rgb : (..., 3) ndarray\n       Colors converted to RGB values in range [0, 1]\n    \"\"\"\n    hsv = np.asarray(hsv)\n\n    # check length of the last dimension, should be _some_ sort of rgb\n    if hsv.shape[-1] != 3:\n        raise ValueError(\"Last dimension of input array must be 3; \"\n                         \"shape {shp} was found.\".format(shp=hsv.shape))\n\n    in_shape = hsv.shape\n    hsv = np.array(\n        hsv, copy=False,\n        dtype=np.promote_types(hsv.dtype, np.float32),  # Don't work on ints.\n        ndmin=2,  # In case input was 1D.\n    )\n\n    h = hsv[..., 0]\n    s = hsv[..., 1]\n    v = hsv[..., 2]\n\n    r = np.empty_like(h)\n    g = np.empty_like(h)\n    b = np.empty_like(h)\n\n    i = (h * 6.0).astype(int)\n    f = (h * 6.0) - i\n    p = v * (1.0 - s)\n    q = v * (1.0 - s * f)\n    t = v * (1.0 - s * (1.0 - f))\n\n    idx = i % 6 == 0\n    r[idx] = v[idx]\n    g[idx] = t[idx]\n    b[idx] = p[idx]\n\n    idx = i == 1\n    r[idx] = q[idx]\n    g[idx] = v[idx]\n    b[idx] = p[idx]\n\n    idx = i == 2\n    r[idx] = p[idx]\n    g[idx] = v[idx]\n    b[idx] = t[idx]\n\n    idx = i == 3\n    r[idx] = p[idx]\n    g[idx] = q[idx]\n    b[idx] = v[idx]\n\n    idx = i == 4\n    r[idx] = t[idx]\n    g[idx] = p[idx]\n    b[idx] = v[idx]\n\n    idx = i == 5\n    r[idx] = v[idx]\n    g[idx] = p[idx]\n    b[idx] = q[idx]\n\n    idx = s == 0\n    r[idx] = v[idx]\n    g[idx] = v[idx]\n    b[idx] = v[idx]\n\n    rgb = np.stack([r, g, b], axis=-1)\n\n    return rgb.reshape(in_shape)",
                "def _vector_magnitude(arr):\n    # things that don't work here:\n    #  * np.linalg.norm\n    #    - doesn't broadcast in numpy 1.7\n    #    - drops the mask from ma.array\n    #  * using keepdims - broken on ma.array until 1.11.2\n    #  * using sum - discards mask on ma.array unless entire vector is masked\n\n    sum_sq = 0\n    for i in range(arr.shape[-1]):\n        sum_sq += np.square(arr[..., i, np.newaxis])\n    return np.sqrt(sum_sq)",
                "def from_levels_and_colors(levels, colors, extend='neither'):\n    \"\"\"\n    A helper routine to generate a cmap and a norm instance which\n    behave similar to contourf's levels and colors arguments.\n\n    Parameters\n    ----------\n    levels : sequence of numbers\n        The quantization levels used to construct the :class:`BoundaryNorm`.\n        Value ``v`` is quantized to level ``i`` if ``lev[i] <= v < lev[i+1]``.\n    colors : sequence of colors\n        The fill color to use for each level. If `extend` is \"neither\" there\n        must be ``n_level - 1`` colors. For an `extend` of \"min\" or \"max\" add\n        one extra color, and for an `extend` of \"both\" add two colors.\n    extend : {'neither', 'min', 'max', 'both'}, optional\n        The behaviour when a value falls out of range of the given levels.\n        See :func:`~matplotlib.pyplot.contourf` for details.\n\n    Returns\n    -------\n    (cmap, norm) : tuple containing a :class:`Colormap` and a \\\n                   :class:`Normalize` instance\n    \"\"\"\n    colors_i0 = 0\n    colors_i1 = None\n\n    if extend == 'both':\n        colors_i0 = 1\n        colors_i1 = -1\n        extra_colors = 2\n    elif extend == 'min':\n        colors_i0 = 1\n        extra_colors = 1\n    elif extend == 'max':\n        colors_i1 = -1\n        extra_colors = 1\n    elif extend == 'neither':\n        extra_colors = 0\n    else:\n        raise ValueError('Unexpected value for extend: {0!r}'.format(extend))\n\n    n_data_colors = len(levels) - 1\n    n_expected_colors = n_data_colors + extra_colors\n    if len(colors) != n_expected_colors:\n        raise ValueError('With extend == {0!r} and n_levels == {1!r} expected'\n                         ' n_colors == {2!r}. Got {3!r}.'\n                         ''.format(extend, len(levels), n_expected_colors,\n                                   len(colors)))\n\n    cmap = ListedColormap(colors[colors_i0:colors_i1], N=n_data_colors)\n\n    if extend in ['min', 'both']:\n        cmap.set_under(colors[0])\n    else:\n        cmap.set_under('none')\n\n    if extend in ['max', 'both']:\n        cmap.set_over(colors[-1])\n    else:\n        cmap.set_over('none')\n\n    cmap.colorbar_extend = extend\n\n    norm = BoundaryNorm(levels, ncolors=n_data_colors)\n    return cmap, norm",
                "def __init__(self, mapping):\n    super().__init__(mapping)\n    self.cache = {}",
                "def __setitem__(self, key, value):\n    super().__setitem__(key, value)\n    self.cache.clear()",
                "def __delitem__(self, key):\n    super().__delitem__(key)\n    self.cache.clear()",
                "def __init__(self, name, N=256):\n    \"\"\"\n    Parameters\n    ----------\n    name : str\n        The name of the colormap.\n    N : int\n        The number of rgb quantization levels.\n\n    \"\"\"\n    self.name = name\n    self.N = int(N)  # ensure that N is always int\n    self._rgba_bad = (0.0, 0.0, 0.0, 0.0)  # If bad, don't paint anything.\n    self._rgba_under = None\n    self._rgba_over = None\n    self._i_under = self.N\n    self._i_over = self.N + 1\n    self._i_bad = self.N + 2\n    self._isinit = False\n\n    #: When this colormap exists on a scalar mappable and colorbar_extend\n    #: is not False, colorbar creation will pick up ``colorbar_extend`` as\n    #: the default value for the ``extend`` keyword in the\n    #: :class:`matplotlib.colorbar.Colorbar` constructor.\n    self.colorbar_extend = False",
                "def __call__(self, X, alpha=None, bytes=False):\n    \"\"\"\n    Parameters\n    ----------\n    X : scalar, ndarray\n        The data value(s) to convert to RGBA.\n        For floats, X should be in the interval ``[0.0, 1.0]`` to\n        return the RGBA values ``X*100`` percent along the Colormap line.\n        For integers, X should be in the interval ``[0, Colormap.N)`` to\n        return RGBA values *indexed* from the Colormap with index ``X``.\n    alpha : float, None\n        Alpha must be a scalar between 0 and 1, or None.\n    bytes : bool\n        If False (default), the returned RGBA values will be floats in the\n        interval ``[0, 1]`` otherwise they will be uint8s in the interval\n        ``[0, 255]``.\n\n    Returns\n    -------\n    Tuple of RGBA values if X is scalar, otherwise an array of\n    RGBA values with a shape of ``X.shape + (4, )``.\n\n    \"\"\"\n    # See class docstring for arg/kwarg documentation.\n    if not self._isinit:\n        self._init()\n    mask_bad = None\n    if not np.iterable(X):\n        vtype = 'scalar'\n        xa = np.array([X])\n    else:\n        vtype = 'array'\n        xma = np.ma.array(X, copy=True)  # Copy here to avoid side effects.\n        mask_bad = xma.mask              # Mask will be used below.\n        xa = xma.filled()                # Fill to avoid infs, etc.\n        del xma\n\n    # Calculations with native byteorder are faster, and avoid a\n    # bug that otherwise can occur with putmask when the last\n    # argument is a numpy scalar.\n    if not xa.dtype.isnative:\n        xa = xa.byteswap().newbyteorder()\n\n    if xa.dtype.kind == \"f\":\n        xa *= self.N\n        # Negative values are out of range, but astype(int) would truncate\n        # them towards zero.\n        xa[xa < 0] = -1\n        # xa == 1 (== N after multiplication) is not out of range.\n        xa[xa == self.N] = self.N - 1\n        # Avoid converting large positive values to negative integers.\n        np.clip(xa, -1, self.N, out=xa)\n        xa = xa.astype(int)\n    # Set the over-range indices before the under-range;\n    # otherwise the under-range values get converted to over-range.\n    xa[xa > self.N - 1] = self._i_over\n    xa[xa < 0] = self._i_under\n    if mask_bad is not None:\n        if mask_bad.shape == xa.shape:\n            np.copyto(xa, self._i_bad, where=mask_bad)\n        elif mask_bad:\n            xa.fill(self._i_bad)\n    if bytes:\n        lut = (self._lut * 255).astype(np.uint8)\n    else:\n        lut = self._lut.copy()  # Don't let alpha modify original _lut.\n\n    if alpha is not None:\n        alpha = np.clip(alpha, 0, 1)\n        if bytes:\n            alpha = int(alpha * 255)\n        if (lut[-1] == 0).all():\n            lut[:-1, -1] = alpha\n            # All zeros is taken as a flag for the default bad\n            # color, which is no color--fully transparent.  We\n            # don't want to override this.\n        else:\n            lut[:, -1] = alpha\n            # If the bad value is set to have a color, then we\n            # override its alpha just as for any other value.\n\n    rgba = lut.take(xa, axis=0, mode='clip')\n    if vtype == 'scalar':\n        rgba = tuple(rgba[0, :])\n    return rgba",
                "def __copy__(self):\n    \"\"\"Create new object with the same class, update attributes\n    \"\"\"\n    cls = self.__class__\n    cmapobject = cls.__new__(cls)\n    cmapobject.__dict__.update(self.__dict__)\n    if self._isinit:\n        cmapobject._lut = np.copy(self._lut)\n    return cmapobject",
                "def set_bad(self, color='k', alpha=None):\n    \"\"\"Set color to be used for masked values.\n    \"\"\"\n    self._rgba_bad = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def set_under(self, color='k', alpha=None):\n    \"\"\"Set color to be used for low out-of-range values.\n       Requires norm.clip = False\n    \"\"\"\n    self._rgba_under = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def set_over(self, color='k', alpha=None):\n    \"\"\"Set color to be used for high out-of-range values.\n       Requires norm.clip = False\n    \"\"\"\n    self._rgba_over = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def _set_extremes(self):\n    if self._rgba_under:\n        self._lut[self._i_under] = self._rgba_under\n    else:\n        self._lut[self._i_under] = self._lut[0]\n    if self._rgba_over:\n        self._lut[self._i_over] = self._rgba_over\n    else:\n        self._lut[self._i_over] = self._lut[self.N - 1]\n    self._lut[self._i_bad] = self._rgba_bad",
                "def _init(self):\n    \"\"\"Generate the lookup table, self._lut\"\"\"\n    raise NotImplementedError(\"Abstract class only\")",
                "def is_gray(self):\n    if not self._isinit:\n        self._init()\n    return (np.all(self._lut[:, 0] == self._lut[:, 1]) and\n            np.all(self._lut[:, 0] == self._lut[:, 2]))",
                "def _resample(self, lutsize):\n    \"\"\"\n    Return a new color map with *lutsize* entries.\n    \"\"\"\n    raise NotImplementedError()",
                "def reversed(self, name=None):\n    \"\"\"\n    Make a reversed instance of the Colormap.\n\n    .. note:: Function not implemented for base class.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    See Also\n    --------\n    LinearSegmentedColormap.reversed\n    ListedColormap.reversed\n    \"\"\"\n    raise NotImplementedError()",
                "def __init__(self, name, segmentdata, N=256, gamma=1.0):\n    \"\"\"\n    Create color map from linear mapping segments\n\n    segmentdata argument is a dictionary with a red, green and blue\n    entries. Each entry should be a list of *x*, *y0*, *y1* tuples,\n    forming rows in a table. Entries for alpha are optional.\n\n    Example: suppose you want red to increase from 0 to 1 over\n    the bottom half, green to do the same over the middle half,\n    and blue over the top half.  Then you would use::\n\n        cdict = {'red':   [(0.0,  0.0, 0.0),\n                           (0.5,  1.0, 1.0),\n                           (1.0,  1.0, 1.0)],\n\n                 'green': [(0.0,  0.0, 0.0),\n                           (0.25, 0.0, 0.0),\n                           (0.75, 1.0, 1.0),\n                           (1.0,  1.0, 1.0)],\n\n                 'blue':  [(0.0,  0.0, 0.0),\n                           (0.5,  0.0, 0.0),\n                           (1.0,  1.0, 1.0)]}\n\n    Each row in the table for a given color is a sequence of\n    *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase\n    monotonically from 0 to 1.  For any input value *z* falling\n    between *x[i]* and *x[i+1]*, the output value of a given color\n    will be linearly interpolated between *y1[i]* and *y0[i+1]*::\n\n        row i:   x  y0  y1\n                       /\n                      /\n        row i+1: x  y0  y1\n\n    Hence y0 in the first row and y1 in the last row are never used.\n\n    See Also\n    --------\n    LinearSegmentedColormap.from_list\n        Static method; factory function for generating a smoothly-varying\n        LinearSegmentedColormap.\n\n    makeMappingArray\n        For information about making a mapping array.\n    \"\"\"\n    # True only if all colors in map are identical; needed for contouring.\n    self.monochrome = False\n    Colormap.__init__(self, name, N)\n    self._segmentdata = segmentdata\n    self._gamma = gamma",
                "def _init(self):\n    self._lut = np.ones((self.N + 3, 4), float)\n    self._lut[:-3, 0] = makeMappingArray(\n        self.N, self._segmentdata['red'], self._gamma)\n    self._lut[:-3, 1] = makeMappingArray(\n        self.N, self._segmentdata['green'], self._gamma)\n    self._lut[:-3, 2] = makeMappingArray(\n        self.N, self._segmentdata['blue'], self._gamma)\n    if 'alpha' in self._segmentdata:\n        self._lut[:-3, 3] = makeMappingArray(\n            self.N, self._segmentdata['alpha'], 1)\n    self._isinit = True\n    self._set_extremes()",
                "def set_gamma(self, gamma):\n    \"\"\"\n    Set a new gamma value and regenerate color map.\n    \"\"\"\n    self._gamma = gamma\n    self._init()",
                "@staticmethod\ndef from_list(name, colors, N=256, gamma=1.0):\n    \"\"\"\n    Make a linear segmented colormap with *name* from a sequence\n    of *colors* which evenly transitions from colors[0] at val=0\n    to colors[-1] at val=1.  *N* is the number of rgb quantization\n    levels.\n    Alternatively, a list of (value, color) tuples can be given\n    to divide the range unevenly.\n    \"\"\"\n\n    if not np.iterable(colors):\n        raise ValueError('colors must be iterable')\n\n    if (isinstance(colors[0], Sized) and len(colors[0]) == 2\n            and not isinstance(colors[0], str)):\n        # List of value, color pairs\n        vals, colors = zip(*colors)\n    else:\n        vals = np.linspace(0, 1, len(colors))\n\n    cdict = dict(red=[], green=[], blue=[], alpha=[])\n    for val, color in zip(vals, colors):\n        r, g, b, a = to_rgba(color)\n        cdict['red'].append((val, r, r))\n        cdict['green'].append((val, g, g))\n        cdict['blue'].append((val, b, b))\n        cdict['alpha'].append((val, a, a))\n\n    return LinearSegmentedColormap(name, cdict, N, gamma)",
                "def _resample(self, lutsize):\n    \"\"\"\n    Return a new color map with *lutsize* entries.\n    \"\"\"\n    return LinearSegmentedColormap(self.name, self._segmentdata, lutsize)",
                "def reversed(self, name=None):\n    \"\"\"\n    Make a reversed instance of the Colormap.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    Returns\n    -------\n    LinearSegmentedColormap\n        The reversed colormap.\n    \"\"\"\n    if name is None:\n        name = self.name + \"_r\"\n\n    # Function factory needed to deal with 'late binding' issue.\n    def factory(dat):\n        def func_r(x):\n            return dat(1.0 - x)\n        return func_r\n\n    data_r = {key: (factory(data) if callable(data) else\n                    [(1.0 - x, y1, y0) for x, y0, y1 in reversed(data)])\n              for key, data in self._segmentdata.items()}\n\n    return LinearSegmentedColormap(name, data_r, self.N, self._gamma)",
                "def __init__(self, colors, name='from_list', N=None):\n    self.monochrome = False  # True only if all colors in map are\n                             # identical; needed for contouring.\n    if N is None:\n        self.colors = colors\n        N = len(colors)\n    else:\n        if isinstance(colors, str):\n            self.colors = [colors] * N\n            self.monochrome = True\n        elif np.iterable(colors):\n            if len(colors) == 1:\n                self.monochrome = True\n            self.colors = list(\n                itertools.islice(itertools.cycle(colors), N))\n        else:\n            try:\n                gray = float(colors)\n            except TypeError:\n                pass\n            else:\n                self.colors = [gray] * N\n            self.monochrome = True\n    Colormap.__init__(self, name, N)",
                "def _init(self):\n    self._lut = np.zeros((self.N + 3, 4), float)\n    self._lut[:-3] = to_rgba_array(self.colors)\n    self._isinit = True\n    self._set_extremes()",
                "def _resample(self, lutsize):\n    \"\"\"\n    Return a new color map with *lutsize* entries.\n    \"\"\"\n    colors = self(np.linspace(0, 1, lutsize))\n    return ListedColormap(colors, name=self.name)",
                "def reversed(self, name=None):\n    \"\"\"\n    Make a reversed instance of the Colormap.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    Returns\n    -------\n    ListedColormap\n        A reversed instance of the colormap.\n    \"\"\"\n    if name is None:\n        name = self.name + \"_r\"\n\n    colors_r = list(reversed(self.colors))\n    return ListedColormap(colors_r, name=name, N=self.N)",
                "def __init__(self, vmin=None, vmax=None, clip=False):\n    \"\"\"\n    If *vmin* or *vmax* is not given, they are initialized from the\n    minimum and maximum value respectively of the first input\n    processed.  That is, *__call__(A)* calls *autoscale_None(A)*.\n    If *clip* is *True* and the given value falls outside the range,\n    the returned value will be 0 or 1, whichever is closer.\n    Returns 0 if::\n\n        vmin==vmax\n\n    Works with scalars or arrays, including masked arrays.  If\n    *clip* is *True*, masked values are set to 1; otherwise they\n    remain masked.  Clipping silently defeats the purpose of setting\n    the over, under, and masked colors in the colormap, so it is\n    likely to lead to surprises; therefore the default is\n    *clip* = *False*.\n    \"\"\"\n    self.vmin = _sanitize_extrema(vmin)\n    self.vmax = _sanitize_extrema(vmax)\n    self.clip = clip",
                "@staticmethod\ndef process_value(value):\n    \"\"\"\n    Homogenize the input *value* for easy and efficient normalization.\n\n    *value* can be a scalar or sequence.\n\n    Returns *result*, *is_scalar*, where *result* is a\n    masked array matching *value*.  Float dtypes are preserved;\n    integer types with two bytes or smaller are converted to\n    np.float32, and larger types are converted to np.float64.\n    Preserving float32 when possible, and using in-place operations,\n    can greatly improve speed for large arrays.\n\n    Experimental; we may want to add an option to force the\n    use of float32.\n    \"\"\"\n    is_scalar = not np.iterable(value)\n    if is_scalar:\n        value = [value]\n    dtype = np.min_scalar_type(value)\n    if np.issubdtype(dtype, np.integer) or dtype.type is np.bool_:\n        # bool_/int8/int16 -> float32; int32/int64 -> float64\n        dtype = np.promote_types(dtype, np.float32)\n    # ensure data passed in as an ndarray subclass are interpreted as\n    # an ndarray. See issue #6622.\n    mask = np.ma.getmask(value)\n    data = np.asarray(np.ma.getdata(value))\n    result = np.ma.array(data, mask=mask, dtype=dtype, copy=True)\n    return result, is_scalar",
                "def __call__(self, value, clip=None):\n    \"\"\"\n    Normalize *value* data in the ``[vmin, vmax]`` interval into\n    the ``[0.0, 1.0]`` interval and return it.  *clip* defaults\n    to *self.clip* (which defaults to *False*).  If not already\n    initialized, *vmin* and *vmax* are initialized using\n    *autoscale_None(value)*.\n    \"\"\"\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    self.autoscale_None(result)\n    # Convert at least to float, without losing precision.\n    (vmin,), _ = self.process_value(self.vmin)\n    (vmax,), _ = self.process_value(self.vmax)\n    if vmin == vmax:\n        result.fill(0)   # Or should it be all masked?  Or 0.5?\n    elif vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # ma division is very slow; we can take a shortcut\n        resdat = result.data\n        resdat -= vmin\n        resdat /= (vmax - vmin)\n        result = np.ma.array(resdat, mask=result.mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    (vmin,), _ = self.process_value(self.vmin)\n    (vmax,), _ = self.process_value(self.vmax)\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return vmin + val * (vmax - vmin)\n    else:\n        return vmin + value * (vmax - vmin)",
                "def autoscale(self, A):\n    \"\"\"Set *vmin*, *vmax* to min, max of *A*.\"\"\"\n    A = np.asanyarray(A)\n    self.vmin = A.min()\n    self.vmax = A.max()",
                "def autoscale_None(self, A):\n    \"\"\"Autoscale only None-valued vmin or vmax.\"\"\"\n    A = np.asanyarray(A)\n    if self.vmin is None and A.size:\n        self.vmin = A.min()\n    if self.vmax is None and A.size:\n        self.vmax = A.max()",
                "def scaled(self):\n    \"\"\"Return whether vmin and vmax are set.\"\"\"\n    return self.vmin is not None and self.vmax is not None",
                "def __init__(self, vcenter, vmin=None, vmax=None):\n    \"\"\"\n    Normalize data with a set center.\n\n    Useful when mapping data with an unequal rates of change around a\n    conceptual center, e.g., data that range from -2 to 4, with 0 as\n    the midpoint.\n\n    Parameters\n    ----------\n    vcenter : float\n        The data value that defines ``0.5`` in the normalization.\n    vmin : float, optional\n        The data value that defines ``0.0`` in the normalization.\n        Defaults to the min value of the dataset.\n    vmax : float, optional\n        The data value that defines ``1.0`` in the normalization.\n        Defaults to the the max value of the dataset.\n\n    Examples\n    --------\n    This maps data value -4000 to 0., 0 to 0.5, and +10000 to 1.0; data\n    between is linearly interpolated::\n\n        >>> import matplotlib.colors as mcolors\n        >>> offset = mcolors.DivergingNorm(vmin=-4000.,\n                                           vcenter=0., vmax=10000)\n        >>> data = [-4000., -2000., 0., 2500., 5000., 7500., 10000.]\n        >>> offset(data)\n        array([0., 0.25, 0.5, 0.625, 0.75, 0.875, 1.0])\n    \"\"\"\n\n    self.vcenter = vcenter\n    self.vmin = vmin\n    self.vmax = vmax\n    if vcenter is not None and vmax is not None and vcenter >= vmax:\n        raise ValueError('vmin, vcenter, and vmax must be in '\n                         'ascending order')\n    if vcenter is not None and vmin is not None and vcenter <= vmin:\n        raise ValueError('vmin, vcenter, and vmax must be in '\n                         'ascending order')",
                "def autoscale_None(self, A):\n    \"\"\"\n    Get vmin and vmax, and then clip at vcenter\n    \"\"\"\n    super().autoscale_None(A)\n    if self.vmin > self.vcenter:\n        self.vmin = self.vcenter\n    if self.vmax < self.vcenter:\n        self.vmax = self.vcenter",
                "def __call__(self, value, clip=None):\n    \"\"\"\n    Map value to the interval [0, 1]. The clip argument is unused.\n    \"\"\"\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)  # sets self.vmin, self.vmax if None\n\n    if not self.vmin <= self.vcenter <= self.vmax:\n        raise ValueError(\"vmin, vcenter, vmax must increase monotonically\")\n    result = np.ma.masked_array(\n        np.interp(result, [self.vmin, self.vcenter, self.vmax],\n                  [0, 0.5, 1.]), mask=np.ma.getmask(result))\n    if is_scalar:\n        result = np.atleast_1d(result)[0]\n    return result",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    result = np.ma.masked_less_equal(result, 0, copy=False)\n\n    self.autoscale_None(result)\n    vmin, vmax = self.vmin, self.vmax\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin <= 0:\n        raise ValueError(\"values must all be positive\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # in-place equivalent of above can be much faster\n        resdat = result.data\n        mask = result.mask\n        if mask is np.ma.nomask:\n            mask = (resdat <= 0)\n        else:\n            mask |= resdat <= 0\n        np.copyto(resdat, 1, where=mask)\n        np.log(resdat, resdat)\n        resdat -= np.log(vmin)\n        resdat /= (np.log(vmax) - np.log(vmin))\n        result = np.ma.array(resdat, mask=mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    vmin, vmax = self.vmin, self.vmax\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return vmin * np.ma.power((vmax / vmin), val)\n    else:\n        return vmin * pow((vmax / vmin), value)",
                "def autoscale(self, A):\n    # docstring inherited.\n    super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))",
                "def autoscale_None(self, A):\n    # docstring inherited.\n    super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))",
                "def __init__(self,  linthresh, linscale=1.0,\n             vmin=None, vmax=None, clip=False):\n    \"\"\"\n    *linthresh*:\n    The range within which the plot is linear (to\n    avoid having the plot go to infinity around zero).\n\n    *linscale*:\n    This allows the linear range (-*linthresh* to *linthresh*)\n    to be stretched relative to the logarithmic range.  Its\n    value is the number of decades to use for each half of the\n    linear range.  For example, when *linscale* == 1.0 (the\n    default), the space used for the positive and negative\n    halves of the linear range will be equal to one decade in\n    the logarithmic range. Defaults to 1.\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.linthresh = float(linthresh)\n    self._linscale_adj = (linscale / (1.0 - np.e ** -1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)\n    vmin, vmax = self.vmin, self.vmax\n\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # in-place equivalent of above can be much faster\n        resdat = self._transform(result.data)\n        resdat -= self._lower\n        resdat /= (self._upper - self._lower)\n\n    if is_scalar:\n        result = result[0]\n    return result",
                "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid=\"ignore\"):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = (self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh))\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a",
                "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > (self.linthresh * self._linscale_adj)\n    sign = np.sign(a[masked])\n    exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a",
                "def _transform_vmin_vmax(self):\n    \"\"\"Calculates vmin and vmax in the transformed system.\"\"\"\n    vmin, vmax = self.vmin, self.vmax\n    arr = np.array([vmax, vmin]).astype(float)\n    self._upper, self._lower = self._transform(arr)",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    val = np.ma.asarray(value)\n    val = val * (self._upper - self._lower) + self._lower\n    return self._inv_transform(val)",
                "def autoscale(self, A):\n    # docstring inherited.\n    super().autoscale(A)\n    self._transform_vmin_vmax()",
                "def autoscale_None(self, A):\n    # docstring inherited.\n    super().autoscale_None(A)\n    self._transform_vmin_vmax()",
                "def __init__(self, gamma, vmin=None, vmax=None, clip=False):\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.gamma = gamma",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    self.autoscale_None(result)\n    gamma = self.gamma\n    vmin, vmax = self.vmin, self.vmax\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        resdat = result.data\n        resdat -= vmin\n        resdat[resdat < 0] = 0\n        np.power(resdat, gamma, resdat)\n        resdat /= (vmax - vmin) ** gamma\n\n        result = np.ma.array(resdat, mask=result.mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    gamma = self.gamma\n    vmin, vmax = self.vmin, self.vmax\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return np.ma.power(val, 1. / gamma) * (vmax - vmin) + vmin\n    else:\n        return pow(value, 1. / gamma) * (vmax - vmin) + vmin",
                "def __init__(self, boundaries, ncolors, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    boundaries : array-like\n        Monotonically increasing sequence of boundaries\n    ncolors : int\n        Number of colors in the colormap to be used\n    clip : bool, optional\n        If clip is ``True``, out of range values are mapped to 0 if they\n        are below ``boundaries[0]`` or mapped to ncolors - 1 if they are\n        above ``boundaries[-1]``.\n\n        If clip is ``False``, out of range values are mapped to -1 if\n        they are below ``boundaries[0]`` or mapped to ncolors if they are\n        above ``boundaries[-1]``. These are then converted to valid indices\n        by :meth:`Colormap.__call__`.\n\n    Notes\n    -----\n    *boundaries* defines the edges of bins, and data falling within a bin\n    is mapped to the color with the same index.\n\n    If the number of bins doesn't equal *ncolors*, the color is chosen\n    by linear interpolation of the bin number onto color numbers.\n    \"\"\"\n    self.clip = clip\n    self.vmin = boundaries[0]\n    self.vmax = boundaries[-1]\n    self.boundaries = np.asarray(boundaries)\n    self.N = len(self.boundaries)\n    self.Ncmap = ncolors\n    if self.N - 1 == self.Ncmap:\n        self._interp = False\n    else:\n        self._interp = True",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    xx, is_scalar = self.process_value(value)\n    mask = np.ma.getmaskarray(xx)\n    xx = np.atleast_1d(xx.filled(self.vmax + 1))\n    if clip:\n        np.clip(xx, self.vmin, self.vmax, out=xx)\n        max_col = self.Ncmap - 1\n    else:\n        max_col = self.Ncmap\n    iret = np.zeros(xx.shape, dtype=np.int16)\n    for i, b in enumerate(self.boundaries):\n        iret[xx >= b] = i\n    if self._interp:\n        scalefac = (self.Ncmap - 1) / (self.N - 2)\n        iret = (iret * scalefac).astype(np.int16)\n    iret[xx < self.vmin] = -1\n    iret[xx >= self.vmax] = max_col\n    ret = np.ma.array(iret, mask=mask)\n    if is_scalar:\n        ret = int(ret[0])  # assume python scalar\n    return ret",
                "def inverse(self, value):\n    \"\"\"\n    Raises\n    ------\n    ValueError\n        BoundaryNorm is not invertible, so calling this method will always\n        raise an error\n    \"\"\"\n    return ValueError(\"BoundaryNorm is not invertible\")",
                "def __call__(self, value, clip=None):\n    return value",
                "def inverse(self, value):\n    return value",
                "def __init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1,\n             hsv_min_sat=1, hsv_max_sat=0):\n    \"\"\"\n    Specify the azimuth (measured clockwise from south) and altitude\n    (measured up from the plane of the surface) of the light source\n    in degrees.\n\n    Parameters\n    ----------\n    azdeg : number, optional\n        The azimuth (0-360, degrees clockwise from North) of the light\n        source. Defaults to 315 degrees (from the northwest).\n    altdeg : number, optional\n        The altitude (0-90, degrees up from horizontal) of the light\n        source.  Defaults to 45 degrees from horizontal.\n\n    Notes\n    -----\n    For backwards compatibility, the parameters *hsv_min_val*,\n    *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at\n    initialization as well.  However, these parameters will only be used if\n    \"blend_mode='hsv'\" is passed into :meth:`shade` or :meth:`shade_rgb`.\n    See the documentation for :meth:`blend_hsv` for more details.\n    \"\"\"\n    self.azdeg = azdeg\n    self.altdeg = altdeg\n    self.hsv_min_val = hsv_min_val\n    self.hsv_max_val = hsv_max_val\n    self.hsv_min_sat = hsv_min_sat\n    self.hsv_max_sat = hsv_max_sat",
                "@property\ndef direction(self):\n    \"\"\"The unit vector direction towards the light source.\"\"\"\n    # Azimuth is in degrees clockwise from North. Convert to radians\n    # counterclockwise from East (mathematical notation).\n    az = np.radians(90 - self.azdeg)\n    alt = np.radians(self.altdeg)\n    return np.array([\n        np.cos(az) * np.cos(alt),\n        np.sin(az) * np.cos(alt),\n        np.sin(alt)\n    ])",
                "def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.):\n    \"\"\"\n    Calculates the illumination intensity for a surface using the defined\n    azimuth and elevation for the light source.\n\n    This computes the normal vectors for the surface, and then passes them\n    on to `shade_normals`\n\n    Parameters\n    ----------\n    elevation : array-like\n        A 2d array (or equivalent) of the height values used to generate an\n        illumination map\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs meters) or to exaggerate\n        or de-emphasize topographic effects.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    Returns\n    -------\n    intensity : ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n\n    # Because most image and raster GIS data has the first row in the array\n    # as the \"top\" of the image, dy is implicitly negative.  This is\n    # consistent to what `imshow` assumes, as well.\n    dy = -dy\n\n    # compute the normal vectors from the partial derivatives\n    e_dy, e_dx = np.gradient(vert_exag * elevation, dy, dx)\n\n    # .view is to keep subclasses\n    normal = np.empty(elevation.shape + (3,)).view(type(elevation))\n    normal[..., 0] = -e_dx\n    normal[..., 1] = -e_dy\n    normal[..., 2] = 1\n    normal /= _vector_magnitude(normal)\n\n    return self.shade_normals(normal, fraction)",
                "def shade_normals(self, normals, fraction=1.):\n    \"\"\"\n    Calculates the illumination intensity for the normal vectors of a\n    surface using the defined azimuth and elevation for the light source.\n\n    Imagine an artificial sun placed at infinity in some azimuth and\n    elevation position illuminating our surface. The parts of the surface\n    that slope toward the sun should brighten while those sides facing away\n    should become darker.\n\n    Parameters\n    ----------\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    intensity : ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n\n    intensity = normals.dot(self.direction)\n\n    # Apply contrast stretch\n    imin, imax = intensity.min(), intensity.max()\n    intensity *= fraction\n\n    # Rescale to 0-1, keeping range before contrast stretch\n    # If constant slope, keep relative scaling (i.e. flat should be 0.5,\n    # fully occluded 0, etc.)\n    if (imax - imin) > 1e-6:\n        # Strictly speaking, this is incorrect. Negative values should be\n        # clipped to 0 because they're fully occluded. However, rescaling\n        # in this manner is consistent with the previous implementation and\n        # visually appears better than a \"hard\" clip.\n        intensity -= imin\n        intensity /= (imax - imin)\n    intensity = np.clip(intensity, 0, 1, intensity)\n\n    return intensity",
                "def shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None,\n          vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs):\n    \"\"\"\n    Combine colormapped data values with an illumination intensity map\n    (a.k.a.  \"hillshade\") of the values.\n\n    Parameters\n    ----------\n    data : array-like\n        A 2d array (or equivalent) of the height values used to generate a\n        shaded map.\n    cmap : `~matplotlib.colors.Colormap` instance\n        The colormap used to color the *data* array. Note that this must be\n        a `~matplotlib.colors.Colormap` instance.  For example, rather than\n        passing in `cmap='gist_earth'`, use\n        `cmap=plt.get_cmap('gist_earth')` instead.\n    norm : `~matplotlib.colors.Normalize` instance, optional\n        The normalization used to scale values before colormapping. If\n        None, the input will be linearly scaled between its min and max.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data\n        values with the illumination intensity.  Default is\n        \"overlay\".  Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to\n        combine an MxNx3 RGB array of floats (ranging 0 to 1) with\n        an MxNx1 hillshade array (also 0 to 1).  (Call signature\n        `func(rgb, illum, **kwargs)`) Additional kwargs supplied\n        to this function will be passed on to the *blend_mode*\n        function.\n    vmin : scalar or None, optional\n        The minimum value used in colormapping *data*. If *None* the\n        minimum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vmax : scalar or None, optional\n        The maximum value used in colormapping *data*. If *None* the\n        maximum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs meters) or to exaggerate\n        or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    rgba : ndarray\n        An MxNx4 array of floats ranging between 0-1.\n    \"\"\"\n    if vmin is None:\n        vmin = data.min()\n    if vmax is None:\n        vmax = data.max()\n    if norm is None:\n        norm = Normalize(vmin=vmin, vmax=vmax)\n\n    rgb0 = cmap(norm(data))\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,\n                          vert_exag=vert_exag, dx=dx, dy=dy,\n                          fraction=fraction, **kwargs)\n    # Don't overwrite the alpha channel, if present.\n    rgb0[..., :3] = rgb1[..., :3]\n    return rgb0",
                "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given `elevation`.\n\n    Parameters\n    ----------\n    rgb : array-like\n        An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n    elevation : array-like\n        An (M, N) array of the height values used to generate a shaded map.\n    fraction : number\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data values\n        with the illumination intensity.  For backwards compatibility, this\n        defaults to \"hsv\". Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to combine an\n        MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n        array (also 0 to 1).  (Call signature `func(rgb, illum, **kwargs)`)\n        Additional kwargs supplied to this function will be passed on to\n        the *blend_mode* function.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs meters) or to exaggerate\n        or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    shaded_rgb : ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n\n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys))\n\n    # Only apply result where hillshade intensity isn't masked\n    if hasattr(intensity, 'mask'):\n        mask = intensity.mask[..., 0]\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n\n    return blend",
                "def blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None,\n              hsv_min_val=None, hsv_min_sat=None):\n    \"\"\"\n    Take the input data array, convert to HSV values in the given colormap,\n    then adjust those color values to give the impression of a shaded\n    relief map with a specified light source.  RGBA values are returned,\n    which can then be used to plot the shaded image with imshow.\n\n    The color of the resulting image will be darkened by moving the (s,v)\n    values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the\n    shaded regions, or lightened by sliding (s,v) toward (hsv_max_sat\n    hsv_max_val) in regions that are illuminated.  The default extremes are\n    chose so that completely shaded points are nearly black (s = 1, v = 0)\n    and completely illuminated points are nearly white (s = 0, v = 1).\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n    hsv_max_sat : number, optional\n        The maximum saturation value that the *intensity* map can shift the\n        output image to. Defaults to 1.\n    hsv_min_sat : number, optional\n        The minimum saturation value that the *intensity* map can shift the\n        output image to. Defaults to 0.\n    hsv_max_val : number, optional\n        The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 1.\n    hsv_min_val : number, optional\n        The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 0.\n\n    Returns\n    -------\n    rgb : ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    # Backward compatibility...\n    if hsv_max_sat is None:\n        hsv_max_sat = self.hsv_max_sat\n    if hsv_max_val is None:\n        hsv_max_val = self.hsv_max_val\n    if hsv_min_sat is None:\n        hsv_min_sat = self.hsv_min_sat\n    if hsv_min_val is None:\n        hsv_min_val = self.hsv_min_val\n\n    # Expects a 2D intensity array scaled between -1 to 1...\n    intensity = intensity[..., 0]\n    intensity = 2 * intensity - 1\n\n    # convert to rgb, then rgb to hsv\n    hsv = rgb_to_hsv(rgb[:, :, 0:3])\n\n    # modify hsv values to simulate illumination.\n    np.putmask(hsv[:, :, 1],  # i.e. A[mask] = B[mask].\n               (np.abs(hsv[:, :, 1]) > 1.e-10) & (intensity > 0),\n               (1 - intensity) * hsv[:, :, 1] + intensity * hsv_max_sat)\n    np.putmask(hsv[:, :, 2],\n               intensity > 0,\n               (1 - intensity) * hsv[:, :, 2] + intensity * hsv_max_val)\n    np.putmask(hsv[:, :, 1],\n               (np.abs(hsv[:, :, 1]) > 1.e-10) & (intensity < 0),\n               (1 + intensity) * hsv[:, :, 1] - intensity * hsv_min_sat)\n    np.putmask(hsv[:, :, 2],\n               intensity < 0,\n               (1 + intensity) * hsv[:, :, 2] - intensity * hsv_min_val)\n    np.clip(hsv[:, :, 1:], 0, 1, out=hsv[:, :, 1:])\n    # convert modified hsv back to rgb.\n    return hsv_to_rgb(hsv)",
                "def blend_soft_light(self, rgb, intensity):\n    \"\"\"\n    Combines an rgb image with an intensity map using \"soft light\"\n    blending.  Uses the \"pegtop\" formula.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    rgb : ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    return 2 * intensity * rgb + (1 - 2 * intensity) * rgb**2",
                "def blend_overlay(self, rgb, intensity):\n    \"\"\"\n    Combines an rgb image with an intensity map using \"overlay\" blending.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    rgb : ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    low = 2 * intensity * rgb\n    high = 1 - 2 * (1 - intensity) * (1 - rgb)\n    return np.where(rgb <= 0.5, low, high)",
                "def factory(dat):\n    def func_r(x):\n        return dat(1.0 - x)\n    return func_r",
                "def func_r(x):\n    return dat(1.0 - x)"
            ],
            "inscope_function_signatures": [
                "get_named_colors_mapping()",
                "_sanitize_extrema(ex)",
                "_is_nth_color(c)",
                "is_color_like(c)",
                "same_color(c1, c2)",
                "to_rgba(c, alpha=None)",
                "_to_rgba_no_colorcycle(c, alpha=None)",
                "to_rgba_array(c, alpha=None)",
                "to_rgb(c)",
                "to_hex(c, keep_alpha=False)",
                "makeMappingArray(N, data, gamma=1.0)",
                "rgb_to_hsv(arr)",
                "hsv_to_rgb(hsv)",
                "_vector_magnitude(arr)",
                "from_levels_and_colors(levels, colors, extend='neither')",
                "__init__(self, mapping)",
                "__setitem__(self, key, value)",
                "__delitem__(self, key)",
                "__init__(self, name, N=256)",
                "__call__(self, X, alpha=None, bytes=False)",
                "__copy__(self)",
                "set_bad(self, color='k', alpha=None)",
                "set_under(self, color='k', alpha=None)",
                "set_over(self, color='k', alpha=None)",
                "_set_extremes(self)",
                "_init(self)",
                "is_gray(self)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, name, segmentdata, N=256, gamma=1.0)",
                "_init(self)",
                "set_gamma(self, gamma)",
                "from_list(name, colors, N=256, gamma=1.0)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, colors, name='from_list', N=None)",
                "_init(self)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, vmin=None, vmax=None, clip=False)",
                "process_value(value)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "scaled(self)",
                "__init__(self, vcenter, vmin=None, vmax=None)",
                "autoscale_None(self, A)",
                "__call__(self, value, clip=None)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)",
                "__call__(self, value, clip=None)",
                "_transform(self, a)",
                "_inv_transform(self, a)",
                "_transform_vmin_vmax(self)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "__init__(self, gamma, vmin=None, vmax=None, clip=False)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__init__(self, boundaries, ncolors, clip=False)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1, hsv_min_sat=1, hsv_max_sat=0)",
                "direction(self)",
                "hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)",
                "shade_normals(self, normals, fraction=1.0)",
                "shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None, vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs)",
                "shade_rgb(self, rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs)",
                "blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)",
                "blend_soft_light(self, rgb, intensity)",
                "blend_overlay(self, rgb, intensity)",
                "factory(dat)",
                "func_r(x)"
            ],
            "variables_in_file": {
                "dict": [
                    702,
                    71
                ],
                "__init__": [
                    73
                ],
                "super": [
                    1089,
                    1186,
                    1191,
                    73,
                    77,
                    81,
                    1009,
                    1085
                ],
                "mapping": [
                    73
                ],
                "self.cache": [
                    74,
                    82,
                    78
                ],
                "self": [
                    1025,
                    1537,
                    1527,
                    1538,
                    521,
                    523,
                    524,
                    525,
                    1037,
                    1039,
                    531,
                    532,
                    533,
                    1043,
                    1044,
                    539,
                    540,
                    541,
                    547,
                    548,
                    549,
                    552,
                    553,
                    555,
                    556,
                    557,
                    559,
                    560,
                    1073,
                    1075,
                    567,
                    568,
                    569,
                    570,
                    1596,
                    74,
                    78,
                    82,
                    1624,
                    1118,
                    1119,
                    1120,
                    1122,
                    1126,
                    1128,
                    1129,
                    1130,
                    1142,
                    1143,
                    1144,
                    1153,
                    1155,
                    1156,
                    1158,
                    1163,
                    1165,
                    1166,
                    655,
                    656,
                    657,
                    658,
                    1168,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    667,
                    668,
                    669,
                    670,
                    671,
                    672,
                    1178,
                    1181,
                    1182,
                    1187,
                    678,
                    679,
                    1192,
                    1201,
                    1202,
                    1713,
                    1206,
                    1208,
                    1210,
                    1211,
                    1212,
                    716,
                    1234,
                    1236,
                    1237,
                    734,
                    1766,
                    744,
                    746,
                    1771,
                    1772,
                    1773,
                    1283,
                    1284,
                    1285,
                    1286,
                    1287,
                    1288,
                    1289,
                    778,
                    1290,
                    1292,
                    781,
                    1173,
                    1296,
                    785,
                    786,
                    1298,
                    1300,
                    789,
                    790,
                    1302,
                    1175,
                    1303,
                    1305,
                    1307,
                    1309,
                    798,
                    799,
                    800,
                    1310,
                    1312,
                    803,
                    804,
                    805,
                    806,
                    1313,
                    1833,
                    1835,
                    812,
                    813,
                    1837,
                    1839,
                    831,
                    833,
                    834,
                    861,
                    862,
                    863,
                    905,
                    907,
                    909,
                    911,
                    912,
                    416,
                    417,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    932,
                    934,
                    935,
                    430,
                    946,
                    947,
                    952,
                    953,
                    954,
                    955,
                    959,
                    456,
                    457,
                    476,
                    481,
                    483,
                    995,
                    996,
                    997,
                    487,
                    488,
                    491,
                    493,
                    495,
                    497,
                    1010,
                    1011,
                    1012,
                    1013,
                    1525,
                    1526,
                    1528,
                    1529,
                    1530,
                    1019,
                    1020,
                    1022
                ],
                "__setitem__": [
                    77
                ],
                "key": [
                    744,
                    81,
                    77,
                    742
                ],
                "value": [
                    891,
                    907,
                    1039,
                    1298,
                    1180,
                    937,
                    938,
                    941,
                    1077,
                    1078,
                    1208,
                    1081,
                    1336,
                    1339,
                    77,
                    1239,
                    1240,
                    1243,
                    1128,
                    882,
                    884,
                    885,
                    1019,
                    892
                ],
                "self.cache.clear": [
                    82,
                    78
                ],
                "__delitem__": [
                    81
                ],
                "_colors_full_map": [
                    96,
                    97,
                    323,
                    324,
                    102,
                    198,
                    201,
                    173,
                    179,
                    85,
                    87,
                    88,
                    91,
                    92,
                    93
                ],
                "_colors_full_map.update": [
                    96,
                    87,
                    88,
                    91,
                    92,
                    93
                ],
                "XKCD_COLORS": [
                    89,
                    87
                ],
                "k.replace": [
                    88,
                    93
                ],
                "k": [
                    88,
                    89,
                    90,
                    93,
                    94,
                    95
                ],
                "v": [
                    1443,
                    1432,
                    1448,
                    1433,
                    1454,
                    1424,
                    1459,
                    1462,
                    1437,
                    88,
                    89,
                    1434,
                    1467,
                    1468,
                    93,
                    94,
                    1469
                ],
                "XKCD_COLORS.items": [
                    89
                ],
                "CSS4_COLORS": [
                    91,
                    311
                ],
                "TABLEAU_COLORS": [
                    92,
                    94
                ],
                "TABLEAU_COLORS.items": [
                    94
                ],
                "BASE_COLORS": [
                    96
                ],
                "_ColorMapping": [
                    97
                ],
                "ex": [
                    106,
                    107,
                    109,
                    111
                ],
                "ret": [
                    1314,
                    1316,
                    1317,
                    109,
                    111,
                    112
                ],
                "ex.item": [
                    109
                ],
                "AttributeError": [
                    110
                ],
                "float": [
                    803,
                    228,
                    359,
                    234,
                    111,
                    240,
                    661,
                    278,
                    1174,
                    280,
                    794,
                    284,
                    1119
                ],
                "isinstance": [
                    192,
                    261,
                    784,
                    211,
                    117,
                    695,
                    696
                ],
                "c": [
                    261,
                    262,
                    263,
                    264,
                    266,
                    267,
                    277,
                    280,
                    284,
                    285,
                    292,
                    167,
                    171,
                    173,
                    301,
                    303,
                    177,
                    305,
                    179,
                    191,
                    192,
                    193,
                    198,
                    201,
                    211,
                    213,
                    216,
                    219,
                    222,
                    228,
                    233,
                    234,
                    240,
                    241,
                    243,
                    117,
                    246,
                    247,
                    249,
                    123,
                    126
                ],
                "str": [
                    192,
                    784,
                    211,
                    117,
                    696
                ],
                "re.match": [
                    213,
                    219,
                    117
                ],
                "re": [
                    213,
                    312,
                    219,
                    117
                ],
                "_is_nth_color": [
                    123,
                    167
                ],
                "to_rgba": [
                    704,
                    547,
                    292,
                    326,
                    301,
                    531,
                    280,
                    539,
                    126,
                    286
                ],
                "ValueError": [
                    1412,
                    271,
                    916,
                    1046,
                    1048,
                    281,
                    1944,
                    1179,
                    1949,
                    933,
                    1327,
                    1074,
                    693,
                    1214,
                    1361,
                    1235,
                    229,
                    231,
                    999,
                    1002,
                    1133,
                    238,
                    368,
                    242,
                    1781,
                    375,
                    248,
                    378,
                    127,
                    1023
                ],
                "all": [
                    146,
                    503
                ],
                "to_rgba_array": [
                    146,
                    804,
                    327
                ],
                "c1": [
                    146
                ],
                "c2": [
                    146
                ],
                "prop_cycler": [
                    169,
                    170
                ],
                "rcParams": [
                    169
                ],
                "colors": [
                    781,
                    782,
                    784,
                    785,
                    787,
                    788,
                    791,
                    794,
                    1948,
                    1952,
                    1954,
                    1957,
                    170,
                    171,
                    812,
                    813,
                    1962,
                    692,
                    695,
                    696,
                    698,
                    700,
                    703,
                    323
                ],
                "get": [
                    170
                ],
                "prop_cycler.by_key": [
                    170
                ],
                "int": [
                    417,
                    484,
                    1316,
                    171,
                    304,
                    502,
                    215,
                    1430,
                    221
                ],
                "len": [
                    1952,
                    700,
                    1287,
                    264,
                    1948,
                    171,
                    205,
                    782,
                    367,
                    241,
                    243,
                    788,
                    695,
                    1946,
                    284,
                    1951
                ],
                "rgba": [
                    513,
                    515,
                    516,
                    173,
                    175,
                    176,
                    177,
                    179,
                    182
                ],
                "_colors_full_map.cache": [
                    179,
                    324,
                    173
                ],
                "alpha": [
                    265,
                    268,
                    269,
                    531,
                    280,
                    539,
                    286,
                    547,
                    173,
                    177,
                    179,
                    217,
                    223,
                    224,
                    228,
                    504,
                    243,
                    244,
                    245,
                    246,
                    499,
                    500,
                    502,
                    509
                ],
                "KeyError": [
                    202,
                    174,
                    199
                ],
                "TypeError": [
                    365,
                    174,
                    180,
                    1780,
                    281,
                    795
                ],
                "_to_rgba_no_colorcycle": [
                    177
                ],
                "orig_c": [
                    231,
                    205,
                    238,
                    191
                ],
                "c.lower": [
                    193,
                    201
                ],
                "cbook.warn_deprecated": [
                    206
                ],
                "cbook": [
                    277,
                    206
                ],
                "match": [
                    219,
                    220,
                    213,
                    214
                ],
                "tuple": [
                    240,
                    225,
                    515,
                    215
                ],
                "n": [
                    216,
                    221,
                    222,
                    215
                ],
                "color": [
                    224,
                    225,
                    704,
                    547,
                    531,
                    539,
                    221,
                    703
                ],
                "format": [
                    1412,
                    231,
                    238,
                    304,
                    1361,
                    1781,
                    1944,
                    1949
                ],
                "np.array": [
                    1539,
                    359,
                    1416,
                    233,
                    363,
                    461,
                    1365,
                    1174,
                    280
                ],
                "np": [
                    1024,
                    1025,
                    1026,
                    1537,
                    1028,
                    1538,
                    1539,
                    1540,
                    1541,
                    1542,
                    525,
                    1041,
                    1053,
                    1054,
                    1059,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1587,
                    1077,
                    1078,
                    1079,
                    1590,
                    569,
                    570,
                    1085,
                    1089,
                    1120,
                    1640,
                    1138,
                    1139,
                    1152,
                    1153,
                    1154,
                    1155,
                    1163,
                    1164,
                    1165,
                    661,
                    1174,
                    1180,
                    692,
                    700,
                    1219,
                    1220,
                    1225,
                    1228,
                    1239,
                    1240,
                    1241,
                    1767,
                    233,
                    234,
                    261,
                    1286,
                    264,
                    270,
                    787,
                    1299,
                    1300,
                    278,
                    1302,
                    280,
                    1306,
                    284,
                    1311,
                    1314,
                    803,
                    812,
                    304,
                    1849,
                    1850,
                    1852,
                    1855,
                    1856,
                    1858,
                    1861,
                    1357,
                    1365,
                    1367,
                    1370,
                    1374,
                    358,
                    359,
                    363,
                    1902,
                    882,
                    885,
                    886,
                    888,
                    377,
                    891,
                    892,
                    893,
                    381,
                    382,
                    1408,
                    385,
                    391,
                    1416,
                    1418,
                    1426,
                    1427,
                    1428,
                    919,
                    920,
                    926,
                    937,
                    938,
                    945,
                    951,
                    1471,
                    459,
                    461,
                    1486,
                    1487,
                    464,
                    483,
                    491,
                    495,
                    500
                ],
                "np.can_cast": [
                    234
                ],
                "c.dtype": [
                    234,
                    261
                ],
                "c.ndim": [
                    234,
                    262
                ],
                "c.astype": [
                    240
                ],
                "any": [
                    377,
                    247
                ],
                "elem": [
                    247
                ],
                "np.ndarray": [
                    261
                ],
                "c.dtype.kind": [
                    261
                ],
                "c.shape": [
                    266,
                    262,
                    263
                ],
                "result": [
                    1024,
                    1025,
                    1026,
                    1028,
                    1029,
                    264,
                    265,
                    267,
                    907,
                    269,
                    270,
                    909,
                    272,
                    1039,
                    914,
                    1041,
                    1043,
                    1148,
                    919,
                    920,
                    1050,
                    923,
                    284,
                    1053,
                    926,
                    286,
                    928,
                    287,
                    929,
                    1054,
                    1057,
                    1058,
                    1067,
                    1069,
                    1070,
                    1208,
                    1147,
                    1210,
                    1216,
                    1219,
                    1220,
                    1222,
                    1228,
                    1230,
                    1231,
                    1128,
                    1129,
                    1135,
                    1138,
                    1139,
                    1142,
                    1019,
                    1020,
                    893,
                    894
                ],
                "np.column_stack": [
                    264
                ],
                "np.zeros": [
                    264,
                    1306,
                    803,
                    278
                ],
                "c.copy": [
                    267
                ],
                "np.any": [
                    270
                ],
                "cbook._str_lower_equal": [
                    277
                ],
                "np.empty": [
                    284,
                    1590
                ],
                "i": [
                    1441,
                    1788,
                    1446,
                    1451,
                    1485,
                    1486,
                    1456,
                    1461,
                    1430,
                    1431,
                    1436,
                    1307,
                    1308,
                    285,
                    286,
                    1787
                ],
                "cc": [
                    285,
                    286
                ],
                "enumerate": [
                    1307,
                    285
                ],
                "keep_alpha": [
                    302
                ],
                "join": [
                    304
                ],
                "np.round": [
                    304
                ],
                "val": [
                    705,
                    706,
                    707,
                    708,
                    938,
                    939,
                    304,
                    305,
                    1078,
                    1079,
                    1240,
                    1241,
                    1180,
                    1181,
                    1182,
                    703
                ],
                "cnames": [
                    311
                ],
                "hexColorPattern": [
                    312
                ],
                "re.compile": [
                    312
                ],
                "rgb2hex": [
                    313
                ],
                "to_hex": [
                    313
                ],
                "hex2color": [
                    314
                ],
                "to_rgb": [
                    314,
                    325
                ],
                "object": [
                    1490,
                    394,
                    837,
                    317
                ],
                "cache": [
                    324
                ],
                "staticmethod": [
                    865,
                    325,
                    326,
                    327,
                    681
                ],
                "colorConverter": [
                    330
                ],
                "ColorConverter": [
                    330
                ],
                "callable": [
                    357,
                    742
                ],
                "data": [
                    357,
                    742,
                    743,
                    359,
                    744,
                    1706,
                    363,
                    1708,
                    1712,
                    1713,
                    892,
                    893
                ],
                "xind": [
                    384,
                    358,
                    359,
                    381,
                    382
                ],
                "np.linspace": [
                    700,
                    381,
                    358,
                    812
                ],
                "N": [
                    800,
                    417,
                    358,
                    710,
                    780,
                    782,
                    656,
                    785,
                    791,
                    380,
                    381,
                    798
                ],
                "gamma": [
                    710,
                    678,
                    358,
                    1225,
                    1226,
                    1243,
                    658,
                    1202,
                    1236,
                    1241,
                    1211,
                    381
                ],
                "lut": [
                    385,
                    513,
                    391,
                    360,
                    359,
                    495,
                    497,
                    503,
                    504,
                    509
                ],
                "np.clip": [
                    483,
                    1220,
                    1861,
                    391,
                    359,
                    1640,
                    1139,
                    500,
                    1302,
                    920,
                    1054
                ],
                "adata": [
                    363,
                    366,
                    370,
                    371,
                    372
                ],
                "Exception": [
                    364
                ],
                "shape": [
                    366,
                    367
                ],
                "adata.shape": [
                    366
                ],
                "x": [
                    384,
                    739,
                    743,
                    370,
                    374,
                    377,
                    380,
                    382
                ],
                "y0": [
                    388,
                    371,
                    387,
                    743
                ],
                "y1": [
                    386,
                    387,
                    372,
                    743
                ],
                "np.diff": [
                    377
                ],
                "ind": [
                    384,
                    387,
                    382
                ],
                "np.searchsorted": [
                    382
                ],
                "distance": [
                    384,
                    387
                ],
                "np.concatenate": [
                    385
                ],
                "self.name": [
                    416,
                    716,
                    813,
                    734,
                    831
                ],
                "name": [
                    416,
                    800,
                    834,
                    710,
                    746,
                    656,
                    830,
                    733,
                    734,
                    831
                ],
                "self.N": [
                    1287,
                    1289,
                    661,
                    663,
                    665,
                    667,
                    670,
                    1310,
                    417,
                    803,
                    421,
                    422,
                    423,
                    559,
                    834,
                    476,
                    481,
                    483,
                    487,
                    746
                ],
                "self._rgba_bad": [
                    560,
                    418,
                    531
                ],
                "self._rgba_under": [
                    539,
                    553,
                    552,
                    419
                ],
                "self._rgba_over": [
                    547,
                    420,
                    557,
                    556
                ],
                "self._i_under": [
                    488,
                    553,
                    555,
                    421
                ],
                "self._i_over": [
                    559,
                    557,
                    422,
                    487
                ],
                "self._i_bad": [
                    560,
                    491,
                    493,
                    423
                ],
                "self._isinit": [
                    548,
                    805,
                    424,
                    456,
                    524,
                    532,
                    567,
                    540,
                    671
                ],
                "self.colorbar_extend": [
                    430
                ],
                "self._init": [
                    568,
                    457,
                    679
                ],
                "mask_bad": [
                    489,
                    458,
                    490,
                    491,
                    492,
                    465
                ],
                "np.iterable": [
                    937,
                    459,
                    882,
                    787,
                    692,
                    1077,
                    1239
                ],
                "X": [
                    464,
                    459,
                    461
                ],
                "vtype": [
                    514,
                    460,
                    463
                ],
                "xa": [
                    481,
                    513,
                    483,
                    484,
                    487,
                    488,
                    490,
                    491,
                    461,
                    493,
                    466,
                    472,
                    473,
                    475,
                    476,
                    479
                ],
                "xma": [
                    464,
                    465,
                    466,
                    467
                ],
                "np.ma.array": [
                    1314,
                    1220,
                    1067,
                    1228,
                    464,
                    1139,
                    1054,
                    920,
                    893,
                    926
                ],
                "np.ma": [
                    1024,
                    1026,
                    1041,
                    1299,
                    919,
                    920,
                    1180,
                    1053,
                    1054,
                    926,
                    1314,
                    1059,
                    938,
                    1067,
                    1078,
                    1079,
                    1085,
                    1089,
                    1219,
                    1220,
                    1228,
                    464,
                    1240,
                    1241,
                    1138,
                    1139,
                    891,
                    892,
                    893
                ],
                "xma.mask": [
                    465
                ],
                "xma.filled": [
                    466
                ],
                "xa.dtype.isnative": [
                    472
                ],
                "xa.dtype": [
                    472,
                    475
                ],
                "newbyteorder": [
                    473
                ],
                "xa.byteswap": [
                    473
                ],
                "xa.dtype.kind": [
                    475
                ],
                "xa.astype": [
                    484
                ],
                "mask_bad.shape": [
                    490
                ],
                "xa.shape": [
                    490
                ],
                "np.copyto": [
                    491,
                    1063
                ],
                "xa.fill": [
                    493
                ],
                "bytes": [
                    501,
                    494
                ],
                "astype": [
                    1430,
                    1311,
                    1174,
                    495
                ],
                "self._lut": [
                    803,
                    804,
                    553,
                    555,
                    525,
                    557,
                    495,
                    559,
                    497,
                    560,
                    661,
                    662,
                    666,
                    664,
                    569,
                    570,
                    669
                ],
                "np.uint8": [
                    495
                ],
                "self._lut.copy": [
                    497
                ],
                "lut.take": [
                    513
                ],
                "cls": [
                    521,
                    522
                ],
                "self.__class__": [
                    521
                ],
                "cmapobject": [
                    522,
                    523,
                    525,
                    526
                ],
                "cls.__new__": [
                    522
                ],
                "cmapobject.__dict__.update": [
                    523
                ],
                "cmapobject.__dict__": [
                    523
                ],
                "self.__dict__": [
                    523
                ],
                "cmapobject._lut": [
                    525
                ],
                "np.copy": [
                    525
                ],
                "self._set_extremes": [
                    672,
                    549,
                    806,
                    533,
                    541
                ],
                "NotImplementedError": [
                    576,
                    595,
                    564
                ],
                "np.all": [
                    569,
                    570
                ],
                "Colormap": [
                    656,
                    800,
                    749,
                    598
                ],
                "self.monochrome": [
                    778,
                    655,
                    786,
                    789,
                    799
                ],
                "Colormap.__init__": [
                    656,
                    800
                ],
                "self._segmentdata": [
                    744,
                    716,
                    657,
                    663,
                    665,
                    667,
                    668,
                    670
                ],
                "segmentdata": [
                    657
                ],
                "self._gamma": [
                    678,
                    746,
                    658,
                    663,
                    665,
                    667
                ],
                "np.ones": [
                    661
                ],
                "makeMappingArray": [
                    664,
                    666,
                    669,
                    662
                ],
                "Sized": [
                    695
                ],
                "vals": [
                    698,
                    700,
                    703
                ],
                "zip": [
                    698,
                    703
                ],
                "cdict": [
                    705,
                    706,
                    707,
                    708,
                    710,
                    702
                ],
                "r": [
                    704,
                    705,
                    1442,
                    1447,
                    1452,
                    1457,
                    1426,
                    1462,
                    1467,
                    1437,
                    1471
                ],
                "g": [
                    704,
                    706,
                    1443,
                    1448,
                    1453,
                    1458,
                    1427,
                    1463,
                    1468,
                    1438,
                    1471
                ],
                "b": [
                    704,
                    707,
                    1444,
                    1449,
                    1471,
                    1454,
                    1459,
                    1428,
                    1464,
                    1307,
                    1308,
                    1469,
                    1439
                ],
                "a": [
                    704,
                    1153,
                    1154,
                    1155,
                    708,
                    1157,
                    1158,
                    1159,
                    1163,
                    1164,
                    1165,
                    1167,
                    1168,
                    1169
                ],
                "append": [
                    705,
                    706,
                    707,
                    708
                ],
                "LinearSegmentedColormap": [
                    746,
                    716,
                    710
                ],
                "lutsize": [
                    716,
                    812
                ],
                "dat": [
                    739
                ],
                "func_r": [
                    740
                ],
                "data_r": [
                    746,
                    742
                ],
                "factory": [
                    742
                ],
                "reversed": [
                    833,
                    743
                ],
                "self._segmentdata.items": [
                    744
                ],
                "self.colors": [
                    833,
                    804,
                    781,
                    785,
                    790,
                    798
                ],
                "list": [
                    833,
                    790
                ],
                "itertools.islice": [
                    791
                ],
                "itertools": [
                    791
                ],
                "itertools.cycle": [
                    791
                ],
                "gray": [
                    794,
                    798
                ],
                "ListedColormap": [
                    1954,
                    834,
                    813
                ],
                "colors_r": [
                    833,
                    834
                ],
                "self.vmin": [
                    1025,
                    1284,
                    911,
                    1044,
                    1173,
                    1302,
                    1312,
                    934,
                    946,
                    1075,
                    952,
                    953,
                    1212,
                    959,
                    1237,
                    861,
                    996,
                    1130,
                    1010,
                    1011,
                    1022
                ],
                "_sanitize_extrema": [
                    861,
                    862
                ],
                "vmin": [
                    911,
                    913,
                    915,
                    1044,
                    1045,
                    1173,
                    1047,
                    920,
                    1049,
                    1174,
                    924,
                    925,
                    1054,
                    934,
                    1065,
                    1066,
                    939,
                    1705,
                    941,
                    1706,
                    1710,
                    1201,
                    1075,
                    1079,
                    1081,
                    1212,
                    1213,
                    1215,
                    1220,
                    1223,
                    1226,
                    1237,
                    1241,
                    1243,
                    861,
                    1118,
                    1121,
                    996,
                    1001,
                    1130,
                    1132,
                    1134,
                    1139
                ],
                "self.vmax": [
                    1025,
                    1285,
                    912,
                    1044,
                    1173,
                    1300,
                    1302,
                    1313,
                    935,
                    947,
                    1075,
                    954,
                    955,
                    1212,
                    959,
                    1237,
                    862,
                    997,
                    1130,
                    1012,
                    1013,
                    1022
                ],
                "vmax": [
                    912,
                    913,
                    915,
                    1044,
                    1045,
                    1173,
                    1174,
                    920,
                    1049,
                    925,
                    1054,
                    935,
                    1066,
                    939,
                    1707,
                    941,
                    1708,
                    1710,
                    1201,
                    1075,
                    1079,
                    1081,
                    1212,
                    1213,
                    1215,
                    1220,
                    1226,
                    1237,
                    1241,
                    1243,
                    862,
                    1118,
                    1121,
                    997,
                    998,
                    1130,
                    1132,
                    1134,
                    1139
                ],
                "self.clip": [
                    1283,
                    1126,
                    905,
                    1037,
                    1296,
                    1206,
                    863
                ],
                "clip": [
                    1283,
                    904,
                    905,
                    1036,
                    1037,
                    1295,
                    1296,
                    1301,
                    918,
                    1052,
                    1201,
                    1205,
                    1206,
                    1218,
                    1118,
                    863,
                    1125,
                    1126,
                    1137
                ],
                "is_scalar": [
                    1027,
                    1315,
                    1128,
                    907,
                    1068,
                    1229,
                    1039,
                    882,
                    883,
                    1298,
                    1208,
                    1146,
                    1019,
                    894,
                    927
                ],
                "dtype": [
                    888,
                    893,
                    885,
                    886
                ],
                "np.min_scalar_type": [
                    885
                ],
                "np.issubdtype": [
                    886
                ],
                "np.integer": [
                    886
                ],
                "dtype.type": [
                    886
                ],
                "np.bool_": [
                    886
                ],
                "np.promote_types": [
                    888,
                    1418,
                    1367
                ],
                "np.float32": [
                    888,
                    1418,
                    1367
                ],
                "mask": [
                    1299,
                    919,
                    921,
                    1053,
                    1055,
                    1058,
                    1059,
                    1060,
                    1314,
                    1062,
                    1063,
                    1067,
                    1219,
                    1221,
                    1138,
                    1140,
                    1786,
                    891,
                    1788,
                    893
                ],
                "np.ma.getmask": [
                    1026,
                    1219,
                    1138,
                    919,
                    891,
                    1053
                ],
                "np.asarray": [
                    1408,
                    892,
                    1357,
                    1286
                ],
                "np.ma.getdata": [
                    892
                ],
                "self.process_value": [
                    934,
                    935,
                    1128,
                    907,
                    911,
                    912,
                    1039,
                    1298,
                    1208,
                    1019
                ],
                "self.autoscale_None": [
                    1129,
                    909,
                    1043,
                    1210,
                    1020
                ],
                "_": [
                    912,
                    935,
                    934,
                    911
                ],
                "result.fill": [
                    1216,
                    914,
                    1050,
                    1135
                ],
                "result.filled": [
                    920,
                    1139,
                    1220,
                    1054
                ],
                "resdat": [
                    923,
                    924,
                    925,
                    926,
                    1057,
                    1060,
                    1062,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1222,
                    1223,
                    1224,
                    1225,
                    1226,
                    1228,
                    1142,
                    1143,
                    1144
                ],
                "result.data": [
                    1057,
                    923,
                    1222,
                    1142
                ],
                "result.mask": [
                    1058,
                    1228,
                    926
                ],
                "self.scaled": [
                    1073,
                    1178,
                    932,
                    1234
                ],
                "np.ma.asarray": [
                    1240,
                    938,
                    1180,
                    1078
                ],
                "A": [
                    1089,
                    1186,
                    1191,
                    945,
                    946,
                    947,
                    1009,
                    951,
                    952,
                    953,
                    954,
                    955,
                    1085
                ],
                "np.asanyarray": [
                    945,
                    951
                ],
                "A.min": [
                    953,
                    946
                ],
                "A.max": [
                    947,
                    955
                ],
                "A.size": [
                    952,
                    954
                ],
                "Normalize": [
                    962,
                    1092,
                    1032,
                    1195,
                    1710,
                    1201,
                    1330,
                    1246,
                    1118
                ],
                "self.vcenter": [
                    1025,
                    995,
                    1010,
                    1011,
                    1012,
                    1013,
                    1022
                ],
                "vcenter": [
                    1001,
                    995,
                    998
                ],
                "autoscale_None": [
                    1089,
                    1009,
                    1191
                ],
                "np.ma.masked_array": [
                    1024
                ],
                "np.interp": [
                    1025
                ],
                "np.atleast_1d": [
                    1028,
                    1300
                ],
                "np.ma.masked_less_equal": [
                    1089,
                    1041,
                    1085
                ],
                "np.ma.nomask": [
                    1059
                ],
                "np.log": [
                    1064,
                    1065,
                    1066,
                    1155
                ],
                "np.ma.power": [
                    1241,
                    1079
                ],
                "pow": [
                    1081,
                    1243
                ],
                "autoscale": [
                    1186,
                    1085
                ],
                "Normalize.__init__": [
                    1201,
                    1118
                ],
                "self.linthresh": [
                    1153,
                    1155,
                    1156,
                    1163,
                    1165,
                    1166,
                    1119
                ],
                "linthresh": [
                    1119
                ],
                "self._linscale_adj": [
                    1120,
                    1155,
                    1158,
                    1163,
                    1165,
                    1168
                ],
                "linscale": [
                    1120
                ],
                "np.e": [
                    1120
                ],
                "self._transform_vmin_vmax": [
                    1192,
                    1122,
                    1187
                ],
                "self._transform": [
                    1142,
                    1175
                ],
                "self._lower": [
                    1144,
                    1175,
                    1181,
                    1143
                ],
                "self._upper": [
                    1144,
                    1181,
                    1175
                ],
                "np.errstate": [
                    1152
                ],
                "masked": [
                    1153,
                    1154,
                    1155,
                    1157,
                    1158,
                    1163,
                    1164,
                    1165,
                    1167,
                    1168
                ],
                "np.abs": [
                    1856,
                    1153,
                    1155,
                    1163,
                    1850
                ],
                "sign": [
                    1154,
                    1156,
                    1164,
                    1165,
                    1166
                ],
                "np.sign": [
                    1154,
                    1164
                ],
                "log": [
                    1155,
                    1156,
                    1157
                ],
                "exp": [
                    1165,
                    1166,
                    1167
                ],
                "np.exp": [
                    1165
                ],
                "arr": [
                    1174,
                    1175,
                    1357,
                    1485,
                    1486,
                    1360,
                    1362,
                    1364,
                    1365,
                    1366,
                    1367,
                    1370,
                    1371,
                    1373,
                    1378,
                    1379,
                    1381,
                    1382,
                    1384,
                    1385
                ],
                "self._inv_transform": [
                    1182
                ],
                "self.gamma": [
                    1202,
                    1211,
                    1236
                ],
                "np.power": [
                    1225
                ],
                "boundaries": [
                    1284,
                    1285,
                    1286
                ],
                "self.boundaries": [
                    1307,
                    1286,
                    1287
                ],
                "self.Ncmap": [
                    1288,
                    1289,
                    1303,
                    1305,
                    1310
                ],
                "ncolors": [
                    1288
                ],
                "self._interp": [
                    1290,
                    1292,
                    1309
                ],
                "xx": [
                    1312,
                    1313,
                    1298,
                    1299,
                    1300,
                    1302,
                    1306,
                    1308
                ],
                "np.ma.getmaskarray": [
                    1299
                ],
                "xx.filled": [
                    1300
                ],
                "max_col": [
                    1305,
                    1313,
                    1303
                ],
                "iret": [
                    1312,
                    1313,
                    1314,
                    1306,
                    1308,
                    1311
                ],
                "xx.shape": [
                    1306
                ],
                "np.int16": [
                    1306,
                    1311
                ],
                "scalefac": [
                    1310,
                    1311
                ],
                "arr.shape": [
                    1360,
                    1362,
                    1364,
                    1485
                ],
                "in_shape": [
                    1415,
                    1473,
                    1364,
                    1391
                ],
                "arr.dtype": [
                    1367
                ],
                "out": [
                    1379,
                    1382,
                    1385,
                    1387,
                    1388,
                    1389,
                    1391,
                    1370
                ],
                "np.zeros_like": [
                    1370,
                    1374
                ],
                "arr_max": [
                    1378,
                    1381,
                    1384,
                    1389,
                    1371,
                    1372,
                    1375
                ],
                "arr.max": [
                    1371
                ],
                "ipos": [
                    1376,
                    1378,
                    1381,
                    1384,
                    1372,
                    1375
                ],
                "delta": [
                    1376,
                    1379,
                    1382,
                    1385,
                    1373,
                    1374,
                    1375
                ],
                "arr.ptp": [
                    1373
                ],
                "s": [
                    1388,
                    1423,
                    1466,
                    1432,
                    1433,
                    1434,
                    1374,
                    1375
                ],
                "idx": [
                    1436,
                    1437,
                    1438,
                    1439,
                    1441,
                    1442,
                    1443,
                    1444,
                    1446,
                    1447,
                    1448,
                    1449,
                    1451,
                    1452,
                    1453,
                    1454,
                    1456,
                    1457,
                    1458,
                    1459,
                    1461,
                    1462,
                    1463,
                    1464,
                    1466,
                    1467,
                    1468,
                    1469,
                    1378,
                    1379,
                    1381,
                    1382,
                    1384,
                    1385
                ],
                "out.reshape": [
                    1391
                ],
                "hsv": [
                    1408,
                    1411,
                    1413,
                    1415,
                    1416,
                    1417,
                    1418,
                    1422,
                    1423,
                    1424,
                    1846,
                    1849,
                    1850,
                    1851,
                    1852,
                    1854,
                    1855,
                    1856,
                    1857,
                    1858,
                    1860,
                    1861,
                    1863
                ],
                "hsv.shape": [
                    1411,
                    1413,
                    1415
                ],
                "hsv.dtype": [
                    1418
                ],
                "h": [
                    1422,
                    1426,
                    1427,
                    1428,
                    1430,
                    1431
                ],
                "np.empty_like": [
                    1426,
                    1427,
                    1428
                ],
                "f": [
                    1433,
                    1434,
                    1431
                ],
                "p": [
                    1444,
                    1447,
                    1452,
                    1458,
                    1463,
                    1432,
                    1439
                ],
                "q": [
                    1464,
                    1433,
                    1442,
                    1453
                ],
                "t": [
                    1449,
                    1434,
                    1457,
                    1438
                ],
                "rgb": [
                    1473,
                    1900,
                    1901,
                    1902,
                    1776,
                    1779,
                    1846,
                    1882,
                    1788,
                    1471
                ],
                "np.stack": [
                    1471
                ],
                "rgb.reshape": [
                    1473
                ],
                "sum_sq": [
                    1484,
                    1486,
                    1487
                ],
                "range": [
                    1787,
                    1485
                ],
                "np.square": [
                    1486
                ],
                "np.newaxis": [
                    1486,
                    1767
                ],
                "np.sqrt": [
                    1487
                ],
                "self.azdeg": [
                    1537,
                    1525
                ],
                "azdeg": [
                    1525
                ],
                "self.altdeg": [
                    1538,
                    1526
                ],
                "altdeg": [
                    1526
                ],
                "self.hsv_min_val": [
                    1839,
                    1527
                ],
                "hsv_min_val": [
                    1860,
                    1839,
                    1838,
                    1527
                ],
                "self.hsv_max_val": [
                    1528,
                    1835
                ],
                "hsv_max_val": [
                    1528,
                    1834,
                    1835,
                    1854
                ],
                "self.hsv_min_sat": [
                    1529,
                    1837
                ],
                "hsv_min_sat": [
                    1857,
                    1529,
                    1836,
                    1837
                ],
                "self.hsv_max_sat": [
                    1833,
                    1530
                ],
                "hsv_max_sat": [
                    1832,
                    1833,
                    1530,
                    1851
                ],
                "az": [
                    1537,
                    1540,
                    1541
                ],
                "np.radians": [
                    1537,
                    1538
                ],
                "alt": [
                    1538,
                    1540,
                    1541,
                    1542
                ],
                "np.cos": [
                    1540,
                    1541
                ],
                "np.sin": [
                    1541,
                    1542
                ],
                "property": [
                    1532
                ],
                "dy": [
                    1584,
                    1714,
                    1587,
                    1766
                ],
                "e_dy": [
                    1592,
                    1587
                ],
                "e_dx": [
                    1587,
                    1591
                ],
                "np.gradient": [
                    1587
                ],
                "vert_exag": [
                    1714,
                    1587,
                    1766
                ],
                "elevation": [
                    1766,
                    1587,
                    1590
                ],
                "dx": [
                    1714,
                    1587,
                    1766
                ],
                "normal": [
                    1590,
                    1591,
                    1592,
                    1593,
                    1594,
                    1596
                ],
                "view": [
                    1590
                ],
                "elevation.shape": [
                    1590
                ],
                "type": [
                    1590
                ],
                "_vector_magnitude": [
                    1594
                ],
                "self.shade_normals": [
                    1596
                ],
                "fraction": [
                    1715,
                    1596,
                    1766,
                    1628
                ],
                "intensity": [
                    1842,
                    1843,
                    1850,
                    1851,
                    1853,
                    1854,
                    1856,
                    1857,
                    1859,
                    1860,
                    1624,
                    1882,
                    1627,
                    1628,
                    1638,
                    1639,
                    1640,
                    1766,
                    1642,
                    1767,
                    1900,
                    1901,
                    1776,
                    1779,
                    1785,
                    1786
                ],
                "normals.dot": [
                    1624
                ],
                "normals": [
                    1624
                ],
                "self.direction": [
                    1624
                ],
                "imin": [
                    1633,
                    1627,
                    1638,
                    1639
                ],
                "imax": [
                    1633,
                    1627,
                    1639
                ],
                "intensity.min": [
                    1627
                ],
                "intensity.max": [
                    1627
                ],
                "data.min": [
                    1706
                ],
                "data.max": [
                    1708
                ],
                "norm": [
                    1709,
                    1710,
                    1712,
                    1968,
                    1969
                ],
                "rgb0": [
                    1712,
                    1713,
                    1717,
                    1718
                ],
                "cmap": [
                    1954,
                    1957,
                    1959,
                    1962,
                    1964,
                    1966,
                    1712,
                    1969
                ],
                "rgb1": [
                    1713,
                    1717
                ],
                "self.shade_rgb": [
                    1713
                ],
                "blend_mode": [
                    1776,
                    1713,
                    1779,
                    1775
                ],
                "kwargs": [
                    1776,
                    1715,
                    1779
                ],
                "self.hillshade": [
                    1766
                ],
                "lookup": [
                    1776,
                    1770,
                    1782,
                    1775
                ],
                "self.blend_hsv": [
                    1771
                ],
                "self.blend_soft_light": [
                    1772
                ],
                "self.blend_overlay": [
                    1773
                ],
                "blend": [
                    1776,
                    1779,
                    1788,
                    1790
                ],
                "lookup.keys": [
                    1782
                ],
                "hasattr": [
                    1785
                ],
                "intensity.mask": [
                    1786
                ],
                "rgb_to_hsv": [
                    1846
                ],
                "np.putmask": [
                    1849,
                    1858,
                    1852,
                    1855
                ],
                "hsv_to_rgb": [
                    1863
                ],
                "low": [
                    1900,
                    1902
                ],
                "high": [
                    1901,
                    1902
                ],
                "np.where": [
                    1902
                ],
                "colors_i0": [
                    1928,
                    1954,
                    1932,
                    1936
                ],
                "colors_i1": [
                    1929,
                    1954,
                    1939,
                    1933
                ],
                "extend": [
                    1956,
                    1961,
                    1931,
                    1966,
                    1935,
                    1938,
                    1941,
                    1944,
                    1951
                ],
                "extra_colors": [
                    1934,
                    1937,
                    1940,
                    1942,
                    1947
                ],
                "n_data_colors": [
                    1954,
                    1946,
                    1947,
                    1968
                ],
                "levels": [
                    1968,
                    1946,
                    1951
                ],
                "n_expected_colors": [
                    1947,
                    1948,
                    1951
                ],
                "cmap.set_under": [
                    1957,
                    1959
                ],
                "cmap.set_over": [
                    1962,
                    1964
                ],
                "cmap.colorbar_extend": [
                    1966
                ],
                "BoundaryNorm": [
                    1968
                ]
            },
            "filtered_variables_in_file": {
                "__init__": [
                    73
                ],
                "mapping": [
                    73
                ],
                "self.cache": [
                    74,
                    82,
                    78
                ],
                "self": [
                    1025,
                    1537,
                    1527,
                    1538,
                    521,
                    523,
                    524,
                    525,
                    1037,
                    1039,
                    531,
                    532,
                    533,
                    1043,
                    1044,
                    539,
                    540,
                    541,
                    547,
                    548,
                    549,
                    552,
                    553,
                    555,
                    556,
                    557,
                    559,
                    560,
                    1073,
                    1075,
                    567,
                    568,
                    569,
                    570,
                    1596,
                    74,
                    78,
                    82,
                    1624,
                    1118,
                    1119,
                    1120,
                    1122,
                    1126,
                    1128,
                    1129,
                    1130,
                    1142,
                    1143,
                    1144,
                    1153,
                    1155,
                    1156,
                    1158,
                    1163,
                    1165,
                    1166,
                    655,
                    656,
                    657,
                    658,
                    1168,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    667,
                    668,
                    669,
                    670,
                    671,
                    672,
                    1178,
                    1181,
                    1182,
                    1187,
                    678,
                    679,
                    1192,
                    1201,
                    1202,
                    1713,
                    1206,
                    1208,
                    1210,
                    1211,
                    1212,
                    716,
                    1234,
                    1236,
                    1237,
                    734,
                    1766,
                    744,
                    746,
                    1771,
                    1772,
                    1773,
                    1283,
                    1284,
                    1285,
                    1286,
                    1287,
                    1288,
                    1289,
                    778,
                    1290,
                    1292,
                    781,
                    1173,
                    1296,
                    785,
                    786,
                    1298,
                    1300,
                    789,
                    790,
                    1302,
                    1175,
                    1303,
                    1305,
                    1307,
                    1309,
                    798,
                    799,
                    800,
                    1310,
                    1312,
                    803,
                    804,
                    805,
                    806,
                    1313,
                    1833,
                    1835,
                    812,
                    813,
                    1837,
                    1839,
                    831,
                    833,
                    834,
                    861,
                    862,
                    863,
                    905,
                    907,
                    909,
                    911,
                    912,
                    416,
                    417,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    932,
                    934,
                    935,
                    430,
                    946,
                    947,
                    952,
                    953,
                    954,
                    955,
                    959,
                    456,
                    457,
                    476,
                    481,
                    483,
                    995,
                    996,
                    997,
                    487,
                    488,
                    491,
                    493,
                    495,
                    497,
                    1010,
                    1011,
                    1012,
                    1013,
                    1525,
                    1526,
                    1528,
                    1529,
                    1530,
                    1019,
                    1020,
                    1022
                ],
                "__setitem__": [
                    77
                ],
                "key": [
                    744,
                    81,
                    77,
                    742
                ],
                "value": [
                    891,
                    907,
                    1039,
                    1298,
                    1180,
                    937,
                    938,
                    941,
                    1077,
                    1078,
                    1208,
                    1081,
                    1336,
                    1339,
                    77,
                    1239,
                    1240,
                    1243,
                    1128,
                    882,
                    884,
                    885,
                    1019,
                    892
                ],
                "self.cache.clear": [
                    82,
                    78
                ],
                "__delitem__": [
                    81
                ],
                "_colors_full_map": [
                    96,
                    97,
                    323,
                    324,
                    102,
                    198,
                    201,
                    173,
                    179,
                    85,
                    87,
                    88,
                    91,
                    92,
                    93
                ],
                "_colors_full_map.update": [
                    96,
                    87,
                    88,
                    91,
                    92,
                    93
                ],
                "XKCD_COLORS": [
                    89,
                    87
                ],
                "k.replace": [
                    88,
                    93
                ],
                "k": [
                    88,
                    89,
                    90,
                    93,
                    94,
                    95
                ],
                "v": [
                    1443,
                    1432,
                    1448,
                    1433,
                    1454,
                    1424,
                    1459,
                    1462,
                    1437,
                    88,
                    89,
                    1434,
                    1467,
                    1468,
                    93,
                    94,
                    1469
                ],
                "XKCD_COLORS.items": [
                    89
                ],
                "CSS4_COLORS": [
                    91,
                    311
                ],
                "TABLEAU_COLORS": [
                    92,
                    94
                ],
                "TABLEAU_COLORS.items": [
                    94
                ],
                "BASE_COLORS": [
                    96
                ],
                "_ColorMapping": [
                    97
                ],
                "ex": [
                    106,
                    107,
                    109,
                    111
                ],
                "ret": [
                    1314,
                    1316,
                    1317,
                    109,
                    111,
                    112
                ],
                "ex.item": [
                    109
                ],
                "c": [
                    261,
                    262,
                    263,
                    264,
                    266,
                    267,
                    277,
                    280,
                    284,
                    285,
                    292,
                    167,
                    171,
                    173,
                    301,
                    303,
                    177,
                    305,
                    179,
                    191,
                    192,
                    193,
                    198,
                    201,
                    211,
                    213,
                    216,
                    219,
                    222,
                    228,
                    233,
                    234,
                    240,
                    241,
                    243,
                    117,
                    246,
                    247,
                    249,
                    123,
                    126
                ],
                "re.match": [
                    213,
                    219,
                    117
                ],
                "re": [
                    213,
                    312,
                    219,
                    117
                ],
                "_is_nth_color": [
                    123,
                    167
                ],
                "to_rgba": [
                    704,
                    547,
                    292,
                    326,
                    301,
                    531,
                    280,
                    539,
                    126,
                    286
                ],
                "to_rgba_array": [
                    146,
                    804,
                    327
                ],
                "c1": [
                    146
                ],
                "c2": [
                    146
                ],
                "prop_cycler": [
                    169,
                    170
                ],
                "rcParams": [
                    169
                ],
                "colors": [
                    781,
                    782,
                    784,
                    785,
                    787,
                    788,
                    791,
                    794,
                    1948,
                    1952,
                    1954,
                    1957,
                    170,
                    171,
                    812,
                    813,
                    1962,
                    692,
                    695,
                    696,
                    698,
                    700,
                    703,
                    323
                ],
                "get": [
                    170
                ],
                "prop_cycler.by_key": [
                    170
                ],
                "rgba": [
                    513,
                    515,
                    516,
                    173,
                    175,
                    176,
                    177,
                    179,
                    182
                ],
                "_colors_full_map.cache": [
                    179,
                    324,
                    173
                ],
                "alpha": [
                    265,
                    268,
                    269,
                    531,
                    280,
                    539,
                    286,
                    547,
                    173,
                    177,
                    179,
                    217,
                    223,
                    224,
                    228,
                    504,
                    243,
                    244,
                    245,
                    246,
                    499,
                    500,
                    502,
                    509
                ],
                "_to_rgba_no_colorcycle": [
                    177
                ],
                "orig_c": [
                    231,
                    205,
                    238,
                    191
                ],
                "c.lower": [
                    193,
                    201
                ],
                "cbook.warn_deprecated": [
                    206
                ],
                "cbook": [
                    277,
                    206
                ],
                "match": [
                    219,
                    220,
                    213,
                    214
                ],
                "n": [
                    216,
                    221,
                    222,
                    215
                ],
                "color": [
                    224,
                    225,
                    704,
                    547,
                    531,
                    539,
                    221,
                    703
                ],
                "np.array": [
                    1539,
                    359,
                    1416,
                    233,
                    363,
                    461,
                    1365,
                    1174,
                    280
                ],
                "np": [
                    1024,
                    1025,
                    1026,
                    1537,
                    1028,
                    1538,
                    1539,
                    1540,
                    1541,
                    1542,
                    525,
                    1041,
                    1053,
                    1054,
                    1059,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1587,
                    1077,
                    1078,
                    1079,
                    1590,
                    569,
                    570,
                    1085,
                    1089,
                    1120,
                    1640,
                    1138,
                    1139,
                    1152,
                    1153,
                    1154,
                    1155,
                    1163,
                    1164,
                    1165,
                    661,
                    1174,
                    1180,
                    692,
                    700,
                    1219,
                    1220,
                    1225,
                    1228,
                    1239,
                    1240,
                    1241,
                    1767,
                    233,
                    234,
                    261,
                    1286,
                    264,
                    270,
                    787,
                    1299,
                    1300,
                    278,
                    1302,
                    280,
                    1306,
                    284,
                    1311,
                    1314,
                    803,
                    812,
                    304,
                    1849,
                    1850,
                    1852,
                    1855,
                    1856,
                    1858,
                    1861,
                    1357,
                    1365,
                    1367,
                    1370,
                    1374,
                    358,
                    359,
                    363,
                    1902,
                    882,
                    885,
                    886,
                    888,
                    377,
                    891,
                    892,
                    893,
                    381,
                    382,
                    1408,
                    385,
                    391,
                    1416,
                    1418,
                    1426,
                    1427,
                    1428,
                    919,
                    920,
                    926,
                    937,
                    938,
                    945,
                    951,
                    1471,
                    459,
                    461,
                    1486,
                    1487,
                    464,
                    483,
                    491,
                    495,
                    500
                ],
                "np.can_cast": [
                    234
                ],
                "c.dtype": [
                    234,
                    261
                ],
                "c.ndim": [
                    234,
                    262
                ],
                "c.astype": [
                    240
                ],
                "elem": [
                    247
                ],
                "np.ndarray": [
                    261
                ],
                "c.dtype.kind": [
                    261
                ],
                "c.shape": [
                    266,
                    262,
                    263
                ],
                "result": [
                    1024,
                    1025,
                    1026,
                    1028,
                    1029,
                    264,
                    265,
                    267,
                    907,
                    269,
                    270,
                    909,
                    272,
                    1039,
                    914,
                    1041,
                    1043,
                    1148,
                    919,
                    920,
                    1050,
                    923,
                    284,
                    1053,
                    926,
                    286,
                    928,
                    287,
                    929,
                    1054,
                    1057,
                    1058,
                    1067,
                    1069,
                    1070,
                    1208,
                    1147,
                    1210,
                    1216,
                    1219,
                    1220,
                    1222,
                    1228,
                    1230,
                    1231,
                    1128,
                    1129,
                    1135,
                    1138,
                    1139,
                    1142,
                    1019,
                    1020,
                    893,
                    894
                ],
                "np.column_stack": [
                    264
                ],
                "np.zeros": [
                    264,
                    1306,
                    803,
                    278
                ],
                "c.copy": [
                    267
                ],
                "np.any": [
                    270
                ],
                "cbook._str_lower_equal": [
                    277
                ],
                "np.empty": [
                    284,
                    1590
                ],
                "i": [
                    1441,
                    1788,
                    1446,
                    1451,
                    1485,
                    1486,
                    1456,
                    1461,
                    1430,
                    1431,
                    1436,
                    1307,
                    1308,
                    285,
                    286,
                    1787
                ],
                "cc": [
                    285,
                    286
                ],
                "keep_alpha": [
                    302
                ],
                "join": [
                    304
                ],
                "np.round": [
                    304
                ],
                "val": [
                    705,
                    706,
                    707,
                    708,
                    938,
                    939,
                    304,
                    305,
                    1078,
                    1079,
                    1240,
                    1241,
                    1180,
                    1181,
                    1182,
                    703
                ],
                "cnames": [
                    311
                ],
                "hexColorPattern": [
                    312
                ],
                "re.compile": [
                    312
                ],
                "rgb2hex": [
                    313
                ],
                "to_hex": [
                    313
                ],
                "hex2color": [
                    314
                ],
                "to_rgb": [
                    314,
                    325
                ],
                "cache": [
                    324
                ],
                "colorConverter": [
                    330
                ],
                "ColorConverter": [
                    330
                ],
                "data": [
                    357,
                    742,
                    743,
                    359,
                    744,
                    1706,
                    363,
                    1708,
                    1712,
                    1713,
                    892,
                    893
                ],
                "xind": [
                    384,
                    358,
                    359,
                    381,
                    382
                ],
                "np.linspace": [
                    700,
                    381,
                    358,
                    812
                ],
                "N": [
                    800,
                    417,
                    358,
                    710,
                    780,
                    782,
                    656,
                    785,
                    791,
                    380,
                    381,
                    798
                ],
                "gamma": [
                    710,
                    678,
                    358,
                    1225,
                    1226,
                    1243,
                    658,
                    1202,
                    1236,
                    1241,
                    1211,
                    381
                ],
                "lut": [
                    385,
                    513,
                    391,
                    360,
                    359,
                    495,
                    497,
                    503,
                    504,
                    509
                ],
                "np.clip": [
                    483,
                    1220,
                    1861,
                    391,
                    359,
                    1640,
                    1139,
                    500,
                    1302,
                    920,
                    1054
                ],
                "adata": [
                    363,
                    366,
                    370,
                    371,
                    372
                ],
                "shape": [
                    366,
                    367
                ],
                "adata.shape": [
                    366
                ],
                "x": [
                    384,
                    739,
                    743,
                    370,
                    374,
                    377,
                    380,
                    382
                ],
                "y0": [
                    388,
                    371,
                    387,
                    743
                ],
                "y1": [
                    386,
                    387,
                    372,
                    743
                ],
                "np.diff": [
                    377
                ],
                "ind": [
                    384,
                    387,
                    382
                ],
                "np.searchsorted": [
                    382
                ],
                "distance": [
                    384,
                    387
                ],
                "np.concatenate": [
                    385
                ],
                "self.name": [
                    416,
                    716,
                    813,
                    734,
                    831
                ],
                "name": [
                    416,
                    800,
                    834,
                    710,
                    746,
                    656,
                    830,
                    733,
                    734,
                    831
                ],
                "self.N": [
                    1287,
                    1289,
                    661,
                    663,
                    665,
                    667,
                    670,
                    1310,
                    417,
                    803,
                    421,
                    422,
                    423,
                    559,
                    834,
                    476,
                    481,
                    483,
                    487,
                    746
                ],
                "self._rgba_bad": [
                    560,
                    418,
                    531
                ],
                "self._rgba_under": [
                    539,
                    553,
                    552,
                    419
                ],
                "self._rgba_over": [
                    547,
                    420,
                    557,
                    556
                ],
                "self._i_under": [
                    488,
                    553,
                    555,
                    421
                ],
                "self._i_over": [
                    559,
                    557,
                    422,
                    487
                ],
                "self._i_bad": [
                    560,
                    491,
                    493,
                    423
                ],
                "self._isinit": [
                    548,
                    805,
                    424,
                    456,
                    524,
                    532,
                    567,
                    540,
                    671
                ],
                "self.colorbar_extend": [
                    430
                ],
                "self._init": [
                    568,
                    457,
                    679
                ],
                "mask_bad": [
                    489,
                    458,
                    490,
                    491,
                    492,
                    465
                ],
                "np.iterable": [
                    937,
                    459,
                    882,
                    787,
                    692,
                    1077,
                    1239
                ],
                "X": [
                    464,
                    459,
                    461
                ],
                "vtype": [
                    514,
                    460,
                    463
                ],
                "xa": [
                    481,
                    513,
                    483,
                    484,
                    487,
                    488,
                    490,
                    491,
                    461,
                    493,
                    466,
                    472,
                    473,
                    475,
                    476,
                    479
                ],
                "xma": [
                    464,
                    465,
                    466,
                    467
                ],
                "np.ma.array": [
                    1314,
                    1220,
                    1067,
                    1228,
                    464,
                    1139,
                    1054,
                    920,
                    893,
                    926
                ],
                "np.ma": [
                    1024,
                    1026,
                    1041,
                    1299,
                    919,
                    920,
                    1180,
                    1053,
                    1054,
                    926,
                    1314,
                    1059,
                    938,
                    1067,
                    1078,
                    1079,
                    1085,
                    1089,
                    1219,
                    1220,
                    1228,
                    464,
                    1240,
                    1241,
                    1138,
                    1139,
                    891,
                    892,
                    893
                ],
                "xma.mask": [
                    465
                ],
                "xma.filled": [
                    466
                ],
                "xa.dtype.isnative": [
                    472
                ],
                "xa.dtype": [
                    472,
                    475
                ],
                "newbyteorder": [
                    473
                ],
                "xa.byteswap": [
                    473
                ],
                "xa.dtype.kind": [
                    475
                ],
                "xa.astype": [
                    484
                ],
                "mask_bad.shape": [
                    490
                ],
                "xa.shape": [
                    490
                ],
                "np.copyto": [
                    491,
                    1063
                ],
                "xa.fill": [
                    493
                ],
                "astype": [
                    1430,
                    1311,
                    1174,
                    495
                ],
                "self._lut": [
                    803,
                    804,
                    553,
                    555,
                    525,
                    557,
                    495,
                    559,
                    497,
                    560,
                    661,
                    662,
                    666,
                    664,
                    569,
                    570,
                    669
                ],
                "np.uint8": [
                    495
                ],
                "self._lut.copy": [
                    497
                ],
                "lut.take": [
                    513
                ],
                "cls": [
                    521,
                    522
                ],
                "self.__class__": [
                    521
                ],
                "cmapobject": [
                    522,
                    523,
                    525,
                    526
                ],
                "cls.__new__": [
                    522
                ],
                "cmapobject.__dict__.update": [
                    523
                ],
                "cmapobject.__dict__": [
                    523
                ],
                "self.__dict__": [
                    523
                ],
                "cmapobject._lut": [
                    525
                ],
                "np.copy": [
                    525
                ],
                "self._set_extremes": [
                    672,
                    549,
                    806,
                    533,
                    541
                ],
                "np.all": [
                    569,
                    570
                ],
                "Colormap": [
                    656,
                    800,
                    749,
                    598
                ],
                "self.monochrome": [
                    778,
                    655,
                    786,
                    789,
                    799
                ],
                "Colormap.__init__": [
                    656,
                    800
                ],
                "self._segmentdata": [
                    744,
                    716,
                    657,
                    663,
                    665,
                    667,
                    668,
                    670
                ],
                "segmentdata": [
                    657
                ],
                "self._gamma": [
                    678,
                    746,
                    658,
                    663,
                    665,
                    667
                ],
                "np.ones": [
                    661
                ],
                "makeMappingArray": [
                    664,
                    666,
                    669,
                    662
                ],
                "Sized": [
                    695
                ],
                "vals": [
                    698,
                    700,
                    703
                ],
                "cdict": [
                    705,
                    706,
                    707,
                    708,
                    710,
                    702
                ],
                "r": [
                    704,
                    705,
                    1442,
                    1447,
                    1452,
                    1457,
                    1426,
                    1462,
                    1467,
                    1437,
                    1471
                ],
                "g": [
                    704,
                    706,
                    1443,
                    1448,
                    1453,
                    1458,
                    1427,
                    1463,
                    1468,
                    1438,
                    1471
                ],
                "b": [
                    704,
                    707,
                    1444,
                    1449,
                    1471,
                    1454,
                    1459,
                    1428,
                    1464,
                    1307,
                    1308,
                    1469,
                    1439
                ],
                "a": [
                    704,
                    1153,
                    1154,
                    1155,
                    708,
                    1157,
                    1158,
                    1159,
                    1163,
                    1164,
                    1165,
                    1167,
                    1168,
                    1169
                ],
                "append": [
                    705,
                    706,
                    707,
                    708
                ],
                "LinearSegmentedColormap": [
                    746,
                    716,
                    710
                ],
                "lutsize": [
                    716,
                    812
                ],
                "dat": [
                    739
                ],
                "func_r": [
                    740
                ],
                "data_r": [
                    746,
                    742
                ],
                "factory": [
                    742
                ],
                "self._segmentdata.items": [
                    744
                ],
                "self.colors": [
                    833,
                    804,
                    781,
                    785,
                    790,
                    798
                ],
                "itertools.islice": [
                    791
                ],
                "itertools": [
                    791
                ],
                "itertools.cycle": [
                    791
                ],
                "gray": [
                    794,
                    798
                ],
                "ListedColormap": [
                    1954,
                    834,
                    813
                ],
                "colors_r": [
                    833,
                    834
                ],
                "self.vmin": [
                    1025,
                    1284,
                    911,
                    1044,
                    1173,
                    1302,
                    1312,
                    934,
                    946,
                    1075,
                    952,
                    953,
                    1212,
                    959,
                    1237,
                    861,
                    996,
                    1130,
                    1010,
                    1011,
                    1022
                ],
                "_sanitize_extrema": [
                    861,
                    862
                ],
                "vmin": [
                    911,
                    913,
                    915,
                    1044,
                    1045,
                    1173,
                    1047,
                    920,
                    1049,
                    1174,
                    924,
                    925,
                    1054,
                    934,
                    1065,
                    1066,
                    939,
                    1705,
                    941,
                    1706,
                    1710,
                    1201,
                    1075,
                    1079,
                    1081,
                    1212,
                    1213,
                    1215,
                    1220,
                    1223,
                    1226,
                    1237,
                    1241,
                    1243,
                    861,
                    1118,
                    1121,
                    996,
                    1001,
                    1130,
                    1132,
                    1134,
                    1139
                ],
                "self.vmax": [
                    1025,
                    1285,
                    912,
                    1044,
                    1173,
                    1300,
                    1302,
                    1313,
                    935,
                    947,
                    1075,
                    954,
                    955,
                    1212,
                    959,
                    1237,
                    862,
                    997,
                    1130,
                    1012,
                    1013,
                    1022
                ],
                "vmax": [
                    912,
                    913,
                    915,
                    1044,
                    1045,
                    1173,
                    1174,
                    920,
                    1049,
                    925,
                    1054,
                    935,
                    1066,
                    939,
                    1707,
                    941,
                    1708,
                    1710,
                    1201,
                    1075,
                    1079,
                    1081,
                    1212,
                    1213,
                    1215,
                    1220,
                    1226,
                    1237,
                    1241,
                    1243,
                    862,
                    1118,
                    1121,
                    997,
                    998,
                    1130,
                    1132,
                    1134,
                    1139
                ],
                "self.clip": [
                    1283,
                    1126,
                    905,
                    1037,
                    1296,
                    1206,
                    863
                ],
                "clip": [
                    1283,
                    904,
                    905,
                    1036,
                    1037,
                    1295,
                    1296,
                    1301,
                    918,
                    1052,
                    1201,
                    1205,
                    1206,
                    1218,
                    1118,
                    863,
                    1125,
                    1126,
                    1137
                ],
                "is_scalar": [
                    1027,
                    1315,
                    1128,
                    907,
                    1068,
                    1229,
                    1039,
                    882,
                    883,
                    1298,
                    1208,
                    1146,
                    1019,
                    894,
                    927
                ],
                "dtype": [
                    888,
                    893,
                    885,
                    886
                ],
                "np.min_scalar_type": [
                    885
                ],
                "np.issubdtype": [
                    886
                ],
                "np.integer": [
                    886
                ],
                "dtype.type": [
                    886
                ],
                "np.bool_": [
                    886
                ],
                "np.promote_types": [
                    888,
                    1418,
                    1367
                ],
                "np.float32": [
                    888,
                    1418,
                    1367
                ],
                "mask": [
                    1299,
                    919,
                    921,
                    1053,
                    1055,
                    1058,
                    1059,
                    1060,
                    1314,
                    1062,
                    1063,
                    1067,
                    1219,
                    1221,
                    1138,
                    1140,
                    1786,
                    891,
                    1788,
                    893
                ],
                "np.ma.getmask": [
                    1026,
                    1219,
                    1138,
                    919,
                    891,
                    1053
                ],
                "np.asarray": [
                    1408,
                    892,
                    1357,
                    1286
                ],
                "np.ma.getdata": [
                    892
                ],
                "self.process_value": [
                    934,
                    935,
                    1128,
                    907,
                    911,
                    912,
                    1039,
                    1298,
                    1208,
                    1019
                ],
                "self.autoscale_None": [
                    1129,
                    909,
                    1043,
                    1210,
                    1020
                ],
                "_": [
                    912,
                    935,
                    934,
                    911
                ],
                "result.fill": [
                    1216,
                    914,
                    1050,
                    1135
                ],
                "result.filled": [
                    920,
                    1139,
                    1220,
                    1054
                ],
                "resdat": [
                    923,
                    924,
                    925,
                    926,
                    1057,
                    1060,
                    1062,
                    1063,
                    1064,
                    1065,
                    1066,
                    1067,
                    1222,
                    1223,
                    1224,
                    1225,
                    1226,
                    1228,
                    1142,
                    1143,
                    1144
                ],
                "result.data": [
                    1057,
                    923,
                    1222,
                    1142
                ],
                "result.mask": [
                    1058,
                    1228,
                    926
                ],
                "self.scaled": [
                    1073,
                    1178,
                    932,
                    1234
                ],
                "np.ma.asarray": [
                    1240,
                    938,
                    1180,
                    1078
                ],
                "A": [
                    1089,
                    1186,
                    1191,
                    945,
                    946,
                    947,
                    1009,
                    951,
                    952,
                    953,
                    954,
                    955,
                    1085
                ],
                "np.asanyarray": [
                    945,
                    951
                ],
                "A.min": [
                    953,
                    946
                ],
                "A.max": [
                    947,
                    955
                ],
                "A.size": [
                    952,
                    954
                ],
                "Normalize": [
                    962,
                    1092,
                    1032,
                    1195,
                    1710,
                    1201,
                    1330,
                    1246,
                    1118
                ],
                "self.vcenter": [
                    1025,
                    995,
                    1010,
                    1011,
                    1012,
                    1013,
                    1022
                ],
                "vcenter": [
                    1001,
                    995,
                    998
                ],
                "autoscale_None": [
                    1089,
                    1009,
                    1191
                ],
                "np.ma.masked_array": [
                    1024
                ],
                "np.interp": [
                    1025
                ],
                "np.atleast_1d": [
                    1028,
                    1300
                ],
                "np.ma.masked_less_equal": [
                    1089,
                    1041,
                    1085
                ],
                "np.ma.nomask": [
                    1059
                ],
                "np.log": [
                    1064,
                    1065,
                    1066,
                    1155
                ],
                "np.ma.power": [
                    1241,
                    1079
                ],
                "autoscale": [
                    1186,
                    1085
                ],
                "Normalize.__init__": [
                    1201,
                    1118
                ],
                "self.linthresh": [
                    1153,
                    1155,
                    1156,
                    1163,
                    1165,
                    1166,
                    1119
                ],
                "linthresh": [
                    1119
                ],
                "self._linscale_adj": [
                    1120,
                    1155,
                    1158,
                    1163,
                    1165,
                    1168
                ],
                "linscale": [
                    1120
                ],
                "np.e": [
                    1120
                ],
                "self._transform_vmin_vmax": [
                    1192,
                    1122,
                    1187
                ],
                "self._transform": [
                    1142,
                    1175
                ],
                "self._lower": [
                    1144,
                    1175,
                    1181,
                    1143
                ],
                "self._upper": [
                    1144,
                    1181,
                    1175
                ],
                "np.errstate": [
                    1152
                ],
                "masked": [
                    1153,
                    1154,
                    1155,
                    1157,
                    1158,
                    1163,
                    1164,
                    1165,
                    1167,
                    1168
                ],
                "np.abs": [
                    1856,
                    1153,
                    1155,
                    1163,
                    1850
                ],
                "sign": [
                    1154,
                    1156,
                    1164,
                    1165,
                    1166
                ],
                "np.sign": [
                    1154,
                    1164
                ],
                "log": [
                    1155,
                    1156,
                    1157
                ],
                "exp": [
                    1165,
                    1166,
                    1167
                ],
                "np.exp": [
                    1165
                ],
                "arr": [
                    1174,
                    1175,
                    1357,
                    1485,
                    1486,
                    1360,
                    1362,
                    1364,
                    1365,
                    1366,
                    1367,
                    1370,
                    1371,
                    1373,
                    1378,
                    1379,
                    1381,
                    1382,
                    1384,
                    1385
                ],
                "self._inv_transform": [
                    1182
                ],
                "self.gamma": [
                    1202,
                    1211,
                    1236
                ],
                "np.power": [
                    1225
                ],
                "boundaries": [
                    1284,
                    1285,
                    1286
                ],
                "self.boundaries": [
                    1307,
                    1286,
                    1287
                ],
                "self.Ncmap": [
                    1288,
                    1289,
                    1303,
                    1305,
                    1310
                ],
                "ncolors": [
                    1288
                ],
                "self._interp": [
                    1290,
                    1292,
                    1309
                ],
                "xx": [
                    1312,
                    1313,
                    1298,
                    1299,
                    1300,
                    1302,
                    1306,
                    1308
                ],
                "np.ma.getmaskarray": [
                    1299
                ],
                "xx.filled": [
                    1300
                ],
                "max_col": [
                    1305,
                    1313,
                    1303
                ],
                "iret": [
                    1312,
                    1313,
                    1314,
                    1306,
                    1308,
                    1311
                ],
                "xx.shape": [
                    1306
                ],
                "np.int16": [
                    1306,
                    1311
                ],
                "scalefac": [
                    1310,
                    1311
                ],
                "arr.shape": [
                    1360,
                    1362,
                    1364,
                    1485
                ],
                "in_shape": [
                    1415,
                    1473,
                    1364,
                    1391
                ],
                "arr.dtype": [
                    1367
                ],
                "out": [
                    1379,
                    1382,
                    1385,
                    1387,
                    1388,
                    1389,
                    1391,
                    1370
                ],
                "np.zeros_like": [
                    1370,
                    1374
                ],
                "arr_max": [
                    1378,
                    1381,
                    1384,
                    1389,
                    1371,
                    1372,
                    1375
                ],
                "arr.max": [
                    1371
                ],
                "ipos": [
                    1376,
                    1378,
                    1381,
                    1384,
                    1372,
                    1375
                ],
                "delta": [
                    1376,
                    1379,
                    1382,
                    1385,
                    1373,
                    1374,
                    1375
                ],
                "arr.ptp": [
                    1373
                ],
                "s": [
                    1388,
                    1423,
                    1466,
                    1432,
                    1433,
                    1434,
                    1374,
                    1375
                ],
                "idx": [
                    1436,
                    1437,
                    1438,
                    1439,
                    1441,
                    1442,
                    1443,
                    1444,
                    1446,
                    1447,
                    1448,
                    1449,
                    1451,
                    1452,
                    1453,
                    1454,
                    1456,
                    1457,
                    1458,
                    1459,
                    1461,
                    1462,
                    1463,
                    1464,
                    1466,
                    1467,
                    1468,
                    1469,
                    1378,
                    1379,
                    1381,
                    1382,
                    1384,
                    1385
                ],
                "out.reshape": [
                    1391
                ],
                "hsv": [
                    1408,
                    1411,
                    1413,
                    1415,
                    1416,
                    1417,
                    1418,
                    1422,
                    1423,
                    1424,
                    1846,
                    1849,
                    1850,
                    1851,
                    1852,
                    1854,
                    1855,
                    1856,
                    1857,
                    1858,
                    1860,
                    1861,
                    1863
                ],
                "hsv.shape": [
                    1411,
                    1413,
                    1415
                ],
                "hsv.dtype": [
                    1418
                ],
                "h": [
                    1422,
                    1426,
                    1427,
                    1428,
                    1430,
                    1431
                ],
                "np.empty_like": [
                    1426,
                    1427,
                    1428
                ],
                "f": [
                    1433,
                    1434,
                    1431
                ],
                "p": [
                    1444,
                    1447,
                    1452,
                    1458,
                    1463,
                    1432,
                    1439
                ],
                "q": [
                    1464,
                    1433,
                    1442,
                    1453
                ],
                "t": [
                    1449,
                    1434,
                    1457,
                    1438
                ],
                "rgb": [
                    1473,
                    1900,
                    1901,
                    1902,
                    1776,
                    1779,
                    1846,
                    1882,
                    1788,
                    1471
                ],
                "np.stack": [
                    1471
                ],
                "rgb.reshape": [
                    1473
                ],
                "sum_sq": [
                    1484,
                    1486,
                    1487
                ],
                "np.square": [
                    1486
                ],
                "np.newaxis": [
                    1486,
                    1767
                ],
                "np.sqrt": [
                    1487
                ],
                "self.azdeg": [
                    1537,
                    1525
                ],
                "azdeg": [
                    1525
                ],
                "self.altdeg": [
                    1538,
                    1526
                ],
                "altdeg": [
                    1526
                ],
                "self.hsv_min_val": [
                    1839,
                    1527
                ],
                "hsv_min_val": [
                    1860,
                    1839,
                    1838,
                    1527
                ],
                "self.hsv_max_val": [
                    1528,
                    1835
                ],
                "hsv_max_val": [
                    1528,
                    1834,
                    1835,
                    1854
                ],
                "self.hsv_min_sat": [
                    1529,
                    1837
                ],
                "hsv_min_sat": [
                    1857,
                    1529,
                    1836,
                    1837
                ],
                "self.hsv_max_sat": [
                    1833,
                    1530
                ],
                "hsv_max_sat": [
                    1832,
                    1833,
                    1530,
                    1851
                ],
                "az": [
                    1537,
                    1540,
                    1541
                ],
                "np.radians": [
                    1537,
                    1538
                ],
                "alt": [
                    1538,
                    1540,
                    1541,
                    1542
                ],
                "np.cos": [
                    1540,
                    1541
                ],
                "np.sin": [
                    1541,
                    1542
                ],
                "dy": [
                    1584,
                    1714,
                    1587,
                    1766
                ],
                "e_dy": [
                    1592,
                    1587
                ],
                "e_dx": [
                    1587,
                    1591
                ],
                "np.gradient": [
                    1587
                ],
                "vert_exag": [
                    1714,
                    1587,
                    1766
                ],
                "elevation": [
                    1766,
                    1587,
                    1590
                ],
                "dx": [
                    1714,
                    1587,
                    1766
                ],
                "normal": [
                    1590,
                    1591,
                    1592,
                    1593,
                    1594,
                    1596
                ],
                "view": [
                    1590
                ],
                "elevation.shape": [
                    1590
                ],
                "_vector_magnitude": [
                    1594
                ],
                "self.shade_normals": [
                    1596
                ],
                "fraction": [
                    1715,
                    1596,
                    1766,
                    1628
                ],
                "intensity": [
                    1842,
                    1843,
                    1850,
                    1851,
                    1853,
                    1854,
                    1856,
                    1857,
                    1859,
                    1860,
                    1624,
                    1882,
                    1627,
                    1628,
                    1638,
                    1639,
                    1640,
                    1766,
                    1642,
                    1767,
                    1900,
                    1901,
                    1776,
                    1779,
                    1785,
                    1786
                ],
                "normals.dot": [
                    1624
                ],
                "normals": [
                    1624
                ],
                "self.direction": [
                    1624
                ],
                "imin": [
                    1633,
                    1627,
                    1638,
                    1639
                ],
                "imax": [
                    1633,
                    1627,
                    1639
                ],
                "intensity.min": [
                    1627
                ],
                "intensity.max": [
                    1627
                ],
                "data.min": [
                    1706
                ],
                "data.max": [
                    1708
                ],
                "norm": [
                    1709,
                    1710,
                    1712,
                    1968,
                    1969
                ],
                "rgb0": [
                    1712,
                    1713,
                    1717,
                    1718
                ],
                "cmap": [
                    1954,
                    1957,
                    1959,
                    1962,
                    1964,
                    1966,
                    1712,
                    1969
                ],
                "rgb1": [
                    1713,
                    1717
                ],
                "self.shade_rgb": [
                    1713
                ],
                "blend_mode": [
                    1776,
                    1713,
                    1779,
                    1775
                ],
                "kwargs": [
                    1776,
                    1715,
                    1779
                ],
                "self.hillshade": [
                    1766
                ],
                "lookup": [
                    1776,
                    1770,
                    1782,
                    1775
                ],
                "self.blend_hsv": [
                    1771
                ],
                "self.blend_soft_light": [
                    1772
                ],
                "self.blend_overlay": [
                    1773
                ],
                "blend": [
                    1776,
                    1779,
                    1788,
                    1790
                ],
                "lookup.keys": [
                    1782
                ],
                "intensity.mask": [
                    1786
                ],
                "rgb_to_hsv": [
                    1846
                ],
                "np.putmask": [
                    1849,
                    1858,
                    1852,
                    1855
                ],
                "hsv_to_rgb": [
                    1863
                ],
                "low": [
                    1900,
                    1902
                ],
                "high": [
                    1901,
                    1902
                ],
                "np.where": [
                    1902
                ],
                "colors_i0": [
                    1928,
                    1954,
                    1932,
                    1936
                ],
                "colors_i1": [
                    1929,
                    1954,
                    1939,
                    1933
                ],
                "extend": [
                    1956,
                    1961,
                    1931,
                    1966,
                    1935,
                    1938,
                    1941,
                    1944,
                    1951
                ],
                "extra_colors": [
                    1934,
                    1937,
                    1940,
                    1942,
                    1947
                ],
                "n_data_colors": [
                    1954,
                    1946,
                    1947,
                    1968
                ],
                "levels": [
                    1968,
                    1946,
                    1951
                ],
                "n_expected_colors": [
                    1947,
                    1948,
                    1951
                ],
                "cmap.set_under": [
                    1957,
                    1959
                ],
                "cmap.set_over": [
                    1962,
                    1964
                ],
                "cmap.colorbar_extend": [
                    1966
                ],
                "BoundaryNorm": [
                    1968
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/matplotlib_30/lib/matplotlib/tests/test_colors.py",
                "test_function": "test_makeMappingArray",
                "test_function_code": "@pytest.mark.parametrize('N, result', [\n    (5, [1, .6, .2, .1, 0]),\n    (2, [1, 0]),\n    (1, [0]),\n])\ndef test_makeMappingArray(N, result):\n    data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n    assert_array_almost_equal(mcolors.makeMappingArray(N, data), result)",
                "test_error": "AssertionError: \nArrays are not almost equal to 6 decimals\n\n(shapes (2,), (1,) mismatch)\n x: array([1., 0.])\n y: array([0])",
                "full_test_error": "N = 1, result = [0]\n\n    @pytest.mark.parametrize('N, result', [\n        (5, [1, .6, .2, .1, 0]),\n        (2, [1, 0]),\n        (1, [0]),\n    ])\n    def test_makeMappingArray(N, result):\n        data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n>       assert_array_almost_equal(mcolors.makeMappingArray(N, data), result)\n\nlib/matplotlib/tests/test_colors.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: in inner\n    return func(*args, **kwds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<function assert_array_almost_equal.<locals>.compare at 0x10bff28b0>, array([1., 0.]), [0])\nkwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not almost equal to 6 decimals\nE           \nE           (shapes (2,), (1,) mismatch)\nE            x: array([1., 0.])\nE            y: array([0])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "traceback": "/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: in inner\n    return func(*args, **kwds)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<function assert_array_almost_equal.<locals>.compare at 0x10bff28b0>, array([1., 0.]), [0])\nkwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}\n\n    @wraps(func)\n    def inner(*args, **kwds):\n        with self._recreate_cm():\n>           return func(*args, **kwds)\nE           AssertionError: \nE           Arrays are not almost equal to 6 decimals\nE           \nE           (shapes (2,), (1,) mismatch)\nE            x: array([1., 0.])\nE            y: array([0])\n\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/contextlib.py:75: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('N, result', [(5, [1, 0.6, 0.2, 0.1, 0]), (2, [1, 0]), (1, [0])])"
                ]
            }
        ]
    }
}