{
    "matplotlib:7": {
        "/Volumes/SSD2T/bgp_envs/repos/matplotlib_7/lib/matplotlib/colors.py": {
            "buggy_functions": [
                {
                    "function_name": "shade_rgb",
                    "function_code": "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given *elevation*.\n\n    Parameters\n    ----------\n    rgb : array-like\n        An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n    elevation : array-like\n        An (M, N) array of the height values used to generate a shaded map.\n    fraction : number\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data values\n        with the illumination intensity.  For backwards compatibility, this\n        defaults to \"hsv\". Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to combine an\n        MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n        array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``)\n        Additional kwargs supplied to this function will be passed on to\n        the *blend_mode* function.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n\n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys)) from err\n\n    # Only apply result where hillshade intensity isn't masked\n    if hasattr(intensity, 'mask'):\n        mask = intensity.mask[..., 0]\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n\n    return blend\n",
                    "decorators": [],
                    "docstring": "Use this light source to adjust the colors of the *rgb* input array to\ngive the impression of a shaded relief map with the given *elevation*.\n\nParameters\n----------\nrgb : array-like\n    An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\nelevation : array-like\n    An (M, N) array of the height values used to generate a shaded map.\nfraction : number\n    Increases or decreases the contrast of the hillshade.  Values\n    greater than one will cause intermediate values to move closer to\n    full illumination or shadow (and clipping any values that move\n    beyond 0 or 1). Note that this is not visually or mathematically\n    the same as vertical exaggeration.\nblend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n    The type of blending used to combine the colormapped data values\n    with the illumination intensity.  For backwards compatibility, this\n    defaults to \"hsv\". Note that for most topographic surfaces,\n    \"overlay\" or \"soft\" appear more visually realistic. If a\n    user-defined function is supplied, it is expected to combine an\n    MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n    array (also 0 to 1).  (Call signature\n    ``func(rgb, illum, **kwargs)``)\n    Additional kwargs supplied to this function will be passed on to\n    the *blend_mode* function.\nvert_exag : number, optional\n    The amount to exaggerate the elevation values by when calculating\n    illumination. This can be used either to correct for differences in\n    units between the x-y coordinate system and the elevation\n    coordinate system (e.g. decimal degrees vs. meters) or to\n    exaggerate or de-emphasize topography.\ndx : number, optional\n    The x-spacing (columns) of the input *elevation* grid.\ndy : number, optional\n    The y-spacing (rows) of the input *elevation* grid.\nAdditional kwargs are passed on to the *blend_mode* function.\n\nReturns\n-------\nndarray\n    An (m, n, 3) array of floats ranging between 0-1.",
                    "start_line": 1873,
                    "end_line": 1944,
                    "variables": {
                        "intensity": [
                            1920,
                            1921,
                            1930,
                            1933,
                            1939,
                            1940
                        ],
                        "self.hillshade": [
                            1920
                        ],
                        "self": [
                            1920,
                            1925,
                            1926,
                            1927
                        ],
                        "elevation": [
                            1920
                        ],
                        "vert_exag": [
                            1920
                        ],
                        "dx": [
                            1920
                        ],
                        "dy": [
                            1920
                        ],
                        "fraction": [
                            1920
                        ],
                        "np.newaxis": [
                            1921
                        ],
                        "np": [
                            1921
                        ],
                        "lookup": [
                            1936,
                            1929,
                            1930,
                            1924
                        ],
                        "self.blend_hsv": [
                            1925
                        ],
                        "self.blend_soft_light": [
                            1926
                        ],
                        "self.blend_overlay": [
                            1927
                        ],
                        "blend_mode": [
                            1929,
                            1930,
                            1933
                        ],
                        "blend": [
                            1944,
                            1930,
                            1933,
                            1942
                        ],
                        "rgb": [
                            1930,
                            1933,
                            1942
                        ],
                        "kwargs": [
                            1930,
                            1933
                        ],
                        "TypeError": [
                            1934
                        ],
                        "ValueError": [
                            1935
                        ],
                        "format": [
                            1935
                        ],
                        "lookup.keys": [
                            1936
                        ],
                        "err": [
                            1936
                        ],
                        "hasattr": [
                            1939
                        ],
                        "mask": [
                            1940,
                            1942
                        ],
                        "intensity.mask": [
                            1940
                        ],
                        "i": [
                            1941,
                            1942
                        ],
                        "range": [
                            1941
                        ]
                    },
                    "filtered_variables": {
                        "intensity": [
                            1920,
                            1921,
                            1930,
                            1933,
                            1939,
                            1940
                        ],
                        "self.hillshade": [
                            1920
                        ],
                        "self": [
                            1920,
                            1925,
                            1926,
                            1927
                        ],
                        "elevation": [
                            1920
                        ],
                        "vert_exag": [
                            1920
                        ],
                        "dx": [
                            1920
                        ],
                        "dy": [
                            1920
                        ],
                        "fraction": [
                            1920
                        ],
                        "np.newaxis": [
                            1921
                        ],
                        "np": [
                            1921
                        ],
                        "lookup": [
                            1936,
                            1929,
                            1930,
                            1924
                        ],
                        "self.blend_hsv": [
                            1925
                        ],
                        "self.blend_soft_light": [
                            1926
                        ],
                        "self.blend_overlay": [
                            1927
                        ],
                        "blend_mode": [
                            1929,
                            1930,
                            1933
                        ],
                        "blend": [
                            1944,
                            1930,
                            1933,
                            1942
                        ],
                        "rgb": [
                            1930,
                            1933,
                            1942
                        ],
                        "kwargs": [
                            1930,
                            1933
                        ],
                        "lookup.keys": [
                            1936
                        ],
                        "err": [
                            1936
                        ],
                        "mask": [
                            1940,
                            1942
                        ],
                        "intensity.mask": [
                            1940
                        ],
                        "i": [
                            1941,
                            1942
                        ]
                    },
                    "diff_line_number": 1939,
                    "class_data": {
                        "signature": "class LightSource()",
                        "docstring": "Create a light source coming from the specified azimuth and elevation.\nAngles are in degrees, with the azimuth measured\nclockwise from north and elevation up from the zero plane of the surface.\n\n`shade` is used to produce \"shaded\" rgb values for a data array.\n`shade_rgb` can be used to combine an rgb image with an elevation map.\n`hillshade` produces an illumination map of a surface.",
                        "constructor_docstring": "Specify the azimuth (measured clockwise from south) and altitude\n(measured up from the plane of the surface) of the light source\nin degrees.\n\nParameters\n----------\nazdeg : float, default: 315 degrees (from the northwest)\n    The azimuth (0-360, degrees clockwise from North) of the light\n    source.\naltdeg : float, default: 45 degrees\n    The altitude (0-90, degrees up from horizontal) of the light\n    source.\n\nNotes\n-----\nFor backwards compatibility, the parameters *hsv_min_val*,\n*hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at\ninitialization as well.  However, these parameters will only be used if\n\"blend_mode='hsv'\" is passed into `shade` or `shade_rgb`.\nSee the documentation for `blend_hsv` for more details.",
                        "functions": [
                            "def __init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1, hsv_min_sat=1, hsv_max_sat=0):\n    \"\"\"\n    Specify the azimuth (measured clockwise from south) and altitude\n    (measured up from the plane of the surface) of the light source\n    in degrees.\n\n    Parameters\n    ----------\n    azdeg : float, default: 315 degrees (from the northwest)\n        The azimuth (0-360, degrees clockwise from North) of the light\n        source.\n    altdeg : float, default: 45 degrees\n        The altitude (0-90, degrees up from horizontal) of the light\n        source.\n\n    Notes\n    -----\n    For backwards compatibility, the parameters *hsv_min_val*,\n    *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at\n    initialization as well.  However, these parameters will only be used if\n    \"blend_mode='hsv'\" is passed into `shade` or `shade_rgb`.\n    See the documentation for `blend_hsv` for more details.\n    \"\"\"\n    self.azdeg = azdeg\n    self.altdeg = altdeg\n    self.hsv_min_val = hsv_min_val\n    self.hsv_max_val = hsv_max_val\n    self.hsv_min_sat = hsv_min_sat\n    self.hsv_max_sat = hsv_max_sat",
                            "@property\ndef direction(self):\n    \"\"\"The unit vector direction towards the light source.\"\"\"\n    az = np.radians(90 - self.azdeg)\n    alt = np.radians(self.altdeg)\n    return np.array([np.cos(az) * np.cos(alt), np.sin(az) * np.cos(alt), np.sin(alt)])",
                            "def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0):\n    \"\"\"\n    Calculate the illumination intensity for a surface using the defined\n    azimuth and elevation for the light source.\n\n    This computes the normal vectors for the surface, and then passes them\n    on to `shade_normals`\n\n    Parameters\n    ----------\n    elevation : array-like\n        A 2d array (or equivalent) of the height values used to generate an\n        illumination map\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topographic effects.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n    dy = -dy\n    e_dy, e_dx = np.gradient(vert_exag * elevation, dy, dx)\n    normal = np.empty(elevation.shape + (3,)).view(type(elevation))\n    normal[..., 0] = -e_dx\n    normal[..., 1] = -e_dy\n    normal[..., 2] = 1\n    normal /= _vector_magnitude(normal)\n    return self.shade_normals(normal, fraction)",
                            "def shade_normals(self, normals, fraction=1.0):\n    \"\"\"\n    Calculate the illumination intensity for the normal vectors of a\n    surface using the defined azimuth and elevation for the light source.\n\n    Imagine an artificial sun placed at infinity in some azimuth and\n    elevation position illuminating our surface. The parts of the surface\n    that slope toward the sun should brighten while those sides facing away\n    should become darker.\n\n    Parameters\n    ----------\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n    intensity = normals.dot(self.direction)\n    imin, imax = (intensity.min(), intensity.max())\n    intensity *= fraction\n    if imax - imin > 1e-06:\n        intensity -= imin\n        intensity /= imax - imin\n    intensity = np.clip(intensity, 0, 1)\n    return intensity",
                            "def shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None, vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs):\n    \"\"\"\n    Combine colormapped data values with an illumination intensity map\n    (a.k.a.  \"hillshade\") of the values.\n\n    Parameters\n    ----------\n    data : array-like\n        A 2d array (or equivalent) of the height values used to generate a\n        shaded map.\n    cmap : `~matplotlib.colors.Colormap`\n        The colormap used to color the *data* array. Note that this must be\n        a `~matplotlib.colors.Colormap` instance.  For example, rather than\n        passing in ``cmap='gist_earth'``, use\n        ``cmap=plt.get_cmap('gist_earth')`` instead.\n    norm : `~matplotlib.colors.Normalize` instance, optional\n        The normalization used to scale values before colormapping. If\n        None, the input will be linearly scaled between its min and max.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data\n        values with the illumination intensity.  Default is\n        \"overlay\".  Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to\n        combine an MxNx3 RGB array of floats (ranging 0 to 1) with\n        an MxNx1 hillshade array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``) Additional kwargs supplied\n        to this function will be passed on to the *blend_mode*\n        function.\n    vmin : float or None, optional\n        The minimum value used in colormapping *data*. If *None* the\n        minimum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vmax : float or None, optional\n        The maximum value used in colormapping *data*. If *None* the\n        maximum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    ndarray\n        An MxNx4 array of floats ranging between 0-1.\n    \"\"\"\n    if vmin is None:\n        vmin = data.min()\n    if vmax is None:\n        vmax = data.max()\n    if norm is None:\n        norm = Normalize(vmin=vmin, vmax=vmax)\n    rgb0 = cmap(norm(data))\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode, vert_exag=vert_exag, dx=dx, dy=dy, fraction=fraction, **kwargs)\n    rgb0[..., :3] = rgb1[..., :3]\n    return rgb0",
                            "def shade_rgb(self, rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs):\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given *elevation*.\n\n    Parameters\n    ----------\n    rgb : array-like\n        An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n    elevation : array-like\n        An (M, N) array of the height values used to generate a shaded map.\n    fraction : number\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data values\n        with the illumination intensity.  For backwards compatibility, this\n        defaults to \"hsv\". Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to combine an\n        MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n        array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``)\n        Additional kwargs supplied to this function will be passed on to\n        the *blend_mode* function.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n    lookup = {'hsv': self.blend_hsv, 'soft': self.blend_soft_light, 'overlay': self.blend_overlay}\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'.format(lookup.keys)) from err\n    if hasattr(intensity, 'mask'):\n        mask = intensity.mask[..., 0]\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n    return blend",
                            "def blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None):\n    \"\"\"\n    Take the input data array, convert to HSV values in the given colormap,\n    then adjust those color values to give the impression of a shaded\n    relief map with a specified light source.  RGBA values are returned,\n    which can then be used to plot the shaded image with imshow.\n\n    The color of the resulting image will be darkened by moving the (s, v)\n    values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the\n    shaded regions, or lightened by sliding (s, v) toward (hsv_max_sat,\n    hsv_max_val) in regions that are illuminated.  The default extremes are\n    chose so that completely shaded points are nearly black (s = 1, v = 0)\n    and completely illuminated points are nearly white (s = 0, v = 1).\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n    hsv_max_sat : number, default: 1\n        The maximum saturation value that the *intensity* map can shift the\n        output image to.\n    hsv_min_sat : number, optional\n        The minimum saturation value that the *intensity* map can shift the\n        output image to. Defaults to 0.\n    hsv_max_val : number, optional\n        The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 1.\n    hsv_min_val : number, optional\n        The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 0.\n\n    Returns\n    -------\n    ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    if hsv_max_sat is None:\n        hsv_max_sat = self.hsv_max_sat\n    if hsv_max_val is None:\n        hsv_max_val = self.hsv_max_val\n    if hsv_min_sat is None:\n        hsv_min_sat = self.hsv_min_sat\n    if hsv_min_val is None:\n        hsv_min_val = self.hsv_min_val\n    intensity = intensity[..., 0]\n    intensity = 2 * intensity - 1\n    hsv = rgb_to_hsv(rgb[:, :, 0:3])\n    hue, sat, val = np.moveaxis(hsv, -1, 0)\n    np.putmask(sat, (np.abs(sat) > 1e-10) & (intensity > 0), (1 - intensity) * sat + intensity * hsv_max_sat)\n    np.putmask(sat, (np.abs(sat) > 1e-10) & (intensity < 0), (1 + intensity) * sat - intensity * hsv_min_sat)\n    np.putmask(val, intensity > 0, (1 - intensity) * val + intensity * hsv_max_val)\n    np.putmask(val, intensity < 0, (1 + intensity) * val - intensity * hsv_min_val)\n    np.clip(hsv[:, :, 1:], 0, 1, out=hsv[:, :, 1:])\n    return hsv_to_rgb(hsv)",
                            "def blend_soft_light(self, rgb, intensity):\n    \"\"\"\n    Combine an rgb image with an intensity map using \"soft light\" blending,\n    using the \"pegtop\" formula.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    return 2 * intensity * rgb + (1 - 2 * intensity) * rgb ** 2",
                            "def blend_overlay(self, rgb, intensity):\n    \"\"\"\n    Combines an rgb image with an intensity map using \"overlay\" blending.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    low = 2 * intensity * rgb\n    high = 1 - 2 * (1 - intensity) * (1 - rgb)\n    return np.where(rgb <= 0.5, low, high)"
                        ],
                        "constructor_variables": [
                            "hsv_min_sat",
                            "hsv_max_sat",
                            "hsv_min_val",
                            "azdeg",
                            "hsv_max_val",
                            "altdeg"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1, hsv_min_sat=1, hsv_max_sat=0)",
                            "direction(self)",
                            "hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)",
                            "shade_normals(self, normals, fraction=1.0)",
                            "shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None, vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs)",
                            "shade_rgb(self, rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs)",
                            "blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)",
                            "blend_soft_light(self, rgb, intensity)",
                            "blend_overlay(self, rgb, intensity)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "intensity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hillshade": {
                                    "variable_value": "<bound method LightSource.hillshade of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.LightSource object at 0x1117d2580>",
                                    "variable_type": "LightSource",
                                    "variable_shape": null
                                },
                                "elevation": {
                                    "variable_value": "array([[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8)"
                                },
                                "vert_exag": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dx": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dy": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fraction": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.newaxis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lookup": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blend_hsv": {
                                    "variable_value": "<bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_soft_light": {
                                    "variable_value": "<bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_overlay": {
                                    "variable_value": "<bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blend_mode": {
                                    "variable_value": "'overlay'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "blend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rgb": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "lookup.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "intensity.mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "intensity": {
                                    "variable_value": "array([[[0.93286093],\n        [0.90181886],\n        [0.89217264],\n        [0.84661419],\n        [0.72716929],\n        [0.60512765],\n        [0.56034829],\n        [0.47926805]],\n\n       [[0.90181886],\n        [0.91397975],\n        [0.91842844],\n        [0.87778388],\n        [0.74635582],\n        [0.57885605],\n        [0.45698988],\n        [0.35305235]],\n\n       [[0.89217264],\n        [0.91842844],\n        [0.983133  ],\n        [1.        ],\n        [0.82721893],\n        [0.54694167],\n        [0.373272  ],\n        [0.31362546]],\n\n       [[0.84661419],\n        [0.87778388],\n        [1.        ],\n        [0.96975375],\n        [0.84105575],\n        [0.49116301],\n        [0.25640083],\n        [0.21429204]],\n\n       [[0.72716929],\n        [0.74635582],\n        [0.82721893],\n        [0.84105575],\n        [0.71235776],\n        [0.31838194],\n        [0.12497276],\n        [0.09484714]],\n\n       [[0.60512765],\n        [0.57885605],\n        [0.54694167],\n        [0.49116301],\n        [0.31838194],\n        [0.11075034],\n        [0.03369961],\n        [0.02658046]],\n\n       [[0.56034829],\n        [0.45698988],\n        [0.373272  ],\n        [0.25640083],\n        [0.12497276],\n        [0.03369961],\n        [0.        ],\n        [0.01158178]],\n\n       [[0.47926805],\n        [0.35305235],\n        [0.31362546],\n        [0.21429204],\n        [0.09484714],\n        [0.02658046],\n        [0.01158178],\n        [0.02567518]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 1)"
                                },
                                "self.hillshade": {
                                    "variable_value": "<bound method LightSource.hillshade of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.LightSource object at 0x1117d2580>",
                                    "variable_type": "LightSource",
                                    "variable_shape": null
                                },
                                "elevation": {
                                    "variable_value": "array([[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8)"
                                },
                                "vert_exag": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dx": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dy": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fraction": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.newaxis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lookup": {
                                    "variable_value": "{'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x1117d2580>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x1117d2580>>, 'overlay': <bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x1117d2580>>}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "self.blend_hsv": {
                                    "variable_value": "<bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_soft_light": {
                                    "variable_value": "<bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_overlay": {
                                    "variable_value": "<bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x1117d2580>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blend_mode": {
                                    "variable_value": "'overlay'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "blend": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.44560451, 0.28180036, 0.17946195, 1.        ],\n        [0.89717223, 0.59037058, 0.37597205, 1.        ],\n        [0.89979497, 0.72102844, 0.4591803 , 1.        ],\n        [0.82176311, 0.61930186, 0.39439666, 1.        ],\n        [0.62343652, 0.40042649, 0.25500791, 1.        ],\n        [0.27687791, 0.17509763, 0.11150931, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.44560451, 0.28180036, 0.17946195, 1.        ],\n        [0.94380405, 0.77840107, 0.49571753, 1.        ],\n        [0.99175813, 0.93481646, 0.70239967, 1.        ],\n        [1.        , 0.91956051, 0.75009214, 1.        ],\n        [1.        , 0.83305796, 0.637783  , 1.        ],\n        [0.95744824, 0.66346536, 0.44270003, 1.        ],\n        [0.64525827, 0.38920054, 0.24785876, 1.        ],\n        [0.17444936, 0.1103218 , 0.07025742, 1.        ]],\n\n       [[0.89717223, 0.59037058, 0.37597205, 1.        ],\n        [0.99175813, 0.93481646, 0.70239967, 1.        ],\n        [1.        , 0.99086213, 0.91300285, 1.        ],\n        [1.        , 1.        , 0.9754902 , 1.        ],\n        [1.        , 0.91909781, 0.80694396, 1.        ],\n        [1.        , 0.75455112, 0.5079265 , 1.        ],\n        [0.93667634, 0.49918387, 0.28547257, 1.        ],\n        [0.34545027, 0.20753297, 0.13216546, 1.        ]],\n\n       [[0.89979497, 0.72102844, 0.4591803 , 1.        ],\n        [1.        , 0.91956051, 0.75009214, 1.        ],\n        [1.        , 1.        , 0.9754902 , 1.        ],\n        [1.        , 0.98676424, 0.96490498, 1.        ],\n        [1.        , 0.930446  , 0.83685048, 1.        ],\n        [1.        , 0.76174456, 0.4791247 , 1.        ],\n        [1.        , 0.51058227, 0.21910205, 1.        ],\n        [0.4867068 , 0.18250421, 0.11622612, 1.        ]],\n\n       [[0.82176311, 0.61930186, 0.39439666, 1.        ],\n        [1.        , 0.83305796, 0.637783  , 1.        ],\n        [1.        , 0.91909781, 0.80694396, 1.        ],\n        [1.        , 0.930446  , 0.83685048, 1.        ],\n        [1.        , 0.87412776, 0.70879597, 1.        ],\n        [1.        , 0.68084237, 0.31057846, 1.        ],\n        [1.        , 0.42407972, 0.1067929 , 1.        ],\n        [0.40867494, 0.08077763, 0.05144249, 1.        ]],\n\n       [[0.62343652, 0.40042649, 0.25500791, 1.        ],\n        [0.95744824, 0.66346536, 0.44270003, 1.        ],\n        [1.        , 0.75455112, 0.5079265 , 1.        ],\n        [1.        , 0.76174456, 0.4791247 , 1.        ],\n        [1.        , 0.68084237, 0.31057846, 1.        ],\n        [1.        , 0.5182401 , 0.10285015, 1.        ],\n        [0.90236645, 0.22783277, 0.02577293, 1.        ],\n        [0.07171455, 0.01758889, 0.01120132, 1.        ]],\n\n       [[0.27687791, 0.17509763, 0.11150931, 1.        ],\n        [0.64525827, 0.38920054, 0.24785876, 1.        ],\n        [0.93667634, 0.49918387, 0.28547257, 1.        ],\n        [1.        , 0.51058227, 0.21910205, 1.        ],\n        [1.        , 0.42407972, 0.1067929 , 1.        ],\n        [0.90236645, 0.22783277, 0.02577293, 1.        ],\n        [0.34671249, 0.        , 0.        , 1.        ],\n        [0.00572276, 0.00361908, 0.00230477, 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.17444936, 0.1103218 , 0.07025742, 1.        ],\n        [0.34545027, 0.20753297, 0.13216546, 1.        ],\n        [0.4867068 , 0.18250421, 0.11622612, 1.        ],\n        [0.40867494, 0.08077763, 0.05144249, 1.        ],\n        [0.07171455, 0.01758889, 0.01120132, 1.        ],\n        [0.00572276, 0.00361908, 0.00230477, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "rgb": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "lookup.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x1117cd3c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "intensity.mask": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "intensity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hillshade": {
                                    "variable_value": "<bound method LightSource.hillshade of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.LightSource object at 0x113315f10>",
                                    "variable_type": "LightSource",
                                    "variable_shape": null
                                },
                                "elevation": {
                                    "variable_value": "array([[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8)"
                                },
                                "vert_exag": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dx": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dy": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fraction": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.newaxis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lookup": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blend_hsv": {
                                    "variable_value": "<bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_soft_light": {
                                    "variable_value": "<bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_overlay": {
                                    "variable_value": "<bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blend_mode": {
                                    "variable_value": "'overlay'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "blend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rgb": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "lookup.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma.is_masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "intensity.mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "intensity": {
                                    "variable_value": "array([[[0.93286093],\n        [0.90181886],\n        [0.89217264],\n        [0.84661419],\n        [0.72716929],\n        [0.60512765],\n        [0.56034829],\n        [0.47926805]],\n\n       [[0.90181886],\n        [0.91397975],\n        [0.91842844],\n        [0.87778388],\n        [0.74635582],\n        [0.57885605],\n        [0.45698988],\n        [0.35305235]],\n\n       [[0.89217264],\n        [0.91842844],\n        [0.983133  ],\n        [1.        ],\n        [0.82721893],\n        [0.54694167],\n        [0.373272  ],\n        [0.31362546]],\n\n       [[0.84661419],\n        [0.87778388],\n        [1.        ],\n        [0.96975375],\n        [0.84105575],\n        [0.49116301],\n        [0.25640083],\n        [0.21429204]],\n\n       [[0.72716929],\n        [0.74635582],\n        [0.82721893],\n        [0.84105575],\n        [0.71235776],\n        [0.31838194],\n        [0.12497276],\n        [0.09484714]],\n\n       [[0.60512765],\n        [0.57885605],\n        [0.54694167],\n        [0.49116301],\n        [0.31838194],\n        [0.11075034],\n        [0.03369961],\n        [0.02658046]],\n\n       [[0.56034829],\n        [0.45698988],\n        [0.373272  ],\n        [0.25640083],\n        [0.12497276],\n        [0.03369961],\n        [0.        ],\n        [0.01158178]],\n\n       [[0.47926805],\n        [0.35305235],\n        [0.31362546],\n        [0.21429204],\n        [0.09484714],\n        [0.02658046],\n        [0.01158178],\n        [0.02567518]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 1)"
                                },
                                "self.hillshade": {
                                    "variable_value": "<bound method LightSource.hillshade of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.LightSource object at 0x113315f10>",
                                    "variable_type": "LightSource",
                                    "variable_shape": null
                                },
                                "elevation": {
                                    "variable_value": "array([[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n         9.5712788 ,  7.22018057,  1.01234852],\n       [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n         8.63322472,  5.40989041, -1.33295553],\n       [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n         5.40989041,  1.01234852, -5.67854964],\n       [-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n        -1.33295553, -5.67854964, -9.65979312]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8)"
                                },
                                "vert_exag": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dx": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dy": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fraction": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.newaxis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lookup": {
                                    "variable_value": "{'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x113315f10>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x113315f10>>, 'overlay': <bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x113315f10>>}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "self.blend_hsv": {
                                    "variable_value": "<bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_soft_light": {
                                    "variable_value": "<bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_overlay": {
                                    "variable_value": "<bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blend_mode": {
                                    "variable_value": "'overlay'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "blend": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.44560451, 0.28180036, 0.17946195, 1.        ],\n        [0.89717223, 0.59037058, 0.37597205, 1.        ],\n        [0.89979497, 0.72102844, 0.4591803 , 1.        ],\n        [0.82176311, 0.61930186, 0.39439666, 1.        ],\n        [0.62343652, 0.40042649, 0.25500791, 1.        ],\n        [0.27687791, 0.17509763, 0.11150931, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.44560451, 0.28180036, 0.17946195, 1.        ],\n        [0.94380405, 0.77840107, 0.49571753, 1.        ],\n        [0.99175813, 0.93481646, 0.70239967, 1.        ],\n        [1.        , 0.91956051, 0.75009214, 1.        ],\n        [1.        , 0.83305796, 0.637783  , 1.        ],\n        [0.95744824, 0.66346536, 0.44270003, 1.        ],\n        [0.64525827, 0.38920054, 0.24785876, 1.        ],\n        [0.17444936, 0.1103218 , 0.07025742, 1.        ]],\n\n       [[0.89717223, 0.59037058, 0.37597205, 1.        ],\n        [0.99175813, 0.93481646, 0.70239967, 1.        ],\n        [1.        , 0.99086213, 0.91300285, 1.        ],\n        [1.        , 1.        , 0.9754902 , 1.        ],\n        [1.        , 0.91909781, 0.80694396, 1.        ],\n        [1.        , 0.75455112, 0.5079265 , 1.        ],\n        [0.93667634, 0.49918387, 0.28547257, 1.        ],\n        [0.34545027, 0.20753297, 0.13216546, 1.        ]],\n\n       [[0.89979497, 0.72102844, 0.4591803 , 1.        ],\n        [1.        , 0.91956051, 0.75009214, 1.        ],\n        [1.        , 1.        , 0.9754902 , 1.        ],\n        [1.        , 0.98676424, 0.96490498, 1.        ],\n        [1.        , 0.930446  , 0.83685048, 1.        ],\n        [1.        , 0.76174456, 0.4791247 , 1.        ],\n        [1.        , 0.51058227, 0.21910205, 1.        ],\n        [0.4867068 , 0.18250421, 0.11622612, 1.        ]],\n\n       [[0.82176311, 0.61930186, 0.39439666, 1.        ],\n        [1.        , 0.83305796, 0.637783  , 1.        ],\n        [1.        , 0.91909781, 0.80694396, 1.        ],\n        [1.        , 0.930446  , 0.83685048, 1.        ],\n        [1.        , 0.87412776, 0.70879597, 1.        ],\n        [1.        , 0.68084237, 0.31057846, 1.        ],\n        [1.        , 0.42407972, 0.1067929 , 1.        ],\n        [0.40867494, 0.08077763, 0.05144249, 1.        ]],\n\n       [[0.62343652, 0.40042649, 0.25500791, 1.        ],\n        [0.95744824, 0.66346536, 0.44270003, 1.        ],\n        [1.        , 0.75455112, 0.5079265 , 1.        ],\n        [1.        , 0.76174456, 0.4791247 , 1.        ],\n        [1.        , 0.68084237, 0.31057846, 1.        ],\n        [1.        , 0.5182401 , 0.10285015, 1.        ],\n        [0.90236645, 0.22783277, 0.02577293, 1.        ],\n        [0.07171455, 0.01758889, 0.01120132, 1.        ]],\n\n       [[0.27687791, 0.17509763, 0.11150931, 1.        ],\n        [0.64525827, 0.38920054, 0.24785876, 1.        ],\n        [0.93667634, 0.49918387, 0.28547257, 1.        ],\n        [1.        , 0.51058227, 0.21910205, 1.        ],\n        [1.        , 0.42407972, 0.1067929 , 1.        ],\n        [0.90236645, 0.22783277, 0.02577293, 1.        ],\n        [0.34671249, 0.        , 0.        , 1.        ],\n        [0.00572276, 0.00361908, 0.00230477, 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.17444936, 0.1103218 , 0.07025742, 1.        ],\n        [0.34545027, 0.20753297, 0.13216546, 1.        ],\n        [0.4867068 , 0.18250421, 0.11622612, 1.        ],\n        [0.40867494, 0.08077763, 0.05144249, 1.        ],\n        [0.07171455, 0.01758889, 0.01120132, 1.        ],\n        [0.00572276, 0.00361908, 0.00230477, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "rgb": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "lookup.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x113302480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma.is_masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "intensity.mask": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "intensity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hillshade": {
                                    "variable_value": "<bound method LightSource.hillshade of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.LightSource object at 0x113315f10>",
                                    "variable_type": "LightSource",
                                    "variable_shape": null
                                },
                                "elevation": {
                                    "variable_value": "masked_array(\n  data=[[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312],\n        [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n          5.40989041,  1.01234852, -5.67854964],\n        [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n          8.63322472,  5.40989041, -1.33295553],\n        [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n          9.5712788 ,  7.22018057,  1.01234852],\n        [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n          9.5712788 ,  7.22018057,  1.01234852],\n        [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n          8.63322472,  5.40989041, -1.33295553],\n        [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n          5.40989041,  1.01234852, -5.67854964],\n        [-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312]],\n  mask=False,\n  fill_value=1e+20)",
                                    "variable_type": "MaskedArray",
                                    "variable_shape": "(8, 8)"
                                },
                                "vert_exag": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dx": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dy": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fraction": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.newaxis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lookup": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blend_hsv": {
                                    "variable_value": "<bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_soft_light": {
                                    "variable_value": "<bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_overlay": {
                                    "variable_value": "<bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blend_mode": {
                                    "variable_value": "'overlay'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "blend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rgb": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "lookup.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma.is_masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "intensity.mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "intensity": {
                                    "variable_value": "masked_array(\n  data=[[[0.93286093],\n         [0.90181886],\n         [0.89217264],\n         [0.84661419],\n         [0.72716929],\n         [0.60512765],\n         [0.56034829],\n         [0.47926805]],\n\n        [[0.90181886],\n         [0.91397975],\n         [0.91842844],\n         [0.87778388],\n         [0.74635582],\n         [0.57885605],\n         [0.45698988],\n         [0.35305235]],\n\n        [[0.89217264],\n         [0.91842844],\n         [0.983133  ],\n         [1.        ],\n         [0.82721893],\n         [0.54694167],\n         [0.373272  ],\n         [0.31362546]],\n\n        [[0.84661419],\n         [0.87778388],\n         [1.        ],\n         [0.96975375],\n         [0.84105575],\n         [0.49116301],\n         [0.25640083],\n         [0.21429204]],\n\n        [[0.72716929],\n         [0.74635582],\n         [0.82721893],\n         [0.84105575],\n         [0.71235776],\n         [0.31838194],\n         [0.12497276],\n         [0.09484714]],\n\n        [[0.60512765],\n         [0.57885605],\n         [0.54694167],\n         [0.49116301],\n         [0.31838194],\n         [0.11075034],\n         [0.03369961],\n         [0.02658046]],\n\n        [[0.56034829],\n         [0.45698988],\n         [0.373272  ],\n         [0.25640083],\n         [0.12497276],\n         [0.03369961],\n         [0.        ],\n         [0.01158178]],\n\n        [[0.47926805],\n         [0.35305235],\n         [0.31362546],\n         [0.21429204],\n         [0.09484714],\n         [0.02658046],\n         [0.01158178],\n         [0.02567518]]],\n  mask=False,\n  fill_value=1e+20)",
                                    "variable_type": "MaskedArray",
                                    "variable_shape": "(8, 8, 1)"
                                },
                                "self.hillshade": {
                                    "variable_value": "<bound method LightSource.hillshade of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<matplotlib.colors.LightSource object at 0x113315f10>",
                                    "variable_type": "LightSource",
                                    "variable_shape": null
                                },
                                "elevation": {
                                    "variable_value": "masked_array(\n  data=[[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312],\n        [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n          5.40989041,  1.01234852, -5.67854964],\n        [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n          8.63322472,  5.40989041, -1.33295553],\n        [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n          9.5712788 ,  7.22018057,  1.01234852],\n        [ 1.01234852,  7.22018057,  9.5712788 ,  9.98273217,  9.98273217,\n          9.5712788 ,  7.22018057,  1.01234852],\n        [-1.33295553,  5.40989041,  8.63322472,  9.5712788 ,  9.5712788 ,\n          8.63322472,  5.40989041, -1.33295553],\n        [-5.67854964,  1.01234852,  5.40989041,  7.22018057,  7.22018057,\n          5.40989041,  1.01234852, -5.67854964],\n        [-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312]],\n  mask=False,\n  fill_value=1e+20)",
                                    "variable_type": "MaskedArray",
                                    "variable_shape": "(8, 8)"
                                },
                                "vert_exag": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dx": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "dy": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "fraction": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "np.newaxis": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lookup": {
                                    "variable_value": "{'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x113315f10>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x113315f10>>, 'overlay': <bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x113315f10>>}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "self.blend_hsv": {
                                    "variable_value": "<bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_soft_light": {
                                    "variable_value": "<bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.blend_overlay": {
                                    "variable_value": "<bound method LightSource.blend_overlay of <matplotlib.colors.LightSource object at 0x113315f10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "blend_mode": {
                                    "variable_value": "'overlay'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "blend": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.44560451, 0.28180036, 0.17946195, 1.        ],\n        [0.89717223, 0.59037058, 0.37597205, 1.        ],\n        [0.89979497, 0.72102844, 0.4591803 , 1.        ],\n        [0.82176311, 0.61930186, 0.39439666, 1.        ],\n        [0.62343652, 0.40042649, 0.25500791, 1.        ],\n        [0.27687791, 0.17509763, 0.11150931, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.44560451, 0.28180036, 0.17946195, 1.        ],\n        [0.94380405, 0.77840107, 0.49571753, 1.        ],\n        [0.99175813, 0.93481646, 0.70239967, 1.        ],\n        [1.        , 0.91956051, 0.75009214, 1.        ],\n        [1.        , 0.83305796, 0.637783  , 1.        ],\n        [0.95744824, 0.66346536, 0.44270003, 1.        ],\n        [0.64525827, 0.38920054, 0.24785876, 1.        ],\n        [0.17444936, 0.1103218 , 0.07025742, 1.        ]],\n\n       [[0.89717223, 0.59037058, 0.37597205, 1.        ],\n        [0.99175813, 0.93481646, 0.70239967, 1.        ],\n        [1.        , 0.99086213, 0.91300285, 1.        ],\n        [1.        , 1.        , 0.9754902 , 1.        ],\n        [1.        , 0.91909781, 0.80694396, 1.        ],\n        [1.        , 0.75455112, 0.5079265 , 1.        ],\n        [0.93667634, 0.49918387, 0.28547257, 1.        ],\n        [0.34545027, 0.20753297, 0.13216546, 1.        ]],\n\n       [[0.89979497, 0.72102844, 0.4591803 , 1.        ],\n        [1.        , 0.91956051, 0.75009214, 1.        ],\n        [1.        , 1.        , 0.9754902 , 1.        ],\n        [1.        , 0.98676424, 0.96490498, 1.        ],\n        [1.        , 0.930446  , 0.83685048, 1.        ],\n        [1.        , 0.76174456, 0.4791247 , 1.        ],\n        [1.        , 0.51058227, 0.21910205, 1.        ],\n        [0.4867068 , 0.18250421, 0.11622612, 1.        ]],\n\n       [[0.82176311, 0.61930186, 0.39439666, 1.        ],\n        [1.        , 0.83305796, 0.637783  , 1.        ],\n        [1.        , 0.91909781, 0.80694396, 1.        ],\n        [1.        , 0.930446  , 0.83685048, 1.        ],\n        [1.        , 0.87412776, 0.70879597, 1.        ],\n        [1.        , 0.68084237, 0.31057846, 1.        ],\n        [1.        , 0.42407972, 0.1067929 , 1.        ],\n        [0.40867494, 0.08077763, 0.05144249, 1.        ]],\n\n       [[0.62343652, 0.40042649, 0.25500791, 1.        ],\n        [0.95744824, 0.66346536, 0.44270003, 1.        ],\n        [1.        , 0.75455112, 0.5079265 , 1.        ],\n        [1.        , 0.76174456, 0.4791247 , 1.        ],\n        [1.        , 0.68084237, 0.31057846, 1.        ],\n        [1.        , 0.5182401 , 0.10285015, 1.        ],\n        [0.90236645, 0.22783277, 0.02577293, 1.        ],\n        [0.07171455, 0.01758889, 0.01120132, 1.        ]],\n\n       [[0.27687791, 0.17509763, 0.11150931, 1.        ],\n        [0.64525827, 0.38920054, 0.24785876, 1.        ],\n        [0.93667634, 0.49918387, 0.28547257, 1.        ],\n        [1.        , 0.51058227, 0.21910205, 1.        ],\n        [1.        , 0.42407972, 0.1067929 , 1.        ],\n        [0.90236645, 0.22783277, 0.02577293, 1.        ],\n        [0.34671249, 0.        , 0.        , 1.        ],\n        [0.00572276, 0.00361908, 0.00230477, 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.17444936, 0.1103218 , 0.07025742, 1.        ],\n        [0.34545027, 0.20753297, 0.13216546, 1.        ],\n        [0.4867068 , 0.18250421, 0.11622612, 1.        ],\n        [0.40867494, 0.08077763, 0.05144249, 1.        ],\n        [0.07171455, 0.01758889, 0.01120132, 1.        ],\n        [0.00572276, 0.00361908, 0.00230477, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "rgb": {
                                    "variable_value": "array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.7812    , 0.4975    , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ]],\n\n       [[0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.76588235, 0.4877451 , 1.        ],\n        [1.        , 0.72912   , 0.46433333, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ]],\n\n       [[0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [1.        , 0.67091294, 0.42726471, 1.        ],\n        [0.94948075, 0.60045176, 0.38239216, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ]],\n\n       [[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.67335624, 0.42583059, 0.27118627, 1.        ],\n        [0.52318327, 0.33086118, 0.21070588, 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 8, 4)"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "lookup.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x1132ceec0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma.is_masked": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ma": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "intensity.mask": {
                                    "variable_value": "False",
                                    "variable_type": "bool_",
                                    "variable_shape": "()"
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_named_colors_mapping():\n    \"\"\"Return the global mapping of names to named colors.\"\"\"\n    return _colors_full_map",
                "def _sanitize_extrema(ex):\n    if ex is None:\n        return ex\n    try:\n        ret = ex.item()\n    except AttributeError:\n        ret = float(ex)\n    return ret",
                "def _is_nth_color(c):\n    \"\"\"Return whether *c* can be interpreted as an item in the color cycle.\"\"\"\n    return isinstance(c, str) and re.match(r\"\\AC[0-9]+\\Z\", c)",
                "def is_color_like(c):\n    \"\"\"Return whether *c* can be interpreted as an RGB(A) color.\"\"\"\n    # Special-case nth color syntax because it cannot be parsed during setup.\n    if _is_nth_color(c):\n        return True\n    try:\n        to_rgba(c)\n    except ValueError:\n        return False\n    else:\n        return True",
                "def same_color(c1, c2):\n    \"\"\"Return whether the colors *c1* and *c2* are the same.\"\"\"\n    return (to_rgba_array(c1) == to_rgba_array(c2)).all()",
                "def to_rgba(c, alpha=None):\n    \"\"\"\n    Convert *c* to an RGBA color.\n\n    Parameters\n    ----------\n    c : Matplotlib color or ``np.ma.masked``\n\n    alpha : float, optional\n        If *alpha* is not ``None``, it forces the alpha value, except if *c* is\n        ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.\n\n    Returns\n    -------\n    tuple\n        Tuple of ``(r, g, b, a)`` scalars.\n    \"\"\"\n    # Special-case nth color syntax because it should not be cached.\n    if _is_nth_color(c):\n        from matplotlib import rcParams\n        prop_cycler = rcParams['axes.prop_cycle']\n        colors = prop_cycler.by_key().get('color', ['k'])\n        c = colors[int(c[1:]) % len(colors)]\n    try:\n        rgba = _colors_full_map.cache[c, alpha]\n    except (KeyError, TypeError):  # Not in cache, or unhashable.\n        rgba = None\n    if rgba is None:  # Suppress exception chaining of cache lookup failure.\n        rgba = _to_rgba_no_colorcycle(c, alpha)\n        try:\n            _colors_full_map.cache[c, alpha] = rgba\n        except TypeError:\n            pass\n    return rgba",
                "def _to_rgba_no_colorcycle(c, alpha=None):\n    \"\"\"\n    Convert *c* to an RGBA color, with no support for color-cycle syntax.\n\n    If *alpha* is not ``None``, it forces the alpha value, except if *c* is\n    ``\"none\"`` (case-insensitive), which always maps to ``(0, 0, 0, 0)``.\n    \"\"\"\n    orig_c = c\n    if c is np.ma.masked:\n        return (0., 0., 0., 0.)\n    if isinstance(c, str):\n        if c.lower() == \"none\":\n            return (0., 0., 0., 0.)\n        # Named color.\n        try:\n            # This may turn c into a non-string, so we check again below.\n            c = _colors_full_map[c]\n        except KeyError:\n            if len(orig_c) != 1:\n                try:\n                    c = _colors_full_map[c.lower()]\n                except KeyError:\n                    pass\n    if isinstance(c, str):\n        # hex color in #rrggbb format.\n        match = re.match(r\"\\A#[a-fA-F0-9]{6}\\Z\", c)\n        if match:\n            return (tuple(int(n, 16) / 255\n                          for n in [c[1:3], c[3:5], c[5:7]])\n                    + (alpha if alpha is not None else 1.,))\n        # hex color in #rgb format, shorthand for #rrggbb.\n        match = re.match(r\"\\A#[a-fA-F0-9]{3}\\Z\", c)\n        if match:\n            return (tuple(int(n, 16) / 255\n                          for n in [c[1]*2, c[2]*2, c[3]*2])\n                    + (alpha if alpha is not None else 1.,))\n        # hex color with alpha in #rrggbbaa format.\n        match = re.match(r\"\\A#[a-fA-F0-9]{8}\\Z\", c)\n        if match:\n            color = [int(n, 16) / 255\n                     for n in [c[1:3], c[3:5], c[5:7], c[7:9]]]\n            if alpha is not None:\n                color[-1] = alpha\n            return tuple(color)\n        # hex color with alpha in #rgba format, shorthand for #rrggbbaa.\n        match = re.match(r\"\\A#[a-fA-F0-9]{4}\\Z\", c)\n        if match:\n            color = [int(n, 16) / 255\n                     for n in [c[1]*2, c[2]*2, c[3]*2, c[4]*2]]\n            if alpha is not None:\n                color[-1] = alpha\n            return tuple(color)\n        # string gray.\n        try:\n            c = float(c)\n        except ValueError:\n            pass\n        else:\n            if not (0 <= c <= 1):\n                raise ValueError(\n                    f\"Invalid string grayscale value {orig_c!r}. \"\n                    f\"Value must be within 0-1 range\")\n            return c, c, c, alpha if alpha is not None else 1.\n        raise ValueError(f\"Invalid RGBA argument: {orig_c!r}\")\n    # tuple color.\n    if not np.iterable(c):\n        raise ValueError(f\"Invalid RGBA argument: {orig_c!r}\")\n    if len(c) not in [3, 4]:\n        raise ValueError(\"RGBA sequence should have length 3 or 4\")\n    if not all(isinstance(x, Number) for x in c):\n        # Checks that don't work: `map(float, ...)`, `np.array(..., float)` and\n        # `np.array(...).astype(float)` would all convert \"0.5\" to 0.5.\n        raise ValueError(f\"Invalid RGBA argument: {orig_c!r}\")\n    # Return a tuple to prevent the cached value from being modified.\n    c = tuple(map(float, c))\n    if len(c) == 3 and alpha is None:\n        alpha = 1\n    if alpha is not None:\n        c = c[:3] + (alpha,)\n    if any(elem < 0 or elem > 1 for elem in c):\n        raise ValueError(\"RGBA values should be within 0-1 range\")\n    return c",
                "def to_rgba_array(c, alpha=None):\n    \"\"\"\n    Convert *c* to a (n, 4) array of RGBA colors.\n\n    If *alpha* is not ``None``, it forces the alpha value.  If *c* is\n    ``\"none\"`` (case-insensitive) or an empty list, an empty array is returned.\n    If *c* is a masked array, an ndarray is returned with a (0, 0, 0, 0)\n    row for each masked value or row in *c*.\n    \"\"\"\n    # Special-case inputs that are already arrays, for performance.  (If the\n    # array has the wrong kind or shape, raise the error during one-at-a-time\n    # conversion.)\n    if (isinstance(c, np.ndarray) and c.dtype.kind in \"if\"\n            and c.ndim == 2 and c.shape[1] in [3, 4]):\n        mask = c.mask.any(axis=1) if np.ma.is_masked(c) else None\n        c = np.ma.getdata(c)\n        if c.shape[1] == 3:\n            result = np.column_stack([c, np.zeros(len(c))])\n            result[:, -1] = alpha if alpha is not None else 1.\n        elif c.shape[1] == 4:\n            result = c.copy()\n            if alpha is not None:\n                result[:, -1] = alpha\n        if mask is not None:\n            result[mask] = 0\n        if np.any((result < 0) | (result > 1)):\n            raise ValueError(\"RGBA values should be within 0-1 range\")\n        return result\n    # Handle single values.\n    # Note that this occurs *after* handling inputs that are already arrays, as\n    # `to_rgba(c, alpha)` (below) is expensive for such inputs, due to the need\n    # to format the array in the ValueError message(!).\n    if cbook._str_lower_equal(c, \"none\"):\n        return np.zeros((0, 4), float)\n    try:\n        return np.array([to_rgba(c, alpha)], float)\n    except (ValueError, TypeError):\n        pass\n\n    # Convert one at a time.\n    if isinstance(c, str):\n        # Single string as color sequence.\n        # This is deprecated and will be removed in the future.\n        try:\n            result = np.array([to_rgba(cc, alpha) for cc in c])\n        except ValueError as err:\n            raise ValueError(\n                \"'%s' is neither a valid single color nor a color sequence \"\n                \"consisting of single character color specifiers such as \"\n                \"'rgb'. Note also that the latter is deprecated.\" % c) from err\n        else:\n            cbook.warn_deprecated(\n                \"3.2\", message=\"Using a string of single character colors as \"\n                \"a color sequence is deprecated since %(since)s and will be \"\n                \"removed %(removal)s. Use an explicit list instead.\")\n            return result\n\n    if len(c) == 0:\n        return np.zeros((0, 4), float)\n    else:\n        return np.array([to_rgba(cc, alpha) for cc in c])",
                "def to_rgb(c):\n    \"\"\"Convert *c* to an RGB color, silently dropping the alpha channel.\"\"\"\n    return to_rgba(c)[:3]",
                "def to_hex(c, keep_alpha=False):\n    \"\"\"\n    Convert *c* to a hex color.\n\n    Uses the ``#rrggbb`` format if *keep_alpha* is False (the default),\n    ``#rrggbbaa`` otherwise.\n    \"\"\"\n    c = to_rgba(c)\n    if not keep_alpha:\n        c = c[:3]\n    return \"#\" + \"\".join(format(int(round(val * 255)), \"02x\") for val in c)",
                "def _create_lookup_table(N, data, gamma=1.0):\n    r\"\"\"\n    Create an *N* -element 1-d lookup table.\n\n    This assumes a mapping :math:`f : [0, 1] \\rightarrow [0, 1]`. The returned\n    data is an array of N values :math:`y = f(x)` where x is sampled from\n    [0, 1].\n\n    By default (*gamma* = 1) x is equidistantly sampled from [0, 1]. The\n    *gamma* correction factor :math:`\\gamma` distorts this equidistant\n    sampling by :math:`x \\rightarrow x^\\gamma`.\n\n    Parameters\n    ----------\n    N : int\n        The number of elements of the created lookup table; at least 1.\n\n    data : Mx3 array-like or callable\n        Defines the mapping :math:`f`.\n\n        If a Mx3 array-like, the rows define values (x, y0, y1). The x values\n        must start with x=0, end with x=1, and all x values be in increasing\n        order.\n\n        A value between :math:`x_i` and :math:`x_{i+1}` is mapped to the range\n        :math:`y^1_{i-1} \\ldots y^0_i` by linear interpolation.\n\n        For the simple case of a y-continuous mapping, y0 and y1 are identical.\n\n        The two values of y are to allow for discontinuous mapping functions.\n        E.g. a sawtooth with a period of 0.2 and an amplitude of 1 would be::\n\n            [(0, 1, 0), (0.2, 1, 0), (0.4, 1, 0), ..., [(1, 1, 0)]\n\n        In the special case of ``N == 1``, by convention the returned value\n        is y0 for x == 1.\n\n        If *data* is a callable, it must accept and return numpy arrays::\n\n           data(x : ndarray) -> ndarray\n\n        and map values between 0 - 1 to 0 - 1.\n\n    gamma : float\n        Gamma correction factor for input distribution x of the mapping.\n\n        See also https://en.wikipedia.org/wiki/Gamma_correction.\n\n    Returns\n    -------\n    array\n        The lookup table where ``lut[x * (N-1)]`` gives the closest value\n        for values of x between 0 and 1.\n\n    Notes\n    -----\n    This function is internally used for `.LinearSegmentedColormap`.\n    \"\"\"\n\n    if callable(data):\n        xind = np.linspace(0, 1, N) ** gamma\n        lut = np.clip(np.array(data(xind), dtype=float), 0, 1)\n        return lut\n\n    try:\n        adata = np.array(data)\n    except Exception as err:\n        raise TypeError(\"data must be convertible to an array\") from err\n    shape = adata.shape\n    if len(shape) != 2 or shape[1] != 3:\n        raise ValueError(\"data must be nx3 format\")\n\n    x = adata[:, 0]\n    y0 = adata[:, 1]\n    y1 = adata[:, 2]\n\n    if x[0] != 0. or x[-1] != 1.0:\n        raise ValueError(\n            \"data mapping points must start with x=0 and end with x=1\")\n    if (np.diff(x) < 0).any():\n        raise ValueError(\"data mapping points must have x in increasing order\")\n    # begin generation of lookup table\n    if N == 1:\n        # convention: use the y = f(x=1) value for a 1-element lookup table\n        lut = np.array(y0[-1])\n    else:\n        x = x * (N - 1)\n        xind = (N - 1) * np.linspace(0, 1, N) ** gamma\n        ind = np.searchsorted(x, xind)[1:-1]\n\n        distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])\n        lut = np.concatenate([\n            [y1[0]],\n            distance * (y0[ind] - y1[ind - 1]) + y1[ind - 1],\n            [y0[-1]],\n        ])\n    # ensure that the lut is confined to values between 0 and 1 by clipping it\n    return np.clip(lut, 0.0, 1.0)",
                "@cbook.deprecated(\"3.2\",\n                  addendum='This is not considered public API any longer.')\n@docstring.copy(_create_lookup_table)\ndef makeMappingArray(N, data, gamma=1.0):\n    return _create_lookup_table(N, data, gamma)",
                "def _warn_if_global_cmap_modified(cmap):\n    if getattr(cmap, '_global', False):\n        cbook.warn_deprecated(\n            \"3.3\",\n            message=\"You are modifying the state of a globally registered \"\n                    \"colormap. In future versions, you will not be able to \"\n                    \"modify a registered colormap in-place. To remove this \"\n                    \"warning, you can make a copy of the colormap first. \"\n                    f\"cmap = mpl.cm.get_cmap({cmap.name}).copy()\"\n        )",
                "def rgb_to_hsv(arr):\n    \"\"\"\n    Convert float rgb values (in the range [0, 1]), in a numpy array to hsv\n    values.\n\n    Parameters\n    ----------\n    arr : (..., 3) array-like\n       All values must be in the range [0, 1]\n\n    Returns\n    -------\n    (..., 3) ndarray\n       Colors converted to hsv values in range [0, 1]\n    \"\"\"\n    arr = np.asarray(arr)\n\n    # check length of the last dimension, should be _some_ sort of rgb\n    if arr.shape[-1] != 3:\n        raise ValueError(\"Last dimension of input array must be 3; \"\n                         \"shape {} was found.\".format(arr.shape))\n\n    in_shape = arr.shape\n    arr = np.array(\n        arr, copy=False,\n        dtype=np.promote_types(arr.dtype, np.float32),  # Don't work on ints.\n        ndmin=2,  # In case input was 1D.\n    )\n    out = np.zeros_like(arr)\n    arr_max = arr.max(-1)\n    ipos = arr_max > 0\n    delta = arr.ptp(-1)\n    s = np.zeros_like(delta)\n    s[ipos] = delta[ipos] / arr_max[ipos]\n    ipos = delta > 0\n    # red is max\n    idx = (arr[..., 0] == arr_max) & ipos\n    out[idx, 0] = (arr[idx, 1] - arr[idx, 2]) / delta[idx]\n    # green is max\n    idx = (arr[..., 1] == arr_max) & ipos\n    out[idx, 0] = 2. + (arr[idx, 2] - arr[idx, 0]) / delta[idx]\n    # blue is max\n    idx = (arr[..., 2] == arr_max) & ipos\n    out[idx, 0] = 4. + (arr[idx, 0] - arr[idx, 1]) / delta[idx]\n\n    out[..., 0] = (out[..., 0] / 6.0) % 1.0\n    out[..., 1] = s\n    out[..., 2] = arr_max\n\n    return out.reshape(in_shape)",
                "def hsv_to_rgb(hsv):\n    \"\"\"\n    Convert hsv values to rgb.\n\n    Parameters\n    ----------\n    hsv : (..., 3) array-like\n       All values assumed to be in range [0, 1]\n\n    Returns\n    -------\n    (..., 3) ndarray\n       Colors converted to RGB values in range [0, 1]\n    \"\"\"\n    hsv = np.asarray(hsv)\n\n    # check length of the last dimension, should be _some_ sort of rgb\n    if hsv.shape[-1] != 3:\n        raise ValueError(\"Last dimension of input array must be 3; \"\n                         \"shape {shp} was found.\".format(shp=hsv.shape))\n\n    in_shape = hsv.shape\n    hsv = np.array(\n        hsv, copy=False,\n        dtype=np.promote_types(hsv.dtype, np.float32),  # Don't work on ints.\n        ndmin=2,  # In case input was 1D.\n    )\n\n    h = hsv[..., 0]\n    s = hsv[..., 1]\n    v = hsv[..., 2]\n\n    r = np.empty_like(h)\n    g = np.empty_like(h)\n    b = np.empty_like(h)\n\n    i = (h * 6.0).astype(int)\n    f = (h * 6.0) - i\n    p = v * (1.0 - s)\n    q = v * (1.0 - s * f)\n    t = v * (1.0 - s * (1.0 - f))\n\n    idx = i % 6 == 0\n    r[idx] = v[idx]\n    g[idx] = t[idx]\n    b[idx] = p[idx]\n\n    idx = i == 1\n    r[idx] = q[idx]\n    g[idx] = v[idx]\n    b[idx] = p[idx]\n\n    idx = i == 2\n    r[idx] = p[idx]\n    g[idx] = v[idx]\n    b[idx] = t[idx]\n\n    idx = i == 3\n    r[idx] = p[idx]\n    g[idx] = q[idx]\n    b[idx] = v[idx]\n\n    idx = i == 4\n    r[idx] = t[idx]\n    g[idx] = p[idx]\n    b[idx] = v[idx]\n\n    idx = i == 5\n    r[idx] = v[idx]\n    g[idx] = p[idx]\n    b[idx] = q[idx]\n\n    idx = s == 0\n    r[idx] = v[idx]\n    g[idx] = v[idx]\n    b[idx] = v[idx]\n\n    rgb = np.stack([r, g, b], axis=-1)\n\n    return rgb.reshape(in_shape)",
                "def _vector_magnitude(arr):\n    # things that don't work here:\n    #  * np.linalg.norm: drops mask from ma.array\n    #  * np.sum: drops mask from ma.array unless entire vector is masked\n    sum_sq = 0\n    for i in range(arr.shape[-1]):\n        sum_sq += arr[..., i, np.newaxis] ** 2\n    return np.sqrt(sum_sq)",
                "def from_levels_and_colors(levels, colors, extend='neither'):\n    \"\"\"\n    A helper routine to generate a cmap and a norm instance which\n    behave similar to contourf's levels and colors arguments.\n\n    Parameters\n    ----------\n    levels : sequence of numbers\n        The quantization levels used to construct the `BoundaryNorm`.\n        Value ``v`` is quantized to level ``i`` if ``lev[i] <= v < lev[i+1]``.\n    colors : sequence of colors\n        The fill color to use for each level. If *extend* is \"neither\" there\n        must be ``n_level - 1`` colors. For an *extend* of \"min\" or \"max\" add\n        one extra color, and for an *extend* of \"both\" add two colors.\n    extend : {'neither', 'min', 'max', 'both'}, optional\n        The behaviour when a value falls out of range of the given levels.\n        See `~.Axes.contourf` for details.\n\n    Returns\n    -------\n    cmap : `~matplotlib.colors.Normalize`\n    norm : `~matplotlib.colors.Colormap`\n    \"\"\"\n    slice_map = {\n        'both': slice(1, -1),\n        'min': slice(1, None),\n        'max': slice(0, -1),\n        'neither': slice(0, None),\n    }\n    cbook._check_in_list(slice_map, extend=extend)\n    color_slice = slice_map[extend]\n\n    n_data_colors = len(levels) - 1\n    n_expected = n_data_colors + color_slice.start - (color_slice.stop or 0)\n    if len(colors) != n_expected:\n        raise ValueError(\n            f'With extend == {extend!r} and {len(levels)} levels, '\n            f'expected {n_expected} colors, but got {len(colors)}')\n\n    cmap = ListedColormap(colors[color_slice], N=n_data_colors)\n\n    if extend in ['min', 'both']:\n        cmap.set_under(colors[0])\n    else:\n        cmap.set_under('none')\n\n    if extend in ['max', 'both']:\n        cmap.set_over(colors[-1])\n    else:\n        cmap.set_over('none')\n\n    cmap.colorbar_extend = extend\n\n    norm = BoundaryNorm(levels, ncolors=n_data_colors)\n    return cmap, norm",
                "def __init__(self, mapping):\n    super().__init__(mapping)\n    self.cache = {}",
                "def __setitem__(self, key, value):\n    super().__setitem__(key, value)\n    self.cache.clear()",
                "def __delitem__(self, key):\n    super().__delitem__(key)\n    self.cache.clear()",
                "def __init__(self, name, N=256):\n    \"\"\"\n    Parameters\n    ----------\n    name : str\n        The name of the colormap.\n    N : int\n        The number of rgb quantization levels.\n    \"\"\"\n    self.name = name\n    self.N = int(N)  # ensure that N is always int\n    self._rgba_bad = (0.0, 0.0, 0.0, 0.0)  # If bad, don't paint anything.\n    self._rgba_under = None\n    self._rgba_over = None\n    self._i_under = self.N\n    self._i_over = self.N + 1\n    self._i_bad = self.N + 2\n    self._isinit = False\n    #: When this colormap exists on a scalar mappable and colorbar_extend\n    #: is not False, colorbar creation will pick up ``colorbar_extend`` as\n    #: the default value for the ``extend`` keyword in the\n    #: `matplotlib.colorbar.Colorbar` constructor.\n    self.colorbar_extend = False",
                "def __call__(self, X, alpha=None, bytes=False):\n    \"\"\"\n    Parameters\n    ----------\n    X : float, ndarray\n        The data value(s) to convert to RGBA.\n        For floats, X should be in the interval ``[0.0, 1.0]`` to\n        return the RGBA values ``X*100`` percent along the Colormap line.\n        For integers, X should be in the interval ``[0, Colormap.N)`` to\n        return RGBA values *indexed* from the Colormap with index ``X``.\n    alpha : float, None\n        Alpha must be a scalar between 0 and 1, or None.\n    bytes : bool\n        If False (default), the returned RGBA values will be floats in the\n        interval ``[0, 1]`` otherwise they will be uint8s in the interval\n        ``[0, 255]``.\n\n    Returns\n    -------\n    Tuple of RGBA values if X is scalar, otherwise an array of\n    RGBA values with a shape of ``X.shape + (4, )``.\n    \"\"\"\n    if not self._isinit:\n        self._init()\n\n    mask_bad = X.mask if np.ma.is_masked(X) else np.isnan(X)  # Mask nan's.\n    xa = np.array(X, copy=True)\n    if not xa.dtype.isnative:\n        xa = xa.byteswap().newbyteorder()  # Native byteorder is faster.\n    if xa.dtype.kind == \"f\":\n        with np.errstate(invalid=\"ignore\"):\n            xa *= self.N\n            # Negative values are out of range, but astype(int) would\n            # truncate them towards zero.\n            xa[xa < 0] = -1\n            # xa == 1 (== N after multiplication) is not out of range.\n            xa[xa == self.N] = self.N - 1\n            # Avoid converting large positive values to negative integers.\n            np.clip(xa, -1, self.N, out=xa)\n            xa = xa.astype(int)\n    # Set the over-range indices before the under-range;\n    # otherwise the under-range values get converted to over-range.\n    xa[xa > self.N - 1] = self._i_over\n    xa[xa < 0] = self._i_under\n    xa[mask_bad] = self._i_bad\n\n    if bytes:\n        lut = (self._lut * 255).astype(np.uint8)\n    else:\n        lut = self._lut.copy()  # Don't let alpha modify original _lut.\n\n    if alpha is not None:\n        alpha = np.clip(alpha, 0, 1)\n        if bytes:\n            alpha = int(alpha * 255)\n        if (lut[-1] == 0).all():\n            lut[:-1, -1] = alpha\n            # All zeros is taken as a flag for the default bad\n            # color, which is no color--fully transparent.  We\n            # don't want to override this.\n        else:\n            lut[:, -1] = alpha\n            # If the bad value is set to have a color, then we\n            # override its alpha just as for any other value.\n\n    rgba = lut[xa]\n    if not np.iterable(X):\n        # Return a tuple if the input was a scalar\n        rgba = tuple(rgba)\n    return rgba",
                "def __copy__(self):\n    cls = self.__class__\n    cmapobject = cls.__new__(cls)\n    cmapobject.__dict__.update(self.__dict__)\n    if self._isinit:\n        cmapobject._lut = np.copy(self._lut)\n    cmapobject._global = False\n    return cmapobject",
                "def set_bad(self, color='k', alpha=None):\n    \"\"\"Set the color for masked values.\"\"\"\n    _warn_if_global_cmap_modified(self)\n    self._rgba_bad = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def set_under(self, color='k', alpha=None):\n    \"\"\"\n    Set the color for low out-of-range values when ``norm.clip = False``.\n    \"\"\"\n    _warn_if_global_cmap_modified(self)\n    self._rgba_under = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def set_over(self, color='k', alpha=None):\n    \"\"\"\n    Set the color for high out-of-range values when ``norm.clip = False``.\n    \"\"\"\n    _warn_if_global_cmap_modified(self)\n    self._rgba_over = to_rgba(color, alpha)\n    if self._isinit:\n        self._set_extremes()",
                "def _set_extremes(self):\n    if self._rgba_under:\n        self._lut[self._i_under] = self._rgba_under\n    else:\n        self._lut[self._i_under] = self._lut[0]\n    if self._rgba_over:\n        self._lut[self._i_over] = self._rgba_over\n    else:\n        self._lut[self._i_over] = self._lut[self.N - 1]\n    self._lut[self._i_bad] = self._rgba_bad",
                "def _init(self):\n    \"\"\"Generate the lookup table, ``self._lut``.\"\"\"\n    raise NotImplementedError(\"Abstract class only\")",
                "def is_gray(self):\n    if not self._isinit:\n        self._init()\n    return (np.all(self._lut[:, 0] == self._lut[:, 1]) and\n            np.all(self._lut[:, 0] == self._lut[:, 2]))",
                "def _resample(self, lutsize):\n    \"\"\"Return a new color map with *lutsize* entries.\"\"\"\n    raise NotImplementedError()",
                "def reversed(self, name=None):\n    \"\"\"\n    Return a reversed instance of the Colormap.\n\n    .. note:: This function is not implemented for base class.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    See Also\n    --------\n    LinearSegmentedColormap.reversed\n    ListedColormap.reversed\n    \"\"\"\n    raise NotImplementedError()",
                "def __init__(self, name, segmentdata, N=256, gamma=1.0):\n    \"\"\"\n    Create color map from linear mapping segments\n\n    segmentdata argument is a dictionary with a red, green and blue\n    entries. Each entry should be a list of *x*, *y0*, *y1* tuples,\n    forming rows in a table. Entries for alpha are optional.\n\n    Example: suppose you want red to increase from 0 to 1 over\n    the bottom half, green to do the same over the middle half,\n    and blue over the top half.  Then you would use::\n\n        cdict = {'red':   [(0.0,  0.0, 0.0),\n                           (0.5,  1.0, 1.0),\n                           (1.0,  1.0, 1.0)],\n\n                 'green': [(0.0,  0.0, 0.0),\n                           (0.25, 0.0, 0.0),\n                           (0.75, 1.0, 1.0),\n                           (1.0,  1.0, 1.0)],\n\n                 'blue':  [(0.0,  0.0, 0.0),\n                           (0.5,  0.0, 0.0),\n                           (1.0,  1.0, 1.0)]}\n\n    Each row in the table for a given color is a sequence of\n    *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase\n    monotonically from 0 to 1.  For any input value *z* falling\n    between *x[i]* and *x[i+1]*, the output value of a given color\n    will be linearly interpolated between *y1[i]* and *y0[i+1]*::\n\n        row i:   x  y0  y1\n                       /\n                      /\n        row i+1: x  y0  y1\n\n    Hence y0 in the first row and y1 in the last row are never used.\n\n    See Also\n    --------\n    LinearSegmentedColormap.from_list\n        Static method; factory function for generating a smoothly-varying\n        LinearSegmentedColormap.\n\n    makeMappingArray\n        For information about making a mapping array.\n    \"\"\"\n    # True only if all colors in map are identical; needed for contouring.\n    self.monochrome = False\n    Colormap.__init__(self, name, N)\n    self._segmentdata = segmentdata\n    self._gamma = gamma",
                "def _init(self):\n    self._lut = np.ones((self.N + 3, 4), float)\n    self._lut[:-3, 0] = _create_lookup_table(\n        self.N, self._segmentdata['red'], self._gamma)\n    self._lut[:-3, 1] = _create_lookup_table(\n        self.N, self._segmentdata['green'], self._gamma)\n    self._lut[:-3, 2] = _create_lookup_table(\n        self.N, self._segmentdata['blue'], self._gamma)\n    if 'alpha' in self._segmentdata:\n        self._lut[:-3, 3] = _create_lookup_table(\n            self.N, self._segmentdata['alpha'], 1)\n    self._isinit = True\n    self._set_extremes()",
                "def set_gamma(self, gamma):\n    \"\"\"Set a new gamma value and regenerate color map.\"\"\"\n    self._gamma = gamma\n    self._init()",
                "@staticmethod\ndef from_list(name, colors, N=256, gamma=1.0):\n    \"\"\"\n    Create a `LinearSegmentedColormap` from a list of colors.\n\n    Parameters\n    ----------\n    name : str\n        The name of the colormap.\n    colors : array-like of colors or array-like of (value, color)\n        If only colors are given, they are equidistantly mapped from the\n        range :math:`[0, 1]`; i.e. 0 maps to ``colors[0]`` and 1 maps to\n        ``colors[-1]``.\n        If (value, color) pairs are given, the mapping is from *value*\n        to *color*. This can be used to divide the range unevenly.\n    N : int\n        The number of rgb quantization levels.\n    gamma : float\n    \"\"\"\n    if not np.iterable(colors):\n        raise ValueError('colors must be iterable')\n\n    if (isinstance(colors[0], Sized) and len(colors[0]) == 2\n            and not isinstance(colors[0], str)):\n        # List of value, color pairs\n        vals, colors = zip(*colors)\n    else:\n        vals = np.linspace(0, 1, len(colors))\n\n    cdict = dict(red=[], green=[], blue=[], alpha=[])\n    for val, color in zip(vals, colors):\n        r, g, b, a = to_rgba(color)\n        cdict['red'].append((val, r, r))\n        cdict['green'].append((val, g, g))\n        cdict['blue'].append((val, b, b))\n        cdict['alpha'].append((val, a, a))\n\n    return LinearSegmentedColormap(name, cdict, N, gamma)",
                "def _resample(self, lutsize):\n    \"\"\"Return a new color map with *lutsize* entries.\"\"\"\n    new_cmap = LinearSegmentedColormap(self.name, self._segmentdata,\n                                       lutsize)\n    new_cmap._rgba_over = self._rgba_over\n    new_cmap._rgba_under = self._rgba_under\n    new_cmap._rgba_bad = self._rgba_bad\n    return new_cmap",
                "@staticmethod\ndef _reverser(func, x):\n    return func(1 - x)",
                "def reversed(self, name=None):\n    \"\"\"\n    Return a reversed instance of the Colormap.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    Returns\n    -------\n    LinearSegmentedColormap\n        The reversed colormap.\n    \"\"\"\n    if name is None:\n        name = self.name + \"_r\"\n\n    # Using a partial object keeps the cmap picklable.\n    data_r = {key: (functools.partial(self._reverser, data)\n                    if callable(data) else\n                    [(1.0 - x, y1, y0) for x, y0, y1 in reversed(data)])\n              for key, data in self._segmentdata.items()}\n\n    new_cmap = LinearSegmentedColormap(name, data_r, self.N, self._gamma)\n    # Reverse the over/under values too\n    new_cmap._rgba_over = self._rgba_under\n    new_cmap._rgba_under = self._rgba_over\n    new_cmap._rgba_bad = self._rgba_bad\n    return new_cmap",
                "def __init__(self, colors, name='from_list', N=None):\n    self.monochrome = False  # Are all colors identical? (for contour.py)\n    if N is None:\n        self.colors = colors\n        N = len(colors)\n    else:\n        if isinstance(colors, str):\n            self.colors = [colors] * N\n            self.monochrome = True\n        elif np.iterable(colors):\n            if len(colors) == 1:\n                self.monochrome = True\n            self.colors = list(\n                itertools.islice(itertools.cycle(colors), N))\n        else:\n            try:\n                gray = float(colors)\n            except TypeError:\n                pass\n            else:\n                self.colors = [gray] * N\n            self.monochrome = True\n    Colormap.__init__(self, name, N)",
                "def _init(self):\n    self._lut = np.zeros((self.N + 3, 4), float)\n    self._lut[:-3] = to_rgba_array(self.colors)\n    self._isinit = True\n    self._set_extremes()",
                "def _resample(self, lutsize):\n    \"\"\"Return a new color map with *lutsize* entries.\"\"\"\n    colors = self(np.linspace(0, 1, lutsize))\n    new_cmap = ListedColormap(colors, name=self.name)\n    # Keep the over/under values too\n    new_cmap._rgba_over = self._rgba_over\n    new_cmap._rgba_under = self._rgba_under\n    new_cmap._rgba_bad = self._rgba_bad\n    return new_cmap",
                "def reversed(self, name=None):\n    \"\"\"\n    Return a reversed instance of the Colormap.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name for the reversed colormap. If it's None the\n        name will be the name of the parent colormap + \"_r\".\n\n    Returns\n    -------\n    ListedColormap\n        A reversed instance of the colormap.\n    \"\"\"\n    if name is None:\n        name = self.name + \"_r\"\n\n    colors_r = list(reversed(self.colors))\n    new_cmap = ListedColormap(colors_r, name=name, N=self.N)\n    # Reverse the over/under values too\n    new_cmap._rgba_over = self._rgba_under\n    new_cmap._rgba_under = self._rgba_over\n    new_cmap._rgba_bad = self._rgba_bad\n    return new_cmap",
                "def __init__(self, vmin=None, vmax=None, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    vmin, vmax : float or None\n        If *vmin* and/or *vmax* is not given, they are initialized from the\n        minimum and maximum value, respectively, of the first input\n        processed; i.e., ``__call__(A)`` calls ``autoscale_None(A)``.\n\n    clip : bool, default: False\n        If ``True`` values falling outside the range ``[vmin, vmax]``,\n        are mapped to 0 or 1, whichever is closer, and masked values are\n        set to 1.  If ``False`` masked values remain masked.\n\n        Clipping silently defeats the purpose of setting the over, under,\n        and masked colors in a colormap, so it is likely to lead to\n        surprises; therefore the default is ``clip=False``.\n\n    Notes\n    -----\n    Returns 0 if ``vmin == vmax``.\n    \"\"\"\n    self.vmin = _sanitize_extrema(vmin)\n    self.vmax = _sanitize_extrema(vmax)\n    self.clip = clip",
                "@staticmethod\ndef process_value(value):\n    \"\"\"\n    Homogenize the input *value* for easy and efficient normalization.\n\n    *value* can be a scalar or sequence.\n\n    Returns\n    -------\n    result : masked array\n        Masked array with the same shape as *value*.\n    is_scalar : bool\n        Whether *value* is a scalar.\n\n    Notes\n    -----\n    Float dtypes are preserved; integer types with two bytes or smaller are\n    converted to np.float32, and larger types are converted to np.float64.\n    Preserving float32 when possible, and using in-place operations,\n    greatly improves speed for large arrays.\n    \"\"\"\n    is_scalar = not np.iterable(value)\n    if is_scalar:\n        value = [value]\n    dtype = np.min_scalar_type(value)\n    if np.issubdtype(dtype, np.integer) or dtype.type is np.bool_:\n        # bool_/int8/int16 -> float32; int32/int64 -> float64\n        dtype = np.promote_types(dtype, np.float32)\n    # ensure data passed in as an ndarray subclass are interpreted as\n    # an ndarray. See issue #6622.\n    mask = np.ma.getmask(value)\n    data = np.asarray(value)\n    result = np.ma.array(data, mask=mask, dtype=dtype, copy=True)\n    return result, is_scalar",
                "def __call__(self, value, clip=None):\n    \"\"\"\n    Normalize *value* data in the ``[vmin, vmax]`` interval into the\n    ``[0.0, 1.0]`` interval and return it.\n\n    Parameters\n    ----------\n    value\n        Data to normalize.\n    clip : bool\n        If ``None``, defaults to ``self.clip`` (which defaults to\n        ``False``).\n\n    Notes\n    -----\n    If not already initialized, ``self.vmin`` and ``self.vmax`` are\n    initialized using ``self.autoscale_None(value)``.\n    \"\"\"\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    self.autoscale_None(result)\n    # Convert at least to float, without losing precision.\n    (vmin,), _ = self.process_value(self.vmin)\n    (vmax,), _ = self.process_value(self.vmax)\n    if vmin == vmax:\n        result.fill(0)   # Or should it be all masked?  Or 0.5?\n    elif vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # ma division is very slow; we can take a shortcut\n        resdat = result.data\n        resdat -= vmin\n        resdat /= (vmax - vmin)\n        result = np.ma.array(resdat, mask=result.mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until both vmin and vmax are set\")\n    (vmin,), _ = self.process_value(self.vmin)\n    (vmax,), _ = self.process_value(self.vmax)\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return vmin + val * (vmax - vmin)\n    else:\n        return vmin + value * (vmax - vmin)",
                "def autoscale(self, A):\n    \"\"\"Set *vmin*, *vmax* to min, max of *A*.\"\"\"\n    A = np.asanyarray(A)\n    self.vmin = A.min()\n    self.vmax = A.max()",
                "def autoscale_None(self, A):\n    \"\"\"If vmin or vmax are not set, use the min/max of *A* to set them.\"\"\"\n    A = np.asanyarray(A)\n    if self.vmin is None and A.size:\n        self.vmin = A.min()\n    if self.vmax is None and A.size:\n        self.vmax = A.max()",
                "def scaled(self):\n    \"\"\"Return whether vmin and vmax are set.\"\"\"\n    return self.vmin is not None and self.vmax is not None",
                "def __init__(self, vcenter, vmin=None, vmax=None):\n    \"\"\"\n    Normalize data with a set center.\n\n    Useful when mapping data with an unequal rates of change around a\n    conceptual center, e.g., data that range from -2 to 4, with 0 as\n    the midpoint.\n\n    Parameters\n    ----------\n    vcenter : float\n        The data value that defines ``0.5`` in the normalization.\n    vmin : float, optional\n        The data value that defines ``0.0`` in the normalization.\n        Defaults to the min value of the dataset.\n    vmax : float, optional\n        The data value that defines ``1.0`` in the normalization.\n        Defaults to the the max value of the dataset.\n\n    Examples\n    --------\n    This maps data value -4000 to 0., 0 to 0.5, and +10000 to 1.0; data\n    between is linearly interpolated::\n\n        >>> import matplotlib.colors as mcolors\n        >>> offset = mcolors.TwoSlopeNorm(vmin=-4000.,\n                                          vcenter=0., vmax=10000)\n        >>> data = [-4000., -2000., 0., 2500., 5000., 7500., 10000.]\n        >>> offset(data)\n        array([0., 0.25, 0.5, 0.625, 0.75, 0.875, 1.0])\n    \"\"\"\n\n    self.vcenter = vcenter\n    self.vmin = vmin\n    self.vmax = vmax\n    if vcenter is not None and vmax is not None and vcenter >= vmax:\n        raise ValueError('vmin, vcenter, and vmax must be in '\n                         'ascending order')\n    if vcenter is not None and vmin is not None and vcenter <= vmin:\n        raise ValueError('vmin, vcenter, and vmax must be in '\n                         'ascending order')",
                "def autoscale_None(self, A):\n    \"\"\"\n    Get vmin and vmax, and then clip at vcenter\n    \"\"\"\n    super().autoscale_None(A)\n    if self.vmin > self.vcenter:\n        self.vmin = self.vcenter\n    if self.vmax < self.vcenter:\n        self.vmax = self.vcenter",
                "def __call__(self, value, clip=None):\n    \"\"\"\n    Map value to the interval [0, 1]. The clip argument is unused.\n    \"\"\"\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)  # sets self.vmin, self.vmax if None\n\n    if not self.vmin <= self.vcenter <= self.vmax:\n        raise ValueError(\"vmin, vcenter, vmax must increase monotonically\")\n    result = np.ma.masked_array(\n        np.interp(result, [self.vmin, self.vcenter, self.vmax],\n                  [0, 0.5, 1.]), mask=np.ma.getmask(result))\n    if is_scalar:\n        result = np.atleast_1d(result)[0]\n    return result",
                "def _check_vmin_vmax(self):\n    if self.vmin > self.vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif self.vmin <= 0:\n        raise ValueError(\"minvalue must be positive\")",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    result = np.ma.masked_less_equal(result, 0, copy=False)\n\n    self.autoscale_None(result)\n    self._check_vmin_vmax()\n    vmin, vmax = self.vmin, self.vmax\n    if vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # in-place equivalent of above can be much faster\n        resdat = result.data\n        mask = result.mask\n        if mask is np.ma.nomask:\n            mask = (resdat <= 0)\n        else:\n            mask |= resdat <= 0\n        np.copyto(resdat, 1, where=mask)\n        np.log(resdat, resdat)\n        resdat -= np.log(vmin)\n        resdat /= (np.log(vmax) - np.log(vmin))\n        result = np.ma.array(resdat, mask=mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    self._check_vmin_vmax()\n    vmin, vmax = self.vmin, self.vmax\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return vmin * np.ma.power((vmax / vmin), val)\n    else:\n        return vmin * pow((vmax / vmin), value)",
                "def autoscale(self, A):\n    # docstring inherited.\n    super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))",
                "def autoscale_None(self, A):\n    # docstring inherited.\n    super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))",
                "def __init__(self, linthresh, linscale=1.0, vmin=None, vmax=None,\n             clip=False, *, base=None):\n    \"\"\"\n    Parameters\n    ----------\n    linthresh : float\n        The range within which the plot is linear (to avoid having the plot\n        go to infinity around zero).\n\n    linscale : float, default: 1\n        This allows the linear range (-*linthresh* to *linthresh*)\n        to be stretched relative to the logarithmic range. Its\n        value is the number of powers of *base* to use for each\n        half of the linear range.\n\n        For example, when *linscale* == 1.0 (the default) and\n        ``base=10``, then space used for the positive and negative\n        halves of the linear range will be equal to a decade in\n        the logarithmic.\n\n    base : float, default: None\n        If not given, defaults to ``np.e`` (consistent with prior\n        behavior) and warns.\n\n        In v3.3 the default value will change to 10 to be consistent with\n        `.SymLogNorm`.\n\n        To suppress the warning pass *base* as a keyword argument.\n\n    \"\"\"\n    Normalize.__init__(self, vmin, vmax, clip)\n    if base is None:\n        self._base = np.e\n        cbook.warn_deprecated(\n            \"3.2\", removal=\"3.4\", message=\"default base will change from \"\n            \"np.e to 10 %(removal)s.  To suppress this warning specify \"\n            \"the base keyword argument.\")\n    else:\n        self._base = base\n    self._log_base = np.log(self._base)\n\n    self.linthresh = float(linthresh)\n    self._linscale_adj = (linscale / (1.0 - self._base ** -1))\n    if vmin is not None and vmax is not None:\n        self._transform_vmin_vmax()",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n    self.autoscale_None(result)\n    vmin, vmax = self.vmin, self.vmax\n\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        # in-place equivalent of above can be much faster\n        resdat = self._transform(result.data)\n        resdat -= self._lower\n        resdat /= (self._upper - self._lower)\n\n    if is_scalar:\n        result = result[0]\n    return result",
                "def _transform(self, a):\n    \"\"\"Inplace transformation.\"\"\"\n    with np.errstate(invalid=\"ignore\"):\n        masked = np.abs(a) > self.linthresh\n    sign = np.sign(a[masked])\n    log = (self._linscale_adj +\n           np.log(np.abs(a[masked]) / self.linthresh) / self._log_base)\n    log *= sign * self.linthresh\n    a[masked] = log\n    a[~masked] *= self._linscale_adj\n    return a",
                "def _inv_transform(self, a):\n    \"\"\"Inverse inplace Transformation.\"\"\"\n    masked = np.abs(a) > (self.linthresh * self._linscale_adj)\n    sign = np.sign(a[masked])\n    exp = np.power(self._base,\n                   sign * a[masked] / self.linthresh - self._linscale_adj)\n    exp *= sign * self.linthresh\n    a[masked] = exp\n    a[~masked] /= self._linscale_adj\n    return a",
                "def _transform_vmin_vmax(self):\n    \"\"\"Calculate vmin and vmax in the transformed system.\"\"\"\n    vmin, vmax = self.vmin, self.vmax\n    arr = np.array([vmax, vmin]).astype(float)\n    self._upper, self._lower = self._transform(arr)",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    val = np.ma.asarray(value)\n    val = val * (self._upper - self._lower) + self._lower\n    return self._inv_transform(val)",
                "def autoscale(self, A):\n    # docstring inherited.\n    super().autoscale(A)\n    self._transform_vmin_vmax()",
                "def autoscale_None(self, A):\n    # docstring inherited.\n    super().autoscale_None(A)\n    self._transform_vmin_vmax()",
                "def __init__(self, gamma, vmin=None, vmax=None, clip=False):\n    Normalize.__init__(self, vmin, vmax, clip)\n    self.gamma = gamma",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    result, is_scalar = self.process_value(value)\n\n    self.autoscale_None(result)\n    gamma = self.gamma\n    vmin, vmax = self.vmin, self.vmax\n    if vmin > vmax:\n        raise ValueError(\"minvalue must be less than or equal to maxvalue\")\n    elif vmin == vmax:\n        result.fill(0)\n    else:\n        if clip:\n            mask = np.ma.getmask(result)\n            result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),\n                                 mask=mask)\n        resdat = result.data\n        resdat -= vmin\n        resdat[resdat < 0] = 0\n        np.power(resdat, gamma, resdat)\n        resdat /= (vmax - vmin) ** gamma\n\n        result = np.ma.array(resdat, mask=result.mask, copy=False)\n    if is_scalar:\n        result = result[0]\n    return result",
                "def inverse(self, value):\n    if not self.scaled():\n        raise ValueError(\"Not invertible until scaled\")\n    gamma = self.gamma\n    vmin, vmax = self.vmin, self.vmax\n\n    if np.iterable(value):\n        val = np.ma.asarray(value)\n        return np.ma.power(val, 1. / gamma) * (vmax - vmin) + vmin\n    else:\n        return pow(value, 1. / gamma) * (vmax - vmin) + vmin",
                "def __init__(self, boundaries, ncolors, clip=False):\n    \"\"\"\n    Parameters\n    ----------\n    boundaries : array-like\n        Monotonically increasing sequence of boundaries\n    ncolors : int\n        Number of colors in the colormap to be used\n    clip : bool, optional\n        If clip is ``True``, out of range values are mapped to 0 if they\n        are below ``boundaries[0]`` or mapped to ``ncolors - 1`` if they\n        are above ``boundaries[-1]``.\n\n        If clip is ``False``, out of range values are mapped to -1 if\n        they are below ``boundaries[0]`` or mapped to *ncolors* if they are\n        above ``boundaries[-1]``. These are then converted to valid indices\n        by `Colormap.__call__`.\n\n    Notes\n    -----\n    *boundaries* defines the edges of bins, and data falling within a bin\n    is mapped to the color with the same index.\n\n    If the number of bins doesn't equal *ncolors*, the color is chosen\n    by linear interpolation of the bin number onto color numbers.\n    \"\"\"\n    self.clip = clip\n    self.vmin = boundaries[0]\n    self.vmax = boundaries[-1]\n    self.boundaries = np.asarray(boundaries)\n    self.N = len(self.boundaries)\n    self.Ncmap = ncolors\n    if self.N - 1 == self.Ncmap:\n        self._interp = False\n    else:\n        self._interp = True",
                "def __call__(self, value, clip=None):\n    if clip is None:\n        clip = self.clip\n\n    xx, is_scalar = self.process_value(value)\n    mask = np.ma.getmaskarray(xx)\n    xx = np.atleast_1d(xx.filled(self.vmax + 1))\n    if clip:\n        np.clip(xx, self.vmin, self.vmax, out=xx)\n        max_col = self.Ncmap - 1\n    else:\n        max_col = self.Ncmap\n    iret = np.zeros(xx.shape, dtype=np.int16)\n    for i, b in enumerate(self.boundaries):\n        iret[xx >= b] = i\n    if self._interp:\n        scalefac = (self.Ncmap - 1) / (self.N - 2)\n        iret = (iret * scalefac).astype(np.int16)\n    iret[xx < self.vmin] = -1\n    iret[xx >= self.vmax] = max_col\n    ret = np.ma.array(iret, mask=mask)\n    if is_scalar:\n        ret = int(ret[0])  # assume python scalar\n    return ret",
                "def inverse(self, value):\n    \"\"\"\n    Raises\n    ------\n    ValueError\n        BoundaryNorm is not invertible, so calling this method will always\n        raise an error\n    \"\"\"\n    raise ValueError(\"BoundaryNorm is not invertible\")",
                "def __call__(self, value, clip=None):\n    return value",
                "def inverse(self, value):\n    return value",
                "def __init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1,\n             hsv_min_sat=1, hsv_max_sat=0):\n    \"\"\"\n    Specify the azimuth (measured clockwise from south) and altitude\n    (measured up from the plane of the surface) of the light source\n    in degrees.\n\n    Parameters\n    ----------\n    azdeg : float, default: 315 degrees (from the northwest)\n        The azimuth (0-360, degrees clockwise from North) of the light\n        source.\n    altdeg : float, default: 45 degrees\n        The altitude (0-90, degrees up from horizontal) of the light\n        source.\n\n    Notes\n    -----\n    For backwards compatibility, the parameters *hsv_min_val*,\n    *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at\n    initialization as well.  However, these parameters will only be used if\n    \"blend_mode='hsv'\" is passed into `shade` or `shade_rgb`.\n    See the documentation for `blend_hsv` for more details.\n    \"\"\"\n    self.azdeg = azdeg\n    self.altdeg = altdeg\n    self.hsv_min_val = hsv_min_val\n    self.hsv_max_val = hsv_max_val\n    self.hsv_min_sat = hsv_min_sat\n    self.hsv_max_sat = hsv_max_sat",
                "@property\ndef direction(self):\n    \"\"\"The unit vector direction towards the light source.\"\"\"\n    # Azimuth is in degrees clockwise from North. Convert to radians\n    # counterclockwise from East (mathematical notation).\n    az = np.radians(90 - self.azdeg)\n    alt = np.radians(self.altdeg)\n    return np.array([\n        np.cos(az) * np.cos(alt),\n        np.sin(az) * np.cos(alt),\n        np.sin(alt)\n    ])",
                "def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.):\n    \"\"\"\n    Calculate the illumination intensity for a surface using the defined\n    azimuth and elevation for the light source.\n\n    This computes the normal vectors for the surface, and then passes them\n    on to `shade_normals`\n\n    Parameters\n    ----------\n    elevation : array-like\n        A 2d array (or equivalent) of the height values used to generate an\n        illumination map\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topographic effects.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n\n    # Because most image and raster GIS data has the first row in the array\n    # as the \"top\" of the image, dy is implicitly negative.  This is\n    # consistent to what `imshow` assumes, as well.\n    dy = -dy\n\n    # compute the normal vectors from the partial derivatives\n    e_dy, e_dx = np.gradient(vert_exag * elevation, dy, dx)\n\n    # .view is to keep subclasses\n    normal = np.empty(elevation.shape + (3,)).view(type(elevation))\n    normal[..., 0] = -e_dx\n    normal[..., 1] = -e_dy\n    normal[..., 2] = 1\n    normal /= _vector_magnitude(normal)\n\n    return self.shade_normals(normal, fraction)",
                "def shade_normals(self, normals, fraction=1.):\n    \"\"\"\n    Calculate the illumination intensity for the normal vectors of a\n    surface using the defined azimuth and elevation for the light source.\n\n    Imagine an artificial sun placed at infinity in some azimuth and\n    elevation position illuminating our surface. The parts of the surface\n    that slope toward the sun should brighten while those sides facing away\n    should become darker.\n\n    Parameters\n    ----------\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n\n    Returns\n    -------\n    ndarray\n        A 2d array of illumination values between 0-1, where 0 is\n        completely in shadow and 1 is completely illuminated.\n    \"\"\"\n\n    intensity = normals.dot(self.direction)\n\n    # Apply contrast stretch\n    imin, imax = intensity.min(), intensity.max()\n    intensity *= fraction\n\n    # Rescale to 0-1, keeping range before contrast stretch\n    # If constant slope, keep relative scaling (i.e. flat should be 0.5,\n    # fully occluded 0, etc.)\n    if (imax - imin) > 1e-6:\n        # Strictly speaking, this is incorrect. Negative values should be\n        # clipped to 0 because they're fully occluded. However, rescaling\n        # in this manner is consistent with the previous implementation and\n        # visually appears better than a \"hard\" clip.\n        intensity -= imin\n        intensity /= (imax - imin)\n    intensity = np.clip(intensity, 0, 1)\n\n    return intensity",
                "def shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None,\n          vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs):\n    \"\"\"\n    Combine colormapped data values with an illumination intensity map\n    (a.k.a.  \"hillshade\") of the values.\n\n    Parameters\n    ----------\n    data : array-like\n        A 2d array (or equivalent) of the height values used to generate a\n        shaded map.\n    cmap : `~matplotlib.colors.Colormap`\n        The colormap used to color the *data* array. Note that this must be\n        a `~matplotlib.colors.Colormap` instance.  For example, rather than\n        passing in ``cmap='gist_earth'``, use\n        ``cmap=plt.get_cmap('gist_earth')`` instead.\n    norm : `~matplotlib.colors.Normalize` instance, optional\n        The normalization used to scale values before colormapping. If\n        None, the input will be linearly scaled between its min and max.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data\n        values with the illumination intensity.  Default is\n        \"overlay\".  Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to\n        combine an MxNx3 RGB array of floats (ranging 0 to 1) with\n        an MxNx1 hillshade array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``) Additional kwargs supplied\n        to this function will be passed on to the *blend_mode*\n        function.\n    vmin : float or None, optional\n        The minimum value used in colormapping *data*. If *None* the\n        minimum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vmax : float or None, optional\n        The maximum value used in colormapping *data*. If *None* the\n        maximum value in *data* is used. If *norm* is specified, then this\n        argument will be ignored.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    fraction : number, optional\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    ndarray\n        An MxNx4 array of floats ranging between 0-1.\n    \"\"\"\n    if vmin is None:\n        vmin = data.min()\n    if vmax is None:\n        vmax = data.max()\n    if norm is None:\n        norm = Normalize(vmin=vmin, vmax=vmax)\n\n    rgb0 = cmap(norm(data))\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,\n                          vert_exag=vert_exag, dx=dx, dy=dy,\n                          fraction=fraction, **kwargs)\n    # Don't overwrite the alpha channel, if present.\n    rgb0[..., :3] = rgb1[..., :3]\n    return rgb0",
                "def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n              vert_exag=1, dx=1, dy=1, **kwargs):\n    \"\"\"\n    Use this light source to adjust the colors of the *rgb* input array to\n    give the impression of a shaded relief map with the given *elevation*.\n\n    Parameters\n    ----------\n    rgb : array-like\n        An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n    elevation : array-like\n        An (M, N) array of the height values used to generate a shaded map.\n    fraction : number\n        Increases or decreases the contrast of the hillshade.  Values\n        greater than one will cause intermediate values to move closer to\n        full illumination or shadow (and clipping any values that move\n        beyond 0 or 1). Note that this is not visually or mathematically\n        the same as vertical exaggeration.\n    blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n        The type of blending used to combine the colormapped data values\n        with the illumination intensity.  For backwards compatibility, this\n        defaults to \"hsv\". Note that for most topographic surfaces,\n        \"overlay\" or \"soft\" appear more visually realistic. If a\n        user-defined function is supplied, it is expected to combine an\n        MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n        array (also 0 to 1).  (Call signature\n        ``func(rgb, illum, **kwargs)``)\n        Additional kwargs supplied to this function will be passed on to\n        the *blend_mode* function.\n    vert_exag : number, optional\n        The amount to exaggerate the elevation values by when calculating\n        illumination. This can be used either to correct for differences in\n        units between the x-y coordinate system and the elevation\n        coordinate system (e.g. decimal degrees vs. meters) or to\n        exaggerate or de-emphasize topography.\n    dx : number, optional\n        The x-spacing (columns) of the input *elevation* grid.\n    dy : number, optional\n        The y-spacing (rows) of the input *elevation* grid.\n    Additional kwargs are passed on to the *blend_mode* function.\n\n    Returns\n    -------\n    ndarray\n        An (m, n, 3) array of floats ranging between 0-1.\n    \"\"\"\n    # Calculate the \"hillshade\" intensity.\n    intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n    intensity = intensity[..., np.newaxis]\n\n    # Blend the hillshade and rgb data using the specified mode\n    lookup = {\n            'hsv': self.blend_hsv,\n            'soft': self.blend_soft_light,\n            'overlay': self.blend_overlay,\n            }\n    if blend_mode in lookup:\n        blend = lookup[blend_mode](rgb, intensity, **kwargs)\n    else:\n        try:\n            blend = blend_mode(rgb, intensity, **kwargs)\n        except TypeError as err:\n            raise ValueError('\"blend_mode\" must be callable or one of {}'\n                             .format(lookup.keys)) from err\n\n    # Only apply result where hillshade intensity isn't masked\n    if hasattr(intensity, 'mask'):\n        mask = intensity.mask[..., 0]\n        for i in range(3):\n            blend[..., i][mask] = rgb[..., i][mask]\n\n    return blend",
                "def blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None,\n              hsv_min_val=None, hsv_min_sat=None):\n    \"\"\"\n    Take the input data array, convert to HSV values in the given colormap,\n    then adjust those color values to give the impression of a shaded\n    relief map with a specified light source.  RGBA values are returned,\n    which can then be used to plot the shaded image with imshow.\n\n    The color of the resulting image will be darkened by moving the (s, v)\n    values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the\n    shaded regions, or lightened by sliding (s, v) toward (hsv_max_sat,\n    hsv_max_val) in regions that are illuminated.  The default extremes are\n    chose so that completely shaded points are nearly black (s = 1, v = 0)\n    and completely illuminated points are nearly white (s = 0, v = 1).\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n    hsv_max_sat : number, default: 1\n        The maximum saturation value that the *intensity* map can shift the\n        output image to.\n    hsv_min_sat : number, optional\n        The minimum saturation value that the *intensity* map can shift the\n        output image to. Defaults to 0.\n    hsv_max_val : number, optional\n        The maximum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 1.\n    hsv_min_val : number, optional\n        The minimum value (\"v\" in \"hsv\") that the *intensity* map can shift\n        the output image to. Defaults to 0.\n\n    Returns\n    -------\n    ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    # Backward compatibility...\n    if hsv_max_sat is None:\n        hsv_max_sat = self.hsv_max_sat\n    if hsv_max_val is None:\n        hsv_max_val = self.hsv_max_val\n    if hsv_min_sat is None:\n        hsv_min_sat = self.hsv_min_sat\n    if hsv_min_val is None:\n        hsv_min_val = self.hsv_min_val\n\n    # Expects a 2D intensity array scaled between -1 to 1...\n    intensity = intensity[..., 0]\n    intensity = 2 * intensity - 1\n\n    # Convert to rgb, then rgb to hsv\n    hsv = rgb_to_hsv(rgb[:, :, 0:3])\n    hue, sat, val = np.moveaxis(hsv, -1, 0)\n\n    # Modify hsv values (in place) to simulate illumination.\n    # putmask(A, mask, B) <=> A[mask] = B[mask]\n    np.putmask(sat, (np.abs(sat) > 1.e-10) & (intensity > 0),\n               (1 - intensity) * sat + intensity * hsv_max_sat)\n    np.putmask(sat, (np.abs(sat) > 1.e-10) & (intensity < 0),\n               (1 + intensity) * sat - intensity * hsv_min_sat)\n    np.putmask(val, intensity > 0,\n               (1 - intensity) * val + intensity * hsv_max_val)\n    np.putmask(val, intensity < 0,\n               (1 + intensity) * val - intensity * hsv_min_val)\n    np.clip(hsv[:, :, 1:], 0, 1, out=hsv[:, :, 1:])\n\n    # Convert modified hsv back to rgb.\n    return hsv_to_rgb(hsv)",
                "def blend_soft_light(self, rgb, intensity):\n    \"\"\"\n    Combine an rgb image with an intensity map using \"soft light\" blending,\n    using the \"pegtop\" formula.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    return 2 * intensity * rgb + (1 - 2 * intensity) * rgb**2",
                "def blend_overlay(self, rgb, intensity):\n    \"\"\"\n    Combines an rgb image with an intensity map using \"overlay\" blending.\n\n    Parameters\n    ----------\n    rgb : ndarray\n        An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n    intensity : ndarray\n        An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n    Returns\n    -------\n    ndarray\n        An MxNx3 RGB array representing the combined images.\n    \"\"\"\n    low = 2 * intensity * rgb\n    high = 1 - 2 * (1 - intensity) * (1 - rgb)\n    return np.where(rgb <= 0.5, low, high)"
            ],
            "inscope_function_signatures": [
                "get_named_colors_mapping()",
                "_sanitize_extrema(ex)",
                "_is_nth_color(c)",
                "is_color_like(c)",
                "same_color(c1, c2)",
                "to_rgba(c, alpha=None)",
                "_to_rgba_no_colorcycle(c, alpha=None)",
                "to_rgba_array(c, alpha=None)",
                "to_rgb(c)",
                "to_hex(c, keep_alpha=False)",
                "_create_lookup_table(N, data, gamma=1.0)",
                "makeMappingArray(N, data, gamma=1.0)",
                "_warn_if_global_cmap_modified(cmap)",
                "rgb_to_hsv(arr)",
                "hsv_to_rgb(hsv)",
                "_vector_magnitude(arr)",
                "from_levels_and_colors(levels, colors, extend='neither')",
                "__init__(self, mapping)",
                "__setitem__(self, key, value)",
                "__delitem__(self, key)",
                "__init__(self, name, N=256)",
                "__call__(self, X, alpha=None, bytes=False)",
                "__copy__(self)",
                "set_bad(self, color='k', alpha=None)",
                "set_under(self, color='k', alpha=None)",
                "set_over(self, color='k', alpha=None)",
                "_set_extremes(self)",
                "_init(self)",
                "is_gray(self)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, name, segmentdata, N=256, gamma=1.0)",
                "_init(self)",
                "set_gamma(self, gamma)",
                "from_list(name, colors, N=256, gamma=1.0)",
                "_resample(self, lutsize)",
                "_reverser(func, x)",
                "reversed(self, name=None)",
                "__init__(self, colors, name='from_list', N=None)",
                "_init(self)",
                "_resample(self, lutsize)",
                "reversed(self, name=None)",
                "__init__(self, vmin=None, vmax=None, clip=False)",
                "process_value(value)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "scaled(self)",
                "__init__(self, vcenter, vmin=None, vmax=None)",
                "autoscale_None(self, A)",
                "__call__(self, value, clip=None)",
                "_check_vmin_vmax(self)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "__init__(self, linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)",
                "__call__(self, value, clip=None)",
                "_transform(self, a)",
                "_inv_transform(self, a)",
                "_transform_vmin_vmax(self)",
                "inverse(self, value)",
                "autoscale(self, A)",
                "autoscale_None(self, A)",
                "__init__(self, gamma, vmin=None, vmax=None, clip=False)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__init__(self, boundaries, ncolors, clip=False)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__call__(self, value, clip=None)",
                "inverse(self, value)",
                "__init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1, hsv_min_sat=1, hsv_max_sat=0)",
                "direction(self)",
                "hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)",
                "shade_normals(self, normals, fraction=1.0)",
                "shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None, vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs)",
                "shade_rgb(self, rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs)",
                "blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)",
                "blend_soft_light(self, rgb, intensity)",
                "blend_overlay(self, rgb, intensity)"
            ],
            "variables_in_file": {
                "dict": [
                    789,
                    78
                ],
                "__init__": [
                    80
                ],
                "super": [
                    1219,
                    1347,
                    1130,
                    80,
                    84,
                    88,
                    1342,
                    1215
                ],
                "mapping": [
                    80
                ],
                "self.cache": [
                    89,
                    81,
                    85
                ],
                "self": [
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    1026,
                    1028,
                    1030,
                    1032,
                    527,
                    1033,
                    1053,
                    1055,
                    1056,
                    551,
                    552,
                    1067,
                    1068,
                    560,
                    1073,
                    1074,
                    1075,
                    1076,
                    565,
                    567,
                    1080,
                    571,
                    572,
                    573,
                    576,
                    578,
                    81,
                    85,
                    89,
                    601,
                    603,
                    604,
                    605,
                    1116,
                    1117,
                    1118,
                    611,
                    612,
                    613,
                    614,
                    1131,
                    620,
                    621,
                    622,
                    623,
                    1132,
                    1133,
                    1134,
                    1140,
                    629,
                    630,
                    631,
                    632,
                    1141,
                    1143,
                    635,
                    636,
                    1146,
                    638,
                    639,
                    640,
                    642,
                    643,
                    650,
                    651,
                    652,
                    653,
                    1162,
                    1164,
                    1677,
                    1169,
                    1678,
                    1171,
                    1679,
                    1680,
                    1681,
                    1175,
                    1176,
                    1177,
                    1682,
                    1689,
                    1690,
                    1202,
                    1204,
                    1205,
                    1749,
                    736,
                    737,
                    738,
                    739,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    1262,
                    1264,
                    1777,
                    757,
                    758,
                    1270,
                    1271,
                    1273,
                    1274,
                    1276,
                    1280,
                    1282,
                    1283,
                    1284,
                    1296,
                    1297,
                    1298,
                    1307,
                    1309,
                    1310,
                    1311,
                    801,
                    1313,
                    803,
                    804,
                    805,
                    1318,
                    1320,
                    1321,
                    1322,
                    1324,
                    1329,
                    1331,
                    1334,
                    1337,
                    1338,
                    829,
                    1343,
                    832,
                    835,
                    1348,
                    837,
                    839,
                    840,
                    841,
                    1866,
                    1357,
                    1358,
                    1362,
                    1364,
                    1366,
                    1367,
                    1368,
                    874,
                    876,
                    1390,
                    880,
                    881,
                    1392,
                    1393,
                    884,
                    885,
                    893,
                    894,
                    895,
                    1920,
                    898,
                    899,
                    900,
                    901,
                    1925,
                    1926,
                    1927,
                    905,
                    906,
                    908,
                    909,
                    910,
                    1439,
                    1440,
                    929,
                    1441,
                    931,
                    932,
                    1442,
                    934,
                    935,
                    936,
                    1443,
                    1444,
                    1445,
                    1446,
                    1448,
                    1452,
                    1454,
                    1456,
                    1458,
                    1459,
                    1461,
                    1463,
                    1465,
                    1466,
                    1468,
                    1469,
                    1987,
                    1989,
                    1991,
                    968,
                    969,
                    970,
                    1993
                ],
                "__setitem__": [
                    84
                ],
                "key": [
                    88,
                    835,
                    832,
                    84
                ],
                "value": [
                    1282,
                    1028,
                    1171,
                    1058,
                    1059,
                    1062,
                    1454,
                    1207,
                    1336,
                    1208,
                    1211,
                    84,
                    1364,
                    1492,
                    1495,
                    993,
                    995,
                    996,
                    1002,
                    1003,
                    1395,
                    1140,
                    1396,
                    1399
                ],
                "self.cache.clear": [
                    89,
                    85
                ],
                "__delitem__": [
                    88
                ],
                "_colors_full_map": [
                    98,
                    99,
                    100,
                    197,
                    103,
                    104,
                    169,
                    201,
                    361,
                    362,
                    109,
                    175,
                    92,
                    94,
                    95
                ],
                "_colors_full_map.update": [
                    98,
                    99,
                    100,
                    103,
                    94,
                    95
                ],
                "XKCD_COLORS": [
                    96,
                    94
                ],
                "k.replace": [
                    100,
                    95
                ],
                "k": [
                    96,
                    97,
                    100,
                    101,
                    102,
                    95
                ],
                "v": [
                    96,
                    100,
                    101,
                    1604,
                    1610,
                    1580,
                    1599,
                    1615,
                    1625,
                    1618,
                    1588,
                    1589,
                    1590,
                    1623,
                    1624,
                    1593,
                    95
                ],
                "XKCD_COLORS.items": [
                    96
                ],
                "CSS4_COLORS": [
                    98,
                    349
                ],
                "TABLEAU_COLORS": [
                    99,
                    101
                ],
                "TABLEAU_COLORS.items": [
                    101
                ],
                "BASE_COLORS": [
                    103
                ],
                "_ColorMapping": [
                    104
                ],
                "ex": [
                    113,
                    114,
                    116,
                    118
                ],
                "ret": [
                    1472,
                    1473,
                    116,
                    118,
                    119,
                    1470
                ],
                "ex.item": [
                    116
                ],
                "AttributeError": [
                    117
                ],
                "float": [
                    898,
                    323,
                    1273,
                    742,
                    298,
                    235,
                    300,
                    1330,
                    435,
                    118,
                    889,
                    255
                ],
                "isinstance": [
                    204,
                    782,
                    783,
                    879,
                    305,
                    277,
                    250,
                    124,
                    191
                ],
                "c": [
                    256,
                    130,
                    259,
                    260,
                    133,
                    262,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    284,
                    285,
                    163,
                    167,
                    169,
                    297,
                    300,
                    173,
                    175,
                    305,
                    309,
                    314,
                    188,
                    189,
                    191,
                    192,
                    322,
                    197,
                    325,
                    201,
                    330,
                    204,
                    206,
                    209,
                    212,
                    340,
                    342,
                    215,
                    343,
                    218,
                    221,
                    226,
                    229,
                    235,
                    239,
                    243,
                    246,
                    248,
                    250,
                    124,
                    255
                ],
                "str": [
                    204,
                    783,
                    879,
                    305,
                    124,
                    191
                ],
                "re.match": [
                    226,
                    206,
                    212,
                    218,
                    124
                ],
                "re": [
                    226,
                    206,
                    212,
                    218,
                    124,
                    350
                ],
                "_is_nth_color": [
                    130,
                    163
                ],
                "to_rgba": [
                    612,
                    325,
                    133,
                    330,
                    300,
                    364,
                    621,
                    340,
                    309,
                    630,
                    791
                ],
                "ValueError": [
                    261,
                    134,
                    1287,
                    1163,
                    780,
                    1037,
                    1165,
                    1935,
                    1054,
                    1568,
                    291,
                    301,
                    2093,
                    1203,
                    310,
                    311,
                    1335,
                    444,
                    451,
                    454,
                    1483,
                    1370,
                    1120,
                    1123,
                    236,
                    1517,
                    1391,
                    240,
                    244,
                    247,
                    1144,
                    249,
                    253
                ],
                "all": [
                    584,
                    250,
                    142
                ],
                "to_rgba_array": [
                    899,
                    365,
                    142
                ],
                "c1": [
                    142
                ],
                "c2": [
                    142
                ],
                "prop_cycler": [
                    165,
                    166
                ],
                "rcParams": [
                    165
                ],
                "colors": [
                    905,
                    906,
                    779,
                    782,
                    783,
                    785,
                    787,
                    790,
                    166,
                    167,
                    2092,
                    2095,
                    2097,
                    2100,
                    2105,
                    361,
                    876,
                    877,
                    879,
                    880,
                    882,
                    883,
                    886,
                    889
                ],
                "get": [
                    166
                ],
                "prop_cycler.by_key": [
                    166
                ],
                "int": [
                    1472,
                    515,
                    228,
                    167,
                    583,
                    208,
                    1586,
                    214,
                    343,
                    568,
                    220
                ],
                "len": [
                    256,
                    322,
                    1443,
                    199,
                    167,
                    2090,
                    2092,
                    877,
                    782,
                    2094,
                    2095,
                    787,
                    883,
                    248,
                    282,
                    443
                ],
                "rgba": [
                    169,
                    171,
                    172,
                    173,
                    175,
                    178,
                    594,
                    597,
                    598
                ],
                "_colors_full_map.cache": [
                    169,
                    362,
                    175
                ],
                "alpha": [
                    256,
                    257,
                    258,
                    259,
                    283,
                    286,
                    287,
                    169,
                    300,
                    173,
                    175,
                    309,
                    580,
                    325,
                    581,
                    583,
                    585,
                    590,
                    210,
                    216,
                    222,
                    223,
                    612,
                    230,
                    231,
                    621,
                    243,
                    630
                ],
                "KeyError": [
                    202,
                    170,
                    198
                ],
                "TypeError": [
                    170,
                    301,
                    1934,
                    176,
                    441,
                    890
                ],
                "_to_rgba_no_colorcycle": [
                    173
                ],
                "orig_c": [
                    199,
                    241,
                    244,
                    247,
                    188,
                    253
                ],
                "np.ma.masked": [
                    189
                ],
                "np.ma": [
                    1292,
                    1293,
                    1040,
                    1041,
                    1173,
                    1047,
                    279,
                    280,
                    1182,
                    1183,
                    1059,
                    1188,
                    554,
                    1196,
                    1455,
                    1208,
                    1209,
                    1336,
                    189,
                    1470,
                    1215,
                    1219,
                    1375,
                    1376,
                    1384,
                    1002,
                    1004,
                    1396,
                    1397,
                    1145,
                    1147
                ],
                "np": [
                    2055,
                    1040,
                    1041,
                    1047,
                    1564,
                    1058,
                    1059,
                    1572,
                    1574,
                    554,
                    555,
                    1066,
                    1582,
                    559,
                    1072,
                    1583,
                    1584,
                    567,
                    576,
                    581,
                    595,
                    1627,
                    605,
                    1638,
                    1639,
                    1145,
                    1146,
                    1147,
                    1149,
                    652,
                    653,
                    1173,
                    1689,
                    1690,
                    1691,
                    1692,
                    1693,
                    1182,
                    1183,
                    1694,
                    1188,
                    1192,
                    1193,
                    1194,
                    1195,
                    1196,
                    1207,
                    1208,
                    1209,
                    189,
                    1215,
                    1219,
                    1740,
                    1743,
                    742,
                    1264,
                    246,
                    1271,
                    1793,
                    779,
                    1292,
                    1293,
                    787,
                    277,
                    279,
                    280,
                    282,
                    1306,
                    1307,
                    1308,
                    1310,
                    290,
                    1318,
                    1319,
                    1320,
                    298,
                    300,
                    1330,
                    309,
                    1336,
                    323,
                    325,
                    1375,
                    1376,
                    1381,
                    1384,
                    882,
                    1395,
                    1396,
                    1397,
                    1921,
                    898,
                    905,
                    1442,
                    1455,
                    1456,
                    434,
                    435,
                    1458,
                    1462,
                    439,
                    1467,
                    1470,
                    453,
                    458,
                    461,
                    462,
                    465,
                    2001,
                    2005,
                    471,
                    2007,
                    2009,
                    2011,
                    2013,
                    993,
                    996,
                    997,
                    999,
                    1513,
                    1002,
                    1003,
                    1004,
                    1521,
                    1523,
                    1526,
                    1530
                ],
                "c.lower": [
                    192,
                    201
                ],
                "match": [
                    226,
                    227,
                    206,
                    207,
                    212,
                    213,
                    218,
                    219
                ],
                "tuple": [
                    224,
                    232,
                    208,
                    597,
                    214,
                    255
                ],
                "n": [
                    228,
                    229,
                    208,
                    209,
                    214,
                    215,
                    220,
                    221
                ],
                "color": [
                    224,
                    228,
                    612,
                    231,
                    232,
                    791,
                    621,
                    630,
                    790,
                    220,
                    223
                ],
                "np.iterable": [
                    993,
                    1058,
                    779,
                    882,
                    595,
                    1395,
                    246,
                    1207
                ],
                "x": [
                    450,
                    834,
                    453,
                    811,
                    460,
                    462,
                    464,
                    250,
                    446
                ],
                "Number": [
                    250
                ],
                "map": [
                    255
                ],
                "any": [
                    260,
                    453
                ],
                "elem": [
                    260
                ],
                "np.ndarray": [
                    277
                ],
                "c.dtype.kind": [
                    277
                ],
                "c.dtype": [
                    277
                ],
                "c.ndim": [
                    278
                ],
                "c.shape": [
                    281,
                    284,
                    278
                ],
                "mask": [
                    1292,
                    1294,
                    1040,
                    1042,
                    1940,
                    1942,
                    279,
                    1182,
                    288,
                    289,
                    1184,
                    1187,
                    1188,
                    1189,
                    1191,
                    1192,
                    1196,
                    1455,
                    1470,
                    1375,
                    1377,
                    1002,
                    1004
                ],
                "np.ma.is_masked": [
                    554,
                    279
                ],
                "c.mask.any": [
                    279
                ],
                "c.mask": [
                    279
                ],
                "np.ma.getdata": [
                    280
                ],
                "result": [
                    1282,
                    1283,
                    1028,
                    1030,
                    1289,
                    1035,
                    1292,
                    1293,
                    1040,
                    1041,
                    1296,
                    1171,
                    1044,
                    1173,
                    1301,
                    1047,
                    1175,
                    1049,
                    282,
                    283,
                    1050,
                    285,
                    1179,
                    287,
                    1182,
                    289,
                    290,
                    1183,
                    292,
                    1186,
                    1187,
                    1196,
                    1198,
                    1199,
                    309,
                    320,
                    1364,
                    1366,
                    1372,
                    1375,
                    1376,
                    1378,
                    1384,
                    1386,
                    1387,
                    1004,
                    1005,
                    1140,
                    1141,
                    1302,
                    1145,
                    1146,
                    1147,
                    1149,
                    1150
                ],
                "np.column_stack": [
                    282
                ],
                "np.zeros": [
                    898,
                    323,
                    298,
                    1462,
                    282
                ],
                "c.copy": [
                    285
                ],
                "np.any": [
                    290
                ],
                "cbook._str_lower_equal": [
                    297
                ],
                "cbook": [
                    1153,
                    483,
                    2087,
                    297,
                    1265,
                    474,
                    316
                ],
                "np.array": [
                    1572,
                    325,
                    458,
                    555,
                    300,
                    1521,
                    1330,
                    435,
                    309,
                    439,
                    1691
                ],
                "cc": [
                    325,
                    309
                ],
                "err": [
                    1936,
                    441,
                    314
                ],
                "cbook.warn_deprecated": [
                    1265,
                    483,
                    316
                ],
                "keep_alpha": [
                    341
                ],
                "join": [
                    343
                ],
                "format": [
                    1568,
                    1935,
                    1517,
                    343
                ],
                "round": [
                    343
                ],
                "val": [
                    790,
                    792,
                    793,
                    794,
                    795,
                    1059,
                    1060,
                    1336,
                    1209,
                    1337,
                    1338,
                    1208,
                    2001,
                    343,
                    2009,
                    2010,
                    2011,
                    2012,
                    1396,
                    1397
                ],
                "cnames": [
                    349
                ],
                "hexColorPattern": [
                    350
                ],
                "re.compile": [
                    350
                ],
                "rgb2hex": [
                    351
                ],
                "to_hex": [
                    351
                ],
                "hex2color": [
                    352
                ],
                "to_rgb": [
                    352,
                    363
                ],
                "cache": [
                    362
                ],
                "staticmethod": [
                    809,
                    363,
                    364,
                    365,
                    972,
                    760
                ],
                "colorConverter": [
                    368
                ],
                "ColorConverter": [
                    368
                ],
                "callable": [
                    833,
                    433
                ],
                "data": [
                    832,
                    833,
                    834,
                    835,
                    1859,
                    1861,
                    1865,
                    1866,
                    1003,
                    1004,
                    433,
                    435,
                    439,
                    478
                ],
                "xind": [
                    461,
                    462,
                    464,
                    434,
                    435
                ],
                "np.linspace": [
                    905,
                    434,
                    787,
                    461
                ],
                "N": [
                    737,
                    515,
                    456,
                    875,
                    460,
                    461,
                    877,
                    893,
                    880,
                    434,
                    886,
                    797,
                    478,
                    895
                ],
                "gamma": [
                    739,
                    1381,
                    1382,
                    461,
                    1358,
                    1392,
                    434,
                    757,
                    1397,
                    1367,
                    797,
                    478,
                    1399
                ],
                "lut": [
                    576,
                    578,
                    584,
                    585,
                    458,
                    590,
                    465,
                    594,
                    435,
                    436,
                    471
                ],
                "np.clip": [
                    1376,
                    1793,
                    471,
                    581,
                    1293,
                    1041,
                    1458,
                    435,
                    567,
                    2013,
                    1183
                ],
                "adata": [
                    448,
                    439,
                    442,
                    446,
                    447
                ],
                "Exception": [
                    440
                ],
                "shape": [
                    442,
                    443
                ],
                "adata.shape": [
                    442
                ],
                "y0": [
                    834,
                    458,
                    467,
                    468,
                    447
                ],
                "y1": [
                    448,
                    466,
                    467,
                    834
                ],
                "np.diff": [
                    453
                ],
                "ind": [
                    464,
                    467,
                    462
                ],
                "np.searchsorted": [
                    462
                ],
                "distance": [
                    464,
                    467
                ],
                "np.concatenate": [
                    465
                ],
                "_create_lookup_table": [
                    743,
                    745,
                    747,
                    750,
                    476,
                    478
                ],
                "cbook.deprecated": [
                    474
                ],
                "docstring.copy": [
                    476
                ],
                "docstring": [
                    476
                ],
                "getattr": [
                    482
                ],
                "cmap": [
                    2112,
                    482,
                    1865,
                    489,
                    2097,
                    2100,
                    2102,
                    2105,
                    2107,
                    2109
                ],
                "cmap.name": [
                    489
                ],
                "self.name": [
                    801,
                    514,
                    929,
                    906,
                    829
                ],
                "name": [
                    928,
                    737,
                    514,
                    929,
                    932,
                    837,
                    797,
                    828,
                    829,
                    895
                ],
                "self.N": [
                    642,
                    515,
                    898,
                    519,
                    520,
                    521,
                    1443,
                    932,
                    1445,
                    560,
                    565,
                    567,
                    1466,
                    571,
                    837,
                    742,
                    744,
                    746,
                    748,
                    751
                ],
                "self._rgba_bad": [
                    643,
                    612,
                    516,
                    805,
                    936,
                    841,
                    910
                ],
                "self._rgba_under": [
                    804,
                    517,
                    934,
                    839,
                    621,
                    909,
                    635,
                    636
                ],
                "self._rgba_over": [
                    640,
                    803,
                    518,
                    935,
                    840,
                    908,
                    630,
                    639
                ],
                "self._i_under": [
                    636,
                    572,
                    638,
                    519
                ],
                "self._i_over": [
                    520,
                    642,
                    571,
                    640
                ],
                "self._i_bad": [
                    521,
                    643,
                    573
                ],
                "self._isinit": [
                    900,
                    613,
                    551,
                    522,
                    650,
                    622,
                    752,
                    631,
                    604
                ],
                "self.colorbar_extend": [
                    527
                ],
                "self._init": [
                    552,
                    651,
                    758
                ],
                "mask_bad": [
                    554,
                    573
                ],
                "X": [
                    595,
                    554,
                    555
                ],
                "X.mask": [
                    554
                ],
                "np.isnan": [
                    554
                ],
                "xa": [
                    555,
                    556,
                    557,
                    558,
                    560,
                    594,
                    563,
                    565,
                    567,
                    568,
                    571,
                    572,
                    573
                ],
                "xa.dtype.isnative": [
                    556
                ],
                "xa.dtype": [
                    556,
                    558
                ],
                "newbyteorder": [
                    557
                ],
                "xa.byteswap": [
                    557
                ],
                "xa.dtype.kind": [
                    558
                ],
                "np.errstate": [
                    1306,
                    559
                ],
                "xa.astype": [
                    568
                ],
                "bytes": [
                    582,
                    575
                ],
                "astype": [
                    576,
                    1330,
                    1467,
                    1586
                ],
                "self._lut": [
                    576,
                    640,
                    578,
                    642,
                    643,
                    898,
                    742,
                    743,
                    899,
                    745,
                    747,
                    652,
                    653,
                    750,
                    636,
                    605,
                    638
                ],
                "np.uint8": [
                    576
                ],
                "self._lut.copy": [
                    578
                ],
                "cls": [
                    601,
                    602
                ],
                "self.__class__": [
                    601
                ],
                "cmapobject": [
                    602,
                    603,
                    605,
                    606,
                    607
                ],
                "cls.__new__": [
                    602
                ],
                "cmapobject.__dict__.update": [
                    603
                ],
                "cmapobject.__dict__": [
                    603
                ],
                "self.__dict__": [
                    603
                ],
                "cmapobject._lut": [
                    605
                ],
                "np.copy": [
                    605
                ],
                "cmapobject._global": [
                    606
                ],
                "_warn_if_global_cmap_modified": [
                    611,
                    620,
                    629
                ],
                "self._set_extremes": [
                    901,
                    614,
                    623,
                    753,
                    632
                ],
                "NotImplementedError": [
                    657,
                    676,
                    647
                ],
                "np.all": [
                    652,
                    653
                ],
                "Colormap": [
                    737,
                    895,
                    845,
                    679
                ],
                "self.monochrome": [
                    736,
                    874,
                    881,
                    884,
                    894
                ],
                "Colormap.__init__": [
                    737,
                    895
                ],
                "self._segmentdata": [
                    801,
                    738,
                    835,
                    744,
                    746,
                    748,
                    749,
                    751
                ],
                "segmentdata": [
                    738
                ],
                "self._gamma": [
                    739,
                    837,
                    744,
                    746,
                    748,
                    757
                ],
                "np.ones": [
                    742
                ],
                "Sized": [
                    782
                ],
                "vals": [
                    785,
                    787,
                    790
                ],
                "zip": [
                    785,
                    790
                ],
                "cdict": [
                    789,
                    792,
                    793,
                    794,
                    795,
                    797
                ],
                "r": [
                    1603,
                    1623,
                    1608,
                    1613,
                    1582,
                    1618,
                    791,
                    792,
                    1593,
                    1627,
                    1598
                ],
                "g": [
                    1604,
                    1609,
                    1614,
                    1583,
                    1619,
                    791,
                    1624,
                    793,
                    1594,
                    1627,
                    1599
                ],
                "b": [
                    1600,
                    1627,
                    1605,
                    1610,
                    791,
                    1615,
                    1584,
                    1620,
                    1463,
                    1464,
                    1625,
                    794,
                    1595
                ],
                "a": [
                    795,
                    1312,
                    1313,
                    1314,
                    1318,
                    1319,
                    1321,
                    1323,
                    1324,
                    1325,
                    791,
                    1307,
                    1308,
                    1310
                ],
                "append": [
                    792,
                    793,
                    794,
                    795
                ],
                "LinearSegmentedColormap": [
                    801,
                    837,
                    797
                ],
                "new_cmap": [
                    906,
                    908,
                    909,
                    910,
                    911,
                    801,
                    803,
                    804,
                    805,
                    806,
                    935,
                    936,
                    932,
                    934,
                    937,
                    837,
                    839,
                    840,
                    841,
                    842
                ],
                "lutsize": [
                    905,
                    802
                ],
                "new_cmap._rgba_over": [
                    803,
                    908,
                    934,
                    839
                ],
                "new_cmap._rgba_under": [
                    840,
                    804,
                    909,
                    935
                ],
                "new_cmap._rgba_bad": [
                    936,
                    841,
                    805,
                    910
                ],
                "func": [
                    811
                ],
                "data_r": [
                    832,
                    837
                ],
                "functools.partial": [
                    832
                ],
                "functools": [
                    832
                ],
                "self._reverser": [
                    832
                ],
                "reversed": [
                    834,
                    931
                ],
                "self._segmentdata.items": [
                    835
                ],
                "self.colors": [
                    899,
                    931,
                    876,
                    880,
                    885,
                    893
                ],
                "list": [
                    931,
                    885
                ],
                "itertools.islice": [
                    886
                ],
                "itertools": [
                    886
                ],
                "itertools.cycle": [
                    886
                ],
                "gray": [
                    889,
                    893
                ],
                "ListedColormap": [
                    2097,
                    906,
                    932
                ],
                "colors_r": [
                    931,
                    932
                ],
                "self.vmin": [
                    1284,
                    1032,
                    1162,
                    1164,
                    1177,
                    1055,
                    1440,
                    1067,
                    1073,
                    1074,
                    1329,
                    1458,
                    1205,
                    1080,
                    1468,
                    968,
                    1368,
                    1117,
                    1131,
                    1132,
                    1393,
                    1143,
                    1146
                ],
                "_sanitize_extrema": [
                    968,
                    969
                ],
                "vmin": [
                    1284,
                    1286,
                    1032,
                    1288,
                    1034,
                    1036,
                    1293,
                    1041,
                    1045,
                    1046,
                    1177,
                    1178,
                    1183,
                    1055,
                    1060,
                    1062,
                    1194,
                    1195,
                    1329,
                    1330,
                    1205,
                    1209,
                    1211,
                    1858,
                    1859,
                    1863,
                    968,
                    1357,
                    1368,
                    1369,
                    1371,
                    1117,
                    1376,
                    1122,
                    1379,
                    1382,
                    1262,
                    1393,
                    1397,
                    1399,
                    1275
                ],
                "self.vmax": [
                    1284,
                    1033,
                    1162,
                    1177,
                    1056,
                    1441,
                    1068,
                    1456,
                    1329,
                    1458,
                    1075,
                    1076,
                    1205,
                    1080,
                    1469,
                    969,
                    1368,
                    1118,
                    1133,
                    1134,
                    1393,
                    1143,
                    1146
                ],
                "vmax": [
                    1284,
                    1286,
                    1288,
                    1033,
                    1034,
                    1036,
                    1293,
                    1041,
                    1046,
                    1177,
                    1178,
                    1183,
                    1056,
                    1060,
                    1062,
                    1195,
                    1329,
                    1330,
                    1205,
                    1209,
                    1211,
                    1860,
                    1861,
                    1863,
                    969,
                    1357,
                    1368,
                    1369,
                    1371,
                    1118,
                    1119,
                    1376,
                    1382,
                    1262,
                    1393,
                    1397,
                    1399,
                    1275
                ],
                "self.clip": [
                    1280,
                    1026,
                    970,
                    1452,
                    1169,
                    1362,
                    1439
                ],
                "clip": [
                    1280,
                    1025,
                    1026,
                    1291,
                    1039,
                    1168,
                    1169,
                    1181,
                    1439,
                    1451,
                    1452,
                    1457,
                    970,
                    1357,
                    1361,
                    1362,
                    1374,
                    1262,
                    1279
                ],
                "is_scalar": [
                    993,
                    994,
                    1282,
                    1028,
                    1385,
                    1005,
                    1197,
                    1454,
                    1171,
                    1140,
                    1300,
                    1364,
                    1048,
                    1148,
                    1471
                ],
                "dtype": [
                    1004,
                    996,
                    997,
                    999
                ],
                "np.min_scalar_type": [
                    996
                ],
                "np.issubdtype": [
                    997
                ],
                "np.integer": [
                    997
                ],
                "dtype.type": [
                    997
                ],
                "np.bool_": [
                    997
                ],
                "np.promote_types": [
                    1523,
                    1574,
                    999
                ],
                "np.float32": [
                    1523,
                    1574,
                    999
                ],
                "np.ma.getmask": [
                    1002,
                    1292,
                    1040,
                    1147,
                    1182,
                    1375
                ],
                "np.asarray": [
                    1513,
                    1442,
                    1003,
                    1564
                ],
                "np.ma.array": [
                    1376,
                    1384,
                    1196,
                    1004,
                    1293,
                    1041,
                    1047,
                    1470,
                    1183
                ],
                "self.process_value": [
                    1056,
                    1282,
                    1028,
                    1032,
                    1033,
                    1454,
                    1171,
                    1140,
                    1364,
                    1055
                ],
                "self.autoscale_None": [
                    1283,
                    1030,
                    1141,
                    1366,
                    1175
                ],
                "_": [
                    1032,
                    1033,
                    1056,
                    1055
                ],
                "result.fill": [
                    1289,
                    1035,
                    1179,
                    1372
                ],
                "result.filled": [
                    1376,
                    1041,
                    1293,
                    1183
                ],
                "resdat": [
                    1296,
                    1297,
                    1298,
                    1044,
                    1045,
                    1046,
                    1047,
                    1186,
                    1189,
                    1191,
                    1192,
                    1193,
                    1194,
                    1195,
                    1196,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1384
                ],
                "result.data": [
                    1296,
                    1186,
                    1044,
                    1378
                ],
                "result.mask": [
                    1384,
                    1187,
                    1047
                ],
                "self.scaled": [
                    1202,
                    1390,
                    1053,
                    1334
                ],
                "np.ma.asarray": [
                    1208,
                    1336,
                    1059,
                    1396
                ],
                "A": [
                    1219,
                    1347,
                    1066,
                    1067,
                    1068,
                    1130,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1342,
                    1215
                ],
                "np.asanyarray": [
                    1072,
                    1066
                ],
                "A.min": [
                    1074,
                    1067
                ],
                "A.max": [
                    1068,
                    1076
                ],
                "A.size": [
                    1073,
                    1075
                ],
                "Normalize": [
                    1222,
                    1158,
                    1351,
                    1863,
                    1357,
                    1262,
                    1486,
                    1402,
                    1083
                ],
                "self.vcenter": [
                    1131,
                    1132,
                    1133,
                    1134,
                    1143,
                    1146,
                    1116
                ],
                "vcenter": [
                    1122,
                    1116,
                    1119
                ],
                "autoscale_None": [
                    1130,
                    1219,
                    1347
                ],
                "np.ma.masked_array": [
                    1145
                ],
                "np.interp": [
                    1146
                ],
                "np.atleast_1d": [
                    1456,
                    1149
                ],
                "TwoSlopeNorm": [
                    1154
                ],
                "cbook.deprecation.deprecated": [
                    1153
                ],
                "cbook.deprecation": [
                    1153
                ],
                "np.ma.masked_less_equal": [
                    1219,
                    1173,
                    1215
                ],
                "self._check_vmin_vmax": [
                    1176,
                    1204
                ],
                "np.ma.nomask": [
                    1188
                ],
                "np.copyto": [
                    1192
                ],
                "np.log": [
                    1193,
                    1194,
                    1195,
                    1271,
                    1310
                ],
                "np.ma.power": [
                    1209,
                    1397
                ],
                "pow": [
                    1211,
                    1399
                ],
                "autoscale": [
                    1342,
                    1215
                ],
                "Normalize.__init__": [
                    1357,
                    1262
                ],
                "base": [
                    1270,
                    1263
                ],
                "self._base": [
                    1320,
                    1264,
                    1270,
                    1271,
                    1274
                ],
                "np.e": [
                    1264
                ],
                "self._log_base": [
                    1310,
                    1271
                ],
                "self.linthresh": [
                    1318,
                    1321,
                    1322,
                    1273,
                    1307,
                    1310,
                    1311
                ],
                "linthresh": [
                    1273
                ],
                "self._linscale_adj": [
                    1313,
                    1318,
                    1321,
                    1324,
                    1274,
                    1309
                ],
                "linscale": [
                    1274
                ],
                "self._transform_vmin_vmax": [
                    1276,
                    1348,
                    1343
                ],
                "self._transform": [
                    1296,
                    1331
                ],
                "self._lower": [
                    1297,
                    1298,
                    1331,
                    1337
                ],
                "self._upper": [
                    1337,
                    1298,
                    1331
                ],
                "masked": [
                    1312,
                    1313,
                    1318,
                    1319,
                    1321,
                    1323,
                    1324,
                    1307,
                    1308,
                    1310
                ],
                "np.abs": [
                    1318,
                    2005,
                    2007,
                    1307,
                    1310
                ],
                "sign": [
                    1319,
                    1321,
                    1322,
                    1308,
                    1311
                ],
                "np.sign": [
                    1308,
                    1319
                ],
                "log": [
                    1312,
                    1309,
                    1311
                ],
                "exp": [
                    1320,
                    1322,
                    1323
                ],
                "np.power": [
                    1320,
                    1381
                ],
                "arr": [
                    1537,
                    1538,
                    1540,
                    1541,
                    1330,
                    1331,
                    1637,
                    1638,
                    1513,
                    1516,
                    1518,
                    1520,
                    1521,
                    1522,
                    1523,
                    1526,
                    1527,
                    1529,
                    1534,
                    1535
                ],
                "self._inv_transform": [
                    1338
                ],
                "self.gamma": [
                    1392,
                    1358,
                    1367
                ],
                "boundaries": [
                    1440,
                    1441,
                    1442
                ],
                "self.boundaries": [
                    1442,
                    1443,
                    1463
                ],
                "self.Ncmap": [
                    1444,
                    1445,
                    1459,
                    1461,
                    1466
                ],
                "ncolors": [
                    1444
                ],
                "self._interp": [
                    1448,
                    1465,
                    1446
                ],
                "xx": [
                    1454,
                    1455,
                    1456,
                    1458,
                    1462,
                    1464,
                    1468,
                    1469
                ],
                "np.ma.getmaskarray": [
                    1455
                ],
                "xx.filled": [
                    1456
                ],
                "max_col": [
                    1459,
                    1461,
                    1469
                ],
                "iret": [
                    1462,
                    1464,
                    1467,
                    1468,
                    1469,
                    1470
                ],
                "xx.shape": [
                    1462
                ],
                "np.int16": [
                    1467,
                    1462
                ],
                "i": [
                    1602,
                    1637,
                    1638,
                    1607,
                    1592,
                    1612,
                    1617,
                    1586,
                    1587,
                    1941,
                    1942,
                    1463,
                    1464,
                    1597
                ],
                "enumerate": [
                    1463
                ],
                "scalefac": [
                    1466,
                    1467
                ],
                "arr.shape": [
                    1520,
                    1516,
                    1637,
                    1518
                ],
                "in_shape": [
                    1520,
                    1571,
                    1547,
                    1629
                ],
                "arr.dtype": [
                    1523
                ],
                "out": [
                    1538,
                    1541,
                    1543,
                    1544,
                    1545,
                    1547,
                    1526,
                    1535
                ],
                "np.zeros_like": [
                    1530,
                    1526
                ],
                "arr_max": [
                    1537,
                    1540,
                    1545,
                    1527,
                    1528,
                    1531,
                    1534
                ],
                "arr.max": [
                    1527
                ],
                "ipos": [
                    1537,
                    1540,
                    1528,
                    1531,
                    1532,
                    1534
                ],
                "delta": [
                    1538,
                    1541,
                    1529,
                    1530,
                    1531,
                    1532,
                    1535
                ],
                "arr.ptp": [
                    1529
                ],
                "s": [
                    1544,
                    1579,
                    1588,
                    1589,
                    1590,
                    1622,
                    1530,
                    1531
                ],
                "idx": [
                    1537,
                    1538,
                    1540,
                    1541,
                    1592,
                    1593,
                    1594,
                    1595,
                    1597,
                    1598,
                    1599,
                    1600,
                    1602,
                    1603,
                    1604,
                    1605,
                    1607,
                    1608,
                    1609,
                    1610,
                    1612,
                    1613,
                    1614,
                    1615,
                    1617,
                    1618,
                    1619,
                    1620,
                    1622,
                    1623,
                    1624,
                    1625,
                    1534,
                    1535
                ],
                "out.reshape": [
                    1547
                ],
                "hsv": [
                    2016,
                    1569,
                    1571,
                    1572,
                    1573,
                    1574,
                    1578,
                    1579,
                    1580,
                    2000,
                    2001,
                    1564,
                    2013,
                    1567
                ],
                "hsv.shape": [
                    1569,
                    1571,
                    1567
                ],
                "hsv.dtype": [
                    1574
                ],
                "h": [
                    1578,
                    1582,
                    1583,
                    1584,
                    1586,
                    1587
                ],
                "np.empty_like": [
                    1584,
                    1582,
                    1583
                ],
                "f": [
                    1587,
                    1589,
                    1590
                ],
                "p": [
                    1600,
                    1603,
                    1608,
                    1614,
                    1619,
                    1588,
                    1595
                ],
                "q": [
                    1609,
                    1620,
                    1589,
                    1598
                ],
                "t": [
                    1594,
                    1613,
                    1605,
                    1590
                ],
                "rgb": [
                    2053,
                    2054,
                    2055,
                    1930,
                    1933,
                    2000,
                    2035,
                    1942,
                    1627,
                    1629
                ],
                "np.stack": [
                    1627
                ],
                "rgb.reshape": [
                    1629
                ],
                "sum_sq": [
                    1636,
                    1638,
                    1639
                ],
                "range": [
                    1637,
                    1941
                ],
                "np.newaxis": [
                    1921,
                    1638
                ],
                "np.sqrt": [
                    1639
                ],
                "self.azdeg": [
                    1689,
                    1677
                ],
                "azdeg": [
                    1677
                ],
                "self.altdeg": [
                    1690,
                    1678
                ],
                "altdeg": [
                    1678
                ],
                "self.hsv_min_val": [
                    1993,
                    1679
                ],
                "hsv_min_val": [
                    1992,
                    1993,
                    2012,
                    1679
                ],
                "self.hsv_max_val": [
                    1680,
                    1989
                ],
                "hsv_max_val": [
                    1680,
                    2010,
                    1988,
                    1989
                ],
                "self.hsv_min_sat": [
                    1681,
                    1991
                ],
                "hsv_min_sat": [
                    2008,
                    1681,
                    1990,
                    1991
                ],
                "self.hsv_max_sat": [
                    1682,
                    1987
                ],
                "hsv_max_sat": [
                    1986,
                    1682,
                    1987,
                    2006
                ],
                "az": [
                    1689,
                    1692,
                    1693
                ],
                "np.radians": [
                    1689,
                    1690
                ],
                "alt": [
                    1690,
                    1692,
                    1693,
                    1694
                ],
                "np.cos": [
                    1692,
                    1693
                ],
                "np.sin": [
                    1693,
                    1694
                ],
                "property": [
                    1684
                ],
                "dy": [
                    1920,
                    1737,
                    1867,
                    1740
                ],
                "e_dy": [
                    1745,
                    1740
                ],
                "e_dx": [
                    1744,
                    1740
                ],
                "np.gradient": [
                    1740
                ],
                "vert_exag": [
                    1920,
                    1867,
                    1740
                ],
                "elevation": [
                    1920,
                    1740,
                    1743
                ],
                "dx": [
                    1920,
                    1867,
                    1740
                ],
                "normal": [
                    1743,
                    1744,
                    1745,
                    1746,
                    1747,
                    1749
                ],
                "view": [
                    1743
                ],
                "np.empty": [
                    1743
                ],
                "elevation.shape": [
                    1743
                ],
                "type": [
                    1743
                ],
                "_vector_magnitude": [
                    1747
                ],
                "self.shade_normals": [
                    1749
                ],
                "fraction": [
                    1920,
                    1781,
                    1868,
                    1749
                ],
                "intensity": [
                    1792,
                    1793,
                    1920,
                    1795,
                    1921,
                    2053,
                    2054,
                    1930,
                    1933,
                    1939,
                    1940,
                    1996,
                    1997,
                    2005,
                    2006,
                    2007,
                    2008,
                    2009,
                    2010,
                    2011,
                    2012,
                    1777,
                    2035,
                    1780,
                    1781,
                    1791
                ],
                "normals.dot": [
                    1777
                ],
                "normals": [
                    1777
                ],
                "self.direction": [
                    1777
                ],
                "imin": [
                    1792,
                    1786,
                    1780,
                    1791
                ],
                "imax": [
                    1792,
                    1786,
                    1780
                ],
                "intensity.min": [
                    1780
                ],
                "intensity.max": [
                    1780
                ],
                "data.min": [
                    1859
                ],
                "data.max": [
                    1861
                ],
                "norm": [
                    2112,
                    1862,
                    1863,
                    1865,
                    2111
                ],
                "rgb0": [
                    1865,
                    1866,
                    1870,
                    1871
                ],
                "rgb1": [
                    1866,
                    1870
                ],
                "self.shade_rgb": [
                    1866
                ],
                "blend_mode": [
                    1929,
                    1866,
                    1933,
                    1930
                ],
                "kwargs": [
                    1930,
                    1868,
                    1933
                ],
                "self.hillshade": [
                    1920
                ],
                "lookup": [
                    1936,
                    1929,
                    1930,
                    1924
                ],
                "self.blend_hsv": [
                    1925
                ],
                "self.blend_soft_light": [
                    1926
                ],
                "self.blend_overlay": [
                    1927
                ],
                "blend": [
                    1944,
                    1930,
                    1933,
                    1942
                ],
                "lookup.keys": [
                    1936
                ],
                "hasattr": [
                    1939
                ],
                "intensity.mask": [
                    1940
                ],
                "rgb_to_hsv": [
                    2000
                ],
                "hue": [
                    2001
                ],
                "sat": [
                    2001,
                    2005,
                    2006,
                    2007,
                    2008
                ],
                "np.moveaxis": [
                    2001
                ],
                "np.putmask": [
                    2009,
                    2011,
                    2005,
                    2007
                ],
                "hsv_to_rgb": [
                    2016
                ],
                "low": [
                    2053,
                    2055
                ],
                "high": [
                    2054,
                    2055
                ],
                "np.where": [
                    2055
                ],
                "slice_map": [
                    2088,
                    2081,
                    2087
                ],
                "slice": [
                    2082,
                    2083,
                    2084,
                    2085
                ],
                "cbook._check_in_list": [
                    2087
                ],
                "extend": [
                    2087,
                    2088,
                    2094,
                    2099,
                    2104,
                    2109
                ],
                "color_slice": [
                    2088,
                    2097,
                    2091
                ],
                "n_data_colors": [
                    2097,
                    2090,
                    2091,
                    2111
                ],
                "levels": [
                    2090,
                    2094,
                    2111
                ],
                "n_expected": [
                    2091,
                    2092,
                    2095
                ],
                "color_slice.start": [
                    2091
                ],
                "color_slice.stop": [
                    2091
                ],
                "cmap.set_under": [
                    2100,
                    2102
                ],
                "cmap.set_over": [
                    2105,
                    2107
                ],
                "cmap.colorbar_extend": [
                    2109
                ],
                "BoundaryNorm": [
                    2111
                ]
            },
            "filtered_variables_in_file": {
                "__init__": [
                    80
                ],
                "mapping": [
                    80
                ],
                "self.cache": [
                    89,
                    81,
                    85
                ],
                "self": [
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    1026,
                    1028,
                    1030,
                    1032,
                    527,
                    1033,
                    1053,
                    1055,
                    1056,
                    551,
                    552,
                    1067,
                    1068,
                    560,
                    1073,
                    1074,
                    1075,
                    1076,
                    565,
                    567,
                    1080,
                    571,
                    572,
                    573,
                    576,
                    578,
                    81,
                    85,
                    89,
                    601,
                    603,
                    604,
                    605,
                    1116,
                    1117,
                    1118,
                    611,
                    612,
                    613,
                    614,
                    1131,
                    620,
                    621,
                    622,
                    623,
                    1132,
                    1133,
                    1134,
                    1140,
                    629,
                    630,
                    631,
                    632,
                    1141,
                    1143,
                    635,
                    636,
                    1146,
                    638,
                    639,
                    640,
                    642,
                    643,
                    650,
                    651,
                    652,
                    653,
                    1162,
                    1164,
                    1677,
                    1169,
                    1678,
                    1171,
                    1679,
                    1680,
                    1681,
                    1175,
                    1176,
                    1177,
                    1682,
                    1689,
                    1690,
                    1202,
                    1204,
                    1205,
                    1749,
                    736,
                    737,
                    738,
                    739,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749,
                    750,
                    751,
                    752,
                    753,
                    1262,
                    1264,
                    1777,
                    757,
                    758,
                    1270,
                    1271,
                    1273,
                    1274,
                    1276,
                    1280,
                    1282,
                    1283,
                    1284,
                    1296,
                    1297,
                    1298,
                    1307,
                    1309,
                    1310,
                    1311,
                    801,
                    1313,
                    803,
                    804,
                    805,
                    1318,
                    1320,
                    1321,
                    1322,
                    1324,
                    1329,
                    1331,
                    1334,
                    1337,
                    1338,
                    829,
                    1343,
                    832,
                    835,
                    1348,
                    837,
                    839,
                    840,
                    841,
                    1866,
                    1357,
                    1358,
                    1362,
                    1364,
                    1366,
                    1367,
                    1368,
                    874,
                    876,
                    1390,
                    880,
                    881,
                    1392,
                    1393,
                    884,
                    885,
                    893,
                    894,
                    895,
                    1920,
                    898,
                    899,
                    900,
                    901,
                    1925,
                    1926,
                    1927,
                    905,
                    906,
                    908,
                    909,
                    910,
                    1439,
                    1440,
                    929,
                    1441,
                    931,
                    932,
                    1442,
                    934,
                    935,
                    936,
                    1443,
                    1444,
                    1445,
                    1446,
                    1448,
                    1452,
                    1454,
                    1456,
                    1458,
                    1459,
                    1461,
                    1463,
                    1465,
                    1466,
                    1468,
                    1469,
                    1987,
                    1989,
                    1991,
                    968,
                    969,
                    970,
                    1993
                ],
                "__setitem__": [
                    84
                ],
                "key": [
                    88,
                    835,
                    832,
                    84
                ],
                "value": [
                    1282,
                    1028,
                    1171,
                    1058,
                    1059,
                    1062,
                    1454,
                    1207,
                    1336,
                    1208,
                    1211,
                    84,
                    1364,
                    1492,
                    1495,
                    993,
                    995,
                    996,
                    1002,
                    1003,
                    1395,
                    1140,
                    1396,
                    1399
                ],
                "self.cache.clear": [
                    89,
                    85
                ],
                "__delitem__": [
                    88
                ],
                "_colors_full_map": [
                    98,
                    99,
                    100,
                    197,
                    103,
                    104,
                    169,
                    201,
                    361,
                    362,
                    109,
                    175,
                    92,
                    94,
                    95
                ],
                "_colors_full_map.update": [
                    98,
                    99,
                    100,
                    103,
                    94,
                    95
                ],
                "XKCD_COLORS": [
                    96,
                    94
                ],
                "k.replace": [
                    100,
                    95
                ],
                "k": [
                    96,
                    97,
                    100,
                    101,
                    102,
                    95
                ],
                "v": [
                    96,
                    100,
                    101,
                    1604,
                    1610,
                    1580,
                    1599,
                    1615,
                    1625,
                    1618,
                    1588,
                    1589,
                    1590,
                    1623,
                    1624,
                    1593,
                    95
                ],
                "XKCD_COLORS.items": [
                    96
                ],
                "CSS4_COLORS": [
                    98,
                    349
                ],
                "TABLEAU_COLORS": [
                    99,
                    101
                ],
                "TABLEAU_COLORS.items": [
                    101
                ],
                "BASE_COLORS": [
                    103
                ],
                "_ColorMapping": [
                    104
                ],
                "ex": [
                    113,
                    114,
                    116,
                    118
                ],
                "ret": [
                    1472,
                    1473,
                    116,
                    118,
                    119,
                    1470
                ],
                "ex.item": [
                    116
                ],
                "c": [
                    256,
                    130,
                    259,
                    260,
                    133,
                    262,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    284,
                    285,
                    163,
                    167,
                    169,
                    297,
                    300,
                    173,
                    175,
                    305,
                    309,
                    314,
                    188,
                    189,
                    191,
                    192,
                    322,
                    197,
                    325,
                    201,
                    330,
                    204,
                    206,
                    209,
                    212,
                    340,
                    342,
                    215,
                    343,
                    218,
                    221,
                    226,
                    229,
                    235,
                    239,
                    243,
                    246,
                    248,
                    250,
                    124,
                    255
                ],
                "re.match": [
                    226,
                    206,
                    212,
                    218,
                    124
                ],
                "re": [
                    226,
                    206,
                    212,
                    218,
                    124,
                    350
                ],
                "_is_nth_color": [
                    130,
                    163
                ],
                "to_rgba": [
                    612,
                    325,
                    133,
                    330,
                    300,
                    364,
                    621,
                    340,
                    309,
                    630,
                    791
                ],
                "to_rgba_array": [
                    899,
                    365,
                    142
                ],
                "c1": [
                    142
                ],
                "c2": [
                    142
                ],
                "prop_cycler": [
                    165,
                    166
                ],
                "rcParams": [
                    165
                ],
                "colors": [
                    905,
                    906,
                    779,
                    782,
                    783,
                    785,
                    787,
                    790,
                    166,
                    167,
                    2092,
                    2095,
                    2097,
                    2100,
                    2105,
                    361,
                    876,
                    877,
                    879,
                    880,
                    882,
                    883,
                    886,
                    889
                ],
                "get": [
                    166
                ],
                "prop_cycler.by_key": [
                    166
                ],
                "rgba": [
                    169,
                    171,
                    172,
                    173,
                    175,
                    178,
                    594,
                    597,
                    598
                ],
                "_colors_full_map.cache": [
                    169,
                    362,
                    175
                ],
                "alpha": [
                    256,
                    257,
                    258,
                    259,
                    283,
                    286,
                    287,
                    169,
                    300,
                    173,
                    175,
                    309,
                    580,
                    325,
                    581,
                    583,
                    585,
                    590,
                    210,
                    216,
                    222,
                    223,
                    612,
                    230,
                    231,
                    621,
                    243,
                    630
                ],
                "_to_rgba_no_colorcycle": [
                    173
                ],
                "orig_c": [
                    199,
                    241,
                    244,
                    247,
                    188,
                    253
                ],
                "np.ma.masked": [
                    189
                ],
                "np.ma": [
                    1292,
                    1293,
                    1040,
                    1041,
                    1173,
                    1047,
                    279,
                    280,
                    1182,
                    1183,
                    1059,
                    1188,
                    554,
                    1196,
                    1455,
                    1208,
                    1209,
                    1336,
                    189,
                    1470,
                    1215,
                    1219,
                    1375,
                    1376,
                    1384,
                    1002,
                    1004,
                    1396,
                    1397,
                    1145,
                    1147
                ],
                "np": [
                    2055,
                    1040,
                    1041,
                    1047,
                    1564,
                    1058,
                    1059,
                    1572,
                    1574,
                    554,
                    555,
                    1066,
                    1582,
                    559,
                    1072,
                    1583,
                    1584,
                    567,
                    576,
                    581,
                    595,
                    1627,
                    605,
                    1638,
                    1639,
                    1145,
                    1146,
                    1147,
                    1149,
                    652,
                    653,
                    1173,
                    1689,
                    1690,
                    1691,
                    1692,
                    1693,
                    1182,
                    1183,
                    1694,
                    1188,
                    1192,
                    1193,
                    1194,
                    1195,
                    1196,
                    1207,
                    1208,
                    1209,
                    189,
                    1215,
                    1219,
                    1740,
                    1743,
                    742,
                    1264,
                    246,
                    1271,
                    1793,
                    779,
                    1292,
                    1293,
                    787,
                    277,
                    279,
                    280,
                    282,
                    1306,
                    1307,
                    1308,
                    1310,
                    290,
                    1318,
                    1319,
                    1320,
                    298,
                    300,
                    1330,
                    309,
                    1336,
                    323,
                    325,
                    1375,
                    1376,
                    1381,
                    1384,
                    882,
                    1395,
                    1396,
                    1397,
                    1921,
                    898,
                    905,
                    1442,
                    1455,
                    1456,
                    434,
                    435,
                    1458,
                    1462,
                    439,
                    1467,
                    1470,
                    453,
                    458,
                    461,
                    462,
                    465,
                    2001,
                    2005,
                    471,
                    2007,
                    2009,
                    2011,
                    2013,
                    993,
                    996,
                    997,
                    999,
                    1513,
                    1002,
                    1003,
                    1004,
                    1521,
                    1523,
                    1526,
                    1530
                ],
                "c.lower": [
                    192,
                    201
                ],
                "match": [
                    226,
                    227,
                    206,
                    207,
                    212,
                    213,
                    218,
                    219
                ],
                "n": [
                    228,
                    229,
                    208,
                    209,
                    214,
                    215,
                    220,
                    221
                ],
                "color": [
                    224,
                    228,
                    612,
                    231,
                    232,
                    791,
                    621,
                    630,
                    790,
                    220,
                    223
                ],
                "np.iterable": [
                    993,
                    1058,
                    779,
                    882,
                    595,
                    1395,
                    246,
                    1207
                ],
                "x": [
                    450,
                    834,
                    453,
                    811,
                    460,
                    462,
                    464,
                    250,
                    446
                ],
                "Number": [
                    250
                ],
                "elem": [
                    260
                ],
                "np.ndarray": [
                    277
                ],
                "c.dtype.kind": [
                    277
                ],
                "c.dtype": [
                    277
                ],
                "c.ndim": [
                    278
                ],
                "c.shape": [
                    281,
                    284,
                    278
                ],
                "mask": [
                    1292,
                    1294,
                    1040,
                    1042,
                    1940,
                    1942,
                    279,
                    1182,
                    288,
                    289,
                    1184,
                    1187,
                    1188,
                    1189,
                    1191,
                    1192,
                    1196,
                    1455,
                    1470,
                    1375,
                    1377,
                    1002,
                    1004
                ],
                "np.ma.is_masked": [
                    554,
                    279
                ],
                "c.mask.any": [
                    279
                ],
                "c.mask": [
                    279
                ],
                "np.ma.getdata": [
                    280
                ],
                "result": [
                    1282,
                    1283,
                    1028,
                    1030,
                    1289,
                    1035,
                    1292,
                    1293,
                    1040,
                    1041,
                    1296,
                    1171,
                    1044,
                    1173,
                    1301,
                    1047,
                    1175,
                    1049,
                    282,
                    283,
                    1050,
                    285,
                    1179,
                    287,
                    1182,
                    289,
                    290,
                    1183,
                    292,
                    1186,
                    1187,
                    1196,
                    1198,
                    1199,
                    309,
                    320,
                    1364,
                    1366,
                    1372,
                    1375,
                    1376,
                    1378,
                    1384,
                    1386,
                    1387,
                    1004,
                    1005,
                    1140,
                    1141,
                    1302,
                    1145,
                    1146,
                    1147,
                    1149,
                    1150
                ],
                "np.column_stack": [
                    282
                ],
                "np.zeros": [
                    898,
                    323,
                    298,
                    1462,
                    282
                ],
                "c.copy": [
                    285
                ],
                "np.any": [
                    290
                ],
                "cbook._str_lower_equal": [
                    297
                ],
                "cbook": [
                    1153,
                    483,
                    2087,
                    297,
                    1265,
                    474,
                    316
                ],
                "np.array": [
                    1572,
                    325,
                    458,
                    555,
                    300,
                    1521,
                    1330,
                    435,
                    309,
                    439,
                    1691
                ],
                "cc": [
                    325,
                    309
                ],
                "err": [
                    1936,
                    441,
                    314
                ],
                "cbook.warn_deprecated": [
                    1265,
                    483,
                    316
                ],
                "keep_alpha": [
                    341
                ],
                "join": [
                    343
                ],
                "val": [
                    790,
                    792,
                    793,
                    794,
                    795,
                    1059,
                    1060,
                    1336,
                    1209,
                    1337,
                    1338,
                    1208,
                    2001,
                    343,
                    2009,
                    2010,
                    2011,
                    2012,
                    1396,
                    1397
                ],
                "cnames": [
                    349
                ],
                "hexColorPattern": [
                    350
                ],
                "re.compile": [
                    350
                ],
                "rgb2hex": [
                    351
                ],
                "to_hex": [
                    351
                ],
                "hex2color": [
                    352
                ],
                "to_rgb": [
                    352,
                    363
                ],
                "cache": [
                    362
                ],
                "colorConverter": [
                    368
                ],
                "ColorConverter": [
                    368
                ],
                "data": [
                    832,
                    833,
                    834,
                    835,
                    1859,
                    1861,
                    1865,
                    1866,
                    1003,
                    1004,
                    433,
                    435,
                    439,
                    478
                ],
                "xind": [
                    461,
                    462,
                    464,
                    434,
                    435
                ],
                "np.linspace": [
                    905,
                    434,
                    787,
                    461
                ],
                "N": [
                    737,
                    515,
                    456,
                    875,
                    460,
                    461,
                    877,
                    893,
                    880,
                    434,
                    886,
                    797,
                    478,
                    895
                ],
                "gamma": [
                    739,
                    1381,
                    1382,
                    461,
                    1358,
                    1392,
                    434,
                    757,
                    1397,
                    1367,
                    797,
                    478,
                    1399
                ],
                "lut": [
                    576,
                    578,
                    584,
                    585,
                    458,
                    590,
                    465,
                    594,
                    435,
                    436,
                    471
                ],
                "np.clip": [
                    1376,
                    1793,
                    471,
                    581,
                    1293,
                    1041,
                    1458,
                    435,
                    567,
                    2013,
                    1183
                ],
                "adata": [
                    448,
                    439,
                    442,
                    446,
                    447
                ],
                "shape": [
                    442,
                    443
                ],
                "adata.shape": [
                    442
                ],
                "y0": [
                    834,
                    458,
                    467,
                    468,
                    447
                ],
                "y1": [
                    448,
                    466,
                    467,
                    834
                ],
                "np.diff": [
                    453
                ],
                "ind": [
                    464,
                    467,
                    462
                ],
                "np.searchsorted": [
                    462
                ],
                "distance": [
                    464,
                    467
                ],
                "np.concatenate": [
                    465
                ],
                "_create_lookup_table": [
                    743,
                    745,
                    747,
                    750,
                    476,
                    478
                ],
                "cbook.deprecated": [
                    474
                ],
                "docstring.copy": [
                    476
                ],
                "docstring": [
                    476
                ],
                "cmap": [
                    2112,
                    482,
                    1865,
                    489,
                    2097,
                    2100,
                    2102,
                    2105,
                    2107,
                    2109
                ],
                "cmap.name": [
                    489
                ],
                "self.name": [
                    801,
                    514,
                    929,
                    906,
                    829
                ],
                "name": [
                    928,
                    737,
                    514,
                    929,
                    932,
                    837,
                    797,
                    828,
                    829,
                    895
                ],
                "self.N": [
                    642,
                    515,
                    898,
                    519,
                    520,
                    521,
                    1443,
                    932,
                    1445,
                    560,
                    565,
                    567,
                    1466,
                    571,
                    837,
                    742,
                    744,
                    746,
                    748,
                    751
                ],
                "self._rgba_bad": [
                    643,
                    612,
                    516,
                    805,
                    936,
                    841,
                    910
                ],
                "self._rgba_under": [
                    804,
                    517,
                    934,
                    839,
                    621,
                    909,
                    635,
                    636
                ],
                "self._rgba_over": [
                    640,
                    803,
                    518,
                    935,
                    840,
                    908,
                    630,
                    639
                ],
                "self._i_under": [
                    636,
                    572,
                    638,
                    519
                ],
                "self._i_over": [
                    520,
                    642,
                    571,
                    640
                ],
                "self._i_bad": [
                    521,
                    643,
                    573
                ],
                "self._isinit": [
                    900,
                    613,
                    551,
                    522,
                    650,
                    622,
                    752,
                    631,
                    604
                ],
                "self.colorbar_extend": [
                    527
                ],
                "self._init": [
                    552,
                    651,
                    758
                ],
                "mask_bad": [
                    554,
                    573
                ],
                "X": [
                    595,
                    554,
                    555
                ],
                "X.mask": [
                    554
                ],
                "np.isnan": [
                    554
                ],
                "xa": [
                    555,
                    556,
                    557,
                    558,
                    560,
                    594,
                    563,
                    565,
                    567,
                    568,
                    571,
                    572,
                    573
                ],
                "xa.dtype.isnative": [
                    556
                ],
                "xa.dtype": [
                    556,
                    558
                ],
                "newbyteorder": [
                    557
                ],
                "xa.byteswap": [
                    557
                ],
                "xa.dtype.kind": [
                    558
                ],
                "np.errstate": [
                    1306,
                    559
                ],
                "xa.astype": [
                    568
                ],
                "astype": [
                    576,
                    1330,
                    1467,
                    1586
                ],
                "self._lut": [
                    576,
                    640,
                    578,
                    642,
                    643,
                    898,
                    742,
                    743,
                    899,
                    745,
                    747,
                    652,
                    653,
                    750,
                    636,
                    605,
                    638
                ],
                "np.uint8": [
                    576
                ],
                "self._lut.copy": [
                    578
                ],
                "cls": [
                    601,
                    602
                ],
                "self.__class__": [
                    601
                ],
                "cmapobject": [
                    602,
                    603,
                    605,
                    606,
                    607
                ],
                "cls.__new__": [
                    602
                ],
                "cmapobject.__dict__.update": [
                    603
                ],
                "cmapobject.__dict__": [
                    603
                ],
                "self.__dict__": [
                    603
                ],
                "cmapobject._lut": [
                    605
                ],
                "np.copy": [
                    605
                ],
                "cmapobject._global": [
                    606
                ],
                "_warn_if_global_cmap_modified": [
                    611,
                    620,
                    629
                ],
                "self._set_extremes": [
                    901,
                    614,
                    623,
                    753,
                    632
                ],
                "np.all": [
                    652,
                    653
                ],
                "Colormap": [
                    737,
                    895,
                    845,
                    679
                ],
                "self.monochrome": [
                    736,
                    874,
                    881,
                    884,
                    894
                ],
                "Colormap.__init__": [
                    737,
                    895
                ],
                "self._segmentdata": [
                    801,
                    738,
                    835,
                    744,
                    746,
                    748,
                    749,
                    751
                ],
                "segmentdata": [
                    738
                ],
                "self._gamma": [
                    739,
                    837,
                    744,
                    746,
                    748,
                    757
                ],
                "np.ones": [
                    742
                ],
                "Sized": [
                    782
                ],
                "vals": [
                    785,
                    787,
                    790
                ],
                "cdict": [
                    789,
                    792,
                    793,
                    794,
                    795,
                    797
                ],
                "r": [
                    1603,
                    1623,
                    1608,
                    1613,
                    1582,
                    1618,
                    791,
                    792,
                    1593,
                    1627,
                    1598
                ],
                "g": [
                    1604,
                    1609,
                    1614,
                    1583,
                    1619,
                    791,
                    1624,
                    793,
                    1594,
                    1627,
                    1599
                ],
                "b": [
                    1600,
                    1627,
                    1605,
                    1610,
                    791,
                    1615,
                    1584,
                    1620,
                    1463,
                    1464,
                    1625,
                    794,
                    1595
                ],
                "a": [
                    795,
                    1312,
                    1313,
                    1314,
                    1318,
                    1319,
                    1321,
                    1323,
                    1324,
                    1325,
                    791,
                    1307,
                    1308,
                    1310
                ],
                "append": [
                    792,
                    793,
                    794,
                    795
                ],
                "LinearSegmentedColormap": [
                    801,
                    837,
                    797
                ],
                "new_cmap": [
                    906,
                    908,
                    909,
                    910,
                    911,
                    801,
                    803,
                    804,
                    805,
                    806,
                    935,
                    936,
                    932,
                    934,
                    937,
                    837,
                    839,
                    840,
                    841,
                    842
                ],
                "lutsize": [
                    905,
                    802
                ],
                "new_cmap._rgba_over": [
                    803,
                    908,
                    934,
                    839
                ],
                "new_cmap._rgba_under": [
                    840,
                    804,
                    909,
                    935
                ],
                "new_cmap._rgba_bad": [
                    936,
                    841,
                    805,
                    910
                ],
                "func": [
                    811
                ],
                "data_r": [
                    832,
                    837
                ],
                "functools.partial": [
                    832
                ],
                "functools": [
                    832
                ],
                "self._reverser": [
                    832
                ],
                "self._segmentdata.items": [
                    835
                ],
                "self.colors": [
                    899,
                    931,
                    876,
                    880,
                    885,
                    893
                ],
                "itertools.islice": [
                    886
                ],
                "itertools": [
                    886
                ],
                "itertools.cycle": [
                    886
                ],
                "gray": [
                    889,
                    893
                ],
                "ListedColormap": [
                    2097,
                    906,
                    932
                ],
                "colors_r": [
                    931,
                    932
                ],
                "self.vmin": [
                    1284,
                    1032,
                    1162,
                    1164,
                    1177,
                    1055,
                    1440,
                    1067,
                    1073,
                    1074,
                    1329,
                    1458,
                    1205,
                    1080,
                    1468,
                    968,
                    1368,
                    1117,
                    1131,
                    1132,
                    1393,
                    1143,
                    1146
                ],
                "_sanitize_extrema": [
                    968,
                    969
                ],
                "vmin": [
                    1284,
                    1286,
                    1032,
                    1288,
                    1034,
                    1036,
                    1293,
                    1041,
                    1045,
                    1046,
                    1177,
                    1178,
                    1183,
                    1055,
                    1060,
                    1062,
                    1194,
                    1195,
                    1329,
                    1330,
                    1205,
                    1209,
                    1211,
                    1858,
                    1859,
                    1863,
                    968,
                    1357,
                    1368,
                    1369,
                    1371,
                    1117,
                    1376,
                    1122,
                    1379,
                    1382,
                    1262,
                    1393,
                    1397,
                    1399,
                    1275
                ],
                "self.vmax": [
                    1284,
                    1033,
                    1162,
                    1177,
                    1056,
                    1441,
                    1068,
                    1456,
                    1329,
                    1458,
                    1075,
                    1076,
                    1205,
                    1080,
                    1469,
                    969,
                    1368,
                    1118,
                    1133,
                    1134,
                    1393,
                    1143,
                    1146
                ],
                "vmax": [
                    1284,
                    1286,
                    1288,
                    1033,
                    1034,
                    1036,
                    1293,
                    1041,
                    1046,
                    1177,
                    1178,
                    1183,
                    1056,
                    1060,
                    1062,
                    1195,
                    1329,
                    1330,
                    1205,
                    1209,
                    1211,
                    1860,
                    1861,
                    1863,
                    969,
                    1357,
                    1368,
                    1369,
                    1371,
                    1118,
                    1119,
                    1376,
                    1382,
                    1262,
                    1393,
                    1397,
                    1399,
                    1275
                ],
                "self.clip": [
                    1280,
                    1026,
                    970,
                    1452,
                    1169,
                    1362,
                    1439
                ],
                "clip": [
                    1280,
                    1025,
                    1026,
                    1291,
                    1039,
                    1168,
                    1169,
                    1181,
                    1439,
                    1451,
                    1452,
                    1457,
                    970,
                    1357,
                    1361,
                    1362,
                    1374,
                    1262,
                    1279
                ],
                "is_scalar": [
                    993,
                    994,
                    1282,
                    1028,
                    1385,
                    1005,
                    1197,
                    1454,
                    1171,
                    1140,
                    1300,
                    1364,
                    1048,
                    1148,
                    1471
                ],
                "dtype": [
                    1004,
                    996,
                    997,
                    999
                ],
                "np.min_scalar_type": [
                    996
                ],
                "np.issubdtype": [
                    997
                ],
                "np.integer": [
                    997
                ],
                "dtype.type": [
                    997
                ],
                "np.bool_": [
                    997
                ],
                "np.promote_types": [
                    1523,
                    1574,
                    999
                ],
                "np.float32": [
                    1523,
                    1574,
                    999
                ],
                "np.ma.getmask": [
                    1002,
                    1292,
                    1040,
                    1147,
                    1182,
                    1375
                ],
                "np.asarray": [
                    1513,
                    1442,
                    1003,
                    1564
                ],
                "np.ma.array": [
                    1376,
                    1384,
                    1196,
                    1004,
                    1293,
                    1041,
                    1047,
                    1470,
                    1183
                ],
                "self.process_value": [
                    1056,
                    1282,
                    1028,
                    1032,
                    1033,
                    1454,
                    1171,
                    1140,
                    1364,
                    1055
                ],
                "self.autoscale_None": [
                    1283,
                    1030,
                    1141,
                    1366,
                    1175
                ],
                "_": [
                    1032,
                    1033,
                    1056,
                    1055
                ],
                "result.fill": [
                    1289,
                    1035,
                    1179,
                    1372
                ],
                "result.filled": [
                    1376,
                    1041,
                    1293,
                    1183
                ],
                "resdat": [
                    1296,
                    1297,
                    1298,
                    1044,
                    1045,
                    1046,
                    1047,
                    1186,
                    1189,
                    1191,
                    1192,
                    1193,
                    1194,
                    1195,
                    1196,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1384
                ],
                "result.data": [
                    1296,
                    1186,
                    1044,
                    1378
                ],
                "result.mask": [
                    1384,
                    1187,
                    1047
                ],
                "self.scaled": [
                    1202,
                    1390,
                    1053,
                    1334
                ],
                "np.ma.asarray": [
                    1208,
                    1336,
                    1059,
                    1396
                ],
                "A": [
                    1219,
                    1347,
                    1066,
                    1067,
                    1068,
                    1130,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1342,
                    1215
                ],
                "np.asanyarray": [
                    1072,
                    1066
                ],
                "A.min": [
                    1074,
                    1067
                ],
                "A.max": [
                    1068,
                    1076
                ],
                "A.size": [
                    1073,
                    1075
                ],
                "Normalize": [
                    1222,
                    1158,
                    1351,
                    1863,
                    1357,
                    1262,
                    1486,
                    1402,
                    1083
                ],
                "self.vcenter": [
                    1131,
                    1132,
                    1133,
                    1134,
                    1143,
                    1146,
                    1116
                ],
                "vcenter": [
                    1122,
                    1116,
                    1119
                ],
                "autoscale_None": [
                    1130,
                    1219,
                    1347
                ],
                "np.ma.masked_array": [
                    1145
                ],
                "np.interp": [
                    1146
                ],
                "np.atleast_1d": [
                    1456,
                    1149
                ],
                "TwoSlopeNorm": [
                    1154
                ],
                "cbook.deprecation.deprecated": [
                    1153
                ],
                "cbook.deprecation": [
                    1153
                ],
                "np.ma.masked_less_equal": [
                    1219,
                    1173,
                    1215
                ],
                "self._check_vmin_vmax": [
                    1176,
                    1204
                ],
                "np.ma.nomask": [
                    1188
                ],
                "np.copyto": [
                    1192
                ],
                "np.log": [
                    1193,
                    1194,
                    1195,
                    1271,
                    1310
                ],
                "np.ma.power": [
                    1209,
                    1397
                ],
                "autoscale": [
                    1342,
                    1215
                ],
                "Normalize.__init__": [
                    1357,
                    1262
                ],
                "base": [
                    1270,
                    1263
                ],
                "self._base": [
                    1320,
                    1264,
                    1270,
                    1271,
                    1274
                ],
                "np.e": [
                    1264
                ],
                "self._log_base": [
                    1310,
                    1271
                ],
                "self.linthresh": [
                    1318,
                    1321,
                    1322,
                    1273,
                    1307,
                    1310,
                    1311
                ],
                "linthresh": [
                    1273
                ],
                "self._linscale_adj": [
                    1313,
                    1318,
                    1321,
                    1324,
                    1274,
                    1309
                ],
                "linscale": [
                    1274
                ],
                "self._transform_vmin_vmax": [
                    1276,
                    1348,
                    1343
                ],
                "self._transform": [
                    1296,
                    1331
                ],
                "self._lower": [
                    1297,
                    1298,
                    1331,
                    1337
                ],
                "self._upper": [
                    1337,
                    1298,
                    1331
                ],
                "masked": [
                    1312,
                    1313,
                    1318,
                    1319,
                    1321,
                    1323,
                    1324,
                    1307,
                    1308,
                    1310
                ],
                "np.abs": [
                    1318,
                    2005,
                    2007,
                    1307,
                    1310
                ],
                "sign": [
                    1319,
                    1321,
                    1322,
                    1308,
                    1311
                ],
                "np.sign": [
                    1308,
                    1319
                ],
                "log": [
                    1312,
                    1309,
                    1311
                ],
                "exp": [
                    1320,
                    1322,
                    1323
                ],
                "np.power": [
                    1320,
                    1381
                ],
                "arr": [
                    1537,
                    1538,
                    1540,
                    1541,
                    1330,
                    1331,
                    1637,
                    1638,
                    1513,
                    1516,
                    1518,
                    1520,
                    1521,
                    1522,
                    1523,
                    1526,
                    1527,
                    1529,
                    1534,
                    1535
                ],
                "self._inv_transform": [
                    1338
                ],
                "self.gamma": [
                    1392,
                    1358,
                    1367
                ],
                "boundaries": [
                    1440,
                    1441,
                    1442
                ],
                "self.boundaries": [
                    1442,
                    1443,
                    1463
                ],
                "self.Ncmap": [
                    1444,
                    1445,
                    1459,
                    1461,
                    1466
                ],
                "ncolors": [
                    1444
                ],
                "self._interp": [
                    1448,
                    1465,
                    1446
                ],
                "xx": [
                    1454,
                    1455,
                    1456,
                    1458,
                    1462,
                    1464,
                    1468,
                    1469
                ],
                "np.ma.getmaskarray": [
                    1455
                ],
                "xx.filled": [
                    1456
                ],
                "max_col": [
                    1459,
                    1461,
                    1469
                ],
                "iret": [
                    1462,
                    1464,
                    1467,
                    1468,
                    1469,
                    1470
                ],
                "xx.shape": [
                    1462
                ],
                "np.int16": [
                    1467,
                    1462
                ],
                "i": [
                    1602,
                    1637,
                    1638,
                    1607,
                    1592,
                    1612,
                    1617,
                    1586,
                    1587,
                    1941,
                    1942,
                    1463,
                    1464,
                    1597
                ],
                "scalefac": [
                    1466,
                    1467
                ],
                "arr.shape": [
                    1520,
                    1516,
                    1637,
                    1518
                ],
                "in_shape": [
                    1520,
                    1571,
                    1547,
                    1629
                ],
                "arr.dtype": [
                    1523
                ],
                "out": [
                    1538,
                    1541,
                    1543,
                    1544,
                    1545,
                    1547,
                    1526,
                    1535
                ],
                "np.zeros_like": [
                    1530,
                    1526
                ],
                "arr_max": [
                    1537,
                    1540,
                    1545,
                    1527,
                    1528,
                    1531,
                    1534
                ],
                "arr.max": [
                    1527
                ],
                "ipos": [
                    1537,
                    1540,
                    1528,
                    1531,
                    1532,
                    1534
                ],
                "delta": [
                    1538,
                    1541,
                    1529,
                    1530,
                    1531,
                    1532,
                    1535
                ],
                "arr.ptp": [
                    1529
                ],
                "s": [
                    1544,
                    1579,
                    1588,
                    1589,
                    1590,
                    1622,
                    1530,
                    1531
                ],
                "idx": [
                    1537,
                    1538,
                    1540,
                    1541,
                    1592,
                    1593,
                    1594,
                    1595,
                    1597,
                    1598,
                    1599,
                    1600,
                    1602,
                    1603,
                    1604,
                    1605,
                    1607,
                    1608,
                    1609,
                    1610,
                    1612,
                    1613,
                    1614,
                    1615,
                    1617,
                    1618,
                    1619,
                    1620,
                    1622,
                    1623,
                    1624,
                    1625,
                    1534,
                    1535
                ],
                "out.reshape": [
                    1547
                ],
                "hsv": [
                    2016,
                    1569,
                    1571,
                    1572,
                    1573,
                    1574,
                    1578,
                    1579,
                    1580,
                    2000,
                    2001,
                    1564,
                    2013,
                    1567
                ],
                "hsv.shape": [
                    1569,
                    1571,
                    1567
                ],
                "hsv.dtype": [
                    1574
                ],
                "h": [
                    1578,
                    1582,
                    1583,
                    1584,
                    1586,
                    1587
                ],
                "np.empty_like": [
                    1584,
                    1582,
                    1583
                ],
                "f": [
                    1587,
                    1589,
                    1590
                ],
                "p": [
                    1600,
                    1603,
                    1608,
                    1614,
                    1619,
                    1588,
                    1595
                ],
                "q": [
                    1609,
                    1620,
                    1589,
                    1598
                ],
                "t": [
                    1594,
                    1613,
                    1605,
                    1590
                ],
                "rgb": [
                    2053,
                    2054,
                    2055,
                    1930,
                    1933,
                    2000,
                    2035,
                    1942,
                    1627,
                    1629
                ],
                "np.stack": [
                    1627
                ],
                "rgb.reshape": [
                    1629
                ],
                "sum_sq": [
                    1636,
                    1638,
                    1639
                ],
                "np.newaxis": [
                    1921,
                    1638
                ],
                "np.sqrt": [
                    1639
                ],
                "self.azdeg": [
                    1689,
                    1677
                ],
                "azdeg": [
                    1677
                ],
                "self.altdeg": [
                    1690,
                    1678
                ],
                "altdeg": [
                    1678
                ],
                "self.hsv_min_val": [
                    1993,
                    1679
                ],
                "hsv_min_val": [
                    1992,
                    1993,
                    2012,
                    1679
                ],
                "self.hsv_max_val": [
                    1680,
                    1989
                ],
                "hsv_max_val": [
                    1680,
                    2010,
                    1988,
                    1989
                ],
                "self.hsv_min_sat": [
                    1681,
                    1991
                ],
                "hsv_min_sat": [
                    2008,
                    1681,
                    1990,
                    1991
                ],
                "self.hsv_max_sat": [
                    1682,
                    1987
                ],
                "hsv_max_sat": [
                    1986,
                    1682,
                    1987,
                    2006
                ],
                "az": [
                    1689,
                    1692,
                    1693
                ],
                "np.radians": [
                    1689,
                    1690
                ],
                "alt": [
                    1690,
                    1692,
                    1693,
                    1694
                ],
                "np.cos": [
                    1692,
                    1693
                ],
                "np.sin": [
                    1693,
                    1694
                ],
                "dy": [
                    1920,
                    1737,
                    1867,
                    1740
                ],
                "e_dy": [
                    1745,
                    1740
                ],
                "e_dx": [
                    1744,
                    1740
                ],
                "np.gradient": [
                    1740
                ],
                "vert_exag": [
                    1920,
                    1867,
                    1740
                ],
                "elevation": [
                    1920,
                    1740,
                    1743
                ],
                "dx": [
                    1920,
                    1867,
                    1740
                ],
                "normal": [
                    1743,
                    1744,
                    1745,
                    1746,
                    1747,
                    1749
                ],
                "view": [
                    1743
                ],
                "np.empty": [
                    1743
                ],
                "elevation.shape": [
                    1743
                ],
                "_vector_magnitude": [
                    1747
                ],
                "self.shade_normals": [
                    1749
                ],
                "fraction": [
                    1920,
                    1781,
                    1868,
                    1749
                ],
                "intensity": [
                    1792,
                    1793,
                    1920,
                    1795,
                    1921,
                    2053,
                    2054,
                    1930,
                    1933,
                    1939,
                    1940,
                    1996,
                    1997,
                    2005,
                    2006,
                    2007,
                    2008,
                    2009,
                    2010,
                    2011,
                    2012,
                    1777,
                    2035,
                    1780,
                    1781,
                    1791
                ],
                "normals.dot": [
                    1777
                ],
                "normals": [
                    1777
                ],
                "self.direction": [
                    1777
                ],
                "imin": [
                    1792,
                    1786,
                    1780,
                    1791
                ],
                "imax": [
                    1792,
                    1786,
                    1780
                ],
                "intensity.min": [
                    1780
                ],
                "intensity.max": [
                    1780
                ],
                "data.min": [
                    1859
                ],
                "data.max": [
                    1861
                ],
                "norm": [
                    2112,
                    1862,
                    1863,
                    1865,
                    2111
                ],
                "rgb0": [
                    1865,
                    1866,
                    1870,
                    1871
                ],
                "rgb1": [
                    1866,
                    1870
                ],
                "self.shade_rgb": [
                    1866
                ],
                "blend_mode": [
                    1929,
                    1866,
                    1933,
                    1930
                ],
                "kwargs": [
                    1930,
                    1868,
                    1933
                ],
                "self.hillshade": [
                    1920
                ],
                "lookup": [
                    1936,
                    1929,
                    1930,
                    1924
                ],
                "self.blend_hsv": [
                    1925
                ],
                "self.blend_soft_light": [
                    1926
                ],
                "self.blend_overlay": [
                    1927
                ],
                "blend": [
                    1944,
                    1930,
                    1933,
                    1942
                ],
                "lookup.keys": [
                    1936
                ],
                "intensity.mask": [
                    1940
                ],
                "rgb_to_hsv": [
                    2000
                ],
                "hue": [
                    2001
                ],
                "sat": [
                    2001,
                    2005,
                    2006,
                    2007,
                    2008
                ],
                "np.moveaxis": [
                    2001
                ],
                "np.putmask": [
                    2009,
                    2011,
                    2005,
                    2007
                ],
                "hsv_to_rgb": [
                    2016
                ],
                "low": [
                    2053,
                    2055
                ],
                "high": [
                    2054,
                    2055
                ],
                "np.where": [
                    2055
                ],
                "slice_map": [
                    2088,
                    2081,
                    2087
                ],
                "cbook._check_in_list": [
                    2087
                ],
                "extend": [
                    2087,
                    2088,
                    2094,
                    2099,
                    2104,
                    2109
                ],
                "color_slice": [
                    2088,
                    2097,
                    2091
                ],
                "n_data_colors": [
                    2097,
                    2090,
                    2091,
                    2111
                ],
                "levels": [
                    2090,
                    2094,
                    2111
                ],
                "n_expected": [
                    2091,
                    2092,
                    2095
                ],
                "color_slice.start": [
                    2091
                ],
                "color_slice.stop": [
                    2091
                ],
                "cmap.set_under": [
                    2100,
                    2102
                ],
                "cmap.set_over": [
                    2105,
                    2107
                ],
                "cmap.colorbar_extend": [
                    2109
                ],
                "BoundaryNorm": [
                    2111
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/matplotlib_7/lib/matplotlib/tests/test_colors.py",
                "test_function": "test_light_source_shading_empty_mask",
                "test_function_code": "def test_light_source_shading_empty_mask():\n    y, x = np.mgrid[-1.2:1.2:8j, -1.2:1.2:8j]\n    z0 = 10 * np.cos(x**2 + y**2)\n    z1 = np.ma.array(z0)\n\n    cmap = plt.cm.copper\n    ls = mcolors.LightSource(315, 45)\n    rgb0 = ls.shade(z0, cmap)\n    rgb1 = ls.shade(z1, cmap)\n\n    assert_array_almost_equal(rgb0, rgb1)",
                "test_error": "IndexError: invalid index to scalar variable.",
                "full_test_error": "def test_light_source_shading_empty_mask():\n        y, x = np.mgrid[-1.2:1.2:8j, -1.2:1.2:8j]\n        z0 = 10 * np.cos(x**2 + y**2)\n        z1 = np.ma.array(z0)\n    \n        cmap = plt.cm.copper\n        ls = mcolors.LightSource(315, 45)\n        rgb0 = ls.shade(z0, cmap)\n>       rgb1 = ls.shade(z1, cmap)\n\nlib/matplotlib/tests/test_colors.py:703: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlib/matplotlib/colors.py:1866: in shade\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <matplotlib.colors.LightSource object at 0x10f686e50>\nrgb = array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n  ...,\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])\nelevation = masked_array(\n  data=[[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854...33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312]],\n  mask=False,\n  fill_value=1e+20)\nfraction = 1, blend_mode = 'overlay', vert_exag = 1, dx = 1, dy = 1, kwargs = {}\nintensity = masked_array(\n  data=[[[0.93286093],\n         [0.90181886],\n         [0.89217264],\n         [0.84661419],\n         [0.... [0.09484714],\n         [0.02658046],\n         [0.01158178],\n         [0.02567518]]],\n  mask=False,\n  fill_value=1e+20)\nlookup = {'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x10f686e50>>, 'overlay': <bou...686e50>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x10f686e50>>}\nblend = array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.44560451, 0.28180036, 0.17946195, 1.        ],\n  ...,\n        [0.00572276, 0.00361908, 0.00230477, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])\n\n    def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n                  vert_exag=1, dx=1, dy=1, **kwargs):\n        \"\"\"\n        Use this light source to adjust the colors of the *rgb* input array to\n        give the impression of a shaded relief map with the given *elevation*.\n    \n        Parameters\n        ----------\n        rgb : array-like\n            An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n        elevation : array-like\n            An (M, N) array of the height values used to generate a shaded map.\n        fraction : number\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n            The type of blending used to combine the colormapped data values\n            with the illumination intensity.  For backwards compatibility, this\n            defaults to \"hsv\". Note that for most topographic surfaces,\n            \"overlay\" or \"soft\" appear more visually realistic. If a\n            user-defined function is supplied, it is expected to combine an\n            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n            array (also 0 to 1).  (Call signature\n            ``func(rgb, illum, **kwargs)``)\n            Additional kwargs supplied to this function will be passed on to\n            the *blend_mode* function.\n        vert_exag : number, optional\n            The amount to exaggerate the elevation values by when calculating\n            illumination. This can be used either to correct for differences in\n            units between the x-y coordinate system and the elevation\n            coordinate system (e.g. decimal degrees vs. meters) or to\n            exaggerate or de-emphasize topography.\n        dx : number, optional\n            The x-spacing (columns) of the input *elevation* grid.\n        dy : number, optional\n            The y-spacing (rows) of the input *elevation* grid.\n        Additional kwargs are passed on to the *blend_mode* function.\n    \n        Returns\n        -------\n        ndarray\n            An (m, n, 3) array of floats ranging between 0-1.\n        \"\"\"\n        # Calculate the \"hillshade\" intensity.\n        intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n        intensity = intensity[..., np.newaxis]\n    \n        # Blend the hillshade and rgb data using the specified mode\n        lookup = {\n                'hsv': self.blend_hsv,\n                'soft': self.blend_soft_light,\n                'overlay': self.blend_overlay,\n                }\n        if blend_mode in lookup:\n            blend = lookup[blend_mode](rgb, intensity, **kwargs)\n        else:\n            try:\n                blend = blend_mode(rgb, intensity, **kwargs)\n            except TypeError as err:\n                raise ValueError('\"blend_mode\" must be callable or one of {}'\n                                 .format(lookup.keys)) from err\n    \n        # Only apply result where hillshade intensity isn't masked\n        if hasattr(intensity, 'mask'):\n>           mask = intensity.mask[..., 0]\nE           IndexError: invalid index to scalar variable.\n\nlib/matplotlib/colors.py:1940: IndexError",
                "traceback": "lib/matplotlib/colors.py:1866: in shade\n    rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <matplotlib.colors.LightSource object at 0x10f686e50>\nrgb = array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n  ...,\n        [0.24705877, 0.15624   , 0.0995    , 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])\nelevation = masked_array(\n  data=[[-9.65979312, -5.67854964, -1.33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854...33295553,  1.01234852,  1.01234852,\n         -1.33295553, -5.67854964, -9.65979312]],\n  mask=False,\n  fill_value=1e+20)\nfraction = 1, blend_mode = 'overlay', vert_exag = 1, dx = 1, dy = 1, kwargs = {}\nintensity = masked_array(\n  data=[[[0.93286093],\n         [0.90181886],\n         [0.89217264],\n         [0.84661419],\n         [0.... [0.09484714],\n         [0.02658046],\n         [0.01158178],\n         [0.02567518]]],\n  mask=False,\n  fill_value=1e+20)\nlookup = {'hsv': <bound method LightSource.blend_hsv of <matplotlib.colors.LightSource object at 0x10f686e50>>, 'overlay': <bou...686e50>>, 'soft': <bound method LightSource.blend_soft_light of <matplotlib.colors.LightSource object at 0x10f686e50>>}\nblend = array([[[0.        , 0.        , 0.        , 1.        ],\n        [0.44560451, 0.28180036, 0.17946195, 1.        ],\n  ...,\n        [0.00572276, 0.00361908, 0.00230477, 1.        ],\n        [0.        , 0.        , 0.        , 1.        ]]])\n\n    def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',\n                  vert_exag=1, dx=1, dy=1, **kwargs):\n        \"\"\"\n        Use this light source to adjust the colors of the *rgb* input array to\n        give the impression of a shaded relief map with the given *elevation*.\n    \n        Parameters\n        ----------\n        rgb : array-like\n            An (M, N, 3) RGB array, assumed to be in the range of 0 to 1.\n        elevation : array-like\n            An (M, N) array of the height values used to generate a shaded map.\n        fraction : number\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n        blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional\n            The type of blending used to combine the colormapped data values\n            with the illumination intensity.  For backwards compatibility, this\n            defaults to \"hsv\". Note that for most topographic surfaces,\n            \"overlay\" or \"soft\" appear more visually realistic. If a\n            user-defined function is supplied, it is expected to combine an\n            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n            array (also 0 to 1).  (Call signature\n            ``func(rgb, illum, **kwargs)``)\n            Additional kwargs supplied to this function will be passed on to\n            the *blend_mode* function.\n        vert_exag : number, optional\n            The amount to exaggerate the elevation values by when calculating\n            illumination. This can be used either to correct for differences in\n            units between the x-y coordinate system and the elevation\n            coordinate system (e.g. decimal degrees vs. meters) or to\n            exaggerate or de-emphasize topography.\n        dx : number, optional\n            The x-spacing (columns) of the input *elevation* grid.\n        dy : number, optional\n            The y-spacing (rows) of the input *elevation* grid.\n        Additional kwargs are passed on to the *blend_mode* function.\n    \n        Returns\n        -------\n        ndarray\n            An (m, n, 3) array of floats ranging between 0-1.\n        \"\"\"\n        # Calculate the \"hillshade\" intensity.\n        intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)\n        intensity = intensity[..., np.newaxis]\n    \n        # Blend the hillshade and rgb data using the specified mode\n        lookup = {\n                'hsv': self.blend_hsv,\n                'soft': self.blend_soft_light,\n                'overlay': self.blend_overlay,\n                }\n        if blend_mode in lookup:\n            blend = lookup[blend_mode](rgb, intensity, **kwargs)\n        else:\n            try:\n                blend = blend_mode(rgb, intensity, **kwargs)\n            except TypeError as err:\n                raise ValueError('\"blend_mode\" must be callable or one of {}'\n                                 .format(lookup.keys)) from err\n    \n        # Only apply result where hillshade intensity isn't masked\n        if hasattr(intensity, 'mask'):\n>           mask = intensity.mask[..., 0]\nE           IndexError: invalid index to scalar variable.\n\nlib/matplotlib/colors.py:1940: IndexError",
                "test_function_decorators": []
            }
        ]
    }
}