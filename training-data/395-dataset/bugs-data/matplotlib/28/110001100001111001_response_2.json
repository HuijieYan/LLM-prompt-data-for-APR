{
    "matplotlib": [
        {
            "bugID": 28,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 3160,
            "file_name": "lib/matplotlib/axes/_base.py",
            "replace_code": "def set_xlim(self, left=None, right=None, emit=True, auto=False, *, xmin=None, xmax=None):\n    import numpy as np\n    \"\"\"\n    Set the x-axis view limits.\n    \n    .. ACCEPTS: (left: float, right: float)\n    \n    Parameters\n    ----------\n    left : scalar, optional\n        The left xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n    \n        The left and right xlims may be passed as the tuple\n        (*left*, *right*) as the first positional argument (or as\n        the *left* keyword argument).\n    \n    right : scalar, optional\n        The right xlim in data coordinates. Passing *None* leaves the\n        limit unchanged.\n    \n    emit : bool, optional\n        Whether to notify observers of limit change (default: True).\n    \n    auto : bool or None, optional\n        Whether to turn on autoscaling of the x-axis. True turns on,\n        False turns off (default action), None leaves unchanged.\n    \n    xmin, xmax : scalar, optional\n        They are equivalent to left and right respectively,\n        and it is an error to pass both *xmin* and *left* or\n        *xmax* and *right*.\n    \n    Returns\n    -------\n    left, right : (float, float)\n        The new x-axis limits in data coordinates.\n    \n    See Also\n    --------\n    get_xlim\n    set_xbound, get_xbound\n    invert_xaxis, xaxis_inverted\n    \"\"\"\n    if left is not None and np.iterable(left) and right is None:\n        left, right = left\n    \n    if xmin is not None:\n        if left is not None:\n            raise TypeError('Cannot pass both `xmin` and `left`')\n        left = xmin\n    if xmax is not None:\n        if right is not None:\n            raise TypeError('Cannot pass both `xmax` and `right`')\n        right = xmax\n    \n    self._process_unit_info(xdata=(left, right))\n    left = self._validate_converted_limits(left, self.convert_xunits)\n    right = self._validate_converted_limits(right, self.convert_xunits)\n    \n    # new conditions to set xlim using provided values\n    if left is not None and right is not None:\n        self._viewLim.intervalx = (left, right)\n        if auto is not None:\n            self._autoscaleXon = bool(auto)\n    \n        if emit:\n            self.callbacks.process('xlim_changed', self)\n            for other in self._shared_x_axes.get_siblings(self):\n                if other is not self:\n                    other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)\n                    if other.figure != self.figure:\n                        other.figure.canvas.draw_idle()\n    \n    self.stale = True\n    return left, right"
        }
    ]
}