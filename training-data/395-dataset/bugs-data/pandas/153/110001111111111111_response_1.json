{
    "pandas": [
        {
            "bugID": 153,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 699,
            "file_name": "/pandas/core/internals/blocks.py",
            "replace_code": "def to_native_types(self, slicer=None, na_rep=\"mynull\", quoting=None, **kwargs):\n\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n    \n    values = self.get_values()\n    \n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n    \n    if not self.is_object and not quoting:\n        # Adjust slicing and cast to string with specified length\n        values = np.array([str(val)[:len(na_rep)] if not pd.isna(val) else na_rep for val in values.ravel()]).reshape(values.shape)\n    else:\n        values = np.array(values, dtype=\"object\")\n    \n    values[mask] = na_rep\n    return values"
        }
    ]
}