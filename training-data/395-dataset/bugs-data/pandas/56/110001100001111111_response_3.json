{
    "pandas": [
        {
            "bugID": 56,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2610,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _get_value(self, index, col, takeable: bool = False):\n\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n    \n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n    \n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._get_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n    \n    series = self._get_item_cache(col)\n    engine = self.index._engine\n    \n    try:\n        loc = engine.get_loc(index)\n        return series._values[loc]\n    except KeyError:\n        if self.index.nlevels > 1:\n            raise  # partial indexing forbidden\n    \n    # we cannot handle direct indexing\n    # use positional\n    col_loc = self.columns.get_loc(col)\n    index_loc = self.index.get_loc(index)\n    return series._values[index_loc]"
        }
    ]
}