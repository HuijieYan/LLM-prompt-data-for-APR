{
    "pandas:56": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_56/pandas/core/frame.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_value",
                    "function_code": "def _get_value(self, index, col, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n\n    try:\n        loc = engine.get_loc(index)\n        return series._values[loc]\n    except KeyError:\n        # GH 20629\n        if self.index.nlevels > 1:\n            # partial indexing forbidden\n            raise\n\n    # we cannot handle direct indexing\n    # use positional\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)\n",
                    "decorators": [],
                    "docstring": "Quickly retrieve single value at passed column and index.\n\nParameters\n----------\nindex : row label\ncol : column label\ntakeable : interpret the index/col as indexers, default False\n\nReturns\n-------\nscalar",
                    "start_line": 2610,
                    "variables": {
                        "bool": [
                            2610
                        ],
                        "takeable": [
                            2624
                        ],
                        "series": [
                            2633,
                            2625,
                            2626,
                            2628
                        ],
                        "self._iget_item_cache": [
                            2625
                        ],
                        "self": [
                            2625,
                            2628,
                            2629,
                            2636,
                            2642,
                            2643,
                            2644
                        ],
                        "col": [
                            2625,
                            2642,
                            2628,
                            2644
                        ],
                        "com.maybe_box_datetimelike": [
                            2626
                        ],
                        "com": [
                            2626
                        ],
                        "series._values": [
                            2633,
                            2626
                        ],
                        "index": [
                            2632,
                            2626,
                            2643,
                            2644
                        ],
                        "self._get_item_cache": [
                            2628
                        ],
                        "engine": [
                            2632,
                            2629
                        ],
                        "self.index._engine": [
                            2629
                        ],
                        "self.index": [
                            2643,
                            2636,
                            2629
                        ],
                        "loc": [
                            2632,
                            2633
                        ],
                        "engine.get_loc": [
                            2632
                        ],
                        "KeyError": [
                            2634
                        ],
                        "self.index.nlevels": [
                            2636
                        ],
                        "self.columns.get_loc": [
                            2642
                        ],
                        "self.columns": [
                            2642
                        ],
                        "self.index.get_loc": [
                            2643
                        ],
                        "self._get_value": [
                            2644
                        ]
                    },
                    "filtered_variables": {
                        "takeable": [
                            2624
                        ],
                        "series": [
                            2633,
                            2625,
                            2626,
                            2628
                        ],
                        "self._iget_item_cache": [
                            2625
                        ],
                        "self": [
                            2625,
                            2628,
                            2629,
                            2636,
                            2642,
                            2643,
                            2644
                        ],
                        "col": [
                            2625,
                            2642,
                            2628,
                            2644
                        ],
                        "com.maybe_box_datetimelike": [
                            2626
                        ],
                        "com": [
                            2626
                        ],
                        "series._values": [
                            2633,
                            2626
                        ],
                        "index": [
                            2632,
                            2626,
                            2643,
                            2644
                        ],
                        "self._get_item_cache": [
                            2628
                        ],
                        "engine": [
                            2632,
                            2629
                        ],
                        "self.index._engine": [
                            2629
                        ],
                        "self.index": [
                            2643,
                            2636,
                            2629
                        ],
                        "loc": [
                            2632,
                            2633
                        ],
                        "engine.get_loc": [
                            2632
                        ],
                        "self.index.nlevels": [
                            2636
                        ],
                        "self.columns.get_loc": [
                            2642
                        ],
                        "self.columns": [
                            2642
                        ],
                        "self.index.get_loc": [
                            2643
                        ],
                        "self._get_value": [
                            2644
                        ]
                    },
                    "diff_line_number": 2625,
                    "class_data": {
                        "signature": "class DataFrame(NDFrame)",
                        "docstring": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv\nread_table\nread_clipboard\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
                        "constructor_docstring": null,
                        "functions": [
                            "@property\ndef _constructor(self) -> Type['DataFrame']:\n    return DataFrame",
                            "@property\ndef _constructor_expanddim(self):\n    raise NotImplementedError('Not supported for DataFrames!')",
                            "def __init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data.soften_mask()\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, abc.Iterable) and (not isinstance(data, (str, bytes))):\n        if not isinstance(data, (abc.Sequence, ExtensionArray)):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as err:\n            exc = TypeError(f'DataFrame constructor called with incompatible data and dtype: {err}')\n            raise exc from err\n        if arr.ndim == 0 and index is not None and (columns is not None):\n            values = cast_scalar_to_array((len(index), len(columns)), data, dtype=dtype)\n            mgr = init_ndarray(values, index, columns, dtype=values.dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)",
                            "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list representing the axes of the DataFrame.\n\n    It has the row axis labels and column axis labels as the only members.\n    They are returned in that order.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.axes\n    [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n    dtype='object')]\n    \"\"\"\n    return [self.index, self.columns]",
                            "@property\ndef shape(self) -> Tuple[int, int]:\n    \"\"\"\n    Return a tuple representing the dimensionality of the DataFrame.\n\n    See Also\n    --------\n    ndarray.shape\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.shape\n    (2, 2)\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n    ...                    'col3': [5, 6]})\n    >>> df.shape\n    (2, 3)\n    \"\"\"\n    return (len(self.index), len(self.columns))",
                            "@property\ndef _is_homogeneous_type(self) -> bool:\n    \"\"\"\n    Whether all the columns in a DataFrame have the same type.\n\n    Returns\n    -------\n    bool\n\n    See Also\n    --------\n    Index._is_homogeneous_type : Whether the object has a single\n        dtype.\n    MultiIndex._is_homogeneous_type : Whether all the levels of a\n        MultiIndex have the same dtype.\n\n    Examples\n    --------\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n    True\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n    False\n\n    Items with the same type but different sizes are considered\n    different types.\n\n    >>> DataFrame({\n    ...    \"A\": np.array([1, 2], dtype=np.int32),\n    ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n    False\n    \"\"\"\n    if self._data.any_extension_types:\n        return len({block.dtype for block in self._data.blocks}) == 1\n    else:\n        return not self._data.is_mixed_type",
                            "def _repr_fits_vertical_(self) -> bool:\n    \"\"\"\n    Check length against max_rows.\n    \"\"\"\n    max_rows = get_option('display.max_rows')\n    return len(self) <= max_rows",
                            "def _repr_fits_horizontal_(self, ignore_width: bool=False) -> bool:\n    \"\"\"\n    Check if full repr fits in horizontal boundaries imposed by the display\n    options width and max_columns.\n\n    In case of non-interactive session, no boundaries apply.\n\n    `ignore_width` is here so ipnb+HTML output can behave the way\n    users expect. display.max_columns remains in effect.\n    GH3541, GH3573\n    \"\"\"\n    width, height = console.get_console_size()\n    max_columns = get_option('display.max_columns')\n    nb_columns = len(self.columns)\n    if max_columns and nb_columns > max_columns or (not ignore_width and width and (nb_columns > width // 2)):\n        return False\n    if ignore_width or not console.in_interactive_session():\n        return True\n    if get_option('display.width') is not None or console.in_ipython_frontend():\n        max_rows = 1\n    else:\n        max_rows = get_option('display.max_rows')\n    buf = StringIO()\n    d = self\n    if not max_rows is None:\n        d = d.iloc[:min(max_rows, len(d))]\n    else:\n        return True\n    d.to_string(buf=buf)\n    value = buf.getvalue()\n    repr_width = max((len(l) for l in value.split('\\n')))\n    return repr_width < width",
                            "def _info_repr(self) -> bool:\n    \"\"\"\n    True if the repr should show the info view.\n    \"\"\"\n    info_repr_option = get_option('display.large_repr') == 'info'\n    return info_repr_option and (not (self._repr_fits_horizontal_() and self._repr_fits_vertical_()))",
                            "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular DataFrame.\n    \"\"\"\n    buf = StringIO('')\n    if self._info_repr():\n        self.info(buf=buf)\n        return buf.getvalue()\n    max_rows = get_option('display.max_rows')\n    min_rows = get_option('display.min_rows')\n    max_cols = get_option('display.max_columns')\n    max_colwidth = get_option('display.max_colwidth')\n    show_dimensions = get_option('display.show_dimensions')\n    if get_option('display.expand_frame_repr'):\n        width, _ = console.get_console_size()\n    else:\n        width = None\n    self.to_string(buf=buf, max_rows=max_rows, min_rows=min_rows, max_cols=max_cols, line_width=width, max_colwidth=max_colwidth, show_dimensions=show_dimensions)\n    return buf.getvalue()",
                            "def _repr_html_(self) -> Optional[str]:\n    \"\"\"\n    Return a html representation for a particular DataFrame.\n\n    Mainly for IPython notebook.\n    \"\"\"\n    if self._info_repr():\n        buf = StringIO('')\n        self.info(buf=buf)\n        val = buf.getvalue().replace('<', '&lt;', 1)\n        val = val.replace('>', '&gt;', 1)\n        return '<pre>' + val + '</pre>'\n    if get_option('display.notebook_repr_html'):\n        max_rows = get_option('display.max_rows')\n        min_rows = get_option('display.min_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        formatter = fmt.DataFrameFormatter(self, columns=None, col_space=None, na_rep='NaN', formatters=None, float_format=None, sparsify=None, justify=None, index_names=True, header=True, index=True, bold_rows=True, escape=True, max_rows=max_rows, min_rows=min_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal='.', table_id=None, render_links=False)\n        return formatter.to_html(notebook=True)\n    else:\n        return None",
                            "@Substitution(header_type='bool or sequence', header='Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names', col_space_type='int', col_space='The minimum width of each column')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]:\n    \"\"\"\n    Render a DataFrame to a console-friendly tabular output.\n    %(shared_params)s\n    line_width : int, optional\n        Width to wrap a line in characters.\n    max_colwidth : int, optional\n        Max width to truncate each column in characters. By default, no limit.\n\n        .. versionadded:: 1.0.0\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n    %(returns)s\n    See Also\n    --------\n    to_html : Convert DataFrame to HTML.\n\n    Examples\n    --------\n    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n    >>> df = pd.DataFrame(d)\n    >>> print(df.to_string())\n       col1  col2\n    0     1     4\n    1     2     5\n    2     3     6\n    \"\"\"\n    from pandas import option_context\n    with option_context('display.max_colwidth', max_colwidth):\n        formatter = fmt.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, min_rows=min_rows, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, line_width=line_width)\n        return formatter.to_string(buf=buf, encoding=encoding)",
                            "@property\ndef style(self) -> 'Styler':\n    \"\"\"\n    Returns a Styler object.\n\n    Contains methods for building a styled HTML representation of the DataFrame.\n    a styled HTML representation fo the DataFrame.\n\n    See Also\n    --------\n    io.formats.style.Styler\n    \"\"\"\n    from pandas.io.formats.style import Styler\n    return Styler(self)",
                            "@Appender(_shared_docs['items'])\ndef items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    if self.columns.is_unique and hasattr(self, '_item_cache'):\n        for k in self.columns:\n            yield (k, self._get_item_cache(k))\n    else:\n        for i, k in enumerate(self.columns):\n            yield (k, self._ixs(i, axis=1))",
                            "@Appender(_shared_docs['items'])\ndef iteritems(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    yield from self.items()",
                            "def iterrows(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    \"\"\"\n    Iterate over DataFrame rows as (index, Series) pairs.\n\n    Yields\n    ------\n    index : label or tuple of label\n        The index of the row. A tuple for a `MultiIndex`.\n    data : Series\n        The data of the row as a Series.\n\n    it : generator\n        A generator that iterates over the rows of the frame.\n\n    See Also\n    --------\n    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    1. Because ``iterrows`` returns a Series for each row,\n       it does **not** preserve dtypes across the rows (dtypes are\n       preserved across columns for DataFrames). For example,\n\n       >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n       >>> row = next(df.iterrows())[1]\n       >>> row\n       int      1.0\n       float    1.5\n       Name: 0, dtype: float64\n       >>> print(row['int'].dtype)\n       float64\n       >>> print(df['int'].dtype)\n       int64\n\n       To preserve dtypes while iterating over the rows, it is better\n       to use :meth:`itertuples` which returns namedtuples of the values\n       and which is generally faster than ``iterrows``.\n\n    2. You should **never modify** something you are iterating over.\n       This is not guaranteed to work in all cases. Depending on the\n       data types, the iterator returns a copy and not a view, and writing\n       to it will have no effect.\n    \"\"\"\n    columns = self.columns\n    klass = self._constructor_sliced\n    for k, v in zip(self.index, self.values):\n        s = klass(v, index=columns, name=k)\n        yield (k, s)",
                            "def itertuples(self, index=True, name='Pandas'):\n    \"\"\"\n    Iterate over DataFrame rows as namedtuples.\n\n    Parameters\n    ----------\n    index : bool, default True\n        If True, return the index as the first element of the tuple.\n    name : str or None, default \"Pandas\"\n        The name of the returned namedtuples or None to return regular\n        tuples.\n\n    Returns\n    -------\n    iterator\n        An object to iterate over namedtuples for each row in the\n        DataFrame with the first field possibly being the index and\n        following fields being the column values.\n\n    See Also\n    --------\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n        pairs.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    The column names will be renamed to positional names if they are\n    invalid Python identifiers, repeated, or start with an underscore.\n    On python versions < 3.7 regular tuples are returned for DataFrames\n    with a large number of columns (>254).\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n    ...                   index=['dog', 'hawk'])\n    >>> df\n          num_legs  num_wings\n    dog          4          0\n    hawk         2          2\n    >>> for row in df.itertuples():\n    ...     print(row)\n    ...\n    Pandas(Index='dog', num_legs=4, num_wings=0)\n    Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n    By setting the `index` parameter to False we can remove the index\n    as the first element of the tuple:\n\n    >>> for row in df.itertuples(index=False):\n    ...     print(row)\n    ...\n    Pandas(num_legs=4, num_wings=0)\n    Pandas(num_legs=2, num_wings=2)\n\n    With the `name` parameter set we set a custom name for the yielded\n    namedtuples:\n\n    >>> for row in df.itertuples(name='Animal'):\n    ...     print(row)\n    ...\n    Animal(Index='dog', num_legs=4, num_wings=0)\n    Animal(Index='hawk', num_legs=2, num_wings=2)\n    \"\"\"\n    arrays = []\n    fields = list(self.columns)\n    if index:\n        arrays.append(self.index)\n        fields.insert(0, 'Index')\n    arrays.extend((self.iloc[:, k] for k in range(len(self.columns))))\n    can_return_named_tuples = PY37 or len(self.columns) + index < 255\n    if name is not None and can_return_named_tuples:\n        itertuple = collections.namedtuple(name, fields, rename=True)\n        return map(itertuple._make, zip(*arrays))\n    return zip(*arrays)",
                            "def __len__(self) -> int:\n    \"\"\"\n    Returns length of info axis, but here we use the index.\n    \"\"\"\n    return len(self.index)",
                            "def dot(self, other):\n    \"\"\"\n    Compute the matrix multiplication between the DataFrame and other.\n\n    This method computes the matrix product between the DataFrame and the\n    values of an other Series, DataFrame or a numpy array.\n\n    It can also be called using ``self @ other`` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the matrix product with.\n\n    Returns\n    -------\n    Series or DataFrame\n        If other is a Series, return the matrix product between self and\n        other as a Serie. If other is a DataFrame or a numpy.array, return\n        the matrix product of self and other in a DataFrame of a np.array.\n\n    See Also\n    --------\n    Series.dot: Similar method for Series.\n\n    Notes\n    -----\n    The dimensions of DataFrame and other must be compatible in order to\n    compute the matrix multiplication. In addition, the column names of\n    DataFrame and the index of other must contain the same values, as they\n    will be aligned prior to the multiplication.\n\n    The dot method for Series computes the inner product, instead of the\n    matrix product here.\n\n    Examples\n    --------\n    Here we multiply a DataFrame with a Series.\n\n    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n    >>> s = pd.Series([1, 1, 2, 1])\n    >>> df.dot(s)\n    0    -4\n    1     5\n    dtype: int64\n\n    Here we multiply a DataFrame with another DataFrame.\n\n    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(other)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note that the dot method give the same result as @\n\n    >>> df @ other\n        0   1\n    0   1   4\n    1   2   2\n\n    The dot method works also if other is an np.array.\n\n    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(arr)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note how shuffling of the objects does not change the result.\n\n    >>> s2 = s.reindex([1, 0, 2, 3])\n    >>> df.dot(s2)\n    0    -4\n    1     5\n    dtype: int64\n    \"\"\"\n    if isinstance(other, (Series, DataFrame)):\n        common = self.columns.union(other.index)\n        if len(common) > len(self.columns) or len(common) > len(other.index):\n            raise ValueError('matrices are not aligned')\n        left = self.reindex(columns=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        left = self\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[1] != rvals.shape[0]:\n            raise ValueError(f'Dot product shape mismatch, {lvals.shape} vs {rvals.shape}')\n    if isinstance(other, DataFrame):\n        return self._constructor(np.dot(lvals, rvals), index=left.index, columns=other.columns)\n    elif isinstance(other, Series):\n        return Series(np.dot(lvals, rvals), index=left.index)\n    elif isinstance(rvals, (np.ndarray, Index)):\n        result = np.dot(lvals, rvals)\n        if result.ndim == 2:\n            return self._constructor(result, index=left.index)\n        else:\n            return Series(result, index=left.index)\n    else:\n        raise TypeError(f'unsupported type: {type(other)}')",
                            "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                            "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.T.dot(np.transpose(other)).T",
                            "@classmethod\ndef from_dict(cls, data, orient='columns', dtype=None, columns=None) -> 'DataFrame':\n    \"\"\"\n    Construct DataFrame from dict of array-like or dicts.\n\n    Creates DataFrame object from dictionary by columns or by index\n    allowing dtype specification.\n\n    Parameters\n    ----------\n    data : dict\n        Of the form {field : array-like} or {field : dict}.\n    orient : {'columns', 'index'}, default 'columns'\n        The \"orientation\" of the data. If the keys of the passed dict\n        should be the columns of the resulting DataFrame, pass 'columns'\n        (default). Otherwise if the keys should be rows, pass 'index'.\n    dtype : dtype, default None\n        Data type to force, otherwise infer.\n    columns : list, default None\n        Column labels to use when ``orient='index'``. Raises a ValueError\n        if used with ``orient='columns'``.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.from_records : DataFrame from ndarray (structured\n        dtype), list of tuples, dict, or DataFrame.\n    DataFrame : DataFrame object creation using constructor.\n\n    Examples\n    --------\n    By default the keys of the dict become the DataFrame columns:\n\n    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data)\n       col_1 col_2\n    0      3     a\n    1      2     b\n    2      1     c\n    3      0     d\n\n    Specify ``orient='index'`` to create the DataFrame using dictionary\n    keys as rows:\n\n    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data, orient='index')\n           0  1  2  3\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n\n    When using the 'index' orientation, the column names can be\n    specified manually:\n\n    >>> pd.DataFrame.from_dict(data, orient='index',\n    ...                        columns=['A', 'B', 'C', 'D'])\n           A  B  C  D\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n    \"\"\"\n    index = None\n    orient = orient.lower()\n    if orient == 'index':\n        if len(data) > 0:\n            if isinstance(list(data.values())[0], (Series, dict)):\n                data = _from_nested_dict(data)\n            else:\n                data, index = (list(data.values()), list(data.keys()))\n    elif orient == 'columns':\n        if columns is not None:\n            raise ValueError(\"cannot use columns parameter with orient='columns'\")\n    else:\n        raise ValueError('only recognize index or columns for orient')\n    return cls(data, index=index, columns=columns, dtype=dtype)",
                            "def to_numpy(self, dtype=None, copy=False) -> np.ndarray:\n    \"\"\"\n    Convert the DataFrame to a NumPy array.\n\n    .. versionadded:: 0.24.0\n\n    By default, the dtype of the returned array will be the common NumPy\n    dtype of all types in the DataFrame. For example, if the dtypes are\n    ``float16`` and ``float32``, the results dtype will be ``float32``.\n    This may require copying data and coercing values, which may be\n    expensive.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to pass to :meth:`numpy.asarray`.\n    copy : bool, default False\n        Whether to ensure that the returned value is a not a view on\n        another array. Note that ``copy=False`` does not *ensure* that\n        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n        a copy is made, even if not strictly necessary.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.to_numpy : Similar method for Series.\n\n    Examples\n    --------\n    >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n    array([[1, 3],\n           [2, 4]])\n\n    With heterogeneous data, the lowest common type will have to\n    be used.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n    >>> df.to_numpy()\n    array([[1. , 3. ],\n           [2. , 4.5]])\n\n    For a mix of numeric and non-numeric types, the output array will\n    have object dtype.\n\n    >>> df['C'] = pd.date_range('2000', periods=2)\n    >>> df.to_numpy()\n    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n    \"\"\"\n    result = np.array(self.values, dtype=dtype, copy=copy)\n    return result",
                            "def to_dict(self, orient='dict', into=dict):\n    \"\"\"\n    Convert the DataFrame to a dictionary.\n\n    The type of the key-value pairs can be customized with the parameters\n    (see below).\n\n    Parameters\n    ----------\n    orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n        Determines the type of the values of the dictionary.\n\n        - 'dict' (default) : dict like {column -> {index -> value}}\n        - 'list' : dict like {column -> [values]}\n        - 'series' : dict like {column -> Series(values)}\n        - 'split' : dict like\n          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n        - 'records' : list like\n          [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n\n        Abbreviations are allowed. `s` indicates `series` and `sp`\n        indicates `split`.\n\n    into : class, default dict\n        The collections.abc.Mapping subclass used for all Mappings\n        in the return value.  Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    dict, list or collections.abc.Mapping\n        Return a collections.abc.Mapping object representing the DataFrame.\n        The resulting transformation depends on the `orient` parameter.\n\n    See Also\n    --------\n    DataFrame.from_dict: Create a DataFrame from a dictionary.\n    DataFrame.to_json: Convert a DataFrame to JSON format.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2],\n    ...                    'col2': [0.5, 0.75]},\n    ...                   index=['row1', 'row2'])\n    >>> df\n          col1  col2\n    row1     1  0.50\n    row2     2  0.75\n    >>> df.to_dict()\n    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n    You can specify the return orientation.\n\n    >>> df.to_dict('series')\n    {'col1': row1    1\n             row2    2\n    Name: col1, dtype: int64,\n    'col2': row1    0.50\n            row2    0.75\n    Name: col2, dtype: float64}\n\n    >>> df.to_dict('split')\n    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n     'data': [[1, 0.5], [2, 0.75]]}\n\n    >>> df.to_dict('records')\n    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n    >>> df.to_dict('index')\n    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n    You can also specify the mapping type.\n\n    >>> from collections import OrderedDict, defaultdict\n    >>> df.to_dict(into=OrderedDict)\n    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n    If you want a `defaultdict`, you need to initialize it:\n\n    >>> dd = defaultdict(list)\n    >>> df.to_dict('records', into=dd)\n    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n    \"\"\"\n    if not self.columns.is_unique:\n        warnings.warn('DataFrame columns are not unique, some columns will be omitted.', UserWarning, stacklevel=2)\n    into_c = com.standardize_mapping(into)\n    if orient.lower().startswith('d'):\n        return into_c(((k, v.to_dict(into)) for k, v in self.items()))\n    elif orient.lower().startswith('l'):\n        return into_c(((k, v.tolist()) for k, v in self.items()))\n    elif orient.lower().startswith('sp'):\n        return into_c((('index', self.index.tolist()), ('columns', self.columns.tolist()), ('data', [list(map(com.maybe_box_datetimelike, t)) for t in self.itertuples(index=False, name=None)])))\n    elif orient.lower().startswith('s'):\n        return into_c(((k, com.maybe_box_datetimelike(v)) for k, v in self.items()))\n    elif orient.lower().startswith('r'):\n        columns = self.columns.tolist()\n        rows = (dict(zip(columns, row)) for row in self.itertuples(index=False, name=None))\n        return [into_c(((k, com.maybe_box_datetimelike(v)) for k, v in row.items())) for row in rows]\n    elif orient.lower().startswith('i'):\n        if not self.index.is_unique:\n            raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n        return into_c(((t[0], dict(zip(self.columns, t[1:]))) for t in self.itertuples(name=None)))\n    else:\n        raise ValueError(f\"orient '{orient}' not understood\")",
                            "def to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None) -> None:\n    \"\"\"\n    Write a DataFrame to a Google BigQuery table.\n\n    This function requires the `pandas-gbq package\n    <https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    destination_table : str\n        Name of table to be written, in the form ``dataset.tablename``.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    chunksize : int, optional\n        Number of rows to be inserted in each chunk from the dataframe.\n        Set to ``None`` to load the whole dataframe at once.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    if_exists : str, default 'fail'\n        Behavior when the destination table exists. Value can be one of:\n\n        ``'fail'``\n            If table exists raise pandas_gbq.gbq.TableCreationError.\n        ``'replace'``\n            If table exists, drop it, recreate it, and insert data.\n        ``'append'``\n            If table exists, insert data. Create if does not exist.\n    auth_local_webserver : bool, default False\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n    table_schema : list of dicts, optional\n        List of BigQuery table fields to which according DataFrame\n        columns conform to, e.g. ``[{'name': 'col1', 'type':\n        'STRING'},...]``. If schema is not provided, it will be\n        generated according to dtypes of DataFrame columns. See\n        BigQuery API documentation on available names of a field.\n\n        *New in version 0.3.1 of pandas-gbq*.\n    location : str, optional\n        Location where the load job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of the\n        target dataset.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    progress_bar : bool, default True\n        Use the library `tqdm` to show the progress bar for the upload,\n        chunk by chunk.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to\n        override default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service\n        Account :class:`google.oauth2.service_account.Credentials`\n        directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n\n        .. versionadded:: 0.24.0\n\n    See Also\n    --------\n    pandas_gbq.to_gbq : This function in the pandas-gbq library.\n    read_gbq : Read a DataFrame from Google BigQuery.\n    \"\"\"\n    from pandas.io import gbq\n    gbq.to_gbq(self, destination_table, project_id=project_id, chunksize=chunksize, reauth=reauth, if_exists=if_exists, auth_local_webserver=auth_local_webserver, table_schema=table_schema, location=location, progress_bar=progress_bar, credentials=credentials)",
                            "@classmethod\ndef from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None) -> 'DataFrame':\n    \"\"\"\n    Convert structured or record ndarray to DataFrame.\n\n    Parameters\n    ----------\n    data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n    index : str, list of fields, array-like\n        Field of array to use as the index, alternately a specific set of\n        input labels to use.\n    exclude : sequence, default None\n        Columns or fields to exclude.\n    columns : sequence, default None\n        Column names to use. If the passed data do not have names\n        associated with them, this argument provides names for the\n        columns. Otherwise this argument indicates the order of the columns\n        in the result (any names not found in the data will become all-NA\n        columns).\n    coerce_float : bool, default False\n        Attempt to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    nrows : int, default None\n        Number of rows to read if data is an iterator.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    if columns is not None:\n        columns = ensure_index(columns)\n    if is_iterator(data):\n        if nrows == 0:\n            return cls()\n        try:\n            first_row = next(data)\n        except StopIteration:\n            return cls(index=index, columns=columns)\n        dtype = None\n        if hasattr(first_row, 'dtype') and first_row.dtype.names:\n            dtype = first_row.dtype\n        values = [first_row]\n        if nrows is None:\n            values += data\n        else:\n            values.extend(itertools.islice(data, nrows - 1))\n        if dtype is not None:\n            data = np.array(values, dtype=dtype)\n        else:\n            data = values\n    if isinstance(data, dict):\n        if columns is None:\n            columns = arr_columns = ensure_index(sorted(data))\n            arrays = [data[k] for k in columns]\n        else:\n            arrays = []\n            arr_columns = []\n            for k, v in data.items():\n                if k in columns:\n                    arr_columns.append(k)\n                    arrays.append(v)\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n    elif isinstance(data, (np.ndarray, DataFrame)):\n        arrays, columns = to_arrays(data, columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        arr_columns = columns\n    else:\n        arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n        arr_columns = ensure_index(arr_columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        else:\n            columns = arr_columns\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n    result_index = None\n    if index is not None:\n        if isinstance(index, str) or not hasattr(index, '__iter__'):\n            i = columns.get_loc(index)\n            exclude.add(index)\n            if len(arrays) > 0:\n                result_index = Index(arrays[i], name=index)\n            else:\n                result_index = Index([], name=index)\n        else:\n            try:\n                index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n            except (KeyError, TypeError):\n                result_index = index\n            else:\n                result_index = ensure_index_from_sequences(index_data, names=index)\n                exclude.update(index)\n    if any(exclude):\n        arr_exclude = [x for x in exclude if x in arr_columns]\n        to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n        arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n        arr_columns = arr_columns.drop(arr_exclude)\n        columns = columns.drop(exclude)\n    mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n    return cls(mgr)",
                            "def to_records(self, index=True, column_dtypes=None, index_dtypes=None) -> np.recarray:\n    \"\"\"\n    Convert DataFrame to a NumPy record array.\n\n    Index will be included as the first field of the record array if\n    requested.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include index in resulting record array, stored in 'index'\n        field or using the index label, if set.\n    column_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all columns. If\n        a dictionary, a mapping of column names and indices (zero-indexed)\n        to specific data types.\n    index_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all index levels. If\n        a dictionary, a mapping of index level names and indices\n        (zero-indexed) to specific data types.\n\n        This mapping is applied only if `index=True`.\n\n    Returns\n    -------\n    numpy.recarray\n        NumPy ndarray with the DataFrame labels as fields and each row\n        of the DataFrame as entries.\n\n    See Also\n    --------\n    DataFrame.from_records: Convert structured or record ndarray\n        to DataFrame.\n    numpy.recarray: An ndarray that allows field access using\n        attributes, analogous to typed columns in a\n        spreadsheet.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n    ...                   index=['a', 'b'])\n    >>> df\n       A     B\n    a  1  0.50\n    b  2  0.75\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    If the DataFrame index has no label then the recarray field name\n    is set to 'index'. If the index has a label then this is used as the\n    field name:\n\n    >>> df.index = df.index.rename(\"I\")\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    The index can be excluded from the record array:\n\n    >>> df.to_records(index=False)\n    rec.array([(1, 0.5 ), (2, 0.75)],\n              dtype=[('A', '<i8'), ('B', '<f8')])\n\n    Data types can be specified for the columns:\n\n    >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n    As well as for the index:\n\n    >>> df.to_records(index_dtypes=\"<S2\")\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n    >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n    >>> df.to_records(index_dtypes=index_dtypes)\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n    \"\"\"\n    if index:\n        if isinstance(self.index, ABCMultiIndex):\n            ix_vals = list(map(np.array, zip(*self.index.values)))\n        else:\n            ix_vals = [self.index.values]\n        arrays = ix_vals + [self[c]._internal_get_values() for c in self.columns]\n        count = 0\n        index_names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i, n in enumerate(index_names):\n                if n is None:\n                    index_names[i] = f'level_{count}'\n                    count += 1\n        elif index_names[0] is None:\n            index_names = ['index']\n        names = [str(name) for name in itertools.chain(index_names, self.columns)]\n    else:\n        arrays = [self[c]._internal_get_values() for c in self.columns]\n        names = [str(c) for c in self.columns]\n        index_names = []\n    index_len = len(index_names)\n    formats = []\n    for i, v in enumerate(arrays):\n        index = i\n        if index < index_len:\n            dtype_mapping = index_dtypes\n            name = index_names[index]\n        else:\n            index -= index_len\n            dtype_mapping = column_dtypes\n            name = self.columns[index]\n        if is_dict_like(dtype_mapping):\n            if name in dtype_mapping:\n                dtype_mapping = dtype_mapping[name]\n            elif index in dtype_mapping:\n                dtype_mapping = dtype_mapping[index]\n            else:\n                dtype_mapping = None\n        if dtype_mapping is None:\n            formats.append(v.dtype)\n        elif isinstance(dtype_mapping, (type, np.dtype, str)):\n            formats.append(dtype_mapping)\n        else:\n            element = 'row' if i < index_len else 'column'\n            msg = f'Invalid dtype {dtype_mapping} specified for {element} {name}'\n            raise ValueError(msg)\n    return np.rec.fromarrays(arrays, dtype={'names': names, 'formats': formats})",
                            "@classmethod\ndef _from_arrays(cls, arrays, columns, index, dtype=None) -> 'DataFrame':\n    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n    return cls(mgr)",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_stata(self, path: FilePathOrBuffer, convert_dates: Optional[Dict[Label, str]]=None, write_index: bool=True, byteorder: Optional[str]=None, time_stamp: Optional[datetime.datetime]=None, data_label: Optional[str]=None, variable_labels: Optional[Dict[Label, str]]=None, version: Optional[int]=114, convert_strl: Optional[Sequence[Label]]=None) -> None:\n    \"\"\"\n    Export DataFrame object to Stata dta format.\n\n    Writes the DataFrame to a Stata dataset file.\n    \"dta\" files contain a Stata dataset.\n\n    Parameters\n    ----------\n    path : str, buffer or path object\n        String, path object (pathlib.Path or py._path.local.LocalPath) or\n        object implementing a binary write() function. If using a buffer\n        then the buffer will not be automatically closed after the file\n        data has been written.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    convert_dates : dict\n        Dictionary mapping columns containing datetime types to stata\n        internal format to use when writing the dates. Options are 'tc',\n        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n        or a name. Datetime columns that do not have a conversion type\n        specified will be converted to 'tc'. Raises NotImplementedError if\n        a datetime column has timezone information.\n    write_index : bool\n        Write the index to Stata dataset.\n    byteorder : str\n        Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n    time_stamp : datetime\n        A datetime to use as file creation date.  Default is the current\n        time.\n    data_label : str, optional\n        A label for the data set.  Must be 80 characters or smaller.\n    variable_labels : dict\n        Dictionary containing columns as keys and variable labels as\n        values. Each label must be 80 characters or smaller.\n    version : {114, 117, 118, 119, None}, default 114\n        Version to use in the output dta file. Set to None to let pandas\n        decide between 118 or 119 formats depending on the number of\n        columns in the frame. Version 114 can be read by Stata 10 and\n        later. Version 117 can be read by Stata 13 or later. Version 118\n        is supported in Stata 14 and later. Version 119 is supported in\n        Stata 15 and later. Version 114 limits string variables to 244\n        characters or fewer while versions 117 and later allow strings\n        with lengths up to 2,000,000 characters. Versions 118 and 119\n        support Unicode characters, and version 119 supports more than\n        32,767 variables.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Added support for formats 118 and 119.\n\n    convert_strl : list, optional\n        List of column names to convert to string columns to Stata StrL\n        format. Only available if version is 117.  Storing strings in the\n        StrL format can produce smaller dta files if strings have more than\n        8 characters and values are repeated.\n\n        .. versionadded:: 0.23.0\n\n    Raises\n    ------\n    NotImplementedError\n        * If datetimes contain timezone information\n        * Column dtype is not representable in Stata\n    ValueError\n        * Columns listed in convert_dates are neither datetime64[ns]\n          or datetime.datetime\n        * Column listed in convert_dates is not in DataFrame\n        * Categorical label contains more than 32,000 characters\n\n    See Also\n    --------\n    read_stata : Import Stata data files.\n    io.stata.StataWriter : Low-level writer for Stata data files.\n    io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n    ...                               'parrot'],\n    ...                    'speed': [350, 18, 361, 15]})\n    >>> df.to_stata('animals.dta')  # doctest: +SKIP\n    \"\"\"\n    if version not in (114, 117, 118, 119, None):\n        raise ValueError('Only formats 114, 117, 118 and 119 are supported.')\n    if version == 114:\n        if convert_strl is not None:\n            raise ValueError('strl is not supported in format 114')\n        from pandas.io.stata import StataWriter as statawriter\n    elif version == 117:\n        from pandas.io.stata import StataWriter117 as statawriter\n    else:\n        from pandas.io.stata import StataWriterUTF8 as statawriter\n    kwargs: Dict[str, Any] = {}\n    if version is None or version >= 117:\n        kwargs['convert_strl'] = convert_strl\n    if version is None or version >= 118:\n        kwargs['version'] = version\n    writer = statawriter(path, self, convert_dates=convert_dates, byteorder=byteorder, time_stamp=time_stamp, data_label=data_label, write_index=write_index, variable_labels=variable_labels, **kwargs)\n    writer.write_file()",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_feather(self, path) -> None:\n    \"\"\"\n    Write out the binary feather-format for DataFrames.\n\n    Parameters\n    ----------\n    path : str\n        String file path.\n    \"\"\"\n    from pandas.io.feather_format import to_feather\n    to_feather(self, path)",
                            "@Appender('\\n        Examples\\n        --------\\n        >>> df = pd.DataFrame(\\n        ...     data={\"animal_1\": [\"elk\", \"pig\"], \"animal_2\": [\"dog\", \"quetzal\"]}\\n        ... )\\n        >>> print(df.to_markdown())\\n        |    | animal_1   | animal_2   |\\n        |---:|:-----------|:-----------|\\n        |  0 | elk        | dog        |\\n        |  1 | pig        | quetzal    |\\n        ')\n@Substitution(klass='DataFrame')\n@Appender(_shared_docs['to_markdown'])\ndef to_markdown(self, buf: Optional[IO[str]]=None, mode: Optional[str]=None, **kwargs) -> Optional[str]:\n    kwargs.setdefault('headers', 'keys')\n    kwargs.setdefault('tablefmt', 'pipe')\n    tabulate = import_optional_dependency('tabulate')\n    result = tabulate.tabulate(self, **kwargs)\n    if buf is None:\n        return result\n    buf, _, _, _ = get_filepath_or_buffer(buf, mode=mode)\n    assert buf is not None\n    buf.writelines(result)\n    return None",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs) -> None:\n    \"\"\"\n    Write a DataFrame to the binary parquet format.\n\n    .. versionadded:: 0.21.0\n\n    This function writes the dataframe as a `parquet file\n    <https://parquet.apache.org/>`_. You can choose different parquet\n    backends, and have the option of compression. See\n    :ref:`the user guide <io.parquet>` for more details.\n\n    Parameters\n    ----------\n    path : str\n        File path or Root Directory path. Will be used as Root Directory\n        path while writing a partitioned dataset.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n        Parquet library to use. If 'auto', then the option\n        ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n        behavior is to try 'pyarrow', falling back to 'fastparquet' if\n        'pyarrow' is unavailable.\n    compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n        Name of the compression to use. Use ``None`` for no compression.\n    index : bool, default None\n        If ``True``, include the dataframe's index(es) in the file output.\n        If ``False``, they will not be written to the file.\n        If ``None``, similar to ``True`` the dataframe's index(es)\n        will be saved. However, instead of being saved as values,\n        the RangeIndex will be stored as a range in the metadata so it\n        doesn't require much space and is faster. Other indexes will\n        be included as columns in the file output.\n\n        .. versionadded:: 0.24.0\n\n    partition_cols : list, optional, default None\n        Column names by which to partition the dataset.\n        Columns are partitioned in the order they are given.\n\n        .. versionadded:: 0.24.0\n\n    **kwargs\n        Additional arguments passed to the parquet library. See\n        :ref:`pandas io <io.parquet>` for more details.\n\n    See Also\n    --------\n    read_parquet : Read a parquet file.\n    DataFrame.to_csv : Write a csv file.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_hdf : Write to hdf.\n\n    Notes\n    -----\n    This function requires either the `fastparquet\n    <https://pypi.org/project/fastparquet>`_ or `pyarrow\n    <https://arrow.apache.org/docs/python/>`_ library.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.to_parquet('df.parquet.gzip',\n    ...               compression='gzip')  # doctest: +SKIP\n    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n       col1  col2\n    0     1     3\n    1     2     4\n    \"\"\"\n    from pandas.io.parquet import to_parquet\n    to_parquet(self, path, engine, compression=compression, index=index, partition_cols=partition_cols, **kwargs)",
                            "@Substitution(header_type='bool', header='Whether to print column labels, default True', col_space_type='str or int', col_space='The minimum width of each column in CSS length units.  An int is assumed to be px units.\\n\\n            .. versionadded:: 0.25.0\\n                Ability to use str')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None):\n    \"\"\"\n    Render a DataFrame as an HTML table.\n    %(shared_params)s\n    bold_rows : bool, default True\n        Make the row labels bold in the output.\n    classes : str or list or tuple, default None\n        CSS class(es) to apply to the resulting html table.\n    escape : bool, default True\n        Convert the characters <, >, and & to HTML-safe sequences.\n    notebook : {True, False}, default False\n        Whether the generated HTML is for IPython Notebook.\n    border : int\n        A ``border=border`` attribute is included in the opening\n        `<table>` tag. Default ``pd.options.display.html.border``.\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n\n    table_id : str, optional\n        A css id is included in the opening `<table>` tag if specified.\n\n        .. versionadded:: 0.23.0\n\n    render_links : bool, default False\n        Convert URLs to HTML links.\n\n        .. versionadded:: 0.24.0\n    %(returns)s\n    See Also\n    --------\n    to_string : Convert DataFrame to a string.\n    \"\"\"\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError('Invalid value for justify parameter')\n    formatter = fmt.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, bold_rows=bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, table_id=table_id, render_links=render_links)\n    return formatter.to_html(buf=buf, classes=classes, notebook=notebook, border=border, encoding=encoding)",
                            "@Appender(info.__doc__)\ndef info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None) -> None:\n    return info(self, verbose, buf, max_cols, memory_usage, null_counts)",
                            "def memory_usage(self, index=True, deep=False) -> Series:\n    \"\"\"\n    Return the memory usage of each column in bytes.\n\n    The memory usage can optionally include the contribution of\n    the index and elements of `object` dtype.\n\n    This value is displayed in `DataFrame.info` by default. This can be\n    suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the DataFrame's\n        index in returned Series. If ``index=True``, the memory usage of\n        the index is the first item in the output.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned values.\n\n    Returns\n    -------\n    Series\n        A Series whose index is the original column names and whose values\n        is the memory usage of each column in bytes.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n        ndarray.\n    Series.memory_usage : Bytes consumed by a Series.\n    Categorical : Memory-efficient array for string values with\n        many repeated values.\n    DataFrame.info : Concise summary of a DataFrame.\n\n    Examples\n    --------\n    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n    >>> data = dict([(t, np.ones(shape=5000).astype(t))\n    ...              for t in dtypes])\n    >>> df = pd.DataFrame(data)\n    >>> df.head()\n       int64  float64            complex128  object  bool\n    0      1      1.0    1.000000+0.000000j       1  True\n    1      1      1.0    1.000000+0.000000j       1  True\n    2      1      1.0    1.000000+0.000000j       1  True\n    3      1      1.0    1.000000+0.000000j       1  True\n    4      1      1.0    1.000000+0.000000j       1  True\n\n    >>> df.memory_usage()\n    Index           128\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    >>> df.memory_usage(index=False)\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    The memory footprint of `object` dtype columns is ignored by default:\n\n    >>> df.memory_usage(deep=True)\n    Index            128\n    int64          40000\n    float64        40000\n    complex128     80000\n    object        160000\n    bool            5000\n    dtype: int64\n\n    Use a Categorical for efficient storage of an object-dtype column with\n    many repeated values.\n\n    >>> df['object'].astype('category').memory_usage(deep=True)\n    5216\n    \"\"\"\n    result = Series([c.memory_usage(index=False, deep=deep) for col, c in self.items()], index=self.columns)\n    if index:\n        result = Series(self.index.memory_usage(deep=deep), index=['Index']).append(result)\n    return result",
                            "def transpose(self, *args, copy: bool=False) -> 'DataFrame':\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args : tuple, optional\n        Accepted for compatibility with NumPy.\n    copy : bool, default False\n        Whether to copy the data after transposing, even for DataFrames\n        with a single dtype.\n\n        Note that a copy is always required for mixed dtype DataFrames,\n        or for DataFrames with any extension types.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    dtypes = list(self.dtypes)\n    if self._is_homogeneous_type and dtypes and is_extension_array_dtype(dtypes[0]):\n        dtype = dtypes[0]\n        arr_type = dtype.construct_array_type()\n        values = self.values\n        new_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]\n        result = self._constructor(dict(zip(self.index, new_values)), index=self.columns)\n    else:\n        new_values = self.values.T\n        if copy:\n            new_values = new_values.copy()\n        result = self._constructor(new_values, index=self.columns, columns=self.index)\n    return result.__finalize__(self)",
                            "def _ixs(self, i: int, axis: int=0):\n    \"\"\"\n    Parameters\n    ----------\n    i : int\n    axis : int\n\n    Notes\n    -----\n    If slice passed, the resulting data will be a view.\n    \"\"\"\n    if axis == 0:\n        new_values = self._data.fast_xs(i)\n        copy = isinstance(new_values, np.ndarray) and new_values.base is None\n        result = self._constructor_sliced(new_values, index=self.columns, name=self.index[i], dtype=new_values.dtype)\n        result._set_is_copy(self, copy=copy)\n        return result\n    else:\n        label = self.columns[i]\n        values = self._data.iget(i)\n        result = self._box_col_values(values, label)\n        result._set_as_cached(label, self)\n        return result",
                            "def __getitem__(self, key):\n    key = lib.item_from_zerodim(key)\n    key = com.apply_if_callable(key, self)\n    if is_hashable(key):\n        if self.columns.is_unique and key in self.columns:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            return self._get_item_cache(key)\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        return self._slice(indexer, axis=0)\n    if isinstance(key, DataFrame):\n        return self.where(key)\n    if com.is_bool_indexer(key):\n        return self._getitem_bool_array(key)\n    is_single_key = isinstance(key, tuple) or not is_list_like(key)\n    if is_single_key:\n        if self.columns.nlevels > 1:\n            return self._getitem_multilevel(key)\n        indexer = self.columns.get_loc(key)\n        if is_integer(indexer):\n            indexer = [indexer]\n    else:\n        if is_iterator(key):\n            key = list(key)\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n    if getattr(indexer, 'dtype', None) == bool:\n        indexer = np.where(indexer)[0]\n    data = self._take_with_is_copy(indexer, axis=1)\n    if is_single_key:\n        if data.shape[1] == 1 and (not isinstance(self.columns, ABCMultiIndex)):\n            data = data[key]\n    return data",
                            "def _getitem_bool_array(self, key):\n    if isinstance(key, Series) and (not key.index.equals(self.index)):\n        warnings.warn('Boolean Series key will be reindexed to match DataFrame index.', UserWarning, stacklevel=3)\n    elif len(key) != len(self.index):\n        raise ValueError(f'Item wrong length {len(key)} instead of {len(self.index)}.')\n    key = check_bool_indexer(self.index, key)\n    indexer = key.nonzero()[0]\n    return self._take_with_is_copy(indexer, axis=0)",
                            "def _getitem_multilevel(self, key):\n    loc = self.columns.get_loc(key)\n    if isinstance(loc, (slice, Series, np.ndarray, Index)):\n        new_columns = self.columns[loc]\n        result_columns = maybe_droplevels(new_columns, key)\n        if self._is_mixed_type:\n            result = self.reindex(columns=new_columns)\n            result.columns = result_columns\n        else:\n            new_values = self.values[:, loc]\n            result = self._constructor(new_values, index=self.index, columns=result_columns)\n            result = result.__finalize__(self)\n        if len(result.columns) == 1:\n            top = result.columns[0]\n            if isinstance(top, tuple):\n                top = top[0]\n            if top == '':\n                result = result['']\n                if isinstance(result, Series):\n                    result = self._constructor_sliced(result, index=self.index, name=key)\n        result._set_is_copy(self)\n        return result\n    else:\n        return self._get_item_cache(key)",
                            "def _get_value(self, index, col, takeable: bool=False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n    try:\n        loc = engine.get_loc(index)\n        return series._values[loc]\n    except KeyError:\n        if self.index.nlevels > 1:\n            raise\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)",
                            "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        return self._setitem_slice(indexer, value)\n    if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n        self._setitem_frame(key, value)\n    elif isinstance(key, (Series, np.ndarray, list, Index)):\n        self._setitem_array(key, value)\n    else:\n        self._set_item(key, value)",
                            "def _setitem_slice(self, key: slice, value):\n    self._check_setitem_copy()\n    self.iloc._setitem_with_indexer(key, value)",
                            "def _setitem_array(self, key, value):\n    if com.is_bool_indexer(key):\n        if len(key) != len(self.index):\n            raise ValueError(f'Item wrong length {len(key)} instead of {len(self.index)}!')\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        self._check_setitem_copy()\n        self.iloc._setitem_with_indexer(indexer, value)\n    elif isinstance(value, DataFrame):\n        if len(value.columns) != len(key):\n            raise ValueError('Columns must be same length as key')\n        for k1, k2 in zip(key, value.columns):\n            self[k1] = value[k2]\n    else:\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=False)[1]\n        self._check_setitem_copy()\n        self.iloc._setitem_with_indexer((slice(None), indexer), value)",
                            "def _setitem_frame(self, key, value):\n    if isinstance(key, np.ndarray):\n        if key.shape != self.shape:\n            raise ValueError('Array conditional must be same shape as self')\n        key = self._constructor(key, **self._construct_axes_dict())\n    if key.values.size and (not is_bool_dtype(key.values)):\n        raise TypeError('Must pass DataFrame or 2-d ndarray with boolean values only')\n    self._check_inplace_setting(value)\n    self._check_setitem_copy()\n    self._where(-key, value, inplace=True)",
                            "def _set_item(self, key, value):\n    \"\"\"\n    Add series to DataFrame in specified column.\n\n    If series is a numpy-array (not a Series/TimeSeries), it must be the\n    same length as the DataFrames index or an error will be thrown.\n\n    Series/TimeSeries will be conformed to the DataFrames index to\n    ensure homogeneity.\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(key, value)\n    NDFrame._set_item(self, key, value)\n    if len(self):\n        self._check_setitem_copy()",
                            "def _set_value(self, index, col, value, takeable: bool=False):\n    \"\"\"\n    Put single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    value : scalar\n    takeable : interpret the index/col as indexers, default False\n    \"\"\"\n    try:\n        if takeable is True:\n            series = self._iget_item_cache(col)\n            series._set_value(index, value, takeable=True)\n            return\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        loc = engine.get_loc(index)\n        validate_numeric_casting(series.dtype, value)\n        series._values[loc] = value\n    except (KeyError, TypeError):\n        if takeable:\n            self.iloc[index, col] = value\n        else:\n            self.loc[index, col] = value\n        self._item_cache.pop(col, None)",
                            "def _ensure_valid_index(self, value):\n    \"\"\"\n    Ensure that if we don't have an index, that we can create one from the\n    passed value.\n    \"\"\"\n    if not len(self.index) and is_list_like(value) and len(value):\n        try:\n            value = Series(value)\n        except (ValueError, NotImplementedError, TypeError):\n            raise ValueError('Cannot set a frame with no defined index and a value that cannot be converted to a Series')\n        self._data = self._data.reindex_axis(value.index.copy(), axis=1, fill_value=np.nan)",
                            "def _box_item_values(self, key, values):\n    items = self.columns[self.columns.get_loc(key)]\n    if values.ndim == 2:\n        return self._constructor(values.T, columns=items, index=self.index)\n    else:\n        return self._box_col_values(values, items)",
                            "def _box_col_values(self, values, items):\n    \"\"\"\n    Provide boxed values for a column.\n    \"\"\"\n    klass = self._constructor_sliced\n    return klass(values, index=self.index, name=items, fastpath=True)",
                            "def query(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Query the columns of a DataFrame with a boolean expression.\n\n    Parameters\n    ----------\n    expr : str\n        The query string to evaluate.\n\n        You can refer to variables\n        in the environment by prefixing them with an '@' character like\n        ``@a + b``.\n\n        You can refer to column names that contain spaces or operators by\n        surrounding them in backticks. This way you can also escape\n        names that start with a digit, or those that  are a Python keyword.\n        Basically when it is not valid Python identifier. See notes down\n        for more details.\n\n        For example, if one of your columns is called ``a a`` and you want\n        to sum it with ``b``, your query should be ```a a` + b``.\n\n        .. versionadded:: 0.25.0\n            Backtick quoting introduced.\n\n        .. versionadded:: 1.0.0\n            Expanding functionality of backtick quoting for more than only spaces.\n\n    inplace : bool\n        Whether the query should modify the data in place or return\n        a modified copy.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame resulting from the provided query expression.\n\n    See Also\n    --------\n    eval : Evaluate a string describing operations on\n        DataFrame columns.\n    DataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\n    Notes\n    -----\n    The result of the evaluation of this expression is first passed to\n    :attr:`DataFrame.loc` and if that fails because of a\n    multidimensional key (e.g., a DataFrame) then the result will be passed\n    to :meth:`DataFrame.__getitem__`.\n\n    This method uses the top-level :func:`eval` function to\n    evaluate the passed query.\n\n    The :meth:`~pandas.DataFrame.query` method uses a slightly\n    modified Python syntax by default. For example, the ``&`` and ``|``\n    (bitwise) operators have the precedence of their boolean cousins,\n    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n    however the semantics are different.\n\n    You can change the semantics of the expression by passing the keyword\n    argument ``parser='python'``. This enforces the same semantics as\n    evaluation in Python space. Likewise, you can pass ``engine='python'``\n    to evaluate an expression using Python itself as a backend. This is not\n    recommended as it is inefficient compared to using ``numexpr`` as the\n    engine.\n\n    The :attr:`DataFrame.index` and\n    :attr:`DataFrame.columns` attributes of the\n    :class:`~pandas.DataFrame` instance are placed in the query namespace\n    by default, which allows you to treat both the index and columns of the\n    frame as a column in the frame.\n    The identifier ``index`` is used for the frame index; you can also\n    use the name of the index to identify it in a query. Please note that\n    Python keywords may not be used as identifiers.\n\n    For further details and examples see the ``query`` documentation in\n    :ref:`indexing <indexing.query>`.\n\n    *Backtick quoted variables*\n\n    Backtick quoted variables are parsed as literal Python code and\n    are converted internally to a Python valid identifier.\n    This can lead to the following problems.\n\n    During parsing a number of disallowed characters inside the backtick\n    quoted string are replaced by strings that are allowed as a Python identifier.\n    These characters include all operators in Python, the space character, the\n    question mark, the exclamation mark, the dollar sign, and the euro sign.\n    For other characters that fall outside the ASCII range (U+0001..U+007F)\n    and those that are not further specified in PEP 3131,\n    the query parser will raise an error.\n    This excludes whitespace different than the space character,\n    but also the hashtag (as it is used for comments) and the backtick\n    itself (backtick can also not be escaped).\n\n    In a special case, quotes that make a pair around a backtick can\n    confuse the parser.\n    For example, ```it's` > `that's``` will raise an error,\n    as it forms a quoted string (``'s > `that'``) with a backtick inside.\n\n    See also the Python documentation about lexical analysis\n    (https://docs.python.org/3/reference/lexical_analysis.html)\n    in combination with the source code in :mod:`pandas.core.computation.parsing`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6),\n    ...                    'B': range(10, 0, -2),\n    ...                    'C C': range(10, 5, -1)})\n    >>> df\n       A   B  C C\n    0  1  10   10\n    1  2   8    9\n    2  3   6    8\n    3  4   4    7\n    4  5   2    6\n    >>> df.query('A > B')\n       A  B  C C\n    4  5  2    6\n\n    The previous expression is equivalent to\n\n    >>> df[df.A > df.B]\n       A  B  C C\n    4  5  2    6\n\n    For columns with spaces in their name, you can use backtick quoting.\n\n    >>> df.query('B == `C C`')\n       A   B  C C\n    0  1  10   10\n\n    The previous expression is equivalent to\n\n    >>> df[df.B == df['C C']]\n       A   B  C C\n    0  1  10   10\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(expr, str):\n        msg = f'expr must be a string to be evaluated, {type(expr)} given'\n        raise ValueError(msg)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    kwargs['target'] = None\n    res = self.eval(expr, **kwargs)\n    try:\n        new_data = self.loc[res]\n    except ValueError:\n        new_data = self[res]\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return new_data",
                            "def eval(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Evaluate a string describing operations on DataFrame columns.\n\n    Operates on columns only, not specific rows or elements.  This allows\n    `eval` to run arbitrary code, which can make you vulnerable to code\n    injection if you pass user input to this function.\n\n    Parameters\n    ----------\n    expr : str\n        The expression string to evaluate.\n    inplace : bool, default False\n        If the expression contains an assignment, whether to perform the\n        operation inplace and mutate the existing DataFrame. Otherwise,\n        a new DataFrame is returned.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by\n        :meth:`~pandas.DataFrame.query`.\n\n    Returns\n    -------\n    ndarray, scalar, or pandas object\n        The result of the evaluation.\n\n    See Also\n    --------\n    DataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\n    DataFrame.assign : Can evaluate an expression or function to create new\n        values for a column.\n    eval : Evaluate a Python expression as a string using various\n        backends.\n\n    Notes\n    -----\n    For more details see the API documentation for :func:`~eval`.\n    For detailed examples see :ref:`enhancing performance with eval\n    <enhancingperf.eval>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n    >>> df.eval('A + B')\n    0    11\n    1    10\n    2     9\n    3     8\n    4     7\n    dtype: int64\n\n    Assignment is allowed though by default the original DataFrame is not\n    modified.\n\n    >>> df.eval('C = A + B')\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n\n    Use ``inplace=True`` to modify the original DataFrame.\n\n    >>> df.eval('C = A + B', inplace=True)\n    >>> df\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n\n    Multiple columns can be assigned to using multi-line expressions:\n\n    >>> df.eval(\n    ...     '''\n    ... C = A + B\n    ... D = A - B\n    ... '''\n    ... )\n       A   B   C  D\n    0  1  10  11 -9\n    1  2   8  10 -6\n    2  3   6   9 -3\n    3  4   4   8  0\n    4  5   2   7  3\n    \"\"\"\n    from pandas.core.computation.eval import eval as _eval\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    resolvers = kwargs.pop('resolvers', None)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_cleaned_column_resolvers()\n        resolvers = (column_resolvers, index_resolvers)\n    if 'target' not in kwargs:\n        kwargs['target'] = self\n    kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n    return _eval(expr, inplace=inplace, **kwargs)",
                            "def select_dtypes(self, include=None, exclude=None) -> 'DataFrame':\n    \"\"\"\n    Return a subset of the DataFrame's columns based on the column dtypes.\n\n    Parameters\n    ----------\n    include, exclude : scalar or list-like\n        A selection of dtypes or strings to be included/excluded. At least\n        one of these parameters must be supplied.\n\n    Returns\n    -------\n    DataFrame\n        The subset of the frame including the dtypes in ``include`` and\n        excluding the dtypes in ``exclude``.\n\n    Raises\n    ------\n    ValueError\n        * If both of ``include`` and ``exclude`` are empty\n        * If ``include`` and ``exclude`` have overlapping elements\n        * If any kind of string dtype is passed in.\n\n    Notes\n    -----\n    * To select all *numeric* types, use ``np.number`` or ``'number'``\n    * To select strings you must use the ``object`` dtype, but note that\n      this will return *all* object dtype columns\n    * See the `numpy dtype hierarchy\n      <https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n      ``'datetime64'``\n    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n      ``'timedelta64'``\n    * To select Pandas categorical dtypes, use ``'category'``\n    * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n      0.20.0) or ``'datetime64[ns, tz]'``\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'a': [1, 2] * 3,\n    ...                    'b': [True, False] * 3,\n    ...                    'c': [1.0, 2.0] * 3})\n    >>> df\n            a      b  c\n    0       1   True  1.0\n    1       2  False  2.0\n    2       1   True  1.0\n    3       2  False  2.0\n    4       1   True  1.0\n    5       2  False  2.0\n\n    >>> df.select_dtypes(include='bool')\n       b\n    0  True\n    1  False\n    2  True\n    3  False\n    4  True\n    5  False\n\n    >>> df.select_dtypes(include=['float64'])\n       c\n    0  1.0\n    1  2.0\n    2  1.0\n    3  2.0\n    4  1.0\n    5  2.0\n\n    >>> df.select_dtypes(exclude=['int'])\n           b    c\n    0   True  1.0\n    1  False  2.0\n    2   True  1.0\n    3  False  2.0\n    4   True  1.0\n    5  False  2.0\n    \"\"\"\n    if not is_list_like(include):\n        include = (include,) if include is not None else ()\n    if not is_list_like(exclude):\n        exclude = (exclude,) if exclude is not None else ()\n    selection = (frozenset(include), frozenset(exclude))\n    if not any(selection):\n        raise ValueError('at least one of include or exclude must be nonempty')\n    include = frozenset((infer_dtype_from_object(x) for x in include))\n    exclude = frozenset((infer_dtype_from_object(x) for x in exclude))\n    for dtypes in (include, exclude):\n        invalidate_string_dtypes(dtypes)\n    if not include.isdisjoint(exclude):\n        raise ValueError(f'include and exclude overlap on {include & exclude}')\n    keep_these = np.full(self.shape[1], True)\n\n    def extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]:\n        extracted_dtypes = [unique_dtype for unique_dtype in unique_dtypes if issubclass(unique_dtype.type, tuple(dtypes_set))]\n        return extracted_dtypes\n    unique_dtypes = self.dtypes.unique()\n    if include:\n        included_dtypes = extract_unique_dtypes_from_dtypes_set(include, unique_dtypes)\n        keep_these &= self.dtypes.isin(included_dtypes)\n    if exclude:\n        excluded_dtypes = extract_unique_dtypes_from_dtypes_set(exclude, unique_dtypes)\n        keep_these &= ~self.dtypes.isin(excluded_dtypes)\n    return self.iloc[:, keep_these.values]",
                            "def insert(self, loc, column, value, allow_duplicates=False) -> None:\n    \"\"\"\n    Insert column into DataFrame at specified location.\n\n    Raises a ValueError if `column` is already contained in the DataFrame,\n    unless `allow_duplicates` is set to True.\n\n    Parameters\n    ----------\n    loc : int\n        Insertion index. Must verify 0 <= loc <= len(columns).\n    column : str, number, or hashable object\n        Label of the inserted column.\n    value : int, Series, or array-like\n    allow_duplicates : bool, optional\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(column, value, broadcast=False)\n    self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
                            "def assign(self, **kwargs) -> 'DataFrame':\n    \"\"\"\n    Assign new columns to a DataFrame.\n\n    Returns a new object with all original columns in addition to new ones.\n    Existing columns that are re-assigned will be overwritten.\n\n    Parameters\n    ----------\n    **kwargs : dict of {str: callable or Series}\n        The column names are keywords. If the values are\n        callable, they are computed on the DataFrame and\n        assigned to the new columns. The callable must not\n        change input DataFrame (though pandas doesn't check it).\n        If the values are not callable, (e.g. a Series, scalar, or array),\n        they are simply assigned.\n\n    Returns\n    -------\n    DataFrame\n        A new DataFrame with the new columns in addition to\n        all the existing columns.\n\n    Notes\n    -----\n    Assigning multiple columns within the same ``assign`` is possible.\n    Later items in '\\\\*\\\\*kwargs' may refer to newly created or modified\n    columns in 'df'; items are computed and assigned into 'df' in order.\n\n    .. versionchanged:: 0.23.0\n\n       Keyword argument order is maintained.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n    ...                   index=['Portland', 'Berkeley'])\n    >>> df\n              temp_c\n    Portland    17.0\n    Berkeley    25.0\n\n    Where the value is a callable, evaluated on `df`:\n\n    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    Alternatively, the same behavior can be achieved by directly\n    referencing an existing Series or sequence:\n\n    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    You can create multiple columns within the same assign where one\n    of the columns depends on another one defined within the same assign:\n\n    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n    ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n              temp_c  temp_f  temp_k\n    Portland    17.0    62.6  290.15\n    Berkeley    25.0    77.0  298.15\n    \"\"\"\n    data = self.copy()\n    for k, v in kwargs.items():\n        data[k] = com.apply_if_callable(v, data)\n    return data",
                            "def _sanitize_column(self, key, value, broadcast=True):\n    \"\"\"\n    Ensures new columns (which go into the BlockManager as new blocks) are\n    always copied and converted into an array.\n\n    Parameters\n    ----------\n    key : object\n    value : scalar, Series, or array-like\n    broadcast : bool, default True\n        If ``key`` matches multiple duplicate column names in the\n        DataFrame, this parameter indicates whether ``value`` should be\n        tiled so that the returned array contains a (duplicated) column for\n        each occurrence of the key. If False, ``value`` will not be tiled.\n\n    Returns\n    -------\n    numpy.ndarray\n    \"\"\"\n\n    def reindexer(value):\n        if value.index.equals(self.index) or not len(self.index):\n            value = value._values.copy()\n        else:\n            try:\n                value = value.reindex(self.index)._values\n            except ValueError as err:\n                if not value.index.is_unique:\n                    raise err\n                raise TypeError('incompatible index of inserted column with frame index')\n        return value\n    if isinstance(value, Series):\n        value = reindexer(value)\n    elif isinstance(value, DataFrame):\n        if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n            loc = self.columns.get_loc(key)\n            if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                cols = maybe_droplevels(self.columns[loc], key)\n                if len(cols) and (not cols.equals(value.columns)):\n                    value = value.reindex(cols, axis=1)\n        value = reindexer(value).T\n    elif isinstance(value, ExtensionArray):\n        value = value.copy()\n        value = sanitize_index(value, self.index)\n    elif isinstance(value, Index) or is_sequence(value):\n        value = sanitize_index(value, self.index)\n        if not isinstance(value, (np.ndarray, Index)):\n            if isinstance(value, list) and len(value) > 0:\n                value = maybe_convert_platform(value)\n            else:\n                value = com.asarray_tuplesafe(value)\n        elif value.ndim == 2:\n            value = value.copy().T\n        elif isinstance(value, Index):\n            value = value.copy(deep=True)\n        else:\n            value = value.copy()\n        if is_object_dtype(value.dtype):\n            value = maybe_infer_to_datetimelike(value)\n    else:\n        infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n        value = cast_scalar_to_array(len(self.index), value)\n        value = maybe_cast_to_datetime(value, infer_dtype)\n    if is_extension_array_dtype(value):\n        return value\n    if broadcast and key in self.columns and (value.ndim == 1):\n        if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n            existing_piece = self[key]\n            if isinstance(existing_piece, DataFrame):\n                value = np.tile(value, (len(existing_piece.columns), 1))\n    return np.atleast_2d(np.asarray(value))",
                            "@property\ndef _series(self):\n    return {item: Series(self._data.iget(idx), index=self.index, name=item) for idx, item in enumerate(self.columns)}",
                            "def lookup(self, row_labels, col_labels) -> np.ndarray:\n    \"\"\"\n    Label-based \"fancy indexing\" function for DataFrame.\n\n    Given equal-length arrays of row and column labels, return an\n    array of the values corresponding to each (row, col) pair.\n\n    Parameters\n    ----------\n    row_labels : sequence\n        The row labels to use for lookup.\n    col_labels : sequence\n        The column labels to use for lookup.\n\n    Returns\n    -------\n    numpy.ndarray\n        The found values.\n    \"\"\"\n    n = len(row_labels)\n    if n != len(col_labels):\n        raise ValueError('Row labels must have same size as column labels')\n    thresh = 1000\n    if not self._is_mixed_type or n > thresh:\n        values = self.values\n        ridx = self.index.get_indexer(row_labels)\n        cidx = self.columns.get_indexer(col_labels)\n        if (ridx == -1).any():\n            raise KeyError('One or more row labels was not found')\n        if (cidx == -1).any():\n            raise KeyError('One or more column labels was not found')\n        flat_index = ridx * len(self.columns) + cidx\n        result = values.flat[flat_index]\n    else:\n        result = np.empty(n, dtype='O')\n        for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n            result[i] = self._get_value(r, c)\n    if is_object_dtype(result):\n        result = lib.maybe_convert_objects(result)\n    return result",
                            "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    frame = self\n    columns = axes['columns']\n    if columns is not None:\n        frame = frame._reindex_columns(columns, method, copy, level, fill_value, limit, tolerance)\n    index = axes['index']\n    if index is not None:\n        frame = frame._reindex_index(index, method, copy, level, fill_value, limit, tolerance)\n    return frame",
                            "def _reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None):\n    new_index, indexer = self.index.reindex(new_index, method=method, level=level, limit=limit, tolerance=tolerance)\n    return self._reindex_with_indexers({0: [new_index, indexer]}, copy=copy, fill_value=fill_value, allow_dups=False)",
                            "def _reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None):\n    new_columns, indexer = self.columns.reindex(new_columns, method=method, level=level, limit=limit, tolerance=tolerance)\n    return self._reindex_with_indexers({1: [new_columns, indexer]}, copy=copy, fill_value=fill_value, allow_dups=False)",
                            "def _reindex_multi(self, axes, copy, fill_value) -> 'DataFrame':\n    \"\"\"\n    We are guaranteed non-Nones in the axes.\n    \"\"\"\n    new_index, row_indexer = self.index.reindex(axes['index'])\n    new_columns, col_indexer = self.columns.reindex(axes['columns'])\n    if row_indexer is not None and col_indexer is not None:\n        indexer = (row_indexer, col_indexer)\n        new_values = algorithms.take_2d_multi(self.values, indexer, fill_value=fill_value)\n        return self._constructor(new_values, index=new_index, columns=new_columns)\n    else:\n        return self._reindex_with_indexers({0: [new_index, row_indexer], 1: [new_columns, col_indexer]}, copy=copy, fill_value=fill_value)",
                            "@Appender(_shared_docs['align'] % _shared_doc_kwargs)\ndef align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None) -> 'DataFrame':\n    return super().align(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)",
                            "@Appender('\\n        Examples\\n        --------\\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\\n\\n        Change the row labels.\\n\\n        >>> df.set_axis([\\'a\\', \\'b\\', \\'c\\'], axis=\\'index\\')\\n           A  B\\n        a  1  4\\n        b  2  5\\n        c  3  6\\n\\n        Change the column labels.\\n\\n        >>> df.set_axis([\\'I\\', \\'II\\'], axis=\\'columns\\')\\n           I  II\\n        0  1   4\\n        1  2   5\\n        2  3   6\\n\\n        Now, update the labels inplace.\\n\\n        >>> df.set_axis([\\'i\\', \\'ii\\'], axis=\\'columns\\', inplace=True)\\n        >>> df\\n           i  ii\\n        0  1   4\\n        1  2   5\\n        2  3   6\\n        ')\n@Substitution(**_shared_doc_kwargs, extended_summary_sub=' column or', axis_description_sub=', and 1 identifies the columns', see_also_sub=' or columns')\n@Appender(NDFrame.set_axis.__doc__)\ndef set_axis(self, labels, axis=0, inplace=False):\n    return super().set_axis(labels, axis=axis, inplace=inplace)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.reindex.__doc__)\n@rewrite_axis_style_signature('labels', [('method', None), ('copy', True), ('level', None), ('fill_value', np.nan), ('limit', None), ('tolerance', None)])\ndef reindex(self, *args, **kwargs) -> 'DataFrame':\n    axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('labels', None)\n    return self._ensure_type(super().reindex(**kwargs))",
                            "def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise'):\n    \"\"\"\n    Drop specified labels from rows or columns.\n\n    Remove rows or columns by specifying label names and corresponding\n    axis, or by specifying directly index or column names. When using a\n    multi-index, labels on different levels can be removed by specifying\n    the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index or column labels to drop.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Whether to drop labels from the index (0 or 'index') or\n        columns (1 or 'columns').\n    index : single label or list-like\n        Alternative to specifying axis (``labels, axis=0``\n        is equivalent to ``index=labels``).\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        Alternative to specifying axis (``labels, axis=1``\n        is equivalent to ``columns=labels``).\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level from which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are\n        dropped.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame without the removed index or column labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis.\n\n    See Also\n    --------\n    DataFrame.loc : Label-location based indexer for selection by label.\n    DataFrame.dropna : Return DataFrame with labels on given axis omitted\n        where (all or any) data are missing.\n    DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n        removed, optionally only considering certain columns.\n    Series.drop : Return Series with specified index labels removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n    ...                   columns=['A', 'B', 'C', 'D'])\n    >>> df\n       A  B   C   D\n    0  0  1   2   3\n    1  4  5   6   7\n    2  8  9  10  11\n\n    Drop columns\n\n    >>> df.drop(['B', 'C'], axis=1)\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    >>> df.drop(columns=['B', 'C'])\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    Drop a row by index\n\n    >>> df.drop([0, 1])\n       A  B   C   D\n    2  8  9  10  11\n\n    Drop columns and/or rows of MultiIndex DataFrame\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n    ...                         [250, 150], [1.5, 0.8], [320, 250],\n    ...                         [1, 0.8], [0.3, 0.2]])\n    >>> df\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n            length  1.5     1.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n            length  1.5     0.8\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n            length  0.3     0.2\n\n    >>> df.drop(index='cow', columns='small')\n                    big\n    lama    speed   45.0\n            weight  200.0\n            length  1.5\n    falcon  speed   320.0\n            weight  1.0\n            length  0.3\n\n    >>> df.drop(index='length', level=1)\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n    \"\"\"\n    return super().drop(labels=labels, axis=axis, index=index, columns=columns, level=level, inplace=inplace, errors=errors)",
                            "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False), ('level', None), ('errors', 'ignore')])\ndef rename(self, mapper: Optional[Renamer]=None, *, index: Optional[Renamer]=None, columns: Optional[Renamer]=None, axis: Optional[Axis]=None, copy: bool=True, inplace: bool=False, level: Optional[Level]=None, errors: str='ignore') -> Optional['DataFrame']:\n    \"\"\"\n    Alter axes labels.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    mapper : dict-like or function\n        Dict-like or functions transformations to apply to\n        that axis' values. Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index`` and\n        ``columns``.\n    index : dict-like or function\n        Alternative to specifying axis (``mapper, axis=0``\n        is equivalent to ``index=mapper``).\n    columns : dict-like or function\n        Alternative to specifying axis (``mapper, axis=1``\n        is equivalent to ``columns=mapper``).\n    axis : int or str\n        Axis to target with ``mapper``. Can be either the axis name\n        ('index', 'columns') or number (0, 1). The default is 'index'.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new DataFrame. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with the renamed axis labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    DataFrame.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Rename columns using a mapping:\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Rename index using a mapping:\n\n    >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n       A  B\n    x  1  4\n    y  2  5\n    z  3  6\n\n    Cast index labels to a different type:\n\n    >>> df.index\n    RangeIndex(start=0, stop=3, step=1)\n    >>> df.rename(index=str).index\n    Index(['0', '1', '2'], dtype='object')\n\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n    Traceback (most recent call last):\n    KeyError: ['C'] not found in axis\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n    \"\"\"\n    return super().rename(mapper=mapper, index=index, columns=columns, axis=axis, copy=copy, inplace=inplace, level=level, errors=errors)",
                            "@doc(NDFrame.fillna, **_shared_doc_kwargs)\ndef fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None) -> Optional['DataFrame']:\n    return super().fillna(value=value, method=method, axis=axis, inplace=inplace, limit=limit, downcast=downcast)",
                            "@Appender(_shared_docs['replace'] % _shared_doc_kwargs)\ndef replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad'):\n    return super().replace(to_replace=to_replace, value=value, inplace=inplace, limit=limit, regex=regex, method=method)",
                            "@Appender(_shared_docs['shift'] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None) -> 'DataFrame':\n    return self._ensure_type(super().shift(periods=periods, freq=freq, axis=axis, fill_value=fill_value))",
                            "def set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False):\n    \"\"\"\n    Set the DataFrame index using existing columns.\n\n    Set the DataFrame index (row labels) using one or more existing\n    columns or arrays (of the correct length). The index can replace the\n    existing index or expand on it.\n\n    Parameters\n    ----------\n    keys : label or array-like or list of labels/arrays\n        This parameter can be either a single column key, a single array of\n        the same length as the calling DataFrame, or a list containing an\n        arbitrary combination of column keys and arrays. Here, \"array\"\n        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n        instances of :class:`~collections.abc.Iterator`.\n    drop : bool, default True\n        Delete columns to be used as the new index.\n    append : bool, default False\n        Whether to append columns to existing index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    verify_integrity : bool, default False\n        Check the new index for duplicates. Otherwise defer the check until\n        necessary. Setting to False will improve the performance of this\n        method.\n\n    Returns\n    -------\n    DataFrame\n        Changed row labels.\n\n    See Also\n    --------\n    DataFrame.reset_index : Opposite of set_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n    ...                    'year': [2012, 2014, 2013, 2014],\n    ...                    'sale': [55, 40, 84, 31]})\n    >>> df\n       month  year  sale\n    0      1  2012    55\n    1      4  2014    40\n    2      7  2013    84\n    3     10  2014    31\n\n    Set the index to become the 'month' column:\n\n    >>> df.set_index('month')\n           year  sale\n    month\n    1      2012    55\n    4      2014    40\n    7      2013    84\n    10     2014    31\n\n    Create a MultiIndex using columns 'year' and 'month':\n\n    >>> df.set_index(['year', 'month'])\n                sale\n    year  month\n    2012  1     55\n    2014  4     40\n    2013  7     84\n    2014  10    31\n\n    Create a MultiIndex using an Index and a column:\n\n    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n             month  sale\n       year\n    1  2012  1      55\n    2  2014  4      40\n    3  2013  7      84\n    4  2014  10     31\n\n    Create a MultiIndex using two Series:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> df.set_index([s, s**2])\n          month  year  sale\n    1 1       1  2012    55\n    2 4       4  2014    40\n    3 9       7  2013    84\n    4 16     10  2014    31\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(keys, list):\n        keys = [keys]\n    err_msg = 'The parameter \"keys\" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays.'\n    missing: List[Optional[Hashable]] = []\n    for col in keys:\n        if isinstance(col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)):\n            if getattr(col, 'ndim', 1) != 1:\n                raise ValueError(err_msg)\n        else:\n            try:\n                found = col in self.columns\n            except TypeError:\n                raise TypeError(f'{err_msg}. Received column of type {type(col)}')\n            else:\n                if not found:\n                    missing.append(col)\n    if missing:\n        raise KeyError(f'None of {missing} are in the columns')\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n    arrays = []\n    names = []\n    if append:\n        names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n    to_remove: List[Optional[Hashable]] = []\n    for col in keys:\n        if isinstance(col, ABCMultiIndex):\n            for n in range(col.nlevels):\n                arrays.append(col._get_level_values(n))\n            names.extend(col.names)\n        elif isinstance(col, (ABCIndexClass, ABCSeries)):\n            arrays.append(col)\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray)):\n            arrays.append(col)\n            names.append(None)\n        elif isinstance(col, abc.Iterator):\n            arrays.append(list(col))\n            names.append(None)\n        else:\n            arrays.append(frame[col]._values)\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n        if len(arrays[-1]) != len(self):\n            raise ValueError(f'Length mismatch: Expected {len(self)} rows, received array of length {len(arrays[-1])}')\n    index = ensure_index_from_sequences(arrays, names)\n    if verify_integrity and (not index.is_unique):\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError(f'Index has duplicate keys: {duplicates}')\n    for c in set(to_remove):\n        del frame[c]\n    index._cleanup()\n    frame.index = index\n    if not inplace:\n        return frame",
                            "def reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']:\n    \"\"\"\n    Reset the index, or a level of it.\n\n    Reset the index of the DataFrame, and use the default one instead.\n    If the DataFrame has a MultiIndex, this method can remove one or more\n    levels.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default None\n        Only remove the given levels from the index. Removes all levels by\n        default.\n    drop : bool, default False\n        Do not try to insert index into dataframe columns. This resets\n        the index to the default integer index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    col_level : int or str, default 0\n        If the columns have multiple levels, determines which level the\n        labels are inserted into. By default it is inserted into the first\n        level.\n    col_fill : object, default ''\n        If the columns have multiple levels, determines how the other\n        levels are named. If None then the index name is repeated.\n\n    Returns\n    -------\n    DataFrame or None\n        DataFrame with the new index or None if ``inplace=True``.\n\n    See Also\n    --------\n    DataFrame.set_index : Opposite of reset_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 389.0),\n    ...                    ('bird', 24.0),\n    ...                    ('mammal', 80.5),\n    ...                    ('mammal', np.nan)],\n    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n    ...                   columns=('class', 'max_speed'))\n    >>> df\n             class  max_speed\n    falcon    bird      389.0\n    parrot    bird       24.0\n    lion    mammal       80.5\n    monkey  mammal        NaN\n\n    When we reset the index, the old index is added as a column, and a\n    new sequential index is used:\n\n    >>> df.reset_index()\n        index   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    We can use the `drop` parameter to avoid the old index being added as\n    a column:\n\n    >>> df.reset_index(drop=True)\n        class  max_speed\n    0    bird      389.0\n    1    bird       24.0\n    2  mammal       80.5\n    3  mammal        NaN\n\n    You can also use `reset_index` with `MultiIndex`.\n\n    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n    ...                                    ('bird', 'parrot'),\n    ...                                    ('mammal', 'lion'),\n    ...                                    ('mammal', 'monkey')],\n    ...                                   names=['class', 'name'])\n    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n    ...                                      ('species', 'type')])\n    >>> df = pd.DataFrame([(389.0, 'fly'),\n    ...                    ( 24.0, 'fly'),\n    ...                    ( 80.5, 'run'),\n    ...                    (np.nan, 'jump')],\n    ...                   index=index,\n    ...                   columns=columns)\n    >>> df\n                   speed species\n                     max    type\n    class  name\n    bird   falcon  389.0     fly\n           parrot   24.0     fly\n    mammal lion     80.5     run\n           monkey    NaN    jump\n\n    If the index has multiple levels, we can reset a subset of them:\n\n    >>> df.reset_index(level='class')\n             class  speed species\n                      max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    If we are not dropping the index, by default, it is placed in the top\n    level. We can place it in another level:\n\n    >>> df.reset_index(level='class', col_level=1)\n                    speed species\n             class    max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    When the index is inserted under another level, we can specify under\n    which one with the parameter `col_fill`:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                  species  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n\n    If we specify a nonexistent level for `col_fill`, it is created:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                    genus  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if inplace:\n        new_obj = self\n    else:\n        new_obj = self.copy()\n\n    def _maybe_casted_values(index, labels=None):\n        values = index._values\n        if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n            if values.dtype == np.object_:\n                values = lib.maybe_convert_objects(values)\n        if labels is not None:\n            mask = labels == -1\n            if mask.all():\n                values = np.empty(len(mask))\n                values.fill(np.nan)\n            else:\n                values = values.take(labels)\n                values_type = type(values)\n                values_dtype = values.dtype\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values._data\n                if mask.any():\n                    values, _ = maybe_upcast_putmask(values, mask, np.nan)\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values_type(values, dtype=values_dtype)\n        return values\n    new_index = ibase.default_index(len(new_obj))\n    if level is not None:\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n        level = [self.index._get_level_number(lev) for lev in level]\n        if len(level) < self.index.nlevels:\n            new_index = self.index.droplevel(level)\n    if not drop:\n        to_insert: Iterable[Tuple[Any, Optional[Any]]]\n        if isinstance(self.index, ABCMultiIndex):\n            names = [n if n is not None else f'level_{i}' for i, n in enumerate(self.index.names)]\n            to_insert = zip(self.index.levels, self.index.codes)\n        else:\n            default = 'index' if 'index' not in self else 'level_0'\n            names = [default] if self.index.name is None else [self.index.name]\n            to_insert = ((self.index, None),)\n        multi_col = isinstance(self.columns, ABCMultiIndex)\n        for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n            if not (level is None or i in level):\n                continue\n            name = names[i]\n            if multi_col:\n                col_name = list(name) if isinstance(name, tuple) else [name]\n                if col_fill is None:\n                    if len(col_name) not in (1, self.columns.nlevels):\n                        raise ValueError(f'col_fill=None is incompatible with incomplete column name {name}')\n                    col_fill = col_name[0]\n                lev_num = self.columns._get_level_number(col_level)\n                name_lst = [col_fill] * lev_num + col_name\n                missing = self.columns.nlevels - len(name_lst)\n                name_lst += [col_fill] * missing\n                name = tuple(name_lst)\n            level_values = _maybe_casted_values(lev, lab)\n            new_obj.insert(0, name, level_values)\n    new_obj.index = new_index\n    if not inplace:\n        return new_obj\n    return None",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isna(self) -> 'DataFrame':\n    return super().isna()",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isnull(self) -> 'DataFrame':\n    return super().isnull()",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notna(self) -> 'DataFrame':\n    return super().notna()",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notnull(self) -> 'DataFrame':\n    return super().notnull()",
                            "def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False):\n    \"\"\"\n    Remove missing values.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Determine if rows or columns which contain missing values are\n        removed.\n\n        * 0, or 'index' : Drop rows which contain missing values.\n        * 1, or 'columns' : Drop columns which contain missing value.\n\n        .. versionchanged:: 1.0.0\n\n           Pass tuple or list to drop on multiple axes.\n           Only a single axis is allowed.\n\n    how : {'any', 'all'}, default 'any'\n        Determine if row or column is removed from DataFrame, when we have\n        at least one NA or all NA.\n\n        * 'any' : If any NA values are present, drop that row or column.\n        * 'all' : If all values are NA, drop that row or column.\n\n    thresh : int, optional\n        Require that many non-NA values.\n    subset : array-like, optional\n        Labels along other axis to consider, e.g. if you are dropping rows\n        these would be a list of columns to include.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with NA entries dropped from it.\n\n    See Also\n    --------\n    DataFrame.isna: Indicate missing values.\n    DataFrame.notna : Indicate existing (non-missing) values.\n    DataFrame.fillna : Replace missing values.\n    Series.dropna : Drop missing values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n    ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n    ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n    ...                             pd.NaT]})\n    >>> df\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Drop the rows where at least one element is missing.\n\n    >>> df.dropna()\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n\n    Drop the columns where at least one element is missing.\n\n    >>> df.dropna(axis='columns')\n           name\n    0    Alfred\n    1    Batman\n    2  Catwoman\n\n    Drop the rows where all elements are missing.\n\n    >>> df.dropna(how='all')\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Keep only the rows with at least 2 non-NA values.\n\n    >>> df.dropna(thresh=2)\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Define in which columns to look for missing values.\n\n    >>> df.dropna(subset=['name', 'born'])\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n\n    Keep the DataFrame with valid entries in the same variable.\n\n    >>> df.dropna(inplace=True)\n    >>> df\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if isinstance(axis, (tuple, list)):\n        raise TypeError('supplying multiple axes to axis is no longer supported.')\n    axis = self._get_axis_number(axis)\n    agg_axis = 1 - axis\n    agg_obj = self\n    if subset is not None:\n        ax = self._get_axis(agg_axis)\n        indices = ax.get_indexer_for(subset)\n        check = indices == -1\n        if check.any():\n            raise KeyError(list(np.compress(check, subset)))\n        agg_obj = self.take(indices, axis=agg_axis)\n    count = agg_obj.count(axis=agg_axis)\n    if thresh is not None:\n        mask = count >= thresh\n    elif how == 'any':\n        mask = count == len(agg_obj._get_axis(agg_axis))\n    elif how == 'all':\n        mask = count > 0\n    elif how is not None:\n        raise ValueError(f'invalid how option: {how}')\n    else:\n        raise TypeError('must specify how or thresh')\n    result = self.loc(axis=axis)[mask]\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                            "def drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False, ignore_index: bool=False) -> Optional['DataFrame']:\n    \"\"\"\n    Return DataFrame with duplicate rows removed.\n\n    Considering certain columns is optional. Indexes, including time indexes\n    are ignored.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to keep.\n        - ``first`` : Drop duplicates except for the first occurrence.\n        - ``last`` : Drop duplicates except for the last occurrence.\n        - False : Drop all duplicates.\n    inplace : bool, default False\n        Whether to drop duplicates in place or to return a copy.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with duplicates removed or None if ``inplace=True``.\n    \"\"\"\n    if self.empty:\n        return self.copy()\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    duplicated = self.duplicated(subset, keep=keep)\n    if inplace:\n        inds, = (-duplicated)._ndarray_values.nonzero()\n        new_data = self._data.take(inds)\n        if ignore_index:\n            new_data.axes[1] = ibase.default_index(len(inds))\n        self._update_inplace(new_data)\n    else:\n        result = self[-duplicated]\n        if ignore_index:\n            result.index = ibase.default_index(len(result))\n        return result\n    return None",
                            "def duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series':\n    \"\"\"\n    Return boolean Series denoting duplicate rows.\n\n    Considering certain columns is optional.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to mark.\n\n        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.sorting import get_group_index\n    from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n    if self.empty:\n        return Series(dtype=bool)\n\n    def f(vals):\n        labels, shape = algorithms.factorize(vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n        return (labels.astype('i8', copy=False), len(shape))\n    if subset is None:\n        subset = self.columns\n    elif not np.iterable(subset) or isinstance(subset, str) or (isinstance(subset, tuple) and subset in self.columns):\n        subset = (subset,)\n    subset = cast(Iterable, subset)\n    diff = Index(subset).difference(self.columns)\n    if not diff.empty:\n        raise KeyError(diff)\n    vals = (col.values for name, col in self.items() if name in subset)\n    labels, shape = map(list, zip(*map(f, vals)))\n    ids = get_group_index(labels, shape, sort=False, xnull=False)\n    return Series(duplicated_int64(ids, keep), index=self.index)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_values.__doc__)\ndef sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last', ignore_index=False):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    if not isinstance(by, list):\n        by = [by]\n    if is_sequence(ascending) and len(by) != len(ascending):\n        raise ValueError(f'Length of ascending ({len(ascending)}) != length of by ({len(by)})')\n    if len(by) > 1:\n        from pandas.core.sorting import lexsort_indexer\n        keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n        indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n    else:\n        from pandas.core.sorting import nargsort\n        by = by[0]\n        k = self._get_label_or_level_values(by, axis=axis)\n        if isinstance(ascending, (tuple, list)):\n            ascending = ascending[0]\n        indexer = nargsort(k, kind=kind, ascending=ascending, na_position=na_position)\n    new_data = self._data.take(indexer, axis=self._get_block_manager_axis(axis), verify=False)\n    if ignore_index:\n        new_data.axes[1] = ibase.default_index(len(indexer))\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "def sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False):\n    \"\"\"\n    Sort object by labels (along an axis).\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to sort.  The value 0 identifies the rows,\n        and 1 identifies the columns.\n    level : int or level name or list of ints or list of level names\n        If not None, sort on values in specified index level(s).\n    ascending : bool or list of bools, default True\n        Sort ascending vs. descending. When the index is a MultiIndex the\n        sort direction can be controlled for each level individually.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also ndarray.np.sort for more\n        information.  `mergesort` is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted index if inplace=False, None otherwise.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    labels = labels._sort_levels_monotonic()\n    if level is not None:\n        new_axis, indexer = labels.sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)\n    elif isinstance(labels, ABCMultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n        indexer = lexsort_indexer(labels._get_codes_for_sorting(), orders=ascending, na_position=na_position)\n    else:\n        from pandas.core.sorting import nargsort\n        if ascending and labels.is_monotonic_increasing or (not ascending and labels.is_monotonic_decreasing):\n            if inplace:\n                return\n            else:\n                return self.copy()\n        indexer = nargsort(labels, kind=kind, ascending=ascending, na_position=na_position)\n    baxis = self._get_block_manager_axis(axis)\n    new_data = self._data.take(indexer, axis=baxis, verify=False)\n    new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n    if ignore_index:\n        new_data.axes[1] = ibase.default_index(len(indexer))\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "def nlargest(self, n, columns, keep='first') -> 'DataFrame':\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in descending order.\n\n    Return the first `n` rows with the largest values in `columns`, in\n    descending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=False).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows to return.\n    columns : label or list of labels\n        Column label(s) to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - `first` : prioritize the first occurrence(s)\n        - `last` : prioritize the last occurrence(s)\n        - ``all`` : do not drop any duplicates, even it means\n                    selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The first `n` rows ordered by the given columns in descending\n        order.\n\n    See Also\n    --------\n    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n        ascending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Notes\n    -----\n    This function cannot be used with all column types. For example, when\n    specifying columns with `object` or `category` dtypes, ``TypeError`` is\n    raised.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nlargest`` to select the three\n    rows having the largest values in column \"population\".\n\n    >>> df.nlargest(3, 'population')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Malta       434000    12011      MT\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nlargest(3, 'population', keep='last')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nlargest(3, 'population', keep='all')\n              population      GDP alpha-2\n    France      65000000  2583560      FR\n    Italy       59000000  1937894      IT\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n\n    To order by the largest values in column \"population\" and then \"GDP\",\n    we can specify multiple columns like in the next example.\n\n    >>> df.nlargest(3, ['population', 'GDP'])\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()",
                            "def nsmallest(self, n, columns, keep='first') -> 'DataFrame':\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in ascending order.\n\n    Return the first `n` rows with the smallest values in `columns`, in\n    ascending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=True).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of items to retrieve.\n    columns : list or str\n        Column name or names to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - ``first`` : take the first occurrence.\n        - ``last`` : take the last occurrence.\n        - ``all`` : do not drop any duplicates, even it means\n          selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n        descending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 337000,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru         337000      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nsmallest`` to select the\n    three rows having the smallest values in column \"population\".\n\n    >>> df.nsmallest(3, 'population')\n              population    GDP alpha-2\n    Tuvalu         11300     38      TV\n    Anguilla       11300    311      AI\n    Iceland       337000  17036\t     IS\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nsmallest(3, 'population', keep='last')\n              population  GDP alpha-2\n    Anguilla       11300  311      AI\n    Tuvalu         11300   38      TV\n    Nauru         337000  182      NR\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nsmallest(3, 'population', keep='all')\n              population    GDP alpha-2\n    Tuvalu         11300     38      TV\n    Anguilla       11300    311      AI\n    Iceland       337000  17036      IS\n    Nauru         337000    182      NR\n\n    To order by the smallest values in column \"population\" and then \"GDP\", we can\n    specify multiple columns like in the next example.\n\n    >>> df.nsmallest(3, ['population', 'GDP'])\n              population  GDP alpha-2\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n    Nauru         337000  182      NR\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nsmallest()",
                            "def swaplevel(self, i=-2, j=-1, axis=0) -> 'DataFrame':\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis.\n\n    Parameters\n    ----------\n    i, j : int or str\n        Levels of the indices to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    result = self.copy()\n    axis = self._get_axis_number(axis)\n    if not isinstance(result._get_axis(axis), ABCMultiIndex):\n        raise TypeError('Can only swap levels on a hierarchical axis.')\n    if axis == 0:\n        assert isinstance(result.index, ABCMultiIndex)\n        result.index = result.index.swaplevel(i, j)\n    else:\n        assert isinstance(result.columns, ABCMultiIndex)\n        result.columns = result.columns.swaplevel(i, j)\n    return result",
                            "def reorder_levels(self, order, axis=0) -> 'DataFrame':\n    \"\"\"\n    Rearrange index levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int or list of str\n        List representing new level order. Reference level by number\n        (position) or by key (label).\n    axis : int\n        Where to reorder levels.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if not isinstance(self._get_axis(axis), ABCMultiIndex):\n        raise TypeError('Can only reorder levels on a hierarchical axis.')\n    result = self.copy()\n    if axis == 0:\n        assert isinstance(result.index, ABCMultiIndex)\n        result.index = result.index.reorder_levels(order)\n    else:\n        assert isinstance(result.columns, ABCMultiIndex)\n        result.columns = result.columns.reorder_levels(order)\n    return result",
                            "def _combine_frame(self, other: 'DataFrame', func, fill_value=None):\n    if fill_value is None:\n        _arith_op = func\n    else:\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n    if ops.should_series_dispatch(self, other, func):\n        new_data = ops.dispatch_to_series(self, other, _arith_op)\n    else:\n        with np.errstate(all='ignore'):\n            res_values = _arith_op(self.values, other.values)\n        new_data = dispatch_fill_zeros(func, self.values, other.values, res_values)\n    return new_data",
                            "def _combine_match_index(self, other: Series, func):\n    if ops.should_series_dispatch(self, other, func):\n        new_data = ops.dispatch_to_series(self, other, func)\n    else:\n        other_vals = other.values.reshape(-1, 1)\n        with np.errstate(all='ignore'):\n            new_data = func(self.values, other_vals)\n        new_data = dispatch_fill_zeros(func, self.values, other_vals, new_data)\n    return new_data",
                            "def _construct_result(self, result) -> 'DataFrame':\n    \"\"\"\n    Wrap the result of an arithmetic, comparison, or logical operation.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    out = self._constructor(result, index=self.index, copy=False)\n    out.columns = self.columns\n    return out",
                            "def combine(self, other: 'DataFrame', func, fill_value=None, overwrite=True) -> 'DataFrame':\n    \"\"\"\n    Perform column-wise combine with another DataFrame.\n\n    Combines a DataFrame with `other` DataFrame using `func`\n    to element-wise combine columns. The row and column indexes of the\n    resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        The DataFrame to merge column-wise.\n    func : function\n        Function that takes two series as inputs and return a Series or a\n        scalar. Used to merge the two dataframes column by columns.\n    fill_value : scalar value, default None\n        The value to fill NaNs with prior to passing any column to the\n        merge func.\n    overwrite : bool, default True\n        If True, columns in `self` that do not exist in `other` will be\n        overwritten with NaNs.\n\n    Returns\n    -------\n    DataFrame\n        Combination of the provided DataFrames.\n\n    See Also\n    --------\n    DataFrame.combine_first : Combine two DataFrame objects and default to\n        non-null values in frame calling the method.\n\n    Examples\n    --------\n    Combine using a simple function that chooses the smaller column.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n    >>> df1.combine(df2, take_smaller)\n       A  B\n    0  0  3\n    1  0  3\n\n    Example using a true element-wise combine function.\n\n    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, np.minimum)\n       A  B\n    0  1  2\n    1  0  3\n\n    Using `fill_value` fills Nones prior to passing the column to the\n    merge function.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n       A    B\n    0  0 -5.0\n    1  0  4.0\n\n    However, if the same element in both dataframes is None, that None\n    is preserved\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n        A    B\n    0  0 -5.0\n    1  0  3.0\n\n    Example that demonstrates the use of `overwrite` and behavior when\n    the axis differ between the dataframes.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n    >>> df1.combine(df2, take_smaller)\n         A    B     C\n    0  NaN  NaN   NaN\n    1  NaN  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    >>> df1.combine(df2, take_smaller, overwrite=False)\n         A    B     C\n    0  0.0  NaN   NaN\n    1  0.0  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    Demonstrating the preference of the passed in dataframe.\n\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n    >>> df2.combine(df1, take_smaller)\n       A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 NaN\n    2  NaN  3.0 NaN\n\n    >>> df2.combine(df1, take_smaller, overwrite=False)\n         A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 1.0\n    2  NaN  3.0 1.0\n    \"\"\"\n    other_idxlen = len(other.index)\n    this, other = self.align(other, copy=False)\n    new_index = this.index\n    if other.empty and len(new_index) == len(self.index):\n        return self.copy()\n    if self.empty and len(other) == other_idxlen:\n        return other.copy()\n    new_columns = this.columns.union(other.columns)\n    do_fill = fill_value is not None\n    result = {}\n    for col in new_columns:\n        series = this[col]\n        otherSeries = other[col]\n        this_dtype = series.dtype\n        other_dtype = otherSeries.dtype\n        this_mask = isna(series)\n        other_mask = isna(otherSeries)\n        if not overwrite and other_mask.all():\n            result[col] = this[col].copy()\n            continue\n        if do_fill:\n            series = series.copy()\n            otherSeries = otherSeries.copy()\n            series[this_mask] = fill_value\n            otherSeries[other_mask] = fill_value\n        if col not in self.columns:\n            new_dtype = other_dtype\n            try:\n                series = series.astype(new_dtype, copy=False)\n            except ValueError:\n                pass\n        else:\n            new_dtype = find_common_type([this_dtype, other_dtype])\n            if not is_dtype_equal(this_dtype, new_dtype):\n                series = series.astype(new_dtype)\n            if not is_dtype_equal(other_dtype, new_dtype):\n                otherSeries = otherSeries.astype(new_dtype)\n        arr = func(series, otherSeries)\n        arr = maybe_downcast_to_dtype(arr, this_dtype)\n        result[col] = arr\n    return self._constructor(result, index=new_index, columns=new_columns)",
                            "def combine_first(self, other: 'DataFrame') -> 'DataFrame':\n    \"\"\"\n    Update null elements with value in the same location in `other`.\n\n    Combine two DataFrame objects by filling null values in one DataFrame\n    with non-null values from other DataFrame. The row and column indexes\n    of the resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        Provided DataFrame to use to fill null values.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.combine : Perform series-wise operation on two DataFrames\n        using a given function.\n\n    Examples\n    --------\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine_first(df2)\n         A    B\n    0  1.0  3.0\n    1  0.0  4.0\n\n    Null values still persist if the location of that null value\n    does not exist in `other`\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n    >>> df1.combine_first(df2)\n         A    B    C\n    0  NaN  4.0  NaN\n    1  0.0  3.0  1.0\n    2  NaN  3.0  1.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    def extract_values(arr):\n        if isinstance(arr, (ABCIndexClass, ABCSeries)):\n            arr = arr._values\n        if needs_i8_conversion(arr):\n            if is_extension_array_dtype(arr.dtype):\n                arr = arr.asi8\n            else:\n                arr = arr.view('i8')\n        return arr\n\n    def combiner(x, y):\n        mask = isna(x)\n        if isinstance(mask, (ABCIndexClass, ABCSeries)):\n            mask = mask._values\n        x_values = extract_values(x)\n        y_values = extract_values(y)\n        if y.name not in self.columns:\n            return y_values\n        return expressions.where(mask, y_values, x_values)\n    return self.combine(other, combiner, overwrite=False)",
                            "def update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore') -> None:\n    \"\"\"\n    Modify in place using non-NA values from another DataFrame.\n\n    Aligns on indices. There is no return value.\n\n    Parameters\n    ----------\n    other : DataFrame, or object coercible into a DataFrame\n        Should have at least one matching index/column label\n        with the original DataFrame. If a Series is passed,\n        its name attribute must be set, and that will be\n        used as the column name to align with the original DataFrame.\n    join : {'left'}, default 'left'\n        Only left join is implemented, keeping the index and columns of the\n        original object.\n    overwrite : bool, default True\n        How to handle non-NA values for overlapping keys:\n\n        * True: overwrite original DataFrame's values\n          with values from `other`.\n        * False: only update values that are NA in\n          the original DataFrame.\n\n    filter_func : callable(1d-array) -> bool 1d-array, optional\n        Can choose to replace values other than NA. Return True for values\n        that should be updated.\n    errors : {'raise', 'ignore'}, default 'ignore'\n        If 'raise', will raise a ValueError if the DataFrame and `other`\n        both contain non-NA data in the same place.\n\n        .. versionchanged:: 0.24.0\n           Changed from `raise_conflict=False|True`\n           to `errors='ignore'|'raise'`.\n\n    Returns\n    -------\n    None : method directly changes calling object\n\n    Raises\n    ------\n    ValueError\n        * When `errors='raise'` and there's overlapping non-NA data.\n        * When `errors` is not either `'ignore'` or `'raise'`\n    NotImplementedError\n        * If `join != 'left'`\n\n    See Also\n    --------\n    dict.update : Similar method for dictionaries.\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n    ...                        'C': [7, 8, 9]})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    The DataFrame's length does not increase as a result of the update,\n    only values at matching index/column labels are updated.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  d\n    1  b  e\n    2  c  f\n\n    For Series, it's name attribute must be set.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n    >>> df.update(new_column)\n    >>> df\n       A  B\n    0  a  d\n    1  b  y\n    2  c  e\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  x\n    1  b  d\n    2  c  e\n\n    If `other` contains NaNs the corresponding values are not updated\n    in the original dataframe.\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n    >>> df.update(new_df)\n    >>> df\n       A      B\n    0  1    4.0\n    1  2  500.0\n    2  3    6.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n    if join != 'left':\n        raise NotImplementedError('Only left join is supported')\n    if errors not in ['ignore', 'raise']:\n        raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n    if not isinstance(other, DataFrame):\n        other = DataFrame(other)\n    other = other.reindex_like(self)\n    for col in self.columns:\n        this = self[col]._values\n        that = other[col]._values\n        if filter_func is not None:\n            with np.errstate(all='ignore'):\n                mask = ~filter_func(this) | isna(that)\n        else:\n            if errors == 'raise':\n                mask_this = notna(that)\n                mask_that = notna(this)\n                if any(mask_this & mask_that):\n                    raise ValueError('Data overlaps.')\n            if overwrite:\n                mask = isna(that)\n            else:\n                mask = notna(this)\n        if mask.all():\n            continue\n        self[col] = expressions.where(mask, this, that)",
                            "@Appender('\\nExamples\\n--------\\n>>> df = pd.DataFrame({\\'Animal\\': [\\'Falcon\\', \\'Falcon\\',\\n...                               \\'Parrot\\', \\'Parrot\\'],\\n...                    \\'Max Speed\\': [380., 370., 24., 26.]})\\n>>> df\\n   Animal  Max Speed\\n0  Falcon      380.0\\n1  Falcon      370.0\\n2  Parrot       24.0\\n3  Parrot       26.0\\n>>> df.groupby([\\'Animal\\']).mean()\\n        Max Speed\\nAnimal\\nFalcon      375.0\\nParrot       25.0\\n\\n**Hierarchical Indexes**\\n\\nWe can groupby different levels of a hierarchical index\\nusing the `level` parameter:\\n\\n>>> arrays = [[\\'Falcon\\', \\'Falcon\\', \\'Parrot\\', \\'Parrot\\'],\\n...           [\\'Captive\\', \\'Wild\\', \\'Captive\\', \\'Wild\\']]\\n>>> index = pd.MultiIndex.from_arrays(arrays, names=(\\'Animal\\', \\'Type\\'))\\n>>> df = pd.DataFrame({\\'Max Speed\\': [390., 350., 30., 20.]},\\n...                   index=index)\\n>>> df\\n                Max Speed\\nAnimal Type\\nFalcon Captive      390.0\\n       Wild         350.0\\nParrot Captive       30.0\\n       Wild          20.0\\n>>> df.groupby(level=0).mean()\\n        Max Speed\\nAnimal\\nFalcon      370.0\\nParrot       25.0\\n>>> df.groupby(level=\"Type\").mean()\\n         Max Speed\\nType\\nCaptive      210.0\\nWild         185.0\\n')\n@Appender(_shared_docs['groupby'] % _shared_doc_kwargs)\ndef groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False) -> 'DataFrameGroupBy':\n    from pandas.core.groupby.generic import DataFrameGroupBy\n    if level is None and by is None:\n        raise TypeError(\"You have to supply one of 'by' and 'level'\")\n    axis = self._get_axis_number(axis)\n    return DataFrameGroupBy(obj=self, keys=by, axis=axis, level=level, as_index=as_index, sort=sort, group_keys=group_keys, squeeze=squeeze, observed=observed)",
                            "@Substitution('')\n@Appender(_shared_docs['pivot'])\ndef pivot(self, index=None, columns=None, values=None) -> 'DataFrame':\n    from pandas.core.reshape.pivot import pivot\n    return pivot(self, index=index, columns=columns, values=values)",
                            "@Substitution('')\n@Appender(_shared_docs['pivot_table'])\ndef pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n    from pandas.core.reshape.pivot import pivot_table\n    return pivot_table(self, values=values, index=index, columns=columns, aggfunc=aggfunc, fill_value=fill_value, margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)",
                            "def stack(self, level=-1, dropna=True):\n    \"\"\"\n    Stack the prescribed level(s) from columns to index.\n\n    Return a reshaped DataFrame or Series having a multi-level\n    index with one or more new inner-most levels compared to the current\n    DataFrame. The new inner-most levels are created by pivoting the\n    columns of the current dataframe:\n\n      - if the columns have a single level, the output is a Series;\n      - if the columns have multiple levels, the new index\n        level(s) is (are) taken from the prescribed level(s) and\n        the output is a DataFrame.\n\n    The new index levels are sorted.\n\n    Parameters\n    ----------\n    level : int, str, list, default -1\n        Level(s) to stack from the column axis onto the index\n        axis, defined as one index or label, or a list of indices\n        or labels.\n    dropna : bool, default True\n        Whether to drop rows in the resulting Frame/Series with\n        missing values. Stacking a column level onto the index\n        axis can create combinations of index and column values\n        that are missing from the original dataframe. See Examples\n        section.\n\n    Returns\n    -------\n    DataFrame or Series\n        Stacked dataframe or series.\n\n    See Also\n    --------\n    DataFrame.unstack : Unstack prescribed level(s) from index axis\n         onto column axis.\n    DataFrame.pivot : Reshape dataframe from long format to wide\n         format.\n    DataFrame.pivot_table : Create a spreadsheet-style pivot table\n         as a DataFrame.\n\n    Notes\n    -----\n    The function is named by analogy with a collection of books\n    being reorganized from being side by side on a horizontal\n    position (the columns of the dataframe) to being stacked\n    vertically on top of each other (in the index of the\n    dataframe).\n\n    Examples\n    --------\n    **Single level columns**\n\n    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=['weight', 'height'])\n\n    Stacking a dataframe with a single level column axis returns a Series:\n\n    >>> df_single_level_cols\n         weight height\n    cat       0      1\n    dog       2      3\n    >>> df_single_level_cols.stack()\n    cat  weight    0\n         height    1\n    dog  weight    2\n         height    3\n    dtype: int64\n\n    **Multi level columns: simple case**\n\n    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('weight', 'pounds')])\n    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol1)\n\n    Stacking a dataframe with a multi-level column axis:\n\n    >>> df_multi_level_cols1\n         weight\n             kg    pounds\n    cat       1        2\n    dog       2        4\n    >>> df_multi_level_cols1.stack()\n                weight\n    cat kg           1\n        pounds       2\n    dog kg           2\n        pounds       4\n\n    **Missing values**\n\n    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('height', 'm')])\n    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    It is common to have missing values when stacking a dataframe\n    with multi-level columns, as the stacked dataframe typically\n    has more values than the original dataframe. Missing values\n    are filled with NaNs:\n\n    >>> df_multi_level_cols2\n        weight height\n            kg      m\n    cat    1.0    2.0\n    dog    3.0    4.0\n    >>> df_multi_level_cols2.stack()\n            height  weight\n    cat kg     NaN     1.0\n        m      2.0     NaN\n    dog kg     NaN     3.0\n        m      4.0     NaN\n\n    **Prescribing the level(s) to be stacked**\n\n    The first parameter controls which level or levels are stacked:\n\n    >>> df_multi_level_cols2.stack(0)\n                 kg    m\n    cat height  NaN  2.0\n        weight  1.0  NaN\n    dog height  NaN  4.0\n        weight  3.0  NaN\n    >>> df_multi_level_cols2.stack([0, 1])\n    cat  height  m     2.0\n         weight  kg    1.0\n    dog  height  m     4.0\n         weight  kg    3.0\n    dtype: float64\n\n    **Dropping missing values**\n\n    >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    Note that rows where all values are missing are dropped by\n    default but this behaviour can be controlled via the dropna\n    keyword parameter:\n\n    >>> df_multi_level_cols3\n        weight height\n            kg      m\n    cat    NaN    1.0\n    dog    2.0    3.0\n    >>> df_multi_level_cols3.stack(dropna=False)\n            height  weight\n    cat kg     NaN     NaN\n        m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    >>> df_multi_level_cols3.stack(dropna=True)\n            height  weight\n    cat m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    \"\"\"\n    from pandas.core.reshape.reshape import stack, stack_multiple\n    if isinstance(level, (tuple, list)):\n        return stack_multiple(self, level, dropna=dropna)\n    else:\n        return stack(self, level, dropna=dropna)",
                            "def explode(self, column: Union[str, Tuple]) -> 'DataFrame':\n    \"\"\"\n    Transform each element of a list-like to a row, replicating index values.\n\n    .. versionadded:: 0.25.0\n\n    Parameters\n    ----------\n    column : str or tuple\n        Column to explode.\n\n    Returns\n    -------\n    DataFrame\n        Exploded lists to rows of the subset columns;\n        index will be duplicated for these rows.\n\n    Raises\n    ------\n    ValueError :\n        if columns of the frame are not unique.\n\n    See Also\n    --------\n    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n        index labels.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    Series.explode : Explode a DataFrame from list-like columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n    >>> df\n               A  B\n    0  [1, 2, 3]  1\n    1        foo  1\n    2         []  1\n    3     [3, 4]  1\n\n    >>> df.explode('A')\n         A  B\n    0    1  1\n    0    2  1\n    0    3  1\n    1  foo  1\n    2  NaN  1\n    3    3  1\n    3    4  1\n    \"\"\"\n    if not (is_scalar(column) or isinstance(column, tuple)):\n        raise ValueError('column must be a scalar')\n    if not self.columns.is_unique:\n        raise ValueError('columns must be unique')\n    df = self.reset_index(drop=True)\n    assert df is not None\n    result = df[column].explode()\n    result = df.drop([column], axis=1).join(result)\n    result.index = self.index.take(result.index)\n    result = result.reindex(columns=self.columns, copy=False)\n    return result",
                            "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Pivot a level of the (necessarily hierarchical) index labels.\n\n    Returns a DataFrame having a new level of column labels whose inner-most level\n    consists of the pivoted index labels.\n\n    If the index is not a MultiIndex, the output will be a Series\n    (the analogue of stack when the columns are not a MultiIndex).\n\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default -1 (last level)\n        Level(s) of index to unstack, can pass level name.\n    fill_value : int, str or dict\n        Replace NaN with this value if the unstack produces missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot a table based on column values.\n    DataFrame.stack : Pivot a level of the column labels (inverse operation\n        from `unstack`).\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n    ...                                    ('two', 'a'), ('two', 'b')])\n    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n    >>> s\n    one  a   1.0\n         b   2.0\n    two  a   3.0\n         b   4.0\n    dtype: float64\n\n    >>> s.unstack(level=-1)\n         a   b\n    one  1.0  2.0\n    two  3.0  4.0\n\n    >>> s.unstack(level=0)\n       one  two\n    a  1.0   3.0\n    b  2.0   4.0\n\n    >>> df = s.unstack(level=0)\n    >>> df.unstack()\n    one  a  1.0\n         b  2.0\n    two  a  3.0\n         b  4.0\n    dtype: float64\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n    return unstack(self, level, fill_value)",
                            "@Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded='\\n    .. versionadded:: 0.20.0\\n', other='melt'))\ndef melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None) -> 'DataFrame':\n    from pandas.core.reshape.melt import melt\n    return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=var_name, value_name=value_name, col_level=col_level)",
                            "def diff(self, periods=1, axis=0) -> 'DataFrame':\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a DataFrame element compared with another\n    element in the DataFrame (default is the element in the same column\n    of the previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Take difference over rows (0) or columns (1).\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    Series.diff: First discrete difference for a Series.\n    DataFrame.pct_change: Percent change over given number of periods.\n    DataFrame.shift: Shift index by desired number of periods with an\n        optional time freq.\n\n    Notes\n    -----\n    For boolean dtypes, this uses :meth:`operator.xor` rather than\n    :meth:`operator.sub`.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n    ...                    'b': [1, 1, 2, 3, 5, 8],\n    ...                    'c': [1, 4, 9, 16, 25, 36]})\n    >>> df\n       a  b   c\n    0  1  1   1\n    1  2  1   4\n    2  3  2   9\n    3  4  3  16\n    4  5  5  25\n    5  6  8  36\n\n    >>> df.diff()\n         a    b     c\n    0  NaN  NaN   NaN\n    1  1.0  0.0   3.0\n    2  1.0  1.0   5.0\n    3  1.0  1.0   7.0\n    4  1.0  2.0   9.0\n    5  1.0  3.0  11.0\n\n    Difference with previous column\n\n    >>> df.diff(axis=1)\n        a    b     c\n    0 NaN  0.0   0.0\n    1 NaN -1.0   3.0\n    2 NaN -1.0   7.0\n    3 NaN -1.0  13.0\n    4 NaN  0.0  20.0\n    5 NaN  2.0  28.0\n\n    Difference with 3rd previous row\n\n    >>> df.diff(periods=3)\n         a    b     c\n    0  NaN  NaN   NaN\n    1  NaN  NaN   NaN\n    2  NaN  NaN   NaN\n    3  3.0  2.0  15.0\n    4  3.0  4.0  21.0\n    5  3.0  6.0  27.0\n\n    Difference with following row\n\n    >>> df.diff(periods=-1)\n         a    b     c\n    0 -1.0  0.0  -3.0\n    1 -1.0 -1.0  -5.0\n    2 -1.0 -1.0  -7.0\n    3 -1.0 -2.0  -9.0\n    4 -1.0 -3.0 -11.0\n    5  NaN  NaN   NaN\n    \"\"\"\n    bm_axis = self._get_block_manager_axis(axis)\n    new_data = self._data.diff(n=periods, axis=bm_axis)\n    return self._constructor(new_data)",
                            "def _gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]:\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self\n    elif subset.ndim == 1:\n        return subset\n    return subset[key]",
                            "@Substitution(see_also=_agg_summary_and_see_also_doc, examples=_agg_examples_doc, versionadded='\\n.. versionadded:: 0.20.0\\n', **_shared_doc_kwargs)\n@Appender(_shared_docs['aggregate'])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    result = None\n    try:\n        result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n    except TypeError:\n        pass\n    if result is None:\n        return self.apply(func, axis=axis, args=args, **kwargs)\n    return result",
                            "def _aggregate(self, arg, axis=0, *args, **kwargs):\n    if axis == 1:\n        result, how = self.T._aggregate(arg, *args, **kwargs)\n        result = result.T if result is not None else result\n        return (result, how)\n    return super()._aggregate(arg, *args, **kwargs)",
                            "@Appender(_shared_docs['transform'] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs) -> 'DataFrame':\n    axis = self._get_axis_number(axis)\n    if axis == 1:\n        return self.T.transform(func, *args, **kwargs).T\n    return super().transform(func, *args, **kwargs)",
                            "def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n    \"\"\"\n    Apply a function along an axis of the DataFrame.\n\n    Objects passed to the function are Series objects whose index is\n    either the DataFrame's index (``axis=0``) or the DataFrame's columns\n    (``axis=1``). By default (``result_type=None``), the final return type\n    is inferred from the return type of the applied function. Otherwise,\n    it depends on the `result_type` argument.\n\n    Parameters\n    ----------\n    func : function\n        Function to apply to each column or row.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis along which the function is applied:\n\n        * 0 or 'index': apply function to each column.\n        * 1 or 'columns': apply function to each row.\n\n    raw : bool, default False\n        Determines if row or column is passed as a Series or ndarray object:\n\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray objects\n          instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n\n    result_type : {'expand', 'reduce', 'broadcast', None}, default None\n        These only act when ``axis=1`` (columns):\n\n        * 'expand' : list-like results will be turned into columns.\n        * 'reduce' : returns a Series if possible rather than expanding\n          list-like results. This is the opposite of 'expand'.\n        * 'broadcast' : results will be broadcast to the original shape\n          of the DataFrame, the original index and columns will be\n          retained.\n\n        The default behaviour (None) depends on the return value of the\n        applied function: list-like results will be returned as a Series\n        of those. However if the apply function returns a Series these\n        are expanded to columns.\n\n        .. versionadded:: 0.23.0\n\n    args : tuple\n        Positional arguments to pass to `func` in addition to the\n        array/series.\n    **kwds\n        Additional keyword arguments to pass as keywords arguments to\n        `func`.\n\n    Returns\n    -------\n    Series or DataFrame\n        Result of applying ``func`` along the given axis of the\n        DataFrame.\n\n    See Also\n    --------\n    DataFrame.applymap: For elementwise operations.\n    DataFrame.aggregate: Only perform aggregating type operations.\n    DataFrame.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n    >>> df\n       A  B\n    0  4  9\n    1  4  9\n    2  4  9\n\n    Using a numpy universal function (in this case the same as\n    ``np.sqrt(df)``):\n\n    >>> df.apply(np.sqrt)\n         A    B\n    0  2.0  3.0\n    1  2.0  3.0\n    2  2.0  3.0\n\n    Using a reducing function on either axis\n\n    >>> df.apply(np.sum, axis=0)\n    A    12\n    B    27\n    dtype: int64\n\n    >>> df.apply(np.sum, axis=1)\n    0    13\n    1    13\n    2    13\n    dtype: int64\n\n    Returning a list-like will result in a Series\n\n    >>> df.apply(lambda x: [1, 2], axis=1)\n    0    [1, 2]\n    1    [1, 2]\n    2    [1, 2]\n    dtype: object\n\n    Passing result_type='expand' will expand list-like results\n    to columns of a Dataframe\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n       0  1\n    0  1  2\n    1  1  2\n    2  1  2\n\n    Returning a Series inside the function is similar to passing\n    ``result_type='expand'``. The resulting column names\n    will be the Series index.\n\n    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n       foo  bar\n    0    1    2\n    1    1    2\n    2    1    2\n\n    Passing ``result_type='broadcast'`` will ensure the same shape\n    result, whether list-like or scalar is returned by the function,\n    and broadcast it along the axis. The resulting column names will\n    be the originals.\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n       A  B\n    0  1  2\n    1  1  2\n    2  1  2\n    \"\"\"\n    from pandas.core.apply import frame_apply\n    op = frame_apply(self, func=func, axis=axis, raw=raw, result_type=result_type, args=args, kwds=kwds)\n    return op.get_result()",
                            "def applymap(self, func) -> 'DataFrame':\n    \"\"\"\n    Apply a function to a Dataframe elementwise.\n\n    This method applies a function that accepts and returns a scalar\n    to every element of a DataFrame.\n\n    Parameters\n    ----------\n    func : callable\n        Python function, returns a single value from a single value.\n\n    Returns\n    -------\n    DataFrame\n        Transformed DataFrame.\n\n    See Also\n    --------\n    DataFrame.apply : Apply a function along input axis of DataFrame.\n\n    Notes\n    -----\n    In the current implementation applymap calls `func` twice on the\n    first column/row to decide whether it can take a fast or slow\n    code path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    column/row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n    >>> df\n           0      1\n    0  1.000  2.120\n    1  3.356  4.567\n\n    >>> df.applymap(lambda x: len(str(x)))\n       0  1\n    0  3  4\n    1  5  5\n\n    Note that a vectorized version of `func` often exists, which will\n    be much faster. You could square each number elementwise.\n\n    >>> df.applymap(lambda x: x**2)\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n\n    But it's better to avoid applymap in that case.\n\n    >>> df ** 2\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n    \"\"\"\n\n    def infer(x):\n        if x.empty:\n            return lib.map_infer(x, func)\n        return lib.map_infer(x.astype(object).values, func)\n    return self.apply(infer)",
                            "def append(self, other, ignore_index=False, verify_integrity=False, sort=False) -> 'DataFrame':\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            if not ignore_index:\n                raise TypeError('Can only append a dict if ignore_index=True')\n            other = Series(other)\n        if other.name is None and (not ignore_index):\n            raise TypeError('Can only append a Series if ignore_index=True or if the Series has a name')\n        index = Index([other.name], name=self.index.name)\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False).to_frame().T.infer_objects().rename_axis(index.names, copy=False)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n    from pandas.core.reshape.concat import concat\n    if isinstance(other, (list, tuple)):\n        to_concat = [self, *other]\n    else:\n        to_concat = [self, other]\n    return concat(to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity, sort=sort)",
                            "def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False) -> 'DataFrame':\n    \"\"\"\n    Join columns of another DataFrame.\n\n    Join columns with `other` DataFrame either on index or on a key\n    column. Efficiently join multiple DataFrame objects by index at once by\n    passing a list.\n\n    Parameters\n    ----------\n    other : DataFrame, Series, or list of DataFrame\n        Index should be similar to one of the columns in this one. If a\n        Series is passed, its name attribute must be set, and that will be\n        used as the column name in the resulting joined DataFrame.\n    on : str, list of str, or array-like, optional\n        Column or index level name(s) in the caller to join on the index\n        in `other`, otherwise joins index-on-index. If multiple\n        values given, the `other` DataFrame must have a MultiIndex. Can\n        pass an array as the join key if it is not already contained in\n        the calling DataFrame. Like an Excel VLOOKUP operation.\n    how : {'left', 'right', 'outer', 'inner'}, default 'left'\n        How to handle the operation of the two objects.\n\n        * left: use calling frame's index (or column if on is specified)\n        * right: use `other`'s index.\n        * outer: form union of calling frame's index (or column if on is\n          specified) with `other`'s index, and sort it.\n          lexicographically.\n        * inner: form intersection of calling frame's index (or column if\n          on is specified) with `other`'s index, preserving the order\n          of the calling's one.\n    lsuffix : str, default ''\n        Suffix to use from left frame's overlapping columns.\n    rsuffix : str, default ''\n        Suffix to use from right frame's overlapping columns.\n    sort : bool, default False\n        Order result DataFrame lexicographically by the join key. If False,\n        the order of the join key depends on the join type (how keyword).\n\n    Returns\n    -------\n    DataFrame\n        A dataframe containing columns from both the caller and `other`.\n\n    See Also\n    --------\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Notes\n    -----\n    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n    passing a list of `DataFrame` objects.\n\n    Support for specifying index levels as the `on` parameter was added\n    in version 0.23.0.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n    >>> df\n      key   A\n    0  K0  A0\n    1  K1  A1\n    2  K2  A2\n    3  K3  A3\n    4  K4  A4\n    5  K5  A5\n\n    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n    ...                       'B': ['B0', 'B1', 'B2']})\n\n    >>> other\n      key   B\n    0  K0  B0\n    1  K1  B1\n    2  K2  B2\n\n    Join DataFrames using their indexes.\n\n    >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n      key_caller   A key_other    B\n    0         K0  A0        K0   B0\n    1         K1  A1        K1   B1\n    2         K2  A2        K2   B2\n    3         K3  A3       NaN  NaN\n    4         K4  A4       NaN  NaN\n    5         K5  A5       NaN  NaN\n\n    If we want to join using the key columns, we need to set key to be\n    the index in both `df` and `other`. The joined DataFrame will have\n    key as its index.\n\n    >>> df.set_index('key').join(other.set_index('key'))\n          A    B\n    key\n    K0   A0   B0\n    K1   A1   B1\n    K2   A2   B2\n    K3   A3  NaN\n    K4   A4  NaN\n    K5   A5  NaN\n\n    Another option to join using the key columns is to use the `on`\n    parameter. DataFrame.join always uses `other`'s index but we can use\n    any column in `df`. This method preserves the original DataFrame's\n    index in the result.\n\n    >>> df.join(other.set_index('key'), on='key')\n      key   A    B\n    0  K0  A0   B0\n    1  K1  A1   B1\n    2  K2  A2   B2\n    3  K3  A3  NaN\n    4  K4  A4  NaN\n    5  K5  A5  NaN\n    \"\"\"\n    return self._join_compat(other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort)",
                            "def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError('Other Series must have a name')\n        other = DataFrame({other.name: other})\n    if isinstance(other, DataFrame):\n        return merge(self, other, left_on=on, how=how, left_index=on is None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n    else:\n        if on is not None:\n            raise ValueError('Joining multiple DataFrames only supported for joining on index')\n        frames = [self] + list(other)\n        can_concat = all((df.index.is_unique for df in frames))\n        if can_concat:\n            if how == 'left':\n                res = concat(frames, axis=1, join='outer', verify_integrity=True, sort=sort)\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(frames, axis=1, join=how, verify_integrity=True, sort=sort)\n        joined = frames[0]\n        for frame in frames[1:]:\n            joined = merge(joined, frame, how=how, left_index=True, right_index=True)\n        return joined",
                            "@Substitution('')\n@Appender(_merge_doc, indents=2)\ndef merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None) -> 'DataFrame':\n    from pandas.core.reshape.merge import merge\n    return merge(self, right, how=how, on=on, left_on=left_on, right_on=right_on, left_index=left_index, right_index=right_index, sort=sort, suffixes=suffixes, copy=copy, indicator=indicator, validate=validate)",
                            "def round(self, decimals=0, *args, **kwargs) -> 'DataFrame':\n    \"\"\"\n    Round a DataFrame to a variable number of decimal places.\n\n    Parameters\n    ----------\n    decimals : int, dict, Series\n        Number of decimal places to round each column to. If an int is\n        given, round each column to the same number of places.\n        Otherwise dict and Series round to variable numbers of places.\n        Column names should be in the keys if `decimals` is a\n        dict-like, or in the index if `decimals` is a Series. Any\n        columns not included in `decimals` will be left as is. Elements\n        of `decimals` which are not columns of the input will be\n        ignored.\n    *args\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n    **kwargs\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame with the affected columns rounded to the specified\n        number of decimal places.\n\n    See Also\n    --------\n    numpy.around : Round a numpy array to the given number of decimals.\n    Series.round : Round a Series to the given number of decimals.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df\n        dogs  cats\n    0  0.21  0.32\n    1  0.01  0.67\n    2  0.66  0.03\n    3  0.21  0.18\n\n    By providing an integer each column is rounded to the same number\n    of decimal places\n\n    >>> df.round(1)\n        dogs  cats\n    0   0.2   0.3\n    1   0.0   0.7\n    2   0.7   0.0\n    3   0.2   0.2\n\n    With a dict, the number of places for specific columns can be\n    specified with the column names as key and the number of decimal\n    places as value\n\n    >>> df.round({'dogs': 1, 'cats': 0})\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n\n    Using a Series, the number of places for specific columns can be\n    specified with the column names as index and the number of\n    decimal places as value\n\n    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n    >>> df.round(decimals)\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    def _dict_round(df, decimals):\n        for col, vals in df.items():\n            try:\n                yield _series_round(vals, decimals[col])\n            except KeyError:\n                yield vals\n\n    def _series_round(s, decimals):\n        if is_integer_dtype(s) or is_float_dtype(s):\n            return s.round(decimals)\n        return s\n    nv.validate_round(args, kwargs)\n    if isinstance(decimals, (dict, Series)):\n        if isinstance(decimals, Series):\n            if not decimals.index.is_unique:\n                raise ValueError('Index of decimals must be unique')\n        new_cols = list(_dict_round(self, decimals))\n    elif is_integer(decimals):\n        new_cols = [_series_round(v, decimals) for _, v in self.items()]\n    else:\n        raise TypeError('decimals must be an integer, a dict-like or a Series')\n    if len(new_cols) > 0:\n        return self._constructor(concat(new_cols, axis=1), index=self.index, columns=self.columns)\n    else:\n        return self",
                            "def corr(self, method='pearson', min_periods=1) -> 'DataFrame':\n    \"\"\"\n    Compute pairwise correlation of columns, excluding NA/null values.\n\n    Parameters\n    ----------\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float. Note that the returned matrix from corr\n            will have 1 along the diagonals and will be symmetric\n            regardless of the callable's behavior.\n\n            .. versionadded:: 0.24.0\n\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result. Currently only available for Pearson\n        and Spearman correlation.\n\n    Returns\n    -------\n    DataFrame\n        Correlation matrix.\n\n    See Also\n    --------\n    DataFrame.corrwith\n    Series.corr\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.corr(method=histogram_intersection)\n          dogs  cats\n    dogs   1.0   0.3\n    cats   0.3   1.0\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n    if method == 'pearson':\n        correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n    elif method == 'spearman':\n        correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=min_periods)\n    elif method == 'kendall' or callable(method):\n        if min_periods is None:\n            min_periods = 1\n        mat = ensure_float64(mat).T\n        corrf = nanops.get_corr_func(method)\n        K = len(cols)\n        correl = np.empty((K, K), dtype=float)\n        mask = np.isfinite(mat)\n        for i, ac in enumerate(mat):\n            for j, bc in enumerate(mat):\n                if i > j:\n                    continue\n                valid = mask[i] & mask[j]\n                if valid.sum() < min_periods:\n                    c = np.nan\n                elif i == j:\n                    c = 1.0\n                elif not valid.all():\n                    c = corrf(ac[valid], bc[valid])\n                else:\n                    c = corrf(ac, bc)\n                correl[i, j] = c\n                correl[j, i] = c\n    else:\n        raise ValueError(f\"method must be either 'pearson', 'spearman', 'kendall', or a callable, '{method}' was supplied\")\n    return self._constructor(correl, index=idx, columns=cols)",
                            "def cov(self, min_periods=None) -> 'DataFrame':\n    \"\"\"\n    Compute pairwise covariance of columns, excluding NA/null values.\n\n    Compute the pairwise covariance among the series of a DataFrame.\n    The returned data frame is the `covariance matrix\n    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n    of the DataFrame.\n\n    Both NA and null values are automatically excluded from the\n    calculation. (See the note below about bias from missing values.)\n    A threshold can be set for the minimum number of\n    observations for each value created. Comparisons with observations\n    below this threshold will be returned as ``NaN``.\n\n    This method is generally used for the analysis of time series data to\n    understand the relationship between different measures\n    across time.\n\n    Parameters\n    ----------\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result.\n\n    Returns\n    -------\n    DataFrame\n        The covariance matrix of the series of the DataFrame.\n\n    See Also\n    --------\n    Series.cov : Compute covariance with another Series.\n    core.window.EWM.cov: Exponential weighted sample covariance.\n    core.window.Expanding.cov : Expanding sample covariance.\n    core.window.Rolling.cov : Rolling sample covariance.\n\n    Notes\n    -----\n    Returns the covariance matrix of the DataFrame's time series.\n    The covariance is normalized by N-1.\n\n    For DataFrames that have Series that are missing data (assuming that\n    data is `missing at random\n    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n    the returned covariance matrix will be an unbiased estimate\n    of the variance and covariance between the member Series.\n\n    However, for many applications this estimate may not be acceptable\n    because the estimate covariance matrix is not guaranteed to be positive\n    semi-definite. This could lead to estimate correlations having\n    absolute values which are greater than one, and/or a non-invertible\n    covariance matrix. See `Estimation of covariance matrices\n    <https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n    matrices>`__ for more details.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.cov()\n              dogs      cats\n    dogs  0.666667 -1.000000\n    cats -1.000000  1.666667\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(1000, 5),\n    ...                   columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df.cov()\n              a         b         c         d         e\n    a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n    b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n    e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n    **Minimum number of periods**\n\n    This method also supports an optional ``min_periods`` keyword\n    that specifies the required minimum number of non-NA observations for\n    each column pair in order to have a valid result:\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(20, 3),\n    ...                   columns=['a', 'b', 'c'])\n    >>> df.loc[df.index[:5], 'a'] = np.nan\n    >>> df.loc[df.index[5:10], 'b'] = np.nan\n    >>> df.cov(min_periods=12)\n              a         b         c\n    a  0.316741       NaN -0.150812\n    b       NaN  1.248003  0.191417\n    c -0.150812  0.191417  0.895202\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n    if notna(mat).all():\n        if min_periods is not None and min_periods > len(mat):\n            baseCov = np.empty((mat.shape[1], mat.shape[1]))\n            baseCov.fill(np.nan)\n        else:\n            baseCov = np.cov(mat.T)\n        baseCov = baseCov.reshape((len(cols), len(cols)))\n    else:\n        baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)\n    return self._constructor(baseCov, index=idx, columns=cols)",
                            "def corrwith(self, other, axis=0, drop=False, method='pearson') -> Series:\n    \"\"\"\n    Compute pairwise correlation.\n\n    Pairwise correlation is computed between rows or columns of\n    DataFrame with rows or columns of Series or DataFrame. DataFrames\n    are first aligned along both axes before computing the\n    correlations.\n\n    Parameters\n    ----------\n    other : DataFrame, Series\n        Object with which to compute correlations.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n        row-wise.\n    drop : bool, default False\n        Drop missing indices from result.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Pairwise correlations.\n\n    See Also\n    --------\n    DataFrame.corr\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    this = self._get_numeric_data()\n    if isinstance(other, Series):\n        return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n    other = other._get_numeric_data()\n    left, right = this.align(other, join='inner', copy=False)\n    if axis == 1:\n        left = left.T\n        right = right.T\n    if method == 'pearson':\n        left = left + right * 0\n        right = right + left * 0\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n    elif method in ['kendall', 'spearman'] or callable(method):\n\n        def c(x):\n            return nanops.nancorr(x[0], x[1], method=method)\n        correl = Series(map(c, zip(left.values.T, right.values.T)), index=left.columns)\n    else:\n        raise ValueError(f\"Invalid method {method} was passed, valid methods are: 'pearson', 'kendall', 'spearman', or callable\")\n    if not drop:\n        raxis = 1 if axis == 0 else 0\n        result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n        idx_diff = result_index.difference(correl.index)\n        if len(idx_diff) > 0:\n            correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n    return correl",
                            "def count(self, axis=0, level=None, numeric_only=False):\n    \"\"\"\n    Count non-NA cells for each column or row.\n\n    The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n    on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index' counts are generated for each column.\n        If 1 or 'columns' counts are generated for each **row**.\n    level : int or str, optional\n        If the axis is a `MultiIndex` (hierarchical), count along a\n        particular `level`, collapsing into a `DataFrame`.\n        A `str` specifies the level name.\n    numeric_only : bool, default False\n        Include only `float`, `int` or `boolean` data.\n\n    Returns\n    -------\n    Series or DataFrame\n        For each column/row the number of non-NA/null entries.\n        If `level` is specified returns a `DataFrame`.\n\n    See Also\n    --------\n    Series.count: Number of non-NA elements in a Series.\n    DataFrame.shape: Number of DataFrame rows and columns (including NA\n        elements).\n    DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n        elements.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary:\n\n    >>> df = pd.DataFrame({\"Person\":\n    ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n    ...                    \"Age\": [24., np.nan, 21., 33, 26],\n    ...                    \"Single\": [False, True, True, True, False]})\n    >>> df\n       Person   Age  Single\n    0    John  24.0   False\n    1    Myla   NaN    True\n    2   Lewis  21.0    True\n    3    John  33.0    True\n    4    Myla  26.0   False\n\n    Notice the uncounted NA values:\n\n    >>> df.count()\n    Person    5\n    Age       4\n    Single    5\n    dtype: int64\n\n    Counts for each **row**:\n\n    >>> df.count(axis='columns')\n    0    3\n    1    2\n    2    3\n    3    3\n    4    3\n    dtype: int64\n\n    Counts for one level of a `MultiIndex`:\n\n    >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n            Age\n    Person\n    John      2\n    Lewis     1\n    Myla      1\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if level is not None:\n        return self._count_level(level, axis=axis, numeric_only=numeric_only)\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n    if len(frame._get_axis(axis)) == 0:\n        result = Series(0, index=frame._get_agg_axis(axis))\n    elif frame._is_mixed_type or frame._data.any_extension_types:\n        result = notna(frame).sum(axis=axis)\n    else:\n        series_counts = notna(frame).sum(axis=axis)\n        counts = series_counts.values\n        result = Series(counts, index=frame._get_agg_axis(axis))\n    return result.astype('int64')",
                            "def _count_level(self, level, axis=0, numeric_only=False):\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n    count_axis = frame._get_axis(axis)\n    agg_axis = frame._get_agg_axis(axis)\n    if not isinstance(count_axis, ABCMultiIndex):\n        raise TypeError(f'Can only count levels on hierarchical {self._get_axis_name(axis)}.')\n    if frame._is_mixed_type:\n        mask = notna(frame).values\n    else:\n        mask = notna(frame.values)\n    if axis == 1:\n        mask = mask.T\n    if isinstance(level, str):\n        level = count_axis._get_level_number(level)\n    level_name = count_axis._names[level]\n    level_index = count_axis.levels[level]._shallow_copy(name=level_name)\n    level_codes = ensure_int64(count_axis.codes[level])\n    counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0)\n    result = DataFrame(counts, index=level_index, columns=agg_axis)\n    if axis == 1:\n        return result.T\n    else:\n        return result",
                            "def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds):\n    dtype_is_dt = self.dtypes.apply(lambda x: x.kind == 'M')\n    if numeric_only is None and name in ['mean', 'median'] and dtype_is_dt.any():\n        warnings.warn('DataFrame.mean and DataFrame.median with numeric_only=None will include datetime64 and datetime64tz columns in a future version.', FutureWarning, stacklevel=3)\n        cols = self.columns[~dtype_is_dt]\n        self = self[cols]\n    if axis is None and filter_type == 'bool':\n        labels = None\n        constructor = None\n    else:\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == 'numeric':\n            data = self._get_numeric_data()\n        elif filter_type == 'bool':\n            if axis_matters:\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:\n            msg = f'Generating numeric_only data with filter_type {filter_type} not supported.'\n            raise NotImplementedError(msg)\n        return data\n    if numeric_only is not None and axis in [0, 1]:\n        df = self\n        if numeric_only is True:\n            df = _get_data(axis_matters=True)\n        if axis == 1:\n            df = df.T\n            axis = 0\n        out_dtype = 'bool' if filter_type == 'bool' else None\n\n        def blk_func(values):\n            if values.ndim == 1 and (not isinstance(values, np.ndarray)):\n                return op(values, axis=0, skipna=skipna, **kwds)\n            return op(values, axis=1, skipna=skipna, **kwds)\n        res = df._data.reduce(blk_func)\n        assert isinstance(res, dict)\n        if len(res):\n            assert len(res) == max(list(res.keys())) + 1, res.keys()\n        out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n        out.index = df.columns\n        return out\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n            if filter_type == 'bool' and is_object_dtype(values) and (axis is None):\n                result = np.bool_(result)\n        except TypeError:\n            if filter_type is None and axis == 0:\n                from pandas.core.apply import frame_apply\n                opa = frame_apply(self, func=f, result_type='expand', ignore_failures=True)\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n            data = _get_data(axis_matters=False)\n            with np.errstate(all='ignore'):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n    if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == 'numeric':\n                result = result.astype(np.float64)\n            elif filter_type == 'bool' and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n    if constructor is not None:\n        result = self._constructor_sliced(result, index=labels)\n    return result",
                            "def nunique(self, axis=0, dropna=True) -> Series:\n    \"\"\"\n    Count distinct observations over requested axis.\n\n    Return Series with number of distinct observations. Can ignore NaN\n    values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n        column-wise.\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    Series\n\n    See Also\n    --------\n    Series.nunique: Method nunique for Series.\n    DataFrame.count: Count non-NA cells for each column or row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n    >>> df.nunique()\n    A    3\n    B    1\n    dtype: int64\n\n    >>> df.nunique(axis=1)\n    0    1\n    1    2\n    2    2\n    dtype: int64\n    \"\"\"\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)",
                            "def idxmin(self, axis=0, skipna=True) -> Series:\n    \"\"\"\n    Return index of first occurrence of minimum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of minima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmin\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmin``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                            "def idxmax(self, axis=0, skipna=True) -> Series:\n    \"\"\"\n    Return index of first occurrence of maximum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of maxima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmax\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmax``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                            "def _get_agg_axis(self, axis_num):\n    \"\"\"\n    Let's be explicit about this.\n    \"\"\"\n    if axis_num == 0:\n        return self.columns\n    elif axis_num == 1:\n        return self.index\n    else:\n        raise ValueError(f'Axis must be 0 or 1 (got {repr(axis_num)})')",
                            "def mode(self, axis=0, numeric_only=False, dropna=True) -> 'DataFrame':\n    \"\"\"\n    Get the mode(s) of each element along the selected axis.\n\n    The mode of a set of values is the value that appears most often.\n    It can be multiple values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to iterate over while searching for the mode:\n\n        * 0 or 'index' : get mode of each column\n        * 1 or 'columns' : get mode of each row.\n\n    numeric_only : bool, default False\n        If True, only apply to numeric columns.\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The modes of each column or row.\n\n    See Also\n    --------\n    Series.mode : Return the highest frequency value in a Series.\n    Series.value_counts : Return the counts of values in a Series.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 2, 2),\n    ...                    ('mammal', 4, np.nan),\n    ...                    ('arthropod', 8, 0),\n    ...                    ('bird', 2, np.nan)],\n    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n    ...                   columns=('species', 'legs', 'wings'))\n    >>> df\n               species  legs  wings\n    falcon        bird     2    2.0\n    horse       mammal     4    NaN\n    spider   arthropod     8    0.0\n    ostrich       bird     2    NaN\n\n    By default, missing values are not considered, and the mode of wings\n    are both 0 and 2. The second row of species and legs contains ``NaN``,\n    because they have only one mode, but the DataFrame has two rows.\n\n    >>> df.mode()\n      species  legs  wings\n    0    bird   2.0    0.0\n    1     NaN   NaN    2.0\n\n    Setting ``dropna=False`` ``NaN`` values are considered and they can be\n    the mode (like for wings).\n\n    >>> df.mode(dropna=False)\n      species  legs  wings\n    0    bird     2    NaN\n\n    Setting ``numeric_only=True``, only the mode of numeric columns is\n    computed, and columns of other types are ignored.\n\n    >>> df.mode(numeric_only=True)\n       legs  wings\n    0   2.0    0.0\n    1   NaN    2.0\n\n    To compute the mode over columns and not rows, use the axis parameter:\n\n    >>> df.mode(axis='columns', numeric_only=True)\n               0    1\n    falcon   2.0  NaN\n    horse    4.0  NaN\n    spider   0.0  8.0\n    ostrich  2.0  NaN\n    \"\"\"\n    data = self if not numeric_only else self._get_numeric_data()\n\n    def f(s):\n        return s.mode(dropna=dropna)\n    return data.apply(f, axis=axis)",
                            "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n    ...                   columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n\n    Specifying `numeric_only=False` will also compute the quantile of\n    datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2],\n    ...                    'B': [pd.Timestamp('2010'),\n    ...                          pd.Timestamp('2011')],\n    ...                    'C': [pd.Timedelta('1 days'),\n    ...                          pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    validate_percentile(q)\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n    if is_transposed:\n        data = data.T\n    if len(data.columns) == 0:\n        cols = Index([], name=self.columns.name)\n        if is_list_like(q):\n            return self._constructor([], index=q, columns=cols)\n        return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n    result = data._data.quantile(qs=q, axis=1, interpolation=interpolation, transposed=is_transposed)\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n    if is_transposed:\n        result = result.T\n    return result",
                            "def to_timestamp(self, freq=None, how='start', axis=0, copy=True) -> 'DataFrame':\n    \"\"\"\n    Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    DataFrame with DatetimeIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        assert isinstance(self.index, (ABCDatetimeIndex, ABCPeriodIndex))\n        new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n    elif axis == 1:\n        assert isinstance(self.columns, (ABCDatetimeIndex, ABCPeriodIndex))\n        new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n    else:\n        raise AssertionError(f'Axis must be 0 or 1. Got {axis}')\n    return self._constructor(new_data)",
                            "def to_period(self, freq=None, axis=0, copy=True) -> 'DataFrame':\n    \"\"\"\n    Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n    Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default\n        Frequency of the PeriodIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    TimeSeries with PeriodIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        assert isinstance(self.index, ABCDatetimeIndex)\n        new_data.set_axis(1, self.index.to_period(freq=freq))\n    elif axis == 1:\n        assert isinstance(self.columns, ABCDatetimeIndex)\n        new_data.set_axis(0, self.columns.to_period(freq=freq))\n    else:\n        raise AssertionError(f'Axis must be 0 or 1. Got {axis}')\n    return self._constructor(new_data)",
                            "def isin(self, values) -> 'DataFrame':\n    \"\"\"\n    Whether each element in the DataFrame is contained in values.\n\n    Parameters\n    ----------\n    values : iterable, Series, DataFrame or dict\n        The result will only be true at a location if all the\n        labels match. If `values` is a Series, that's the index. If\n        `values` is a dict, the keys must be the column names,\n        which must match. If `values` is a DataFrame,\n        then both the index and column labels must match.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame of booleans showing whether each element in the DataFrame\n        is contained in values.\n\n    See Also\n    --------\n    DataFrame.eq: Equality test for DataFrame.\n    Series.isin: Equivalent method on Series.\n    Series.str.contains: Test if pattern or regex is contained within a\n        string of a Series or Index.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n    ...                   index=['falcon', 'dog'])\n    >>> df\n            num_legs  num_wings\n    falcon         2          2\n    dog            4          0\n\n    When ``values`` is a list check whether every value in the DataFrame\n    is present in the list (which animals have 0 or 2 legs or wings)\n\n    >>> df.isin([0, 2])\n            num_legs  num_wings\n    falcon      True       True\n    dog        False       True\n\n    When ``values`` is a dict, we can pass values to check for each\n    column separately:\n\n    >>> df.isin({'num_wings': [0, 3]})\n            num_legs  num_wings\n    falcon     False      False\n    dog        False       True\n\n    When ``values`` is a Series or DataFrame the index and column must\n    match. Note that 'falcon' does not match based on the number of legs\n    in df2.\n\n    >>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n    ...                      index=['spider', 'falcon'])\n    >>> df.isin(other)\n            num_legs  num_wings\n    falcon      True       True\n    dog        False      False\n    \"\"\"\n    if isinstance(values, dict):\n        from pandas.core.reshape.concat import concat\n        values = collections.defaultdict(list, values)\n        return self._ensure_type(concat((self.iloc[:, [i]].isin(values[col]) for i, col in enumerate(self.columns)), axis=1))\n    elif isinstance(values, Series):\n        if not values.index.is_unique:\n            raise ValueError('cannot compute isin with a duplicate axis.')\n        return self.eq(values.reindex_like(self), axis='index')\n    elif isinstance(values, DataFrame):\n        if not (values.columns.is_unique and values.index.is_unique):\n            raise ValueError('cannot compute isin with a duplicate axis.')\n        return self.eq(values.reindex_like(self))\n    else:\n        if not is_list_like(values):\n            raise TypeError(f\"only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a '{type(values).__name__}'\")\n        return DataFrame(algorithms.isin(self.values.ravel(), values).reshape(self.shape), self.index, self.columns)",
                            "def extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]:\n    extracted_dtypes = [unique_dtype for unique_dtype in unique_dtypes if issubclass(unique_dtype.type, tuple(dtypes_set))]\n    return extracted_dtypes",
                            "def reindexer(value):\n    if value.index.equals(self.index) or not len(self.index):\n        value = value._values.copy()\n    else:\n        try:\n            value = value.reindex(self.index)._values\n        except ValueError as err:\n            if not value.index.is_unique:\n                raise err\n            raise TypeError('incompatible index of inserted column with frame index')\n    return value",
                            "def _maybe_casted_values(index, labels=None):\n    values = index._values\n    if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n        if values.dtype == np.object_:\n            values = lib.maybe_convert_objects(values)\n    if labels is not None:\n        mask = labels == -1\n        if mask.all():\n            values = np.empty(len(mask))\n            values.fill(np.nan)\n        else:\n            values = values.take(labels)\n            values_type = type(values)\n            values_dtype = values.dtype\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values._data\n            if mask.any():\n                values, _ = maybe_upcast_putmask(values, mask, np.nan)\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values_type(values, dtype=values_dtype)\n    return values",
                            "def f(vals):\n    labels, shape = algorithms.factorize(vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n    return (labels.astype('i8', copy=False), len(shape))",
                            "def extract_values(arr):\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n    if needs_i8_conversion(arr):\n        if is_extension_array_dtype(arr.dtype):\n            arr = arr.asi8\n        else:\n            arr = arr.view('i8')\n    return arr",
                            "def combiner(x, y):\n    mask = isna(x)\n    if isinstance(mask, (ABCIndexClass, ABCSeries)):\n        mask = mask._values\n    x_values = extract_values(x)\n    y_values = extract_values(y)\n    if y.name not in self.columns:\n        return y_values\n    return expressions.where(mask, y_values, x_values)",
                            "def infer(x):\n    if x.empty:\n        return lib.map_infer(x, func)\n    return lib.map_infer(x.astype(object).values, func)",
                            "def _dict_round(df, decimals):\n    for col, vals in df.items():\n        try:\n            yield _series_round(vals, decimals[col])\n        except KeyError:\n            yield vals",
                            "def _series_round(s, decimals):\n    if is_integer_dtype(s) or is_float_dtype(s):\n        return s.round(decimals)\n    return s",
                            "def f(x):\n    return op(x, axis=axis, skipna=skipna, **kwds)",
                            "def _get_data(axis_matters):\n    if filter_type is None or filter_type == 'numeric':\n        data = self._get_numeric_data()\n    elif filter_type == 'bool':\n        if axis_matters:\n            data = self._get_bool_data() if axis == 0 else self\n        else:\n            data = self._get_bool_data()\n    else:\n        msg = f'Generating numeric_only data with filter_type {filter_type} not supported.'\n        raise NotImplementedError(msg)\n    return data",
                            "def f(s):\n    return s.mode(dropna=dropna)",
                            "def _arith_op(left, right):\n    left, right = ops.fill_binop(left, right, fill_value)\n    return func(left, right)",
                            "def blk_func(values):\n    if values.ndim == 1 and (not isinstance(values, np.ndarray)):\n        return op(values, axis=0, skipna=skipna, **kwds)\n    return op(values, axis=1, skipna=skipna, **kwds)",
                            "def c(x):\n    return nanops.nancorr(x[0], x[1], method=method)"
                        ],
                        "constructor_variables": [
                            "dtype",
                            "columns",
                            "index",
                            "values",
                            "exc",
                            "data",
                            "arr",
                            "data_columns",
                            "mask",
                            "mgr"
                        ],
                        "class_level_variables": [
                            "_internal_names_set",
                            "_typ",
                            "_constructor_sliced",
                            "_deprecations",
                            "_accessors",
                            "T",
                            "_agg_summary_and_see_also_doc",
                            "_agg_examples_doc",
                            "agg",
                            "_AXIS_ORDERS",
                            "_AXIS_NUMBERS",
                            "_AXIS_NAMES",
                            "_AXIS_REVERSED",
                            "_AXIS_LEN",
                            "_info_axis_number",
                            "_info_axis_name",
                            "index",
                            "columns",
                            "plot",
                            "hist",
                            "boxplot",
                            "sparse"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_constructor(self) -> Type['DataFrame']",
                            "_constructor_expanddim(self)",
                            "__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
                            "axes(self) -> List[Index]",
                            "shape(self) -> Tuple[int, int]",
                            "_is_homogeneous_type(self) -> bool",
                            "_repr_fits_vertical_(self) -> bool",
                            "_repr_fits_horizontal_(self, ignore_width: bool=False) -> bool",
                            "_info_repr(self) -> bool",
                            "__repr__(self) -> str",
                            "_repr_html_(self) -> Optional[str]",
                            "to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]",
                            "style(self) -> 'Styler'",
                            "items(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                            "iteritems(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                            "iterrows(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                            "itertuples(self, index=True, name='Pandas')",
                            "__len__(self) -> int",
                            "dot(self, other)",
                            "__matmul__(self, other)",
                            "__rmatmul__(self, other)",
                            "from_dict(cls, data, orient='columns', dtype=None, columns=None) -> 'DataFrame'",
                            "to_numpy(self, dtype=None, copy=False) -> np.ndarray",
                            "to_dict(self, orient='dict', into=dict)",
                            "to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None) -> None",
                            "from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None) -> 'DataFrame'",
                            "to_records(self, index=True, column_dtypes=None, index_dtypes=None) -> np.recarray",
                            "_from_arrays(cls, arrays, columns, index, dtype=None) -> 'DataFrame'",
                            "to_stata(self, path: FilePathOrBuffer, convert_dates: Optional[Dict[Label, str]]=None, write_index: bool=True, byteorder: Optional[str]=None, time_stamp: Optional[datetime.datetime]=None, data_label: Optional[str]=None, variable_labels: Optional[Dict[Label, str]]=None, version: Optional[int]=114, convert_strl: Optional[Sequence[Label]]=None) -> None",
                            "to_feather(self, path) -> None",
                            "to_markdown(self, buf: Optional[IO[str]]=None, mode: Optional[str]=None, **kwargs) -> Optional[str]",
                            "to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs) -> None",
                            "to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None)",
                            "info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None) -> None",
                            "memory_usage(self, index=True, deep=False) -> Series",
                            "transpose(self, *args) -> 'DataFrame'",
                            "_ixs(self, i: int, axis: int=0)",
                            "__getitem__(self, key)",
                            "_getitem_bool_array(self, key)",
                            "_getitem_multilevel(self, key)",
                            "_get_value(self, index, col, takeable: bool=False)",
                            "__setitem__(self, key, value)",
                            "_setitem_slice(self, key: slice, value)",
                            "_setitem_array(self, key, value)",
                            "_setitem_frame(self, key, value)",
                            "_set_item(self, key, value)",
                            "_set_value(self, index, col, value, takeable: bool=False)",
                            "_ensure_valid_index(self, value)",
                            "_box_item_values(self, key, values)",
                            "_box_col_values(self, values, items)",
                            "query(self, expr, inplace=False, **kwargs)",
                            "eval(self, expr, inplace=False, **kwargs)",
                            "select_dtypes(self, include=None, exclude=None) -> 'DataFrame'",
                            "insert(self, loc, column, value, allow_duplicates=False) -> None",
                            "assign(self, **kwargs) -> 'DataFrame'",
                            "_sanitize_column(self, key, value, broadcast=True)",
                            "_series(self)",
                            "lookup(self, row_labels, col_labels) -> np.ndarray",
                            "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                            "_reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
                            "_reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
                            "_reindex_multi(self, axes, copy, fill_value) -> 'DataFrame'",
                            "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None) -> 'DataFrame'",
                            "set_axis(self, labels, axis=0, inplace=False)",
                            "reindex(self, *args, **kwargs) -> 'DataFrame'",
                            "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
                            "rename(self, mapper: Optional[Renamer]=None) -> Optional['DataFrame']",
                            "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None) -> Optional['DataFrame']",
                            "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None) -> 'DataFrame'",
                            "set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
                            "reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']",
                            "isna(self) -> 'DataFrame'",
                            "isnull(self) -> 'DataFrame'",
                            "notna(self) -> 'DataFrame'",
                            "notnull(self) -> 'DataFrame'",
                            "dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
                            "drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False, ignore_index: bool=False) -> Optional['DataFrame']",
                            "duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series'",
                            "sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last', ignore_index=False)",
                            "sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False)",
                            "nlargest(self, n, columns, keep='first') -> 'DataFrame'",
                            "nsmallest(self, n, columns, keep='first') -> 'DataFrame'",
                            "swaplevel(self, i=-2, j=-1, axis=0) -> 'DataFrame'",
                            "reorder_levels(self, order, axis=0) -> 'DataFrame'",
                            "_combine_frame(self, other: 'DataFrame', func, fill_value=None)",
                            "_combine_match_index(self, other: Series, func)",
                            "_construct_result(self, result) -> 'DataFrame'",
                            "combine(self, other: 'DataFrame', func, fill_value=None, overwrite=True) -> 'DataFrame'",
                            "combine_first(self, other: 'DataFrame') -> 'DataFrame'",
                            "update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore') -> None",
                            "groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False) -> 'DataFrameGroupBy'",
                            "pivot(self, index=None, columns=None, values=None) -> 'DataFrame'",
                            "pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame'",
                            "stack(self, level=-1, dropna=True)",
                            "explode(self, column: Union[str, Tuple]) -> 'DataFrame'",
                            "unstack(self, level=-1, fill_value=None)",
                            "melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None) -> 'DataFrame'",
                            "diff(self, periods=1, axis=0) -> 'DataFrame'",
                            "_gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]",
                            "aggregate(self, func, axis=0, *args, **kwargs)",
                            "_aggregate(self, arg, axis=0, *args, **kwargs)",
                            "transform(self, func, axis=0, *args, **kwargs) -> 'DataFrame'",
                            "apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
                            "applymap(self, func) -> 'DataFrame'",
                            "append(self, other, ignore_index=False, verify_integrity=False, sort=False) -> 'DataFrame'",
                            "join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False) -> 'DataFrame'",
                            "_join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                            "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None) -> 'DataFrame'",
                            "round(self, decimals=0, *args, **kwargs) -> 'DataFrame'",
                            "corr(self, method='pearson', min_periods=1) -> 'DataFrame'",
                            "cov(self, min_periods=None) -> 'DataFrame'",
                            "corrwith(self, other, axis=0, drop=False, method='pearson') -> Series",
                            "count(self, axis=0, level=None, numeric_only=False)",
                            "_count_level(self, level, axis=0, numeric_only=False)",
                            "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                            "nunique(self, axis=0, dropna=True) -> Series",
                            "idxmin(self, axis=0, skipna=True) -> Series",
                            "idxmax(self, axis=0, skipna=True) -> Series",
                            "_get_agg_axis(self, axis_num)",
                            "mode(self, axis=0, numeric_only=False, dropna=True) -> 'DataFrame'",
                            "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
                            "to_timestamp(self, freq=None, how='start', axis=0, copy=True) -> 'DataFrame'",
                            "to_period(self, freq=None, axis=0, copy=True) -> 'DataFrame'",
                            "isin(self, values) -> 'DataFrame'",
                            "extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]",
                            "reindexer(value)",
                            "_maybe_casted_values(index, labels=None)",
                            "f(vals)",
                            "extract_values(arr)",
                            "combiner(x, y)",
                            "infer(x)",
                            "_dict_round(df, decimals)",
                            "_series_round(s, decimals)",
                            "f(x)",
                            "_get_data(axis_matters)",
                            "f(s)",
                            "_arith_op(left, right)",
                            "blk_func(values)",
                            "c(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": "<pandas._libs.index.Int64Engine object at 0x119fd6400>",
                                    "variable_type": "Int64Engine",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": "<built-in method get_loc of pandas._libs.index.Int64Engine object at 0x119fd6400>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": "<pandas._libs.index.Int64Engine object at 0x119fd6400>",
                                    "variable_type": "Int64Engine",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": "<built-in method get_loc of pandas._libs.index.Int64Engine object at 0x119fd6400>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._iget_item_cache": {
                                    "variable_value": "<bound method NDFrame._iget_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "com.maybe_box_datetimelike": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": "<pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "Int64Engine",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": "<built-in method get_loc of pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'A'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": "<pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "Int64Engine",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": "<built-in method get_loc of pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    2016-01-01 00:00:00\n1    2016-01-02 00:00:00\n2    2016-01-03 00:00:00\nName: A, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.datetime(2016, 1, 1, 0, 0),\n       datetime.datetime(2016, 1, 2, 0, 0),\n       datetime.datetime(2016, 1, 3, 0, 0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'B'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    0:00:00\n1    0:00:00\n2    0:00:00\nName: B, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'B'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.timedelta(0), datetime.timedelta(0),\n       datetime.timedelta(0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": "<pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "Int64Engine",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": "<built-in method get_loc of pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    0:00:00\n1    0:00:00\n2    0:00:00\nName: B, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.timedelta(0), datetime.timedelta(0),\n       datetime.timedelta(0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'B'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    0:00:00\n1    0:00:00\n2    0:00:00\nName: B, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "'B'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.timedelta(0), datetime.timedelta(0),\n       datetime.timedelta(0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": "<pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "Int64Engine",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": "<built-in method get_loc of pandas._libs.index.Int64Engine object at 0x119a3c1d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "takeable": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "series": {
                                    "variable_value": "0    0:00:00\n1    0:00:00\n2    0:00:00\nName: B, dtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "3"
                                },
                                "self._ixs": {
                                    "variable_value": "<bound method DataFrame._ixs of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "                     A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "3"
                                },
                                "col": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "series._values": {
                                    "variable_value": "array([datetime.timedelta(0), datetime.timedelta(0),\n       datetime.timedelta(0)], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_item_cache": {
                                    "variable_value": "<bound method NDFrame._get_item_cache of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "engine": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index._engine": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=3, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "3"
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "engine.get_loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.nlevels": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.index.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._get_value": {
                                    "variable_value": "<bound method DataFrame._get_value of                      A        B\n0  2016-01-01 00:00:00  0:00:00\n1  2016-01-02 00:00:00  0:00:00\n2  2016-01-03 00:00:00  0:00:00>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _from_nested_dict(data):\n    # TODO: this should be seriously cythonized\n    new_data = {}\n    for index, s in data.items():\n        for col, v in s.items():\n            new_data[col] = new_data.get(col, {})\n            new_data[col][index] = v\n    return new_data",
                "@property\ndef _constructor(self) -> Type[\"DataFrame\"]:\n    return DataFrame",
                "@property\ndef _constructor_expanddim(self):\n    raise NotImplementedError(\"Not supported for DataFrames!\")",
                "def __init__(\n    self,\n    data=None,\n    index: Optional[Axes] = None,\n    columns: Optional[Axes] = None,\n    dtype: Optional[Dtype] = None,\n    copy: bool = False,\n):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n\n    if isinstance(data, DataFrame):\n        data = data._data\n\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(\n            data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n        )\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n\n        # masked recarray\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n        # a masked array\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data.soften_mask()  # set hardmask False if it was True\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, \"name\", None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n    # For data is list-like, or Iterable (will consume into list)\n    elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n        if not isinstance(data, (abc.Sequence, ExtensionArray)):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n\n                # set the index\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as err:\n            exc = TypeError(\n                \"DataFrame constructor called with \"\n                f\"incompatible data and dtype: {err}\"\n            )\n            raise exc from err\n\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array(\n                (len(index), len(columns)), data, dtype=dtype\n            )\n            mgr = init_ndarray(\n                values, index, columns, dtype=values.dtype, copy=False\n            )\n        else:\n            raise ValueError(\"DataFrame constructor not properly called!\")\n\n    NDFrame.__init__(self, mgr, fastpath=True)",
                "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list representing the axes of the DataFrame.\n\n    It has the row axis labels and column axis labels as the only members.\n    They are returned in that order.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.axes\n    [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n    dtype='object')]\n    \"\"\"\n    return [self.index, self.columns]",
                "@property\ndef shape(self) -> Tuple[int, int]:\n    \"\"\"\n    Return a tuple representing the dimensionality of the DataFrame.\n\n    See Also\n    --------\n    ndarray.shape\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.shape\n    (2, 2)\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n    ...                    'col3': [5, 6]})\n    >>> df.shape\n    (2, 3)\n    \"\"\"\n    return len(self.index), len(self.columns)",
                "@property\ndef _is_homogeneous_type(self) -> bool:\n    \"\"\"\n    Whether all the columns in a DataFrame have the same type.\n\n    Returns\n    -------\n    bool\n\n    See Also\n    --------\n    Index._is_homogeneous_type : Whether the object has a single\n        dtype.\n    MultiIndex._is_homogeneous_type : Whether all the levels of a\n        MultiIndex have the same dtype.\n\n    Examples\n    --------\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n    True\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n    False\n\n    Items with the same type but different sizes are considered\n    different types.\n\n    >>> DataFrame({\n    ...    \"A\": np.array([1, 2], dtype=np.int32),\n    ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n    False\n    \"\"\"\n    if self._data.any_extension_types:\n        return len({block.dtype for block in self._data.blocks}) == 1\n    else:\n        return not self._data.is_mixed_type",
                "def _repr_fits_vertical_(self) -> bool:\n    \"\"\"\n    Check length against max_rows.\n    \"\"\"\n    max_rows = get_option(\"display.max_rows\")\n    return len(self) <= max_rows",
                "def _repr_fits_horizontal_(self, ignore_width: bool = False) -> bool:\n    \"\"\"\n    Check if full repr fits in horizontal boundaries imposed by the display\n    options width and max_columns.\n\n    In case of non-interactive session, no boundaries apply.\n\n    `ignore_width` is here so ipnb+HTML output can behave the way\n    users expect. display.max_columns remains in effect.\n    GH3541, GH3573\n    \"\"\"\n    width, height = console.get_console_size()\n    max_columns = get_option(\"display.max_columns\")\n    nb_columns = len(self.columns)\n\n    # exceed max columns\n    if (max_columns and nb_columns > max_columns) or (\n        (not ignore_width) and width and nb_columns > (width // 2)\n    ):\n        return False\n\n    # used by repr_html under IPython notebook or scripts ignore terminal\n    # dims\n    if ignore_width or not console.in_interactive_session():\n        return True\n\n    if get_option(\"display.width\") is not None or console.in_ipython_frontend():\n        # check at least the column row for excessive width\n        max_rows = 1\n    else:\n        max_rows = get_option(\"display.max_rows\")\n\n    # when auto-detecting, so width=None and not in ipython front end\n    # check whether repr fits horizontal by actually checking\n    # the width of the rendered repr\n    buf = StringIO()\n\n    # only care about the stuff we'll actually print out\n    # and to_string on entire frame may be expensive\n    d = self\n\n    if not (max_rows is None):  # unlimited rows\n        # min of two, where one may be None\n        d = d.iloc[: min(max_rows, len(d))]\n    else:\n        return True\n\n    d.to_string(buf=buf)\n    value = buf.getvalue()\n    repr_width = max(len(l) for l in value.split(\"\\n\"))\n\n    return repr_width < width",
                "def _info_repr(self) -> bool:\n    \"\"\"\n    True if the repr should show the info view.\n    \"\"\"\n    info_repr_option = get_option(\"display.large_repr\") == \"info\"\n    return info_repr_option and not (\n        self._repr_fits_horizontal_() and self._repr_fits_vertical_()\n    )",
                "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular DataFrame.\n    \"\"\"\n    buf = StringIO(\"\")\n    if self._info_repr():\n        self.info(buf=buf)\n        return buf.getvalue()\n\n    max_rows = get_option(\"display.max_rows\")\n    min_rows = get_option(\"display.min_rows\")\n    max_cols = get_option(\"display.max_columns\")\n    max_colwidth = get_option(\"display.max_colwidth\")\n    show_dimensions = get_option(\"display.show_dimensions\")\n    if get_option(\"display.expand_frame_repr\"):\n        width, _ = console.get_console_size()\n    else:\n        width = None\n    self.to_string(\n        buf=buf,\n        max_rows=max_rows,\n        min_rows=min_rows,\n        max_cols=max_cols,\n        line_width=width,\n        max_colwidth=max_colwidth,\n        show_dimensions=show_dimensions,\n    )\n\n    return buf.getvalue()",
                "def _repr_html_(self) -> Optional[str]:\n    \"\"\"\n    Return a html representation for a particular DataFrame.\n\n    Mainly for IPython notebook.\n    \"\"\"\n    if self._info_repr():\n        buf = StringIO(\"\")\n        self.info(buf=buf)\n        # need to escape the <class>, should be the first line.\n        val = buf.getvalue().replace(\"<\", r\"&lt;\", 1)\n        val = val.replace(\">\", r\"&gt;\", 1)\n        return \"<pre>\" + val + \"</pre>\"\n\n    if get_option(\"display.notebook_repr_html\"):\n        max_rows = get_option(\"display.max_rows\")\n        min_rows = get_option(\"display.min_rows\")\n        max_cols = get_option(\"display.max_columns\")\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=None,\n            col_space=None,\n            na_rep=\"NaN\",\n            formatters=None,\n            float_format=None,\n            sparsify=None,\n            justify=None,\n            index_names=True,\n            header=True,\n            index=True,\n            bold_rows=True,\n            escape=True,\n            max_rows=max_rows,\n            min_rows=min_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n            decimal=\".\",\n            table_id=None,\n            render_links=False,\n        )\n        return formatter.to_html(notebook=True)\n    else:\n        return None",
                "@Substitution(\n    header_type=\"bool or sequence\",\n    header=\"Write out the column names. If a list of strings \"\n    \"is given, it is assumed to be aliases for the \"\n    \"column names\",\n    col_space_type=\"int\",\n    col_space=\"The minimum width of each column\",\n)\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_string(\n    self,\n    buf: Optional[FilePathOrBuffer[str]] = None,\n    columns: Optional[Sequence[str]] = None,\n    col_space: Optional[int] = None,\n    header: Union[bool, Sequence[str]] = True,\n    index: bool = True,\n    na_rep: str = \"NaN\",\n    formatters: Optional[fmt.formatters_type] = None,\n    float_format: Optional[fmt.float_format_type] = None,\n    sparsify: Optional[bool] = None,\n    index_names: bool = True,\n    justify: Optional[str] = None,\n    max_rows: Optional[int] = None,\n    min_rows: Optional[int] = None,\n    max_cols: Optional[int] = None,\n    show_dimensions: bool = False,\n    decimal: str = \".\",\n    line_width: Optional[int] = None,\n    max_colwidth: Optional[int] = None,\n    encoding: Optional[str] = None,\n) -> Optional[str]:\n    \"\"\"\n    Render a DataFrame to a console-friendly tabular output.\n    %(shared_params)s\n    line_width : int, optional\n        Width to wrap a line in characters.\n    max_colwidth : int, optional\n        Max width to truncate each column in characters. By default, no limit.\n\n        .. versionadded:: 1.0.0\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n    %(returns)s\n    See Also\n    --------\n    to_html : Convert DataFrame to HTML.\n\n    Examples\n    --------\n    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n    >>> df = pd.DataFrame(d)\n    >>> print(df.to_string())\n       col1  col2\n    0     1     4\n    1     2     5\n    2     3     6\n    \"\"\"\n    from pandas import option_context\n\n    with option_context(\"display.max_colwidth\", max_colwidth):\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=columns,\n            col_space=col_space,\n            na_rep=na_rep,\n            formatters=formatters,\n            float_format=float_format,\n            sparsify=sparsify,\n            justify=justify,\n            index_names=index_names,\n            header=header,\n            index=index,\n            min_rows=min_rows,\n            max_rows=max_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n            decimal=decimal,\n            line_width=line_width,\n        )\n        return formatter.to_string(buf=buf, encoding=encoding)",
                "@property\ndef style(self) -> \"Styler\":\n    \"\"\"\n    Returns a Styler object.\n\n    Contains methods for building a styled HTML representation of the DataFrame.\n    a styled HTML representation fo the DataFrame.\n\n    See Also\n    --------\n    io.formats.style.Styler\n    \"\"\"\n    from pandas.io.formats.style import Styler\n\n    return Styler(self)",
                "@Appender(_shared_docs[\"items\"])\ndef items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n        for k in self.columns:\n            yield k, self._get_item_cache(k)\n    else:\n        for i, k in enumerate(self.columns):\n            yield k, self._ixs(i, axis=1)",
                "@Appender(_shared_docs[\"items\"])\ndef iteritems(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    yield from self.items()",
                "def iterrows(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    \"\"\"\n    Iterate over DataFrame rows as (index, Series) pairs.\n\n    Yields\n    ------\n    index : label or tuple of label\n        The index of the row. A tuple for a `MultiIndex`.\n    data : Series\n        The data of the row as a Series.\n\n    it : generator\n        A generator that iterates over the rows of the frame.\n\n    See Also\n    --------\n    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    1. Because ``iterrows`` returns a Series for each row,\n       it does **not** preserve dtypes across the rows (dtypes are\n       preserved across columns for DataFrames). For example,\n\n       >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n       >>> row = next(df.iterrows())[1]\n       >>> row\n       int      1.0\n       float    1.5\n       Name: 0, dtype: float64\n       >>> print(row['int'].dtype)\n       float64\n       >>> print(df['int'].dtype)\n       int64\n\n       To preserve dtypes while iterating over the rows, it is better\n       to use :meth:`itertuples` which returns namedtuples of the values\n       and which is generally faster than ``iterrows``.\n\n    2. You should **never modify** something you are iterating over.\n       This is not guaranteed to work in all cases. Depending on the\n       data types, the iterator returns a copy and not a view, and writing\n       to it will have no effect.\n    \"\"\"\n    columns = self.columns\n    klass = self._constructor_sliced\n    for k, v in zip(self.index, self.values):\n        s = klass(v, index=columns, name=k)\n        yield k, s",
                "def itertuples(self, index=True, name=\"Pandas\"):\n    \"\"\"\n    Iterate over DataFrame rows as namedtuples.\n\n    Parameters\n    ----------\n    index : bool, default True\n        If True, return the index as the first element of the tuple.\n    name : str or None, default \"Pandas\"\n        The name of the returned namedtuples or None to return regular\n        tuples.\n\n    Returns\n    -------\n    iterator\n        An object to iterate over namedtuples for each row in the\n        DataFrame with the first field possibly being the index and\n        following fields being the column values.\n\n    See Also\n    --------\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n        pairs.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    The column names will be renamed to positional names if they are\n    invalid Python identifiers, repeated, or start with an underscore.\n    On python versions < 3.7 regular tuples are returned for DataFrames\n    with a large number of columns (>254).\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n    ...                   index=['dog', 'hawk'])\n    >>> df\n          num_legs  num_wings\n    dog          4          0\n    hawk         2          2\n    >>> for row in df.itertuples():\n    ...     print(row)\n    ...\n    Pandas(Index='dog', num_legs=4, num_wings=0)\n    Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n    By setting the `index` parameter to False we can remove the index\n    as the first element of the tuple:\n\n    >>> for row in df.itertuples(index=False):\n    ...     print(row)\n    ...\n    Pandas(num_legs=4, num_wings=0)\n    Pandas(num_legs=2, num_wings=2)\n\n    With the `name` parameter set we set a custom name for the yielded\n    namedtuples:\n\n    >>> for row in df.itertuples(name='Animal'):\n    ...     print(row)\n    ...\n    Animal(Index='dog', num_legs=4, num_wings=0)\n    Animal(Index='hawk', num_legs=2, num_wings=2)\n    \"\"\"\n    arrays = []\n    fields = list(self.columns)\n    if index:\n        arrays.append(self.index)\n        fields.insert(0, \"Index\")\n\n    # use integer indexing because of possible duplicate column names\n    arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n\n    # Python versions before 3.7 support at most 255 arguments to constructors\n    can_return_named_tuples = PY37 or len(self.columns) + index < 255\n    if name is not None and can_return_named_tuples:\n        itertuple = collections.namedtuple(name, fields, rename=True)\n        return map(itertuple._make, zip(*arrays))\n\n    # fallback to regular tuples\n    return zip(*arrays)",
                "def __len__(self) -> int:\n    \"\"\"\n    Returns length of info axis, but here we use the index.\n    \"\"\"\n    return len(self.index)",
                "def dot(self, other):\n    \"\"\"\n    Compute the matrix multiplication between the DataFrame and other.\n\n    This method computes the matrix product between the DataFrame and the\n    values of an other Series, DataFrame or a numpy array.\n\n    It can also be called using ``self @ other`` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the matrix product with.\n\n    Returns\n    -------\n    Series or DataFrame\n        If other is a Series, return the matrix product between self and\n        other as a Serie. If other is a DataFrame or a numpy.array, return\n        the matrix product of self and other in a DataFrame of a np.array.\n\n    See Also\n    --------\n    Series.dot: Similar method for Series.\n\n    Notes\n    -----\n    The dimensions of DataFrame and other must be compatible in order to\n    compute the matrix multiplication. In addition, the column names of\n    DataFrame and the index of other must contain the same values, as they\n    will be aligned prior to the multiplication.\n\n    The dot method for Series computes the inner product, instead of the\n    matrix product here.\n\n    Examples\n    --------\n    Here we multiply a DataFrame with a Series.\n\n    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n    >>> s = pd.Series([1, 1, 2, 1])\n    >>> df.dot(s)\n    0    -4\n    1     5\n    dtype: int64\n\n    Here we multiply a DataFrame with another DataFrame.\n\n    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(other)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note that the dot method give the same result as @\n\n    >>> df @ other\n        0   1\n    0   1   4\n    1   2   2\n\n    The dot method works also if other is an np.array.\n\n    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(arr)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note how shuffling of the objects does not change the result.\n\n    >>> s2 = s.reindex([1, 0, 2, 3])\n    >>> df.dot(s2)\n    0    -4\n    1     5\n    dtype: int64\n    \"\"\"\n    if isinstance(other, (Series, DataFrame)):\n        common = self.columns.union(other.index)\n        if len(common) > len(self.columns) or len(common) > len(other.index):\n            raise ValueError(\"matrices are not aligned\")\n\n        left = self.reindex(columns=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        left = self\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[1] != rvals.shape[0]:\n            raise ValueError(\n                f\"Dot product shape mismatch, {lvals.shape} vs {rvals.shape}\"\n            )\n\n    if isinstance(other, DataFrame):\n        return self._constructor(\n            np.dot(lvals, rvals), index=left.index, columns=other.columns\n        )\n    elif isinstance(other, Series):\n        return Series(np.dot(lvals, rvals), index=left.index)\n    elif isinstance(rvals, (np.ndarray, Index)):\n        result = np.dot(lvals, rvals)\n        if result.ndim == 2:\n            return self._constructor(result, index=left.index)\n        else:\n            return Series(result, index=left.index)\n    else:  # pragma: no cover\n        raise TypeError(f\"unsupported type: {type(other)}\")",
                "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.T.dot(np.transpose(other)).T",
                "@classmethod\ndef from_dict(cls, data, orient=\"columns\", dtype=None, columns=None) -> \"DataFrame\":\n    \"\"\"\n    Construct DataFrame from dict of array-like or dicts.\n\n    Creates DataFrame object from dictionary by columns or by index\n    allowing dtype specification.\n\n    Parameters\n    ----------\n    data : dict\n        Of the form {field : array-like} or {field : dict}.\n    orient : {'columns', 'index'}, default 'columns'\n        The \"orientation\" of the data. If the keys of the passed dict\n        should be the columns of the resulting DataFrame, pass 'columns'\n        (default). Otherwise if the keys should be rows, pass 'index'.\n    dtype : dtype, default None\n        Data type to force, otherwise infer.\n    columns : list, default None\n        Column labels to use when ``orient='index'``. Raises a ValueError\n        if used with ``orient='columns'``.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.from_records : DataFrame from ndarray (structured\n        dtype), list of tuples, dict, or DataFrame.\n    DataFrame : DataFrame object creation using constructor.\n\n    Examples\n    --------\n    By default the keys of the dict become the DataFrame columns:\n\n    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data)\n       col_1 col_2\n    0      3     a\n    1      2     b\n    2      1     c\n    3      0     d\n\n    Specify ``orient='index'`` to create the DataFrame using dictionary\n    keys as rows:\n\n    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data, orient='index')\n           0  1  2  3\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n\n    When using the 'index' orientation, the column names can be\n    specified manually:\n\n    >>> pd.DataFrame.from_dict(data, orient='index',\n    ...                        columns=['A', 'B', 'C', 'D'])\n           A  B  C  D\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n    \"\"\"\n    index = None\n    orient = orient.lower()\n    if orient == \"index\":\n        if len(data) > 0:\n            # TODO speed up Series case\n            if isinstance(list(data.values())[0], (Series, dict)):\n                data = _from_nested_dict(data)\n            else:\n                data, index = list(data.values()), list(data.keys())\n    elif orient == \"columns\":\n        if columns is not None:\n            raise ValueError(\"cannot use columns parameter with orient='columns'\")\n    else:  # pragma: no cover\n        raise ValueError(\"only recognize index or columns for orient\")\n\n    return cls(data, index=index, columns=columns, dtype=dtype)",
                "def to_numpy(self, dtype=None, copy=False) -> np.ndarray:\n    \"\"\"\n    Convert the DataFrame to a NumPy array.\n\n    .. versionadded:: 0.24.0\n\n    By default, the dtype of the returned array will be the common NumPy\n    dtype of all types in the DataFrame. For example, if the dtypes are\n    ``float16`` and ``float32``, the results dtype will be ``float32``.\n    This may require copying data and coercing values, which may be\n    expensive.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to pass to :meth:`numpy.asarray`.\n    copy : bool, default False\n        Whether to ensure that the returned value is a not a view on\n        another array. Note that ``copy=False`` does not *ensure* that\n        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n        a copy is made, even if not strictly necessary.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.to_numpy : Similar method for Series.\n\n    Examples\n    --------\n    >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n    array([[1, 3],\n           [2, 4]])\n\n    With heterogeneous data, the lowest common type will have to\n    be used.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n    >>> df.to_numpy()\n    array([[1. , 3. ],\n           [2. , 4.5]])\n\n    For a mix of numeric and non-numeric types, the output array will\n    have object dtype.\n\n    >>> df['C'] = pd.date_range('2000', periods=2)\n    >>> df.to_numpy()\n    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n    \"\"\"\n    result = np.array(self.values, dtype=dtype, copy=copy)\n    return result",
                "def to_dict(self, orient=\"dict\", into=dict):\n    \"\"\"\n    Convert the DataFrame to a dictionary.\n\n    The type of the key-value pairs can be customized with the parameters\n    (see below).\n\n    Parameters\n    ----------\n    orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n        Determines the type of the values of the dictionary.\n\n        - 'dict' (default) : dict like {column -> {index -> value}}\n        - 'list' : dict like {column -> [values]}\n        - 'series' : dict like {column -> Series(values)}\n        - 'split' : dict like\n          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n        - 'records' : list like\n          [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n\n        Abbreviations are allowed. `s` indicates `series` and `sp`\n        indicates `split`.\n\n    into : class, default dict\n        The collections.abc.Mapping subclass used for all Mappings\n        in the return value.  Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    dict, list or collections.abc.Mapping\n        Return a collections.abc.Mapping object representing the DataFrame.\n        The resulting transformation depends on the `orient` parameter.\n\n    See Also\n    --------\n    DataFrame.from_dict: Create a DataFrame from a dictionary.\n    DataFrame.to_json: Convert a DataFrame to JSON format.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2],\n    ...                    'col2': [0.5, 0.75]},\n    ...                   index=['row1', 'row2'])\n    >>> df\n          col1  col2\n    row1     1  0.50\n    row2     2  0.75\n    >>> df.to_dict()\n    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n    You can specify the return orientation.\n\n    >>> df.to_dict('series')\n    {'col1': row1    1\n             row2    2\n    Name: col1, dtype: int64,\n    'col2': row1    0.50\n            row2    0.75\n    Name: col2, dtype: float64}\n\n    >>> df.to_dict('split')\n    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n     'data': [[1, 0.5], [2, 0.75]]}\n\n    >>> df.to_dict('records')\n    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n    >>> df.to_dict('index')\n    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n    You can also specify the mapping type.\n\n    >>> from collections import OrderedDict, defaultdict\n    >>> df.to_dict(into=OrderedDict)\n    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n    If you want a `defaultdict`, you need to initialize it:\n\n    >>> dd = defaultdict(list)\n    >>> df.to_dict('records', into=dd)\n    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n    \"\"\"\n    if not self.columns.is_unique:\n        warnings.warn(\n            \"DataFrame columns are not unique, some columns will be omitted.\",\n            UserWarning,\n            stacklevel=2,\n        )\n    # GH16122\n    into_c = com.standardize_mapping(into)\n    if orient.lower().startswith(\"d\"):\n        return into_c((k, v.to_dict(into)) for k, v in self.items())\n    elif orient.lower().startswith(\"l\"):\n        return into_c((k, v.tolist()) for k, v in self.items())\n    elif orient.lower().startswith(\"sp\"):\n        return into_c(\n            (\n                (\"index\", self.index.tolist()),\n                (\"columns\", self.columns.tolist()),\n                (\n                    \"data\",\n                    [\n                        list(map(com.maybe_box_datetimelike, t))\n                        for t in self.itertuples(index=False, name=None)\n                    ],\n                ),\n            )\n        )\n    elif orient.lower().startswith(\"s\"):\n        return into_c((k, com.maybe_box_datetimelike(v)) for k, v in self.items())\n    elif orient.lower().startswith(\"r\"):\n        columns = self.columns.tolist()\n        rows = (\n            dict(zip(columns, row))\n            for row in self.itertuples(index=False, name=None)\n        )\n        return [\n            into_c((k, com.maybe_box_datetimelike(v)) for k, v in row.items())\n            for row in rows\n        ]\n    elif orient.lower().startswith(\"i\"):\n        if not self.index.is_unique:\n            raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n        return into_c(\n            (t[0], dict(zip(self.columns, t[1:])))\n            for t in self.itertuples(name=None)\n        )\n    else:\n        raise ValueError(f\"orient '{orient}' not understood\")",
                "def to_gbq(\n    self,\n    destination_table,\n    project_id=None,\n    chunksize=None,\n    reauth=False,\n    if_exists=\"fail\",\n    auth_local_webserver=False,\n    table_schema=None,\n    location=None,\n    progress_bar=True,\n    credentials=None,\n) -> None:\n    \"\"\"\n    Write a DataFrame to a Google BigQuery table.\n\n    This function requires the `pandas-gbq package\n    <https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    destination_table : str\n        Name of table to be written, in the form ``dataset.tablename``.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    chunksize : int, optional\n        Number of rows to be inserted in each chunk from the dataframe.\n        Set to ``None`` to load the whole dataframe at once.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    if_exists : str, default 'fail'\n        Behavior when the destination table exists. Value can be one of:\n\n        ``'fail'``\n            If table exists raise pandas_gbq.gbq.TableCreationError.\n        ``'replace'``\n            If table exists, drop it, recreate it, and insert data.\n        ``'append'``\n            If table exists, insert data. Create if does not exist.\n    auth_local_webserver : bool, default False\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n    table_schema : list of dicts, optional\n        List of BigQuery table fields to which according DataFrame\n        columns conform to, e.g. ``[{'name': 'col1', 'type':\n        'STRING'},...]``. If schema is not provided, it will be\n        generated according to dtypes of DataFrame columns. See\n        BigQuery API documentation on available names of a field.\n\n        *New in version 0.3.1 of pandas-gbq*.\n    location : str, optional\n        Location where the load job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of the\n        target dataset.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    progress_bar : bool, default True\n        Use the library `tqdm` to show the progress bar for the upload,\n        chunk by chunk.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to\n        override default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service\n        Account :class:`google.oauth2.service_account.Credentials`\n        directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n\n        .. versionadded:: 0.24.0\n\n    See Also\n    --------\n    pandas_gbq.to_gbq : This function in the pandas-gbq library.\n    read_gbq : Read a DataFrame from Google BigQuery.\n    \"\"\"\n    from pandas.io import gbq\n\n    gbq.to_gbq(\n        self,\n        destination_table,\n        project_id=project_id,\n        chunksize=chunksize,\n        reauth=reauth,\n        if_exists=if_exists,\n        auth_local_webserver=auth_local_webserver,\n        table_schema=table_schema,\n        location=location,\n        progress_bar=progress_bar,\n        credentials=credentials,\n    )",
                "@classmethod\ndef from_records(\n    cls,\n    data,\n    index=None,\n    exclude=None,\n    columns=None,\n    coerce_float=False,\n    nrows=None,\n) -> \"DataFrame\":\n    \"\"\"\n    Convert structured or record ndarray to DataFrame.\n\n    Parameters\n    ----------\n    data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n    index : str, list of fields, array-like\n        Field of array to use as the index, alternately a specific set of\n        input labels to use.\n    exclude : sequence, default None\n        Columns or fields to exclude.\n    columns : sequence, default None\n        Column names to use. If the passed data do not have names\n        associated with them, this argument provides names for the\n        columns. Otherwise this argument indicates the order of the columns\n        in the result (any names not found in the data will become all-NA\n        columns).\n    coerce_float : bool, default False\n        Attempt to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    nrows : int, default None\n        Number of rows to read if data is an iterator.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Make a copy of the input columns so we can modify it\n    if columns is not None:\n        columns = ensure_index(columns)\n\n    if is_iterator(data):\n        if nrows == 0:\n            return cls()\n\n        try:\n            first_row = next(data)\n        except StopIteration:\n            return cls(index=index, columns=columns)\n\n        dtype = None\n        if hasattr(first_row, \"dtype\") and first_row.dtype.names:\n            dtype = first_row.dtype\n\n        values = [first_row]\n\n        if nrows is None:\n            values += data\n        else:\n            values.extend(itertools.islice(data, nrows - 1))\n\n        if dtype is not None:\n            data = np.array(values, dtype=dtype)\n        else:\n            data = values\n\n    if isinstance(data, dict):\n        if columns is None:\n            columns = arr_columns = ensure_index(sorted(data))\n            arrays = [data[k] for k in columns]\n        else:\n            arrays = []\n            arr_columns = []\n            for k, v in data.items():\n                if k in columns:\n                    arr_columns.append(k)\n                    arrays.append(v)\n\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n\n    elif isinstance(data, (np.ndarray, DataFrame)):\n        arrays, columns = to_arrays(data, columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        arr_columns = columns\n    else:\n        arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n\n        arr_columns = ensure_index(arr_columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        else:\n            columns = arr_columns\n\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n\n    result_index = None\n    if index is not None:\n        if isinstance(index, str) or not hasattr(index, \"__iter__\"):\n            i = columns.get_loc(index)\n            exclude.add(index)\n            if len(arrays) > 0:\n                result_index = Index(arrays[i], name=index)\n            else:\n                result_index = Index([], name=index)\n        else:\n            try:\n                index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n            except (KeyError, TypeError):\n                # raised by get_loc, see GH#29258\n                result_index = index\n            else:\n                result_index = ensure_index_from_sequences(index_data, names=index)\n                exclude.update(index)\n\n    if any(exclude):\n        arr_exclude = [x for x in exclude if x in arr_columns]\n        to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n        arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n        arr_columns = arr_columns.drop(arr_exclude)\n        columns = columns.drop(exclude)\n\n    mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n\n    return cls(mgr)",
                "def to_records(\n    self, index=True, column_dtypes=None, index_dtypes=None\n) -> np.recarray:\n    \"\"\"\n    Convert DataFrame to a NumPy record array.\n\n    Index will be included as the first field of the record array if\n    requested.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include index in resulting record array, stored in 'index'\n        field or using the index label, if set.\n    column_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all columns. If\n        a dictionary, a mapping of column names and indices (zero-indexed)\n        to specific data types.\n    index_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all index levels. If\n        a dictionary, a mapping of index level names and indices\n        (zero-indexed) to specific data types.\n\n        This mapping is applied only if `index=True`.\n\n    Returns\n    -------\n    numpy.recarray\n        NumPy ndarray with the DataFrame labels as fields and each row\n        of the DataFrame as entries.\n\n    See Also\n    --------\n    DataFrame.from_records: Convert structured or record ndarray\n        to DataFrame.\n    numpy.recarray: An ndarray that allows field access using\n        attributes, analogous to typed columns in a\n        spreadsheet.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n    ...                   index=['a', 'b'])\n    >>> df\n       A     B\n    a  1  0.50\n    b  2  0.75\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    If the DataFrame index has no label then the recarray field name\n    is set to 'index'. If the index has a label then this is used as the\n    field name:\n\n    >>> df.index = df.index.rename(\"I\")\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    The index can be excluded from the record array:\n\n    >>> df.to_records(index=False)\n    rec.array([(1, 0.5 ), (2, 0.75)],\n              dtype=[('A', '<i8'), ('B', '<f8')])\n\n    Data types can be specified for the columns:\n\n    >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n    As well as for the index:\n\n    >>> df.to_records(index_dtypes=\"<S2\")\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n    >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n    >>> df.to_records(index_dtypes=index_dtypes)\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n    \"\"\"\n    if index:\n        if isinstance(self.index, ABCMultiIndex):\n            # array of tuples to numpy cols. copy copy copy\n            ix_vals = list(map(np.array, zip(*self.index.values)))\n        else:\n            ix_vals = [self.index.values]\n\n        arrays = ix_vals + [self[c]._internal_get_values() for c in self.columns]\n\n        count = 0\n        index_names = list(self.index.names)\n\n        if isinstance(self.index, ABCMultiIndex):\n            for i, n in enumerate(index_names):\n                if n is None:\n                    index_names[i] = f\"level_{count}\"\n                    count += 1\n        elif index_names[0] is None:\n            index_names = [\"index\"]\n\n        names = [str(name) for name in itertools.chain(index_names, self.columns)]\n    else:\n        arrays = [self[c]._internal_get_values() for c in self.columns]\n        names = [str(c) for c in self.columns]\n        index_names = []\n\n    index_len = len(index_names)\n    formats = []\n\n    for i, v in enumerate(arrays):\n        index = i\n\n        # When the names and arrays are collected, we\n        # first collect those in the DataFrame's index,\n        # followed by those in its columns.\n        #\n        # Thus, the total length of the array is:\n        # len(index_names) + len(DataFrame.columns).\n        #\n        # This check allows us to see whether we are\n        # handling a name / array in the index or column.\n        if index < index_len:\n            dtype_mapping = index_dtypes\n            name = index_names[index]\n        else:\n            index -= index_len\n            dtype_mapping = column_dtypes\n            name = self.columns[index]\n\n        # We have a dictionary, so we get the data type\n        # associated with the index or column (which can\n        # be denoted by its name in the DataFrame or its\n        # position in DataFrame's array of indices or\n        # columns, whichever is applicable.\n        if is_dict_like(dtype_mapping):\n            if name in dtype_mapping:\n                dtype_mapping = dtype_mapping[name]\n            elif index in dtype_mapping:\n                dtype_mapping = dtype_mapping[index]\n            else:\n                dtype_mapping = None\n\n        # If no mapping can be found, use the array's\n        # dtype attribute for formatting.\n        #\n        # A valid dtype must either be a type or\n        # string naming a type.\n        if dtype_mapping is None:\n            formats.append(v.dtype)\n        elif isinstance(dtype_mapping, (type, np.dtype, str)):\n            formats.append(dtype_mapping)\n        else:\n            element = \"row\" if i < index_len else \"column\"\n            msg = f\"Invalid dtype {dtype_mapping} specified for {element} {name}\"\n            raise ValueError(msg)\n\n    return np.rec.fromarrays(arrays, dtype={\"names\": names, \"formats\": formats})",
                "@classmethod\ndef _from_arrays(cls, arrays, columns, index, dtype=None) -> \"DataFrame\":\n    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n    return cls(mgr)",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_stata(\n    self,\n    path: FilePathOrBuffer,\n    convert_dates: Optional[Dict[Label, str]] = None,\n    write_index: bool = True,\n    byteorder: Optional[str] = None,\n    time_stamp: Optional[datetime.datetime] = None,\n    data_label: Optional[str] = None,\n    variable_labels: Optional[Dict[Label, str]] = None,\n    version: Optional[int] = 114,\n    convert_strl: Optional[Sequence[Label]] = None,\n) -> None:\n    \"\"\"\n    Export DataFrame object to Stata dta format.\n\n    Writes the DataFrame to a Stata dataset file.\n    \"dta\" files contain a Stata dataset.\n\n    Parameters\n    ----------\n    path : str, buffer or path object\n        String, path object (pathlib.Path or py._path.local.LocalPath) or\n        object implementing a binary write() function. If using a buffer\n        then the buffer will not be automatically closed after the file\n        data has been written.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    convert_dates : dict\n        Dictionary mapping columns containing datetime types to stata\n        internal format to use when writing the dates. Options are 'tc',\n        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n        or a name. Datetime columns that do not have a conversion type\n        specified will be converted to 'tc'. Raises NotImplementedError if\n        a datetime column has timezone information.\n    write_index : bool\n        Write the index to Stata dataset.\n    byteorder : str\n        Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n    time_stamp : datetime\n        A datetime to use as file creation date.  Default is the current\n        time.\n    data_label : str, optional\n        A label for the data set.  Must be 80 characters or smaller.\n    variable_labels : dict\n        Dictionary containing columns as keys and variable labels as\n        values. Each label must be 80 characters or smaller.\n    version : {114, 117, 118, 119, None}, default 114\n        Version to use in the output dta file. Set to None to let pandas\n        decide between 118 or 119 formats depending on the number of\n        columns in the frame. Version 114 can be read by Stata 10 and\n        later. Version 117 can be read by Stata 13 or later. Version 118\n        is supported in Stata 14 and later. Version 119 is supported in\n        Stata 15 and later. Version 114 limits string variables to 244\n        characters or fewer while versions 117 and later allow strings\n        with lengths up to 2,000,000 characters. Versions 118 and 119\n        support Unicode characters, and version 119 supports more than\n        32,767 variables.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Added support for formats 118 and 119.\n\n    convert_strl : list, optional\n        List of column names to convert to string columns to Stata StrL\n        format. Only available if version is 117.  Storing strings in the\n        StrL format can produce smaller dta files if strings have more than\n        8 characters and values are repeated.\n\n        .. versionadded:: 0.23.0\n\n    Raises\n    ------\n    NotImplementedError\n        * If datetimes contain timezone information\n        * Column dtype is not representable in Stata\n    ValueError\n        * Columns listed in convert_dates are neither datetime64[ns]\n          or datetime.datetime\n        * Column listed in convert_dates is not in DataFrame\n        * Categorical label contains more than 32,000 characters\n\n    See Also\n    --------\n    read_stata : Import Stata data files.\n    io.stata.StataWriter : Low-level writer for Stata data files.\n    io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n    ...                               'parrot'],\n    ...                    'speed': [350, 18, 361, 15]})\n    >>> df.to_stata('animals.dta')  # doctest: +SKIP\n    \"\"\"\n    if version not in (114, 117, 118, 119, None):\n        raise ValueError(\"Only formats 114, 117, 118 and 119 are supported.\")\n    if version == 114:\n        if convert_strl is not None:\n            raise ValueError(\"strl is not supported in format 114\")\n        from pandas.io.stata import StataWriter as statawriter\n    elif version == 117:\n        # mypy: Name 'statawriter' already defined (possibly by an import)\n        from pandas.io.stata import StataWriter117 as statawriter  # type: ignore\n    else:  # versions 118 and 119\n        # mypy: Name 'statawriter' already defined (possibly by an import)\n        from pandas.io.stata import StataWriterUTF8 as statawriter  # type:ignore\n\n    kwargs: Dict[str, Any] = {}\n    if version is None or version >= 117:\n        # strl conversion is only supported >= 117\n        kwargs[\"convert_strl\"] = convert_strl\n    if version is None or version >= 118:\n        # Specifying the version is only supported for UTF8 (118 or 119)\n        kwargs[\"version\"] = version\n\n    # mypy: Too many arguments for \"StataWriter\"\n    writer = statawriter(  # type: ignore\n        path,\n        self,\n        convert_dates=convert_dates,\n        byteorder=byteorder,\n        time_stamp=time_stamp,\n        data_label=data_label,\n        write_index=write_index,\n        variable_labels=variable_labels,\n        **kwargs,\n    )\n    writer.write_file()",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_feather(self, path) -> None:\n    \"\"\"\n    Write out the binary feather-format for DataFrames.\n\n    Parameters\n    ----------\n    path : str\n        String file path.\n    \"\"\"\n    from pandas.io.feather_format import to_feather\n\n    to_feather(self, path)",
                "@Appender(\n    \"\"\"\n    Examples\n    --------\n    >>> df = pd.DataFrame(\n    ...     data={\"animal_1\": [\"elk\", \"pig\"], \"animal_2\": [\"dog\", \"quetzal\"]}\n    ... )\n    >>> print(df.to_markdown())\n    |    | animal_1   | animal_2   |\n    |---:|:-----------|:-----------|\n    |  0 | elk        | dog        |\n    |  1 | pig        | quetzal    |\n    \"\"\"\n)\n@Substitution(klass=\"DataFrame\")\n@Appender(_shared_docs[\"to_markdown\"])\ndef to_markdown(\n    self, buf: Optional[IO[str]] = None, mode: Optional[str] = None, **kwargs\n) -> Optional[str]:\n    kwargs.setdefault(\"headers\", \"keys\")\n    kwargs.setdefault(\"tablefmt\", \"pipe\")\n    tabulate = import_optional_dependency(\"tabulate\")\n    result = tabulate.tabulate(self, **kwargs)\n    if buf is None:\n        return result\n    buf, _, _, _ = get_filepath_or_buffer(buf, mode=mode)\n    assert buf is not None  # Help mypy.\n    buf.writelines(result)\n    return None",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_parquet(\n    self,\n    path,\n    engine=\"auto\",\n    compression=\"snappy\",\n    index=None,\n    partition_cols=None,\n    **kwargs,\n) -> None:\n    \"\"\"\n    Write a DataFrame to the binary parquet format.\n\n    .. versionadded:: 0.21.0\n\n    This function writes the dataframe as a `parquet file\n    <https://parquet.apache.org/>`_. You can choose different parquet\n    backends, and have the option of compression. See\n    :ref:`the user guide <io.parquet>` for more details.\n\n    Parameters\n    ----------\n    path : str\n        File path or Root Directory path. Will be used as Root Directory\n        path while writing a partitioned dataset.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n        Parquet library to use. If 'auto', then the option\n        ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n        behavior is to try 'pyarrow', falling back to 'fastparquet' if\n        'pyarrow' is unavailable.\n    compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n        Name of the compression to use. Use ``None`` for no compression.\n    index : bool, default None\n        If ``True``, include the dataframe's index(es) in the file output.\n        If ``False``, they will not be written to the file.\n        If ``None``, similar to ``True`` the dataframe's index(es)\n        will be saved. However, instead of being saved as values,\n        the RangeIndex will be stored as a range in the metadata so it\n        doesn't require much space and is faster. Other indexes will\n        be included as columns in the file output.\n\n        .. versionadded:: 0.24.0\n\n    partition_cols : list, optional, default None\n        Column names by which to partition the dataset.\n        Columns are partitioned in the order they are given.\n\n        .. versionadded:: 0.24.0\n\n    **kwargs\n        Additional arguments passed to the parquet library. See\n        :ref:`pandas io <io.parquet>` for more details.\n\n    See Also\n    --------\n    read_parquet : Read a parquet file.\n    DataFrame.to_csv : Write a csv file.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_hdf : Write to hdf.\n\n    Notes\n    -----\n    This function requires either the `fastparquet\n    <https://pypi.org/project/fastparquet>`_ or `pyarrow\n    <https://arrow.apache.org/docs/python/>`_ library.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.to_parquet('df.parquet.gzip',\n    ...               compression='gzip')  # doctest: +SKIP\n    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n       col1  col2\n    0     1     3\n    1     2     4\n    \"\"\"\n    from pandas.io.parquet import to_parquet\n\n    to_parquet(\n        self,\n        path,\n        engine,\n        compression=compression,\n        index=index,\n        partition_cols=partition_cols,\n        **kwargs,\n    )",
                "@Substitution(\n    header_type=\"bool\",\n    header=\"Whether to print column labels, default True\",\n    col_space_type=\"str or int\",\n    col_space=\"The minimum width of each column in CSS length \"\n    \"units.  An int is assumed to be px units.\\n\\n\"\n    \"            .. versionadded:: 0.25.0\\n\"\n    \"                Ability to use str\",\n)\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(\n    self,\n    buf=None,\n    columns=None,\n    col_space=None,\n    header=True,\n    index=True,\n    na_rep=\"NaN\",\n    formatters=None,\n    float_format=None,\n    sparsify=None,\n    index_names=True,\n    justify=None,\n    max_rows=None,\n    max_cols=None,\n    show_dimensions=False,\n    decimal=\".\",\n    bold_rows=True,\n    classes=None,\n    escape=True,\n    notebook=False,\n    border=None,\n    table_id=None,\n    render_links=False,\n    encoding=None,\n):\n    \"\"\"\n    Render a DataFrame as an HTML table.\n    %(shared_params)s\n    bold_rows : bool, default True\n        Make the row labels bold in the output.\n    classes : str or list or tuple, default None\n        CSS class(es) to apply to the resulting html table.\n    escape : bool, default True\n        Convert the characters <, >, and & to HTML-safe sequences.\n    notebook : {True, False}, default False\n        Whether the generated HTML is for IPython Notebook.\n    border : int\n        A ``border=border`` attribute is included in the opening\n        `<table>` tag. Default ``pd.options.display.html.border``.\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n\n    table_id : str, optional\n        A css id is included in the opening `<table>` tag if specified.\n\n        .. versionadded:: 0.23.0\n\n    render_links : bool, default False\n        Convert URLs to HTML links.\n\n        .. versionadded:: 0.24.0\n    %(returns)s\n    See Also\n    --------\n    to_string : Convert DataFrame to a string.\n    \"\"\"\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError(\"Invalid value for justify parameter\")\n\n    formatter = fmt.DataFrameFormatter(\n        self,\n        columns=columns,\n        col_space=col_space,\n        na_rep=na_rep,\n        formatters=formatters,\n        float_format=float_format,\n        sparsify=sparsify,\n        justify=justify,\n        index_names=index_names,\n        header=header,\n        index=index,\n        bold_rows=bold_rows,\n        escape=escape,\n        max_rows=max_rows,\n        max_cols=max_cols,\n        show_dimensions=show_dimensions,\n        decimal=decimal,\n        table_id=table_id,\n        render_links=render_links,\n    )\n    # TODO: a generic formatter wld b in DataFrameFormatter\n    return formatter.to_html(\n        buf=buf,\n        classes=classes,\n        notebook=notebook,\n        border=border,\n        encoding=encoding,\n    )",
                "@Appender(info.__doc__)\ndef info(\n    self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None\n) -> None:\n    return info(self, verbose, buf, max_cols, memory_usage, null_counts)",
                "def memory_usage(self, index=True, deep=False) -> Series:\n    \"\"\"\n    Return the memory usage of each column in bytes.\n\n    The memory usage can optionally include the contribution of\n    the index and elements of `object` dtype.\n\n    This value is displayed in `DataFrame.info` by default. This can be\n    suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the DataFrame's\n        index in returned Series. If ``index=True``, the memory usage of\n        the index is the first item in the output.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned values.\n\n    Returns\n    -------\n    Series\n        A Series whose index is the original column names and whose values\n        is the memory usage of each column in bytes.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n        ndarray.\n    Series.memory_usage : Bytes consumed by a Series.\n    Categorical : Memory-efficient array for string values with\n        many repeated values.\n    DataFrame.info : Concise summary of a DataFrame.\n\n    Examples\n    --------\n    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n    >>> data = dict([(t, np.ones(shape=5000).astype(t))\n    ...              for t in dtypes])\n    >>> df = pd.DataFrame(data)\n    >>> df.head()\n       int64  float64            complex128  object  bool\n    0      1      1.0    1.000000+0.000000j       1  True\n    1      1      1.0    1.000000+0.000000j       1  True\n    2      1      1.0    1.000000+0.000000j       1  True\n    3      1      1.0    1.000000+0.000000j       1  True\n    4      1      1.0    1.000000+0.000000j       1  True\n\n    >>> df.memory_usage()\n    Index           128\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    >>> df.memory_usage(index=False)\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    The memory footprint of `object` dtype columns is ignored by default:\n\n    >>> df.memory_usage(deep=True)\n    Index            128\n    int64          40000\n    float64        40000\n    complex128     80000\n    object        160000\n    bool            5000\n    dtype: int64\n\n    Use a Categorical for efficient storage of an object-dtype column with\n    many repeated values.\n\n    >>> df['object'].astype('category').memory_usage(deep=True)\n    5216\n    \"\"\"\n    result = Series(\n        [c.memory_usage(index=False, deep=deep) for col, c in self.items()],\n        index=self.columns,\n    )\n    if index:\n        result = Series(self.index.memory_usage(deep=deep), index=[\"Index\"]).append(\n            result\n        )\n    return result",
                "def transpose(self, *args, copy: bool = False) -> \"DataFrame\":\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args : tuple, optional\n        Accepted for compatibility with NumPy.\n    copy : bool, default False\n        Whether to copy the data after transposing, even for DataFrames\n        with a single dtype.\n\n        Note that a copy is always required for mixed dtype DataFrames,\n        or for DataFrames with any extension types.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    # construct the args\n\n    dtypes = list(self.dtypes)\n    if self._is_homogeneous_type and dtypes and is_extension_array_dtype(dtypes[0]):\n        # We have EAs with the same dtype. We can preserve that dtype in transpose.\n        dtype = dtypes[0]\n        arr_type = dtype.construct_array_type()\n        values = self.values\n\n        new_values = [arr_type._from_sequence(row, dtype=dtype) for row in values]\n        result = self._constructor(\n            dict(zip(self.index, new_values)), index=self.columns\n        )\n\n    else:\n        new_values = self.values.T\n        if copy:\n            new_values = new_values.copy()\n        result = self._constructor(\n            new_values, index=self.columns, columns=self.index\n        )\n\n    return result.__finalize__(self)",
                "def _ixs(self, i: int, axis: int = 0):\n    \"\"\"\n    Parameters\n    ----------\n    i : int\n    axis : int\n\n    Notes\n    -----\n    If slice passed, the resulting data will be a view.\n    \"\"\"\n    # irow\n    if axis == 0:\n        new_values = self._data.fast_xs(i)\n\n        # if we are a copy, mark as such\n        copy = isinstance(new_values, np.ndarray) and new_values.base is None\n        result = self._constructor_sliced(\n            new_values,\n            index=self.columns,\n            name=self.index[i],\n            dtype=new_values.dtype,\n        )\n        result._set_is_copy(self, copy=copy)\n        return result\n\n    # icol\n    else:\n        label = self.columns[i]\n\n        values = self._data.iget(i)\n        result = self._box_col_values(values, label)\n\n        # this is a cached value, mark it so\n        result._set_as_cached(label, self)\n\n        return result",
                "def __getitem__(self, key):\n    key = lib.item_from_zerodim(key)\n    key = com.apply_if_callable(key, self)\n\n    if is_hashable(key):\n        # shortcut if the key is in columns\n        if self.columns.is_unique and key in self.columns:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            return self._get_item_cache(key)\n\n    # Do we have a slicer (on rows)?\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        # either we have a slice or we have a string that can be converted\n        #  to a slice for partial-string date indexing\n        return self._slice(indexer, axis=0)\n\n    # Do we have a (boolean) DataFrame?\n    if isinstance(key, DataFrame):\n        return self.where(key)\n\n    # Do we have a (boolean) 1d indexer?\n    if com.is_bool_indexer(key):\n        return self._getitem_bool_array(key)\n\n    # We are left with two options: a single key, and a collection of keys,\n    # We interpret tuples as collections only for non-MultiIndex\n    is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n    if is_single_key:\n        if self.columns.nlevels > 1:\n            return self._getitem_multilevel(key)\n        indexer = self.columns.get_loc(key)\n        if is_integer(indexer):\n            indexer = [indexer]\n    else:\n        if is_iterator(key):\n            key = list(key)\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n    # take() does not accept boolean indexers\n    if getattr(indexer, \"dtype\", None) == bool:\n        indexer = np.where(indexer)[0]\n\n    data = self._take_with_is_copy(indexer, axis=1)\n\n    if is_single_key:\n        # What does looking for a single key in a non-unique index return?\n        # The behavior is inconsistent. It returns a Series, except when\n        # - the key itself is repeated (test on data.shape, #9519), or\n        # - we have a MultiIndex on columns (test on self.columns, #21309)\n        if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n            data = data[key]\n\n    return data",
                "def _getitem_bool_array(self, key):\n    # also raises Exception if object array with NA values\n    # warning here just in case -- previously __setitem__ was\n    # reindexing but __getitem__ was not; it seems more reasonable to\n    # go with the __setitem__ behavior since that is more consistent\n    # with all other indexing behavior\n    if isinstance(key, Series) and not key.index.equals(self.index):\n        warnings.warn(\n            \"Boolean Series key will be reindexed to match DataFrame index.\",\n            UserWarning,\n            stacklevel=3,\n        )\n    elif len(key) != len(self.index):\n        raise ValueError(\n            f\"Item wrong length {len(key)} instead of {len(self.index)}.\"\n        )\n\n    # check_bool_indexer will throw exception if Series key cannot\n    # be reindexed to match DataFrame rows\n    key = check_bool_indexer(self.index, key)\n    indexer = key.nonzero()[0]\n    return self._take_with_is_copy(indexer, axis=0)",
                "def _getitem_multilevel(self, key):\n    # self.columns is a MultiIndex\n    loc = self.columns.get_loc(key)\n    if isinstance(loc, (slice, Series, np.ndarray, Index)):\n        new_columns = self.columns[loc]\n        result_columns = maybe_droplevels(new_columns, key)\n        if self._is_mixed_type:\n            result = self.reindex(columns=new_columns)\n            result.columns = result_columns\n        else:\n            new_values = self.values[:, loc]\n            result = self._constructor(\n                new_values, index=self.index, columns=result_columns\n            )\n            result = result.__finalize__(self)\n\n        # If there is only one column being returned, and its name is\n        # either an empty string, or a tuple with an empty string as its\n        # first element, then treat the empty string as a placeholder\n        # and return the column as if the user had provided that empty\n        # string in the key. If the result is a Series, exclude the\n        # implied empty string from its name.\n        if len(result.columns) == 1:\n            top = result.columns[0]\n            if isinstance(top, tuple):\n                top = top[0]\n            if top == \"\":\n                result = result[\"\"]\n                if isinstance(result, Series):\n                    result = self._constructor_sliced(\n                        result, index=self.index, name=key\n                    )\n\n        result._set_is_copy(self)\n        return result\n    else:\n        return self._get_item_cache(key)",
                "def _get_value(self, index, col, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n\n    try:\n        loc = engine.get_loc(index)\n        return series._values[loc]\n    except KeyError:\n        # GH 20629\n        if self.index.nlevels > 1:\n            # partial indexing forbidden\n            raise\n\n    # we cannot handle direct indexing\n    # use positional\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)",
                "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n\n    # see if we can slice the rows\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        # either we have a slice or we have a string that can be converted\n        #  to a slice for partial-string date indexing\n        return self._setitem_slice(indexer, value)\n\n    if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n        self._setitem_frame(key, value)\n    elif isinstance(key, (Series, np.ndarray, list, Index)):\n        self._setitem_array(key, value)\n    else:\n        # set column\n        self._set_item(key, value)",
                "def _setitem_slice(self, key: slice, value):\n    # NB: we can't just use self.loc[key] = value because that\n    #  operates on labels and we need to operate positional for\n    #  backwards-compat, xref GH#31469\n    self._check_setitem_copy()\n    self.iloc._setitem_with_indexer(key, value)",
                "def _setitem_array(self, key, value):\n    # also raises Exception if object array with NA values\n    if com.is_bool_indexer(key):\n        if len(key) != len(self.index):\n            raise ValueError(\n                f\"Item wrong length {len(key)} instead of {len(self.index)}!\"\n            )\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        self._check_setitem_copy()\n        self.iloc._setitem_with_indexer(indexer, value)\n    else:\n        if isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError(\"Columns must be same length as key\")\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._get_listlike_indexer(\n                key, axis=1, raise_missing=False\n            )[1]\n            self._check_setitem_copy()\n            self.iloc._setitem_with_indexer((slice(None), indexer), value)",
                "def _setitem_frame(self, key, value):\n    # support boolean setting with DataFrame input, e.g.\n    # df[df > df2] = 0\n    if isinstance(key, np.ndarray):\n        if key.shape != self.shape:\n            raise ValueError(\"Array conditional must be same shape as self\")\n        key = self._constructor(key, **self._construct_axes_dict())\n\n    if key.values.size and not is_bool_dtype(key.values):\n        raise TypeError(\n            \"Must pass DataFrame or 2-d ndarray with boolean values only\"\n        )\n\n    self._check_inplace_setting(value)\n    self._check_setitem_copy()\n    self._where(-key, value, inplace=True)",
                "def _set_item(self, key, value):\n    \"\"\"\n    Add series to DataFrame in specified column.\n\n    If series is a numpy-array (not a Series/TimeSeries), it must be the\n    same length as the DataFrames index or an error will be thrown.\n\n    Series/TimeSeries will be conformed to the DataFrames index to\n    ensure homogeneity.\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(key, value)\n    NDFrame._set_item(self, key, value)\n\n    # check if we are modifying a copy\n    # try to set first as we want an invalid\n    # value exception to occur first\n    if len(self):\n        self._check_setitem_copy()",
                "def _set_value(self, index, col, value, takeable: bool = False):\n    \"\"\"\n    Put single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    value : scalar\n    takeable : interpret the index/col as indexers, default False\n    \"\"\"\n    try:\n        if takeable is True:\n            series = self._iget_item_cache(col)\n            series._set_value(index, value, takeable=True)\n            return\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        loc = engine.get_loc(index)\n        validate_numeric_casting(series.dtype, value)\n\n        series._values[loc] = value\n        # Note: trying to use series._set_value breaks tests in\n        #  tests.frame.indexing.test_indexing and tests.indexing.test_partial\n    except (KeyError, TypeError):\n        # set using a non-recursive method & reset the cache\n        if takeable:\n            self.iloc[index, col] = value\n        else:\n            self.loc[index, col] = value\n        self._item_cache.pop(col, None)",
                "def _ensure_valid_index(self, value):\n    \"\"\"\n    Ensure that if we don't have an index, that we can create one from the\n    passed value.\n    \"\"\"\n    # GH5632, make sure that we are a Series convertible\n    if not len(self.index) and is_list_like(value) and len(value):\n        try:\n            value = Series(value)\n        except (ValueError, NotImplementedError, TypeError):\n            raise ValueError(\n                \"Cannot set a frame with no defined index \"\n                \"and a value that cannot be converted to a Series\"\n            )\n\n        self._data = self._data.reindex_axis(\n            value.index.copy(), axis=1, fill_value=np.nan\n        )",
                "def _box_item_values(self, key, values):\n    items = self.columns[self.columns.get_loc(key)]\n    if values.ndim == 2:\n        return self._constructor(values.T, columns=items, index=self.index)\n    else:\n        return self._box_col_values(values, items)",
                "def _box_col_values(self, values, items):\n    \"\"\"\n    Provide boxed values for a column.\n    \"\"\"\n    klass = self._constructor_sliced\n    return klass(values, index=self.index, name=items, fastpath=True)",
                "def query(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Query the columns of a DataFrame with a boolean expression.\n\n    Parameters\n    ----------\n    expr : str\n        The query string to evaluate.\n\n        You can refer to variables\n        in the environment by prefixing them with an '@' character like\n        ``@a + b``.\n\n        You can refer to column names that contain spaces or operators by\n        surrounding them in backticks. This way you can also escape\n        names that start with a digit, or those that  are a Python keyword.\n        Basically when it is not valid Python identifier. See notes down\n        for more details.\n\n        For example, if one of your columns is called ``a a`` and you want\n        to sum it with ``b``, your query should be ```a a` + b``.\n\n        .. versionadded:: 0.25.0\n            Backtick quoting introduced.\n\n        .. versionadded:: 1.0.0\n            Expanding functionality of backtick quoting for more than only spaces.\n\n    inplace : bool\n        Whether the query should modify the data in place or return\n        a modified copy.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame resulting from the provided query expression.\n\n    See Also\n    --------\n    eval : Evaluate a string describing operations on\n        DataFrame columns.\n    DataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\n    Notes\n    -----\n    The result of the evaluation of this expression is first passed to\n    :attr:`DataFrame.loc` and if that fails because of a\n    multidimensional key (e.g., a DataFrame) then the result will be passed\n    to :meth:`DataFrame.__getitem__`.\n\n    This method uses the top-level :func:`eval` function to\n    evaluate the passed query.\n\n    The :meth:`~pandas.DataFrame.query` method uses a slightly\n    modified Python syntax by default. For example, the ``&`` and ``|``\n    (bitwise) operators have the precedence of their boolean cousins,\n    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n    however the semantics are different.\n\n    You can change the semantics of the expression by passing the keyword\n    argument ``parser='python'``. This enforces the same semantics as\n    evaluation in Python space. Likewise, you can pass ``engine='python'``\n    to evaluate an expression using Python itself as a backend. This is not\n    recommended as it is inefficient compared to using ``numexpr`` as the\n    engine.\n\n    The :attr:`DataFrame.index` and\n    :attr:`DataFrame.columns` attributes of the\n    :class:`~pandas.DataFrame` instance are placed in the query namespace\n    by default, which allows you to treat both the index and columns of the\n    frame as a column in the frame.\n    The identifier ``index`` is used for the frame index; you can also\n    use the name of the index to identify it in a query. Please note that\n    Python keywords may not be used as identifiers.\n\n    For further details and examples see the ``query`` documentation in\n    :ref:`indexing <indexing.query>`.\n\n    *Backtick quoted variables*\n\n    Backtick quoted variables are parsed as literal Python code and\n    are converted internally to a Python valid identifier.\n    This can lead to the following problems.\n\n    During parsing a number of disallowed characters inside the backtick\n    quoted string are replaced by strings that are allowed as a Python identifier.\n    These characters include all operators in Python, the space character, the\n    question mark, the exclamation mark, the dollar sign, and the euro sign.\n    For other characters that fall outside the ASCII range (U+0001..U+007F)\n    and those that are not further specified in PEP 3131,\n    the query parser will raise an error.\n    This excludes whitespace different than the space character,\n    but also the hashtag (as it is used for comments) and the backtick\n    itself (backtick can also not be escaped).\n\n    In a special case, quotes that make a pair around a backtick can\n    confuse the parser.\n    For example, ```it's` > `that's``` will raise an error,\n    as it forms a quoted string (``'s > `that'``) with a backtick inside.\n\n    See also the Python documentation about lexical analysis\n    (https://docs.python.org/3/reference/lexical_analysis.html)\n    in combination with the source code in :mod:`pandas.core.computation.parsing`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6),\n    ...                    'B': range(10, 0, -2),\n    ...                    'C C': range(10, 5, -1)})\n    >>> df\n       A   B  C C\n    0  1  10   10\n    1  2   8    9\n    2  3   6    8\n    3  4   4    7\n    4  5   2    6\n    >>> df.query('A > B')\n       A  B  C C\n    4  5  2    6\n\n    The previous expression is equivalent to\n\n    >>> df[df.A > df.B]\n       A  B  C C\n    4  5  2    6\n\n    For columns with spaces in their name, you can use backtick quoting.\n\n    >>> df.query('B == `C C`')\n       A   B  C C\n    0  1  10   10\n\n    The previous expression is equivalent to\n\n    >>> df[df.B == df['C C']]\n       A   B  C C\n    0  1  10   10\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not isinstance(expr, str):\n        msg = f\"expr must be a string to be evaluated, {type(expr)} given\"\n        raise ValueError(msg)\n    kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n    kwargs[\"target\"] = None\n    res = self.eval(expr, **kwargs)\n\n    try:\n        new_data = self.loc[res]\n    except ValueError:\n        # when res is multi-dimensional loc raises, but this is sometimes a\n        # valid query\n        new_data = self[res]\n\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return new_data",
                "def eval(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Evaluate a string describing operations on DataFrame columns.\n\n    Operates on columns only, not specific rows or elements.  This allows\n    `eval` to run arbitrary code, which can make you vulnerable to code\n    injection if you pass user input to this function.\n\n    Parameters\n    ----------\n    expr : str\n        The expression string to evaluate.\n    inplace : bool, default False\n        If the expression contains an assignment, whether to perform the\n        operation inplace and mutate the existing DataFrame. Otherwise,\n        a new DataFrame is returned.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by\n        :meth:`~pandas.DataFrame.query`.\n\n    Returns\n    -------\n    ndarray, scalar, or pandas object\n        The result of the evaluation.\n\n    See Also\n    --------\n    DataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\n    DataFrame.assign : Can evaluate an expression or function to create new\n        values for a column.\n    eval : Evaluate a Python expression as a string using various\n        backends.\n\n    Notes\n    -----\n    For more details see the API documentation for :func:`~eval`.\n    For detailed examples see :ref:`enhancing performance with eval\n    <enhancingperf.eval>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n    >>> df.eval('A + B')\n    0    11\n    1    10\n    2     9\n    3     8\n    4     7\n    dtype: int64\n\n    Assignment is allowed though by default the original DataFrame is not\n    modified.\n\n    >>> df.eval('C = A + B')\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n\n    Use ``inplace=True`` to modify the original DataFrame.\n\n    >>> df.eval('C = A + B', inplace=True)\n    >>> df\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n\n    Multiple columns can be assigned to using multi-line expressions:\n\n    >>> df.eval(\n    ...     '''\n    ... C = A + B\n    ... D = A - B\n    ... '''\n    ... )\n       A   B   C  D\n    0  1  10  11 -9\n    1  2   8  10 -6\n    2  3   6   9 -3\n    3  4   4   8  0\n    4  5   2   7  3\n    \"\"\"\n    from pandas.core.computation.eval import eval as _eval\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    resolvers = kwargs.pop(\"resolvers\", None)\n    kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_cleaned_column_resolvers()\n        resolvers = column_resolvers, index_resolvers\n    if \"target\" not in kwargs:\n        kwargs[\"target\"] = self\n    kwargs[\"resolvers\"] = kwargs.get(\"resolvers\", ()) + tuple(resolvers)\n\n    return _eval(expr, inplace=inplace, **kwargs)",
                "def select_dtypes(self, include=None, exclude=None) -> \"DataFrame\":\n    \"\"\"\n    Return a subset of the DataFrame's columns based on the column dtypes.\n\n    Parameters\n    ----------\n    include, exclude : scalar or list-like\n        A selection of dtypes or strings to be included/excluded. At least\n        one of these parameters must be supplied.\n\n    Returns\n    -------\n    DataFrame\n        The subset of the frame including the dtypes in ``include`` and\n        excluding the dtypes in ``exclude``.\n\n    Raises\n    ------\n    ValueError\n        * If both of ``include`` and ``exclude`` are empty\n        * If ``include`` and ``exclude`` have overlapping elements\n        * If any kind of string dtype is passed in.\n\n    Notes\n    -----\n    * To select all *numeric* types, use ``np.number`` or ``'number'``\n    * To select strings you must use the ``object`` dtype, but note that\n      this will return *all* object dtype columns\n    * See the `numpy dtype hierarchy\n      <https://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n      ``'datetime64'``\n    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n      ``'timedelta64'``\n    * To select Pandas categorical dtypes, use ``'category'``\n    * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n      0.20.0) or ``'datetime64[ns, tz]'``\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'a': [1, 2] * 3,\n    ...                    'b': [True, False] * 3,\n    ...                    'c': [1.0, 2.0] * 3})\n    >>> df\n            a      b  c\n    0       1   True  1.0\n    1       2  False  2.0\n    2       1   True  1.0\n    3       2  False  2.0\n    4       1   True  1.0\n    5       2  False  2.0\n\n    >>> df.select_dtypes(include='bool')\n       b\n    0  True\n    1  False\n    2  True\n    3  False\n    4  True\n    5  False\n\n    >>> df.select_dtypes(include=['float64'])\n       c\n    0  1.0\n    1  2.0\n    2  1.0\n    3  2.0\n    4  1.0\n    5  2.0\n\n    >>> df.select_dtypes(exclude=['int'])\n           b    c\n    0   True  1.0\n    1  False  2.0\n    2   True  1.0\n    3  False  2.0\n    4   True  1.0\n    5  False  2.0\n    \"\"\"\n    if not is_list_like(include):\n        include = (include,) if include is not None else ()\n    if not is_list_like(exclude):\n        exclude = (exclude,) if exclude is not None else ()\n\n    selection = (frozenset(include), frozenset(exclude))\n\n    if not any(selection):\n        raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n    # convert the myriad valid dtypes object to a single representation\n    include = frozenset(infer_dtype_from_object(x) for x in include)\n    exclude = frozenset(infer_dtype_from_object(x) for x in exclude)\n    for dtypes in (include, exclude):\n        invalidate_string_dtypes(dtypes)\n\n    # can't both include AND exclude!\n    if not include.isdisjoint(exclude):\n        raise ValueError(f\"include and exclude overlap on {(include & exclude)}\")\n\n    # We raise when both include and exclude are empty\n    # Hence, we can just shrink the columns we want to keep\n    keep_these = np.full(self.shape[1], True)\n\n    def extract_unique_dtypes_from_dtypes_set(\n        dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n    ) -> List[Dtype]:\n        extracted_dtypes = [\n            unique_dtype\n            for unique_dtype in unique_dtypes\n            if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n        ]\n        return extracted_dtypes\n\n    unique_dtypes = self.dtypes.unique()\n\n    if include:\n        included_dtypes = extract_unique_dtypes_from_dtypes_set(\n            include, unique_dtypes\n        )\n        keep_these &= self.dtypes.isin(included_dtypes)\n\n    if exclude:\n        excluded_dtypes = extract_unique_dtypes_from_dtypes_set(\n            exclude, unique_dtypes\n        )\n        keep_these &= ~self.dtypes.isin(excluded_dtypes)\n\n    return self.iloc[:, keep_these.values]",
                "def insert(self, loc, column, value, allow_duplicates=False) -> None:\n    \"\"\"\n    Insert column into DataFrame at specified location.\n\n    Raises a ValueError if `column` is already contained in the DataFrame,\n    unless `allow_duplicates` is set to True.\n\n    Parameters\n    ----------\n    loc : int\n        Insertion index. Must verify 0 <= loc <= len(columns).\n    column : str, number, or hashable object\n        Label of the inserted column.\n    value : int, Series, or array-like\n    allow_duplicates : bool, optional\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(column, value, broadcast=False)\n    self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
                "def assign(self, **kwargs) -> \"DataFrame\":\n    r\"\"\"\n    Assign new columns to a DataFrame.\n\n    Returns a new object with all original columns in addition to new ones.\n    Existing columns that are re-assigned will be overwritten.\n\n    Parameters\n    ----------\n    **kwargs : dict of {str: callable or Series}\n        The column names are keywords. If the values are\n        callable, they are computed on the DataFrame and\n        assigned to the new columns. The callable must not\n        change input DataFrame (though pandas doesn't check it).\n        If the values are not callable, (e.g. a Series, scalar, or array),\n        they are simply assigned.\n\n    Returns\n    -------\n    DataFrame\n        A new DataFrame with the new columns in addition to\n        all the existing columns.\n\n    Notes\n    -----\n    Assigning multiple columns within the same ``assign`` is possible.\n    Later items in '\\*\\*kwargs' may refer to newly created or modified\n    columns in 'df'; items are computed and assigned into 'df' in order.\n\n    .. versionchanged:: 0.23.0\n\n       Keyword argument order is maintained.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n    ...                   index=['Portland', 'Berkeley'])\n    >>> df\n              temp_c\n    Portland    17.0\n    Berkeley    25.0\n\n    Where the value is a callable, evaluated on `df`:\n\n    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    Alternatively, the same behavior can be achieved by directly\n    referencing an existing Series or sequence:\n\n    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    You can create multiple columns within the same assign where one\n    of the columns depends on another one defined within the same assign:\n\n    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n    ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n              temp_c  temp_f  temp_k\n    Portland    17.0    62.6  290.15\n    Berkeley    25.0    77.0  298.15\n    \"\"\"\n    data = self.copy()\n\n    for k, v in kwargs.items():\n        data[k] = com.apply_if_callable(v, data)\n    return data",
                "def _sanitize_column(self, key, value, broadcast=True):\n    \"\"\"\n    Ensures new columns (which go into the BlockManager as new blocks) are\n    always copied and converted into an array.\n\n    Parameters\n    ----------\n    key : object\n    value : scalar, Series, or array-like\n    broadcast : bool, default True\n        If ``key`` matches multiple duplicate column names in the\n        DataFrame, this parameter indicates whether ``value`` should be\n        tiled so that the returned array contains a (duplicated) column for\n        each occurrence of the key. If False, ``value`` will not be tiled.\n\n    Returns\n    -------\n    numpy.ndarray\n    \"\"\"\n\n    def reindexer(value):\n        # reindex if necessary\n\n        if value.index.equals(self.index) or not len(self.index):\n            value = value._values.copy()\n        else:\n\n            # GH 4107\n            try:\n                value = value.reindex(self.index)._values\n            except ValueError as err:\n                # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                if not value.index.is_unique:\n                    # duplicate axis\n                    raise err\n\n                # other\n                raise TypeError(\n                    \"incompatible index of inserted column with frame index\"\n                )\n        return value\n\n    if isinstance(value, Series):\n        value = reindexer(value)\n\n    elif isinstance(value, DataFrame):\n        # align right-hand-side columns if self.columns\n        # is multi-index and self[key] is a sub-frame\n        if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n            loc = self.columns.get_loc(key)\n            if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                cols = maybe_droplevels(self.columns[loc], key)\n                if len(cols) and not cols.equals(value.columns):\n                    value = value.reindex(cols, axis=1)\n        # now align rows\n        value = reindexer(value).T\n\n    elif isinstance(value, ExtensionArray):\n        # Explicitly copy here, instead of in sanitize_index,\n        # as sanitize_index won't copy an EA, even with copy=True\n        value = value.copy()\n        value = sanitize_index(value, self.index)\n\n    elif isinstance(value, Index) or is_sequence(value):\n\n        # turn me into an ndarray\n        value = sanitize_index(value, self.index)\n        if not isinstance(value, (np.ndarray, Index)):\n            if isinstance(value, list) and len(value) > 0:\n                value = maybe_convert_platform(value)\n            else:\n                value = com.asarray_tuplesafe(value)\n        elif value.ndim == 2:\n            value = value.copy().T\n        elif isinstance(value, Index):\n            value = value.copy(deep=True)\n        else:\n            value = value.copy()\n\n        # possibly infer to datetimelike\n        if is_object_dtype(value.dtype):\n            value = maybe_infer_to_datetimelike(value)\n\n    else:\n        # cast ignores pandas dtypes. so save the dtype first\n        infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n        # upcast\n        value = cast_scalar_to_array(len(self.index), value)\n        value = maybe_cast_to_datetime(value, infer_dtype)\n\n    # return internal types directly\n    if is_extension_array_dtype(value):\n        return value\n\n    # broadcast across multiple columns if necessary\n    if broadcast and key in self.columns and value.ndim == 1:\n        if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n            existing_piece = self[key]\n            if isinstance(existing_piece, DataFrame):\n                value = np.tile(value, (len(existing_piece.columns), 1))\n\n    return np.atleast_2d(np.asarray(value))",
                "@property\ndef _series(self):\n    return {\n        item: Series(self._data.iget(idx), index=self.index, name=item)\n        for idx, item in enumerate(self.columns)\n    }",
                "def lookup(self, row_labels, col_labels) -> np.ndarray:\n    \"\"\"\n    Label-based \"fancy indexing\" function for DataFrame.\n\n    Given equal-length arrays of row and column labels, return an\n    array of the values corresponding to each (row, col) pair.\n\n    Parameters\n    ----------\n    row_labels : sequence\n        The row labels to use for lookup.\n    col_labels : sequence\n        The column labels to use for lookup.\n\n    Returns\n    -------\n    numpy.ndarray\n        The found values.\n    \"\"\"\n    n = len(row_labels)\n    if n != len(col_labels):\n        raise ValueError(\"Row labels must have same size as column labels\")\n\n    thresh = 1000\n    if not self._is_mixed_type or n > thresh:\n        values = self.values\n        ridx = self.index.get_indexer(row_labels)\n        cidx = self.columns.get_indexer(col_labels)\n        if (ridx == -1).any():\n            raise KeyError(\"One or more row labels was not found\")\n        if (cidx == -1).any():\n            raise KeyError(\"One or more column labels was not found\")\n        flat_index = ridx * len(self.columns) + cidx\n        result = values.flat[flat_index]\n    else:\n        result = np.empty(n, dtype=\"O\")\n        for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n            result[i] = self._get_value(r, c)\n\n    if is_object_dtype(result):\n        result = lib.maybe_convert_objects(result)\n\n    return result",
                "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    frame = self\n\n    columns = axes[\"columns\"]\n    if columns is not None:\n        frame = frame._reindex_columns(\n            columns, method, copy, level, fill_value, limit, tolerance\n        )\n\n    index = axes[\"index\"]\n    if index is not None:\n        frame = frame._reindex_index(\n            index, method, copy, level, fill_value, limit, tolerance\n        )\n\n    return frame",
                "def _reindex_index(\n    self,\n    new_index,\n    method,\n    copy,\n    level,\n    fill_value=np.nan,\n    limit=None,\n    tolerance=None,\n):\n    new_index, indexer = self.index.reindex(\n        new_index, method=method, level=level, limit=limit, tolerance=tolerance\n    )\n    return self._reindex_with_indexers(\n        {0: [new_index, indexer]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=False,\n    )",
                "def _reindex_columns(\n    self,\n    new_columns,\n    method,\n    copy,\n    level,\n    fill_value=None,\n    limit=None,\n    tolerance=None,\n):\n    new_columns, indexer = self.columns.reindex(\n        new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n    )\n    return self._reindex_with_indexers(\n        {1: [new_columns, indexer]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=False,\n    )",
                "def _reindex_multi(self, axes, copy, fill_value) -> \"DataFrame\":\n    \"\"\"\n    We are guaranteed non-Nones in the axes.\n    \"\"\"\n    new_index, row_indexer = self.index.reindex(axes[\"index\"])\n    new_columns, col_indexer = self.columns.reindex(axes[\"columns\"])\n\n    if row_indexer is not None and col_indexer is not None:\n        indexer = row_indexer, col_indexer\n        new_values = algorithms.take_2d_multi(\n            self.values, indexer, fill_value=fill_value\n        )\n        return self._constructor(new_values, index=new_index, columns=new_columns)\n    else:\n        return self._reindex_with_indexers(\n            {0: [new_index, row_indexer], 1: [new_columns, col_indexer]},\n            copy=copy,\n            fill_value=fill_value,\n        )",
                "@Appender(_shared_docs[\"align\"] % _shared_doc_kwargs)\ndef align(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy=True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n    broadcast_axis=None,\n) -> \"DataFrame\":\n    return super().align(\n        other,\n        join=join,\n        axis=axis,\n        level=level,\n        copy=copy,\n        fill_value=fill_value,\n        method=method,\n        limit=limit,\n        fill_axis=fill_axis,\n        broadcast_axis=broadcast_axis,\n    )",
                "@Appender(\n    \"\"\"\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n    Change the row labels.\n\n    >>> df.set_axis(['a', 'b', 'c'], axis='index')\n       A  B\n    a  1  4\n    b  2  5\n    c  3  6\n\n    Change the column labels.\n\n    >>> df.set_axis(['I', 'II'], axis='columns')\n       I  II\n    0  1   4\n    1  2   5\n    2  3   6\n\n    Now, update the labels inplace.\n\n    >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n    >>> df\n       i  ii\n    0  1   4\n    1  2   5\n    2  3   6\n    \"\"\"\n)\n@Substitution(\n    **_shared_doc_kwargs,\n    extended_summary_sub=\" column or\",\n    axis_description_sub=\", and 1 identifies the columns\",\n    see_also_sub=\" or columns\",\n)\n@Appender(NDFrame.set_axis.__doc__)\ndef set_axis(self, labels, axis=0, inplace=False):\n    return super().set_axis(labels, axis=axis, inplace=inplace)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.reindex.__doc__)\n@rewrite_axis_style_signature(\n    \"labels\",\n    [\n        (\"method\", None),\n        (\"copy\", True),\n        (\"level\", None),\n        (\"fill_value\", np.nan),\n        (\"limit\", None),\n        (\"tolerance\", None),\n    ],\n)\ndef reindex(self, *args, **kwargs) -> \"DataFrame\":\n    axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n    kwargs.update(axes)\n    # Pop these, since the values are in `kwargs` under different names\n    kwargs.pop(\"axis\", None)\n    kwargs.pop(\"labels\", None)\n    return self._ensure_type(super().reindex(**kwargs))",
                "def drop(\n    self,\n    labels=None,\n    axis=0,\n    index=None,\n    columns=None,\n    level=None,\n    inplace=False,\n    errors=\"raise\",\n):\n    \"\"\"\n    Drop specified labels from rows or columns.\n\n    Remove rows or columns by specifying label names and corresponding\n    axis, or by specifying directly index or column names. When using a\n    multi-index, labels on different levels can be removed by specifying\n    the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index or column labels to drop.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Whether to drop labels from the index (0 or 'index') or\n        columns (1 or 'columns').\n    index : single label or list-like\n        Alternative to specifying axis (``labels, axis=0``\n        is equivalent to ``index=labels``).\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        Alternative to specifying axis (``labels, axis=1``\n        is equivalent to ``columns=labels``).\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level from which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are\n        dropped.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame without the removed index or column labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis.\n\n    See Also\n    --------\n    DataFrame.loc : Label-location based indexer for selection by label.\n    DataFrame.dropna : Return DataFrame with labels on given axis omitted\n        where (all or any) data are missing.\n    DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n        removed, optionally only considering certain columns.\n    Series.drop : Return Series with specified index labels removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n    ...                   columns=['A', 'B', 'C', 'D'])\n    >>> df\n       A  B   C   D\n    0  0  1   2   3\n    1  4  5   6   7\n    2  8  9  10  11\n\n    Drop columns\n\n    >>> df.drop(['B', 'C'], axis=1)\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    >>> df.drop(columns=['B', 'C'])\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    Drop a row by index\n\n    >>> df.drop([0, 1])\n       A  B   C   D\n    2  8  9  10  11\n\n    Drop columns and/or rows of MultiIndex DataFrame\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n    ...                         [250, 150], [1.5, 0.8], [320, 250],\n    ...                         [1, 0.8], [0.3, 0.2]])\n    >>> df\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n            length  1.5     1.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n            length  1.5     0.8\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n            length  0.3     0.2\n\n    >>> df.drop(index='cow', columns='small')\n                    big\n    lama    speed   45.0\n            weight  200.0\n            length  1.5\n    falcon  speed   320.0\n            weight  1.0\n            length  0.3\n\n    >>> df.drop(index='length', level=1)\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n    \"\"\"\n    return super().drop(\n        labels=labels,\n        axis=axis,\n        index=index,\n        columns=columns,\n        level=level,\n        inplace=inplace,\n        errors=errors,\n    )",
                "@rewrite_axis_style_signature(\n    \"mapper\",\n    [(\"copy\", True), (\"inplace\", False), (\"level\", None), (\"errors\", \"ignore\")],\n)\ndef rename(\n    self,\n    mapper: Optional[Renamer] = None,\n    *,\n    index: Optional[Renamer] = None,\n    columns: Optional[Renamer] = None,\n    axis: Optional[Axis] = None,\n    copy: bool = True,\n    inplace: bool = False,\n    level: Optional[Level] = None,\n    errors: str = \"ignore\",\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Alter axes labels.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    mapper : dict-like or function\n        Dict-like or functions transformations to apply to\n        that axis' values. Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index`` and\n        ``columns``.\n    index : dict-like or function\n        Alternative to specifying axis (``mapper, axis=0``\n        is equivalent to ``index=mapper``).\n    columns : dict-like or function\n        Alternative to specifying axis (``mapper, axis=1``\n        is equivalent to ``columns=mapper``).\n    axis : int or str\n        Axis to target with ``mapper``. Can be either the axis name\n        ('index', 'columns') or number (0, 1). The default is 'index'.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new DataFrame. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with the renamed axis labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    DataFrame.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Rename columns using a mapping:\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Rename index using a mapping:\n\n    >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n       A  B\n    x  1  4\n    y  2  5\n    z  3  6\n\n    Cast index labels to a different type:\n\n    >>> df.index\n    RangeIndex(start=0, stop=3, step=1)\n    >>> df.rename(index=str).index\n    Index(['0', '1', '2'], dtype='object')\n\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n    Traceback (most recent call last):\n    KeyError: ['C'] not found in axis\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n    \"\"\"\n    return super().rename(\n        mapper=mapper,\n        index=index,\n        columns=columns,\n        axis=axis,\n        copy=copy,\n        inplace=inplace,\n        level=level,\n        errors=errors,\n    )",
                "@doc(NDFrame.fillna, **_shared_doc_kwargs)\ndef fillna(\n    self,\n    value=None,\n    method=None,\n    axis=None,\n    inplace=False,\n    limit=None,\n    downcast=None,\n) -> Optional[\"DataFrame\"]:\n    return super().fillna(\n        value=value,\n        method=method,\n        axis=axis,\n        inplace=inplace,\n        limit=limit,\n        downcast=downcast,\n    )",
                "@Appender(_shared_docs[\"replace\"] % _shared_doc_kwargs)\ndef replace(\n    self,\n    to_replace=None,\n    value=None,\n    inplace=False,\n    limit=None,\n    regex=False,\n    method=\"pad\",\n):\n    return super().replace(\n        to_replace=to_replace,\n        value=value,\n        inplace=inplace,\n        limit=limit,\n        regex=regex,\n        method=method,\n    )",
                "@Appender(_shared_docs[\"shift\"] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None) -> \"DataFrame\":\n    return self._ensure_type(\n        super().shift(periods=periods, freq=freq, axis=axis, fill_value=fill_value)\n    )",
                "def set_index(\n    self, keys, drop=True, append=False, inplace=False, verify_integrity=False\n):\n    \"\"\"\n    Set the DataFrame index using existing columns.\n\n    Set the DataFrame index (row labels) using one or more existing\n    columns or arrays (of the correct length). The index can replace the\n    existing index or expand on it.\n\n    Parameters\n    ----------\n    keys : label or array-like or list of labels/arrays\n        This parameter can be either a single column key, a single array of\n        the same length as the calling DataFrame, or a list containing an\n        arbitrary combination of column keys and arrays. Here, \"array\"\n        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n        instances of :class:`~collections.abc.Iterator`.\n    drop : bool, default True\n        Delete columns to be used as the new index.\n    append : bool, default False\n        Whether to append columns to existing index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    verify_integrity : bool, default False\n        Check the new index for duplicates. Otherwise defer the check until\n        necessary. Setting to False will improve the performance of this\n        method.\n\n    Returns\n    -------\n    DataFrame\n        Changed row labels.\n\n    See Also\n    --------\n    DataFrame.reset_index : Opposite of set_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n    ...                    'year': [2012, 2014, 2013, 2014],\n    ...                    'sale': [55, 40, 84, 31]})\n    >>> df\n       month  year  sale\n    0      1  2012    55\n    1      4  2014    40\n    2      7  2013    84\n    3     10  2014    31\n\n    Set the index to become the 'month' column:\n\n    >>> df.set_index('month')\n           year  sale\n    month\n    1      2012    55\n    4      2014    40\n    7      2013    84\n    10     2014    31\n\n    Create a MultiIndex using columns 'year' and 'month':\n\n    >>> df.set_index(['year', 'month'])\n                sale\n    year  month\n    2012  1     55\n    2014  4     40\n    2013  7     84\n    2014  10    31\n\n    Create a MultiIndex using an Index and a column:\n\n    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n             month  sale\n       year\n    1  2012  1      55\n    2  2014  4      40\n    3  2013  7      84\n    4  2014  10     31\n\n    Create a MultiIndex using two Series:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> df.set_index([s, s**2])\n          month  year  sale\n    1 1       1  2012    55\n    2 4       4  2014    40\n    3 9       7  2013    84\n    4 16     10  2014    31\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not isinstance(keys, list):\n        keys = [keys]\n\n    err_msg = (\n        'The parameter \"keys\" may be a column key, one-dimensional '\n        \"array, or a list containing only valid column keys and \"\n        \"one-dimensional arrays.\"\n    )\n\n    missing: List[Optional[Hashable]] = []\n    for col in keys:\n        if isinstance(\n            col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)\n        ):\n            # arrays are fine as long as they are one-dimensional\n            # iterators get converted to list below\n            if getattr(col, \"ndim\", 1) != 1:\n                raise ValueError(err_msg)\n        else:\n            # everything else gets tried as a key; see GH 24969\n            try:\n                found = col in self.columns\n            except TypeError:\n                raise TypeError(f\"{err_msg}. Received column of type {type(col)}\")\n            else:\n                if not found:\n                    missing.append(col)\n\n    if missing:\n        raise KeyError(f\"None of {missing} are in the columns\")\n\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n\n    arrays = []\n    names = []\n    if append:\n        names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n\n    to_remove: List[Optional[Hashable]] = []\n    for col in keys:\n        if isinstance(col, ABCMultiIndex):\n            for n in range(col.nlevels):\n                arrays.append(col._get_level_values(n))\n            names.extend(col.names)\n        elif isinstance(col, (ABCIndexClass, ABCSeries)):\n            # if Index then not MultiIndex (treated above)\n            arrays.append(col)\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray)):\n            arrays.append(col)\n            names.append(None)\n        elif isinstance(col, abc.Iterator):\n            arrays.append(list(col))\n            names.append(None)\n        # from here, col can only be a column label\n        else:\n            arrays.append(frame[col]._values)\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n\n        if len(arrays[-1]) != len(self):\n            # check newest element against length of calling frame, since\n            # ensure_index_from_sequences would not raise for append=False.\n            raise ValueError(\n                f\"Length mismatch: Expected {len(self)} rows, \"\n                f\"received array of length {len(arrays[-1])}\"\n            )\n\n    index = ensure_index_from_sequences(arrays, names)\n\n    if verify_integrity and not index.is_unique:\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError(f\"Index has duplicate keys: {duplicates}\")\n\n    # use set to handle duplicate column names gracefully in case of drop\n    for c in set(to_remove):\n        del frame[c]\n\n    # clear up memory usage\n    index._cleanup()\n\n    frame.index = index\n\n    if not inplace:\n        return frame",
                "def reset_index(\n    self,\n    level: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    drop: bool = False,\n    inplace: bool = False,\n    col_level: Hashable = 0,\n    col_fill: Optional[Hashable] = \"\",\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Reset the index, or a level of it.\n\n    Reset the index of the DataFrame, and use the default one instead.\n    If the DataFrame has a MultiIndex, this method can remove one or more\n    levels.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default None\n        Only remove the given levels from the index. Removes all levels by\n        default.\n    drop : bool, default False\n        Do not try to insert index into dataframe columns. This resets\n        the index to the default integer index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    col_level : int or str, default 0\n        If the columns have multiple levels, determines which level the\n        labels are inserted into. By default it is inserted into the first\n        level.\n    col_fill : object, default ''\n        If the columns have multiple levels, determines how the other\n        levels are named. If None then the index name is repeated.\n\n    Returns\n    -------\n    DataFrame or None\n        DataFrame with the new index or None if ``inplace=True``.\n\n    See Also\n    --------\n    DataFrame.set_index : Opposite of reset_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 389.0),\n    ...                    ('bird', 24.0),\n    ...                    ('mammal', 80.5),\n    ...                    ('mammal', np.nan)],\n    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n    ...                   columns=('class', 'max_speed'))\n    >>> df\n             class  max_speed\n    falcon    bird      389.0\n    parrot    bird       24.0\n    lion    mammal       80.5\n    monkey  mammal        NaN\n\n    When we reset the index, the old index is added as a column, and a\n    new sequential index is used:\n\n    >>> df.reset_index()\n        index   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    We can use the `drop` parameter to avoid the old index being added as\n    a column:\n\n    >>> df.reset_index(drop=True)\n        class  max_speed\n    0    bird      389.0\n    1    bird       24.0\n    2  mammal       80.5\n    3  mammal        NaN\n\n    You can also use `reset_index` with `MultiIndex`.\n\n    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n    ...                                    ('bird', 'parrot'),\n    ...                                    ('mammal', 'lion'),\n    ...                                    ('mammal', 'monkey')],\n    ...                                   names=['class', 'name'])\n    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n    ...                                      ('species', 'type')])\n    >>> df = pd.DataFrame([(389.0, 'fly'),\n    ...                    ( 24.0, 'fly'),\n    ...                    ( 80.5, 'run'),\n    ...                    (np.nan, 'jump')],\n    ...                   index=index,\n    ...                   columns=columns)\n    >>> df\n                   speed species\n                     max    type\n    class  name\n    bird   falcon  389.0     fly\n           parrot   24.0     fly\n    mammal lion     80.5     run\n           monkey    NaN    jump\n\n    If the index has multiple levels, we can reset a subset of them:\n\n    >>> df.reset_index(level='class')\n             class  speed species\n                      max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    If we are not dropping the index, by default, it is placed in the top\n    level. We can place it in another level:\n\n    >>> df.reset_index(level='class', col_level=1)\n                    speed species\n             class    max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    When the index is inserted under another level, we can specify under\n    which one with the parameter `col_fill`:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                  species  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n\n    If we specify a nonexistent level for `col_fill`, it is created:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                    genus  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if inplace:\n        new_obj = self\n    else:\n        new_obj = self.copy()\n\n    def _maybe_casted_values(index, labels=None):\n        values = index._values\n        if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n            if values.dtype == np.object_:\n                values = lib.maybe_convert_objects(values)\n\n        # if we have the labels, extract the values with a mask\n        if labels is not None:\n            mask = labels == -1\n\n            # we can have situations where the whole mask is -1,\n            # meaning there is nothing found in labels, so make all nan's\n            if mask.all():\n                values = np.empty(len(mask))\n                values.fill(np.nan)\n            else:\n                values = values.take(labels)\n\n                # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                # Push this into maybe_upcast_putmask?\n                # We can't pass EAs there right now. Looks a bit\n                # complicated.\n                # So we unbox the ndarray_values, op, re-box.\n                values_type = type(values)\n                values_dtype = values.dtype\n\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values._data\n\n                if mask.any():\n                    values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values_type(values, dtype=values_dtype)\n\n        return values\n\n    new_index = ibase.default_index(len(new_obj))\n    if level is not None:\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n        level = [self.index._get_level_number(lev) for lev in level]\n        if len(level) < self.index.nlevels:\n            new_index = self.index.droplevel(level)\n\n    if not drop:\n        to_insert: Iterable[Tuple[Any, Optional[Any]]]\n        if isinstance(self.index, ABCMultiIndex):\n            names = [\n                (n if n is not None else f\"level_{i}\")\n                for i, n in enumerate(self.index.names)\n            ]\n            to_insert = zip(self.index.levels, self.index.codes)\n        else:\n            default = \"index\" if \"index\" not in self else \"level_0\"\n            names = [default] if self.index.name is None else [self.index.name]\n            to_insert = ((self.index, None),)\n\n        multi_col = isinstance(self.columns, ABCMultiIndex)\n        for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n            if not (level is None or i in level):\n                continue\n            name = names[i]\n            if multi_col:\n                col_name = list(name) if isinstance(name, tuple) else [name]\n                if col_fill is None:\n                    if len(col_name) not in (1, self.columns.nlevels):\n                        raise ValueError(\n                            \"col_fill=None is incompatible \"\n                            f\"with incomplete column name {name}\"\n                        )\n                    col_fill = col_name[0]\n\n                lev_num = self.columns._get_level_number(col_level)\n                name_lst = [col_fill] * lev_num + col_name\n                missing = self.columns.nlevels - len(name_lst)\n                name_lst += [col_fill] * missing\n                name = tuple(name_lst)\n            # to ndarray and maybe infer different dtype\n            level_values = _maybe_casted_values(lev, lab)\n            new_obj.insert(0, name, level_values)\n\n    new_obj.index = new_index\n    if not inplace:\n        return new_obj\n\n    return None",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isna(self) -> \"DataFrame\":\n    return super().isna()",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isnull(self) -> \"DataFrame\":\n    return super().isnull()",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notna(self) -> \"DataFrame\":\n    return super().notna()",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notnull(self) -> \"DataFrame\":\n    return super().notnull()",
                "def dropna(self, axis=0, how=\"any\", thresh=None, subset=None, inplace=False):\n    \"\"\"\n    Remove missing values.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Determine if rows or columns which contain missing values are\n        removed.\n\n        * 0, or 'index' : Drop rows which contain missing values.\n        * 1, or 'columns' : Drop columns which contain missing value.\n\n        .. versionchanged:: 1.0.0\n\n           Pass tuple or list to drop on multiple axes.\n           Only a single axis is allowed.\n\n    how : {'any', 'all'}, default 'any'\n        Determine if row or column is removed from DataFrame, when we have\n        at least one NA or all NA.\n\n        * 'any' : If any NA values are present, drop that row or column.\n        * 'all' : If all values are NA, drop that row or column.\n\n    thresh : int, optional\n        Require that many non-NA values.\n    subset : array-like, optional\n        Labels along other axis to consider, e.g. if you are dropping rows\n        these would be a list of columns to include.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with NA entries dropped from it.\n\n    See Also\n    --------\n    DataFrame.isna: Indicate missing values.\n    DataFrame.notna : Indicate existing (non-missing) values.\n    DataFrame.fillna : Replace missing values.\n    Series.dropna : Drop missing values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n    ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n    ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n    ...                             pd.NaT]})\n    >>> df\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Drop the rows where at least one element is missing.\n\n    >>> df.dropna()\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n\n    Drop the columns where at least one element is missing.\n\n    >>> df.dropna(axis='columns')\n           name\n    0    Alfred\n    1    Batman\n    2  Catwoman\n\n    Drop the rows where all elements are missing.\n\n    >>> df.dropna(how='all')\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Keep only the rows with at least 2 non-NA values.\n\n    >>> df.dropna(thresh=2)\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Define in which columns to look for missing values.\n\n    >>> df.dropna(subset=['name', 'born'])\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n\n    Keep the DataFrame with valid entries in the same variable.\n\n    >>> df.dropna(inplace=True)\n    >>> df\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if isinstance(axis, (tuple, list)):\n        # GH20987\n        raise TypeError(\"supplying multiple axes to axis is no longer supported.\")\n\n    axis = self._get_axis_number(axis)\n    agg_axis = 1 - axis\n\n    agg_obj = self\n    if subset is not None:\n        ax = self._get_axis(agg_axis)\n        indices = ax.get_indexer_for(subset)\n        check = indices == -1\n        if check.any():\n            raise KeyError(list(np.compress(check, subset)))\n        agg_obj = self.take(indices, axis=agg_axis)\n\n    count = agg_obj.count(axis=agg_axis)\n\n    if thresh is not None:\n        mask = count >= thresh\n    elif how == \"any\":\n        mask = count == len(agg_obj._get_axis(agg_axis))\n    elif how == \"all\":\n        mask = count > 0\n    else:\n        if how is not None:\n            raise ValueError(f\"invalid how option: {how}\")\n        else:\n            raise TypeError(\"must specify how or thresh\")\n\n    result = self.loc(axis=axis)[mask]\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                "def drop_duplicates(\n    self,\n    subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    keep: Union[str, bool] = \"first\",\n    inplace: bool = False,\n    ignore_index: bool = False,\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Return DataFrame with duplicate rows removed.\n\n    Considering certain columns is optional. Indexes, including time indexes\n    are ignored.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to keep.\n        - ``first`` : Drop duplicates except for the first occurrence.\n        - ``last`` : Drop duplicates except for the last occurrence.\n        - False : Drop all duplicates.\n    inplace : bool, default False\n        Whether to drop duplicates in place or to return a copy.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with duplicates removed or None if ``inplace=True``.\n    \"\"\"\n    if self.empty:\n        return self.copy()\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    duplicated = self.duplicated(subset, keep=keep)\n\n    if inplace:\n        (inds,) = (-duplicated)._ndarray_values.nonzero()\n        new_data = self._data.take(inds)\n\n        if ignore_index:\n            new_data.axes[1] = ibase.default_index(len(inds))\n        self._update_inplace(new_data)\n    else:\n        result = self[-duplicated]\n\n        if ignore_index:\n            result.index = ibase.default_index(len(result))\n        return result\n\n    return None",
                "def duplicated(\n    self,\n    subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    keep: Union[str, bool] = \"first\",\n) -> \"Series\":\n    \"\"\"\n    Return boolean Series denoting duplicate rows.\n\n    Considering certain columns is optional.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to mark.\n\n        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.sorting import get_group_index\n    from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n    if self.empty:\n        return Series(dtype=bool)\n\n    def f(vals):\n        labels, shape = algorithms.factorize(\n            vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n        )\n        return labels.astype(\"i8\", copy=False), len(shape)\n\n    if subset is None:\n        subset = self.columns\n    elif (\n        not np.iterable(subset)\n        or isinstance(subset, str)\n        or isinstance(subset, tuple)\n        and subset in self.columns\n    ):\n        subset = (subset,)\n\n    #  needed for mypy since can't narrow types using np.iterable\n    subset = cast(Iterable, subset)\n\n    # Verify all columns in subset exist in the queried dataframe\n    # Otherwise, raise a KeyError, same as if you try to __getitem__ with a\n    # key that doesn't exist.\n    diff = Index(subset).difference(self.columns)\n    if not diff.empty:\n        raise KeyError(diff)\n\n    vals = (col.values for name, col in self.items() if name in subset)\n    labels, shape = map(list, zip(*map(f, vals)))\n\n    ids = get_group_index(labels, shape, sort=False, xnull=False)\n    return Series(duplicated_int64(ids, keep), index=self.index)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_values.__doc__)\ndef sort_values(\n    self,\n    by,\n    axis=0,\n    ascending=True,\n    inplace=False,\n    kind=\"quicksort\",\n    na_position=\"last\",\n    ignore_index=False,\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    axis = self._get_axis_number(axis)\n\n    if not isinstance(by, list):\n        by = [by]\n    if is_sequence(ascending) and len(by) != len(ascending):\n        raise ValueError(\n            f\"Length of ascending ({len(ascending)}) != length of by ({len(by)})\"\n        )\n    if len(by) > 1:\n        from pandas.core.sorting import lexsort_indexer\n\n        keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n        indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n    else:\n        from pandas.core.sorting import nargsort\n\n        by = by[0]\n        k = self._get_label_or_level_values(by, axis=axis)\n\n        if isinstance(ascending, (tuple, list)):\n            ascending = ascending[0]\n\n        indexer = nargsort(\n            k, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    new_data = self._data.take(\n        indexer, axis=self._get_block_manager_axis(axis), verify=False\n    )\n\n    if ignore_index:\n        new_data.axes[1] = ibase.default_index(len(indexer))\n\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "def sort_index(\n    self,\n    axis=0,\n    level=None,\n    ascending: bool = True,\n    inplace: bool = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n    sort_remaining: bool = True,\n    ignore_index: bool = False,\n):\n    \"\"\"\n    Sort object by labels (along an axis).\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to sort.  The value 0 identifies the rows,\n        and 1 identifies the columns.\n    level : int or level name or list of ints or list of level names\n        If not None, sort on values in specified index level(s).\n    ascending : bool or list of bools, default True\n        Sort ascending vs. descending. When the index is a MultiIndex the\n        sort direction can be controlled for each level individually.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also ndarray.np.sort for more\n        information.  `mergesort` is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted index if inplace=False, None otherwise.\n    \"\"\"\n    # TODO: this can be combined with Series.sort_index impl as\n    # almost identical\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n\n    # make sure that the axis is lexsorted to start\n    # if not we need to reconstruct to get the correct indexer\n    labels = labels._sort_levels_monotonic()\n    if level is not None:\n\n        new_axis, indexer = labels.sortlevel(\n            level, ascending=ascending, sort_remaining=sort_remaining\n        )\n\n    elif isinstance(labels, ABCMultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n\n        indexer = lexsort_indexer(\n            labels._get_codes_for_sorting(),\n            orders=ascending,\n            na_position=na_position,\n        )\n    else:\n        from pandas.core.sorting import nargsort\n\n        # Check monotonic-ness before sort an index\n        # GH11080\n        if (ascending and labels.is_monotonic_increasing) or (\n            not ascending and labels.is_monotonic_decreasing\n        ):\n            if inplace:\n                return\n            else:\n                return self.copy()\n\n        indexer = nargsort(\n            labels, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    baxis = self._get_block_manager_axis(axis)\n    new_data = self._data.take(indexer, axis=baxis, verify=False)\n\n    # reconstruct axis if needed\n    new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n    if ignore_index:\n        new_data.axes[1] = ibase.default_index(len(indexer))\n\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "def nlargest(self, n, columns, keep=\"first\") -> \"DataFrame\":\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in descending order.\n\n    Return the first `n` rows with the largest values in `columns`, in\n    descending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=False).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows to return.\n    columns : label or list of labels\n        Column label(s) to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - `first` : prioritize the first occurrence(s)\n        - `last` : prioritize the last occurrence(s)\n        - ``all`` : do not drop any duplicates, even it means\n                    selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The first `n` rows ordered by the given columns in descending\n        order.\n\n    See Also\n    --------\n    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n        ascending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Notes\n    -----\n    This function cannot be used with all column types. For example, when\n    specifying columns with `object` or `category` dtypes, ``TypeError`` is\n    raised.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nlargest`` to select the three\n    rows having the largest values in column \"population\".\n\n    >>> df.nlargest(3, 'population')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Malta       434000    12011      MT\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nlargest(3, 'population', keep='last')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nlargest(3, 'population', keep='all')\n              population      GDP alpha-2\n    France      65000000  2583560      FR\n    Italy       59000000  1937894      IT\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n\n    To order by the largest values in column \"population\" and then \"GDP\",\n    we can specify multiple columns like in the next example.\n\n    >>> df.nlargest(3, ['population', 'GDP'])\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()",
                "def nsmallest(self, n, columns, keep=\"first\") -> \"DataFrame\":\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in ascending order.\n\n    Return the first `n` rows with the smallest values in `columns`, in\n    ascending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=True).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of items to retrieve.\n    columns : list or str\n        Column name or names to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - ``first`` : take the first occurrence.\n        - ``last`` : take the last occurrence.\n        - ``all`` : do not drop any duplicates, even it means\n          selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n        descending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 337000,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru         337000      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nsmallest`` to select the\n    three rows having the smallest values in column \"population\".\n\n    >>> df.nsmallest(3, 'population')\n              population    GDP alpha-2\n    Tuvalu         11300     38      TV\n    Anguilla       11300    311      AI\n    Iceland       337000  17036\t     IS\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nsmallest(3, 'population', keep='last')\n              population  GDP alpha-2\n    Anguilla       11300  311      AI\n    Tuvalu         11300   38      TV\n    Nauru         337000  182      NR\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nsmallest(3, 'population', keep='all')\n              population    GDP alpha-2\n    Tuvalu         11300     38      TV\n    Anguilla       11300    311      AI\n    Iceland       337000  17036      IS\n    Nauru         337000    182      NR\n\n    To order by the smallest values in column \"population\" and then \"GDP\", we can\n    specify multiple columns like in the next example.\n\n    >>> df.nsmallest(3, ['population', 'GDP'])\n              population  GDP alpha-2\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n    Nauru         337000  182      NR\n    \"\"\"\n    return algorithms.SelectNFrame(\n        self, n=n, keep=keep, columns=columns\n    ).nsmallest()",
                "def swaplevel(self, i=-2, j=-1, axis=0) -> \"DataFrame\":\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis.\n\n    Parameters\n    ----------\n    i, j : int or str\n        Levels of the indices to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    result = self.copy()\n\n    axis = self._get_axis_number(axis)\n\n    if not isinstance(result._get_axis(axis), ABCMultiIndex):  # pragma: no cover\n        raise TypeError(\"Can only swap levels on a hierarchical axis.\")\n\n    if axis == 0:\n        assert isinstance(result.index, ABCMultiIndex)\n        result.index = result.index.swaplevel(i, j)\n    else:\n        assert isinstance(result.columns, ABCMultiIndex)\n        result.columns = result.columns.swaplevel(i, j)\n    return result",
                "def reorder_levels(self, order, axis=0) -> \"DataFrame\":\n    \"\"\"\n    Rearrange index levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int or list of str\n        List representing new level order. Reference level by number\n        (position) or by key (label).\n    axis : int\n        Where to reorder levels.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if not isinstance(self._get_axis(axis), ABCMultiIndex):  # pragma: no cover\n        raise TypeError(\"Can only reorder levels on a hierarchical axis.\")\n\n    result = self.copy()\n\n    if axis == 0:\n        assert isinstance(result.index, ABCMultiIndex)\n        result.index = result.index.reorder_levels(order)\n    else:\n        assert isinstance(result.columns, ABCMultiIndex)\n        result.columns = result.columns.reorder_levels(order)\n    return result",
                "def _combine_frame(self, other: \"DataFrame\", func, fill_value=None):\n    # at this point we have `self._indexed_same(other)`\n\n    if fill_value is None:\n        # since _arith_op may be called in a loop, avoid function call\n        #  overhead if possible by doing this check once\n        _arith_op = func\n\n    else:\n\n        def _arith_op(left, right):\n            # for the mixed_type case where we iterate over columns,\n            # _arith_op(left, right) is equivalent to\n            # left._binop(right, func, fill_value=fill_value)\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n\n    if ops.should_series_dispatch(self, other, func):\n        # iterate over columns\n        new_data = ops.dispatch_to_series(self, other, _arith_op)\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = _arith_op(self.values, other.values)\n        new_data = dispatch_fill_zeros(func, self.values, other.values, res_values)\n\n    return new_data",
                "def _combine_match_index(self, other: Series, func):\n    # at this point we have `self.index.equals(other.index)`\n\n    if ops.should_series_dispatch(self, other, func):\n        # operate column-wise; avoid costly object-casting in `.values`\n        new_data = ops.dispatch_to_series(self, other, func)\n    else:\n        # fastpath --> operate directly on values\n        other_vals = other.values.reshape(-1, 1)\n        with np.errstate(all=\"ignore\"):\n            new_data = func(self.values, other_vals)\n        new_data = dispatch_fill_zeros(func, self.values, other_vals, new_data)\n    return new_data",
                "def _construct_result(self, result) -> \"DataFrame\":\n    \"\"\"\n    Wrap the result of an arithmetic, comparison, or logical operation.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    out = self._constructor(result, index=self.index, copy=False)\n    # Pin columns instead of passing to constructor for compat with\n    #  non-unique columns case\n    out.columns = self.columns\n    return out",
                "def combine(\n    self, other: \"DataFrame\", func, fill_value=None, overwrite=True\n) -> \"DataFrame\":\n    \"\"\"\n    Perform column-wise combine with another DataFrame.\n\n    Combines a DataFrame with `other` DataFrame using `func`\n    to element-wise combine columns. The row and column indexes of the\n    resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        The DataFrame to merge column-wise.\n    func : function\n        Function that takes two series as inputs and return a Series or a\n        scalar. Used to merge the two dataframes column by columns.\n    fill_value : scalar value, default None\n        The value to fill NaNs with prior to passing any column to the\n        merge func.\n    overwrite : bool, default True\n        If True, columns in `self` that do not exist in `other` will be\n        overwritten with NaNs.\n\n    Returns\n    -------\n    DataFrame\n        Combination of the provided DataFrames.\n\n    See Also\n    --------\n    DataFrame.combine_first : Combine two DataFrame objects and default to\n        non-null values in frame calling the method.\n\n    Examples\n    --------\n    Combine using a simple function that chooses the smaller column.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n    >>> df1.combine(df2, take_smaller)\n       A  B\n    0  0  3\n    1  0  3\n\n    Example using a true element-wise combine function.\n\n    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, np.minimum)\n       A  B\n    0  1  2\n    1  0  3\n\n    Using `fill_value` fills Nones prior to passing the column to the\n    merge function.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n       A    B\n    0  0 -5.0\n    1  0  4.0\n\n    However, if the same element in both dataframes is None, that None\n    is preserved\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n        A    B\n    0  0 -5.0\n    1  0  3.0\n\n    Example that demonstrates the use of `overwrite` and behavior when\n    the axis differ between the dataframes.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n    >>> df1.combine(df2, take_smaller)\n         A    B     C\n    0  NaN  NaN   NaN\n    1  NaN  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    >>> df1.combine(df2, take_smaller, overwrite=False)\n         A    B     C\n    0  0.0  NaN   NaN\n    1  0.0  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    Demonstrating the preference of the passed in dataframe.\n\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n    >>> df2.combine(df1, take_smaller)\n       A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 NaN\n    2  NaN  3.0 NaN\n\n    >>> df2.combine(df1, take_smaller, overwrite=False)\n         A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 1.0\n    2  NaN  3.0 1.0\n    \"\"\"\n    other_idxlen = len(other.index)  # save for compare\n\n    this, other = self.align(other, copy=False)\n    new_index = this.index\n\n    if other.empty and len(new_index) == len(self.index):\n        return self.copy()\n\n    if self.empty and len(other) == other_idxlen:\n        return other.copy()\n\n    # sorts if possible\n    new_columns = this.columns.union(other.columns)\n    do_fill = fill_value is not None\n    result = {}\n    for col in new_columns:\n        series = this[col]\n        otherSeries = other[col]\n\n        this_dtype = series.dtype\n        other_dtype = otherSeries.dtype\n\n        this_mask = isna(series)\n        other_mask = isna(otherSeries)\n\n        # don't overwrite columns unnecessarily\n        # DO propagate if this column is not in the intersection\n        if not overwrite and other_mask.all():\n            result[col] = this[col].copy()\n            continue\n\n        if do_fill:\n            series = series.copy()\n            otherSeries = otherSeries.copy()\n            series[this_mask] = fill_value\n            otherSeries[other_mask] = fill_value\n\n        if col not in self.columns:\n            # If self DataFrame does not have col in other DataFrame,\n            # try to promote series, which is all NaN, as other_dtype.\n            new_dtype = other_dtype\n            try:\n                series = series.astype(new_dtype, copy=False)\n            except ValueError:\n                # e.g. new_dtype is integer types\n                pass\n        else:\n            # if we have different dtypes, possibly promote\n            new_dtype = find_common_type([this_dtype, other_dtype])\n            if not is_dtype_equal(this_dtype, new_dtype):\n                series = series.astype(new_dtype)\n            if not is_dtype_equal(other_dtype, new_dtype):\n                otherSeries = otherSeries.astype(new_dtype)\n\n        arr = func(series, otherSeries)\n        arr = maybe_downcast_to_dtype(arr, this_dtype)\n\n        result[col] = arr\n\n    # convert_objects just in case\n    return self._constructor(result, index=new_index, columns=new_columns)",
                "def combine_first(self, other: \"DataFrame\") -> \"DataFrame\":\n    \"\"\"\n    Update null elements with value in the same location in `other`.\n\n    Combine two DataFrame objects by filling null values in one DataFrame\n    with non-null values from other DataFrame. The row and column indexes\n    of the resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        Provided DataFrame to use to fill null values.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.combine : Perform series-wise operation on two DataFrames\n        using a given function.\n\n    Examples\n    --------\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine_first(df2)\n         A    B\n    0  1.0  3.0\n    1  0.0  4.0\n\n    Null values still persist if the location of that null value\n    does not exist in `other`\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n    >>> df1.combine_first(df2)\n         A    B    C\n    0  NaN  4.0  NaN\n    1  0.0  3.0  1.0\n    2  NaN  3.0  1.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    def extract_values(arr):\n        # Does two things:\n        # 1. maybe gets the values from the Series / Index\n        # 2. convert datelike to i8\n        if isinstance(arr, (ABCIndexClass, ABCSeries)):\n            arr = arr._values\n\n        if needs_i8_conversion(arr):\n            if is_extension_array_dtype(arr.dtype):\n                arr = arr.asi8\n            else:\n                arr = arr.view(\"i8\")\n        return arr\n\n    def combiner(x, y):\n        mask = isna(x)\n        if isinstance(mask, (ABCIndexClass, ABCSeries)):\n            mask = mask._values\n\n        x_values = extract_values(x)\n        y_values = extract_values(y)\n\n        # If the column y in other DataFrame is not in first DataFrame,\n        # just return y_values.\n        if y.name not in self.columns:\n            return y_values\n\n        return expressions.where(mask, y_values, x_values)\n\n    return self.combine(other, combiner, overwrite=False)",
                "def update(\n    self, other, join=\"left\", overwrite=True, filter_func=None, errors=\"ignore\"\n) -> None:\n    \"\"\"\n    Modify in place using non-NA values from another DataFrame.\n\n    Aligns on indices. There is no return value.\n\n    Parameters\n    ----------\n    other : DataFrame, or object coercible into a DataFrame\n        Should have at least one matching index/column label\n        with the original DataFrame. If a Series is passed,\n        its name attribute must be set, and that will be\n        used as the column name to align with the original DataFrame.\n    join : {'left'}, default 'left'\n        Only left join is implemented, keeping the index and columns of the\n        original object.\n    overwrite : bool, default True\n        How to handle non-NA values for overlapping keys:\n\n        * True: overwrite original DataFrame's values\n          with values from `other`.\n        * False: only update values that are NA in\n          the original DataFrame.\n\n    filter_func : callable(1d-array) -> bool 1d-array, optional\n        Can choose to replace values other than NA. Return True for values\n        that should be updated.\n    errors : {'raise', 'ignore'}, default 'ignore'\n        If 'raise', will raise a ValueError if the DataFrame and `other`\n        both contain non-NA data in the same place.\n\n        .. versionchanged:: 0.24.0\n           Changed from `raise_conflict=False|True`\n           to `errors='ignore'|'raise'`.\n\n    Returns\n    -------\n    None : method directly changes calling object\n\n    Raises\n    ------\n    ValueError\n        * When `errors='raise'` and there's overlapping non-NA data.\n        * When `errors` is not either `'ignore'` or `'raise'`\n    NotImplementedError\n        * If `join != 'left'`\n\n    See Also\n    --------\n    dict.update : Similar method for dictionaries.\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n    ...                        'C': [7, 8, 9]})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    The DataFrame's length does not increase as a result of the update,\n    only values at matching index/column labels are updated.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  d\n    1  b  e\n    2  c  f\n\n    For Series, it's name attribute must be set.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n    >>> df.update(new_column)\n    >>> df\n       A  B\n    0  a  d\n    1  b  y\n    2  c  e\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  x\n    1  b  d\n    2  c  e\n\n    If `other` contains NaNs the corresponding values are not updated\n    in the original dataframe.\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n    >>> df.update(new_df)\n    >>> df\n       A      B\n    0  1    4.0\n    1  2  500.0\n    2  3    6.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    # TODO: Support other joins\n    if join != \"left\":  # pragma: no cover\n        raise NotImplementedError(\"Only left join is supported\")\n    if errors not in [\"ignore\", \"raise\"]:\n        raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n\n    if not isinstance(other, DataFrame):\n        other = DataFrame(other)\n\n    other = other.reindex_like(self)\n\n    for col in self.columns:\n        this = self[col]._values\n        that = other[col]._values\n        if filter_func is not None:\n            with np.errstate(all=\"ignore\"):\n                mask = ~filter_func(this) | isna(that)\n        else:\n            if errors == \"raise\":\n                mask_this = notna(that)\n                mask_that = notna(this)\n                if any(mask_this & mask_that):\n                    raise ValueError(\"Data overlaps.\")\n\n            if overwrite:\n                mask = isna(that)\n            else:\n                mask = notna(this)\n\n        # don't overwrite columns unnecessarily\n        if mask.all():\n            continue\n\n        self[col] = expressions.where(mask, this, that)",
                "    @Appender(\n        \"\"\"\nExamples\n--------\n>>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n...                               'Parrot', 'Parrot'],\n...                    'Max Speed': [380., 370., 24., 26.]})\n>>> df\n   Animal  Max Speed\n0  Falcon      380.0\n1  Falcon      370.0\n2  Parrot       24.0\n3  Parrot       26.0\n>>> df.groupby(['Animal']).mean()\n        Max Speed\nAnimal\nFalcon      375.0\nParrot       25.0\n\n**Hierarchical Indexes**\n\nWe can groupby different levels of a hierarchical index\nusing the `level` parameter:\n\n>>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n...           ['Captive', 'Wild', 'Captive', 'Wild']]\n>>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n>>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n...                   index=index)\n>>> df\n                Max Speed\nAnimal Type\nFalcon Captive      390.0\n       Wild         350.0\nParrot Captive       30.0\n       Wild          20.0\n>>> df.groupby(level=0).mean()\n        Max Speed\nAnimal\nFalcon      370.0\nParrot       25.0\n>>> df.groupby(level=\"Type\").mean()\n         Max Speed\nType\nCaptive      210.0\nWild         185.0\n\"\"\"\n    )\n    @Appender(_shared_docs[\"groupby\"] % _shared_doc_kwargs)\n    def groupby(\n        self,\n        by=None,\n        axis=0,\n        level=None,\n        as_index: bool = True,\n        sort: bool = True,\n        group_keys: bool = True,\n        squeeze: bool = False,\n        observed: bool = False,\n    ) -> \"DataFrameGroupBy\":\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n\n        return DataFrameGroupBy(\n            obj=self,\n            keys=by,\n            axis=axis,\n            level=level,\n            as_index=as_index,\n            sort=sort,\n            group_keys=group_keys,\n            squeeze=squeeze,\n            observed=observed,\n        )",
                "@Substitution(\"\")\n@Appender(_shared_docs[\"pivot\"])\ndef pivot(self, index=None, columns=None, values=None) -> \"DataFrame\":\n    from pandas.core.reshape.pivot import pivot\n\n    return pivot(self, index=index, columns=columns, values=values)",
                "@Substitution(\"\")\n@Appender(_shared_docs[\"pivot_table\"])\ndef pivot_table(\n    self,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    from pandas.core.reshape.pivot import pivot_table\n\n    return pivot_table(\n        self,\n        values=values,\n        index=index,\n        columns=columns,\n        aggfunc=aggfunc,\n        fill_value=fill_value,\n        margins=margins,\n        dropna=dropna,\n        margins_name=margins_name,\n        observed=observed,\n    )",
                "def stack(self, level=-1, dropna=True):\n    \"\"\"\n    Stack the prescribed level(s) from columns to index.\n\n    Return a reshaped DataFrame or Series having a multi-level\n    index with one or more new inner-most levels compared to the current\n    DataFrame. The new inner-most levels are created by pivoting the\n    columns of the current dataframe:\n\n      - if the columns have a single level, the output is a Series;\n      - if the columns have multiple levels, the new index\n        level(s) is (are) taken from the prescribed level(s) and\n        the output is a DataFrame.\n\n    The new index levels are sorted.\n\n    Parameters\n    ----------\n    level : int, str, list, default -1\n        Level(s) to stack from the column axis onto the index\n        axis, defined as one index or label, or a list of indices\n        or labels.\n    dropna : bool, default True\n        Whether to drop rows in the resulting Frame/Series with\n        missing values. Stacking a column level onto the index\n        axis can create combinations of index and column values\n        that are missing from the original dataframe. See Examples\n        section.\n\n    Returns\n    -------\n    DataFrame or Series\n        Stacked dataframe or series.\n\n    See Also\n    --------\n    DataFrame.unstack : Unstack prescribed level(s) from index axis\n         onto column axis.\n    DataFrame.pivot : Reshape dataframe from long format to wide\n         format.\n    DataFrame.pivot_table : Create a spreadsheet-style pivot table\n         as a DataFrame.\n\n    Notes\n    -----\n    The function is named by analogy with a collection of books\n    being reorganized from being side by side on a horizontal\n    position (the columns of the dataframe) to being stacked\n    vertically on top of each other (in the index of the\n    dataframe).\n\n    Examples\n    --------\n    **Single level columns**\n\n    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=['weight', 'height'])\n\n    Stacking a dataframe with a single level column axis returns a Series:\n\n    >>> df_single_level_cols\n         weight height\n    cat       0      1\n    dog       2      3\n    >>> df_single_level_cols.stack()\n    cat  weight    0\n         height    1\n    dog  weight    2\n         height    3\n    dtype: int64\n\n    **Multi level columns: simple case**\n\n    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('weight', 'pounds')])\n    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol1)\n\n    Stacking a dataframe with a multi-level column axis:\n\n    >>> df_multi_level_cols1\n         weight\n             kg    pounds\n    cat       1        2\n    dog       2        4\n    >>> df_multi_level_cols1.stack()\n                weight\n    cat kg           1\n        pounds       2\n    dog kg           2\n        pounds       4\n\n    **Missing values**\n\n    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('height', 'm')])\n    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    It is common to have missing values when stacking a dataframe\n    with multi-level columns, as the stacked dataframe typically\n    has more values than the original dataframe. Missing values\n    are filled with NaNs:\n\n    >>> df_multi_level_cols2\n        weight height\n            kg      m\n    cat    1.0    2.0\n    dog    3.0    4.0\n    >>> df_multi_level_cols2.stack()\n            height  weight\n    cat kg     NaN     1.0\n        m      2.0     NaN\n    dog kg     NaN     3.0\n        m      4.0     NaN\n\n    **Prescribing the level(s) to be stacked**\n\n    The first parameter controls which level or levels are stacked:\n\n    >>> df_multi_level_cols2.stack(0)\n                 kg    m\n    cat height  NaN  2.0\n        weight  1.0  NaN\n    dog height  NaN  4.0\n        weight  3.0  NaN\n    >>> df_multi_level_cols2.stack([0, 1])\n    cat  height  m     2.0\n         weight  kg    1.0\n    dog  height  m     4.0\n         weight  kg    3.0\n    dtype: float64\n\n    **Dropping missing values**\n\n    >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    Note that rows where all values are missing are dropped by\n    default but this behaviour can be controlled via the dropna\n    keyword parameter:\n\n    >>> df_multi_level_cols3\n        weight height\n            kg      m\n    cat    NaN    1.0\n    dog    2.0    3.0\n    >>> df_multi_level_cols3.stack(dropna=False)\n            height  weight\n    cat kg     NaN     NaN\n        m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    >>> df_multi_level_cols3.stack(dropna=True)\n            height  weight\n    cat m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    \"\"\"\n    from pandas.core.reshape.reshape import stack, stack_multiple\n\n    if isinstance(level, (tuple, list)):\n        return stack_multiple(self, level, dropna=dropna)\n    else:\n        return stack(self, level, dropna=dropna)",
                "def explode(self, column: Union[str, Tuple]) -> \"DataFrame\":\n    \"\"\"\n    Transform each element of a list-like to a row, replicating index values.\n\n    .. versionadded:: 0.25.0\n\n    Parameters\n    ----------\n    column : str or tuple\n        Column to explode.\n\n    Returns\n    -------\n    DataFrame\n        Exploded lists to rows of the subset columns;\n        index will be duplicated for these rows.\n\n    Raises\n    ------\n    ValueError :\n        if columns of the frame are not unique.\n\n    See Also\n    --------\n    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n        index labels.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    Series.explode : Explode a DataFrame from list-like columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n    >>> df\n               A  B\n    0  [1, 2, 3]  1\n    1        foo  1\n    2         []  1\n    3     [3, 4]  1\n\n    >>> df.explode('A')\n         A  B\n    0    1  1\n    0    2  1\n    0    3  1\n    1  foo  1\n    2  NaN  1\n    3    3  1\n    3    4  1\n    \"\"\"\n    if not (is_scalar(column) or isinstance(column, tuple)):\n        raise ValueError(\"column must be a scalar\")\n    if not self.columns.is_unique:\n        raise ValueError(\"columns must be unique\")\n\n    df = self.reset_index(drop=True)\n    # TODO: use overload to refine return type of reset_index\n    assert df is not None  # needed for mypy\n    result = df[column].explode()\n    result = df.drop([column], axis=1).join(result)\n    result.index = self.index.take(result.index)\n    result = result.reindex(columns=self.columns, copy=False)\n\n    return result",
                "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Pivot a level of the (necessarily hierarchical) index labels.\n\n    Returns a DataFrame having a new level of column labels whose inner-most level\n    consists of the pivoted index labels.\n\n    If the index is not a MultiIndex, the output will be a Series\n    (the analogue of stack when the columns are not a MultiIndex).\n\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default -1 (last level)\n        Level(s) of index to unstack, can pass level name.\n    fill_value : int, str or dict\n        Replace NaN with this value if the unstack produces missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot a table based on column values.\n    DataFrame.stack : Pivot a level of the column labels (inverse operation\n        from `unstack`).\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n    ...                                    ('two', 'a'), ('two', 'b')])\n    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n    >>> s\n    one  a   1.0\n         b   2.0\n    two  a   3.0\n         b   4.0\n    dtype: float64\n\n    >>> s.unstack(level=-1)\n         a   b\n    one  1.0  2.0\n    two  3.0  4.0\n\n    >>> s.unstack(level=0)\n       one  two\n    a  1.0   3.0\n    b  2.0   4.0\n\n    >>> df = s.unstack(level=0)\n    >>> df.unstack()\n    one  a  1.0\n         b  2.0\n    two  a  3.0\n         b  4.0\n    dtype: float64\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n\n    return unstack(self, level, fill_value)",
                "@Appender(\n    _shared_docs[\"melt\"]\n    % dict(\n        caller=\"df.melt(\",\n        versionadded=\"\\n    .. versionadded:: 0.20.0\\n\",\n        other=\"melt\",\n    )\n)\ndef melt(\n    self,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n) -> \"DataFrame\":\n    from pandas.core.reshape.melt import melt\n\n    return melt(\n        self,\n        id_vars=id_vars,\n        value_vars=value_vars,\n        var_name=var_name,\n        value_name=value_name,\n        col_level=col_level,\n    )",
                "def diff(self, periods=1, axis=0) -> \"DataFrame\":\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a DataFrame element compared with another\n    element in the DataFrame (default is the element in the same column\n    of the previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Take difference over rows (0) or columns (1).\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    Series.diff: First discrete difference for a Series.\n    DataFrame.pct_change: Percent change over given number of periods.\n    DataFrame.shift: Shift index by desired number of periods with an\n        optional time freq.\n\n    Notes\n    -----\n    For boolean dtypes, this uses :meth:`operator.xor` rather than\n    :meth:`operator.sub`.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n    ...                    'b': [1, 1, 2, 3, 5, 8],\n    ...                    'c': [1, 4, 9, 16, 25, 36]})\n    >>> df\n       a  b   c\n    0  1  1   1\n    1  2  1   4\n    2  3  2   9\n    3  4  3  16\n    4  5  5  25\n    5  6  8  36\n\n    >>> df.diff()\n         a    b     c\n    0  NaN  NaN   NaN\n    1  1.0  0.0   3.0\n    2  1.0  1.0   5.0\n    3  1.0  1.0   7.0\n    4  1.0  2.0   9.0\n    5  1.0  3.0  11.0\n\n    Difference with previous column\n\n    >>> df.diff(axis=1)\n        a    b     c\n    0 NaN  0.0   0.0\n    1 NaN -1.0   3.0\n    2 NaN -1.0   7.0\n    3 NaN -1.0  13.0\n    4 NaN  0.0  20.0\n    5 NaN  2.0  28.0\n\n    Difference with 3rd previous row\n\n    >>> df.diff(periods=3)\n         a    b     c\n    0  NaN  NaN   NaN\n    1  NaN  NaN   NaN\n    2  NaN  NaN   NaN\n    3  3.0  2.0  15.0\n    4  3.0  4.0  21.0\n    5  3.0  6.0  27.0\n\n    Difference with following row\n\n    >>> df.diff(periods=-1)\n         a    b     c\n    0 -1.0  0.0  -3.0\n    1 -1.0 -1.0  -5.0\n    2 -1.0 -1.0  -7.0\n    3 -1.0 -2.0  -9.0\n    4 -1.0 -3.0 -11.0\n    5  NaN  NaN   NaN\n    \"\"\"\n    bm_axis = self._get_block_manager_axis(axis)\n    new_data = self._data.diff(n=periods, axis=bm_axis)\n    return self._constructor(new_data)",
                "def _gotitem(\n    self,\n    key: Union[str, List[str]],\n    ndim: int,\n    subset: Optional[Union[Series, ABCDataFrame]] = None,\n) -> Union[Series, ABCDataFrame]:\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self\n    elif subset.ndim == 1:  # is Series\n        return subset\n\n    # TODO: _shallow_copy(subset)?\n    return subset[key]",
                "@Substitution(\n    see_also=_agg_summary_and_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\\n.. versionadded:: 0.20.0\\n\",\n    **_shared_doc_kwargs,\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n\n    result = None\n    try:\n        result, how = self._aggregate(func, axis=axis, *args, **kwargs)\n    except TypeError:\n        pass\n    if result is None:\n        return self.apply(func, axis=axis, args=args, **kwargs)\n    return result",
                "def _aggregate(self, arg, axis=0, *args, **kwargs):\n    if axis == 1:\n        # NDFrame.aggregate returns a tuple, and we need to transpose\n        # only result\n        result, how = self.T._aggregate(arg, *args, **kwargs)\n        result = result.T if result is not None else result\n        return result, how\n    return super()._aggregate(arg, *args, **kwargs)",
                "@Appender(_shared_docs[\"transform\"] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs) -> \"DataFrame\":\n    axis = self._get_axis_number(axis)\n    if axis == 1:\n        return self.T.transform(func, *args, **kwargs).T\n    return super().transform(func, *args, **kwargs)",
                "def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n    \"\"\"\n    Apply a function along an axis of the DataFrame.\n\n    Objects passed to the function are Series objects whose index is\n    either the DataFrame's index (``axis=0``) or the DataFrame's columns\n    (``axis=1``). By default (``result_type=None``), the final return type\n    is inferred from the return type of the applied function. Otherwise,\n    it depends on the `result_type` argument.\n\n    Parameters\n    ----------\n    func : function\n        Function to apply to each column or row.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis along which the function is applied:\n\n        * 0 or 'index': apply function to each column.\n        * 1 or 'columns': apply function to each row.\n\n    raw : bool, default False\n        Determines if row or column is passed as a Series or ndarray object:\n\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray objects\n          instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n\n    result_type : {'expand', 'reduce', 'broadcast', None}, default None\n        These only act when ``axis=1`` (columns):\n\n        * 'expand' : list-like results will be turned into columns.\n        * 'reduce' : returns a Series if possible rather than expanding\n          list-like results. This is the opposite of 'expand'.\n        * 'broadcast' : results will be broadcast to the original shape\n          of the DataFrame, the original index and columns will be\n          retained.\n\n        The default behaviour (None) depends on the return value of the\n        applied function: list-like results will be returned as a Series\n        of those. However if the apply function returns a Series these\n        are expanded to columns.\n\n        .. versionadded:: 0.23.0\n\n    args : tuple\n        Positional arguments to pass to `func` in addition to the\n        array/series.\n    **kwds\n        Additional keyword arguments to pass as keywords arguments to\n        `func`.\n\n    Returns\n    -------\n    Series or DataFrame\n        Result of applying ``func`` along the given axis of the\n        DataFrame.\n\n    See Also\n    --------\n    DataFrame.applymap: For elementwise operations.\n    DataFrame.aggregate: Only perform aggregating type operations.\n    DataFrame.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n    >>> df\n       A  B\n    0  4  9\n    1  4  9\n    2  4  9\n\n    Using a numpy universal function (in this case the same as\n    ``np.sqrt(df)``):\n\n    >>> df.apply(np.sqrt)\n         A    B\n    0  2.0  3.0\n    1  2.0  3.0\n    2  2.0  3.0\n\n    Using a reducing function on either axis\n\n    >>> df.apply(np.sum, axis=0)\n    A    12\n    B    27\n    dtype: int64\n\n    >>> df.apply(np.sum, axis=1)\n    0    13\n    1    13\n    2    13\n    dtype: int64\n\n    Returning a list-like will result in a Series\n\n    >>> df.apply(lambda x: [1, 2], axis=1)\n    0    [1, 2]\n    1    [1, 2]\n    2    [1, 2]\n    dtype: object\n\n    Passing result_type='expand' will expand list-like results\n    to columns of a Dataframe\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n       0  1\n    0  1  2\n    1  1  2\n    2  1  2\n\n    Returning a Series inside the function is similar to passing\n    ``result_type='expand'``. The resulting column names\n    will be the Series index.\n\n    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n       foo  bar\n    0    1    2\n    1    1    2\n    2    1    2\n\n    Passing ``result_type='broadcast'`` will ensure the same shape\n    result, whether list-like or scalar is returned by the function,\n    and broadcast it along the axis. The resulting column names will\n    be the originals.\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n       A  B\n    0  1  2\n    1  1  2\n    2  1  2\n    \"\"\"\n    from pandas.core.apply import frame_apply\n\n    op = frame_apply(\n        self,\n        func=func,\n        axis=axis,\n        raw=raw,\n        result_type=result_type,\n        args=args,\n        kwds=kwds,\n    )\n    return op.get_result()",
                "def applymap(self, func) -> \"DataFrame\":\n    \"\"\"\n    Apply a function to a Dataframe elementwise.\n\n    This method applies a function that accepts and returns a scalar\n    to every element of a DataFrame.\n\n    Parameters\n    ----------\n    func : callable\n        Python function, returns a single value from a single value.\n\n    Returns\n    -------\n    DataFrame\n        Transformed DataFrame.\n\n    See Also\n    --------\n    DataFrame.apply : Apply a function along input axis of DataFrame.\n\n    Notes\n    -----\n    In the current implementation applymap calls `func` twice on the\n    first column/row to decide whether it can take a fast or slow\n    code path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    column/row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n    >>> df\n           0      1\n    0  1.000  2.120\n    1  3.356  4.567\n\n    >>> df.applymap(lambda x: len(str(x)))\n       0  1\n    0  3  4\n    1  5  5\n\n    Note that a vectorized version of `func` often exists, which will\n    be much faster. You could square each number elementwise.\n\n    >>> df.applymap(lambda x: x**2)\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n\n    But it's better to avoid applymap in that case.\n\n    >>> df ** 2\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n    \"\"\"\n    # if we have a dtype == 'M8[ns]', provide boxed values\n    def infer(x):\n        if x.empty:\n            return lib.map_infer(x, func)\n        return lib.map_infer(x.astype(object).values, func)\n\n    return self.apply(infer)",
                "def append(\n    self, other, ignore_index=False, verify_integrity=False, sort=False\n) -> \"DataFrame\":\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            if not ignore_index:\n                raise TypeError(\"Can only append a dict if ignore_index=True\")\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True \"\n                \"or if the Series has a name\"\n            )\n\n        index = Index([other.name], name=self.index.name)\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = (\n            other.reindex(combined_columns, copy=False)\n            .to_frame()\n            .T.infer_objects()\n            .rename_axis(index.names, copy=False)\n        )\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self, *other]\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )",
                "def join(\n    self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n) -> \"DataFrame\":\n    \"\"\"\n    Join columns of another DataFrame.\n\n    Join columns with `other` DataFrame either on index or on a key\n    column. Efficiently join multiple DataFrame objects by index at once by\n    passing a list.\n\n    Parameters\n    ----------\n    other : DataFrame, Series, or list of DataFrame\n        Index should be similar to one of the columns in this one. If a\n        Series is passed, its name attribute must be set, and that will be\n        used as the column name in the resulting joined DataFrame.\n    on : str, list of str, or array-like, optional\n        Column or index level name(s) in the caller to join on the index\n        in `other`, otherwise joins index-on-index. If multiple\n        values given, the `other` DataFrame must have a MultiIndex. Can\n        pass an array as the join key if it is not already contained in\n        the calling DataFrame. Like an Excel VLOOKUP operation.\n    how : {'left', 'right', 'outer', 'inner'}, default 'left'\n        How to handle the operation of the two objects.\n\n        * left: use calling frame's index (or column if on is specified)\n        * right: use `other`'s index.\n        * outer: form union of calling frame's index (or column if on is\n          specified) with `other`'s index, and sort it.\n          lexicographically.\n        * inner: form intersection of calling frame's index (or column if\n          on is specified) with `other`'s index, preserving the order\n          of the calling's one.\n    lsuffix : str, default ''\n        Suffix to use from left frame's overlapping columns.\n    rsuffix : str, default ''\n        Suffix to use from right frame's overlapping columns.\n    sort : bool, default False\n        Order result DataFrame lexicographically by the join key. If False,\n        the order of the join key depends on the join type (how keyword).\n\n    Returns\n    -------\n    DataFrame\n        A dataframe containing columns from both the caller and `other`.\n\n    See Also\n    --------\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Notes\n    -----\n    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n    passing a list of `DataFrame` objects.\n\n    Support for specifying index levels as the `on` parameter was added\n    in version 0.23.0.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n    >>> df\n      key   A\n    0  K0  A0\n    1  K1  A1\n    2  K2  A2\n    3  K3  A3\n    4  K4  A4\n    5  K5  A5\n\n    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n    ...                       'B': ['B0', 'B1', 'B2']})\n\n    >>> other\n      key   B\n    0  K0  B0\n    1  K1  B1\n    2  K2  B2\n\n    Join DataFrames using their indexes.\n\n    >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n      key_caller   A key_other    B\n    0         K0  A0        K0   B0\n    1         K1  A1        K1   B1\n    2         K2  A2        K2   B2\n    3         K3  A3       NaN  NaN\n    4         K4  A4       NaN  NaN\n    5         K5  A5       NaN  NaN\n\n    If we want to join using the key columns, we need to set key to be\n    the index in both `df` and `other`. The joined DataFrame will have\n    key as its index.\n\n    >>> df.set_index('key').join(other.set_index('key'))\n          A    B\n    key\n    K0   A0   B0\n    K1   A1   B1\n    K2   A2   B2\n    K3   A3  NaN\n    K4   A4  NaN\n    K5   A5  NaN\n\n    Another option to join using the key columns is to use the `on`\n    parameter. DataFrame.join always uses `other`'s index but we can use\n    any column in `df`. This method preserves the original DataFrame's\n    index in the result.\n\n    >>> df.join(other.set_index('key'), on='key')\n      key   A    B\n    0  K0  A0   B0\n    1  K1  A1   B1\n    2  K2  A2   B2\n    3  K3  A3  NaN\n    4  K4  A4  NaN\n    5  K5  A5  NaN\n    \"\"\"\n    return self._join_compat(\n        other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort\n    )",
                "def _join_compat(\n    self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError(\"Other Series must have a name\")\n        other = DataFrame({other.name: other})\n\n    if isinstance(other, DataFrame):\n        return merge(\n            self,\n            other,\n            left_on=on,\n            how=how,\n            left_index=on is None,\n            right_index=True,\n            suffixes=(lsuffix, rsuffix),\n            sort=sort,\n        )\n    else:\n        if on is not None:\n            raise ValueError(\n                \"Joining multiple DataFrames only supported for joining on index\"\n            )\n\n        frames = [self] + list(other)\n\n        can_concat = all(df.index.is_unique for df in frames)\n\n        # join indexes only using concat\n        if can_concat:\n            if how == \"left\":\n                res = concat(\n                    frames, axis=1, join=\"outer\", verify_integrity=True, sort=sort\n                )\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(\n                    frames, axis=1, join=how, verify_integrity=True, sort=sort\n                )\n\n        joined = frames[0]\n\n        for frame in frames[1:]:\n            joined = merge(\n                joined, frame, how=how, left_index=True, right_index=True\n            )\n\n        return joined",
                "@Substitution(\"\")\n@Appender(_merge_doc, indents=2)\ndef merge(\n    self,\n    right,\n    how=\"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    sort=False,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    indicator=False,\n    validate=None,\n) -> \"DataFrame\":\n    from pandas.core.reshape.merge import merge\n\n    return merge(\n        self,\n        right,\n        how=how,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        sort=sort,\n        suffixes=suffixes,\n        copy=copy,\n        indicator=indicator,\n        validate=validate,\n    )",
                "def round(self, decimals=0, *args, **kwargs) -> \"DataFrame\":\n    \"\"\"\n    Round a DataFrame to a variable number of decimal places.\n\n    Parameters\n    ----------\n    decimals : int, dict, Series\n        Number of decimal places to round each column to. If an int is\n        given, round each column to the same number of places.\n        Otherwise dict and Series round to variable numbers of places.\n        Column names should be in the keys if `decimals` is a\n        dict-like, or in the index if `decimals` is a Series. Any\n        columns not included in `decimals` will be left as is. Elements\n        of `decimals` which are not columns of the input will be\n        ignored.\n    *args\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n    **kwargs\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame with the affected columns rounded to the specified\n        number of decimal places.\n\n    See Also\n    --------\n    numpy.around : Round a numpy array to the given number of decimals.\n    Series.round : Round a Series to the given number of decimals.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df\n        dogs  cats\n    0  0.21  0.32\n    1  0.01  0.67\n    2  0.66  0.03\n    3  0.21  0.18\n\n    By providing an integer each column is rounded to the same number\n    of decimal places\n\n    >>> df.round(1)\n        dogs  cats\n    0   0.2   0.3\n    1   0.0   0.7\n    2   0.7   0.0\n    3   0.2   0.2\n\n    With a dict, the number of places for specific columns can be\n    specified with the column names as key and the number of decimal\n    places as value\n\n    >>> df.round({'dogs': 1, 'cats': 0})\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n\n    Using a Series, the number of places for specific columns can be\n    specified with the column names as index and the number of\n    decimal places as value\n\n    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n    >>> df.round(decimals)\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    def _dict_round(df, decimals):\n        for col, vals in df.items():\n            try:\n                yield _series_round(vals, decimals[col])\n            except KeyError:\n                yield vals\n\n    def _series_round(s, decimals):\n        if is_integer_dtype(s) or is_float_dtype(s):\n            return s.round(decimals)\n        return s\n\n    nv.validate_round(args, kwargs)\n\n    if isinstance(decimals, (dict, Series)):\n        if isinstance(decimals, Series):\n            if not decimals.index.is_unique:\n                raise ValueError(\"Index of decimals must be unique\")\n        new_cols = list(_dict_round(self, decimals))\n    elif is_integer(decimals):\n        # Dispatch to Series.round\n        new_cols = [_series_round(v, decimals) for _, v in self.items()]\n    else:\n        raise TypeError(\"decimals must be an integer, a dict-like or a Series\")\n\n    if len(new_cols) > 0:\n        return self._constructor(\n            concat(new_cols, axis=1), index=self.index, columns=self.columns\n        )\n    else:\n        return self",
                "def corr(self, method=\"pearson\", min_periods=1) -> \"DataFrame\":\n    \"\"\"\n    Compute pairwise correlation of columns, excluding NA/null values.\n\n    Parameters\n    ----------\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float. Note that the returned matrix from corr\n            will have 1 along the diagonals and will be symmetric\n            regardless of the callable's behavior.\n\n            .. versionadded:: 0.24.0\n\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result. Currently only available for Pearson\n        and Spearman correlation.\n\n    Returns\n    -------\n    DataFrame\n        Correlation matrix.\n\n    See Also\n    --------\n    DataFrame.corrwith\n    Series.corr\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.corr(method=histogram_intersection)\n          dogs  cats\n    dogs   1.0   0.3\n    cats   0.3   1.0\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n\n    if method == \"pearson\":\n        correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n    elif method == \"spearman\":\n        correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=min_periods)\n    elif method == \"kendall\" or callable(method):\n        if min_periods is None:\n            min_periods = 1\n        mat = ensure_float64(mat).T\n        corrf = nanops.get_corr_func(method)\n        K = len(cols)\n        correl = np.empty((K, K), dtype=float)\n        mask = np.isfinite(mat)\n        for i, ac in enumerate(mat):\n            for j, bc in enumerate(mat):\n                if i > j:\n                    continue\n\n                valid = mask[i] & mask[j]\n                if valid.sum() < min_periods:\n                    c = np.nan\n                elif i == j:\n                    c = 1.0\n                elif not valid.all():\n                    c = corrf(ac[valid], bc[valid])\n                else:\n                    c = corrf(ac, bc)\n                correl[i, j] = c\n                correl[j, i] = c\n    else:\n        raise ValueError(\n            \"method must be either 'pearson', \"\n            \"'spearman', 'kendall', or a callable, \"\n            f\"'{method}' was supplied\"\n        )\n\n    return self._constructor(correl, index=idx, columns=cols)",
                "def cov(self, min_periods=None) -> \"DataFrame\":\n    \"\"\"\n    Compute pairwise covariance of columns, excluding NA/null values.\n\n    Compute the pairwise covariance among the series of a DataFrame.\n    The returned data frame is the `covariance matrix\n    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n    of the DataFrame.\n\n    Both NA and null values are automatically excluded from the\n    calculation. (See the note below about bias from missing values.)\n    A threshold can be set for the minimum number of\n    observations for each value created. Comparisons with observations\n    below this threshold will be returned as ``NaN``.\n\n    This method is generally used for the analysis of time series data to\n    understand the relationship between different measures\n    across time.\n\n    Parameters\n    ----------\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result.\n\n    Returns\n    -------\n    DataFrame\n        The covariance matrix of the series of the DataFrame.\n\n    See Also\n    --------\n    Series.cov : Compute covariance with another Series.\n    core.window.EWM.cov: Exponential weighted sample covariance.\n    core.window.Expanding.cov : Expanding sample covariance.\n    core.window.Rolling.cov : Rolling sample covariance.\n\n    Notes\n    -----\n    Returns the covariance matrix of the DataFrame's time series.\n    The covariance is normalized by N-1.\n\n    For DataFrames that have Series that are missing data (assuming that\n    data is `missing at random\n    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n    the returned covariance matrix will be an unbiased estimate\n    of the variance and covariance between the member Series.\n\n    However, for many applications this estimate may not be acceptable\n    because the estimate covariance matrix is not guaranteed to be positive\n    semi-definite. This could lead to estimate correlations having\n    absolute values which are greater than one, and/or a non-invertible\n    covariance matrix. See `Estimation of covariance matrices\n    <https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n    matrices>`__ for more details.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.cov()\n              dogs      cats\n    dogs  0.666667 -1.000000\n    cats -1.000000  1.666667\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(1000, 5),\n    ...                   columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df.cov()\n              a         b         c         d         e\n    a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n    b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n    e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n    **Minimum number of periods**\n\n    This method also supports an optional ``min_periods`` keyword\n    that specifies the required minimum number of non-NA observations for\n    each column pair in order to have a valid result:\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(20, 3),\n    ...                   columns=['a', 'b', 'c'])\n    >>> df.loc[df.index[:5], 'a'] = np.nan\n    >>> df.loc[df.index[5:10], 'b'] = np.nan\n    >>> df.cov(min_periods=12)\n              a         b         c\n    a  0.316741       NaN -0.150812\n    b       NaN  1.248003  0.191417\n    c -0.150812  0.191417  0.895202\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n\n    if notna(mat).all():\n        if min_periods is not None and min_periods > len(mat):\n            baseCov = np.empty((mat.shape[1], mat.shape[1]))\n            baseCov.fill(np.nan)\n        else:\n            baseCov = np.cov(mat.T)\n        baseCov = baseCov.reshape((len(cols), len(cols)))\n    else:\n        baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)\n\n    return self._constructor(baseCov, index=idx, columns=cols)",
                "def corrwith(self, other, axis=0, drop=False, method=\"pearson\") -> Series:\n    \"\"\"\n    Compute pairwise correlation.\n\n    Pairwise correlation is computed between rows or columns of\n    DataFrame with rows or columns of Series or DataFrame. DataFrames\n    are first aligned along both axes before computing the\n    correlations.\n\n    Parameters\n    ----------\n    other : DataFrame, Series\n        Object with which to compute correlations.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n        row-wise.\n    drop : bool, default False\n        Drop missing indices from result.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Pairwise correlations.\n\n    See Also\n    --------\n    DataFrame.corr\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    this = self._get_numeric_data()\n\n    if isinstance(other, Series):\n        return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n\n    other = other._get_numeric_data()\n    left, right = this.align(other, join=\"inner\", copy=False)\n\n    if axis == 1:\n        left = left.T\n        right = right.T\n\n    if method == \"pearson\":\n        # mask missing values\n        left = left + right * 0\n        right = right + left * 0\n\n        # demeaned data\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n\n        correl = num / dom\n\n    elif method in [\"kendall\", \"spearman\"] or callable(method):\n\n        def c(x):\n            return nanops.nancorr(x[0], x[1], method=method)\n\n        correl = Series(\n            map(c, zip(left.values.T, right.values.T)), index=left.columns\n        )\n\n    else:\n        raise ValueError(\n            f\"Invalid method {method} was passed, \"\n            \"valid methods are: 'pearson', 'kendall', \"\n            \"'spearman', or callable\"\n        )\n\n    if not drop:\n        # Find non-matching labels along the given axis\n        # and append missing correlations (GH 22375)\n        raxis = 1 if axis == 0 else 0\n        result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n        idx_diff = result_index.difference(correl.index)\n\n        if len(idx_diff) > 0:\n            correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n\n    return correl",
                "def count(self, axis=0, level=None, numeric_only=False):\n    \"\"\"\n    Count non-NA cells for each column or row.\n\n    The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n    on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index' counts are generated for each column.\n        If 1 or 'columns' counts are generated for each **row**.\n    level : int or str, optional\n        If the axis is a `MultiIndex` (hierarchical), count along a\n        particular `level`, collapsing into a `DataFrame`.\n        A `str` specifies the level name.\n    numeric_only : bool, default False\n        Include only `float`, `int` or `boolean` data.\n\n    Returns\n    -------\n    Series or DataFrame\n        For each column/row the number of non-NA/null entries.\n        If `level` is specified returns a `DataFrame`.\n\n    See Also\n    --------\n    Series.count: Number of non-NA elements in a Series.\n    DataFrame.shape: Number of DataFrame rows and columns (including NA\n        elements).\n    DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n        elements.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary:\n\n    >>> df = pd.DataFrame({\"Person\":\n    ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n    ...                    \"Age\": [24., np.nan, 21., 33, 26],\n    ...                    \"Single\": [False, True, True, True, False]})\n    >>> df\n       Person   Age  Single\n    0    John  24.0   False\n    1    Myla   NaN    True\n    2   Lewis  21.0    True\n    3    John  33.0    True\n    4    Myla  26.0   False\n\n    Notice the uncounted NA values:\n\n    >>> df.count()\n    Person    5\n    Age       4\n    Single    5\n    dtype: int64\n\n    Counts for each **row**:\n\n    >>> df.count(axis='columns')\n    0    3\n    1    2\n    2    3\n    3    3\n    4    3\n    dtype: int64\n\n    Counts for one level of a `MultiIndex`:\n\n    >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n            Age\n    Person\n    John      2\n    Lewis     1\n    Myla      1\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if level is not None:\n        return self._count_level(level, axis=axis, numeric_only=numeric_only)\n\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n\n    # GH #423\n    if len(frame._get_axis(axis)) == 0:\n        result = Series(0, index=frame._get_agg_axis(axis))\n    else:\n        if frame._is_mixed_type or frame._data.any_extension_types:\n            # the or any_extension_types is really only hit for single-\n            # column frames with an extension array\n            result = notna(frame).sum(axis=axis)\n        else:\n            # GH13407\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n\n    return result.astype(\"int64\")",
                "def _count_level(self, level, axis=0, numeric_only=False):\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n\n    count_axis = frame._get_axis(axis)\n    agg_axis = frame._get_agg_axis(axis)\n\n    if not isinstance(count_axis, ABCMultiIndex):\n        raise TypeError(\n            f\"Can only count levels on hierarchical {self._get_axis_name(axis)}.\"\n        )\n\n    if frame._is_mixed_type:\n        # Since we have mixed types, calling notna(frame.values) might\n        # upcast everything to object\n        mask = notna(frame).values\n    else:\n        # But use the speedup when we have homogeneous dtypes\n        mask = notna(frame.values)\n\n    if axis == 1:\n        # We're transposing the mask rather than frame to avoid potential\n        # upcasts to object, which induces a ~20x slowdown\n        mask = mask.T\n\n    if isinstance(level, str):\n        level = count_axis._get_level_number(level)\n\n    level_name = count_axis._names[level]\n    level_index = count_axis.levels[level]._shallow_copy(name=level_name)\n    level_codes = ensure_int64(count_axis.codes[level])\n    counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0)\n\n    result = DataFrame(counts, index=level_index, columns=agg_axis)\n\n    if axis == 1:\n        # Undo our earlier transpose\n        return result.T\n    else:\n        return result",
                "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n\n    dtype_is_dt = self.dtypes.apply(lambda x: x.kind == \"M\")\n    if numeric_only is None and name in [\"mean\", \"median\"] and dtype_is_dt.any():\n        warnings.warn(\n            \"DataFrame.mean and DataFrame.median with numeric_only=None \"\n            \"will include datetime64 and datetime64tz columns in a \"\n            \"future version.\",\n            FutureWarning,\n            stacklevel=3,\n        )\n        cols = self.columns[~dtype_is_dt]\n        self = self[cols]\n\n    if axis is None and filter_type == \"bool\":\n        labels = None\n        constructor = None\n    else:\n        # TODO: Make other agg func handle axis=None properly\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == \"numeric\":\n            data = self._get_numeric_data()\n        elif filter_type == \"bool\":\n            if axis_matters:\n                # GH#25101, GH#24434\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:  # pragma: no cover\n            msg = (\n                f\"Generating numeric_only data with filter_type {filter_type} \"\n                \"not supported.\"\n            )\n            raise NotImplementedError(msg)\n        return data\n\n    if numeric_only is not None and axis in [0, 1]:\n        df = self\n        if numeric_only is True:\n            df = _get_data(axis_matters=True)\n        if axis == 1:\n            df = df.T\n            axis = 0\n\n        out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n        def blk_func(values):\n            if values.ndim == 1 and not isinstance(values, np.ndarray):\n                # we can't pass axis=1\n                return op(values, axis=0, skipna=skipna, **kwds)\n            return op(values, axis=1, skipna=skipna, **kwds)\n\n        # After possibly _get_data and transposing, we are now in the\n        #  simple case where we can use BlockManager._reduce\n        res = df._data.reduce(blk_func)\n        assert isinstance(res, dict)\n        if len(res):\n            assert len(res) == max(list(res.keys())) + 1, res.keys()\n        out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n        out.index = df.columns\n        return out\n\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n\n            if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                # work around https://github.com/numpy/numpy/issues/10489\n                # TODO: combine with hasattr(result, 'dtype') further down\n                # hard since we don't have `values` down there.\n                result = np.bool_(result)\n        except TypeError:\n            # e.g. in nanops trying to convert strs to float\n\n            # try by-column first\n            if filter_type is None and axis == 0:\n                # this can end up with a non-reduction\n                # but not always. if the types are mixed\n                # with datelike then need to make sure a series\n\n                # we only end up here if we have not specified\n                # numeric_only and yet we have tried a\n                # column-by-column reduction, where we have mixed type.\n                # So let's just do what we can\n                from pandas.core.apply import frame_apply\n\n                opa = frame_apply(\n                    self, func=f, result_type=\"expand\", ignore_failures=True\n                )\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n\n            # TODO: why doesnt axis matter here?\n            data = _get_data(axis_matters=False)\n            with np.errstate(all=\"ignore\"):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n\n    if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == \"numeric\":\n                result = result.astype(np.float64)\n            elif filter_type == \"bool\" and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n\n            # try to coerce to the original dtypes item by item if we can\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n\n    if constructor is not None:\n        result = self._constructor_sliced(result, index=labels)\n    return result",
                "def nunique(self, axis=0, dropna=True) -> Series:\n    \"\"\"\n    Count distinct observations over requested axis.\n\n    Return Series with number of distinct observations. Can ignore NaN\n    values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n        column-wise.\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    Series\n\n    See Also\n    --------\n    Series.nunique: Method nunique for Series.\n    DataFrame.count: Count non-NA cells for each column or row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n    >>> df.nunique()\n    A    3\n    B    1\n    dtype: int64\n\n    >>> df.nunique(axis=1)\n    0    1\n    1    2\n    2    2\n    dtype: int64\n    \"\"\"\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)",
                "def idxmin(self, axis=0, skipna=True) -> Series:\n    \"\"\"\n    Return index of first occurrence of minimum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of minima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmin\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmin``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                "def idxmax(self, axis=0, skipna=True) -> Series:\n    \"\"\"\n    Return index of first occurrence of maximum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of maxima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmax\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmax``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                "def _get_agg_axis(self, axis_num):\n    \"\"\"\n    Let's be explicit about this.\n    \"\"\"\n    if axis_num == 0:\n        return self.columns\n    elif axis_num == 1:\n        return self.index\n    else:\n        raise ValueError(f\"Axis must be 0 or 1 (got {repr(axis_num)})\")",
                "def mode(self, axis=0, numeric_only=False, dropna=True) -> \"DataFrame\":\n    \"\"\"\n    Get the mode(s) of each element along the selected axis.\n\n    The mode of a set of values is the value that appears most often.\n    It can be multiple values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to iterate over while searching for the mode:\n\n        * 0 or 'index' : get mode of each column\n        * 1 or 'columns' : get mode of each row.\n\n    numeric_only : bool, default False\n        If True, only apply to numeric columns.\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The modes of each column or row.\n\n    See Also\n    --------\n    Series.mode : Return the highest frequency value in a Series.\n    Series.value_counts : Return the counts of values in a Series.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 2, 2),\n    ...                    ('mammal', 4, np.nan),\n    ...                    ('arthropod', 8, 0),\n    ...                    ('bird', 2, np.nan)],\n    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n    ...                   columns=('species', 'legs', 'wings'))\n    >>> df\n               species  legs  wings\n    falcon        bird     2    2.0\n    horse       mammal     4    NaN\n    spider   arthropod     8    0.0\n    ostrich       bird     2    NaN\n\n    By default, missing values are not considered, and the mode of wings\n    are both 0 and 2. The second row of species and legs contains ``NaN``,\n    because they have only one mode, but the DataFrame has two rows.\n\n    >>> df.mode()\n      species  legs  wings\n    0    bird   2.0    0.0\n    1     NaN   NaN    2.0\n\n    Setting ``dropna=False`` ``NaN`` values are considered and they can be\n    the mode (like for wings).\n\n    >>> df.mode(dropna=False)\n      species  legs  wings\n    0    bird     2    NaN\n\n    Setting ``numeric_only=True``, only the mode of numeric columns is\n    computed, and columns of other types are ignored.\n\n    >>> df.mode(numeric_only=True)\n       legs  wings\n    0   2.0    0.0\n    1   NaN    2.0\n\n    To compute the mode over columns and not rows, use the axis parameter:\n\n    >>> df.mode(axis='columns', numeric_only=True)\n               0    1\n    falcon   2.0  NaN\n    horse    4.0  NaN\n    spider   0.0  8.0\n    ostrich  2.0  NaN\n    \"\"\"\n    data = self if not numeric_only else self._get_numeric_data()\n\n    def f(s):\n        return s.mode(dropna=dropna)\n\n    return data.apply(f, axis=axis)",
                "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n    ...                   columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n\n    Specifying `numeric_only=False` will also compute the quantile of\n    datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2],\n    ...                    'B': [pd.Timestamp('2010'),\n    ...                          pd.Timestamp('2011')],\n    ...                    'C': [pd.Timedelta('1 days'),\n    ...                          pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    validate_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    if len(data.columns) == 0:\n        # GH#23925 _get_numeric_data may have dropped all columns\n        cols = Index([], name=self.columns.name)\n        if is_list_like(q):\n            return self._constructor([], index=q, columns=cols)\n        return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n\n    result = data._data.quantile(\n        qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n    )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
                "def to_timestamp(self, freq=None, how=\"start\", axis=0, copy=True) -> \"DataFrame\":\n    \"\"\"\n    Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    DataFrame with DatetimeIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        assert isinstance(self.index, (ABCDatetimeIndex, ABCPeriodIndex))\n        new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n    elif axis == 1:\n        assert isinstance(self.columns, (ABCDatetimeIndex, ABCPeriodIndex))\n        new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n    else:  # pragma: no cover\n        raise AssertionError(f\"Axis must be 0 or 1. Got {axis}\")\n\n    return self._constructor(new_data)",
                "def to_period(self, freq=None, axis=0, copy=True) -> \"DataFrame\":\n    \"\"\"\n    Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n    Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default\n        Frequency of the PeriodIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    TimeSeries with PeriodIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        assert isinstance(self.index, ABCDatetimeIndex)\n        new_data.set_axis(1, self.index.to_period(freq=freq))\n    elif axis == 1:\n        assert isinstance(self.columns, ABCDatetimeIndex)\n        new_data.set_axis(0, self.columns.to_period(freq=freq))\n    else:  # pragma: no cover\n        raise AssertionError(f\"Axis must be 0 or 1. Got {axis}\")\n\n    return self._constructor(new_data)",
                "def isin(self, values) -> \"DataFrame\":\n    \"\"\"\n    Whether each element in the DataFrame is contained in values.\n\n    Parameters\n    ----------\n    values : iterable, Series, DataFrame or dict\n        The result will only be true at a location if all the\n        labels match. If `values` is a Series, that's the index. If\n        `values` is a dict, the keys must be the column names,\n        which must match. If `values` is a DataFrame,\n        then both the index and column labels must match.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame of booleans showing whether each element in the DataFrame\n        is contained in values.\n\n    See Also\n    --------\n    DataFrame.eq: Equality test for DataFrame.\n    Series.isin: Equivalent method on Series.\n    Series.str.contains: Test if pattern or regex is contained within a\n        string of a Series or Index.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n    ...                   index=['falcon', 'dog'])\n    >>> df\n            num_legs  num_wings\n    falcon         2          2\n    dog            4          0\n\n    When ``values`` is a list check whether every value in the DataFrame\n    is present in the list (which animals have 0 or 2 legs or wings)\n\n    >>> df.isin([0, 2])\n            num_legs  num_wings\n    falcon      True       True\n    dog        False       True\n\n    When ``values`` is a dict, we can pass values to check for each\n    column separately:\n\n    >>> df.isin({'num_wings': [0, 3]})\n            num_legs  num_wings\n    falcon     False      False\n    dog        False       True\n\n    When ``values`` is a Series or DataFrame the index and column must\n    match. Note that 'falcon' does not match based on the number of legs\n    in df2.\n\n    >>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n    ...                      index=['spider', 'falcon'])\n    >>> df.isin(other)\n            num_legs  num_wings\n    falcon      True       True\n    dog        False      False\n    \"\"\"\n    if isinstance(values, dict):\n        from pandas.core.reshape.concat import concat\n\n        values = collections.defaultdict(list, values)\n        return self._ensure_type(\n            concat(\n                (\n                    self.iloc[:, [i]].isin(values[col])\n                    for i, col in enumerate(self.columns)\n                ),\n                axis=1,\n            )\n        )\n    elif isinstance(values, Series):\n        if not values.index.is_unique:\n            raise ValueError(\"cannot compute isin with a duplicate axis.\")\n        return self.eq(values.reindex_like(self), axis=\"index\")\n    elif isinstance(values, DataFrame):\n        if not (values.columns.is_unique and values.index.is_unique):\n            raise ValueError(\"cannot compute isin with a duplicate axis.\")\n        return self.eq(values.reindex_like(self))\n    else:\n        if not is_list_like(values):\n            raise TypeError(\n                \"only list-like or dict-like objects are allowed \"\n                \"to be passed to DataFrame.isin(), \"\n                f\"you passed a '{type(values).__name__}'\"\n            )\n        return DataFrame(\n            algorithms.isin(self.values.ravel(), values).reshape(self.shape),\n            self.index,\n            self.columns,\n        )",
                "def extract_unique_dtypes_from_dtypes_set(\n    dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n) -> List[Dtype]:\n    extracted_dtypes = [\n        unique_dtype\n        for unique_dtype in unique_dtypes\n        if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n    ]\n    return extracted_dtypes",
                "def reindexer(value):\n    # reindex if necessary\n\n    if value.index.equals(self.index) or not len(self.index):\n        value = value._values.copy()\n    else:\n\n        # GH 4107\n        try:\n            value = value.reindex(self.index)._values\n        except ValueError as err:\n            # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n            if not value.index.is_unique:\n                # duplicate axis\n                raise err\n\n            # other\n            raise TypeError(\n                \"incompatible index of inserted column with frame index\"\n            )\n    return value",
                "def _maybe_casted_values(index, labels=None):\n    values = index._values\n    if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n        if values.dtype == np.object_:\n            values = lib.maybe_convert_objects(values)\n\n    # if we have the labels, extract the values with a mask\n    if labels is not None:\n        mask = labels == -1\n\n        # we can have situations where the whole mask is -1,\n        # meaning there is nothing found in labels, so make all nan's\n        if mask.all():\n            values = np.empty(len(mask))\n            values.fill(np.nan)\n        else:\n            values = values.take(labels)\n\n            # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n            # Push this into maybe_upcast_putmask?\n            # We can't pass EAs there right now. Looks a bit\n            # complicated.\n            # So we unbox the ndarray_values, op, re-box.\n            values_type = type(values)\n            values_dtype = values.dtype\n\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values._data\n\n            if mask.any():\n                values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values_type(values, dtype=values_dtype)\n\n    return values",
                "def f(vals):\n    labels, shape = algorithms.factorize(\n        vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n    )\n    return labels.astype(\"i8\", copy=False), len(shape)",
                "def extract_values(arr):\n    # Does two things:\n    # 1. maybe gets the values from the Series / Index\n    # 2. convert datelike to i8\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n\n    if needs_i8_conversion(arr):\n        if is_extension_array_dtype(arr.dtype):\n            arr = arr.asi8\n        else:\n            arr = arr.view(\"i8\")\n    return arr",
                "def combiner(x, y):\n    mask = isna(x)\n    if isinstance(mask, (ABCIndexClass, ABCSeries)):\n        mask = mask._values\n\n    x_values = extract_values(x)\n    y_values = extract_values(y)\n\n    # If the column y in other DataFrame is not in first DataFrame,\n    # just return y_values.\n    if y.name not in self.columns:\n        return y_values\n\n    return expressions.where(mask, y_values, x_values)",
                "def infer(x):\n    if x.empty:\n        return lib.map_infer(x, func)\n    return lib.map_infer(x.astype(object).values, func)",
                "def _dict_round(df, decimals):\n    for col, vals in df.items():\n        try:\n            yield _series_round(vals, decimals[col])\n        except KeyError:\n            yield vals",
                "def _series_round(s, decimals):\n    if is_integer_dtype(s) or is_float_dtype(s):\n        return s.round(decimals)\n    return s",
                "def f(x):\n    return op(x, axis=axis, skipna=skipna, **kwds)",
                "def _get_data(axis_matters):\n    if filter_type is None or filter_type == \"numeric\":\n        data = self._get_numeric_data()\n    elif filter_type == \"bool\":\n        if axis_matters:\n            # GH#25101, GH#24434\n            data = self._get_bool_data() if axis == 0 else self\n        else:\n            data = self._get_bool_data()\n    else:  # pragma: no cover\n        msg = (\n            f\"Generating numeric_only data with filter_type {filter_type} \"\n            \"not supported.\"\n        )\n        raise NotImplementedError(msg)\n    return data",
                "def f(s):\n    return s.mode(dropna=dropna)",
                "def _arith_op(left, right):\n    # for the mixed_type case where we iterate over columns,\n    # _arith_op(left, right) is equivalent to\n    # left._binop(right, func, fill_value=fill_value)\n    left, right = ops.fill_binop(left, right, fill_value)\n    return func(left, right)",
                "def blk_func(values):\n    if values.ndim == 1 and not isinstance(values, np.ndarray):\n        # we can't pass axis=1\n        return op(values, axis=0, skipna=skipna, **kwds)\n    return op(values, axis=1, skipna=skipna, **kwds)",
                "def c(x):\n    return nanops.nancorr(x[0], x[1], method=method)"
            ],
            "inscope_function_signatures": [
                "_from_nested_dict(data)",
                "_constructor(self) -> Type['DataFrame']",
                "_constructor_expanddim(self)",
                "__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
                "axes(self) -> List[Index]",
                "shape(self) -> Tuple[int, int]",
                "_is_homogeneous_type(self) -> bool",
                "_repr_fits_vertical_(self) -> bool",
                "_repr_fits_horizontal_(self, ignore_width: bool=False) -> bool",
                "_info_repr(self) -> bool",
                "__repr__(self) -> str",
                "_repr_html_(self) -> Optional[str]",
                "to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]",
                "style(self) -> 'Styler'",
                "items(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                "iteritems(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                "iterrows(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                "itertuples(self, index=True, name='Pandas')",
                "__len__(self) -> int",
                "dot(self, other)",
                "__matmul__(self, other)",
                "__rmatmul__(self, other)",
                "from_dict(cls, data, orient='columns', dtype=None, columns=None) -> 'DataFrame'",
                "to_numpy(self, dtype=None, copy=False) -> np.ndarray",
                "to_dict(self, orient='dict', into=dict)",
                "to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None) -> None",
                "from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None) -> 'DataFrame'",
                "to_records(self, index=True, column_dtypes=None, index_dtypes=None) -> np.recarray",
                "_from_arrays(cls, arrays, columns, index, dtype=None) -> 'DataFrame'",
                "to_stata(self, path: FilePathOrBuffer, convert_dates: Optional[Dict[Label, str]]=None, write_index: bool=True, byteorder: Optional[str]=None, time_stamp: Optional[datetime.datetime]=None, data_label: Optional[str]=None, variable_labels: Optional[Dict[Label, str]]=None, version: Optional[int]=114, convert_strl: Optional[Sequence[Label]]=None) -> None",
                "to_feather(self, path) -> None",
                "to_markdown(self, buf: Optional[IO[str]]=None, mode: Optional[str]=None, **kwargs) -> Optional[str]",
                "to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs) -> None",
                "to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None)",
                "info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None) -> None",
                "memory_usage(self, index=True, deep=False) -> Series",
                "transpose(self, *args) -> 'DataFrame'",
                "_ixs(self, i: int, axis: int=0)",
                "__getitem__(self, key)",
                "_getitem_bool_array(self, key)",
                "_getitem_multilevel(self, key)",
                "_get_value(self, index, col, takeable: bool=False)",
                "__setitem__(self, key, value)",
                "_setitem_slice(self, key: slice, value)",
                "_setitem_array(self, key, value)",
                "_setitem_frame(self, key, value)",
                "_set_item(self, key, value)",
                "_set_value(self, index, col, value, takeable: bool=False)",
                "_ensure_valid_index(self, value)",
                "_box_item_values(self, key, values)",
                "_box_col_values(self, values, items)",
                "query(self, expr, inplace=False, **kwargs)",
                "eval(self, expr, inplace=False, **kwargs)",
                "select_dtypes(self, include=None, exclude=None) -> 'DataFrame'",
                "insert(self, loc, column, value, allow_duplicates=False) -> None",
                "assign(self, **kwargs) -> 'DataFrame'",
                "_sanitize_column(self, key, value, broadcast=True)",
                "_series(self)",
                "lookup(self, row_labels, col_labels) -> np.ndarray",
                "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                "_reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
                "_reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
                "_reindex_multi(self, axes, copy, fill_value) -> 'DataFrame'",
                "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None) -> 'DataFrame'",
                "set_axis(self, labels, axis=0, inplace=False)",
                "reindex(self, *args, **kwargs) -> 'DataFrame'",
                "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
                "rename(self, mapper: Optional[Renamer]=None) -> Optional['DataFrame']",
                "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None) -> Optional['DataFrame']",
                "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None) -> 'DataFrame'",
                "set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
                "reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']",
                "isna(self) -> 'DataFrame'",
                "isnull(self) -> 'DataFrame'",
                "notna(self) -> 'DataFrame'",
                "notnull(self) -> 'DataFrame'",
                "dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
                "drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False, ignore_index: bool=False) -> Optional['DataFrame']",
                "duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series'",
                "sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last', ignore_index=False)",
                "sort_index(self, axis=0, level=None, ascending: bool=True, inplace: bool=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool=True, ignore_index: bool=False)",
                "nlargest(self, n, columns, keep='first') -> 'DataFrame'",
                "nsmallest(self, n, columns, keep='first') -> 'DataFrame'",
                "swaplevel(self, i=-2, j=-1, axis=0) -> 'DataFrame'",
                "reorder_levels(self, order, axis=0) -> 'DataFrame'",
                "_combine_frame(self, other: 'DataFrame', func, fill_value=None)",
                "_combine_match_index(self, other: Series, func)",
                "_construct_result(self, result) -> 'DataFrame'",
                "combine(self, other: 'DataFrame', func, fill_value=None, overwrite=True) -> 'DataFrame'",
                "combine_first(self, other: 'DataFrame') -> 'DataFrame'",
                "update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore') -> None",
                "groupby(self, by=None, axis=0, level=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False) -> 'DataFrameGroupBy'",
                "pivot(self, index=None, columns=None, values=None) -> 'DataFrame'",
                "pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame'",
                "stack(self, level=-1, dropna=True)",
                "explode(self, column: Union[str, Tuple]) -> 'DataFrame'",
                "unstack(self, level=-1, fill_value=None)",
                "melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None) -> 'DataFrame'",
                "diff(self, periods=1, axis=0) -> 'DataFrame'",
                "_gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]",
                "aggregate(self, func, axis=0, *args, **kwargs)",
                "_aggregate(self, arg, axis=0, *args, **kwargs)",
                "transform(self, func, axis=0, *args, **kwargs) -> 'DataFrame'",
                "apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
                "applymap(self, func) -> 'DataFrame'",
                "append(self, other, ignore_index=False, verify_integrity=False, sort=False) -> 'DataFrame'",
                "join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False) -> 'DataFrame'",
                "_join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None) -> 'DataFrame'",
                "round(self, decimals=0, *args, **kwargs) -> 'DataFrame'",
                "corr(self, method='pearson', min_periods=1) -> 'DataFrame'",
                "cov(self, min_periods=None) -> 'DataFrame'",
                "corrwith(self, other, axis=0, drop=False, method='pearson') -> Series",
                "count(self, axis=0, level=None, numeric_only=False)",
                "_count_level(self, level, axis=0, numeric_only=False)",
                "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                "nunique(self, axis=0, dropna=True) -> Series",
                "idxmin(self, axis=0, skipna=True) -> Series",
                "idxmax(self, axis=0, skipna=True) -> Series",
                "_get_agg_axis(self, axis_num)",
                "mode(self, axis=0, numeric_only=False, dropna=True) -> 'DataFrame'",
                "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
                "to_timestamp(self, freq=None, how='start', axis=0, copy=True) -> 'DataFrame'",
                "to_period(self, freq=None, axis=0, copy=True) -> 'DataFrame'",
                "isin(self, values) -> 'DataFrame'",
                "extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]",
                "reindexer(value)",
                "_maybe_casted_values(index, labels=None)",
                "f(vals)",
                "extract_values(arr)",
                "combiner(x, y)",
                "infer(x)",
                "_dict_round(df, decimals)",
                "_series_round(s, decimals)",
                "f(x)",
                "_get_data(axis_matters)",
                "f(s)",
                "_arith_op(left, right)",
                "blk_func(values)",
                "c(x)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    136
                ],
                "_shared_doc_kwargs": [
                    4385,
                    3941,
                    4389,
                    4393,
                    3597,
                    143,
                    6575,
                    3537,
                    3922,
                    6549,
                    3606,
                    4662,
                    5593,
                    4381,
                    3903
                ],
                "dict": [
                    8281,
                    6335,
                    2424,
                    2436,
                    7243,
                    6892,
                    6893,
                    143,
                    1619,
                    1428,
                    438,
                    7766,
                    440,
                    1241,
                    1308,
                    1439
                ],
                "_numeric_only_doc": [
                    170
                ],
                "_merge_doc": [
                    7116,
                    175
                ],
                "NDFrame": [
                    2724,
                    324,
                    517,
                    4663,
                    402,
                    3602,
                    3607,
                    410,
                    3903
                ],
                "_internal_names_set": [
                    402
                ],
                "NDFrame._internal_names_set": [
                    402
                ],
                "_typ": [
                    403
                ],
                "DataFrame": [
                    6920,
                    6921,
                    5514,
                    5515,
                    7694,
                    3347,
                    8340,
                    8341,
                    407,
                    8343,
                    8344,
                    7071,
                    7073,
                    433,
                    3401,
                    2511,
                    2656,
                    1633,
                    1124,
                    8298,
                    8309,
                    1142,
                    2683
                ],
                "property": [
                    521,
                    829,
                    3406,
                    560,
                    2449,
                    405,
                    538,
                    413
                ],
                "Type": [
                    409,
                    406
                ],
                "_constructor_sliced": [
                    409
                ],
                "Series": [
                    896,
                    1153,
                    905,
                    1147,
                    908,
                    2317,
                    2575,
                    3344,
                    4625,
                    2322,
                    7951,
                    3352,
                    409,
                    7068,
                    7837,
                    7462,
                    2600,
                    4657,
                    2233,
                    6464,
                    6465,
                    7875,
                    7877,
                    7243,
                    460,
                    7244,
                    7503,
                    3409,
                    2773,
                    1241,
                    7645,
                    2658,
                    1124,
                    485,
                    8294,
                    7655,
                    7913,
                    7915,
                    6892,
                    7532,
                    6896,
                    1146,
                    2555,
                    5116,
                    7551
                ],
                "_deprecations": [
                    410
                ],
                "FrozenSet": [
                    3185,
                    410
                ],
                "str": [
                    2944,
                    1793,
                    770,
                    773,
                    774,
                    7686,
                    410,
                    411,
                    668,
                    4637,
                    1965,
                    1839,
                    698,
                    4541,
                    6462,
                    1857,
                    1859,
                    1861,
                    1862,
                    3783,
                    6103,
                    473,
                    2018,
                    2019,
                    4720,
                    4721,
                    755,
                    756,
                    758,
                    1654,
                    760,
                    4598,
                    765,
                    1790
                ],
                "NDFrame._deprecations": [
                    410
                ],
                "frozenset": [
                    410,
                    3171,
                    3172,
                    3165
                ],
                "_accessors": [
                    411
                ],
                "Set": [
                    411
                ],
                "NotImplementedError": [
                    7744,
                    5510,
                    2774,
                    415
                ],
                "Optional": [
                    768,
                    896,
                    771,
                    772,
                    773,
                    774,
                    905,
                    6464,
                    908,
                    423,
                    424,
                    425,
                    4137,
                    4141,
                    4142,
                    698,
                    4540,
                    3775,
                    4544,
                    1857,
                    3777,
                    1859,
                    1860,
                    1861,
                    1862,
                    1863,
                    1864,
                    3778,
                    3779,
                    3782,
                    3784,
                    3912,
                    4049,
                    2018,
                    2019,
                    4336,
                    755,
                    756,
                    757,
                    4086,
                    4597,
                    761,
                    762,
                    763,
                    765,
                    766,
                    767
                ],
                "Axes": [
                    424,
                    423
                ],
                "Dtype": [
                    425,
                    3186,
                    3185
                ],
                "bool": [
                    769,
                    4625,
                    659,
                    2327,
                    426,
                    4138,
                    2732,
                    4139,
                    561,
                    2610,
                    4541,
                    4542,
                    4543,
                    1858,
                    3780,
                    3781,
                    599,
                    606,
                    5599,
                    5600,
                    5601,
                    5602,
                    5603,
                    2534,
                    4718,
                    4719,
                    4722,
                    4723,
                    758,
                    759,
                    4598,
                    763,
                    764
                ],
                "data": [
                    7732,
                    7736,
                    1594,
                    7738,
                    1599,
                    7745,
                    1610,
                    1612,
                    1615,
                    1617,
                    1619,
                    1621,
                    1622,
                    1626,
                    1633,
                    1634,
                    1639,
                    7807,
                    7809,
                    7810,
                    7813,
                    7815,
                    7816,
                    8350,
                    1239,
                    1241,
                    1242,
                    1244,
                    3296,
                    3299,
                    3300,
                    1251,
                    8044,
                    8049,
                    428,
                    429,
                    433,
                    434,
                    436,
                    438,
                    8119,
                    440,
                    441,
                    442,
                    8124,
                    446,
                    447,
                    8126,
                    451,
                    453,
                    454,
                    455,
                    8133,
                    457,
                    458,
                    460,
                    461,
                    462,
                    463,
                    466,
                    467,
                    468,
                    470,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    480,
                    485,
                    486,
                    487,
                    488,
                    2537,
                    490,
                    494,
                    2544,
                    2545,
                    499,
                    2547,
                    509
                ],
                "dtype": [
                    2434,
                    1305,
                    430,
                    431,
                    438,
                    441,
                    1850,
                    447,
                    1603,
                    1605,
                    458,
                    1614,
                    1615,
                    466,
                    468,
                    470,
                    480,
                    1251,
                    492,
                    494,
                    496,
                    499,
                    509,
                    2430,
                    2431
                ],
                "self._validate_dtype": [
                    431
                ],
                "self": [
                    8203,
                    4109,
                    8207,
                    4113,
                    6161,
                    8209,
                    6164,
                    8210,
                    8212,
                    8213,
                    6169,
                    6170,
                    8217,
                    2115,
                    6235,
                    8285,
                    8288,
                    8289,
                    8297,
                    8301,
                    8310,
                    8311,
                    8312,
                    2197,
                    2231,
                    4286,
                    4288,
                    6352,
                    4331,
                    4332,
                    4333,
                    4337,
                    4340,
                    4342,
                    4344,
                    4345,
                    4346,
                    4348,
                    4356,
                    4363,
                    4365,
                    2318,
                    2319,
                    2322,
                    6453,
                    6454,
                    6455,
                    6478,
                    2427,
                    2428,
                    2432,
                    2435,
                    2436,
                    2440,
                    2443,
                    2444,
                    2447,
                    4505,
                    6553,
                    4508,
                    6557,
                    4510,
                    6561,
                    2467,
                    4515,
                    2471,
                    6568,
                    2473,
                    2474,
                    2477,
                    431,
                    6577,
                    2482,
                    4531,
                    2484,
                    437,
                    2485,
                    4534,
                    2488,
                    6579,
                    2494,
                    2498,
                    2499,
                    2500,
                    2501,
                    2504,
                    2508,
                    2512,
                    2516,
                    2523,
                    2524,
                    2525,
                    4573,
                    4574,
                    4577,
                    2531,
                    4581,
                    2537,
                    4585,
                    4587,
                    2544,
                    2555,
                    2561,
                    2563,
                    517,
                    2568,
                    2570,
                    2574,
                    2576,
                    4624,
                    2578,
                    2579,
                    4629,
                    2582,
                    2583,
                    536,
                    2584,
                    2586,
                    4634,
                    4639,
                    2601,
                    2602,
                    4649,
                    2605,
                    558,
                    4653,
                    2608,
                    4657,
                    6720,
                    2625,
                    4675,
                    2628,
                    2629,
                    2636,
                    4686,
                    591,
                    592,
                    594,
                    2642,
                    2643,
                    2644,
                    4693,
                    2647,
                    2650,
                    604,
                    2654,
                    4702,
                    4703,
                    2657,
                    2659,
                    2662,
                    4710,
                    4712,
                    619,
                    2668,
                    2669,
                    2674,
                    2676,
                    2678,
                    2680,
                    2681,
                    2687,
                    2689,
                    2692,
                    645,
                    2693,
                    6793,
                    2699,
                    2701,
                    2708,
                    2709,
                    2710,
                    665,
                    4766,
                    4767,
                    673,
                    674,
                    2722,
                    2723,
                    2724,
                    2729,
                    2730,
                    686,
                    2745,
                    2749,
                    2750,
                    4797,
                    704,
                    706,
                    4803,
                    4804,
                    2760,
                    2762,
                    2763,
                    4813,
                    719,
                    4815,
                    2771,
                    2780,
                    2785,
                    2787,
                    2789,
                    2795,
                    2796,
                    6903,
                    6904,
                    6906,
                    6908,
                    6915,
                    6916,
                    6922,
                    6923,
                    6928,
                    6930,
                    807,
                    4924,
                    843,
                    897,
                    898,
                    899,
                    901,
                    902,
                    2949,
                    2952,
                    906,
                    2956,
                    2959,
                    7058,
                    5025,
                    7075,
                    5041,
                    7090,
                    5043,
                    953,
                    954,
                    955,
                    7100,
                    5072,
                    5073,
                    5076,
                    7135,
                    5106,
                    5108,
                    5111,
                    5112,
                    5119,
                    1024,
                    3072,
                    1026,
                    3073,
                    3076,
                    5121,
                    1030,
                    5126,
                    5127,
                    1033,
                    1045,
                    5142,
                    5145,
                    7247,
                    7250,
                    7255,
                    7256,
                    7259,
                    1125,
                    1126,
                    1129,
                    1134,
                    1135,
                    3182,
                    1143,
                    3194,
                    1151,
                    3200,
                    3206,
                    3208,
                    1161,
                    5257,
                    5260,
                    5261,
                    7310,
                    1167,
                    5263,
                    3226,
                    3227,
                    3228,
                    5292,
                    7350,
                    5315,
                    3296,
                    3325,
                    3331,
                    5385,
                    5390,
                    7445,
                    3350,
                    3351,
                    1305,
                    3353,
                    3363,
                    7460,
                    3368,
                    3390,
                    3398,
                    3399,
                    3400,
                    7500,
                    7501,
                    3409,
                    3410,
                    3437,
                    3438,
                    3439,
                    3440,
                    1397,
                    3445,
                    3450,
                    1406,
                    1408,
                    1412,
                    3461,
                    1413,
                    1418,
                    5517,
                    5519,
                    1424,
                    5520,
                    1426,
                    1429,
                    1436,
                    1439,
                    1440,
                    3487,
                    3490,
                    5541,
                    3507,
                    3510,
                    3521,
                    3522,
                    3527,
                    3529,
                    3531,
                    7634,
                    7636,
                    7639,
                    7641,
                    5609,
                    5612,
                    7661,
                    7663,
                    7670,
                    1540,
                    7706,
                    7715,
                    3620,
                    7716,
                    3625,
                    7723,
                    7724,
                    7725,
                    7732,
                    7736,
                    7738,
                    7748,
                    7774,
                    7799,
                    7802,
                    7818,
                    5773,
                    7831,
                    7834,
                    7875,
                    7909,
                    7910,
                    7911,
                    7913,
                    1771,
                    1773,
                    1775,
                    1777,
                    1780,
                    1782,
                    1790,
                    1792,
                    1793,
                    7947,
                    7948,
                    7949,
                    7951,
                    7958,
                    7960,
                    1817,
                    5921,
                    3943,
                    8044,
                    8119,
                    1976,
                    8120,
                    8128,
                    8130,
                    8131,
                    8138,
                    8140,
                    1999,
                    6099,
                    6101,
                    4061,
                    2023,
                    4072,
                    8167,
                    4074,
                    8171,
                    8173,
                    8174,
                    4079,
                    4080,
                    4081,
                    4082,
                    8176,
                    4084,
                    8177,
                    8181
                ],
                "isinstance": [
                    4096,
                    4099,
                    7686,
                    2575,
                    6159,
                    8209,
                    8212,
                    4637,
                    4638,
                    2596,
                    2600,
                    4677,
                    7243,
                    7244,
                    7758,
                    1619,
                    7766,
                    4695,
                    8281,
                    2656,
                    1633,
                    2658,
                    1124,
                    8294,
                    8298,
                    1142,
                    1654,
                    1146,
                    2683,
                    1148,
                    2698,
                    4778,
                    4292,
                    1241,
                    4329,
                    1771,
                    6892,
                    6893,
                    4337,
                    5365,
                    1782,
                    4348,
                    5377,
                    4354,
                    6917,
                    6920,
                    6927,
                    3344,
                    3347,
                    3350,
                    3352,
                    3359,
                    3365,
                    3369,
                    3370,
                    1839,
                    3376,
                    3399,
                    3401,
                    7503,
                    2944,
                    5514,
                    4501,
                    7068,
                    7073,
                    2470,
                    433,
                    436,
                    5045,
                    440,
                    5049,
                    442,
                    5052,
                    446,
                    4040,
                    460,
                    2511,
                    5073,
                    6098,
                    4051,
                    5079,
                    2520,
                    473,
                    474,
                    5082,
                    485,
                    487,
                    8173,
                    2544,
                    4080,
                    8176,
                    7668,
                    4088,
                    2555,
                    4092
                ],
                "data._data": [
                    434,
                    8133
                ],
                "BlockManager": [
                    436
                ],
                "mgr": [
                    517,
                    458,
                    511,
                    492,
                    494,
                    1679,
                    496,
                    1681,
                    466,
                    468,
                    437,
                    470,
                    441,
                    1850,
                    1851,
                    447
                ],
                "self._init_mgr": [
                    437
                ],
                "index": [
                    512,
                    1025,
                    1033,
                    4117,
                    4119,
                    4120,
                    4128,
                    4130,
                    1601,
                    2626,
                    2119,
                    2632,
                    2643,
                    2644,
                    1653,
                    1654,
                    1655,
                    1656,
                    1658,
                    1660,
                    1663,
                    1666,
                    1668,
                    1669,
                    8325,
                    5773,
                    8350,
                    2207,
                    8353,
                    3762,
                    2746,
                    2751,
                    4291,
                    4292,
                    2760,
                    2762,
                    1236,
                    1244,
                    1251,
                    7911,
                    7912,
                    1770,
                    6903,
                    6913,
                    1800,
                    7949,
                    7950,
                    2321,
                    1811,
                    1813,
                    1815,
                    1817,
                    1827,
                    1828,
                    5923,
                    817,
                    3894,
                    1850,
                    3469,
                    3470,
                    3472,
                    438,
                    441,
                    447,
                    458,
                    466,
                    468,
                    470,
                    484,
                    486,
                    488,
                    490,
                    492,
                    494,
                    496,
                    507,
                    509
                ],
                "columns": [
                    512,
                    3463,
                    3464,
                    8328,
                    3466,
                    1677,
                    5773,
                    1679,
                    1426,
                    1428,
                    2198,
                    5025,
                    5924,
                    808,
                    3763,
                    438,
                    1591,
                    1592,
                    441,
                    953,
                    1850,
                    956,
                    3895,
                    4924,
                    447,
                    1601,
                    458,
                    464,
                    465,
                    466,
                    468,
                    1620,
                    470,
                    1621,
                    1622,
                    1627,
                    478,
                    479,
                    480,
                    481,
                    1246,
                    1251,
                    1631,
                    1634,
                    1635,
                    1636,
                    1637,
                    1639,
                    1642,
                    1643,
                    492,
                    1645,
                    494,
                    496,
                    1655,
                    507,
                    509
                ],
                "copy": [
                    2441,
                    3466,
                    8204,
                    3472,
                    1305,
                    5283,
                    3492,
                    2470,
                    2477,
                    438,
                    3512,
                    3897,
                    447,
                    458,
                    3533,
                    470,
                    3556,
                    8168,
                    7145,
                    494,
                    499
                ],
                "init_dict": [
                    496,
                    441,
                    466,
                    468
                ],
                "ma.MaskedArray": [
                    442
                ],
                "ma": [
                    442,
                    451
                ],
                "mrecords.MaskedRecords": [
                    446
                ],
                "mrecords": [
                    446
                ],
                "masked_rec_array_to_mgr": [
                    447
                ],
                "mask": [
                    5376,
                    5377,
                    5378,
                    7684,
                    5388,
                    7692,
                    5524,
                    5533,
                    7326,
                    5535,
                    5538,
                    7332,
                    5541,
                    4520,
                    4522,
                    4524,
                    4531,
                    451,
                    452,
                    455,
                    4298,
                    4302,
                    4303,
                    4319,
                    4320,
                    7676,
                    7679
                ],
                "ma.getmaskarray": [
                    451
                ],
                "mask.any": [
                    452,
                    4319
                ],
                "fill_value": [
                    5092,
                    3493,
                    453,
                    455,
                    3527,
                    3557,
                    3466,
                    3944,
                    5289,
                    5290,
                    3534,
                    5103,
                    3472,
                    5268,
                    5926,
                    3513,
                    6235
                ],
                "maybe_upcast": [
                    453
                ],
                "data.soften_mask": [
                    454
                ],
                "data.copy": [
                    457
                ],
                "init_ndarray": [
                    458,
                    511,
                    470,
                    494
                ],
                "np.ndarray": [
                    4096,
                    1633,
                    2658,
                    1253,
                    2470,
                    3369,
                    2698,
                    460,
                    7758,
                    2575,
                    3185,
                    4052,
                    3413,
                    3352,
                    1148
                ],
                "np": [
                    4096,
                    7808,
                    5125,
                    2698,
                    7950,
                    1167,
                    2575,
                    7824,
                    7826,
                    5523,
                    1685,
                    3352,
                    1305,
                    3483,
                    4636,
                    7325,
                    3614,
                    7326,
                    7452,
                    7453,
                    4514,
                    7455,
                    2470,
                    7334,
                    3369,
                    1839,
                    1846,
                    8131,
                    3448,
                    4293,
                    3402,
                    460,
                    3404,
                    7758,
                    1615,
                    4303,
                    4304,
                    4052,
                    3413,
                    2781,
                    4320,
                    1633,
                    2658,
                    1253,
                    7782,
                    2535,
                    7912,
                    1773,
                    3182,
                    1136,
                    3185,
                    499,
                    5110,
                    1144,
                    1147,
                    1148,
                    1149,
                    7551
                ],
                "Index": [
                    1660,
                    8128,
                    2658,
                    3365,
                    3369,
                    522,
                    4649,
                    460,
                    2575,
                    3376,
                    6903,
                    3352,
                    1658,
                    1148
                ],
                "data.dtype.names": [
                    461,
                    462
                ],
                "data.dtype": [
                    461,
                    462
                ],
                "data_columns": [
                    465,
                    462,
                    463
                ],
                "list": [
                    1024,
                    4096,
                    4354,
                    4100,
                    6917,
                    1417,
                    6927,
                    4501,
                    4514,
                    3370,
                    4654,
                    7090,
                    4677,
                    4040,
                    462,
                    7247,
                    6098,
                    4052,
                    4695,
                    7768,
                    1241,
                    475,
                    1244,
                    8284,
                    2530,
                    2658,
                    4329,
                    1773,
                    4079,
                    1780,
                    2427,
                    4349
                ],
                "k": [
                    1408,
                    898,
                    899,
                    901,
                    902,
                    1030,
                    1424,
                    1432,
                    955,
                    956,
                    957,
                    463,
                    4693,
                    1622,
                    1626,
                    1627,
                    1628,
                    4699,
                    3298,
                    3299,
                    1406
                ],
                "getattr": [
                    2656,
                    2534,
                    467,
                    4056,
                    477
                ],
                "data.name": [
                    468
                ],
                "abc.Iterable": [
                    473
                ],
                "abc": [
                    473,
                    474,
                    4099,
                    4052
                ],
                "bytes": [
                    473
                ],
                "abc.Sequence": [
                    474
                ],
                "ExtensionArray": [
                    474,
                    3359
                ],
                "len": [
                    2561,
                    8321,
                    2563,
                    1796,
                    4356,
                    1030,
                    5255,
                    649,
                    1033,
                    5260,
                    4109,
                    4365,
                    655,
                    5263,
                    4113,
                    4114,
                    7692,
                    1045,
                    4629,
                    4631,
                    3354,
                    7451,
                    7324,
                    7456,
                    2594,
                    2729,
                    3370,
                    4522,
                    558,
                    3390,
                    8126,
                    4679,
                    4681,
                    3402,
                    4683,
                    4810,
                    4303,
                    592,
                    2771,
                    7254,
                    1239,
                    7767,
                    3325,
                    7768,
                    7769,
                    476,
                    604,
                    7644,
                    4707,
                    1126,
                    4327,
                    488,
                    3432,
                    490,
                    619,
                    3433,
                    4332,
                    4584,
                    4590,
                    2674,
                    2676,
                    3445,
                    1657,
                    2684,
                    509,
                    7550,
                    7551
                ],
                "is_list_like": [
                    8129,
                    8303,
                    2771,
                    2520,
                    3162,
                    3160,
                    477
                ],
                "is_named_tuple": [
                    478
                ],
                "_fields": [
                    479
                ],
                "arrays": [
                    1792,
                    4097,
                    1026,
                    4100,
                    1030,
                    1799,
                    4104,
                    1674,
                    1036,
                    4109,
                    1039,
                    1679,
                    4114,
                    4117,
                    1023,
                    1846,
                    1850,
                    1622,
                    1624,
                    1629,
                    1631,
                    480,
                    1634,
                    4090,
                    1639,
                    492,
                    4076,
                    1777,
                    4082,
                    4084,
                    1657,
                    1658,
                    4094,
                    1663
                ],
                "to_arrays": [
                    480,
                    1634,
                    1639
                ],
                "ensure_index": [
                    481,
                    1636,
                    1641,
                    1643,
                    1621,
                    1592
                ],
                "get_names_from_index": [
                    486
                ],
                "Categorical": [
                    487
                ],
                "ibase.default_index": [
                    4707,
                    4327,
                    488,
                    4584,
                    490,
                    4810,
                    4590
                ],
                "ibase": [
                    4707,
                    4327,
                    488,
                    4584,
                    490,
                    4810,
                    4590
                ],
                "arrays_to_mgr": [
                    1850,
                    492,
                    1679
                ],
                "arr": [
                    5312,
                    5373,
                    499,
                    5365,
                    5366,
                    5368,
                    5369,
                    5370,
                    507,
                    5372,
                    5309,
                    5310
                ],
                "np.array": [
                    1305,
                    499,
                    1773,
                    1615
                ],
                "ValueError": [
                    2562,
                    515,
                    2946,
                    3332,
                    4357,
                    5512,
                    2953,
                    2700,
                    4112,
                    6160,
                    2194,
                    6162,
                    7827,
                    4121,
                    5530,
                    7962,
                    1437,
                    7070,
                    1953,
                    1443,
                    1956,
                    7086,
                    4527,
                    7344,
                    5298,
                    1844,
                    4680,
                    7246,
                    2774,
                    2775,
                    4057,
                    1247,
                    3168,
                    1249,
                    1127,
                    8296,
                    3178,
                    3434,
                    8300,
                    7537,
                    1138,
                    2675,
                    500,
                    2685
                ],
                "TypeError": [
                    1664,
                    1155,
                    3339,
                    2704,
                    7827,
                    4503,
                    6558,
                    4529,
                    5046,
                    2757,
                    5074,
                    7252,
                    2774,
                    4062,
                    4063,
                    7783,
                    5608,
                    6895,
                    8304,
                    6898,
                    500,
                    501,
                    7669,
                    6907
                ],
                "exc": [
                    505,
                    501
                ],
                "err": [
                    3336,
                    505,
                    503
                ],
                "arr.ndim": [
                    507
                ],
                "values": [
                    512,
                    2432,
                    2434,
                    6791,
                    7815,
                    7818,
                    7819,
                    5773,
                    5922,
                    2484,
                    2485,
                    4291,
                    4293,
                    4294,
                    1607,
                    1610,
                    1612,
                    7758,
                    1615,
                    4303,
                    1617,
                    4304,
                    4306,
                    7760,
                    7761,
                    4313,
                    4314,
                    8281,
                    7676,
                    4317,
                    7774,
                    8284,
                    4320,
                    7776,
                    2786,
                    2787,
                    4323,
                    2789,
                    4325,
                    7778,
                    8288,
                    8294,
                    8295,
                    8297,
                    2796,
                    8298,
                    3438,
                    8299,
                    8301,
                    8303,
                    8307,
                    3446,
                    8310,
                    508
                ],
                "cast_scalar_to_array": [
                    508,
                    3390
                ],
                "values.dtype": [
                    512,
                    4314,
                    4293
                ],
                "NDFrame.__init__": [
                    517
                ],
                "self.index": [
                    2561,
                    1026,
                    2563,
                    1412,
                    2436,
                    3331,
                    2568,
                    2444,
                    5260,
                    8209,
                    2322,
                    8210,
                    1045,
                    5142,
                    536,
                    2584,
                    6169,
                    7960,
                    1436,
                    3487,
                    8173,
                    3363,
                    4332,
                    8174,
                    3368,
                    4333,
                    2474,
                    2602,
                    6903,
                    558,
                    4657,
                    955,
                    7100,
                    4337,
                    2750,
                    3390,
                    3521,
                    2629,
                    2636,
                    3409,
                    2643,
                    2771,
                    8311,
                    7256,
                    2787,
                    4345,
                    4346,
                    1771,
                    2796,
                    1773,
                    4331,
                    1775,
                    3439,
                    4079,
                    2674,
                    4080,
                    1780,
                    2676,
                    1782,
                    2678,
                    4081,
                    4082,
                    4084,
                    2555,
                    4340,
                    3325,
                    4342
                ],
                "self.columns": [
                    1024,
                    897,
                    898,
                    1792,
                    1793,
                    901,
                    1030,
                    1413,
                    2436,
                    1033,
                    4356,
                    4363,
                    2444,
                    4365,
                    2574,
                    2319,
                    2576,
                    5385,
                    1426,
                    5519,
                    6161,
                    6923,
                    3350,
                    3351,
                    536,
                    1817,
                    3353,
                    4634,
                    5145,
                    6170,
                    7958,
                    1439,
                    4639,
                    7715,
                    2473,
                    4649,
                    5292,
                    558,
                    2482,
                    3507,
                    953,
                    6922,
                    8128,
                    2498,
                    2499,
                    3522,
                    6908,
                    3398,
                    3399,
                    2642,
                    3410,
                    7256,
                    2523,
                    8312,
                    2525,
                    4061,
                    2785,
                    8289,
                    1125,
                    1126,
                    8212,
                    6915,
                    8213,
                    619,
                    2544,
                    1777,
                    3440,
                    8176,
                    8177,
                    1397,
                    3445,
                    6904,
                    6906,
                    4348,
                    1790
                ],
                "List": [
                    522,
                    4049,
                    3186,
                    4086,
                    6462
                ],
                "Tuple": [
                    896,
                    905,
                    908,
                    4336,
                    6103,
                    539
                ],
                "int": [
                    768,
                    771,
                    772,
                    6463,
                    1863,
                    1041,
                    757,
                    2454,
                    539,
                    766,
                    767
                ],
                "self._data.any_extension_types": [
                    591
                ],
                "self._data": [
                    2467,
                    4804,
                    4581,
                    8167,
                    8203,
                    591,
                    592,
                    3228,
                    594,
                    3409,
                    2484,
                    6454,
                    2780,
                    4702
                ],
                "block.dtype": [
                    592
                ],
                "block": [
                    592
                ],
                "self._data.blocks": [
                    592
                ],
                "self._data.is_mixed_type": [
                    594
                ],
                "max_rows": [
                    2210,
                    732,
                    677,
                    647,
                    649,
                    713,
                    688,
                    819,
                    634,
                    603,
                    636,
                    604
                ],
                "get_option": [
                    677,
                    678,
                    679,
                    680,
                    681,
                    618,
                    682,
                    712,
                    713,
                    714,
                    715,
                    716,
                    663,
                    632,
                    603,
                    636
                ],
                "width": [
                    617,
                    683,
                    685,
                    623,
                    657,
                    691
                ],
                "height": [
                    617
                ],
                "console.get_console_size": [
                    617,
                    683
                ],
                "console": [
                    632,
                    617,
                    683,
                    629
                ],
                "max_columns": [
                    618,
                    622
                ],
                "nb_columns": [
                    619,
                    622,
                    623
                ],
                "ignore_width": [
                    629,
                    623
                ],
                "console.in_interactive_session": [
                    629
                ],
                "console.in_ipython_frontend": [
                    632
                ],
                "buf": [
                    672,
                    641,
                    674,
                    675,
                    705,
                    706,
                    708,
                    2024,
                    2026,
                    2027,
                    2028,
                    653,
                    654,
                    687,
                    2219,
                    2231,
                    696,
                    825
                ],
                "StringIO": [
                    672,
                    641,
                    705
                ],
                "d": [
                    649,
                    645,
                    653
                ],
                "d.iloc": [
                    649
                ],
                "min": [
                    649,
                    4629
                ],
                "d.to_string": [
                    653
                ],
                "value": [
                    3331,
                    2693,
                    3334,
                    654,
                    655,
                    3342,
                    3344,
                    3345,
                    3347,
                    2708,
                    2710,
                    3226,
                    3227,
                    3228,
                    3354,
                    3355,
                    3357,
                    3359,
                    2722,
                    2723,
                    2724,
                    3362,
                    3363,
                    3365,
                    3368,
                    3369,
                    3370,
                    3371,
                    3373,
                    3374,
                    3375,
                    3376,
                    3377,
                    3379,
                    3382,
                    3383,
                    2746,
                    3387,
                    3390,
                    3391,
                    2752,
                    2754,
                    3394,
                    3395,
                    3398,
                    2760,
                    2762,
                    3402,
                    3404,
                    3914,
                    2771,
                    2773,
                    2781,
                    2654,
                    3326,
                    3934,
                    2657,
                    2659,
                    2662,
                    2669,
                    2681,
                    2683,
                    2684,
                    3325,
                    2686,
                    2687
                ],
                "buf.getvalue": [
                    696,
                    675,
                    708,
                    654
                ],
                "repr_width": [
                    657,
                    655
                ],
                "max": [
                    7768,
                    655
                ],
                "l": [
                    655
                ],
                "value.split": [
                    655
                ],
                "info_repr_option": [
                    664,
                    663
                ],
                "self._repr_fits_horizontal_": [
                    665
                ],
                "self._repr_fits_vertical_": [
                    665
                ],
                "self._info_repr": [
                    704,
                    673
                ],
                "self.info": [
                    706,
                    674
                ],
                "min_rows": [
                    678,
                    714,
                    689,
                    818,
                    733
                ],
                "max_cols": [
                    2211,
                    679,
                    715,
                    690,
                    820,
                    2231,
                    734
                ],
                "max_colwidth": [
                    680,
                    692,
                    805
                ],
                "show_dimensions": [
                    2212,
                    681,
                    716,
                    821,
                    693,
                    735
                ],
                "_": [
                    4320,
                    2026,
                    683,
                    7250,
                    3387
                ],
                "self.to_string": [
                    686
                ],
                "val": [
                    708,
                    709,
                    710
                ],
                "replace": [
                    708,
                    3932
                ],
                "val.replace": [
                    709
                ],
                "formatter": [
                    740,
                    806,
                    2218,
                    718,
                    2196,
                    825
                ],
                "fmt.DataFrameFormatter": [
                    806,
                    2196,
                    718
                ],
                "fmt": [
                    806,
                    718,
                    752,
                    2193,
                    2196,
                    2133,
                    761,
                    762
                ],
                "formatter.to_html": [
                    2218,
                    740
                ],
                "FilePathOrBuffer": [
                    1856,
                    755
                ],
                "Sequence": [
                    1864,
                    4137,
                    756,
                    4597,
                    758,
                    4540
                ],
                "Union": [
                    6464,
                    6465,
                    4137,
                    6103,
                    4597,
                    758,
                    4598,
                    4540,
                    4541,
                    6462
                ],
                "fmt.formatters_type": [
                    761
                ],
                "fmt.float_format_type": [
                    762
                ],
                "option_context": [
                    805
                ],
                "col_space": [
                    809,
                    2199
                ],
                "na_rep": [
                    2200,
                    810
                ],
                "formatters": [
                    2201,
                    811
                ],
                "float_format": [
                    2202,
                    812
                ],
                "sparsify": [
                    2203,
                    813
                ],
                "justify": [
                    2193,
                    2204,
                    814
                ],
                "index_names": [
                    1794,
                    1796,
                    815,
                    1780,
                    1813,
                    1783,
                    1785,
                    1787,
                    1788,
                    2205,
                    1790
                ],
                "header": [
                    816,
                    2206
                ],
                "decimal": [
                    2213,
                    822
                ],
                "line_width": [
                    823
                ],
                "formatter.to_string": [
                    825
                ],
                "encoding": [
                    825,
                    2223
                ],
                "Substitution": [
                    744,
                    5768,
                    7115,
                    2124,
                    3596,
                    752,
                    5904,
                    6545,
                    2133,
                    3606,
                    4662,
                    2015
                ],
                "fmt.common_docstring": [
                    752,
                    2133
                ],
                "fmt.return_docstring": [
                    752,
                    2133
                ],
                "Styler": [
                    843
                ],
                "_shared_docs": [
                    904,
                    5769,
                    5775,
                    5905,
                    6551,
                    4381,
                    4385,
                    4389,
                    4393,
                    6575,
                    6334,
                    845,
                    3537,
                    3922,
                    5593,
                    6237,
                    2016,
                    3941,
                    5623,
                    895
                ],
                "self.columns.is_unique": [
                    897,
                    2498,
                    3399,
                    6161,
                    1397
                ],
                "hasattr": [
                    897,
                    1604,
                    7821,
                    1654
                ],
                "self._get_item_cache": [
                    899,
                    2628,
                    2501,
                    2608,
                    2749
                ],
                "i": [
                    4352,
                    901,
                    902,
                    1799,
                    1800,
                    1655,
                    1674,
                    7950,
                    1785,
                    1658,
                    7327,
                    7329,
                    2467,
                    7332,
                    7335,
                    2474,
                    7341,
                    7342,
                    1842,
                    2482,
                    2484,
                    5050,
                    5053,
                    8288,
                    8289,
                    7912,
                    4081,
                    4082,
                    4339,
                    4340,
                    1783,
                    3449,
                    3450,
                    4349,
                    4350
                ],
                "enumerate": [
                    7328,
                    8289,
                    901,
                    1799,
                    1674,
                    3410,
                    4340,
                    1783,
                    3449,
                    4349,
                    7327
                ],
                "self._ixs": [
                    902
                ],
                "Appender": [
                    904,
                    5769,
                    5905,
                    3602,
                    3607,
                    6551,
                    4381,
                    4385,
                    4389,
                    4393,
                    5545,
                    6575,
                    2227,
                    4663,
                    6333,
                    7116,
                    2001,
                    3537,
                    3922,
                    5593,
                    2016,
                    3941,
                    3564,
                    895
                ],
                "Iterable": [
                    896,
                    4644,
                    905,
                    908,
                    4336
                ],
                "Hashable": [
                    896,
                    905,
                    4137,
                    908,
                    4140,
                    4141,
                    4049,
                    4597,
                    4086,
                    4540
                ],
                "self.items": [
                    1408,
                    906,
                    4653,
                    2318,
                    1424,
                    7250,
                    1406
                ],
                "klass": [
                    954,
                    2795,
                    956,
                    2796
                ],
                "self._constructor_sliced": [
                    954,
                    8131,
                    2471,
                    2601,
                    2795,
                    8140,
                    7834
                ],
                "v": [
                    1408,
                    8353,
                    3298,
                    3299,
                    1799,
                    1674,
                    1838,
                    1424,
                    7250,
                    1432,
                    1626,
                    955,
                    956,
                    1629,
                    1406,
                    8351
                ],
                "zip": [
                    2436,
                    1036,
                    1773,
                    4654,
                    1039,
                    7533,
                    1428,
                    4342,
                    3449,
                    955,
                    2686,
                    1439
                ],
                "self.values": [
                    2432,
                    5126,
                    3527,
                    2440,
                    5127,
                    7818,
                    7910,
                    7948,
                    3438,
                    1135,
                    2582,
                    5111,
                    5112,
                    1305,
                    8310,
                    955,
                    7774
                ],
                "s": [
                    7237,
                    7238,
                    7239,
                    8047,
                    956,
                    957,
                    8350,
                    8351
                ],
                "fields": [
                    1024,
                    1035,
                    1027
                ],
                "arrays.append": [
                    4097,
                    1026,
                    4100,
                    4104,
                    4082,
                    4084,
                    4090,
                    1629,
                    4094
                ],
                "fields.insert": [
                    1027
                ],
                "arrays.extend": [
                    1030
                ],
                "self.iloc": [
                    8288,
                    2693,
                    1030,
                    2760,
                    3208,
                    2669,
                    2681
                ],
                "range": [
                    7769,
                    4081,
                    4089,
                    1030
                ],
                "can_return_named_tuples": [
                    1033,
                    1034
                ],
                "PY37": [
                    1033
                ],
                "name": [
                    4352,
                    1825,
                    1826,
                    4354,
                    4359,
                    1034,
                    1035,
                    4653,
                    4367,
                    4370,
                    1843,
                    1813,
                    1817,
                    7707,
                    1790
                ],
                "itertuple": [
                    1035,
                    1036
                ],
                "collections.namedtuple": [
                    1035
                ],
                "collections": [
                    1035,
                    8284
                ],
                "map": [
                    1417,
                    1036,
                    1773,
                    4654,
                    7533
                ],
                "itertuple._make": [
                    1036
                ],
                "other": [
                    5121,
                    1155,
                    5124,
                    6917,
                    6918,
                    5255,
                    6920,
                    1161,
                    5257,
                    5514,
                    5260,
                    5515,
                    5390,
                    1167,
                    5263,
                    5264,
                    5517,
                    5267,
                    5521,
                    6923,
                    6927,
                    6928,
                    5272,
                    6930,
                    7059,
                    7068,
                    7069,
                    7071,
                    7073,
                    7076,
                    6921,
                    6903,
                    6904,
                    7090,
                    6922,
                    7503,
                    7504,
                    7506,
                    7507,
                    5112,
                    3552,
                    1124,
                    1125,
                    1126,
                    1130,
                    6892,
                    6893,
                    1136,
                    6896,
                    5106,
                    6897,
                    5108,
                    1142,
                    5111,
                    1144,
                    1146,
                    7547,
                    6909,
                    6910,
                    5119
                ],
                "common": [
                    1129,
                    1130,
                    1125,
                    1126
                ],
                "self.columns.union": [
                    1125
                ],
                "other.index": [
                    6904,
                    1125,
                    1126,
                    5255
                ],
                "left": [
                    1153,
                    7523,
                    7519,
                    1129,
                    1131,
                    7533,
                    1134,
                    5103,
                    5104,
                    7515,
                    7507,
                    7510,
                    1144,
                    1147,
                    7516,
                    1151
                ],
                "self.reindex": [
                    1129,
                    2579,
                    6916
                ],
                "right": [
                    7136,
                    7520,
                    7523,
                    1130,
                    1132,
                    7533,
                    5103,
                    5104,
                    7507,
                    7511,
                    7515,
                    7516
                ],
                "other.reindex": [
                    1130,
                    6923,
                    6910
                ],
                "lvals": [
                    1131,
                    1135,
                    1137,
                    1139,
                    1144,
                    1147,
                    1149
                ],
                "left.values": [
                    1131,
                    7533
                ],
                "rvals": [
                    1132,
                    1136,
                    1137,
                    1139,
                    1144,
                    1147,
                    1148,
                    1149
                ],
                "right.values": [
                    1132,
                    7533
                ],
                "np.asarray": [
                    1136,
                    3404
                ],
                "lvals.shape": [
                    1137,
                    1139
                ],
                "rvals.shape": [
                    1137,
                    1139
                ],
                "self._constructor": [
                    2435,
                    2443,
                    2701,
                    5142,
                    2583,
                    8217,
                    7460,
                    7725,
                    7350,
                    6455,
                    8130,
                    5315,
                    3529,
                    8138,
                    4815,
                    7255,
                    2787,
                    4712,
                    8181,
                    1143,
                    1151
                ],
                "np.dot": [
                    1144,
                    1147,
                    1149
                ],
                "left.index": [
                    1144,
                    1153,
                    1147,
                    1151
                ],
                "other.columns": [
                    1144,
                    6922,
                    5267
                ],
                "result": [
                    7694,
                    7698,
                    2579,
                    2580,
                    7700,
                    5142,
                    2583,
                    6167,
                    6168,
                    2586,
                    6169,
                    6170,
                    6172,
                    2594,
                    2595,
                    2599,
                    2600,
                    2601,
                    2602,
                    2605,
                    2606,
                    7776,
                    7782,
                    7801,
                    7802,
                    7803,
                    7804,
                    1149,
                    1150,
                    1151,
                    1153,
                    7809,
                    7819,
                    7821,
                    7824,
                    7825,
                    7826,
                    5269,
                    7831,
                    7834,
                    7835,
                    5283,
                    5312,
                    5315,
                    7912,
                    7913,
                    2317,
                    7950,
                    7951,
                    2322,
                    2323,
                    2325,
                    1305,
                    1306,
                    3446,
                    3448,
                    3450,
                    3452,
                    3453,
                    3455,
                    2435,
                    2443,
                    2447,
                    6555,
                    6557,
                    6560,
                    6562,
                    2471,
                    6568,
                    6569,
                    6570,
                    2477,
                    2478,
                    5041,
                    4531,
                    2485,
                    4534,
                    5045,
                    2488,
                    4536,
                    2490,
                    5049,
                    5050,
                    5052,
                    5053,
                    5054,
                    8133,
                    8137,
                    8138,
                    8140,
                    8143,
                    8145,
                    5076,
                    5079,
                    5080,
                    5082,
                    5083,
                    5084,
                    7645,
                    7650,
                    2023,
                    7655,
                    2025,
                    7657,
                    4587,
                    2028,
                    4590,
                    4591
                ],
                "result.ndim": [
                    8137,
                    7802,
                    1150
                ],
                "type": [
                    2945,
                    1155,
                    1839,
                    8307,
                    4313,
                    4063
                ],
                "self.dot": [
                    1161
                ],
                "T": [
                    3375,
                    1167,
                    2449,
                    6579,
                    7322,
                    3357,
                    6910
                ],
                "self.T.dot": [
                    1167
                ],
                "self.T": [
                    6568,
                    6579,
                    1167
                ],
                "np.transpose": [
                    1167
                ],
                "orient": [
                    1409,
                    1443,
                    1423,
                    1425,
                    1405,
                    1237,
                    1238,
                    1435,
                    1245,
                    1407
                ],
                "orient.lower": [
                    1409,
                    1423,
                    1425,
                    1237,
                    1435,
                    1405,
                    1407
                ],
                "data.values": [
                    1241,
                    7809,
                    1244,
                    7815
                ],
                "_from_nested_dict": [
                    1242
                ],
                "data.keys": [
                    1244
                ],
                "cls": [
                    1601,
                    1251,
                    1681,
                    1851,
                    1596
                ],
                "classmethod": [
                    1848,
                    1553,
                    1172
                ],
                "warnings.warn": [
                    2556,
                    7708,
                    1398
                ],
                "warnings": [
                    2556,
                    7708,
                    1398
                ],
                "UserWarning": [
                    1400,
                    2558
                ],
                "into_c": [
                    1408,
                    1410,
                    1438,
                    1424,
                    1432,
                    1404,
                    1406
                ],
                "com.standardize_mapping": [
                    1404
                ],
                "com": [
                    2626,
                    3299,
                    1417,
                    3373,
                    1424,
                    2673,
                    2515,
                    2647,
                    1432,
                    1404,
                    2494
                ],
                "into": [
                    1404,
                    1406
                ],
                "startswith": [
                    1409,
                    1423,
                    1425,
                    1435,
                    1405,
                    1407
                ],
                "v.to_dict": [
                    1406
                ],
                "v.tolist": [
                    1408
                ],
                "self.index.tolist": [
                    1412
                ],
                "self.columns.tolist": [
                    1426,
                    1413
                ],
                "com.maybe_box_datetimelike": [
                    1424,
                    1417,
                    2626,
                    1432
                ],
                "t": [
                    1440,
                    1417,
                    1418,
                    1439
                ],
                "self.itertuples": [
                    1440,
                    1418,
                    1429
                ],
                "rows": [
                    1433,
                    1427
                ],
                "row": [
                    2434,
                    1428,
                    1429,
                    1432,
                    1433
                ],
                "row.items": [
                    1432
                ],
                "self.index.is_unique": [
                    1436
                ],
                "gbq.to_gbq": [
                    1539
                ],
                "gbq": [
                    1539
                ],
                "destination_table": [
                    1541
                ],
                "project_id": [
                    1542
                ],
                "chunksize": [
                    1543
                ],
                "reauth": [
                    1544
                ],
                "if_exists": [
                    1545
                ],
                "auth_local_webserver": [
                    1546
                ],
                "table_schema": [
                    1547
                ],
                "location": [
                    1548
                ],
                "progress_bar": [
                    1549
                ],
                "credentials": [
                    1550
                ],
                "is_iterator": [
                    2529,
                    1594
                ],
                "nrows": [
                    1609,
                    1595,
                    1612
                ],
                "first_row": [
                    1604,
                    1605,
                    1607,
                    1599
                ],
                "next": [
                    1599
                ],
                "StopIteration": [
                    1600
                ],
                "first_row.dtype.names": [
                    1604
                ],
                "first_row.dtype": [
                    1604,
                    1605
                ],
                "values.extend": [
                    1612
                ],
                "itertools.islice": [
                    1612
                ],
                "itertools": [
                    1612,
                    1790
                ],
                "arr_columns": [
                    1637,
                    1639,
                    1672,
                    1641,
                    1673,
                    1676,
                    1645,
                    1663,
                    1679,
                    1621,
                    1625,
                    1628,
                    1631
                ],
                "sorted": [
                    1621
                ],
                "data.items": [
                    1626,
                    8350
                ],
                "arr_columns.append": [
                    1628
                ],
                "reorder_arrays": [
                    1631
                ],
                "coerce_float": [
                    1639
                ],
                "exclude": [
                    3202,
                    3172,
                    1669,
                    3173,
                    1671,
                    1672,
                    3177,
                    3178,
                    3204,
                    1677,
                    1647,
                    1648,
                    1650,
                    1656,
                    3162,
                    3163,
                    3165
                ],
                "set": [
                    1648,
                    1650,
                    4124
                ],
                "result_index": [
                    1666,
                    1668,
                    1679,
                    1652,
                    7548,
                    1658,
                    7547,
                    1660
                ],
                "columns.get_loc": [
                    1655
                ],
                "exclude.add": [
                    1656
                ],
                "index_data": [
                    1668,
                    1663
                ],
                "arr_columns.get_loc": [
                    1673,
                    1663
                ],
                "field": [
                    1663
                ],
                "KeyError": [
                    1664,
                    7233,
                    4514,
                    2757,
                    4069,
                    2634,
                    4651,
                    3442,
                    3444
                ],
                "ensure_index_from_sequences": [
                    1668,
                    4117
                ],
                "exclude.update": [
                    1669
                ],
                "any": [
                    1671,
                    3441,
                    3443,
                    5529,
                    3167
                ],
                "arr_exclude": [
                    1672,
                    1673,
                    1676
                ],
                "x": [
                    5376,
                    3171,
                    3172,
                    5380,
                    6789,
                    6790,
                    1672,
                    6791,
                    7530,
                    4686,
                    7504,
                    7728,
                    7706
                ],
                "to_remove": [
                    1673,
                    1674,
                    4107,
                    4086,
                    4124
                ],
                "col": [
                    4096,
                    4097,
                    4099,
                    4100,
                    4104,
                    1673,
                    4105,
                    4107,
                    2318,
                    5519,
                    5520,
                    5521,
                    5270,
                    5271,
                    5272,
                    8351,
                    8352,
                    8353,
                    5283,
                    5541,
                    5292,
                    4653,
                    2745,
                    2749,
                    7230,
                    5312,
                    2625,
                    7232,
                    2628,
                    2760,
                    2762,
                    2763,
                    2642,
                    4050,
                    2644,
                    4052,
                    4056,
                    4061,
                    4063,
                    8288,
                    8289,
                    4066,
                    4087,
                    4088,
                    4089,
                    4090,
                    4091,
                    4092,
                    4094,
                    4095
                ],
                "arr_columns.drop": [
                    1676
                ],
                "columns.drop": [
                    1677
                ],
                "ABCMultiIndex": [
                    3399,
                    4778,
                    1771,
                    5052,
                    2544,
                    4080,
                    4337,
                    5073,
                    5079,
                    5045,
                    1782,
                    3350,
                    4088,
                    5049,
                    5082,
                    7668,
                    4348
                ],
                "ix_vals": [
                    1777,
                    1773,
                    1775
                ],
                "self.index.values": [
                    1773,
                    1775
                ],
                "_internal_get_values": [
                    1792,
                    1777
                ],
                "c": [
                    1792,
                    1793,
                    7334,
                    7336,
                    7338,
                    7340,
                    7341,
                    2318,
                    7342,
                    7533,
                    1777,
                    3449,
                    3450,
                    4124,
                    4125
                ],
                "count": [
                    4517,
                    4520,
                    4522,
                    4524,
                    1779,
                    1785,
                    1786
                ],
                "self.index.names": [
                    4340,
                    1780,
                    4079
                ],
                "n": [
                    5025,
                    3448,
                    3432,
                    3433,
                    3437,
                    4339,
                    4340,
                    1783,
                    1784,
                    4089,
                    4090,
                    4924
                ],
                "names": [
                    4352,
                    1793,
                    4098,
                    4101,
                    4105,
                    4077,
                    4079,
                    4338,
                    4117,
                    1846,
                    4345,
                    4091,
                    1790,
                    4095
                ],
                "itertools.chain": [
                    1790
                ],
                "index_len": [
                    1842,
                    1811,
                    1796,
                    1815
                ],
                "formats": [
                    1840,
                    1846,
                    1797,
                    1838
                ],
                "dtype_mapping": [
                    1824,
                    1825,
                    1826,
                    1827,
                    1828,
                    1830,
                    1837,
                    1839,
                    1840,
                    1843,
                    1812,
                    1816
                ],
                "index_dtypes": [
                    1812
                ],
                "column_dtypes": [
                    1816
                ],
                "is_dict_like": [
                    1824
                ],
                "formats.append": [
                    1840,
                    1838
                ],
                "v.dtype": [
                    1838
                ],
                "np.dtype": [
                    1839
                ],
                "element": [
                    1842,
                    1843
                ],
                "msg": [
                    7744,
                    2945,
                    2946,
                    1843,
                    1844,
                    7740
                ],
                "np.rec.fromarrays": [
                    1846
                ],
                "np.rec": [
                    1846
                ],
                "np.recarray": [
                    1685
                ],
                "Dict": [
                    1857,
                    1965,
                    1862
                ],
                "Label": [
                    1864,
                    1857,
                    1862
                ],
                "datetime.datetime": [
                    1860
                ],
                "datetime": [
                    1860
                ],
                "version": [
                    1952,
                    1954,
                    1958,
                    1966,
                    1969,
                    1971
                ],
                "convert_strl": [
                    1968,
                    1955
                ],
                "kwargs": [
                    2947,
                    2948,
                    2949,
                    3075,
                    3076,
                    3077,
                    3079,
                    6557,
                    6561,
                    3620,
                    3621,
                    3623,
                    3624,
                    3625,
                    6568,
                    6571,
                    1965,
                    1968,
                    1971,
                    6579,
                    6580,
                    1983,
                    2121,
                    7241,
                    3298,
                    2020,
                    2021,
                    2023,
                    3069,
                    3070
                ],
                "Any": [
                    4336,
                    1965
                ],
                "writer": [
                    1985,
                    1974
                ],
                "statawriter": [
                    1974
                ],
                "path": [
                    1999,
                    2116,
                    1975
                ],
                "convert_dates": [
                    1977
                ],
                "byteorder": [
                    1978
                ],
                "time_stamp": [
                    1979
                ],
                "data_label": [
                    1980
                ],
                "write_index": [
                    1981
                ],
                "variable_labels": [
                    1982
                ],
                "writer.write_file": [
                    1985
                ],
                "deprecate_kwarg": [
                    1987,
                    1853,
                    2031
                ],
                "to_feather": [
                    1999
                ],
                "IO": [
                    2018
                ],
                "kwargs.setdefault": [
                    2020,
                    2021
                ],
                "tabulate": [
                    2022,
                    2023
                ],
                "import_optional_dependency": [
                    2022
                ],
                "tabulate.tabulate": [
                    2023
                ],
                "get_filepath_or_buffer": [
                    2026
                ],
                "mode": [
                    2026
                ],
                "buf.writelines": [
                    2028
                ],
                "to_parquet": [
                    2114
                ],
                "engine": [
                    2629,
                    2117,
                    2632,
                    2750,
                    2751
                ],
                "compression": [
                    2118
                ],
                "partition_cols": [
                    2120
                ],
                "fmt._VALID_JUSTIFY_PARAMETERS": [
                    2193
                ],
                "bold_rows": [
                    2208
                ],
                "escape": [
                    2209
                ],
                "table_id": [
                    2214
                ],
                "render_links": [
                    2215
                ],
                "classes": [
                    2220
                ],
                "notebook": [
                    2221
                ],
                "border": [
                    2222
                ],
                "info": [
                    2227,
                    2231
                ],
                "verbose": [
                    2231
                ],
                "memory_usage": [
                    2231
                ],
                "null_counts": [
                    2231
                ],
                "info.__doc__": [
                    2227
                ],
                "c.memory_usage": [
                    2318
                ],
                "deep": [
                    2322,
                    2318
                ],
                "append": [
                    2322,
                    6908,
                    4078
                ],
                "self.index.memory_usage": [
                    2322
                ],
                "nv.validate_transpose": [
                    2424
                ],
                "nv": [
                    2424,
                    7241
                ],
                "args": [
                    6561,
                    3620,
                    6725,
                    6568,
                    7241,
                    6571,
                    6579,
                    6580,
                    2424,
                    6557
                ],
                "dtypes": [
                    3173,
                    3174,
                    2427,
                    2428,
                    2430
                ],
                "self.dtypes": [
                    3200,
                    3206,
                    7706,
                    7831,
                    3194,
                    2427
                ],
                "self._is_homogeneous_type": [
                    2428
                ],
                "is_extension_array_dtype": [
                    5369,
                    3394,
                    2428
                ],
                "arr_type": [
                    2434,
                    2431
                ],
                "dtype.construct_array_type": [
                    2431
                ],
                "new_values": [
                    2434,
                    2467,
                    2436,
                    2470,
                    3526,
                    2440,
                    2472,
                    2442,
                    2475,
                    2444,
                    3529,
                    2582,
                    2584
                ],
                "arr_type._from_sequence": [
                    2434
                ],
                "self.values.T": [
                    2440
                ],
                "new_values.copy": [
                    2442
                ],
                "result.__finalize__": [
                    2586,
                    2447
                ],
                "transpose": [
                    2449
                ],
                "axis": [
                    7681,
                    8207,
                    7696,
                    8208,
                    8211,
                    3604,
                    8215,
                    7718,
                    7723,
                    7724,
                    7728,
                    7736,
                    6722,
                    4675,
                    7747,
                    7751,
                    7753,
                    4686,
                    4693,
                    4703,
                    7778,
                    7787,
                    7810,
                    7816,
                    7830,
                    4766,
                    4767,
                    3761,
                    4803,
                    7875,
                    7909,
                    7910,
                    7911,
                    7913,
                    7947,
                    7948,
                    7949,
                    7951,
                    6453,
                    3896,
                    3916,
                    7500,
                    7504,
                    7509,
                    3944,
                    8049,
                    7546,
                    4501,
                    4505,
                    4506,
                    6553,
                    6557,
                    6561,
                    2466,
                    6565,
                    6577,
                    6578,
                    4531,
                    5043,
                    5045,
                    5048,
                    8120,
                    8121,
                    5072,
                    5073,
                    7634,
                    7636,
                    5078,
                    7644,
                    7645,
                    3554,
                    7650,
                    7653,
                    7655,
                    5609,
                    8171,
                    8172,
                    5614,
                    8175,
                    7665,
                    7666,
                    8179,
                    7670
                ],
                "self._data.fast_xs": [
                    2467
                ],
                "new_values.base": [
                    2470
                ],
                "new_values.dtype": [
                    2475
                ],
                "result._set_is_copy": [
                    2605,
                    2477
                ],
                "label": [
                    2488,
                    2482,
                    2485
                ],
                "self._data.iget": [
                    3409,
                    2484
                ],
                "self._box_col_values": [
                    2789,
                    2485
                ],
                "result._set_as_cached": [
                    2488
                ],
                "key": [
                    2561,
                    2690,
                    2563,
                    2568,
                    2569,
                    2698,
                    2699,
                    2701,
                    2574,
                    2703,
                    2577,
                    2710,
                    3350,
                    3351,
                    3353,
                    2723,
                    2724,
                    2602,
                    2608,
                    2493,
                    2494,
                    2496,
                    2498,
                    2500,
                    2501,
                    3398,
                    2504,
                    3400,
                    2511,
                    2512,
                    2515,
                    2516,
                    6483,
                    2647,
                    2520,
                    2650,
                    2524,
                    2525,
                    2656,
                    2529,
                    2530,
                    2531,
                    2657,
                    2658,
                    2659,
                    2662,
                    2785,
                    2669,
                    2545,
                    2673,
                    2674,
                    2676,
                    2678,
                    2679,
                    2555,
                    2684,
                    2686
                ],
                "lib.item_from_zerodim": [
                    2493
                ],
                "lib": [
                    6790,
                    4294,
                    6791,
                    7692,
                    3453,
                    2493
                ],
                "com.apply_if_callable": [
                    3299,
                    2494,
                    2647
                ],
                "is_hashable": [
                    2496
                ],
                "self.columns.nlevels": [
                    2499,
                    4356,
                    4365,
                    2523
                ],
                "self._getitem_multilevel": [
                    2524,
                    2500
                ],
                "indexer": [
                    2689,
                    2693,
                    2569,
                    2570,
                    3487,
                    3491,
                    4774,
                    4781,
                    3507,
                    3511,
                    4799,
                    4804,
                    3525,
                    3527,
                    2504,
                    2505,
                    4810,
                    2508,
                    4687,
                    4688,
                    2650,
                    2651,
                    4698,
                    2525,
                    2654,
                    2526,
                    2527,
                    4703,
                    2531,
                    4707,
                    2534,
                    2535,
                    2537,
                    2679,
                    2681
                ],
                "convert_to_index_sliceable": [
                    2504,
                    2650
                ],
                "self._slice": [
                    2508
                ],
                "self.where": [
                    2512
                ],
                "com.is_bool_indexer": [
                    2673,
                    2515
                ],
                "self._getitem_bool_array": [
                    2516
                ],
                "is_single_key": [
                    2520,
                    2522,
                    2539
                ],
                "tuple": [
                    4354,
                    2596,
                    3077,
                    4329,
                    4367,
                    6159,
                    6927,
                    6098,
                    4501,
                    3190,
                    4695,
                    2520,
                    4638
                ],
                "self.columns.get_loc": [
                    2785,
                    2574,
                    2642,
                    3351,
                    2525
                ],
                "is_integer": [
                    7248,
                    2526
                ],
                "self.loc._get_listlike_indexer": [
                    2689,
                    2531
                ],
                "self.loc": [
                    2689,
                    2531,
                    2952,
                    2762,
                    4531
                ],
                "np.where": [
                    2535
                ],
                "self._take_with_is_copy": [
                    2537,
                    2570
                ],
                "data.shape": [
                    2544
                ],
                "key.index.equals": [
                    2555
                ],
                "key.index": [
                    2555
                ],
                "check_bool_indexer": [
                    2568,
                    2678
                ],
                "key.nonzero": [
                    2569,
                    2679
                ],
                "loc": [
                    2754,
                    2632,
                    2633,
                    2574,
                    2575,
                    2576,
                    2582,
                    3351,
                    3352,
                    3353,
                    3228,
                    2751
                ],
                "slice": [
                    2664,
                    3352,
                    2693,
                    2575
                ],
                "new_columns": [
                    3522,
                    5315,
                    3529,
                    3532,
                    2576,
                    2577,
                    2579,
                    3508,
                    3507,
                    5267,
                    3511,
                    5270
                ],
                "result_columns": [
                    2584,
                    2577,
                    2580
                ],
                "maybe_droplevels": [
                    2577,
                    3353
                ],
                "self._is_mixed_type": [
                    2578,
                    3437
                ],
                "result.columns": [
                    2594,
                    2595,
                    2580,
                    5082,
                    5083,
                    5052,
                    5053
                ],
                "top": [
                    2595,
                    2596,
                    2597,
                    2598
                ],
                "takeable": [
                    2624,
                    2744,
                    2759
                ],
                "series": [
                    2752,
                    2625,
                    2626,
                    2754,
                    2628,
                    5305,
                    5274,
                    5287,
                    2633,
                    5289,
                    5297,
                    5277,
                    5271,
                    2745,
                    2746,
                    2749,
                    5309
                ],
                "self._iget_item_cache": [
                    2625,
                    2745
                ],
                "series._values": [
                    2754,
                    2633,
                    2626
                ],
                "self.index._engine": [
                    2629,
                    2750
                ],
                "engine.get_loc": [
                    2632,
                    2751
                ],
                "self.index.nlevels": [
                    4081,
                    2636,
                    4332
                ],
                "self.index.get_loc": [
                    2643
                ],
                "self._get_value": [
                    3450,
                    2644
                ],
                "self._setitem_slice": [
                    2654
                ],
                "self._setitem_frame": [
                    2657
                ],
                "self._setitem_array": [
                    2659
                ],
                "self._set_item": [
                    2662
                ],
                "self._check_setitem_copy": [
                    2692,
                    2730,
                    2668,
                    2709,
                    2680
                ],
                "self.iloc._setitem_with_indexer": [
                    2681,
                    2669,
                    2693
                ],
                "value.columns": [
                    3354,
                    2684,
                    2686
                ],
                "k1": [
                    2686,
                    2687
                ],
                "k2": [
                    2686,
                    2687
                ],
                "key.shape": [
                    2699
                ],
                "self.shape": [
                    8310,
                    2699,
                    3182
                ],
                "self._construct_axes_dict": [
                    2701
                ],
                "key.values.size": [
                    2703
                ],
                "key.values": [
                    2703
                ],
                "is_bool_dtype": [
                    2703
                ],
                "self._check_inplace_setting": [
                    2708
                ],
                "self._where": [
                    2710
                ],
                "self._ensure_valid_index": [
                    2722,
                    3226
                ],
                "self._sanitize_column": [
                    2723,
                    3227
                ],
                "NDFrame._set_item": [
                    2724
                ],
                "series._set_value": [
                    2746
                ],
                "validate_numeric_casting": [
                    2752
                ],
                "series.dtype": [
                    2752,
                    5274
                ],
                "self._item_cache.pop": [
                    2763
                ],
                "self._item_cache": [
                    2763
                ],
                "self._data.reindex_axis": [
                    2780
                ],
                "value.index.copy": [
                    2781
                ],
                "value.index": [
                    3325,
                    2781,
                    3334
                ],
                "np.nan": [
                    4320,
                    7334,
                    7912,
                    7950,
                    4304,
                    7453,
                    3483,
                    2781,
                    3614,
                    7551
                ],
                "items": [
                    2785,
                    2787,
                    2796,
                    2789
                ],
                "values.ndim": [
                    2786,
                    7758
                ],
                "values.T": [
                    2787
                ],
                "inplace": [
                    3079,
                    2958,
                    3604,
                    4373,
                    4500,
                    4764,
                    4132,
                    3765,
                    4533,
                    3898,
                    4794,
                    4284,
                    4285,
                    4674,
                    4039,
                    4812,
                    3917,
                    3935,
                    4576,
                    4579,
                    4709,
                    4071,
                    3068,
                    2943
                ],
                "validate_bool_kwarg": [
                    4576,
                    4764,
                    4674,
                    4039,
                    4284,
                    4500,
                    3068,
                    2943
                ],
                "expr": [
                    2944,
                    2945,
                    2949,
                    3079
                ],
                "kwargs.pop": [
                    2947,
                    3623,
                    3624,
                    3069,
                    3070
                ],
                "res": [
                    2949,
                    2952,
                    2956,
                    7769,
                    7765,
                    7766,
                    7767,
                    7768,
                    7097,
                    7100
                ],
                "self.eval": [
                    2949
                ],
                "new_data": [
                    5121,
                    5126,
                    5127,
                    2952,
                    5128,
                    8203,
                    2956,
                    8205,
                    2959,
                    2961,
                    8210,
                    8213,
                    8217,
                    8349,
                    8352,
                    8353,
                    8354,
                    6454,
                    6455,
                    4804,
                    4807,
                    4810,
                    4813,
                    4815,
                    4702,
                    4707,
                    4581,
                    4710,
                    8167,
                    4584,
                    4585,
                    4712,
                    8169,
                    8174,
                    8177,
                    5108,
                    8181,
                    5112,
                    5114
                ],
                "self._update_inplace": [
                    4710,
                    4585,
                    4813,
                    2959,
                    4534
                ],
                "resolvers": [
                    3074,
                    3069,
                    3077,
                    3071
                ],
                "index_resolvers": [
                    3072,
                    3074
                ],
                "self._get_index_resolvers": [
                    3072
                ],
                "column_resolvers": [
                    3073,
                    3074
                ],
                "self._get_cleaned_column_resolvers": [
                    3073
                ],
                "kwargs.get": [
                    3077
                ],
                "_eval": [
                    3079
                ],
                "include": [
                    3171,
                    3173,
                    3177,
                    3178,
                    3160,
                    3161,
                    3196,
                    3165,
                    3198
                ],
                "selection": [
                    3165,
                    3167
                ],
                "infer_dtype_from_object": [
                    3171,
                    3172
                ],
                "invalidate_string_dtypes": [
                    3174
                ],
                "include.isdisjoint": [
                    3177
                ],
                "keep_these": [
                    3200,
                    3206,
                    3208,
                    3182
                ],
                "np.full": [
                    3182
                ],
                "extracted_dtypes": [
                    3192,
                    3187
                ],
                "unique_dtype": [
                    3188,
                    3189,
                    3190
                ],
                "unique_dtypes": [
                    3194,
                    3204,
                    3189,
                    3198
                ],
                "issubclass": [
                    4322,
                    4316,
                    3190
                ],
                "unique_dtype.type": [
                    3190
                ],
                "dtypes_set": [
                    3190
                ],
                "self.dtypes.unique": [
                    3194
                ],
                "included_dtypes": [
                    3200,
                    3197
                ],
                "extract_unique_dtypes_from_dtypes_set": [
                    3203,
                    3197
                ],
                "self.dtypes.isin": [
                    3200,
                    3206
                ],
                "excluded_dtypes": [
                    3203,
                    3206
                ],
                "keep_these.values": [
                    3208
                ],
                "column": [
                    6159,
                    6167,
                    6168,
                    3227,
                    3228
                ],
                "self._data.insert": [
                    3228
                ],
                "allow_duplicates": [
                    3228
                ],
                "self.copy": [
                    3296,
                    4288,
                    4074,
                    5261,
                    5041,
                    5076,
                    4797,
                    4574
                ],
                "kwargs.items": [
                    3298
                ],
                "value.index.equals": [
                    3325
                ],
                "value._values.copy": [
                    3326
                ],
                "value._values": [
                    3326
                ],
                "_values": [
                    4104,
                    5521,
                    3331,
                    5520
                ],
                "value.reindex": [
                    3355,
                    3331
                ],
                "value.index.is_unique": [
                    3334
                ],
                "reindexer": [
                    3345,
                    3357
                ],
                "cols": [
                    7456,
                    8128,
                    8130,
                    7715,
                    7460,
                    7716,
                    8131,
                    7311,
                    7312,
                    7447,
                    7350,
                    7446,
                    3353,
                    3354,
                    3355,
                    7324
                ],
                "cols.equals": [
                    3354
                ],
                "value.copy": [
                    3377,
                    3362,
                    3379,
                    3375
                ],
                "sanitize_index": [
                    3368,
                    3363
                ],
                "is_sequence": [
                    3365,
                    4679
                ],
                "maybe_convert_platform": [
                    3371
                ],
                "com.asarray_tuplesafe": [
                    3373
                ],
                "value.ndim": [
                    3398,
                    3374
                ],
                "is_object_dtype": [
                    7778,
                    3452,
                    7821,
                    3382
                ],
                "value.dtype": [
                    3382
                ],
                "maybe_infer_to_datetimelike": [
                    3383
                ],
                "infer_dtype": [
                    3387,
                    3391
                ],
                "infer_dtype_from_scalar": [
                    3387
                ],
                "maybe_cast_to_datetime": [
                    3391
                ],
                "broadcast": [
                    3398
                ],
                "existing_piece": [
                    3400,
                    3401,
                    3402
                ],
                "np.tile": [
                    3402
                ],
                "existing_piece.columns": [
                    3402
                ],
                "np.atleast_2d": [
                    3404
                ],
                "item": [
                    3409,
                    3410
                ],
                "idx": [
                    7460,
                    7312,
                    3409,
                    3410,
                    7350,
                    7447
                ],
                "row_labels": [
                    3432,
                    3449,
                    3439
                ],
                "col_labels": [
                    3440,
                    3433,
                    3449
                ],
                "thresh": [
                    4520,
                    3436,
                    3437,
                    4519
                ],
                "ridx": [
                    3441,
                    3445,
                    3439
                ],
                "self.index.get_indexer": [
                    3439
                ],
                "cidx": [
                    3440,
                    3443,
                    3445
                ],
                "self.columns.get_indexer": [
                    3440,
                    6922
                ],
                "flat_index": [
                    3445,
                    3446
                ],
                "values.flat": [
                    3446
                ],
                "np.empty": [
                    3448,
                    7452,
                    7325,
                    4303
                ],
                "r": [
                    3449,
                    3450
                ],
                "lib.maybe_convert_objects": [
                    3453,
                    4294
                ],
                "frame": [
                    3461,
                    4104,
                    3465,
                    3471,
                    3475,
                    4125,
                    4130,
                    4133,
                    7108,
                    7110,
                    7639,
                    7641,
                    7644,
                    7645,
                    7647,
                    7650,
                    7653,
                    7655,
                    4072,
                    4074,
                    7661,
                    7663,
                    7665,
                    7666,
                    7673,
                    7676,
                    7679
                ],
                "axes": [
                    3521,
                    3522,
                    3620,
                    3621,
                    3463,
                    3469
                ],
                "frame._reindex_columns": [
                    3465
                ],
                "method": [
                    3488,
                    3938,
                    3558,
                    7527,
                    3466,
                    3915,
                    7530,
                    3472,
                    7504,
                    7538,
                    7315,
                    3508,
                    7317,
                    7347,
                    7319,
                    7513,
                    7323
                ],
                "level": [
                    7686,
                    7687,
                    7689,
                    3466,
                    7690,
                    7691,
                    3472,
                    3488,
                    4772,
                    4775,
                    3508,
                    3764,
                    3899,
                    6098,
                    6099,
                    7635,
                    6101,
                    7636,
                    6235,
                    3555,
                    5607,
                    4328,
                    4329,
                    4330,
                    4331,
                    4332,
                    4333,
                    5615,
                    4350
                ],
                "limit": [
                    3488,
                    3936,
                    3559,
                    3466,
                    3918,
                    3472,
                    3508
                ],
                "tolerance": [
                    3472,
                    3466,
                    3508,
                    3488
                ],
                "frame._reindex_index": [
                    3471
                ],
                "new_index": [
                    3488,
                    3521,
                    3491,
                    5315,
                    4327,
                    3529,
                    5258,
                    3532,
                    4333,
                    5260,
                    4372,
                    3487
                ],
                "self.index.reindex": [
                    3521,
                    3487
                ],
                "self._reindex_with_indexers": [
                    3490,
                    3531,
                    3510
                ],
                "self.columns.reindex": [
                    3522,
                    3507
                ],
                "row_indexer": [
                    3521,
                    3532,
                    3524,
                    3525
                ],
                "col_indexer": [
                    3522,
                    3532,
                    3524,
                    3525
                ],
                "algorithms.take_2d_multi": [
                    3526
                ],
                "algorithms": [
                    5024,
                    3526,
                    4628,
                    8310,
                    4924
                ],
                "align": [
                    3551
                ],
                "super": [
                    4387,
                    4383,
                    4391,
                    3944,
                    3625,
                    3913,
                    4395,
                    6571,
                    3759,
                    3892,
                    3604,
                    6580,
                    3932,
                    3551
                ],
                "join": [
                    6168,
                    3553,
                    5509
                ],
                "fill_axis": [
                    3560
                ],
                "broadcast_axis": [
                    3561
                ],
                "set_axis": [
                    3604
                ],
                "labels": [
                    7810,
                    7816,
                    3604,
                    4628,
                    4631,
                    7834,
                    4767,
                    4771,
                    4774,
                    7719,
                    4778,
                    7724,
                    4654,
                    4782,
                    3760,
                    4656,
                    4791,
                    4792,
                    4800,
                    4297,
                    4298,
                    4306
                ],
                "NDFrame.set_axis.__doc__": [
                    3602
                ],
                "NDFrame.set_axis": [
                    3602
                ],
                "validate_axis_style_args": [
                    3620
                ],
                "kwargs.update": [
                    3621
                ],
                "self._ensure_type": [
                    3625,
                    8285,
                    3943
                ],
                "reindex": [
                    3625
                ],
                "NDFrame.reindex.__doc__": [
                    3607
                ],
                "NDFrame.reindex": [
                    3607
                ],
                "rewrite_axis_style_signature": [
                    3608,
                    3769
                ],
                "drop": [
                    7543,
                    4106,
                    4335,
                    3759
                ],
                "errors": [
                    5526,
                    3900,
                    3766,
                    5511
                ],
                "Renamer": [
                    3777,
                    3778,
                    3775
                ],
                "Axis": [
                    3779
                ],
                "Level": [
                    3782
                ],
                "rename": [
                    3892
                ],
                "mapper": [
                    3893
                ],
                "fillna": [
                    3913
                ],
                "downcast": [
                    3919
                ],
                "doc": [
                    3903
                ],
                "NDFrame.fillna": [
                    3903
                ],
                "to_replace": [
                    3933
                ],
                "regex": [
                    3937
                ],
                "shift": [
                    3944
                ],
                "periods": [
                    3944,
                    6454
                ],
                "freq": [
                    3944,
                    8174,
                    8177,
                    8210,
                    8213
                ],
                "keys": [
                    4040,
                    4041,
                    4686,
                    4687,
                    4050,
                    4087
                ],
                "err_msg": [
                    4057,
                    4043,
                    4063
                ],
                "missing": [
                    4066,
                    4068,
                    4069,
                    4365,
                    4366,
                    4049
                ],
                "ABCIndexClass": [
                    4092,
                    5377,
                    4052,
                    5365
                ],
                "ABCSeries": [
                    4092,
                    5377,
                    4052,
                    5365
                ],
                "abc.Iterator": [
                    4099,
                    4052
                ],
                "found": [
                    4065,
                    4061
                ],
                "missing.append": [
                    4066
                ],
                "self.index._get_level_values": [
                    4082
                ],
                "col.nlevels": [
                    4089
                ],
                "col._get_level_values": [
                    4090
                ],
                "names.extend": [
                    4091
                ],
                "col.names": [
                    4091
                ],
                "names.append": [
                    4105,
                    4098,
                    4101,
                    4095
                ],
                "col.name": [
                    4095
                ],
                "to_remove.append": [
                    4107
                ],
                "verify_integrity": [
                    6934,
                    4119
                ],
                "index.is_unique": [
                    4119
                ],
                "duplicates": [
                    4120,
                    4121
                ],
                "unique": [
                    4120
                ],
                "index.duplicated": [
                    4120
                ],
                "index._cleanup": [
                    4128
                ],
                "frame.index": [
                    4130
                ],
                "new_obj": [
                    4288,
                    4327,
                    4370,
                    4372,
                    4374,
                    4286
                ],
                "index._values": [
                    4291
                ],
                "PeriodIndex": [
                    4292
                ],
                "DatetimeIndex": [
                    4292
                ],
                "np.object_": [
                    4293
                ],
                "mask.all": [
                    5538,
                    4302
                ],
                "values.fill": [
                    4304
                ],
                "values.take": [
                    4306
                ],
                "values_type": [
                    4313,
                    4322,
                    4323,
                    4316
                ],
                "values_dtype": [
                    4314,
                    4323
                ],
                "DatetimeLikeArray": [
                    4322,
                    4316
                ],
                "values._data": [
                    4317
                ],
                "maybe_upcast_putmask": [
                    4320
                ],
                "self.index._get_level_number": [
                    4331
                ],
                "lev": [
                    4369,
                    4331,
                    4349
                ],
                "self.index.droplevel": [
                    4333
                ],
                "to_insert": [
                    4336,
                    4346,
                    4349,
                    4342
                ],
                "self.index.levels": [
                    4342
                ],
                "self.index.codes": [
                    4342
                ],
                "default": [
                    4344,
                    4345
                ],
                "self.index.name": [
                    4345,
                    6903
                ],
                "multi_col": [
                    4353,
                    4348
                ],
                "lab": [
                    4369,
                    4349
                ],
                "reversed": [
                    4349
                ],
                "col_name": [
                    4361,
                    4354,
                    4356,
                    4364
                ],
                "col_fill": [
                    4361,
                    4355,
                    4364,
                    4366
                ],
                "lev_num": [
                    4363,
                    4364
                ],
                "self.columns._get_level_number": [
                    4363
                ],
                "col_level": [
                    4363,
                    6357
                ],
                "name_lst": [
                    4364,
                    4365,
                    4366,
                    4367
                ],
                "level_values": [
                    4369,
                    4370
                ],
                "_maybe_casted_values": [
                    4369
                ],
                "new_obj.insert": [
                    4370
                ],
                "new_obj.index": [
                    4372
                ],
                "isna": [
                    5376,
                    5524,
                    5533,
                    5277,
                    5278,
                    4383
                ],
                "isnull": [
                    4387
                ],
                "notna": [
                    7650,
                    7653,
                    4391,
                    7679,
                    7825,
                    5527,
                    5528,
                    7450,
                    7676,
                    5535
                ],
                "notnull": [
                    4395
                ],
                "self._get_axis_number": [
                    4675,
                    7909,
                    5609,
                    6553,
                    7723,
                    7500,
                    7947,
                    8171,
                    8207,
                    5072,
                    6577,
                    7634,
                    5043,
                    8120,
                    4505,
                    4766
                ],
                "agg_axis": [
                    4515,
                    4517,
                    4522,
                    7694,
                    7666,
                    4506,
                    4510
                ],
                "agg_obj": [
                    4522,
                    4515,
                    4508,
                    4517
                ],
                "subset": [
                    4633,
                    4634,
                    4636,
                    4637,
                    4509,
                    4639,
                    4638,
                    4641,
                    4514,
                    4511,
                    4644,
                    4649,
                    4653,
                    6477,
                    6478,
                    6479,
                    6480,
                    6483,
                    4577
                ],
                "ax": [
                    4510,
                    4511
                ],
                "self._get_axis": [
                    7911,
                    7949,
                    5073,
                    4510,
                    4767
                ],
                "indices": [
                    4512,
                    4515,
                    7910,
                    7912,
                    7948,
                    7950,
                    4511
                ],
                "ax.get_indexer_for": [
                    4511
                ],
                "check": [
                    4512,
                    4513,
                    4514
                ],
                "check.any": [
                    4513
                ],
                "np.compress": [
                    4514
                ],
                "self.take": [
                    4515
                ],
                "agg_obj.count": [
                    4517
                ],
                "how": [
                    7137,
                    7078,
                    7110,
                    6568,
                    4521,
                    6570,
                    4523,
                    4526,
                    4527,
                    8174,
                    8177,
                    7059,
                    7096,
                    6557,
                    7103
                ],
                "agg_obj._get_axis": [
                    4522
                ],
                "self.empty": [
                    4624,
                    4573,
                    5263
                ],
                "duplicated": [
                    4577,
                    4587,
                    4580
                ],
                "self.duplicated": [
                    4577
                ],
                "keep": [
                    4577,
                    5025,
                    4924,
                    4657
                ],
                "inds": [
                    4584,
                    4580,
                    4581
                ],
                "_ndarray_values.nonzero": [
                    4580
                ],
                "_ndarray_values": [
                    4580
                ],
                "self._data.take": [
                    4804,
                    4581,
                    4702
                ],
                "ignore_index": [
                    4706,
                    4583,
                    4809,
                    4589,
                    6894,
                    6897,
                    6933
                ],
                "new_data.axes": [
                    4584,
                    4810,
                    4707,
                    4807
                ],
                "result.index": [
                    4590,
                    5079,
                    5080,
                    5049,
                    5050,
                    6169
                ],
                "shape": [
                    4656,
                    4628,
                    4654,
                    4631
                ],
                "algorithms.factorize": [
                    4628
                ],
                "vals": [
                    7232,
                    7234,
                    4653,
                    4654,
                    4629,
                    7230
                ],
                "_SIZE_HINT_LIMIT": [
                    4629
                ],
                "labels.astype": [
                    4631
                ],
                "np.iterable": [
                    4636
                ],
                "cast": [
                    4644
                ],
                "diff": [
                    4649,
                    4650,
                    4651
                ],
                "difference": [
                    4649
                ],
                "diff.empty": [
                    4650
                ],
                "col.values": [
                    4653
                ],
                "f": [
                    7776,
                    7809,
                    7819,
                    4654,
                    8049,
                    7799
                ],
                "ids": [
                    4656,
                    4657
                ],
                "get_group_index": [
                    4656
                ],
                "duplicated_int64": [
                    4657
                ],
                "by": [
                    4677,
                    4678,
                    4679,
                    5607,
                    4681,
                    4683,
                    5613,
                    4686,
                    4692,
                    4693
                ],
                "ascending": [
                    4800,
                    4679,
                    4775,
                    4681,
                    4791,
                    4792,
                    4687,
                    4783,
                    4695,
                    4696,
                    4699
                ],
                "self._get_label_or_level_values": [
                    4693,
                    4686
                ],
                "lexsort_indexer": [
                    4781,
                    4687
                ],
                "na_position": [
                    4784,
                    4800,
                    4699,
                    4687
                ],
                "ensure_platform_int": [
                    4688
                ],
                "nargsort": [
                    4698,
                    4799
                ],
                "kind": [
                    4800,
                    4699
                ],
                "self._get_block_manager_axis": [
                    4803,
                    6453,
                    4703
                ],
                "__finalize__": [
                    4712,
                    4815
                ],
                "NDFrame.sort_values.__doc__": [
                    4663
                ],
                "NDFrame.sort_values": [
                    4663
                ],
                "labels._sort_levels_monotonic": [
                    4771
                ],
                "new_axis": [
                    4774
                ],
                "labels.sortlevel": [
                    4774
                ],
                "sort_remaining": [
                    4775
                ],
                "labels._get_codes_for_sorting": [
                    4782
                ],
                "labels.is_monotonic_increasing": [
                    4791
                ],
                "labels.is_monotonic_decreasing": [
                    4792
                ],
                "baxis": [
                    4803,
                    4804,
                    4807
                ],
                "_sort_levels_monotonic": [
                    4807
                ],
                "nlargest": [
                    4924
                ],
                "algorithms.SelectNFrame": [
                    5024,
                    4924
                ],
                "nsmallest": [
                    5024
                ],
                "result._get_axis": [
                    5045
                ],
                "result.index.swaplevel": [
                    5050
                ],
                "j": [
                    7328,
                    7329,
                    7332,
                    7335,
                    7341,
                    7342,
                    5050,
                    5053
                ],
                "result.columns.swaplevel": [
                    5053
                ],
                "result.index.reorder_levels": [
                    5080
                ],
                "order": [
                    5080,
                    5083
                ],
                "result.columns.reorder_levels": [
                    5083
                ],
                "_arith_op": [
                    5111,
                    5108,
                    5095
                ],
                "func": [
                    5121,
                    6561,
                    6721,
                    5126,
                    5095,
                    5127,
                    6790,
                    6791,
                    5104,
                    5106,
                    6579,
                    6580,
                    5112,
                    5309,
                    6557,
                    5119
                ],
                "ops.fill_binop": [
                    5103
                ],
                "ops": [
                    5121,
                    5103,
                    5106,
                    5108,
                    8343,
                    8344,
                    5119
                ],
                "ops.should_series_dispatch": [
                    5106,
                    5119
                ],
                "ops.dispatch_to_series": [
                    5121,
                    5108
                ],
                "np.errstate": [
                    7808,
                    5523,
                    5125,
                    5110
                ],
                "res_values": [
                    5112,
                    5111
                ],
                "other.values": [
                    5112,
                    5124,
                    5111
                ],
                "dispatch_fill_zeros": [
                    5112,
                    5127
                ],
                "other_vals": [
                    5124,
                    5126,
                    5127
                ],
                "other.values.reshape": [
                    5124
                ],
                "out": [
                    7770,
                    5142,
                    7769,
                    5146,
                    7771,
                    5145
                ],
                "out.columns": [
                    5145
                ],
                "other_idxlen": [
                    5263,
                    5255
                ],
                "this": [
                    5283,
                    5541,
                    5257,
                    5258,
                    7501,
                    5520,
                    7504,
                    5267,
                    5524,
                    7507,
                    5271,
                    5528,
                    7547,
                    5535
                ],
                "self.align": [
                    5257
                ],
                "this.index": [
                    5258
                ],
                "other.empty": [
                    5260
                ],
                "other.copy": [
                    5264
                ],
                "this.columns.union": [
                    5267
                ],
                "this.columns": [
                    5267
                ],
                "do_fill": [
                    5268,
                    5286
                ],
                "otherSeries": [
                    5288,
                    5290,
                    5307,
                    5272,
                    5275,
                    5309,
                    5278
                ],
                "this_dtype": [
                    5304,
                    5274,
                    5310,
                    5303
                ],
                "other_dtype": [
                    5303,
                    5306,
                    5275,
                    5295
                ],
                "otherSeries.dtype": [
                    5275
                ],
                "this_mask": [
                    5289,
                    5277
                ],
                "other_mask": [
                    5290,
                    5282,
                    5278
                ],
                "overwrite": [
                    5282,
                    5532
                ],
                "other_mask.all": [
                    5282
                ],
                "series.copy": [
                    5287
                ],
                "otherSeries.copy": [
                    5288
                ],
                "new_dtype": [
                    5295,
                    5297,
                    5303,
                    5304,
                    5305,
                    5306,
                    5307
                ],
                "series.astype": [
                    5297,
                    5305
                ],
                "find_common_type": [
                    5303
                ],
                "is_dtype_equal": [
                    5304,
                    5306
                ],
                "otherSeries.astype": [
                    5307
                ],
                "maybe_downcast_to_dtype": [
                    5310
                ],
                "arr._values": [
                    5366
                ],
                "needs_i8_conversion": [
                    5368
                ],
                "arr.dtype": [
                    5369
                ],
                "arr.asi8": [
                    5370
                ],
                "arr.view": [
                    5372
                ],
                "mask._values": [
                    5378
                ],
                "x_values": [
                    5380,
                    5388
                ],
                "extract_values": [
                    5380,
                    5381
                ],
                "y_values": [
                    5386,
                    5388,
                    5381
                ],
                "y": [
                    5385,
                    5381
                ],
                "y.name": [
                    5385
                ],
                "expressions.where": [
                    5388,
                    5541
                ],
                "expressions": [
                    5388,
                    5541
                ],
                "self.combine": [
                    5390
                ],
                "combiner": [
                    5390
                ],
                "other.reindex_like": [
                    5517
                ],
                "that": [
                    5541,
                    5521,
                    5524,
                    5527,
                    5533
                ],
                "filter_func": [
                    5522,
                    5524
                ],
                "mask_this": [
                    5529,
                    5527
                ],
                "mask_that": [
                    5528,
                    5529
                ],
                "DataFrameGroupBy": [
                    5611
                ],
                "as_index": [
                    5616
                ],
                "sort": [
                    7143,
                    7082,
                    5617,
                    7059,
                    6935,
                    7098,
                    7103
                ],
                "group_keys": [
                    5618
                ],
                "squeeze": [
                    5619
                ],
                "observed": [
                    5930,
                    5620
                ],
                "pivot": [
                    5773
                ],
                "pivot_table": [
                    5920
                ],
                "aggfunc": [
                    5925
                ],
                "margins": [
                    5927
                ],
                "dropna": [
                    7875,
                    5928,
                    8047,
                    6099,
                    6101
                ],
                "margins_name": [
                    5929
                ],
                "stack_multiple": [
                    6099
                ],
                "stack": [
                    6101
                ],
                "is_scalar": [
                    6159
                ],
                "df": [
                    7748,
                    7750,
                    7752,
                    7769,
                    7092,
                    6164,
                    6166,
                    6167,
                    6168,
                    7765,
                    7770,
                    7230
                ],
                "self.reset_index": [
                    6164
                ],
                "explode": [
                    6167
                ],
                "df.drop": [
                    6168
                ],
                "self.index.take": [
                    6169
                ],
                "result.reindex": [
                    6170
                ],
                "unstack": [
                    6235
                ],
                "melt": [
                    6351
                ],
                "id_vars": [
                    6353
                ],
                "value_vars": [
                    6354
                ],
                "var_name": [
                    6355
                ],
                "value_name": [
                    6356
                ],
                "bm_axis": [
                    6453,
                    6454
                ],
                "self._data.diff": [
                    6454
                ],
                "ABCDataFrame": [
                    6464,
                    6465
                ],
                "subset.ndim": [
                    6479
                ],
                "_agg_summary_and_see_also_doc": [
                    6546,
                    6485
                ],
                "dedent": [
                    6509,
                    6485
                ],
                "_agg_examples_doc": [
                    6547,
                    6509
                ],
                "self._aggregate": [
                    6557
                ],
                "self.apply": [
                    6561,
                    6793,
                    7875
                ],
                "self.T._aggregate": [
                    6568
                ],
                "arg": [
                    6568,
                    6571
                ],
                "result.T": [
                    6569,
                    7698,
                    8143
                ],
                "_aggregate": [
                    6571
                ],
                "agg": [
                    6573
                ],
                "aggregate": [
                    6573
                ],
                "self.T.transform": [
                    6579
                ],
                "transform": [
                    6580
                ],
                "op": [
                    6728,
                    7728,
                    7761,
                    7760,
                    6719
                ],
                "frame_apply": [
                    7798,
                    6719
                ],
                "raw": [
                    6723
                ],
                "result_type": [
                    6724
                ],
                "kwds": [
                    7728,
                    7761,
                    7760,
                    6726
                ],
                "op.get_result": [
                    6728
                ],
                "x.empty": [
                    6789
                ],
                "lib.map_infer": [
                    6790,
                    6791
                ],
                "x.astype": [
                    6791
                ],
                "object": [
                    6908,
                    6791
                ],
                "infer": [
                    6793
                ],
                "other.name": [
                    7071,
                    6897,
                    7069,
                    6903
                ],
                "idx_diff": [
                    6908,
                    6904,
                    6906,
                    7548,
                    7550,
                    7551
                ],
                "other.index.difference": [
                    6904
                ],
                "combined_columns": [
                    6915,
                    6916,
                    6906,
                    6908,
                    6910
                ],
                "self.columns.append": [
                    6906
                ],
                "self.columns.astype": [
                    6908
                ],
                "rename_axis": [
                    6910
                ],
                "T.infer_objects": [
                    6910
                ],
                "to_frame": [
                    6910
                ],
                "index.names": [
                    6913
                ],
                "self.columns.equals": [
                    6915
                ],
                "all": [
                    7825,
                    6922,
                    7450,
                    7092
                ],
                "to_concat": [
                    6928,
                    6930,
                    6932
                ],
                "concat": [
                    8286,
                    6931,
                    7256,
                    7097,
                    7102
                ],
                "self._join_compat": [
                    7058
                ],
                "on": [
                    7138,
                    7077,
                    7079,
                    7085,
                    7059
                ],
                "lsuffix": [
                    7081,
                    7059
                ],
                "rsuffix": [
                    7081,
                    7059
                ],
                "merge": [
                    7074,
                    7109,
                    7134
                ],
                "frames": [
                    7106,
                    7108,
                    7090,
                    7092,
                    7098,
                    7103
                ],
                "can_concat": [
                    7092,
                    7095
                ],
                "df.index.is_unique": [
                    7092
                ],
                "df.index": [
                    7092
                ],
                "res.reindex": [
                    7100
                ],
                "joined": [
                    7113,
                    7106,
                    7109,
                    7110
                ],
                "left_on": [
                    7139
                ],
                "right_on": [
                    7140
                ],
                "left_index": [
                    7141
                ],
                "right_index": [
                    7142
                ],
                "suffixes": [
                    7144
                ],
                "indicator": [
                    7146
                ],
                "validate": [
                    7147
                ],
                "df.items": [
                    7230
                ],
                "_series_round": [
                    7232,
                    7250
                ],
                "decimals": [
                    7232,
                    7238,
                    7243,
                    7244,
                    7245,
                    7247,
                    7248,
                    7250
                ],
                "is_integer_dtype": [
                    7237
                ],
                "is_float_dtype": [
                    7237
                ],
                "s.round": [
                    7238
                ],
                "nv.validate_round": [
                    7241
                ],
                "decimals.index.is_unique": [
                    7245
                ],
                "decimals.index": [
                    7245
                ],
                "new_cols": [
                    7256,
                    7250,
                    7254,
                    7247
                ],
                "_dict_round": [
                    7247
                ],
                "numeric_df": [
                    7310,
                    7311,
                    7313,
                    7445,
                    7446,
                    7448
                ],
                "self._get_numeric_data": [
                    8044,
                    7661,
                    7501,
                    7310,
                    8119,
                    7732,
                    7445,
                    7639
                ],
                "numeric_df.columns": [
                    7446,
                    7311
                ],
                "cols.copy": [
                    7312,
                    7447
                ],
                "mat": [
                    7328,
                    7458,
                    7455,
                    7450,
                    7313,
                    7316,
                    7318,
                    7448,
                    7322,
                    7451,
                    7452,
                    7326,
                    7327
                ],
                "numeric_df.values": [
                    7448,
                    7313
                ],
                "correl": [
                    7553,
                    7525,
                    7532,
                    7341,
                    7342,
                    7316,
                    7318,
                    7350,
                    7548,
                    7325,
                    7551
                ],
                "libalgos.nancorr": [
                    7458,
                    7316
                ],
                "libalgos": [
                    7458,
                    7316,
                    7318
                ],
                "ensure_float64": [
                    7322,
                    7316,
                    7458,
                    7318
                ],
                "min_periods": [
                    7458,
                    7333,
                    7316,
                    7318,
                    7320,
                    7321,
                    7451
                ],
                "libalgos.nancorr_spearman": [
                    7318
                ],
                "callable": [
                    7527,
                    7319
                ],
                "corrf": [
                    7338,
                    7323,
                    7340
                ],
                "nanops.get_corr_func": [
                    7323
                ],
                "nanops": [
                    7530,
                    7323,
                    7948,
                    7910
                ],
                "K": [
                    7324,
                    7325
                ],
                "float": [
                    7325
                ],
                "np.isfinite": [
                    7326
                ],
                "ac": [
                    7338,
                    7340,
                    7327
                ],
                "bc": [
                    7328,
                    7338,
                    7340
                ],
                "valid": [
                    7337,
                    7338,
                    7332,
                    7333
                ],
                "valid.sum": [
                    7333
                ],
                "valid.all": [
                    7337
                ],
                "baseCov": [
                    7456,
                    7458,
                    7460,
                    7452,
                    7453,
                    7455
                ],
                "mat.shape": [
                    7452
                ],
                "baseCov.fill": [
                    7453
                ],
                "np.cov": [
                    7455
                ],
                "mat.T": [
                    7455
                ],
                "baseCov.reshape": [
                    7456
                ],
                "this.apply": [
                    7504
                ],
                "other.corr": [
                    7504
                ],
                "other._get_numeric_data": [
                    7506
                ],
                "this.align": [
                    7507
                ],
                "left.T": [
                    7510
                ],
                "right.T": [
                    7511
                ],
                "ldem": [
                    7522,
                    7519
                ],
                "left.mean": [
                    7519
                ],
                "rdem": [
                    7520,
                    7522
                ],
                "right.mean": [
                    7520
                ],
                "num": [
                    7522,
                    7525
                ],
                "sum": [
                    7522,
                    7650,
                    7653
                ],
                "dom": [
                    7523,
                    7525
                ],
                "left.count": [
                    7523
                ],
                "left.std": [
                    7523
                ],
                "right.std": [
                    7523
                ],
                "nanops.nancorr": [
                    7530
                ],
                "left.values.T": [
                    7533
                ],
                "right.values.T": [
                    7533
                ],
                "left.columns": [
                    7533
                ],
                "raxis": [
                    7546,
                    7547
                ],
                "union": [
                    7547
                ],
                "this._get_axis": [
                    7547
                ],
                "other._get_axis": [
                    7547
                ],
                "result_index.difference": [
                    7548
                ],
                "correl.index": [
                    7548
                ],
                "correl.append": [
                    7551
                ],
                "self._count_level": [
                    7636
                ],
                "numeric_only": [
                    7747,
                    7812,
                    7749,
                    7660,
                    8044,
                    7636,
                    7638,
                    8119,
                    7707,
                    7773
                ],
                "frame._get_axis": [
                    7665,
                    7644
                ],
                "frame._get_agg_axis": [
                    7666,
                    7645,
                    7655
                ],
                "frame._is_mixed_type": [
                    7673,
                    7647
                ],
                "frame._data.any_extension_types": [
                    7647
                ],
                "frame._data": [
                    7647
                ],
                "series_counts": [
                    7653,
                    7654
                ],
                "counts": [
                    7694,
                    7692,
                    7654,
                    7655
                ],
                "series_counts.values": [
                    7654
                ],
                "result.astype": [
                    7824,
                    7657,
                    7826
                ],
                "count_axis": [
                    7687,
                    7689,
                    7690,
                    7691,
                    7665,
                    7668
                ],
                "self._get_axis_name": [
                    7670
                ],
                "frame.values": [
                    7679
                ],
                "mask.T": [
                    7684
                ],
                "count_axis._get_level_number": [
                    7687
                ],
                "level_name": [
                    7689,
                    7690
                ],
                "count_axis._names": [
                    7689
                ],
                "level_index": [
                    7690,
                    7692,
                    7694
                ],
                "_shallow_copy": [
                    7690
                ],
                "count_axis.levels": [
                    7690
                ],
                "level_codes": [
                    7691,
                    7692
                ],
                "ensure_int64": [
                    7691
                ],
                "count_axis.codes": [
                    7691
                ],
                "lib.count_level_2d": [
                    7692
                ],
                "dtype_is_dt": [
                    7715,
                    7706,
                    7707
                ],
                "self.dtypes.apply": [
                    7706
                ],
                "x.kind": [
                    7706
                ],
                "dtype_is_dt.any": [
                    7707
                ],
                "FutureWarning": [
                    7712
                ],
                "filter_type": [
                    7778,
                    7718,
                    7755,
                    7787,
                    7823,
                    7825,
                    7731,
                    7733,
                    7741
                ],
                "constructor": [
                    7720,
                    7833,
                    7725
                ],
                "self._get_agg_axis": [
                    7913,
                    7724,
                    7951
                ],
                "skipna": [
                    7910,
                    7948,
                    7728,
                    7761,
                    7760
                ],
                "axis_matters": [
                    7734
                ],
                "self._get_bool_data": [
                    7736,
                    7738
                ],
                "_get_data": [
                    7813,
                    7750,
                    7807
                ],
                "df.T": [
                    7752
                ],
                "out_dtype": [
                    7769,
                    7755
                ],
                "df._data.reduce": [
                    7765
                ],
                "df._data": [
                    7765
                ],
                "blk_func": [
                    7765
                ],
                "res.keys": [
                    7768
                ],
                "df._constructor_sliced": [
                    7769
                ],
                "out.index": [
                    7770
                ],
                "df.columns": [
                    7770
                ],
                "np.bool_": [
                    7826,
                    7782
                ],
                "opa": [
                    7801,
                    7798
                ],
                "opa.get_result": [
                    7801
                ],
                "self.ndim": [
                    7802
                ],
                "result.iloc": [
                    7803
                ],
                "data._get_agg_axis": [
                    7816,
                    7810
                ],
                "result.dtype": [
                    7821
                ],
                "np.float64": [
                    7824,
                    8131
                ],
                "coerce_to_dtypes": [
                    7831
                ],
                "Series.nunique": [
                    7875
                ],
                "nanops.nanargmin": [
                    7910
                ],
                "nanops.nanargmax": [
                    7948
                ],
                "axis_num": [
                    7962,
                    7957,
                    7959
                ],
                "repr": [
                    7962
                ],
                "s.mode": [
                    8047
                ],
                "data.apply": [
                    8049
                ],
                "validate_percentile": [
                    8117
                ],
                "q": [
                    8129,
                    8130,
                    8131,
                    8134,
                    8140,
                    8117
                ],
                "is_transposed": [
                    8121,
                    8123,
                    8142,
                    8134
                ],
                "data.T": [
                    8124
                ],
                "data.columns": [
                    8126
                ],
                "self.columns.name": [
                    8128
                ],
                "data._data.quantile": [
                    8133
                ],
                "interpolation": [
                    8134
                ],
                "new_data.copy": [
                    8169,
                    8205
                ],
                "ABCDatetimeIndex": [
                    8176,
                    8209,
                    8212,
                    8173
                ],
                "ABCPeriodIndex": [
                    8176,
                    8173
                ],
                "new_data.set_axis": [
                    8177,
                    8210,
                    8213,
                    8174
                ],
                "self.index.to_timestamp": [
                    8174
                ],
                "self.columns.to_timestamp": [
                    8177
                ],
                "AssertionError": [
                    8179,
                    8215
                ],
                "self.index.to_period": [
                    8210
                ],
                "self.columns.to_period": [
                    8213
                ],
                "collections.defaultdict": [
                    8284
                ],
                "isin": [
                    8288
                ],
                "values.index.is_unique": [
                    8299,
                    8295
                ],
                "values.index": [
                    8299,
                    8295
                ],
                "self.eq": [
                    8297,
                    8301
                ],
                "values.reindex_like": [
                    8297,
                    8301
                ],
                "values.columns.is_unique": [
                    8299
                ],
                "values.columns": [
                    8299
                ],
                "__name__": [
                    8307
                ],
                "reshape": [
                    8310
                ],
                "algorithms.isin": [
                    8310
                ],
                "self.values.ravel": [
                    8310
                ],
                "_AXIS_ORDERS": [
                    8321,
                    8317
                ],
                "_AXIS_NUMBERS": [
                    8318
                ],
                "_AXIS_NAMES": [
                    8319
                ],
                "_AXIS_REVERSED": [
                    8320
                ],
                "_AXIS_LEN": [
                    8321
                ],
                "_info_axis_number": [
                    8322
                ],
                "_info_axis_name": [
                    8323
                ],
                "properties.AxisProperty": [
                    8328,
                    8325
                ],
                "properties": [
                    8328,
                    8325
                ],
                "plot": [
                    8334
                ],
                "CachedAccessor": [
                    8337,
                    8334
                ],
                "pandas.plotting.PlotAccessor": [
                    8334
                ],
                "pandas.plotting": [
                    8336,
                    8334,
                    8335
                ],
                "pandas": [
                    8336,
                    8334,
                    8335
                ],
                "hist": [
                    8335
                ],
                "pandas.plotting.hist_frame": [
                    8335
                ],
                "boxplot": [
                    8336
                ],
                "pandas.plotting.boxplot_frame": [
                    8336
                ],
                "sparse": [
                    8337
                ],
                "SparseFrameAccessor": [
                    8337
                ],
                "DataFrame._add_numeric_operations": [
                    8340
                ],
                "DataFrame._add_series_or_dataframe_operations": [
                    8341
                ],
                "ops.add_flex_arithmetic_methods": [
                    8343
                ],
                "ops.add_special_arithmetic_methods": [
                    8344
                ],
                "s.items": [
                    8351
                ],
                "new_data.get": [
                    8352
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    136
                ],
                "_shared_doc_kwargs": [
                    4385,
                    3941,
                    4389,
                    4393,
                    3597,
                    143,
                    6575,
                    3537,
                    3922,
                    6549,
                    3606,
                    4662,
                    5593,
                    4381,
                    3903
                ],
                "_numeric_only_doc": [
                    170
                ],
                "_merge_doc": [
                    7116,
                    175
                ],
                "NDFrame": [
                    2724,
                    324,
                    517,
                    4663,
                    402,
                    3602,
                    3607,
                    410,
                    3903
                ],
                "_internal_names_set": [
                    402
                ],
                "NDFrame._internal_names_set": [
                    402
                ],
                "_typ": [
                    403
                ],
                "DataFrame": [
                    6920,
                    6921,
                    5514,
                    5515,
                    7694,
                    3347,
                    8340,
                    8341,
                    407,
                    8343,
                    8344,
                    7071,
                    7073,
                    433,
                    3401,
                    2511,
                    2656,
                    1633,
                    1124,
                    8298,
                    8309,
                    1142,
                    2683
                ],
                "Type": [
                    409,
                    406
                ],
                "_constructor_sliced": [
                    409
                ],
                "Series": [
                    896,
                    1153,
                    905,
                    1147,
                    908,
                    2317,
                    2575,
                    3344,
                    4625,
                    2322,
                    7951,
                    3352,
                    409,
                    7068,
                    7837,
                    7462,
                    2600,
                    4657,
                    2233,
                    6464,
                    6465,
                    7875,
                    7877,
                    7243,
                    460,
                    7244,
                    7503,
                    3409,
                    2773,
                    1241,
                    7645,
                    2658,
                    1124,
                    485,
                    8294,
                    7655,
                    7913,
                    7915,
                    6892,
                    7532,
                    6896,
                    1146,
                    2555,
                    5116,
                    7551
                ],
                "_deprecations": [
                    410
                ],
                "FrozenSet": [
                    3185,
                    410
                ],
                "NDFrame._deprecations": [
                    410
                ],
                "_accessors": [
                    411
                ],
                "Set": [
                    411
                ],
                "Optional": [
                    768,
                    896,
                    771,
                    772,
                    773,
                    774,
                    905,
                    6464,
                    908,
                    423,
                    424,
                    425,
                    4137,
                    4141,
                    4142,
                    698,
                    4540,
                    3775,
                    4544,
                    1857,
                    3777,
                    1859,
                    1860,
                    1861,
                    1862,
                    1863,
                    1864,
                    3778,
                    3779,
                    3782,
                    3784,
                    3912,
                    4049,
                    2018,
                    2019,
                    4336,
                    755,
                    756,
                    757,
                    4086,
                    4597,
                    761,
                    762,
                    763,
                    765,
                    766,
                    767
                ],
                "Axes": [
                    424,
                    423
                ],
                "Dtype": [
                    425,
                    3186,
                    3185
                ],
                "data": [
                    7732,
                    7736,
                    1594,
                    7738,
                    1599,
                    7745,
                    1610,
                    1612,
                    1615,
                    1617,
                    1619,
                    1621,
                    1622,
                    1626,
                    1633,
                    1634,
                    1639,
                    7807,
                    7809,
                    7810,
                    7813,
                    7815,
                    7816,
                    8350,
                    1239,
                    1241,
                    1242,
                    1244,
                    3296,
                    3299,
                    3300,
                    1251,
                    8044,
                    8049,
                    428,
                    429,
                    433,
                    434,
                    436,
                    438,
                    8119,
                    440,
                    441,
                    442,
                    8124,
                    446,
                    447,
                    8126,
                    451,
                    453,
                    454,
                    455,
                    8133,
                    457,
                    458,
                    460,
                    461,
                    462,
                    463,
                    466,
                    467,
                    468,
                    470,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    480,
                    485,
                    486,
                    487,
                    488,
                    2537,
                    490,
                    494,
                    2544,
                    2545,
                    499,
                    2547,
                    509
                ],
                "dtype": [
                    2434,
                    1305,
                    430,
                    431,
                    438,
                    441,
                    1850,
                    447,
                    1603,
                    1605,
                    458,
                    1614,
                    1615,
                    466,
                    468,
                    470,
                    480,
                    1251,
                    492,
                    494,
                    496,
                    499,
                    509,
                    2430,
                    2431
                ],
                "self._validate_dtype": [
                    431
                ],
                "self": [
                    8203,
                    4109,
                    8207,
                    4113,
                    6161,
                    8209,
                    6164,
                    8210,
                    8212,
                    8213,
                    6169,
                    6170,
                    8217,
                    2115,
                    6235,
                    8285,
                    8288,
                    8289,
                    8297,
                    8301,
                    8310,
                    8311,
                    8312,
                    2197,
                    2231,
                    4286,
                    4288,
                    6352,
                    4331,
                    4332,
                    4333,
                    4337,
                    4340,
                    4342,
                    4344,
                    4345,
                    4346,
                    4348,
                    4356,
                    4363,
                    4365,
                    2318,
                    2319,
                    2322,
                    6453,
                    6454,
                    6455,
                    6478,
                    2427,
                    2428,
                    2432,
                    2435,
                    2436,
                    2440,
                    2443,
                    2444,
                    2447,
                    4505,
                    6553,
                    4508,
                    6557,
                    4510,
                    6561,
                    2467,
                    4515,
                    2471,
                    6568,
                    2473,
                    2474,
                    2477,
                    431,
                    6577,
                    2482,
                    4531,
                    2484,
                    437,
                    2485,
                    4534,
                    2488,
                    6579,
                    2494,
                    2498,
                    2499,
                    2500,
                    2501,
                    2504,
                    2508,
                    2512,
                    2516,
                    2523,
                    2524,
                    2525,
                    4573,
                    4574,
                    4577,
                    2531,
                    4581,
                    2537,
                    4585,
                    4587,
                    2544,
                    2555,
                    2561,
                    2563,
                    517,
                    2568,
                    2570,
                    2574,
                    2576,
                    4624,
                    2578,
                    2579,
                    4629,
                    2582,
                    2583,
                    536,
                    2584,
                    2586,
                    4634,
                    4639,
                    2601,
                    2602,
                    4649,
                    2605,
                    558,
                    4653,
                    2608,
                    4657,
                    6720,
                    2625,
                    4675,
                    2628,
                    2629,
                    2636,
                    4686,
                    591,
                    592,
                    594,
                    2642,
                    2643,
                    2644,
                    4693,
                    2647,
                    2650,
                    604,
                    2654,
                    4702,
                    4703,
                    2657,
                    2659,
                    2662,
                    4710,
                    4712,
                    619,
                    2668,
                    2669,
                    2674,
                    2676,
                    2678,
                    2680,
                    2681,
                    2687,
                    2689,
                    2692,
                    645,
                    2693,
                    6793,
                    2699,
                    2701,
                    2708,
                    2709,
                    2710,
                    665,
                    4766,
                    4767,
                    673,
                    674,
                    2722,
                    2723,
                    2724,
                    2729,
                    2730,
                    686,
                    2745,
                    2749,
                    2750,
                    4797,
                    704,
                    706,
                    4803,
                    4804,
                    2760,
                    2762,
                    2763,
                    4813,
                    719,
                    4815,
                    2771,
                    2780,
                    2785,
                    2787,
                    2789,
                    2795,
                    2796,
                    6903,
                    6904,
                    6906,
                    6908,
                    6915,
                    6916,
                    6922,
                    6923,
                    6928,
                    6930,
                    807,
                    4924,
                    843,
                    897,
                    898,
                    899,
                    901,
                    902,
                    2949,
                    2952,
                    906,
                    2956,
                    2959,
                    7058,
                    5025,
                    7075,
                    5041,
                    7090,
                    5043,
                    953,
                    954,
                    955,
                    7100,
                    5072,
                    5073,
                    5076,
                    7135,
                    5106,
                    5108,
                    5111,
                    5112,
                    5119,
                    1024,
                    3072,
                    1026,
                    3073,
                    3076,
                    5121,
                    1030,
                    5126,
                    5127,
                    1033,
                    1045,
                    5142,
                    5145,
                    7247,
                    7250,
                    7255,
                    7256,
                    7259,
                    1125,
                    1126,
                    1129,
                    1134,
                    1135,
                    3182,
                    1143,
                    3194,
                    1151,
                    3200,
                    3206,
                    3208,
                    1161,
                    5257,
                    5260,
                    5261,
                    7310,
                    1167,
                    5263,
                    3226,
                    3227,
                    3228,
                    5292,
                    7350,
                    5315,
                    3296,
                    3325,
                    3331,
                    5385,
                    5390,
                    7445,
                    3350,
                    3351,
                    1305,
                    3353,
                    3363,
                    7460,
                    3368,
                    3390,
                    3398,
                    3399,
                    3400,
                    7500,
                    7501,
                    3409,
                    3410,
                    3437,
                    3438,
                    3439,
                    3440,
                    1397,
                    3445,
                    3450,
                    1406,
                    1408,
                    1412,
                    3461,
                    1413,
                    1418,
                    5517,
                    5519,
                    1424,
                    5520,
                    1426,
                    1429,
                    1436,
                    1439,
                    1440,
                    3487,
                    3490,
                    5541,
                    3507,
                    3510,
                    3521,
                    3522,
                    3527,
                    3529,
                    3531,
                    7634,
                    7636,
                    7639,
                    7641,
                    5609,
                    5612,
                    7661,
                    7663,
                    7670,
                    1540,
                    7706,
                    7715,
                    3620,
                    7716,
                    3625,
                    7723,
                    7724,
                    7725,
                    7732,
                    7736,
                    7738,
                    7748,
                    7774,
                    7799,
                    7802,
                    7818,
                    5773,
                    7831,
                    7834,
                    7875,
                    7909,
                    7910,
                    7911,
                    7913,
                    1771,
                    1773,
                    1775,
                    1777,
                    1780,
                    1782,
                    1790,
                    1792,
                    1793,
                    7947,
                    7948,
                    7949,
                    7951,
                    7958,
                    7960,
                    1817,
                    5921,
                    3943,
                    8044,
                    8119,
                    1976,
                    8120,
                    8128,
                    8130,
                    8131,
                    8138,
                    8140,
                    1999,
                    6099,
                    6101,
                    4061,
                    2023,
                    4072,
                    8167,
                    4074,
                    8171,
                    8173,
                    8174,
                    4079,
                    4080,
                    4081,
                    4082,
                    8176,
                    4084,
                    8177,
                    8181
                ],
                "data._data": [
                    434,
                    8133
                ],
                "BlockManager": [
                    436
                ],
                "mgr": [
                    517,
                    458,
                    511,
                    492,
                    494,
                    1679,
                    496,
                    1681,
                    466,
                    468,
                    437,
                    470,
                    441,
                    1850,
                    1851,
                    447
                ],
                "self._init_mgr": [
                    437
                ],
                "index": [
                    512,
                    1025,
                    1033,
                    4117,
                    4119,
                    4120,
                    4128,
                    4130,
                    1601,
                    2626,
                    2119,
                    2632,
                    2643,
                    2644,
                    1653,
                    1654,
                    1655,
                    1656,
                    1658,
                    1660,
                    1663,
                    1666,
                    1668,
                    1669,
                    8325,
                    5773,
                    8350,
                    2207,
                    8353,
                    3762,
                    2746,
                    2751,
                    4291,
                    4292,
                    2760,
                    2762,
                    1236,
                    1244,
                    1251,
                    7911,
                    7912,
                    1770,
                    6903,
                    6913,
                    1800,
                    7949,
                    7950,
                    2321,
                    1811,
                    1813,
                    1815,
                    1817,
                    1827,
                    1828,
                    5923,
                    817,
                    3894,
                    1850,
                    3469,
                    3470,
                    3472,
                    438,
                    441,
                    447,
                    458,
                    466,
                    468,
                    470,
                    484,
                    486,
                    488,
                    490,
                    492,
                    494,
                    496,
                    507,
                    509
                ],
                "columns": [
                    512,
                    3463,
                    3464,
                    8328,
                    3466,
                    1677,
                    5773,
                    1679,
                    1426,
                    1428,
                    2198,
                    5025,
                    5924,
                    808,
                    3763,
                    438,
                    1591,
                    1592,
                    441,
                    953,
                    1850,
                    956,
                    3895,
                    4924,
                    447,
                    1601,
                    458,
                    464,
                    465,
                    466,
                    468,
                    1620,
                    470,
                    1621,
                    1622,
                    1627,
                    478,
                    479,
                    480,
                    481,
                    1246,
                    1251,
                    1631,
                    1634,
                    1635,
                    1636,
                    1637,
                    1639,
                    1642,
                    1643,
                    492,
                    1645,
                    494,
                    496,
                    1655,
                    507,
                    509
                ],
                "copy": [
                    2441,
                    3466,
                    8204,
                    3472,
                    1305,
                    5283,
                    3492,
                    2470,
                    2477,
                    438,
                    3512,
                    3897,
                    447,
                    458,
                    3533,
                    470,
                    3556,
                    8168,
                    7145,
                    494,
                    499
                ],
                "init_dict": [
                    496,
                    441,
                    466,
                    468
                ],
                "ma.MaskedArray": [
                    442
                ],
                "ma": [
                    442,
                    451
                ],
                "mrecords.MaskedRecords": [
                    446
                ],
                "mrecords": [
                    446
                ],
                "masked_rec_array_to_mgr": [
                    447
                ],
                "mask": [
                    5376,
                    5377,
                    5378,
                    7684,
                    5388,
                    7692,
                    5524,
                    5533,
                    7326,
                    5535,
                    5538,
                    7332,
                    5541,
                    4520,
                    4522,
                    4524,
                    4531,
                    451,
                    452,
                    455,
                    4298,
                    4302,
                    4303,
                    4319,
                    4320,
                    7676,
                    7679
                ],
                "ma.getmaskarray": [
                    451
                ],
                "mask.any": [
                    452,
                    4319
                ],
                "fill_value": [
                    5092,
                    3493,
                    453,
                    455,
                    3527,
                    3557,
                    3466,
                    3944,
                    5289,
                    5290,
                    3534,
                    5103,
                    3472,
                    5268,
                    5926,
                    3513,
                    6235
                ],
                "maybe_upcast": [
                    453
                ],
                "data.soften_mask": [
                    454
                ],
                "data.copy": [
                    457
                ],
                "init_ndarray": [
                    458,
                    511,
                    470,
                    494
                ],
                "np.ndarray": [
                    4096,
                    1633,
                    2658,
                    1253,
                    2470,
                    3369,
                    2698,
                    460,
                    7758,
                    2575,
                    3185,
                    4052,
                    3413,
                    3352,
                    1148
                ],
                "np": [
                    4096,
                    7808,
                    5125,
                    2698,
                    7950,
                    1167,
                    2575,
                    7824,
                    7826,
                    5523,
                    1685,
                    3352,
                    1305,
                    3483,
                    4636,
                    7325,
                    3614,
                    7326,
                    7452,
                    7453,
                    4514,
                    7455,
                    2470,
                    7334,
                    3369,
                    1839,
                    1846,
                    8131,
                    3448,
                    4293,
                    3402,
                    460,
                    3404,
                    7758,
                    1615,
                    4303,
                    4304,
                    4052,
                    3413,
                    2781,
                    4320,
                    1633,
                    2658,
                    1253,
                    7782,
                    2535,
                    7912,
                    1773,
                    3182,
                    1136,
                    3185,
                    499,
                    5110,
                    1144,
                    1147,
                    1148,
                    1149,
                    7551
                ],
                "Index": [
                    1660,
                    8128,
                    2658,
                    3365,
                    3369,
                    522,
                    4649,
                    460,
                    2575,
                    3376,
                    6903,
                    3352,
                    1658,
                    1148
                ],
                "data.dtype.names": [
                    461,
                    462
                ],
                "data.dtype": [
                    461,
                    462
                ],
                "data_columns": [
                    465,
                    462,
                    463
                ],
                "k": [
                    1408,
                    898,
                    899,
                    901,
                    902,
                    1030,
                    1424,
                    1432,
                    955,
                    956,
                    957,
                    463,
                    4693,
                    1622,
                    1626,
                    1627,
                    1628,
                    4699,
                    3298,
                    3299,
                    1406
                ],
                "data.name": [
                    468
                ],
                "abc.Iterable": [
                    473
                ],
                "abc": [
                    473,
                    474,
                    4099,
                    4052
                ],
                "abc.Sequence": [
                    474
                ],
                "ExtensionArray": [
                    474,
                    3359
                ],
                "is_list_like": [
                    8129,
                    8303,
                    2771,
                    2520,
                    3162,
                    3160,
                    477
                ],
                "is_named_tuple": [
                    478
                ],
                "_fields": [
                    479
                ],
                "arrays": [
                    1792,
                    4097,
                    1026,
                    4100,
                    1030,
                    1799,
                    4104,
                    1674,
                    1036,
                    4109,
                    1039,
                    1679,
                    4114,
                    4117,
                    1023,
                    1846,
                    1850,
                    1622,
                    1624,
                    1629,
                    1631,
                    480,
                    1634,
                    4090,
                    1639,
                    492,
                    4076,
                    1777,
                    4082,
                    4084,
                    1657,
                    1658,
                    4094,
                    1663
                ],
                "to_arrays": [
                    480,
                    1634,
                    1639
                ],
                "ensure_index": [
                    481,
                    1636,
                    1641,
                    1643,
                    1621,
                    1592
                ],
                "get_names_from_index": [
                    486
                ],
                "Categorical": [
                    487
                ],
                "ibase.default_index": [
                    4707,
                    4327,
                    488,
                    4584,
                    490,
                    4810,
                    4590
                ],
                "ibase": [
                    4707,
                    4327,
                    488,
                    4584,
                    490,
                    4810,
                    4590
                ],
                "arrays_to_mgr": [
                    1850,
                    492,
                    1679
                ],
                "arr": [
                    5312,
                    5373,
                    499,
                    5365,
                    5366,
                    5368,
                    5369,
                    5370,
                    507,
                    5372,
                    5309,
                    5310
                ],
                "np.array": [
                    1305,
                    499,
                    1773,
                    1615
                ],
                "exc": [
                    505,
                    501
                ],
                "err": [
                    3336,
                    505,
                    503
                ],
                "arr.ndim": [
                    507
                ],
                "values": [
                    512,
                    2432,
                    2434,
                    6791,
                    7815,
                    7818,
                    7819,
                    5773,
                    5922,
                    2484,
                    2485,
                    4291,
                    4293,
                    4294,
                    1607,
                    1610,
                    1612,
                    7758,
                    1615,
                    4303,
                    1617,
                    4304,
                    4306,
                    7760,
                    7761,
                    4313,
                    4314,
                    8281,
                    7676,
                    4317,
                    7774,
                    8284,
                    4320,
                    7776,
                    2786,
                    2787,
                    4323,
                    2789,
                    4325,
                    7778,
                    8288,
                    8294,
                    8295,
                    8297,
                    2796,
                    8298,
                    3438,
                    8299,
                    8301,
                    8303,
                    8307,
                    3446,
                    8310,
                    508
                ],
                "cast_scalar_to_array": [
                    508,
                    3390
                ],
                "values.dtype": [
                    512,
                    4314,
                    4293
                ],
                "NDFrame.__init__": [
                    517
                ],
                "self.index": [
                    2561,
                    1026,
                    2563,
                    1412,
                    2436,
                    3331,
                    2568,
                    2444,
                    5260,
                    8209,
                    2322,
                    8210,
                    1045,
                    5142,
                    536,
                    2584,
                    6169,
                    7960,
                    1436,
                    3487,
                    8173,
                    3363,
                    4332,
                    8174,
                    3368,
                    4333,
                    2474,
                    2602,
                    6903,
                    558,
                    4657,
                    955,
                    7100,
                    4337,
                    2750,
                    3390,
                    3521,
                    2629,
                    2636,
                    3409,
                    2643,
                    2771,
                    8311,
                    7256,
                    2787,
                    4345,
                    4346,
                    1771,
                    2796,
                    1773,
                    4331,
                    1775,
                    3439,
                    4079,
                    2674,
                    4080,
                    1780,
                    2676,
                    1782,
                    2678,
                    4081,
                    4082,
                    4084,
                    2555,
                    4340,
                    3325,
                    4342
                ],
                "self.columns": [
                    1024,
                    897,
                    898,
                    1792,
                    1793,
                    901,
                    1030,
                    1413,
                    2436,
                    1033,
                    4356,
                    4363,
                    2444,
                    4365,
                    2574,
                    2319,
                    2576,
                    5385,
                    1426,
                    5519,
                    6161,
                    6923,
                    3350,
                    3351,
                    536,
                    1817,
                    3353,
                    4634,
                    5145,
                    6170,
                    7958,
                    1439,
                    4639,
                    7715,
                    2473,
                    4649,
                    5292,
                    558,
                    2482,
                    3507,
                    953,
                    6922,
                    8128,
                    2498,
                    2499,
                    3522,
                    6908,
                    3398,
                    3399,
                    2642,
                    3410,
                    7256,
                    2523,
                    8312,
                    2525,
                    4061,
                    2785,
                    8289,
                    1125,
                    1126,
                    8212,
                    6915,
                    8213,
                    619,
                    2544,
                    1777,
                    3440,
                    8176,
                    8177,
                    1397,
                    3445,
                    6904,
                    6906,
                    4348,
                    1790
                ],
                "List": [
                    522,
                    4049,
                    3186,
                    4086,
                    6462
                ],
                "Tuple": [
                    896,
                    905,
                    908,
                    4336,
                    6103,
                    539
                ],
                "self._data.any_extension_types": [
                    591
                ],
                "self._data": [
                    2467,
                    4804,
                    4581,
                    8167,
                    8203,
                    591,
                    592,
                    3228,
                    594,
                    3409,
                    2484,
                    6454,
                    2780,
                    4702
                ],
                "block.dtype": [
                    592
                ],
                "block": [
                    592
                ],
                "self._data.blocks": [
                    592
                ],
                "self._data.is_mixed_type": [
                    594
                ],
                "max_rows": [
                    2210,
                    732,
                    677,
                    647,
                    649,
                    713,
                    688,
                    819,
                    634,
                    603,
                    636,
                    604
                ],
                "get_option": [
                    677,
                    678,
                    679,
                    680,
                    681,
                    618,
                    682,
                    712,
                    713,
                    714,
                    715,
                    716,
                    663,
                    632,
                    603,
                    636
                ],
                "width": [
                    617,
                    683,
                    685,
                    623,
                    657,
                    691
                ],
                "height": [
                    617
                ],
                "console.get_console_size": [
                    617,
                    683
                ],
                "console": [
                    632,
                    617,
                    683,
                    629
                ],
                "max_columns": [
                    618,
                    622
                ],
                "nb_columns": [
                    619,
                    622,
                    623
                ],
                "ignore_width": [
                    629,
                    623
                ],
                "console.in_interactive_session": [
                    629
                ],
                "console.in_ipython_frontend": [
                    632
                ],
                "buf": [
                    672,
                    641,
                    674,
                    675,
                    705,
                    706,
                    708,
                    2024,
                    2026,
                    2027,
                    2028,
                    653,
                    654,
                    687,
                    2219,
                    2231,
                    696,
                    825
                ],
                "StringIO": [
                    672,
                    641,
                    705
                ],
                "d": [
                    649,
                    645,
                    653
                ],
                "d.iloc": [
                    649
                ],
                "d.to_string": [
                    653
                ],
                "value": [
                    3331,
                    2693,
                    3334,
                    654,
                    655,
                    3342,
                    3344,
                    3345,
                    3347,
                    2708,
                    2710,
                    3226,
                    3227,
                    3228,
                    3354,
                    3355,
                    3357,
                    3359,
                    2722,
                    2723,
                    2724,
                    3362,
                    3363,
                    3365,
                    3368,
                    3369,
                    3370,
                    3371,
                    3373,
                    3374,
                    3375,
                    3376,
                    3377,
                    3379,
                    3382,
                    3383,
                    2746,
                    3387,
                    3390,
                    3391,
                    2752,
                    2754,
                    3394,
                    3395,
                    3398,
                    2760,
                    2762,
                    3402,
                    3404,
                    3914,
                    2771,
                    2773,
                    2781,
                    2654,
                    3326,
                    3934,
                    2657,
                    2659,
                    2662,
                    2669,
                    2681,
                    2683,
                    2684,
                    3325,
                    2686,
                    2687
                ],
                "buf.getvalue": [
                    696,
                    675,
                    708,
                    654
                ],
                "repr_width": [
                    657,
                    655
                ],
                "l": [
                    655
                ],
                "value.split": [
                    655
                ],
                "info_repr_option": [
                    664,
                    663
                ],
                "self._repr_fits_horizontal_": [
                    665
                ],
                "self._repr_fits_vertical_": [
                    665
                ],
                "self._info_repr": [
                    704,
                    673
                ],
                "self.info": [
                    706,
                    674
                ],
                "min_rows": [
                    678,
                    714,
                    689,
                    818,
                    733
                ],
                "max_cols": [
                    2211,
                    679,
                    715,
                    690,
                    820,
                    2231,
                    734
                ],
                "max_colwidth": [
                    680,
                    692,
                    805
                ],
                "show_dimensions": [
                    2212,
                    681,
                    716,
                    821,
                    693,
                    735
                ],
                "_": [
                    4320,
                    2026,
                    683,
                    7250,
                    3387
                ],
                "self.to_string": [
                    686
                ],
                "val": [
                    708,
                    709,
                    710
                ],
                "replace": [
                    708,
                    3932
                ],
                "val.replace": [
                    709
                ],
                "formatter": [
                    740,
                    806,
                    2218,
                    718,
                    2196,
                    825
                ],
                "fmt.DataFrameFormatter": [
                    806,
                    2196,
                    718
                ],
                "fmt": [
                    806,
                    718,
                    752,
                    2193,
                    2196,
                    2133,
                    761,
                    762
                ],
                "formatter.to_html": [
                    2218,
                    740
                ],
                "FilePathOrBuffer": [
                    1856,
                    755
                ],
                "Sequence": [
                    1864,
                    4137,
                    756,
                    4597,
                    758,
                    4540
                ],
                "Union": [
                    6464,
                    6465,
                    4137,
                    6103,
                    4597,
                    758,
                    4598,
                    4540,
                    4541,
                    6462
                ],
                "fmt.formatters_type": [
                    761
                ],
                "fmt.float_format_type": [
                    762
                ],
                "option_context": [
                    805
                ],
                "col_space": [
                    809,
                    2199
                ],
                "na_rep": [
                    2200,
                    810
                ],
                "formatters": [
                    2201,
                    811
                ],
                "float_format": [
                    2202,
                    812
                ],
                "sparsify": [
                    2203,
                    813
                ],
                "justify": [
                    2193,
                    2204,
                    814
                ],
                "index_names": [
                    1794,
                    1796,
                    815,
                    1780,
                    1813,
                    1783,
                    1785,
                    1787,
                    1788,
                    2205,
                    1790
                ],
                "header": [
                    816,
                    2206
                ],
                "decimal": [
                    2213,
                    822
                ],
                "line_width": [
                    823
                ],
                "formatter.to_string": [
                    825
                ],
                "encoding": [
                    825,
                    2223
                ],
                "Substitution": [
                    744,
                    5768,
                    7115,
                    2124,
                    3596,
                    752,
                    5904,
                    6545,
                    2133,
                    3606,
                    4662,
                    2015
                ],
                "fmt.common_docstring": [
                    752,
                    2133
                ],
                "fmt.return_docstring": [
                    752,
                    2133
                ],
                "Styler": [
                    843
                ],
                "_shared_docs": [
                    904,
                    5769,
                    5775,
                    5905,
                    6551,
                    4381,
                    4385,
                    4389,
                    4393,
                    6575,
                    6334,
                    845,
                    3537,
                    3922,
                    5593,
                    6237,
                    2016,
                    3941,
                    5623,
                    895
                ],
                "self.columns.is_unique": [
                    897,
                    2498,
                    3399,
                    6161,
                    1397
                ],
                "self._get_item_cache": [
                    899,
                    2628,
                    2501,
                    2608,
                    2749
                ],
                "i": [
                    4352,
                    901,
                    902,
                    1799,
                    1800,
                    1655,
                    1674,
                    7950,
                    1785,
                    1658,
                    7327,
                    7329,
                    2467,
                    7332,
                    7335,
                    2474,
                    7341,
                    7342,
                    1842,
                    2482,
                    2484,
                    5050,
                    5053,
                    8288,
                    8289,
                    7912,
                    4081,
                    4082,
                    4339,
                    4340,
                    1783,
                    3449,
                    3450,
                    4349,
                    4350
                ],
                "self._ixs": [
                    902
                ],
                "Appender": [
                    904,
                    5769,
                    5905,
                    3602,
                    3607,
                    6551,
                    4381,
                    4385,
                    4389,
                    4393,
                    5545,
                    6575,
                    2227,
                    4663,
                    6333,
                    7116,
                    2001,
                    3537,
                    3922,
                    5593,
                    2016,
                    3941,
                    3564,
                    895
                ],
                "Iterable": [
                    896,
                    4644,
                    905,
                    908,
                    4336
                ],
                "Hashable": [
                    896,
                    905,
                    4137,
                    908,
                    4140,
                    4141,
                    4049,
                    4597,
                    4086,
                    4540
                ],
                "self.items": [
                    1408,
                    906,
                    4653,
                    2318,
                    1424,
                    7250,
                    1406
                ],
                "klass": [
                    954,
                    2795,
                    956,
                    2796
                ],
                "self._constructor_sliced": [
                    954,
                    8131,
                    2471,
                    2601,
                    2795,
                    8140,
                    7834
                ],
                "v": [
                    1408,
                    8353,
                    3298,
                    3299,
                    1799,
                    1674,
                    1838,
                    1424,
                    7250,
                    1432,
                    1626,
                    955,
                    956,
                    1629,
                    1406,
                    8351
                ],
                "self.values": [
                    2432,
                    5126,
                    3527,
                    2440,
                    5127,
                    7818,
                    7910,
                    7948,
                    3438,
                    1135,
                    2582,
                    5111,
                    5112,
                    1305,
                    8310,
                    955,
                    7774
                ],
                "s": [
                    7237,
                    7238,
                    7239,
                    8047,
                    956,
                    957,
                    8350,
                    8351
                ],
                "fields": [
                    1024,
                    1035,
                    1027
                ],
                "arrays.append": [
                    4097,
                    1026,
                    4100,
                    4104,
                    4082,
                    4084,
                    4090,
                    1629,
                    4094
                ],
                "fields.insert": [
                    1027
                ],
                "arrays.extend": [
                    1030
                ],
                "self.iloc": [
                    8288,
                    2693,
                    1030,
                    2760,
                    3208,
                    2669,
                    2681
                ],
                "can_return_named_tuples": [
                    1033,
                    1034
                ],
                "PY37": [
                    1033
                ],
                "name": [
                    4352,
                    1825,
                    1826,
                    4354,
                    4359,
                    1034,
                    1035,
                    4653,
                    4367,
                    4370,
                    1843,
                    1813,
                    1817,
                    7707,
                    1790
                ],
                "itertuple": [
                    1035,
                    1036
                ],
                "collections.namedtuple": [
                    1035
                ],
                "collections": [
                    1035,
                    8284
                ],
                "itertuple._make": [
                    1036
                ],
                "other": [
                    5121,
                    1155,
                    5124,
                    6917,
                    6918,
                    5255,
                    6920,
                    1161,
                    5257,
                    5514,
                    5260,
                    5515,
                    5390,
                    1167,
                    5263,
                    5264,
                    5517,
                    5267,
                    5521,
                    6923,
                    6927,
                    6928,
                    5272,
                    6930,
                    7059,
                    7068,
                    7069,
                    7071,
                    7073,
                    7076,
                    6921,
                    6903,
                    6904,
                    7090,
                    6922,
                    7503,
                    7504,
                    7506,
                    7507,
                    5112,
                    3552,
                    1124,
                    1125,
                    1126,
                    1130,
                    6892,
                    6893,
                    1136,
                    6896,
                    5106,
                    6897,
                    5108,
                    1142,
                    5111,
                    1144,
                    1146,
                    7547,
                    6909,
                    6910,
                    5119
                ],
                "common": [
                    1129,
                    1130,
                    1125,
                    1126
                ],
                "self.columns.union": [
                    1125
                ],
                "other.index": [
                    6904,
                    1125,
                    1126,
                    5255
                ],
                "left": [
                    1153,
                    7523,
                    7519,
                    1129,
                    1131,
                    7533,
                    1134,
                    5103,
                    5104,
                    7515,
                    7507,
                    7510,
                    1144,
                    1147,
                    7516,
                    1151
                ],
                "self.reindex": [
                    1129,
                    2579,
                    6916
                ],
                "right": [
                    7136,
                    7520,
                    7523,
                    1130,
                    1132,
                    7533,
                    5103,
                    5104,
                    7507,
                    7511,
                    7515,
                    7516
                ],
                "other.reindex": [
                    1130,
                    6923,
                    6910
                ],
                "lvals": [
                    1131,
                    1135,
                    1137,
                    1139,
                    1144,
                    1147,
                    1149
                ],
                "left.values": [
                    1131,
                    7533
                ],
                "rvals": [
                    1132,
                    1136,
                    1137,
                    1139,
                    1144,
                    1147,
                    1148,
                    1149
                ],
                "right.values": [
                    1132,
                    7533
                ],
                "np.asarray": [
                    1136,
                    3404
                ],
                "lvals.shape": [
                    1137,
                    1139
                ],
                "rvals.shape": [
                    1137,
                    1139
                ],
                "self._constructor": [
                    2435,
                    2443,
                    2701,
                    5142,
                    2583,
                    8217,
                    7460,
                    7725,
                    7350,
                    6455,
                    8130,
                    5315,
                    3529,
                    8138,
                    4815,
                    7255,
                    2787,
                    4712,
                    8181,
                    1143,
                    1151
                ],
                "np.dot": [
                    1144,
                    1147,
                    1149
                ],
                "left.index": [
                    1144,
                    1153,
                    1147,
                    1151
                ],
                "other.columns": [
                    1144,
                    6922,
                    5267
                ],
                "result": [
                    7694,
                    7698,
                    2579,
                    2580,
                    7700,
                    5142,
                    2583,
                    6167,
                    6168,
                    2586,
                    6169,
                    6170,
                    6172,
                    2594,
                    2595,
                    2599,
                    2600,
                    2601,
                    2602,
                    2605,
                    2606,
                    7776,
                    7782,
                    7801,
                    7802,
                    7803,
                    7804,
                    1149,
                    1150,
                    1151,
                    1153,
                    7809,
                    7819,
                    7821,
                    7824,
                    7825,
                    7826,
                    5269,
                    7831,
                    7834,
                    7835,
                    5283,
                    5312,
                    5315,
                    7912,
                    7913,
                    2317,
                    7950,
                    7951,
                    2322,
                    2323,
                    2325,
                    1305,
                    1306,
                    3446,
                    3448,
                    3450,
                    3452,
                    3453,
                    3455,
                    2435,
                    2443,
                    2447,
                    6555,
                    6557,
                    6560,
                    6562,
                    2471,
                    6568,
                    6569,
                    6570,
                    2477,
                    2478,
                    5041,
                    4531,
                    2485,
                    4534,
                    5045,
                    2488,
                    4536,
                    2490,
                    5049,
                    5050,
                    5052,
                    5053,
                    5054,
                    8133,
                    8137,
                    8138,
                    8140,
                    8143,
                    8145,
                    5076,
                    5079,
                    5080,
                    5082,
                    5083,
                    5084,
                    7645,
                    7650,
                    2023,
                    7655,
                    2025,
                    7657,
                    4587,
                    2028,
                    4590,
                    4591
                ],
                "result.ndim": [
                    8137,
                    7802,
                    1150
                ],
                "self.dot": [
                    1161
                ],
                "T": [
                    3375,
                    1167,
                    2449,
                    6579,
                    7322,
                    3357,
                    6910
                ],
                "self.T.dot": [
                    1167
                ],
                "self.T": [
                    6568,
                    6579,
                    1167
                ],
                "np.transpose": [
                    1167
                ],
                "orient": [
                    1409,
                    1443,
                    1423,
                    1425,
                    1405,
                    1237,
                    1238,
                    1435,
                    1245,
                    1407
                ],
                "orient.lower": [
                    1409,
                    1423,
                    1425,
                    1237,
                    1435,
                    1405,
                    1407
                ],
                "data.values": [
                    1241,
                    7809,
                    1244,
                    7815
                ],
                "_from_nested_dict": [
                    1242
                ],
                "data.keys": [
                    1244
                ],
                "cls": [
                    1601,
                    1251,
                    1681,
                    1851,
                    1596
                ],
                "warnings.warn": [
                    2556,
                    7708,
                    1398
                ],
                "warnings": [
                    2556,
                    7708,
                    1398
                ],
                "into_c": [
                    1408,
                    1410,
                    1438,
                    1424,
                    1432,
                    1404,
                    1406
                ],
                "com.standardize_mapping": [
                    1404
                ],
                "com": [
                    2626,
                    3299,
                    1417,
                    3373,
                    1424,
                    2673,
                    2515,
                    2647,
                    1432,
                    1404,
                    2494
                ],
                "into": [
                    1404,
                    1406
                ],
                "startswith": [
                    1409,
                    1423,
                    1425,
                    1435,
                    1405,
                    1407
                ],
                "v.to_dict": [
                    1406
                ],
                "v.tolist": [
                    1408
                ],
                "self.index.tolist": [
                    1412
                ],
                "self.columns.tolist": [
                    1426,
                    1413
                ],
                "com.maybe_box_datetimelike": [
                    1424,
                    1417,
                    2626,
                    1432
                ],
                "t": [
                    1440,
                    1417,
                    1418,
                    1439
                ],
                "self.itertuples": [
                    1440,
                    1418,
                    1429
                ],
                "rows": [
                    1433,
                    1427
                ],
                "row": [
                    2434,
                    1428,
                    1429,
                    1432,
                    1433
                ],
                "row.items": [
                    1432
                ],
                "self.index.is_unique": [
                    1436
                ],
                "gbq.to_gbq": [
                    1539
                ],
                "gbq": [
                    1539
                ],
                "destination_table": [
                    1541
                ],
                "project_id": [
                    1542
                ],
                "chunksize": [
                    1543
                ],
                "reauth": [
                    1544
                ],
                "if_exists": [
                    1545
                ],
                "auth_local_webserver": [
                    1546
                ],
                "table_schema": [
                    1547
                ],
                "location": [
                    1548
                ],
                "progress_bar": [
                    1549
                ],
                "credentials": [
                    1550
                ],
                "is_iterator": [
                    2529,
                    1594
                ],
                "nrows": [
                    1609,
                    1595,
                    1612
                ],
                "first_row": [
                    1604,
                    1605,
                    1607,
                    1599
                ],
                "first_row.dtype.names": [
                    1604
                ],
                "first_row.dtype": [
                    1604,
                    1605
                ],
                "values.extend": [
                    1612
                ],
                "itertools.islice": [
                    1612
                ],
                "itertools": [
                    1612,
                    1790
                ],
                "arr_columns": [
                    1637,
                    1639,
                    1672,
                    1641,
                    1673,
                    1676,
                    1645,
                    1663,
                    1679,
                    1621,
                    1625,
                    1628,
                    1631
                ],
                "data.items": [
                    1626,
                    8350
                ],
                "arr_columns.append": [
                    1628
                ],
                "reorder_arrays": [
                    1631
                ],
                "coerce_float": [
                    1639
                ],
                "exclude": [
                    3202,
                    3172,
                    1669,
                    3173,
                    1671,
                    1672,
                    3177,
                    3178,
                    3204,
                    1677,
                    1647,
                    1648,
                    1650,
                    1656,
                    3162,
                    3163,
                    3165
                ],
                "result_index": [
                    1666,
                    1668,
                    1679,
                    1652,
                    7548,
                    1658,
                    7547,
                    1660
                ],
                "columns.get_loc": [
                    1655
                ],
                "exclude.add": [
                    1656
                ],
                "index_data": [
                    1668,
                    1663
                ],
                "arr_columns.get_loc": [
                    1673,
                    1663
                ],
                "field": [
                    1663
                ],
                "ensure_index_from_sequences": [
                    1668,
                    4117
                ],
                "exclude.update": [
                    1669
                ],
                "arr_exclude": [
                    1672,
                    1673,
                    1676
                ],
                "x": [
                    5376,
                    3171,
                    3172,
                    5380,
                    6789,
                    6790,
                    1672,
                    6791,
                    7530,
                    4686,
                    7504,
                    7728,
                    7706
                ],
                "to_remove": [
                    1673,
                    1674,
                    4107,
                    4086,
                    4124
                ],
                "col": [
                    4096,
                    4097,
                    4099,
                    4100,
                    4104,
                    1673,
                    4105,
                    4107,
                    2318,
                    5519,
                    5520,
                    5521,
                    5270,
                    5271,
                    5272,
                    8351,
                    8352,
                    8353,
                    5283,
                    5541,
                    5292,
                    4653,
                    2745,
                    2749,
                    7230,
                    5312,
                    2625,
                    7232,
                    2628,
                    2760,
                    2762,
                    2763,
                    2642,
                    4050,
                    2644,
                    4052,
                    4056,
                    4061,
                    4063,
                    8288,
                    8289,
                    4066,
                    4087,
                    4088,
                    4089,
                    4090,
                    4091,
                    4092,
                    4094,
                    4095
                ],
                "arr_columns.drop": [
                    1676
                ],
                "columns.drop": [
                    1677
                ],
                "ABCMultiIndex": [
                    3399,
                    4778,
                    1771,
                    5052,
                    2544,
                    4080,
                    4337,
                    5073,
                    5079,
                    5045,
                    1782,
                    3350,
                    4088,
                    5049,
                    5082,
                    7668,
                    4348
                ],
                "ix_vals": [
                    1777,
                    1773,
                    1775
                ],
                "self.index.values": [
                    1773,
                    1775
                ],
                "_internal_get_values": [
                    1792,
                    1777
                ],
                "c": [
                    1792,
                    1793,
                    7334,
                    7336,
                    7338,
                    7340,
                    7341,
                    2318,
                    7342,
                    7533,
                    1777,
                    3449,
                    3450,
                    4124,
                    4125
                ],
                "count": [
                    4517,
                    4520,
                    4522,
                    4524,
                    1779,
                    1785,
                    1786
                ],
                "self.index.names": [
                    4340,
                    1780,
                    4079
                ],
                "n": [
                    5025,
                    3448,
                    3432,
                    3433,
                    3437,
                    4339,
                    4340,
                    1783,
                    1784,
                    4089,
                    4090,
                    4924
                ],
                "names": [
                    4352,
                    1793,
                    4098,
                    4101,
                    4105,
                    4077,
                    4079,
                    4338,
                    4117,
                    1846,
                    4345,
                    4091,
                    1790,
                    4095
                ],
                "itertools.chain": [
                    1790
                ],
                "index_len": [
                    1842,
                    1811,
                    1796,
                    1815
                ],
                "formats": [
                    1840,
                    1846,
                    1797,
                    1838
                ],
                "dtype_mapping": [
                    1824,
                    1825,
                    1826,
                    1827,
                    1828,
                    1830,
                    1837,
                    1839,
                    1840,
                    1843,
                    1812,
                    1816
                ],
                "index_dtypes": [
                    1812
                ],
                "column_dtypes": [
                    1816
                ],
                "is_dict_like": [
                    1824
                ],
                "formats.append": [
                    1840,
                    1838
                ],
                "v.dtype": [
                    1838
                ],
                "np.dtype": [
                    1839
                ],
                "element": [
                    1842,
                    1843
                ],
                "msg": [
                    7744,
                    2945,
                    2946,
                    1843,
                    1844,
                    7740
                ],
                "np.rec.fromarrays": [
                    1846
                ],
                "np.rec": [
                    1846
                ],
                "np.recarray": [
                    1685
                ],
                "Dict": [
                    1857,
                    1965,
                    1862
                ],
                "Label": [
                    1864,
                    1857,
                    1862
                ],
                "datetime.datetime": [
                    1860
                ],
                "datetime": [
                    1860
                ],
                "version": [
                    1952,
                    1954,
                    1958,
                    1966,
                    1969,
                    1971
                ],
                "convert_strl": [
                    1968,
                    1955
                ],
                "kwargs": [
                    2947,
                    2948,
                    2949,
                    3075,
                    3076,
                    3077,
                    3079,
                    6557,
                    6561,
                    3620,
                    3621,
                    3623,
                    3624,
                    3625,
                    6568,
                    6571,
                    1965,
                    1968,
                    1971,
                    6579,
                    6580,
                    1983,
                    2121,
                    7241,
                    3298,
                    2020,
                    2021,
                    2023,
                    3069,
                    3070
                ],
                "Any": [
                    4336,
                    1965
                ],
                "writer": [
                    1985,
                    1974
                ],
                "statawriter": [
                    1974
                ],
                "path": [
                    1999,
                    2116,
                    1975
                ],
                "convert_dates": [
                    1977
                ],
                "byteorder": [
                    1978
                ],
                "time_stamp": [
                    1979
                ],
                "data_label": [
                    1980
                ],
                "write_index": [
                    1981
                ],
                "variable_labels": [
                    1982
                ],
                "writer.write_file": [
                    1985
                ],
                "deprecate_kwarg": [
                    1987,
                    1853,
                    2031
                ],
                "to_feather": [
                    1999
                ],
                "IO": [
                    2018
                ],
                "kwargs.setdefault": [
                    2020,
                    2021
                ],
                "tabulate": [
                    2022,
                    2023
                ],
                "import_optional_dependency": [
                    2022
                ],
                "tabulate.tabulate": [
                    2023
                ],
                "get_filepath_or_buffer": [
                    2026
                ],
                "mode": [
                    2026
                ],
                "buf.writelines": [
                    2028
                ],
                "to_parquet": [
                    2114
                ],
                "engine": [
                    2629,
                    2117,
                    2632,
                    2750,
                    2751
                ],
                "compression": [
                    2118
                ],
                "partition_cols": [
                    2120
                ],
                "fmt._VALID_JUSTIFY_PARAMETERS": [
                    2193
                ],
                "bold_rows": [
                    2208
                ],
                "escape": [
                    2209
                ],
                "table_id": [
                    2214
                ],
                "render_links": [
                    2215
                ],
                "classes": [
                    2220
                ],
                "notebook": [
                    2221
                ],
                "border": [
                    2222
                ],
                "info": [
                    2227,
                    2231
                ],
                "verbose": [
                    2231
                ],
                "memory_usage": [
                    2231
                ],
                "null_counts": [
                    2231
                ],
                "info.__doc__": [
                    2227
                ],
                "c.memory_usage": [
                    2318
                ],
                "deep": [
                    2322,
                    2318
                ],
                "append": [
                    2322,
                    6908,
                    4078
                ],
                "self.index.memory_usage": [
                    2322
                ],
                "nv.validate_transpose": [
                    2424
                ],
                "nv": [
                    2424,
                    7241
                ],
                "args": [
                    6561,
                    3620,
                    6725,
                    6568,
                    7241,
                    6571,
                    6579,
                    6580,
                    2424,
                    6557
                ],
                "dtypes": [
                    3173,
                    3174,
                    2427,
                    2428,
                    2430
                ],
                "self.dtypes": [
                    3200,
                    3206,
                    7706,
                    7831,
                    3194,
                    2427
                ],
                "self._is_homogeneous_type": [
                    2428
                ],
                "is_extension_array_dtype": [
                    5369,
                    3394,
                    2428
                ],
                "arr_type": [
                    2434,
                    2431
                ],
                "dtype.construct_array_type": [
                    2431
                ],
                "new_values": [
                    2434,
                    2467,
                    2436,
                    2470,
                    3526,
                    2440,
                    2472,
                    2442,
                    2475,
                    2444,
                    3529,
                    2582,
                    2584
                ],
                "arr_type._from_sequence": [
                    2434
                ],
                "self.values.T": [
                    2440
                ],
                "new_values.copy": [
                    2442
                ],
                "result.__finalize__": [
                    2586,
                    2447
                ],
                "transpose": [
                    2449
                ],
                "axis": [
                    7681,
                    8207,
                    7696,
                    8208,
                    8211,
                    3604,
                    8215,
                    7718,
                    7723,
                    7724,
                    7728,
                    7736,
                    6722,
                    4675,
                    7747,
                    7751,
                    7753,
                    4686,
                    4693,
                    4703,
                    7778,
                    7787,
                    7810,
                    7816,
                    7830,
                    4766,
                    4767,
                    3761,
                    4803,
                    7875,
                    7909,
                    7910,
                    7911,
                    7913,
                    7947,
                    7948,
                    7949,
                    7951,
                    6453,
                    3896,
                    3916,
                    7500,
                    7504,
                    7509,
                    3944,
                    8049,
                    7546,
                    4501,
                    4505,
                    4506,
                    6553,
                    6557,
                    6561,
                    2466,
                    6565,
                    6577,
                    6578,
                    4531,
                    5043,
                    5045,
                    5048,
                    8120,
                    8121,
                    5072,
                    5073,
                    7634,
                    7636,
                    5078,
                    7644,
                    7645,
                    3554,
                    7650,
                    7653,
                    7655,
                    5609,
                    8171,
                    8172,
                    5614,
                    8175,
                    7665,
                    7666,
                    8179,
                    7670
                ],
                "self._data.fast_xs": [
                    2467
                ],
                "new_values.base": [
                    2470
                ],
                "new_values.dtype": [
                    2475
                ],
                "result._set_is_copy": [
                    2605,
                    2477
                ],
                "label": [
                    2488,
                    2482,
                    2485
                ],
                "self._data.iget": [
                    3409,
                    2484
                ],
                "self._box_col_values": [
                    2789,
                    2485
                ],
                "result._set_as_cached": [
                    2488
                ],
                "key": [
                    2561,
                    2690,
                    2563,
                    2568,
                    2569,
                    2698,
                    2699,
                    2701,
                    2574,
                    2703,
                    2577,
                    2710,
                    3350,
                    3351,
                    3353,
                    2723,
                    2724,
                    2602,
                    2608,
                    2493,
                    2494,
                    2496,
                    2498,
                    2500,
                    2501,
                    3398,
                    2504,
                    3400,
                    2511,
                    2512,
                    2515,
                    2516,
                    6483,
                    2647,
                    2520,
                    2650,
                    2524,
                    2525,
                    2656,
                    2529,
                    2530,
                    2531,
                    2657,
                    2658,
                    2659,
                    2662,
                    2785,
                    2669,
                    2545,
                    2673,
                    2674,
                    2676,
                    2678,
                    2679,
                    2555,
                    2684,
                    2686
                ],
                "lib.item_from_zerodim": [
                    2493
                ],
                "lib": [
                    6790,
                    4294,
                    6791,
                    7692,
                    3453,
                    2493
                ],
                "com.apply_if_callable": [
                    3299,
                    2494,
                    2647
                ],
                "is_hashable": [
                    2496
                ],
                "self.columns.nlevels": [
                    2499,
                    4356,
                    4365,
                    2523
                ],
                "self._getitem_multilevel": [
                    2524,
                    2500
                ],
                "indexer": [
                    2689,
                    2693,
                    2569,
                    2570,
                    3487,
                    3491,
                    4774,
                    4781,
                    3507,
                    3511,
                    4799,
                    4804,
                    3525,
                    3527,
                    2504,
                    2505,
                    4810,
                    2508,
                    4687,
                    4688,
                    2650,
                    2651,
                    4698,
                    2525,
                    2654,
                    2526,
                    2527,
                    4703,
                    2531,
                    4707,
                    2534,
                    2535,
                    2537,
                    2679,
                    2681
                ],
                "convert_to_index_sliceable": [
                    2504,
                    2650
                ],
                "self._slice": [
                    2508
                ],
                "self.where": [
                    2512
                ],
                "com.is_bool_indexer": [
                    2673,
                    2515
                ],
                "self._getitem_bool_array": [
                    2516
                ],
                "is_single_key": [
                    2520,
                    2522,
                    2539
                ],
                "self.columns.get_loc": [
                    2785,
                    2574,
                    2642,
                    3351,
                    2525
                ],
                "is_integer": [
                    7248,
                    2526
                ],
                "self.loc._get_listlike_indexer": [
                    2689,
                    2531
                ],
                "self.loc": [
                    2689,
                    2531,
                    2952,
                    2762,
                    4531
                ],
                "np.where": [
                    2535
                ],
                "self._take_with_is_copy": [
                    2537,
                    2570
                ],
                "data.shape": [
                    2544
                ],
                "key.index.equals": [
                    2555
                ],
                "key.index": [
                    2555
                ],
                "check_bool_indexer": [
                    2568,
                    2678
                ],
                "key.nonzero": [
                    2569,
                    2679
                ],
                "loc": [
                    2754,
                    2632,
                    2633,
                    2574,
                    2575,
                    2576,
                    2582,
                    3351,
                    3352,
                    3353,
                    3228,
                    2751
                ],
                "new_columns": [
                    3522,
                    5315,
                    3529,
                    3532,
                    2576,
                    2577,
                    2579,
                    3508,
                    3507,
                    5267,
                    3511,
                    5270
                ],
                "result_columns": [
                    2584,
                    2577,
                    2580
                ],
                "maybe_droplevels": [
                    2577,
                    3353
                ],
                "self._is_mixed_type": [
                    2578,
                    3437
                ],
                "result.columns": [
                    2594,
                    2595,
                    2580,
                    5082,
                    5083,
                    5052,
                    5053
                ],
                "top": [
                    2595,
                    2596,
                    2597,
                    2598
                ],
                "takeable": [
                    2624,
                    2744,
                    2759
                ],
                "series": [
                    2752,
                    2625,
                    2626,
                    2754,
                    2628,
                    5305,
                    5274,
                    5287,
                    2633,
                    5289,
                    5297,
                    5277,
                    5271,
                    2745,
                    2746,
                    2749,
                    5309
                ],
                "self._iget_item_cache": [
                    2625,
                    2745
                ],
                "series._values": [
                    2754,
                    2633,
                    2626
                ],
                "self.index._engine": [
                    2629,
                    2750
                ],
                "engine.get_loc": [
                    2632,
                    2751
                ],
                "self.index.nlevels": [
                    4081,
                    2636,
                    4332
                ],
                "self.index.get_loc": [
                    2643
                ],
                "self._get_value": [
                    3450,
                    2644
                ],
                "self._setitem_slice": [
                    2654
                ],
                "self._setitem_frame": [
                    2657
                ],
                "self._setitem_array": [
                    2659
                ],
                "self._set_item": [
                    2662
                ],
                "self._check_setitem_copy": [
                    2692,
                    2730,
                    2668,
                    2709,
                    2680
                ],
                "self.iloc._setitem_with_indexer": [
                    2681,
                    2669,
                    2693
                ],
                "value.columns": [
                    3354,
                    2684,
                    2686
                ],
                "k1": [
                    2686,
                    2687
                ],
                "k2": [
                    2686,
                    2687
                ],
                "key.shape": [
                    2699
                ],
                "self.shape": [
                    8310,
                    2699,
                    3182
                ],
                "self._construct_axes_dict": [
                    2701
                ],
                "key.values.size": [
                    2703
                ],
                "key.values": [
                    2703
                ],
                "is_bool_dtype": [
                    2703
                ],
                "self._check_inplace_setting": [
                    2708
                ],
                "self._where": [
                    2710
                ],
                "self._ensure_valid_index": [
                    2722,
                    3226
                ],
                "self._sanitize_column": [
                    2723,
                    3227
                ],
                "NDFrame._set_item": [
                    2724
                ],
                "series._set_value": [
                    2746
                ],
                "validate_numeric_casting": [
                    2752
                ],
                "series.dtype": [
                    2752,
                    5274
                ],
                "self._item_cache.pop": [
                    2763
                ],
                "self._item_cache": [
                    2763
                ],
                "self._data.reindex_axis": [
                    2780
                ],
                "value.index.copy": [
                    2781
                ],
                "value.index": [
                    3325,
                    2781,
                    3334
                ],
                "np.nan": [
                    4320,
                    7334,
                    7912,
                    7950,
                    4304,
                    7453,
                    3483,
                    2781,
                    3614,
                    7551
                ],
                "items": [
                    2785,
                    2787,
                    2796,
                    2789
                ],
                "values.ndim": [
                    2786,
                    7758
                ],
                "values.T": [
                    2787
                ],
                "inplace": [
                    3079,
                    2958,
                    3604,
                    4373,
                    4500,
                    4764,
                    4132,
                    3765,
                    4533,
                    3898,
                    4794,
                    4284,
                    4285,
                    4674,
                    4039,
                    4812,
                    3917,
                    3935,
                    4576,
                    4579,
                    4709,
                    4071,
                    3068,
                    2943
                ],
                "validate_bool_kwarg": [
                    4576,
                    4764,
                    4674,
                    4039,
                    4284,
                    4500,
                    3068,
                    2943
                ],
                "expr": [
                    2944,
                    2945,
                    2949,
                    3079
                ],
                "kwargs.pop": [
                    2947,
                    3623,
                    3624,
                    3069,
                    3070
                ],
                "res": [
                    2949,
                    2952,
                    2956,
                    7769,
                    7765,
                    7766,
                    7767,
                    7768,
                    7097,
                    7100
                ],
                "self.eval": [
                    2949
                ],
                "new_data": [
                    5121,
                    5126,
                    5127,
                    2952,
                    5128,
                    8203,
                    2956,
                    8205,
                    2959,
                    2961,
                    8210,
                    8213,
                    8217,
                    8349,
                    8352,
                    8353,
                    8354,
                    6454,
                    6455,
                    4804,
                    4807,
                    4810,
                    4813,
                    4815,
                    4702,
                    4707,
                    4581,
                    4710,
                    8167,
                    4584,
                    4585,
                    4712,
                    8169,
                    8174,
                    8177,
                    5108,
                    8181,
                    5112,
                    5114
                ],
                "self._update_inplace": [
                    4710,
                    4585,
                    4813,
                    2959,
                    4534
                ],
                "resolvers": [
                    3074,
                    3069,
                    3077,
                    3071
                ],
                "index_resolvers": [
                    3072,
                    3074
                ],
                "self._get_index_resolvers": [
                    3072
                ],
                "column_resolvers": [
                    3073,
                    3074
                ],
                "self._get_cleaned_column_resolvers": [
                    3073
                ],
                "kwargs.get": [
                    3077
                ],
                "_eval": [
                    3079
                ],
                "include": [
                    3171,
                    3173,
                    3177,
                    3178,
                    3160,
                    3161,
                    3196,
                    3165,
                    3198
                ],
                "selection": [
                    3165,
                    3167
                ],
                "infer_dtype_from_object": [
                    3171,
                    3172
                ],
                "invalidate_string_dtypes": [
                    3174
                ],
                "include.isdisjoint": [
                    3177
                ],
                "keep_these": [
                    3200,
                    3206,
                    3208,
                    3182
                ],
                "np.full": [
                    3182
                ],
                "extracted_dtypes": [
                    3192,
                    3187
                ],
                "unique_dtype": [
                    3188,
                    3189,
                    3190
                ],
                "unique_dtypes": [
                    3194,
                    3204,
                    3189,
                    3198
                ],
                "unique_dtype.type": [
                    3190
                ],
                "dtypes_set": [
                    3190
                ],
                "self.dtypes.unique": [
                    3194
                ],
                "included_dtypes": [
                    3200,
                    3197
                ],
                "extract_unique_dtypes_from_dtypes_set": [
                    3203,
                    3197
                ],
                "self.dtypes.isin": [
                    3200,
                    3206
                ],
                "excluded_dtypes": [
                    3203,
                    3206
                ],
                "keep_these.values": [
                    3208
                ],
                "column": [
                    6159,
                    6167,
                    6168,
                    3227,
                    3228
                ],
                "self._data.insert": [
                    3228
                ],
                "allow_duplicates": [
                    3228
                ],
                "self.copy": [
                    3296,
                    4288,
                    4074,
                    5261,
                    5041,
                    5076,
                    4797,
                    4574
                ],
                "kwargs.items": [
                    3298
                ],
                "value.index.equals": [
                    3325
                ],
                "value._values.copy": [
                    3326
                ],
                "value._values": [
                    3326
                ],
                "_values": [
                    4104,
                    5521,
                    3331,
                    5520
                ],
                "value.reindex": [
                    3355,
                    3331
                ],
                "value.index.is_unique": [
                    3334
                ],
                "reindexer": [
                    3345,
                    3357
                ],
                "cols": [
                    7456,
                    8128,
                    8130,
                    7715,
                    7460,
                    7716,
                    8131,
                    7311,
                    7312,
                    7447,
                    7350,
                    7446,
                    3353,
                    3354,
                    3355,
                    7324
                ],
                "cols.equals": [
                    3354
                ],
                "value.copy": [
                    3377,
                    3362,
                    3379,
                    3375
                ],
                "sanitize_index": [
                    3368,
                    3363
                ],
                "is_sequence": [
                    3365,
                    4679
                ],
                "maybe_convert_platform": [
                    3371
                ],
                "com.asarray_tuplesafe": [
                    3373
                ],
                "value.ndim": [
                    3398,
                    3374
                ],
                "is_object_dtype": [
                    7778,
                    3452,
                    7821,
                    3382
                ],
                "value.dtype": [
                    3382
                ],
                "maybe_infer_to_datetimelike": [
                    3383
                ],
                "infer_dtype": [
                    3387,
                    3391
                ],
                "infer_dtype_from_scalar": [
                    3387
                ],
                "maybe_cast_to_datetime": [
                    3391
                ],
                "broadcast": [
                    3398
                ],
                "existing_piece": [
                    3400,
                    3401,
                    3402
                ],
                "np.tile": [
                    3402
                ],
                "existing_piece.columns": [
                    3402
                ],
                "np.atleast_2d": [
                    3404
                ],
                "item": [
                    3409,
                    3410
                ],
                "idx": [
                    7460,
                    7312,
                    3409,
                    3410,
                    7350,
                    7447
                ],
                "row_labels": [
                    3432,
                    3449,
                    3439
                ],
                "col_labels": [
                    3440,
                    3433,
                    3449
                ],
                "thresh": [
                    4520,
                    3436,
                    3437,
                    4519
                ],
                "ridx": [
                    3441,
                    3445,
                    3439
                ],
                "self.index.get_indexer": [
                    3439
                ],
                "cidx": [
                    3440,
                    3443,
                    3445
                ],
                "self.columns.get_indexer": [
                    3440,
                    6922
                ],
                "flat_index": [
                    3445,
                    3446
                ],
                "values.flat": [
                    3446
                ],
                "np.empty": [
                    3448,
                    7452,
                    7325,
                    4303
                ],
                "r": [
                    3449,
                    3450
                ],
                "lib.maybe_convert_objects": [
                    3453,
                    4294
                ],
                "frame": [
                    3461,
                    4104,
                    3465,
                    3471,
                    3475,
                    4125,
                    4130,
                    4133,
                    7108,
                    7110,
                    7639,
                    7641,
                    7644,
                    7645,
                    7647,
                    7650,
                    7653,
                    7655,
                    4072,
                    4074,
                    7661,
                    7663,
                    7665,
                    7666,
                    7673,
                    7676,
                    7679
                ],
                "axes": [
                    3521,
                    3522,
                    3620,
                    3621,
                    3463,
                    3469
                ],
                "frame._reindex_columns": [
                    3465
                ],
                "method": [
                    3488,
                    3938,
                    3558,
                    7527,
                    3466,
                    3915,
                    7530,
                    3472,
                    7504,
                    7538,
                    7315,
                    3508,
                    7317,
                    7347,
                    7319,
                    7513,
                    7323
                ],
                "level": [
                    7686,
                    7687,
                    7689,
                    3466,
                    7690,
                    7691,
                    3472,
                    3488,
                    4772,
                    4775,
                    3508,
                    3764,
                    3899,
                    6098,
                    6099,
                    7635,
                    6101,
                    7636,
                    6235,
                    3555,
                    5607,
                    4328,
                    4329,
                    4330,
                    4331,
                    4332,
                    4333,
                    5615,
                    4350
                ],
                "limit": [
                    3488,
                    3936,
                    3559,
                    3466,
                    3918,
                    3472,
                    3508
                ],
                "tolerance": [
                    3472,
                    3466,
                    3508,
                    3488
                ],
                "frame._reindex_index": [
                    3471
                ],
                "new_index": [
                    3488,
                    3521,
                    3491,
                    5315,
                    4327,
                    3529,
                    5258,
                    3532,
                    4333,
                    5260,
                    4372,
                    3487
                ],
                "self.index.reindex": [
                    3521,
                    3487
                ],
                "self._reindex_with_indexers": [
                    3490,
                    3531,
                    3510
                ],
                "self.columns.reindex": [
                    3522,
                    3507
                ],
                "row_indexer": [
                    3521,
                    3532,
                    3524,
                    3525
                ],
                "col_indexer": [
                    3522,
                    3532,
                    3524,
                    3525
                ],
                "algorithms.take_2d_multi": [
                    3526
                ],
                "algorithms": [
                    5024,
                    3526,
                    4628,
                    8310,
                    4924
                ],
                "align": [
                    3551
                ],
                "join": [
                    6168,
                    3553,
                    5509
                ],
                "fill_axis": [
                    3560
                ],
                "broadcast_axis": [
                    3561
                ],
                "set_axis": [
                    3604
                ],
                "labels": [
                    7810,
                    7816,
                    3604,
                    4628,
                    4631,
                    7834,
                    4767,
                    4771,
                    4774,
                    7719,
                    4778,
                    7724,
                    4654,
                    4782,
                    3760,
                    4656,
                    4791,
                    4792,
                    4800,
                    4297,
                    4298,
                    4306
                ],
                "NDFrame.set_axis.__doc__": [
                    3602
                ],
                "NDFrame.set_axis": [
                    3602
                ],
                "validate_axis_style_args": [
                    3620
                ],
                "kwargs.update": [
                    3621
                ],
                "self._ensure_type": [
                    3625,
                    8285,
                    3943
                ],
                "reindex": [
                    3625
                ],
                "NDFrame.reindex.__doc__": [
                    3607
                ],
                "NDFrame.reindex": [
                    3607
                ],
                "rewrite_axis_style_signature": [
                    3608,
                    3769
                ],
                "drop": [
                    7543,
                    4106,
                    4335,
                    3759
                ],
                "errors": [
                    5526,
                    3900,
                    3766,
                    5511
                ],
                "Renamer": [
                    3777,
                    3778,
                    3775
                ],
                "Axis": [
                    3779
                ],
                "Level": [
                    3782
                ],
                "rename": [
                    3892
                ],
                "mapper": [
                    3893
                ],
                "fillna": [
                    3913
                ],
                "downcast": [
                    3919
                ],
                "doc": [
                    3903
                ],
                "NDFrame.fillna": [
                    3903
                ],
                "to_replace": [
                    3933
                ],
                "regex": [
                    3937
                ],
                "shift": [
                    3944
                ],
                "periods": [
                    3944,
                    6454
                ],
                "freq": [
                    3944,
                    8174,
                    8177,
                    8210,
                    8213
                ],
                "keys": [
                    4040,
                    4041,
                    4686,
                    4687,
                    4050,
                    4087
                ],
                "err_msg": [
                    4057,
                    4043,
                    4063
                ],
                "missing": [
                    4066,
                    4068,
                    4069,
                    4365,
                    4366,
                    4049
                ],
                "ABCIndexClass": [
                    4092,
                    5377,
                    4052,
                    5365
                ],
                "ABCSeries": [
                    4092,
                    5377,
                    4052,
                    5365
                ],
                "abc.Iterator": [
                    4099,
                    4052
                ],
                "found": [
                    4065,
                    4061
                ],
                "missing.append": [
                    4066
                ],
                "self.index._get_level_values": [
                    4082
                ],
                "col.nlevels": [
                    4089
                ],
                "col._get_level_values": [
                    4090
                ],
                "names.extend": [
                    4091
                ],
                "col.names": [
                    4091
                ],
                "names.append": [
                    4105,
                    4098,
                    4101,
                    4095
                ],
                "col.name": [
                    4095
                ],
                "to_remove.append": [
                    4107
                ],
                "verify_integrity": [
                    6934,
                    4119
                ],
                "index.is_unique": [
                    4119
                ],
                "duplicates": [
                    4120,
                    4121
                ],
                "unique": [
                    4120
                ],
                "index.duplicated": [
                    4120
                ],
                "index._cleanup": [
                    4128
                ],
                "frame.index": [
                    4130
                ],
                "new_obj": [
                    4288,
                    4327,
                    4370,
                    4372,
                    4374,
                    4286
                ],
                "index._values": [
                    4291
                ],
                "PeriodIndex": [
                    4292
                ],
                "DatetimeIndex": [
                    4292
                ],
                "np.object_": [
                    4293
                ],
                "mask.all": [
                    5538,
                    4302
                ],
                "values.fill": [
                    4304
                ],
                "values.take": [
                    4306
                ],
                "values_type": [
                    4313,
                    4322,
                    4323,
                    4316
                ],
                "values_dtype": [
                    4314,
                    4323
                ],
                "DatetimeLikeArray": [
                    4322,
                    4316
                ],
                "values._data": [
                    4317
                ],
                "maybe_upcast_putmask": [
                    4320
                ],
                "self.index._get_level_number": [
                    4331
                ],
                "lev": [
                    4369,
                    4331,
                    4349
                ],
                "self.index.droplevel": [
                    4333
                ],
                "to_insert": [
                    4336,
                    4346,
                    4349,
                    4342
                ],
                "self.index.levels": [
                    4342
                ],
                "self.index.codes": [
                    4342
                ],
                "default": [
                    4344,
                    4345
                ],
                "self.index.name": [
                    4345,
                    6903
                ],
                "multi_col": [
                    4353,
                    4348
                ],
                "lab": [
                    4369,
                    4349
                ],
                "col_name": [
                    4361,
                    4354,
                    4356,
                    4364
                ],
                "col_fill": [
                    4361,
                    4355,
                    4364,
                    4366
                ],
                "lev_num": [
                    4363,
                    4364
                ],
                "self.columns._get_level_number": [
                    4363
                ],
                "col_level": [
                    4363,
                    6357
                ],
                "name_lst": [
                    4364,
                    4365,
                    4366,
                    4367
                ],
                "level_values": [
                    4369,
                    4370
                ],
                "_maybe_casted_values": [
                    4369
                ],
                "new_obj.insert": [
                    4370
                ],
                "new_obj.index": [
                    4372
                ],
                "isna": [
                    5376,
                    5524,
                    5533,
                    5277,
                    5278,
                    4383
                ],
                "isnull": [
                    4387
                ],
                "notna": [
                    7650,
                    7653,
                    4391,
                    7679,
                    7825,
                    5527,
                    5528,
                    7450,
                    7676,
                    5535
                ],
                "notnull": [
                    4395
                ],
                "self._get_axis_number": [
                    4675,
                    7909,
                    5609,
                    6553,
                    7723,
                    7500,
                    7947,
                    8171,
                    8207,
                    5072,
                    6577,
                    7634,
                    5043,
                    8120,
                    4505,
                    4766
                ],
                "agg_axis": [
                    4515,
                    4517,
                    4522,
                    7694,
                    7666,
                    4506,
                    4510
                ],
                "agg_obj": [
                    4522,
                    4515,
                    4508,
                    4517
                ],
                "subset": [
                    4633,
                    4634,
                    4636,
                    4637,
                    4509,
                    4639,
                    4638,
                    4641,
                    4514,
                    4511,
                    4644,
                    4649,
                    4653,
                    6477,
                    6478,
                    6479,
                    6480,
                    6483,
                    4577
                ],
                "ax": [
                    4510,
                    4511
                ],
                "self._get_axis": [
                    7911,
                    7949,
                    5073,
                    4510,
                    4767
                ],
                "indices": [
                    4512,
                    4515,
                    7910,
                    7912,
                    7948,
                    7950,
                    4511
                ],
                "ax.get_indexer_for": [
                    4511
                ],
                "check": [
                    4512,
                    4513,
                    4514
                ],
                "check.any": [
                    4513
                ],
                "np.compress": [
                    4514
                ],
                "self.take": [
                    4515
                ],
                "agg_obj.count": [
                    4517
                ],
                "how": [
                    7137,
                    7078,
                    7110,
                    6568,
                    4521,
                    6570,
                    4523,
                    4526,
                    4527,
                    8174,
                    8177,
                    7059,
                    7096,
                    6557,
                    7103
                ],
                "agg_obj._get_axis": [
                    4522
                ],
                "self.empty": [
                    4624,
                    4573,
                    5263
                ],
                "duplicated": [
                    4577,
                    4587,
                    4580
                ],
                "self.duplicated": [
                    4577
                ],
                "keep": [
                    4577,
                    5025,
                    4924,
                    4657
                ],
                "inds": [
                    4584,
                    4580,
                    4581
                ],
                "_ndarray_values.nonzero": [
                    4580
                ],
                "_ndarray_values": [
                    4580
                ],
                "self._data.take": [
                    4804,
                    4581,
                    4702
                ],
                "ignore_index": [
                    4706,
                    4583,
                    4809,
                    4589,
                    6894,
                    6897,
                    6933
                ],
                "new_data.axes": [
                    4584,
                    4810,
                    4707,
                    4807
                ],
                "result.index": [
                    4590,
                    5079,
                    5080,
                    5049,
                    5050,
                    6169
                ],
                "shape": [
                    4656,
                    4628,
                    4654,
                    4631
                ],
                "algorithms.factorize": [
                    4628
                ],
                "vals": [
                    7232,
                    7234,
                    4653,
                    4654,
                    4629,
                    7230
                ],
                "_SIZE_HINT_LIMIT": [
                    4629
                ],
                "labels.astype": [
                    4631
                ],
                "np.iterable": [
                    4636
                ],
                "cast": [
                    4644
                ],
                "diff": [
                    4649,
                    4650,
                    4651
                ],
                "difference": [
                    4649
                ],
                "diff.empty": [
                    4650
                ],
                "col.values": [
                    4653
                ],
                "f": [
                    7776,
                    7809,
                    7819,
                    4654,
                    8049,
                    7799
                ],
                "ids": [
                    4656,
                    4657
                ],
                "get_group_index": [
                    4656
                ],
                "duplicated_int64": [
                    4657
                ],
                "by": [
                    4677,
                    4678,
                    4679,
                    5607,
                    4681,
                    4683,
                    5613,
                    4686,
                    4692,
                    4693
                ],
                "ascending": [
                    4800,
                    4679,
                    4775,
                    4681,
                    4791,
                    4792,
                    4687,
                    4783,
                    4695,
                    4696,
                    4699
                ],
                "self._get_label_or_level_values": [
                    4693,
                    4686
                ],
                "lexsort_indexer": [
                    4781,
                    4687
                ],
                "na_position": [
                    4784,
                    4800,
                    4699,
                    4687
                ],
                "ensure_platform_int": [
                    4688
                ],
                "nargsort": [
                    4698,
                    4799
                ],
                "kind": [
                    4800,
                    4699
                ],
                "self._get_block_manager_axis": [
                    4803,
                    6453,
                    4703
                ],
                "__finalize__": [
                    4712,
                    4815
                ],
                "NDFrame.sort_values.__doc__": [
                    4663
                ],
                "NDFrame.sort_values": [
                    4663
                ],
                "labels._sort_levels_monotonic": [
                    4771
                ],
                "new_axis": [
                    4774
                ],
                "labels.sortlevel": [
                    4774
                ],
                "sort_remaining": [
                    4775
                ],
                "labels._get_codes_for_sorting": [
                    4782
                ],
                "labels.is_monotonic_increasing": [
                    4791
                ],
                "labels.is_monotonic_decreasing": [
                    4792
                ],
                "baxis": [
                    4803,
                    4804,
                    4807
                ],
                "_sort_levels_monotonic": [
                    4807
                ],
                "nlargest": [
                    4924
                ],
                "algorithms.SelectNFrame": [
                    5024,
                    4924
                ],
                "nsmallest": [
                    5024
                ],
                "result._get_axis": [
                    5045
                ],
                "result.index.swaplevel": [
                    5050
                ],
                "j": [
                    7328,
                    7329,
                    7332,
                    7335,
                    7341,
                    7342,
                    5050,
                    5053
                ],
                "result.columns.swaplevel": [
                    5053
                ],
                "result.index.reorder_levels": [
                    5080
                ],
                "order": [
                    5080,
                    5083
                ],
                "result.columns.reorder_levels": [
                    5083
                ],
                "_arith_op": [
                    5111,
                    5108,
                    5095
                ],
                "func": [
                    5121,
                    6561,
                    6721,
                    5126,
                    5095,
                    5127,
                    6790,
                    6791,
                    5104,
                    5106,
                    6579,
                    6580,
                    5112,
                    5309,
                    6557,
                    5119
                ],
                "ops.fill_binop": [
                    5103
                ],
                "ops": [
                    5121,
                    5103,
                    5106,
                    5108,
                    8343,
                    8344,
                    5119
                ],
                "ops.should_series_dispatch": [
                    5106,
                    5119
                ],
                "ops.dispatch_to_series": [
                    5121,
                    5108
                ],
                "np.errstate": [
                    7808,
                    5523,
                    5125,
                    5110
                ],
                "res_values": [
                    5112,
                    5111
                ],
                "other.values": [
                    5112,
                    5124,
                    5111
                ],
                "dispatch_fill_zeros": [
                    5112,
                    5127
                ],
                "other_vals": [
                    5124,
                    5126,
                    5127
                ],
                "other.values.reshape": [
                    5124
                ],
                "out": [
                    7770,
                    5142,
                    7769,
                    5146,
                    7771,
                    5145
                ],
                "out.columns": [
                    5145
                ],
                "other_idxlen": [
                    5263,
                    5255
                ],
                "this": [
                    5283,
                    5541,
                    5257,
                    5258,
                    7501,
                    5520,
                    7504,
                    5267,
                    5524,
                    7507,
                    5271,
                    5528,
                    7547,
                    5535
                ],
                "self.align": [
                    5257
                ],
                "this.index": [
                    5258
                ],
                "other.empty": [
                    5260
                ],
                "other.copy": [
                    5264
                ],
                "this.columns.union": [
                    5267
                ],
                "this.columns": [
                    5267
                ],
                "do_fill": [
                    5268,
                    5286
                ],
                "otherSeries": [
                    5288,
                    5290,
                    5307,
                    5272,
                    5275,
                    5309,
                    5278
                ],
                "this_dtype": [
                    5304,
                    5274,
                    5310,
                    5303
                ],
                "other_dtype": [
                    5303,
                    5306,
                    5275,
                    5295
                ],
                "otherSeries.dtype": [
                    5275
                ],
                "this_mask": [
                    5289,
                    5277
                ],
                "other_mask": [
                    5290,
                    5282,
                    5278
                ],
                "overwrite": [
                    5282,
                    5532
                ],
                "other_mask.all": [
                    5282
                ],
                "series.copy": [
                    5287
                ],
                "otherSeries.copy": [
                    5288
                ],
                "new_dtype": [
                    5295,
                    5297,
                    5303,
                    5304,
                    5305,
                    5306,
                    5307
                ],
                "series.astype": [
                    5297,
                    5305
                ],
                "find_common_type": [
                    5303
                ],
                "is_dtype_equal": [
                    5304,
                    5306
                ],
                "otherSeries.astype": [
                    5307
                ],
                "maybe_downcast_to_dtype": [
                    5310
                ],
                "arr._values": [
                    5366
                ],
                "needs_i8_conversion": [
                    5368
                ],
                "arr.dtype": [
                    5369
                ],
                "arr.asi8": [
                    5370
                ],
                "arr.view": [
                    5372
                ],
                "mask._values": [
                    5378
                ],
                "x_values": [
                    5380,
                    5388
                ],
                "extract_values": [
                    5380,
                    5381
                ],
                "y_values": [
                    5386,
                    5388,
                    5381
                ],
                "y": [
                    5385,
                    5381
                ],
                "y.name": [
                    5385
                ],
                "expressions.where": [
                    5388,
                    5541
                ],
                "expressions": [
                    5388,
                    5541
                ],
                "self.combine": [
                    5390
                ],
                "combiner": [
                    5390
                ],
                "other.reindex_like": [
                    5517
                ],
                "that": [
                    5541,
                    5521,
                    5524,
                    5527,
                    5533
                ],
                "filter_func": [
                    5522,
                    5524
                ],
                "mask_this": [
                    5529,
                    5527
                ],
                "mask_that": [
                    5528,
                    5529
                ],
                "DataFrameGroupBy": [
                    5611
                ],
                "as_index": [
                    5616
                ],
                "sort": [
                    7143,
                    7082,
                    5617,
                    7059,
                    6935,
                    7098,
                    7103
                ],
                "group_keys": [
                    5618
                ],
                "squeeze": [
                    5619
                ],
                "observed": [
                    5930,
                    5620
                ],
                "pivot": [
                    5773
                ],
                "pivot_table": [
                    5920
                ],
                "aggfunc": [
                    5925
                ],
                "margins": [
                    5927
                ],
                "dropna": [
                    7875,
                    5928,
                    8047,
                    6099,
                    6101
                ],
                "margins_name": [
                    5929
                ],
                "stack_multiple": [
                    6099
                ],
                "stack": [
                    6101
                ],
                "is_scalar": [
                    6159
                ],
                "df": [
                    7748,
                    7750,
                    7752,
                    7769,
                    7092,
                    6164,
                    6166,
                    6167,
                    6168,
                    7765,
                    7770,
                    7230
                ],
                "self.reset_index": [
                    6164
                ],
                "explode": [
                    6167
                ],
                "df.drop": [
                    6168
                ],
                "self.index.take": [
                    6169
                ],
                "result.reindex": [
                    6170
                ],
                "unstack": [
                    6235
                ],
                "melt": [
                    6351
                ],
                "id_vars": [
                    6353
                ],
                "value_vars": [
                    6354
                ],
                "var_name": [
                    6355
                ],
                "value_name": [
                    6356
                ],
                "bm_axis": [
                    6453,
                    6454
                ],
                "self._data.diff": [
                    6454
                ],
                "ABCDataFrame": [
                    6464,
                    6465
                ],
                "subset.ndim": [
                    6479
                ],
                "_agg_summary_and_see_also_doc": [
                    6546,
                    6485
                ],
                "dedent": [
                    6509,
                    6485
                ],
                "_agg_examples_doc": [
                    6547,
                    6509
                ],
                "self._aggregate": [
                    6557
                ],
                "self.apply": [
                    6561,
                    6793,
                    7875
                ],
                "self.T._aggregate": [
                    6568
                ],
                "arg": [
                    6568,
                    6571
                ],
                "result.T": [
                    6569,
                    7698,
                    8143
                ],
                "_aggregate": [
                    6571
                ],
                "agg": [
                    6573
                ],
                "aggregate": [
                    6573
                ],
                "self.T.transform": [
                    6579
                ],
                "transform": [
                    6580
                ],
                "op": [
                    6728,
                    7728,
                    7761,
                    7760,
                    6719
                ],
                "frame_apply": [
                    7798,
                    6719
                ],
                "raw": [
                    6723
                ],
                "result_type": [
                    6724
                ],
                "kwds": [
                    7728,
                    7761,
                    7760,
                    6726
                ],
                "op.get_result": [
                    6728
                ],
                "x.empty": [
                    6789
                ],
                "lib.map_infer": [
                    6790,
                    6791
                ],
                "x.astype": [
                    6791
                ],
                "infer": [
                    6793
                ],
                "other.name": [
                    7071,
                    6897,
                    7069,
                    6903
                ],
                "idx_diff": [
                    6908,
                    6904,
                    6906,
                    7548,
                    7550,
                    7551
                ],
                "other.index.difference": [
                    6904
                ],
                "combined_columns": [
                    6915,
                    6916,
                    6906,
                    6908,
                    6910
                ],
                "self.columns.append": [
                    6906
                ],
                "self.columns.astype": [
                    6908
                ],
                "rename_axis": [
                    6910
                ],
                "T.infer_objects": [
                    6910
                ],
                "to_frame": [
                    6910
                ],
                "index.names": [
                    6913
                ],
                "self.columns.equals": [
                    6915
                ],
                "to_concat": [
                    6928,
                    6930,
                    6932
                ],
                "concat": [
                    8286,
                    6931,
                    7256,
                    7097,
                    7102
                ],
                "self._join_compat": [
                    7058
                ],
                "on": [
                    7138,
                    7077,
                    7079,
                    7085,
                    7059
                ],
                "lsuffix": [
                    7081,
                    7059
                ],
                "rsuffix": [
                    7081,
                    7059
                ],
                "merge": [
                    7074,
                    7109,
                    7134
                ],
                "frames": [
                    7106,
                    7108,
                    7090,
                    7092,
                    7098,
                    7103
                ],
                "can_concat": [
                    7092,
                    7095
                ],
                "df.index.is_unique": [
                    7092
                ],
                "df.index": [
                    7092
                ],
                "res.reindex": [
                    7100
                ],
                "joined": [
                    7113,
                    7106,
                    7109,
                    7110
                ],
                "left_on": [
                    7139
                ],
                "right_on": [
                    7140
                ],
                "left_index": [
                    7141
                ],
                "right_index": [
                    7142
                ],
                "suffixes": [
                    7144
                ],
                "indicator": [
                    7146
                ],
                "validate": [
                    7147
                ],
                "df.items": [
                    7230
                ],
                "_series_round": [
                    7232,
                    7250
                ],
                "decimals": [
                    7232,
                    7238,
                    7243,
                    7244,
                    7245,
                    7247,
                    7248,
                    7250
                ],
                "is_integer_dtype": [
                    7237
                ],
                "is_float_dtype": [
                    7237
                ],
                "s.round": [
                    7238
                ],
                "nv.validate_round": [
                    7241
                ],
                "decimals.index.is_unique": [
                    7245
                ],
                "decimals.index": [
                    7245
                ],
                "new_cols": [
                    7256,
                    7250,
                    7254,
                    7247
                ],
                "_dict_round": [
                    7247
                ],
                "numeric_df": [
                    7310,
                    7311,
                    7313,
                    7445,
                    7446,
                    7448
                ],
                "self._get_numeric_data": [
                    8044,
                    7661,
                    7501,
                    7310,
                    8119,
                    7732,
                    7445,
                    7639
                ],
                "numeric_df.columns": [
                    7446,
                    7311
                ],
                "cols.copy": [
                    7312,
                    7447
                ],
                "mat": [
                    7328,
                    7458,
                    7455,
                    7450,
                    7313,
                    7316,
                    7318,
                    7448,
                    7322,
                    7451,
                    7452,
                    7326,
                    7327
                ],
                "numeric_df.values": [
                    7448,
                    7313
                ],
                "correl": [
                    7553,
                    7525,
                    7532,
                    7341,
                    7342,
                    7316,
                    7318,
                    7350,
                    7548,
                    7325,
                    7551
                ],
                "libalgos.nancorr": [
                    7458,
                    7316
                ],
                "libalgos": [
                    7458,
                    7316,
                    7318
                ],
                "ensure_float64": [
                    7322,
                    7316,
                    7458,
                    7318
                ],
                "min_periods": [
                    7458,
                    7333,
                    7316,
                    7318,
                    7320,
                    7321,
                    7451
                ],
                "libalgos.nancorr_spearman": [
                    7318
                ],
                "corrf": [
                    7338,
                    7323,
                    7340
                ],
                "nanops.get_corr_func": [
                    7323
                ],
                "nanops": [
                    7530,
                    7323,
                    7948,
                    7910
                ],
                "K": [
                    7324,
                    7325
                ],
                "np.isfinite": [
                    7326
                ],
                "ac": [
                    7338,
                    7340,
                    7327
                ],
                "bc": [
                    7328,
                    7338,
                    7340
                ],
                "valid": [
                    7337,
                    7338,
                    7332,
                    7333
                ],
                "valid.sum": [
                    7333
                ],
                "valid.all": [
                    7337
                ],
                "baseCov": [
                    7456,
                    7458,
                    7460,
                    7452,
                    7453,
                    7455
                ],
                "mat.shape": [
                    7452
                ],
                "baseCov.fill": [
                    7453
                ],
                "np.cov": [
                    7455
                ],
                "mat.T": [
                    7455
                ],
                "baseCov.reshape": [
                    7456
                ],
                "this.apply": [
                    7504
                ],
                "other.corr": [
                    7504
                ],
                "other._get_numeric_data": [
                    7506
                ],
                "this.align": [
                    7507
                ],
                "left.T": [
                    7510
                ],
                "right.T": [
                    7511
                ],
                "ldem": [
                    7522,
                    7519
                ],
                "left.mean": [
                    7519
                ],
                "rdem": [
                    7520,
                    7522
                ],
                "right.mean": [
                    7520
                ],
                "num": [
                    7522,
                    7525
                ],
                "dom": [
                    7523,
                    7525
                ],
                "left.count": [
                    7523
                ],
                "left.std": [
                    7523
                ],
                "right.std": [
                    7523
                ],
                "nanops.nancorr": [
                    7530
                ],
                "left.values.T": [
                    7533
                ],
                "right.values.T": [
                    7533
                ],
                "left.columns": [
                    7533
                ],
                "raxis": [
                    7546,
                    7547
                ],
                "union": [
                    7547
                ],
                "this._get_axis": [
                    7547
                ],
                "other._get_axis": [
                    7547
                ],
                "result_index.difference": [
                    7548
                ],
                "correl.index": [
                    7548
                ],
                "correl.append": [
                    7551
                ],
                "self._count_level": [
                    7636
                ],
                "numeric_only": [
                    7747,
                    7812,
                    7749,
                    7660,
                    8044,
                    7636,
                    7638,
                    8119,
                    7707,
                    7773
                ],
                "frame._get_axis": [
                    7665,
                    7644
                ],
                "frame._get_agg_axis": [
                    7666,
                    7645,
                    7655
                ],
                "frame._is_mixed_type": [
                    7673,
                    7647
                ],
                "frame._data.any_extension_types": [
                    7647
                ],
                "frame._data": [
                    7647
                ],
                "series_counts": [
                    7653,
                    7654
                ],
                "counts": [
                    7694,
                    7692,
                    7654,
                    7655
                ],
                "series_counts.values": [
                    7654
                ],
                "result.astype": [
                    7824,
                    7657,
                    7826
                ],
                "count_axis": [
                    7687,
                    7689,
                    7690,
                    7691,
                    7665,
                    7668
                ],
                "self._get_axis_name": [
                    7670
                ],
                "frame.values": [
                    7679
                ],
                "mask.T": [
                    7684
                ],
                "count_axis._get_level_number": [
                    7687
                ],
                "level_name": [
                    7689,
                    7690
                ],
                "count_axis._names": [
                    7689
                ],
                "level_index": [
                    7690,
                    7692,
                    7694
                ],
                "_shallow_copy": [
                    7690
                ],
                "count_axis.levels": [
                    7690
                ],
                "level_codes": [
                    7691,
                    7692
                ],
                "ensure_int64": [
                    7691
                ],
                "count_axis.codes": [
                    7691
                ],
                "lib.count_level_2d": [
                    7692
                ],
                "dtype_is_dt": [
                    7715,
                    7706,
                    7707
                ],
                "self.dtypes.apply": [
                    7706
                ],
                "x.kind": [
                    7706
                ],
                "dtype_is_dt.any": [
                    7707
                ],
                "filter_type": [
                    7778,
                    7718,
                    7755,
                    7787,
                    7823,
                    7825,
                    7731,
                    7733,
                    7741
                ],
                "constructor": [
                    7720,
                    7833,
                    7725
                ],
                "self._get_agg_axis": [
                    7913,
                    7724,
                    7951
                ],
                "skipna": [
                    7910,
                    7948,
                    7728,
                    7761,
                    7760
                ],
                "axis_matters": [
                    7734
                ],
                "self._get_bool_data": [
                    7736,
                    7738
                ],
                "_get_data": [
                    7813,
                    7750,
                    7807
                ],
                "df.T": [
                    7752
                ],
                "out_dtype": [
                    7769,
                    7755
                ],
                "df._data.reduce": [
                    7765
                ],
                "df._data": [
                    7765
                ],
                "blk_func": [
                    7765
                ],
                "res.keys": [
                    7768
                ],
                "df._constructor_sliced": [
                    7769
                ],
                "out.index": [
                    7770
                ],
                "df.columns": [
                    7770
                ],
                "np.bool_": [
                    7826,
                    7782
                ],
                "opa": [
                    7801,
                    7798
                ],
                "opa.get_result": [
                    7801
                ],
                "self.ndim": [
                    7802
                ],
                "result.iloc": [
                    7803
                ],
                "data._get_agg_axis": [
                    7816,
                    7810
                ],
                "result.dtype": [
                    7821
                ],
                "np.float64": [
                    7824,
                    8131
                ],
                "coerce_to_dtypes": [
                    7831
                ],
                "Series.nunique": [
                    7875
                ],
                "nanops.nanargmin": [
                    7910
                ],
                "nanops.nanargmax": [
                    7948
                ],
                "axis_num": [
                    7962,
                    7957,
                    7959
                ],
                "s.mode": [
                    8047
                ],
                "data.apply": [
                    8049
                ],
                "validate_percentile": [
                    8117
                ],
                "q": [
                    8129,
                    8130,
                    8131,
                    8134,
                    8140,
                    8117
                ],
                "is_transposed": [
                    8121,
                    8123,
                    8142,
                    8134
                ],
                "data.T": [
                    8124
                ],
                "data.columns": [
                    8126
                ],
                "self.columns.name": [
                    8128
                ],
                "data._data.quantile": [
                    8133
                ],
                "interpolation": [
                    8134
                ],
                "new_data.copy": [
                    8169,
                    8205
                ],
                "ABCDatetimeIndex": [
                    8176,
                    8209,
                    8212,
                    8173
                ],
                "ABCPeriodIndex": [
                    8176,
                    8173
                ],
                "new_data.set_axis": [
                    8177,
                    8210,
                    8213,
                    8174
                ],
                "self.index.to_timestamp": [
                    8174
                ],
                "self.columns.to_timestamp": [
                    8177
                ],
                "self.index.to_period": [
                    8210
                ],
                "self.columns.to_period": [
                    8213
                ],
                "collections.defaultdict": [
                    8284
                ],
                "isin": [
                    8288
                ],
                "values.index.is_unique": [
                    8299,
                    8295
                ],
                "values.index": [
                    8299,
                    8295
                ],
                "self.eq": [
                    8297,
                    8301
                ],
                "values.reindex_like": [
                    8297,
                    8301
                ],
                "values.columns.is_unique": [
                    8299
                ],
                "values.columns": [
                    8299
                ],
                "reshape": [
                    8310
                ],
                "algorithms.isin": [
                    8310
                ],
                "self.values.ravel": [
                    8310
                ],
                "_AXIS_ORDERS": [
                    8321,
                    8317
                ],
                "_AXIS_NUMBERS": [
                    8318
                ],
                "_AXIS_NAMES": [
                    8319
                ],
                "_AXIS_REVERSED": [
                    8320
                ],
                "_AXIS_LEN": [
                    8321
                ],
                "_info_axis_number": [
                    8322
                ],
                "_info_axis_name": [
                    8323
                ],
                "properties.AxisProperty": [
                    8328,
                    8325
                ],
                "properties": [
                    8328,
                    8325
                ],
                "plot": [
                    8334
                ],
                "CachedAccessor": [
                    8337,
                    8334
                ],
                "pandas.plotting.PlotAccessor": [
                    8334
                ],
                "pandas.plotting": [
                    8336,
                    8334,
                    8335
                ],
                "pandas": [
                    8336,
                    8334,
                    8335
                ],
                "hist": [
                    8335
                ],
                "pandas.plotting.hist_frame": [
                    8335
                ],
                "boxplot": [
                    8336
                ],
                "pandas.plotting.boxplot_frame": [
                    8336
                ],
                "sparse": [
                    8337
                ],
                "SparseFrameAccessor": [
                    8337
                ],
                "DataFrame._add_numeric_operations": [
                    8340
                ],
                "DataFrame._add_series_or_dataframe_operations": [
                    8341
                ],
                "ops.add_flex_arithmetic_methods": [
                    8343
                ],
                "ops.add_special_arithmetic_methods": [
                    8344
                ],
                "s.items": [
                    8351
                ],
                "new_data.get": [
                    8352
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_56/pandas/tests/indexing/test_scalar.py",
                "test_function": "test_iat_dont_wrap_object_datetimelike",
                "test_function_code": "def test_iat_dont_wrap_object_datetimelike():\n    # GH#32809 .iat calls go through DataFrame._get_value, should not\n    #  call maybe_box_datetimelike\n    dti = date_range(\"2016-01-01\", periods=3)\n    tdi = dti - dti\n    ser = Series(dti.to_pydatetime(), dtype=object)\n    ser2 = Series(tdi.to_pytimedelta(), dtype=object)\n    df = DataFrame({\"A\": ser, \"B\": ser2})\n    assert (df.dtypes == object).all()\n\n    for result in [df.at[0, \"A\"], df.iat[0, 0], df.loc[0, \"A\"], df.iloc[0, 0]]:\n        assert result is ser[0]\n        assert isinstance(result, datetime)\n        assert not isinstance(result, Timestamp)\n\n    for result in [df.at[1, \"B\"], df.iat[1, 1], df.loc[1, \"B\"], df.iloc[1, 1]]:\n        assert result is ser2[1]\n        assert isinstance(result, timedelta)\n        assert not isinstance(result, Timedelta)",
                "test_error": "AssertionError: assert Timestamp('2016-01-01 00:00:00') is datetime.datetime(2016, 1, 1, 0, 0)",
                "full_test_error": "def test_iat_dont_wrap_object_datetimelike():\n        # GH#32809 .iat calls go through DataFrame._get_value, should not\n        #  call maybe_box_datetimelike\n        dti = date_range(\"2016-01-01\", periods=3)\n        tdi = dti - dti\n        ser = Series(dti.to_pydatetime(), dtype=object)\n        ser2 = Series(tdi.to_pytimedelta(), dtype=object)\n        df = DataFrame({\"A\": ser, \"B\": ser2})\n        assert (df.dtypes == object).all()\n    \n        for result in [df.at[0, \"A\"], df.iat[0, 0], df.loc[0, \"A\"], df.iloc[0, 0]]:\n>           assert result is ser[0]\nE           AssertionError: assert Timestamp('2016-01-01 00:00:00') is datetime.datetime(2016, 1, 1, 0, 0)\n\npandas/tests/indexing/test_scalar.py:305: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}