{
    "pandas": [
        {
            "bugID": 95,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 67,
            "file_name": "pandas/core/arrays/period.py",
            "replace_code": "def _period_array_cmp(cls, op):\n    from pandas.api.types import is_list_like\n    import numpy as np\n    import pandas.compat as compat\n    from pandas.compat.numpy import np_datetime_data\n    from pandas.core import ops\n    from pandas.core.dtypes.common import is_na, is_object_dtype\n    \"\"\"\n    Wrap comparison operations to convert Period-like to PeriodDtype\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n    \n    @unpack_zerodim_and_defer(opname)\n    def wrapper(self, other):\n        ordinal_op = getattr(self.asi8, opname)\n    \n        if isinstance(other, str):\n            try:\n                other = self._scalar_from_string(other)\n            except ValueError:\n                # string that can't be parsed as Period\n                return invalid_comparison(self, other, op)\n        elif isinstance(other, int):\n            # TODO: sure we want to allow this?  we dont for DTA/TDA\n            #  2 tests rely on this\n            other = cls(other, freq=self.freq)\n            result = ordinal_op(other.ordinal)\n        else:\n            if is_list_like(other):\n                if len(other) != len(self):\n                    raise ValueError(\"Lengths must match\")\n                else:\n                    if is_object_dtype(other):\n                        with np.errstate(all=\"ignore\"):\n                            result = ops.comp_method_OBJECT_ARRAY(op, self.astype(object), other)\n                        o_mask = is_na(other)\n                    elif not cls._is_recognized_dtype(other.dtype):\n                        return invalid_comparison(self, other, op)\n                    else:\n                        assert isinstance(other, cls), type(other)\n                        result = op(self.view(\"i8\"), other.view(\"i8\"))\n                        o_mask = other._isnan\n                    if o_mask.any():\n                        result[o_mask] = nat_result\n            else:\n                return invalid_comparison(self, other, op)\n    \n        if self._hasnans:\n            result[self._isnan] = nat_result\n    \n        return result\n    \n    return compat.set_function_name(wrapper, opname, cls)"
        }
    ]
}