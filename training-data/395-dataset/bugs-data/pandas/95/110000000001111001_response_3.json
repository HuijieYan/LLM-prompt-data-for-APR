{
    "pandas": [
        {
            "bugID": 95,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 67,
            "file_name": "pandas/core/arrays/period.py",
            "replace_code": "def _period_array_cmp(cls, op):\n\n    \"\"\"\n    Wrap comparison operations to convert Period-like to PeriodDtype\n    \"\"\"\n    opname = f\"__{op.__name__}__\"\n    nat_result = opname == \"__ne__\"\n    \n    def wrapper(self, other):\n        if isinstance(other, (str, int)):\n            other_period = self._construct_period_from_input(other)\n            result = op(self.asi8, other_period.asi8)\n        elif isinstance(other, cls) or pd.api.types.is_list_like(other):\n            other_arr = np.asarray(other)\n            if other_arr.dtype == 'object':\n                ### handle object dtype comparison\n                with np.errstate(all=\"ignore\"):\n                    result = ops.comp_method_OBJECT_ARRAY(\n                        op, self.astype(object), other_arr\n                    )\n                result = self._handle_comparison_result(result, other_arr)\n            else:\n                result = op(self.view('i8'), other_arr.view('i8'))\n                result = self._handle_comparison_result(result, other_arr)\n        else:\n            raise ValueError(\"Invalid comparison\")\n    \n        return result\n    \n    return compat.set_function_name(wrapper, opname, cls)"
        }
    ]
}