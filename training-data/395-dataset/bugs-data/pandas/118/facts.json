{
    "1.1.1": "@Appender(\n    _shared_docs[\"melt\"]\n    % dict(caller=\"pd.melt(df, \", versionadded=\"\", other=\"DataFrame.melt\")\n)\ndef melt(\n    frame: DataFrame,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n) -> DataFrame:\n    # TODO: what about the existing index?\n    # If multiindex, gather names of columns on all level for checking presence\n    # of `id_vars` and `value_vars`\n    if isinstance(frame.columns, ABCMultiIndex):\n        cols = [x for c in frame.columns for x in c]\n    else:\n        cols = list(frame.columns)\n\n    if id_vars is not None:\n        if not is_list_like(id_vars):\n            id_vars = [id_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n            raise ValueError(\n                \"id_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            # Check that `id_vars` are in frame\n            id_vars = list(id_vars)\n            missing = Index(np.ravel(id_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\n                    \"The following 'id_vars' are not present\"\n                    \" in the DataFrame: {missing}\"\n                    \"\".format(missing=list(missing))\n                )\n    else:\n        id_vars = []\n\n    if value_vars is not None:\n        if not is_list_like(value_vars):\n            value_vars = [value_vars]\n        elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(\n            value_vars, list\n        ):\n            raise ValueError(\n                \"value_vars must be a list of tuples when columns are a MultiIndex\"\n            )\n        else:\n            value_vars = list(value_vars)\n            # Check that `value_vars` are in frame\n            missing = Index(np.ravel(value_vars)).difference(cols)\n            if not missing.empty:\n                raise KeyError(\n                    \"The following 'value_vars' are not present in\"\n                    \" the DataFrame: {missing}\"\n                    \"\".format(missing=list(missing))\n                )\n        frame = frame.loc[:, id_vars + value_vars]\n    else:\n        frame = frame.copy()\n\n    if col_level is not None:  # allow list or other?\n        # frame is a copy\n        frame.columns = frame.columns.get_level_values(col_level)\n\n    if var_name is None:\n        if isinstance(frame.columns, ABCMultiIndex):\n            if len(frame.columns.names) == len(set(frame.columns.names)):\n                var_name = frame.columns.names\n            else:\n                var_name = [\n                    \"variable_{i}\".format(i=i) for i in range(len(frame.columns.names))\n                ]\n        else:\n            var_name = [\n                frame.columns.name if frame.columns.name is not None else \"variable\"\n            ]\n    if isinstance(var_name, str):\n        var_name = [var_name]\n\n    N, K = frame.shape\n    K -= len(id_vars)\n\n    mdata = {}\n    for col in id_vars:\n        id_data = frame.pop(col)\n        if is_extension_array_dtype(id_data):\n            id_data = concat([id_data] * K, ignore_index=True)\n        else:\n            id_data = np.tile(id_data.values, K)\n        mdata[col] = id_data\n\n    mcolumns = id_vars + var_name + [value_name]\n\n    mdata[value_name] = frame.values.ravel(\"F\")\n    for i, col in enumerate(var_name):\n        # asanyarray will keep the columns as an Index\n        mdata[col] = np.asanyarray(frame.columns._get_level_values(i)).repeat(N)\n\n    return frame._constructor(mdata, columns=mcolumns)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_118/pandas/core/reshape/melt.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_melt_mixed_int_str_id_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"], \"b\": [1], \"d\": [2]})\n        result = melt(df, id_vars=[0, \"a\"], value_vars=[\"b\", \"d\"])\n        expected = DataFrame(\n            {0: [\"foo\"] * 2, \"a\": [\"bar\"] * 2, \"variable\": list(\"bd\"), \"value\": [1, 2]}\n        )\n        tm.assert_frame_equal(result, expected)",
        "    def test_melt_mixed_int_str_value_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"]})\n        result = melt(df, value_vars=[0, \"a\"])\n        expected = DataFrame({\"variable\": [0, \"a\"], \"value\": [\"foo\", \"bar\"]})\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_118/pandas/tests/reshape/test_melt.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_118/pandas/tests/reshape/test_melt.py"
    ],
    "2.1.1": [
        [
            "E                   KeyError: \"The following 'id_vars' are not present in the DataFrame: ['0']\""
        ],
        [
            "E                   KeyError: \"The following 'value_vars' are not present in the DataFrame: ['0']\""
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.reshape.test_melt.TestMelt object at 0x1170e5580>\n\n    def test_melt_mixed_int_str_id_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"], \"b\": [1], \"d\": [2]})\n>       result = melt(df, id_vars=[0, \"a\"], value_vars=[\"b\", \"d\"])\n\npandas/tests/reshape/test_melt.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nframe =      0    a  b  d\n0  foo  bar  1  2, id_vars = [0, 'a']\nvalue_vars = ['b', 'd'], var_name = None, value_name = 'value', col_level = None\n\n    @Appender(\n        _shared_docs[\"melt\"]\n        % dict(caller=\"pd.melt(df, \", versionadded=\"\", other=\"DataFrame.melt\")\n    )\n    def melt(\n        frame: DataFrame,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level=None,\n    ) -> DataFrame:\n        # TODO: what about the existing index?\n        # If multiindex, gather names of columns on all level for checking presence\n        # of `id_vars` and `value_vars`\n        if isinstance(frame.columns, ABCMultiIndex):\n            cols = [x for c in frame.columns for x in c]\n        else:\n            cols = list(frame.columns)\n    \n        if id_vars is not None:\n            if not is_list_like(id_vars):\n                id_vars = [id_vars]\n            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n                raise ValueError(\n                    \"id_vars must be a list of tuples when columns are a MultiIndex\"\n                )\n            else:\n                # Check that `id_vars` are in frame\n                id_vars = list(id_vars)\n                missing = Index(np.ravel(id_vars)).difference(cols)\n                if not missing.empty:\n>                   raise KeyError(\n                        \"The following 'id_vars' are not present\"\n                        \" in the DataFrame: {missing}\"\n                        \"\".format(missing=list(missing))\n                    )",
            "\npandas/core/reshape/melt.py:52: KeyError"
        ],
        [
            "self = <pandas.tests.reshape.test_melt.TestMelt object at 0x1171c7e50>\n\n    def test_melt_mixed_int_str_value_vars(self):\n        # GH 29718\n        df = DataFrame({0: [\"foo\"], \"a\": [\"bar\"]})\n>       result = melt(df, value_vars=[0, \"a\"])\n\npandas/tests/reshape/test_melt.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nframe =      0    a\n0  foo  bar, id_vars = [], value_vars = [0, 'a']\nvar_name = None, value_name = 'value', col_level = None\n\n    @Appender(\n        _shared_docs[\"melt\"]\n        % dict(caller=\"pd.melt(df, \", versionadded=\"\", other=\"DataFrame.melt\")\n    )\n    def melt(\n        frame: DataFrame,\n        id_vars=None,\n        value_vars=None,\n        var_name=None,\n        value_name=\"value\",\n        col_level=None,\n    ) -> DataFrame:\n        # TODO: what about the existing index?\n        # If multiindex, gather names of columns on all level for checking presence\n        # of `id_vars` and `value_vars`\n        if isinstance(frame.columns, ABCMultiIndex):\n            cols = [x for c in frame.columns for x in c]\n        else:\n            cols = list(frame.columns)\n    \n        if id_vars is not None:\n            if not is_list_like(id_vars):\n                id_vars = [id_vars]\n            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(id_vars, list):\n                raise ValueError(\n                    \"id_vars must be a list of tuples when columns are a MultiIndex\"\n                )\n            else:\n                # Check that `id_vars` are in frame\n                id_vars = list(id_vars)\n                missing = Index(np.ravel(id_vars)).difference(cols)\n                if not missing.empty:\n                    raise KeyError(\n                        \"The following 'id_vars' are not present\"\n                        \" in the DataFrame: {missing}\"\n                        \"\".format(missing=list(missing))\n                    )\n        else:\n            id_vars = []\n    \n        if value_vars is not None:\n            if not is_list_like(value_vars):\n                value_vars = [value_vars]\n            elif isinstance(frame.columns, ABCMultiIndex) and not isinstance(\n                value_vars, list\n            ):\n                raise ValueError(\n                    \"value_vars must be a list of tuples when columns are a MultiIndex\"\n                )\n            else:\n                value_vars = list(value_vars)\n                # Check that `value_vars` are in frame\n                missing = Index(np.ravel(value_vars)).difference(cols)\n                if not missing.empty:\n>                   raise KeyError(\n                        \"The following 'value_vars' are not present in\"\n                        \" the DataFrame: {missing}\"\n                        \"\".format(missing=list(missing))\n                    )",
            "\npandas/core/reshape/melt.py:74: KeyError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "frame.columns": "Index([0, 'a', 'b', 'd'], dtype='object')",
                "frame": "     0    a  b  d\n0  foo  bar  1  2",
                "id_vars": "[0, 'a']",
                "value_vars": "['b', 'd']",
                "frame.loc": "<pandas.core.indexing._LocIndexer object at 0x1194f1220>",
                "frame.copy": "<bound method NDFrame.copy of      0    a  b  d\n0  foo  bar  1  2>",
                "frame.shape": "(1, 4)",
                "frame.pop": "<bound method NDFrame.pop of      0    a  b  d\n0  foo  bar  1  2>",
                "value_name": "'value'",
                "frame.values": "array([['foo', 'bar', 1, 2]], dtype=object)",
                "frame._constructor": "<class 'pandas.core.frame.DataFrame'>"
            },
            {
                "frame.columns": "Index(['b', 'd'], dtype='object')",
                "frame": "   b  d\n0  1  2",
                "cols": "[0, 'a', 'b', 'd']",
                "missing": "Index([], dtype='object')",
                "missing.empty": "True",
                "frame.loc": "<pandas.core.indexing._LocIndexer object at 0x1194f1d10>",
                "frame.copy": "<bound method NDFrame.copy of    b  d\n0  1  2>",
                "var_name": "['variable']",
                "i": "0",
                "N": "1",
                "K": "2",
                "frame.shape": "(1, 2)",
                "mdata": "{0: array(['foo', 'foo'], dtype=object), 'a': array(['bar', 'bar'], dtype=object), 'value': array([1, 2]), 'variable': array(['b', 'd'], dtype=object)}",
                "col": "'variable'",
                "id_data": "array(['bar', 'bar'], dtype=object)",
                "frame.pop": "<bound method NDFrame.pop of    b  d\n0  1  2>",
                "mcolumns": "[0, 'a', 'variable', 'value']",
                "frame.values": "array([[1, 2]])"
            }
        ],
        [
            {
                "frame.columns": "Index([0, 'a'], dtype='object')",
                "frame": "     0    a\n0  foo  bar",
                "value_vars": "[0, 'a']",
                "frame.loc": "<pandas.core.indexing._LocIndexer object at 0x1194cd9a0>",
                "frame.copy": "<bound method NDFrame.copy of      0    a\n0  foo  bar>",
                "frame.shape": "(1, 2)",
                "frame.pop": "<bound method NDFrame.pop of      0    a\n0  foo  bar>",
                "value_name": "'value'",
                "frame.values": "array([['foo', 'bar']], dtype=object)",
                "frame._constructor": "<class 'pandas.core.frame.DataFrame'>"
            },
            {
                "cols": "[0, 'a']",
                "id_vars": "[]",
                "missing": "Index([], dtype='object')",
                "missing.empty": "True",
                "frame.loc": "<pandas.core.indexing._LocIndexer object at 0x1194cdbd0>",
                "var_name": "['variable']",
                "i": "0",
                "N": "1",
                "K": "2",
                "mdata": "{'value': array(['foo', 'bar'], dtype=object), 'variable': array([0, 'a'], dtype=object)}",
                "col": "'variable'",
                "mcolumns": "['variable', 'value']"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "frame.columns": "Index",
                "frame": "DataFrame",
                "id_vars": "list",
                "value_vars": "list",
                "frame.loc": "_LocIndexer",
                "frame.copy": "method",
                "frame.shape": "tuple",
                "frame.pop": "method",
                "value_name": "str",
                "frame.values": "ndarray",
                "frame._constructor": "type"
            },
            {
                "frame.columns": "Index",
                "frame": "DataFrame",
                "cols": "list",
                "missing": "Index",
                "missing.empty": "bool",
                "frame.loc": "_LocIndexer",
                "frame.copy": "method",
                "var_name": "list",
                "i": "int",
                "N": "int",
                "K": "int",
                "frame.shape": "tuple",
                "mdata": "dict",
                "col": "str",
                "id_data": "ndarray",
                "frame.pop": "method",
                "mcolumns": "list",
                "frame.values": "ndarray"
            }
        ],
        [
            {
                "frame.columns": "Index",
                "frame": "DataFrame",
                "value_vars": "list",
                "frame.loc": "_LocIndexer",
                "frame.copy": "method",
                "frame.shape": "tuple",
                "frame.pop": "method",
                "value_name": "str",
                "frame.values": "ndarray",
                "frame._constructor": "type"
            },
            {
                "cols": "list",
                "id_vars": "list",
                "missing": "Index",
                "missing.empty": "bool",
                "frame.loc": "_LocIndexer",
                "var_name": "list",
                "i": "int",
                "N": "int",
                "K": "int",
                "mdata": "dict",
                "col": "str",
                "mcolumns": "list"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}