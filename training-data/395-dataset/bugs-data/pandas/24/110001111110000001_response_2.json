{
    "pandas": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 810,
            "file_name": "pandas/core/arrays/datetimes.py",
            "replace_code": "def tz_localize(self, tz, ambiguous=\"raise\", nonexistent=\"raise\"):\n\n    nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n    if nonexistent not in nonexistent_options and not isinstance(\n        nonexistent, timedelta\n    ):\n        raise ValueError(\n            \"The nonexistent argument must be one of 'raise', \"\n            \"'NaT', 'shift_forward', 'shift_backward' or \"\n            \"a timedelta object\"\n        )\n    \n    if self.tz is not None:\n        if tz is None:\n            new_dates = tzconversion.tz_convert(self.asi8, timezones.UTC, self.tz)\n        else:\n            raise TypeError(\"Already tz-aware, use tz_convert to convert.\")\n    else:\n        tz = timezones.maybe_get_tz(tz)\n        # Convert to UTC\n        new_dates = conversion.tz_localize_to_utc(\n            self.asi8, tz, ambiguous=ambiguous, nonexistent=nonexistent\n        )\n    new_dates = new_dates.view(DT64NS_DTYPE)\n    dtype = tz_to_dtype(tz)\n    \n    # Preserve the frequency whenever possible\n    freq = self.freq\n    if freq is not None and ambiguous == \"raise\" and nonexistent == \"raise\":\n        freq_str = dtype._get_precise_freq_str()\n        if freq_str is not None:\n            freq = DatetimeIndex._return_as_frequency(freq_str)\n    \n    return self._simple_new(new_dates, dtype=dtype, freq=freq)"
        }
    ]
}