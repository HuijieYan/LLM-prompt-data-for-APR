{
    "pandas:20": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tseries/offsets.py": {
            "buggy_functions": [
                {
                    "function_name": "apply_index",
                    "function_code": "@apply_index_wraps\ndef apply_index(self, i):\n    shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n    # TODO: going through __new__ raises on call to _validate_frequency;\n    #  are we passing incorrect freq?\n    return type(i)._simple_new(shifted, freq=i.freq, dtype=i.dtype)\n",
                    "decorators": [
                        "apply_index_wraps"
                    ],
                    "docstring": null,
                    "start_line": 1147,
                    "end_line": 1152,
                    "variables": {
                        "shifted": [
                            1152,
                            1149
                        ],
                        "liboffsets.shift_months": [
                            1149
                        ],
                        "liboffsets": [
                            1149
                        ],
                        "i.asi8": [
                            1149
                        ],
                        "i": [
                            1152,
                            1149
                        ],
                        "self.n": [
                            1149
                        ],
                        "self": [
                            1149
                        ],
                        "self._day_opt": [
                            1149
                        ],
                        "_simple_new": [
                            1152
                        ],
                        "type": [
                            1152
                        ],
                        "i.freq": [
                            1152
                        ],
                        "i.dtype": [
                            1152
                        ],
                        "apply_index_wraps": [
                            1147
                        ]
                    },
                    "filtered_variables": {
                        "shifted": [
                            1152,
                            1149
                        ],
                        "liboffsets.shift_months": [
                            1149
                        ],
                        "liboffsets": [
                            1149
                        ],
                        "i.asi8": [
                            1149
                        ],
                        "i": [
                            1152,
                            1149
                        ],
                        "self.n": [
                            1149
                        ],
                        "self": [
                            1149
                        ],
                        "self._day_opt": [
                            1149
                        ],
                        "_simple_new": [
                            1152
                        ],
                        "i.freq": [
                            1152
                        ],
                        "i.dtype": [
                            1152
                        ],
                        "apply_index_wraps": [
                            1147
                        ]
                    },
                    "diff_line_number": 1150,
                    "class_data": {
                        "signature": "class MonthOffset(SingleConstructorOffset)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "@property\ndef name(self) -> str:\n    if self.is_anchored:\n        return self.rule_code\n    else:\n        month = ccalendar.MONTH_ALIASES[self.n]\n        return f'{self.code_rule}-{month}'",
                            "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and (not _is_normalized(dt)):\n        return False\n    return dt.day == self._get_offset_day(dt)",
                            "@apply_wraps\ndef apply(self, other):\n    compare_day = self._get_offset_day(other)\n    n = liboffsets.roll_convention(other.day, self.n, compare_day)\n    return shift_month(other, n, self._day_opt)",
                            "@apply_index_wraps\ndef apply_index(self, i):\n    shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n    return type(i)._simple_new(shifted, freq=i.freq, dtype=i.dtype)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_adjust_dst",
                            "_attributes",
                            "__init__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "name(self) -> str",
                            "is_on_offset(self, dt: datetime) -> bool",
                            "apply(self, other)",
                            "apply_index(self, i)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949363200000000000, 949363260000000000, 949363320000000000, ...,\n       954585420000000000, 954585480000000000, 954585540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([946857600000000000, 946857660000000000, 946857720000000000, ...,\n       954758220000000000, 954758280000000000, 954758340000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthBegins>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949363200000000000, 949363260000000000, 949363320000000000, ...,\n       954585420000000000, 954585480000000000, 954585540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949363200000000000, 949363260000000000, 949363320000000000, ...,\n       954585420000000000, 954585480000000000, 954585540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949363200000000000, 949363260000000000, 949363320000000000, ...,\n       954585420000000000, 954585480000000000, 954585540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthBegin>",
                                    "variable_type": "MonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * MonthEnds>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<MonthEnd>",
                                    "variable_type": "MonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([941414400000000000, 941414460000000000, 941414520000000000, ...,\n       949401420000000000, 949401480000000000, 949401540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthBegins>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([946857600000000000, 946857660000000000, 946857720000000000, ...,\n       954758220000000000, 954758280000000000, 954758340000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([946857600000000000, 946857660000000000, 946857720000000000, ...,\n       954758220000000000, 954758280000000000, 954758340000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([946857600000000000, 946857660000000000, 946857720000000000, ...,\n       954758220000000000, 954758280000000000, 954758340000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthBegin>",
                                    "variable_type": "BusinessMonthBegin",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([943920000000000000, 943920060000000000, 943920120000000000, ...,\n       949315020000000000, 949315080000000000, 949315140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessMonthEnds>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([949276800000000000, 949276860000000000, 949276920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_months": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "i": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessMonthEnd>",
                                    "variable_type": "BusinessMonthEnd",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "apply_index",
                    "function_code": "@apply_index_wraps\ndef apply_index(self, dtindex):\n    shifted = liboffsets.shift_quarters(\n        dtindex.asi8, self.n, self.startingMonth, self._day_opt\n    )\n    # TODO: going through __new__ raises on call to _validate_frequency;\n    #  are we passing incorrect freq?\n    return type(dtindex)._simple_new(\n        shifted, freq=dtindex.freq, dtype=dtindex.dtype\n    )\n",
                    "decorators": [
                        "apply_index_wraps"
                    ],
                    "docstring": null,
                    "start_line": 1866,
                    "end_line": 1875,
                    "variables": {
                        "shifted": [
                            1874,
                            1868
                        ],
                        "liboffsets.shift_quarters": [
                            1868
                        ],
                        "liboffsets": [
                            1868
                        ],
                        "dtindex.asi8": [
                            1869
                        ],
                        "dtindex": [
                            1873,
                            1874,
                            1869
                        ],
                        "self.n": [
                            1869
                        ],
                        "self": [
                            1869
                        ],
                        "self.startingMonth": [
                            1869
                        ],
                        "self._day_opt": [
                            1869
                        ],
                        "_simple_new": [
                            1873
                        ],
                        "type": [
                            1873
                        ],
                        "dtindex.freq": [
                            1874
                        ],
                        "dtindex.dtype": [
                            1874
                        ],
                        "apply_index_wraps": [
                            1866
                        ]
                    },
                    "filtered_variables": {
                        "shifted": [
                            1874,
                            1868
                        ],
                        "liboffsets.shift_quarters": [
                            1868
                        ],
                        "liboffsets": [
                            1868
                        ],
                        "dtindex.asi8": [
                            1869
                        ],
                        "dtindex": [
                            1873,
                            1874,
                            1869
                        ],
                        "self.n": [
                            1869
                        ],
                        "self": [
                            1869
                        ],
                        "self.startingMonth": [
                            1869
                        ],
                        "self._day_opt": [
                            1869
                        ],
                        "_simple_new": [
                            1873
                        ],
                        "dtindex.freq": [
                            1874
                        ],
                        "dtindex.dtype": [
                            1874
                        ],
                        "apply_index_wraps": [
                            1866
                        ]
                    },
                    "diff_line_number": 1871,
                    "class_data": {
                        "signature": "class QuarterOffset(DateOffset)",
                        "docstring": "Quarter representation - doesn't call super.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, n=1, normalize=False, startingMonth=None):\n    BaseOffset.__init__(self, n, normalize)\n    if startingMonth is None:\n        startingMonth = self._default_startingMonth\n    object.__setattr__(self, 'startingMonth', startingMonth)",
                            "def is_anchored(self) -> bool:\n    return self.n == 1 and self.startingMonth is not None",
                            "@classmethod\ndef _from_name(cls, suffix=None):\n    kwargs = {}\n    if suffix:\n        kwargs['startingMonth'] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n    elif cls._from_name_startingMonth is not None:\n        kwargs['startingMonth'] = cls._from_name_startingMonth\n    return cls(**kwargs)",
                            "@property\ndef rule_code(self) -> str:\n    month = ccalendar.MONTH_ALIASES[self.startingMonth]\n    return f'{self._prefix}-{month}'",
                            "@apply_wraps\ndef apply(self, other):\n    months_since = other.month % 3 - self.startingMonth % 3\n    qtrs = liboffsets.roll_qtrday(other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3)\n    months = qtrs * 3 - months_since\n    return shift_month(other, months, self._day_opt)",
                            "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and (not _is_normalized(dt)):\n        return False\n    mod_month = (dt.month - self.startingMonth) % 3\n    return mod_month == 0 and dt.day == self._get_offset_day(dt)",
                            "@apply_index_wraps\ndef apply_index(self, dtindex):\n    shifted = liboffsets.shift_quarters(dtindex.asi8, self.n, self.startingMonth, self._day_opt)\n    return type(dtindex)._simple_new(shifted, freq=dtindex.freq, dtype=dtindex.dtype)"
                        ],
                        "constructor_variables": [
                            "startingMonth"
                        ],
                        "class_level_variables": [
                            "_default_startingMonth",
                            "_from_name_startingMonth",
                            "_adjust_dst",
                            "_attributes"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, n=1, normalize=False, startingMonth=None)",
                            "is_anchored(self) -> bool",
                            "_from_name(cls, suffix=None)",
                            "rule_code(self) -> str",
                            "apply(self, other)",
                            "is_on_offset(self, dt: datetime) -> bool",
                            "apply_index(self, dtindex)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * QuarterBegins: startingMonth=3>",
                                    "variable_type": "QuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([936144000000000000, 936144060000000000, 936144120000000000, ...,\n       944044620000000000, 944044680000000000, 944044740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * QuarterBegins: startingMonth=3>",
                                    "variable_type": "QuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<QuarterBegin: startingMonth=3>",
                                    "variable_type": "QuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([951868800000000000, 951868860000000000, 951868920000000000, ...,\n       959855820000000000, 959855880000000000, 959855940000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<QuarterBegin: startingMonth=3>",
                                    "variable_type": "QuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * QuarterEnds: startingMonth=3>",
                                    "variable_type": "QuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([938649600000000000, 938649660000000000, 938649720000000000, ...,\n       938687820000000000, 938687880000000000, 938687940000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * QuarterEnds: startingMonth=3>",
                                    "variable_type": "QuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<QuarterEnd: startingMonth=3>",
                                    "variable_type": "QuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([954460800000000000, 954460860000000000, 954460920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<QuarterEnd: startingMonth=3>",
                                    "variable_type": "QuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessQuarterBegins: startingMonth=3>",
                                    "variable_type": "BQuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([936144000000000000, 936144060000000000, 936144120000000000, ...,\n       944044620000000000, 944044680000000000, 944044740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessQuarterBegins: startingMonth=3>",
                                    "variable_type": "BQuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessQuarterBegin: startingMonth=3>",
                                    "variable_type": "BQuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([951868800000000000, 951868860000000000, 951868920000000000, ...,\n       959855820000000000, 959855880000000000, 959855940000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessQuarterBegin: startingMonth=3>",
                                    "variable_type": "BQuarterBegin",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessQuarterEnds: startingMonth=3>",
                                    "variable_type": "BQuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([938649600000000000, 938649660000000000, 938649720000000000, ...,\n       938687820000000000, 938687880000000000, 938687940000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessQuarterEnds: startingMonth=3>",
                                    "variable_type": "BQuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessQuarterEnd: startingMonth=3>",
                                    "variable_type": "BQuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([954460800000000000, 954460860000000000, 954460920000000000, ...,\n       954499020000000000, 954499080000000000, 954499140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessQuarterEnd: startingMonth=3>",
                                    "variable_type": "BQuarterEnd",
                                    "variable_shape": null
                                },
                                "self.startingMonth": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "apply_index",
                    "function_code": "@apply_index_wraps\ndef apply_index(self, dtindex):\n    shifted = liboffsets.shift_quarters(\n        dtindex.asi8, self.n, self.month, self._day_opt, modby=12\n    )\n    # TODO: going through __new__ raises on call to _validate_frequency;\n    #  are we passing incorrect freq?\n    return type(dtindex)._simple_new(\n        shifted, freq=dtindex.freq, dtype=dtindex.dtype\n    )\n",
                    "decorators": [
                        "apply_index_wraps"
                    ],
                    "docstring": null,
                    "start_line": 1952,
                    "end_line": 1961,
                    "variables": {
                        "shifted": [
                            1960,
                            1954
                        ],
                        "liboffsets.shift_quarters": [
                            1954
                        ],
                        "liboffsets": [
                            1954
                        ],
                        "dtindex.asi8": [
                            1955
                        ],
                        "dtindex": [
                            1960,
                            1955,
                            1959
                        ],
                        "self.n": [
                            1955
                        ],
                        "self": [
                            1955
                        ],
                        "self.month": [
                            1955
                        ],
                        "self._day_opt": [
                            1955
                        ],
                        "_simple_new": [
                            1959
                        ],
                        "type": [
                            1959
                        ],
                        "dtindex.freq": [
                            1960
                        ],
                        "dtindex.dtype": [
                            1960
                        ],
                        "apply_index_wraps": [
                            1952
                        ]
                    },
                    "filtered_variables": {
                        "shifted": [
                            1960,
                            1954
                        ],
                        "liboffsets.shift_quarters": [
                            1954
                        ],
                        "liboffsets": [
                            1954
                        ],
                        "dtindex.asi8": [
                            1955
                        ],
                        "dtindex": [
                            1960,
                            1955,
                            1959
                        ],
                        "self.n": [
                            1955
                        ],
                        "self": [
                            1955
                        ],
                        "self.month": [
                            1955
                        ],
                        "self._day_opt": [
                            1955
                        ],
                        "_simple_new": [
                            1959
                        ],
                        "dtindex.freq": [
                            1960
                        ],
                        "dtindex.dtype": [
                            1960
                        ],
                        "apply_index_wraps": [
                            1952
                        ]
                    },
                    "diff_line_number": 1957,
                    "class_data": {
                        "signature": "class YearOffset(DateOffset)",
                        "docstring": "DateOffset that just needs a month.",
                        "constructor_docstring": null,
                        "functions": [
                            "def _get_offset_day(self, other: datetime) -> int:\n    return liboffsets.get_day_of_month(other.replace(month=self.month), self._day_opt)",
                            "@apply_wraps\ndef apply(self, other):\n    years = roll_yearday(other, self.n, self.month, self._day_opt)\n    months = years * 12 + (self.month - other.month)\n    return shift_month(other, months, self._day_opt)",
                            "@apply_index_wraps\ndef apply_index(self, dtindex):\n    shifted = liboffsets.shift_quarters(dtindex.asi8, self.n, self.month, self._day_opt, modby=12)\n    return type(dtindex)._simple_new(shifted, freq=dtindex.freq, dtype=dtindex.dtype)",
                            "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and (not _is_normalized(dt)):\n        return False\n    return dt.month == self.month and dt.day == self._get_offset_day(dt)",
                            "def __init__(self, n=1, normalize=False, month=None):\n    BaseOffset.__init__(self, n, normalize)\n    month = month if month is not None else self._default_month\n    object.__setattr__(self, 'month', month)\n    if self.month < 1 or self.month > 12:\n        raise ValueError('Month must go from 1 to 12')",
                            "@classmethod\ndef _from_name(cls, suffix=None):\n    kwargs = {}\n    if suffix:\n        kwargs['month'] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n    return cls(**kwargs)",
                            "@property\ndef rule_code(self) -> str:\n    month = ccalendar.MONTH_ALIASES[self.month]\n    return f'{self._prefix}-{month}'"
                        ],
                        "constructor_variables": [
                            "month"
                        ],
                        "class_level_variables": [
                            "_adjust_dst",
                            "_attributes"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_get_offset_day(self, other: datetime) -> int",
                            "apply(self, other)",
                            "apply_index(self, dtindex)",
                            "is_on_offset(self, dt: datetime) -> bool",
                            "__init__(self, n=1, normalize=False, month=None)",
                            "_from_name(cls, suffix=None)",
                            "rule_code(self) -> str"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * YearBegins: month=1>",
                                    "variable_type": "YearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([883612800000000000, 883612860000000000, 883612920000000000, ...,\n       915187020000000000, 915187080000000000, 915187140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * YearBegins: month=1>",
                                    "variable_type": "YearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<YearBegin: month=1>",
                                    "variable_type": "YearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([978307200000000000, 978307260000000000, 978307320000000000, ...,\n       978345420000000000, 978345480000000000, 978345540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<YearBegin: month=1>",
                                    "variable_type": "YearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'start'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * YearEnds: month=12>",
                                    "variable_type": "YearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([915062400000000000, 915062460000000000, 915062520000000000, ...,\n       915100620000000000, 915100680000000000, 915100740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * YearEnds: month=12>",
                                    "variable_type": "YearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<YearEnd: month=12>",
                                    "variable_type": "YearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([978220800000000000, 978220860000000000, 978220920000000000, ...,\n       978259020000000000, 978259080000000000, 978259140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<YearEnd: month=12>",
                                    "variable_type": "YearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'end'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessYearBegins: month=1>",
                                    "variable_type": "BYearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([883612800000000000, 883612860000000000, 883612920000000000, ...,\n       915187020000000000, 915187080000000000, 915187140000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessYearBegins: month=1>",
                                    "variable_type": "BYearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessYearBegin: month=1>",
                                    "variable_type": "BYearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([946857600000000000, 946857660000000000, 946857720000000000, ...,\n       978345420000000000, 978345480000000000, 978345540000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessYearBegin: month=1>",
                                    "variable_type": "BYearBegin",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_start'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessYearEnds: month=12>",
                                    "variable_type": "BYearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([915062400000000000, 915062460000000000, 915062520000000000, ...,\n       915100620000000000, 915100680000000000, 915100740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<-2 * BusinessYearEnds: month=12>",
                                    "variable_type": "BYearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "shifted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessYearEnd: month=12>",
                                    "variable_type": "BYearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "shifted": {
                                    "variable_value": "array([978048000000000000, 978048060000000000, 978048120000000000, ...,\n       978086220000000000, 978086280000000000, 978086340000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "liboffsets.shift_quarters": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "liboffsets": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.asi8": {
                                    "variable_value": "array([946684800000000000, 946684860000000000, 946684920000000000, ...,\n       952684620000000000, 952684680000000000, 952684740000000000])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(100000,)"
                                },
                                "dtindex": {
                                    "variable_value": "<DatetimeArray>\n['2000-01-01 00:00:00', '2000-01-01 00:01:00', '2000-01-01 00:02:00',\n '2000-01-01 00:03:00', '2000-01-01 00:04:00', '2000-01-01 00:05:00',\n '2000-01-01 00:06:00', '2000-01-01 00:07:00', '2000-01-01 00:08:00',\n '2000-01-01 00:09:00',\n ...\n '2000-03-10 10:30:00', '2000-03-10 10:31:00', '2000-03-10 10:32:00',\n '2000-03-10 10:33:00', '2000-03-10 10:34:00', '2000-03-10 10:35:00',\n '2000-03-10 10:36:00', '2000-03-10 10:37:00', '2000-03-10 10:38:00',\n '2000-03-10 10:39:00']\nLength: 100000, dtype: datetime64[ns]",
                                    "variable_type": "DatetimeArray",
                                    "variable_shape": "(100000,)"
                                },
                                "self.n": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<BusinessYearEnd: month=12>",
                                    "variable_type": "BYearEnd",
                                    "variable_shape": null
                                },
                                "self.month": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._day_opt": {
                                    "variable_value": "'business_end'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "_simple_new": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtindex.freq": {
                                    "variable_value": "<Minute>",
                                    "variable_type": "Minute",
                                    "variable_shape": null
                                },
                                "dtindex.dtype": {
                                    "variable_value": "dtype('<M8[ns]')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "apply_index_wraps": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def as_timestamp(obj):\n    if isinstance(obj, Timestamp):\n        return obj\n    try:\n        return Timestamp(obj)\n    except (OutOfBoundsDatetime):\n        pass\n    return obj",
                "def apply_wraps(func):\n    @functools.wraps(func)\n    def wrapper(self, other):\n        if other is NaT:\n            return NaT\n        elif isinstance(other, (timedelta, Tick, DateOffset)):\n            # timedelta path\n            return func(self, other)\n        elif isinstance(other, (np.datetime64, datetime, date)):\n            other = as_timestamp(other)\n\n        tz = getattr(other, \"tzinfo\", None)\n        nano = getattr(other, \"nanosecond\", 0)\n\n        try:\n            if self._adjust_dst and isinstance(other, Timestamp):\n                other = other.tz_localize(None)\n\n            result = func(self, other)\n\n            if self._adjust_dst:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n            if self.normalize:\n                result = result.normalize()\n\n            # nanosecond may be deleted depending on offset process\n            if not self.normalize and nano != 0:\n                if not isinstance(self, Nano) and result.nanosecond != nano:\n                    if result.tz is not None:\n                        # convert to UTC\n                        value = conversion.tz_convert_single(\n                            result.value, timezones.UTC, result.tz\n                        )\n                    else:\n                        value = result.value\n                    result = Timestamp(value + nano)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n        except OutOfBoundsDatetime:\n            result = func(self, as_datetime(other))\n\n            if self.normalize:\n                # normalize_date returns normal datetime\n                result = normalize_date(result)\n\n            if tz is not None and result.tzinfo is None:\n                result = conversion.localize_pydatetime(result, tz)\n\n            result = Timestamp(result)\n\n        return result\n\n    return wrapper",
                "def _tick_comp(op):\n    assert op not in [operator.eq, operator.ne]\n\n    def f(self, other):\n        try:\n            return op(self.delta, other.delta)\n        except AttributeError as err:\n            # comparing with a non-Tick object\n            raise TypeError(\n                f\"Invalid comparison between {type(self).__name__} \"\n                f\"and {type(other).__name__}\"\n            ) from err\n\n    f.__name__ = f\"__{op.__name__}__\"\n    return f",
                "def delta_to_tick(delta: timedelta) -> Tick:\n    if delta.microseconds == 0 and getattr(delta, \"nanoseconds\", 0) == 0:\n        # nanoseconds only for pd.Timedelta\n        if delta.seconds == 0:\n            return Day(delta.days)\n        else:\n            seconds = delta.days * 86400 + delta.seconds\n            if seconds % 3600 == 0:\n                return Hour(seconds / 3600)\n            elif seconds % 60 == 0:\n                return Minute(seconds / 60)\n            else:\n                return Second(seconds)\n    else:\n        nanos = delta_to_nanoseconds(delta)\n        if nanos % 1_000_000 == 0:\n            return Milli(nanos // 1_000_000)\n        elif nanos % 1000 == 0:\n            return Micro(nanos // 1000)\n        else:  # pragma: no cover\n            return Nano(nanos)",
                "def generate_range(start=None, end=None, periods=None, offset=BDay()):\n    \"\"\"\n    Generates a sequence of dates corresponding to the specified time\n    offset. Similar to dateutil.rrule except uses pandas DateOffset\n    objects to represent time increments.\n\n    Parameters\n    ----------\n    start : datetime, (default None)\n    end : datetime, (default None)\n    periods : int, (default None)\n    offset : DateOffset, (default BDay())\n\n    Notes\n    -----\n    * This method is faster for generating weekdays than dateutil.rrule\n    * At least two of (start, end, periods) must be specified.\n    * If both start and end are specified, the returned dates will\n    satisfy start <= date <= end.\n\n    Returns\n    -------\n    dates : generator object\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    offset = to_offset(offset)\n\n    start = Timestamp(start)\n    start = start if start is not NaT else None\n    end = Timestamp(end)\n    end = end if end is not NaT else None\n\n    if start and not offset.is_on_offset(start):\n        start = offset.rollforward(start)\n\n    elif end and not offset.is_on_offset(end):\n        end = offset.rollback(end)\n\n    if periods is None and end < start and offset.n >= 0:\n        end = None\n        periods = 0\n\n    if end is None:\n        end = start + (periods - 1) * offset\n\n    if start is None:\n        start = end - (periods - 1) * offset\n\n    cur = start\n    if offset.n >= 0:\n        while cur <= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date <= cur:\n                raise ValueError(f\"Offset {offset} did not increment date\")\n            cur = next_date\n    else:\n        while cur >= end:\n            yield cur\n\n            if cur == end:\n                # GH#24252 avoid overflows by not performing the addition\n                # in offset.apply unless we have to\n                break\n\n            # faster than cur + offset\n            next_date = offset.apply(cur)\n            if next_date >= cur:\n                raise ValueError(f\"Offset {offset} did not decrement date\")\n            cur = next_date",
                "@functools.wraps(func)\ndef wrapper(self, other):\n    if other is NaT:\n        return NaT\n    elif isinstance(other, (timedelta, Tick, DateOffset)):\n        # timedelta path\n        return func(self, other)\n    elif isinstance(other, (np.datetime64, datetime, date)):\n        other = as_timestamp(other)\n\n    tz = getattr(other, \"tzinfo\", None)\n    nano = getattr(other, \"nanosecond\", 0)\n\n    try:\n        if self._adjust_dst and isinstance(other, Timestamp):\n            other = other.tz_localize(None)\n\n        result = func(self, other)\n\n        if self._adjust_dst:\n            result = conversion.localize_pydatetime(result, tz)\n\n        result = Timestamp(result)\n        if self.normalize:\n            result = result.normalize()\n\n        # nanosecond may be deleted depending on offset process\n        if not self.normalize and nano != 0:\n            if not isinstance(self, Nano) and result.nanosecond != nano:\n                if result.tz is not None:\n                    # convert to UTC\n                    value = conversion.tz_convert_single(\n                        result.value, timezones.UTC, result.tz\n                    )\n                else:\n                    value = result.value\n                result = Timestamp(value + nano)\n\n        if tz is not None and result.tzinfo is None:\n            result = conversion.localize_pydatetime(result, tz)\n\n    except OutOfBoundsDatetime:\n        result = func(self, as_datetime(other))\n\n        if self.normalize:\n            # normalize_date returns normal datetime\n            result = normalize_date(result)\n\n        if tz is not None and result.tzinfo is None:\n            result = conversion.localize_pydatetime(result, tz)\n\n        result = Timestamp(result)\n\n    return result",
                "def __init__(self, n=1, normalize=False, **kwds):\n    BaseOffset.__init__(self, n, normalize)\n\n    off, use_rd = liboffsets._determine_offset(kwds)\n    object.__setattr__(self, \"_offset\", off)\n    object.__setattr__(self, \"_use_relativedelta\", use_rd)\n    for key in kwds:\n        val = kwds[key]\n        object.__setattr__(self, key, val)",
                "@apply_wraps\ndef apply(self, other):\n    if self._use_relativedelta:\n        other = as_datetime(other)\n\n    if len(self.kwds) > 0:\n        tzinfo = getattr(other, \"tzinfo\", None)\n        if tzinfo is not None and self._use_relativedelta:\n            # perform calculation in UTC\n            other = other.replace(tzinfo=None)\n\n        if self.n > 0:\n            for i in range(self.n):\n                other = other + self._offset\n        else:\n            for i in range(-self.n):\n                other = other - self._offset\n\n        if tzinfo is not None and self._use_relativedelta:\n            # bring tz back from UTC calculation\n            other = conversion.localize_pydatetime(other, tzinfo)\n\n        return as_timestamp(other)\n    else:\n        return other + timedelta(self.n)",
                "@apply_index_wraps\ndef apply_index(self, i):\n    \"\"\"\n    Vectorized apply of DateOffset to DatetimeIndex,\n    raises NotImplentedError for offsets without a\n    vectorized implementation.\n\n    Parameters\n    ----------\n    i : DatetimeIndex\n\n    Returns\n    -------\n    y : DatetimeIndex\n    \"\"\"\n    if type(self) is not DateOffset:\n        raise NotImplementedError(\n            f\"DateOffset subclass {type(self).__name__} \"\n            \"does not have a vectorized implementation\"\n        )\n    kwds = self.kwds\n    relativedelta_fast = {\n        \"years\",\n        \"months\",\n        \"weeks\",\n        \"days\",\n        \"hours\",\n        \"minutes\",\n        \"seconds\",\n        \"microseconds\",\n    }\n    # relativedelta/_offset path only valid for base DateOffset\n    if self._use_relativedelta and set(kwds).issubset(relativedelta_fast):\n\n        months = (kwds.get(\"years\", 0) * 12 + kwds.get(\"months\", 0)) * self.n\n        if months:\n            shifted = liboffsets.shift_months(i.asi8, months)\n            i = type(i)(shifted, dtype=i.dtype)\n\n        weeks = (kwds.get(\"weeks\", 0)) * self.n\n        if weeks:\n            # integer addition on PeriodIndex is deprecated,\n            #   so we directly use _time_shift instead\n            asper = i.to_period(\"W\")\n            shifted = asper._time_shift(weeks)\n            i = shifted.to_timestamp() + i.to_perioddelta(\"W\")\n\n        timedelta_kwds = {\n            k: v\n            for k, v in kwds.items()\n            if k in [\"days\", \"hours\", \"minutes\", \"seconds\", \"microseconds\"]\n        }\n        if timedelta_kwds:\n            delta = Timedelta(**timedelta_kwds)\n            i = i + (self.n * delta)\n        return i\n    elif not self._use_relativedelta and hasattr(self, \"_offset\"):\n        # timedelta\n        return i + (self._offset * self.n)\n    else:\n        # relativedelta with other keywords\n        kwd = set(kwds) - relativedelta_fast\n        raise NotImplementedError(\n            \"DateOffset with relativedelta \"\n            f\"keyword(s) {kwd} not able to be \"\n            \"applied vectorized\"\n        )",
                "def is_anchored(self) -> bool:\n    # TODO: Does this make sense for the general case?  It would help\n    # if there were a canonical docstring for what is_anchored means.\n    return self.n == 1",
                "def onOffset(self, dt):\n    warnings.warn(\n        \"onOffset is a deprecated, use is_on_offset instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.is_on_offset(dt)",
                "def isAnchored(self) -> bool:\n    warnings.warn(\n        \"isAnchored is a deprecated, use is_anchored instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.is_anchored()",
                "def _repr_attrs(self) -> str:\n    exclude = {\"n\", \"inc\", \"normalize\"}\n    attrs = []\n    for attr in sorted(self.__dict__):\n        if attr.startswith(\"_\") or attr == \"kwds\":\n            continue\n        elif attr not in exclude:\n            value = getattr(self, attr)\n            attrs.append(f\"{attr}={value}\")\n\n    out = \"\"\n    if attrs:\n        out += \": \" + \", \".join(attrs)\n    return out",
                "@property\ndef name(self) -> str:\n    return self.rule_code",
                "def rollback(self, dt):\n    \"\"\"\n    Roll provided date backward to next offset only if not on offset.\n\n    Returns\n    -------\n    TimeStamp\n        Rolled timestamp if not on offset, otherwise unchanged timestamp.\n    \"\"\"\n    dt = as_timestamp(dt)\n    if not self.is_on_offset(dt):\n        dt = dt - type(self)(1, normalize=self.normalize, **self.kwds)\n    return dt",
                "def rollforward(self, dt):\n    \"\"\"\n    Roll provided date forward to next offset only if not on offset.\n\n    Returns\n    -------\n    TimeStamp\n        Rolled timestamp if not on offset, otherwise unchanged timestamp.\n    \"\"\"\n    dt = as_timestamp(dt)\n    if not self.is_on_offset(dt):\n        dt = dt + type(self)(1, normalize=self.normalize, **self.kwds)\n    return dt",
                "def is_on_offset(self, dt):\n    if self.normalize and not _is_normalized(dt):\n        return False\n    # XXX, see #1395\n    if type(self) == DateOffset or isinstance(self, Tick):\n        return True\n\n    # Default (slow) method for determining if some date is a member of the\n    # date range generated by this offset. Subclasses may have this\n    # re-implemented in a nicer way.\n    a = dt\n    b = (dt + self) - self\n    return a == b",
                "@property\ndef _prefix(self) -> str:\n    raise NotImplementedError(\"Prefix not defined\")",
                "@property\ndef rule_code(self) -> str:\n    return self._prefix",
                "@cache_readonly\ndef freqstr(self) -> str:\n    try:\n        code = self.rule_code\n    except NotImplementedError:\n        return repr(self)\n\n    if self.n != 1:\n        fstr = f\"{self.n}{code}\"\n    else:\n        fstr = code\n\n    try:\n        if self._offset:\n            fstr += self._offset_str()\n    except AttributeError:\n        # TODO: standardize `_offset` vs `offset` naming convention\n        pass\n\n    return fstr",
                "def _offset_str(self) -> str:\n    return \"\"",
                "@property\ndef nanos(self):\n    raise ValueError(f\"{self} is a non-fixed frequency\")",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    # default _from_name calls cls with no args\n    if suffix:\n        raise ValueError(f\"Bad freq suffix {suffix}\")\n    return cls()",
                "def __init__(self, weekmask, holidays, calendar):\n    calendar, holidays = _get_calendar(\n        weekmask=weekmask, holidays=holidays, calendar=calendar\n    )\n    # Custom offset instances are identified by the\n    # following two attributes. See DateOffset._params()\n    # holidays, weekmask\n\n    object.__setattr__(self, \"weekmask\", weekmask)\n    object.__setattr__(self, \"holidays\", holidays)\n    object.__setattr__(self, \"calendar\", calendar)",
                "@property\ndef offset(self):\n    \"\"\"\n    Alias for self._offset.\n    \"\"\"\n    # Alias for backward compat\n    return self._offset",
                "def _repr_attrs(self) -> str:\n    if self.offset:\n        attrs = [f\"offset={repr(self.offset)}\"]\n    else:\n        attrs = []\n    out = \"\"\n    if attrs:\n        out += \": \" + \", \".join(attrs)\n    return out",
                "def __init__(self, n=1, normalize=False, offset=timedelta(0)):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"_offset\", offset)",
                "def _offset_str(self) -> str:\n    def get_str(td):\n        off_str = \"\"\n        if td.days > 0:\n            off_str += str(td.days) + \"D\"\n        if td.seconds > 0:\n            s = td.seconds\n            hrs = int(s / 3600)\n            if hrs != 0:\n                off_str += str(hrs) + \"H\"\n                s -= hrs * 3600\n            mts = int(s / 60)\n            if mts != 0:\n                off_str += str(mts) + \"Min\"\n                s -= mts * 60\n            if s != 0:\n                off_str += str(s) + \"s\"\n        if td.microseconds > 0:\n            off_str += str(td.microseconds) + \"us\"\n        return off_str\n\n    if isinstance(self.offset, timedelta):\n        zero = timedelta(0, 0, 0)\n        if self.offset >= zero:\n            off_str = \"+\" + get_str(self.offset)\n        else:\n            off_str = \"-\" + get_str(-self.offset)\n        return off_str\n    else:\n        return \"+\" + repr(self.offset)",
                "@apply_wraps\ndef apply(self, other):\n    if isinstance(other, datetime):\n        n = self.n\n        wday = other.weekday()\n\n        # avoid slowness below by operating on weeks first\n        weeks = n // 5\n        if n <= 0 and wday > 4:\n            # roll forward\n            n += 1\n\n        n -= 5 * weeks\n\n        # n is always >= 0 at this point\n        if n == 0 and wday > 4:\n            # roll back\n            days = 4 - wday\n        elif wday > 4:\n            # roll forward\n            days = (7 - wday) + (n - 1)\n        elif wday + n <= 4:\n            # shift by n days without leaving the current week\n            days = n\n        else:\n            # shift by n days plus 2 to get past the weekend\n            days = n + 2\n\n        result = other + timedelta(days=7 * weeks + days)\n        if self.offset:\n            result = result + self.offset\n        return result\n\n    elif isinstance(other, (timedelta, Tick)):\n        return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n    else:\n        raise ApplyTypeError(\n            \"Only know how to combine business day with datetime or timedelta.\"\n        )",
                "@apply_index_wraps\ndef apply_index(self, i):\n    time = i.to_perioddelta(\"D\")\n    # to_period rolls forward to next BDay; track and\n    # reduce n where it does when rolling forward\n    asper = i.to_period(\"B\")\n\n    if self.n > 0:\n        shifted = (i.to_perioddelta(\"B\") - time).asi8 != 0\n\n        # Integer-array addition is deprecated, so we use\n        # _time_shift directly\n        roll = np.where(shifted, self.n - 1, self.n)\n        shifted = asper._addsub_int_array(roll, operator.add)\n    else:\n        # Integer addition is deprecated, so we use _time_shift directly\n        roll = self.n\n        shifted = asper._time_shift(roll)\n\n    result = shifted.to_timestamp() + time\n    return result",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    return dt.weekday() < 5",
                "def __init__(self, start=\"09:00\", end=\"17:00\", offset=timedelta(0)):\n    # must be validated here to equality check\n    if not is_list_like(start):\n        start = [start]\n    if not len(start):\n        raise ValueError(\"Must include at least 1 start time\")\n\n    if not is_list_like(end):\n        end = [end]\n    if not len(end):\n        raise ValueError(\"Must include at least 1 end time\")\n\n    start = np.array([liboffsets._validate_business_time(x) for x in start])\n    end = np.array([liboffsets._validate_business_time(x) for x in end])\n\n    # Validation of input\n    if len(start) != len(end):\n        raise ValueError(\"number of starting time and ending time must be the same\")\n    num_openings = len(start)\n\n    # sort starting and ending time by starting time\n    index = np.argsort(start)\n\n    # convert to tuple so that start and end are hashable\n    start = tuple(start[index])\n    end = tuple(end[index])\n\n    total_secs = 0\n    for i in range(num_openings):\n        total_secs += self._get_business_hours_by_sec(start[i], end[i])\n        total_secs += self._get_business_hours_by_sec(\n            end[i], start[(i + 1) % num_openings]\n        )\n    if total_secs != 24 * 60 * 60:\n        raise ValueError(\n            \"invalid starting and ending time(s): \"\n            \"opening hours should not touch or overlap with \"\n            \"one another\"\n        )\n\n    object.__setattr__(self, \"start\", start)\n    object.__setattr__(self, \"end\", end)\n    object.__setattr__(self, \"_offset\", offset)",
                "@cache_readonly\ndef next_bday(self):\n    \"\"\"\n    Used for moving to next business day.\n    \"\"\"\n    if self.n >= 0:\n        nb_offset = 1\n    else:\n        nb_offset = -1\n    if self._prefix.startswith(\"C\"):\n        # CustomBusinessHour\n        return CustomBusinessDay(\n            n=nb_offset,\n            weekmask=self.weekmask,\n            holidays=self.holidays,\n            calendar=self.calendar,\n        )\n    else:\n        return BusinessDay(n=nb_offset)",
                "def _next_opening_time(self, other, sign=1):\n    \"\"\"\n    If self.n and sign have the same sign, return the earliest opening time\n    later than or equal to current time.\n    Otherwise the latest opening time earlier than or equal to current\n    time.\n\n    Opening time always locates on BusinessDay.\n    However, closing time may not if business hour extends over midnight.\n\n    Parameters\n    ----------\n    other : datetime\n        Current time.\n    sign : int, default 1.\n        Either 1 or -1. Going forward in time if it has the same sign as\n        self.n. Going backward in time otherwise.\n\n    Returns\n    -------\n    result : datetime\n        Next opening time.\n    \"\"\"\n    earliest_start = self.start[0]\n    latest_start = self.start[-1]\n\n    if not self.next_bday.is_on_offset(other):\n        # today is not business day\n        other = other + sign * self.next_bday\n        if self.n * sign >= 0:\n            hour, minute = earliest_start.hour, earliest_start.minute\n        else:\n            hour, minute = latest_start.hour, latest_start.minute\n    else:\n        if self.n * sign >= 0:\n            if latest_start < other.time():\n                # current time is after latest starting time in today\n                other = other + sign * self.next_bday\n                hour, minute = earliest_start.hour, earliest_start.minute\n            else:\n                # find earliest starting time no earlier than current time\n                for st in self.start:\n                    if other.time() <= st:\n                        hour, minute = st.hour, st.minute\n                        break\n        else:\n            if other.time() < earliest_start:\n                # current time is before earliest starting time in today\n                other = other + sign * self.next_bday\n                hour, minute = latest_start.hour, latest_start.minute\n            else:\n                # find latest starting time no later than current time\n                for st in reversed(self.start):\n                    if other.time() >= st:\n                        hour, minute = st.hour, st.minute\n                        break\n\n    return datetime(other.year, other.month, other.day, hour, minute)",
                "def _prev_opening_time(self, other):\n    \"\"\"\n    If n is positive, return the latest opening time earlier than or equal\n    to current time.\n    Otherwise the earliest opening time later than or equal to current\n    time.\n\n    Parameters\n    ----------\n    other : datetime\n        Current time.\n\n    Returns\n    -------\n    result : datetime\n        Previous opening time.\n    \"\"\"\n    return self._next_opening_time(other, sign=-1)",
                "def _get_business_hours_by_sec(self, start, end):\n    \"\"\"\n    Return business hours in a day by seconds.\n    \"\"\"\n    # create dummy datetime to calculate businesshours in a day\n    dtstart = datetime(2014, 4, 1, start.hour, start.minute)\n    day = 1 if start < end else 2\n    until = datetime(2014, 4, day, end.hour, end.minute)\n    return int((until - dtstart).total_seconds())",
                "@apply_wraps\ndef rollback(self, dt):\n    \"\"\"\n    Roll provided date backward to next offset only if not on offset.\n    \"\"\"\n    if not self.is_on_offset(dt):\n        if self.n >= 0:\n            dt = self._prev_opening_time(dt)\n        else:\n            dt = self._next_opening_time(dt)\n        return self._get_closing_time(dt)\n    return dt",
                "@apply_wraps\ndef rollforward(self, dt):\n    \"\"\"\n    Roll provided date forward to next offset only if not on offset.\n    \"\"\"\n    if not self.is_on_offset(dt):\n        if self.n >= 0:\n            return self._next_opening_time(dt)\n        else:\n            return self._prev_opening_time(dt)\n    return dt",
                "def _get_closing_time(self, dt):\n    \"\"\"\n    Get the closing time of a business hour interval by its opening time.\n\n    Parameters\n    ----------\n    dt : datetime\n        Opening time of a business hour interval.\n\n    Returns\n    -------\n    result : datetime\n        Corresponding closing time.\n    \"\"\"\n    for i, st in enumerate(self.start):\n        if st.hour == dt.hour and st.minute == dt.minute:\n            return dt + timedelta(\n                seconds=self._get_business_hours_by_sec(st, self.end[i])\n            )\n    assert False",
                "@apply_wraps\ndef apply(self, other):\n    if isinstance(other, datetime):\n        # used for detecting edge condition\n        nanosecond = getattr(other, \"nanosecond\", 0)\n        # reset timezone and nanosecond\n        # other may be a Timestamp, thus not use replace\n        other = datetime(\n            other.year,\n            other.month,\n            other.day,\n            other.hour,\n            other.minute,\n            other.second,\n            other.microsecond,\n        )\n        n = self.n\n\n        # adjust other to reduce number of cases to handle\n        if n >= 0:\n            if other.time() in self.end or not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n        else:\n            if other.time() in self.start:\n                # adjustment to move to previous business day\n                other = other - timedelta(seconds=1)\n            if not self._is_on_offset(other):\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n\n        # get total business hours by sec in one business day\n        businesshours = sum(\n            self._get_business_hours_by_sec(st, en)\n            for st, en in zip(self.start, self.end)\n        )\n\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n\n        # adjust by business days first\n        if bd != 0:\n            if isinstance(self, _CustomMixin):  # GH 30593\n                skip_bd = CustomBusinessDay(\n                    n=bd,\n                    weekmask=self.weekmask,\n                    holidays=self.holidays,\n                    calendar=self.calendar,\n                )\n            else:\n                skip_bd = BusinessDay(n=bd)\n            # midnight business hour may not on BusinessDay\n            if not self.next_bday.is_on_offset(other):\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n\n        # remaining business hours to adjust\n        bhour_remain = timedelta(minutes=r)\n\n        if n >= 0:\n            while bhour_remain != timedelta(0):\n                # business hour left in this business time interval\n                bhour = (\n                    self._get_closing_time(self._prev_opening_time(other)) - other\n                )\n                if bhour_remain < bhour:\n                    # finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain != timedelta(0):\n                # business hour left in this business time interval\n                bhour = self._next_opening_time(other) - other\n                if (\n                    bhour_remain > bhour\n                    or bhour_remain == bhour\n                    and nanosecond != 0\n                ):\n                    # finish adjusting if possible\n                    other += bhour_remain\n                    bhour_remain = timedelta(0)\n                else:\n                    # go to next business time interval\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(\n                        self._next_opening_time(\n                            other + bhour - timedelta(seconds=1)\n                        )\n                    )\n\n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")",
                "def is_on_offset(self, dt):\n    if self.normalize and not _is_normalized(dt):\n        return False\n\n    if dt.tzinfo is not None:\n        dt = datetime(\n            dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, dt.microsecond\n        )\n    # Valid BH can be on the different BusinessDay during midnight\n    # Distinguish by the time spent from previous opening time\n    return self._is_on_offset(dt)",
                "def _is_on_offset(self, dt):\n    \"\"\"\n    Slight speedups using calculated values.\n    \"\"\"\n    # if self.normalize and not _is_normalized(dt):\n    #     return False\n    # Valid BH can be on the different BusinessDay during midnight\n    # Distinguish by the time spent from previous opening time\n    if self.n >= 0:\n        op = self._prev_opening_time(dt)\n    else:\n        op = self._next_opening_time(dt)\n    span = (dt - op).total_seconds()\n    businesshours = 0\n    for i, st in enumerate(self.start):\n        if op.hour == st.hour and op.minute == st.minute:\n            businesshours = self._get_business_hours_by_sec(st, self.end[i])\n    if span <= businesshours:\n        return True\n    else:\n        return False",
                "def _repr_attrs(self):\n    out = super()._repr_attrs()\n    hours = \",\".join(\n        f'{st.strftime(\"%H:%M\")}-{en.strftime(\"%H:%M\")}'\n        for st, en in zip(self.start, self.end)\n    )\n    attrs = [f\"{self._prefix}={hours}\"]\n    out += \": \" + \", \".join(attrs)\n    return out",
                "def __init__(\n    self, n=1, normalize=False, start=\"09:00\", end=\"17:00\", offset=timedelta(0)\n):\n    BaseOffset.__init__(self, n, normalize)\n    super().__init__(start=start, end=end, offset=offset)",
                "def __init__(\n    self,\n    n=1,\n    normalize=False,\n    weekmask=\"Mon Tue Wed Thu Fri\",\n    holidays=None,\n    calendar=None,\n    offset=timedelta(0),\n):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"_offset\", offset)\n\n    _CustomMixin.__init__(self, weekmask, holidays, calendar)",
                "@apply_wraps\ndef apply(self, other):\n    if self.n <= 0:\n        roll = \"forward\"\n    else:\n        roll = \"backward\"\n\n    if isinstance(other, datetime):\n        date_in = other\n        np_dt = np.datetime64(date_in.date())\n\n        np_incr_dt = np.busday_offset(\n            np_dt, self.n, roll=roll, busdaycal=self.calendar\n        )\n\n        dt_date = np_incr_dt.astype(datetime)\n        result = datetime.combine(dt_date, date_in.time())\n\n        if self.offset:\n            result = result + self.offset\n        return result\n\n    elif isinstance(other, (timedelta, Tick)):\n        return BDay(self.n, offset=self.offset + other, normalize=self.normalize)\n    else:\n        raise ApplyTypeError(\n            \"Only know how to combine trading day with \"\n            \"datetime, datetime64 or timedelta.\"\n        )",
                "def apply_index(self, i):\n    raise NotImplementedError",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    day64 = _to_dt64D(dt)\n    return np.is_busday(day64, busdaycal=self.calendar)",
                "def __init__(\n    self,\n    n=1,\n    normalize=False,\n    weekmask=\"Mon Tue Wed Thu Fri\",\n    holidays=None,\n    calendar=None,\n    start=\"09:00\",\n    end=\"17:00\",\n    offset=timedelta(0),\n):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"_offset\", offset)\n\n    _CustomMixin.__init__(self, weekmask, holidays, calendar)\n    BusinessHourMixin.__init__(self, start=start, end=end, offset=offset)",
                "@property\ndef name(self) -> str:\n    if self.is_anchored:\n        return self.rule_code\n    else:\n        month = ccalendar.MONTH_ALIASES[self.n]\n        return f\"{self.code_rule}-{month}\"",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    return dt.day == self._get_offset_day(dt)",
                "@apply_wraps\ndef apply(self, other):\n    compare_day = self._get_offset_day(other)\n    n = liboffsets.roll_convention(other.day, self.n, compare_day)\n    return shift_month(other, n, self._day_opt)",
                "@apply_index_wraps\ndef apply_index(self, i):\n    shifted = liboffsets.shift_months(i.asi8, self.n, self._day_opt)\n    # TODO: going through __new__ raises on call to _validate_frequency;\n    #  are we passing incorrect freq?\n    return type(i)._simple_new(shifted, freq=i.freq, dtype=i.dtype)",
                "def __init__(\n    self,\n    n=1,\n    normalize=False,\n    weekmask=\"Mon Tue Wed Thu Fri\",\n    holidays=None,\n    calendar=None,\n    offset=timedelta(0),\n):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"_offset\", offset)\n\n    _CustomMixin.__init__(self, weekmask, holidays, calendar)",
                "@cache_readonly\ndef cbday_roll(self):\n    \"\"\"\n    Define default roll function to be called in apply method.\n    \"\"\"\n    cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)\n\n    if self._prefix.endswith(\"S\"):\n        # MonthBegin\n        roll_func = cbday.rollforward\n    else:\n        # MonthEnd\n        roll_func = cbday.rollback\n    return roll_func",
                "@cache_readonly\ndef m_offset(self):\n    if self._prefix.endswith(\"S\"):\n        # MonthBegin\n        moff = MonthBegin(n=1, normalize=False)\n    else:\n        # MonthEnd\n        moff = MonthEnd(n=1, normalize=False)\n    return moff",
                "@cache_readonly\ndef month_roll(self):\n    \"\"\"\n    Define default roll function to be called in apply method.\n    \"\"\"\n    if self._prefix.endswith(\"S\"):\n        # MonthBegin\n        roll_func = self.m_offset.rollback\n    else:\n        # MonthEnd\n        roll_func = self.m_offset.rollforward\n    return roll_func",
                "@apply_wraps\ndef apply(self, other):\n    # First move to month offset\n    cur_month_offset_date = self.month_roll(other)\n\n    # Find this custom month offset\n    compare_date = self.cbday_roll(cur_month_offset_date)\n    n = liboffsets.roll_convention(other.day, self.n, compare_date.day)\n\n    new = cur_month_offset_date + n * self.m_offset\n    result = self.cbday_roll(new)\n    return result",
                "def __init__(self, n=1, normalize=False, day_of_month=None):\n    BaseOffset.__init__(self, n, normalize)\n\n    if day_of_month is None:\n        object.__setattr__(self, \"day_of_month\", self._default_day_of_month)\n    else:\n        object.__setattr__(self, \"day_of_month\", int(day_of_month))\n    if not self._min_day_of_month <= self.day_of_month <= 27:\n        raise ValueError(\n            \"day_of_month must be \"\n            f\"{self._min_day_of_month}<=day_of_month<=27, \"\n            f\"got {self.day_of_month}\"\n        )",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    return cls(day_of_month=suffix)",
                "@property\ndef rule_code(self) -> str:\n    suffix = f\"-{self.day_of_month}\"\n    return self._prefix + suffix",
                "@apply_wraps\ndef apply(self, other):\n    # shift `other` to self.day_of_month, incrementing `n` if necessary\n    n = liboffsets.roll_convention(other.day, self.n, self.day_of_month)\n\n    days_in_month = ccalendar.get_days_in_month(other.year, other.month)\n\n    # For SemiMonthBegin on other.day == 1 and\n    # SemiMonthEnd on other.day == days_in_month,\n    # shifting `other` to `self.day_of_month` _always_ requires\n    # incrementing/decrementing `n`, regardless of whether it is\n    # initially positive.\n    if type(self) is SemiMonthBegin and (self.n <= 0 and other.day == 1):\n        n -= 1\n    elif type(self) is SemiMonthEnd and (self.n > 0 and other.day == days_in_month):\n        n += 1\n\n    return self._apply(n, other)",
                "def _apply(self, n, other):\n    \"\"\"\n    Handle specific apply logic for child classes.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "@apply_index_wraps\ndef apply_index(self, i):\n    # determine how many days away from the 1st of the month we are\n    dti = i\n    days_from_start = i.to_perioddelta(\"M\").asi8\n    delta = Timedelta(days=self.day_of_month - 1).value\n\n    # get boolean array for each element before the day_of_month\n    before_day_of_month = days_from_start < delta\n\n    # get boolean array for each element after the day_of_month\n    after_day_of_month = days_from_start > delta\n\n    # determine the correct n for each date in i\n    roll = self._get_roll(i, before_day_of_month, after_day_of_month)\n\n    # isolate the time since it will be striped away one the next line\n    time = i.to_perioddelta(\"D\")\n\n    # apply the correct number of months\n\n    # integer-array addition on PeriodIndex is deprecated,\n    #  so we use _addsub_int_array directly\n    asper = i.to_period(\"M\")\n\n    shifted = asper._addsub_int_array(roll // 2, operator.add)\n    i = type(dti)(shifted.to_timestamp())\n\n    # apply the correct day\n    i = self._apply_index_days(i, roll)\n\n    return i + time",
                "def _get_roll(self, i, before_day_of_month, after_day_of_month):\n    \"\"\"\n    Return an array with the correct n for each date in i.\n\n    The roll array is based on the fact that i gets rolled back to\n    the first day of the month.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "def _apply_index_days(self, i, roll):\n    \"\"\"\n    Apply the correct day for each date in i.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    days_in_month = ccalendar.get_days_in_month(dt.year, dt.month)\n    return dt.day in (self.day_of_month, days_in_month)",
                "def _apply(self, n, other):\n    months = n // 2\n    day = 31 if n % 2 else self.day_of_month\n    return shift_month(other, months, day)",
                "def _get_roll(self, i, before_day_of_month, after_day_of_month):\n    n = self.n\n    is_month_end = i.is_month_end\n    if n > 0:\n        roll_end = np.where(is_month_end, 1, 0)\n        roll_before = np.where(before_day_of_month, n, n + 1)\n        roll = roll_end + roll_before\n    elif n == 0:\n        roll_after = np.where(after_day_of_month, 2, 0)\n        roll_before = np.where(~after_day_of_month, 1, 0)\n        roll = roll_before + roll_after\n    else:\n        roll = np.where(after_day_of_month, n + 2, n + 1)\n    return roll",
                "def _apply_index_days(self, i, roll):\n    \"\"\"\n    Add days portion of offset to DatetimeIndex i.\n\n    Parameters\n    ----------\n    i : DatetimeIndex\n    roll : ndarray[int64_t]\n\n    Returns\n    -------\n    result : DatetimeIndex\n    \"\"\"\n    nanos = (roll % 2) * Timedelta(days=self.day_of_month).value\n    i += nanos.astype(\"timedelta64[ns]\")\n    return i + Timedelta(days=-1)",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    return dt.day in (1, self.day_of_month)",
                "def _apply(self, n, other):\n    months = n // 2 + n % 2\n    day = 1 if n % 2 else self.day_of_month\n    return shift_month(other, months, day)",
                "def _get_roll(self, i, before_day_of_month, after_day_of_month):\n    n = self.n\n    is_month_start = i.is_month_start\n    if n > 0:\n        roll = np.where(before_day_of_month, n, n + 1)\n    elif n == 0:\n        roll_start = np.where(is_month_start, 0, 1)\n        roll_after = np.where(after_day_of_month, 1, 0)\n        roll = roll_start + roll_after\n    else:\n        roll_after = np.where(after_day_of_month, n + 2, n + 1)\n        roll_start = np.where(is_month_start, -1, 0)\n        roll = roll_after + roll_start\n    return roll",
                "def _apply_index_days(self, i, roll):\n    \"\"\"\n    Add days portion of offset to DatetimeIndex i.\n\n    Parameters\n    ----------\n    i : DatetimeIndex\n    roll : ndarray[int64_t]\n\n    Returns\n    -------\n    result : DatetimeIndex\n    \"\"\"\n    nanos = (roll % 2) * Timedelta(days=self.day_of_month - 1).value\n    return i + nanos.astype(\"timedelta64[ns]\")",
                "def __init__(self, n=1, normalize=False, weekday=None):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"weekday\", weekday)\n\n    if self.weekday is not None:\n        if self.weekday < 0 or self.weekday > 6:\n            raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
                "def is_anchored(self) -> bool:\n    return self.n == 1 and self.weekday is not None",
                "@apply_wraps\ndef apply(self, other):\n    if self.weekday is None:\n        return other + self.n * self._inc\n\n    if not isinstance(other, datetime):\n        raise TypeError(\n            f\"Cannot add {type(other).__name__} to {type(self).__name__}\"\n        )\n\n    k = self.n\n    otherDay = other.weekday()\n    if otherDay != self.weekday:\n        other = other + timedelta((self.weekday - otherDay) % 7)\n        if k > 0:\n            k -= 1\n\n    return other + timedelta(weeks=k)",
                "@apply_index_wraps\ndef apply_index(self, i):\n    if self.weekday is None:\n        # integer addition on PeriodIndex is deprecated,\n        #  so we use _time_shift directly\n        asper = i.to_period(\"W\")\n\n        shifted = asper._time_shift(self.n)\n        return shifted.to_timestamp() + i.to_perioddelta(\"W\")\n    else:\n        return self._end_apply_index(i)",
                "def _end_apply_index(self, dtindex):\n    \"\"\"\n    Add self to the given DatetimeIndex, specialized for case where\n    self.weekday is non-null.\n\n    Parameters\n    ----------\n    dtindex : DatetimeIndex\n\n    Returns\n    -------\n    result : DatetimeIndex\n    \"\"\"\n    off = dtindex.to_perioddelta(\"D\")\n\n    base, mult = libfrequencies.get_freq_code(self.freqstr)\n    base_period = dtindex.to_period(base)\n\n    if self.n > 0:\n        # when adding, dates on end roll to next\n        normed = dtindex - off + Timedelta(1, \"D\") - Timedelta(1, \"ns\")\n        roll = np.where(\n            base_period.to_timestamp(how=\"end\") == normed, self.n, self.n - 1\n        )\n        # integer-array addition on PeriodIndex is deprecated,\n        #  so we use _addsub_int_array directly\n        shifted = base_period._addsub_int_array(roll, operator.add)\n        base = shifted.to_timestamp(how=\"end\")\n    else:\n        # integer addition on PeriodIndex is deprecated,\n        #  so we use _time_shift directly\n        roll = self.n\n        base = base_period._time_shift(roll).to_timestamp(how=\"end\")\n\n    return base + off + Timedelta(1, \"ns\") - Timedelta(1, \"D\")",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    elif self.weekday is None:\n        return True\n    return dt.weekday() == self.weekday",
                "@property\ndef rule_code(self) -> str:\n    suffix = \"\"\n    if self.weekday is not None:\n        weekday = ccalendar.int_to_weekday[self.weekday]\n        suffix = f\"-{weekday}\"\n    return self._prefix + suffix",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    if not suffix:\n        weekday = None\n    else:\n        weekday = ccalendar.weekday_to_int[suffix]\n    return cls(weekday=weekday)",
                "@apply_wraps\ndef apply(self, other):\n    compare_day = self._get_offset_day(other)\n\n    months = self.n\n    if months > 0 and compare_day > other.day:\n        months -= 1\n    elif months <= 0 and compare_day < other.day:\n        months += 1\n\n    shifted = shift_month(other, months, \"start\")\n    to_day = self._get_offset_day(shifted)\n    return liboffsets.shift_day(shifted, to_day - shifted.day)",
                "def is_on_offset(self, dt):\n    if self.normalize and not _is_normalized(dt):\n        return False\n    return dt.day == self._get_offset_day(dt)",
                "def __init__(self, n=1, normalize=False, week=0, weekday=0):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"weekday\", weekday)\n    object.__setattr__(self, \"week\", week)\n\n    if self.weekday < 0 or self.weekday > 6:\n        raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")\n    if self.week < 0 or self.week > 3:\n        raise ValueError(f\"Week must be 0<=week<=3, got {self.week}\")",
                "def _get_offset_day(self, other: datetime) -> int:\n    \"\"\"\n    Find the day in the same month as other that has the same\n    weekday as self.weekday and is the self.week'th such day in the month.\n\n    Parameters\n    ----------\n    other : datetime\n\n    Returns\n    -------\n    day : int\n    \"\"\"\n    mstart = datetime(other.year, other.month, 1)\n    wday = mstart.weekday()\n    shift_days = (self.weekday - wday) % 7\n    return 1 + shift_days + self.week * 7",
                "@property\ndef rule_code(self) -> str:\n    weekday = ccalendar.int_to_weekday.get(self.weekday, \"\")\n    return f\"{self._prefix}-{self.week + 1}{weekday}\"",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    if not suffix:\n        raise ValueError(f\"Prefix {repr(cls._prefix)} requires a suffix.\")\n    # TODO: handle n here...\n    # only one digit weeks (1 --> week 0, 2 --> week 1, etc.)\n    week = int(suffix[0]) - 1\n    weekday = ccalendar.weekday_to_int[suffix[1:]]\n    return cls(week=week, weekday=weekday)",
                "def __init__(self, n=1, normalize=False, weekday=0):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"weekday\", weekday)\n\n    if self.n == 0:\n        raise ValueError(\"N cannot be 0\")\n\n    if self.weekday < 0 or self.weekday > 6:\n        raise ValueError(f\"Day must be 0<=day<=6, got {self.weekday}\")",
                "def _get_offset_day(self, other: datetime) -> int:\n    \"\"\"\n    Find the day in the same month as other that has the same\n    weekday as self.weekday and is the last such day in the month.\n\n    Parameters\n    ----------\n    other: datetime\n\n    Returns\n    -------\n    day: int\n    \"\"\"\n    dim = ccalendar.get_days_in_month(other.year, other.month)\n    mend = datetime(other.year, other.month, dim)\n    wday = mend.weekday()\n    shift_days = (wday - self.weekday) % 7\n    return dim - shift_days",
                "@property\ndef rule_code(self) -> str:\n    weekday = ccalendar.int_to_weekday.get(self.weekday, \"\")\n    return f\"{self._prefix}-{weekday}\"",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    if not suffix:\n        raise ValueError(f\"Prefix {repr(cls._prefix)} requires a suffix.\")\n    # TODO: handle n here...\n    weekday = ccalendar.weekday_to_int[suffix]\n    return cls(weekday=weekday)",
                "def __init__(self, n=1, normalize=False, startingMonth=None):\n    BaseOffset.__init__(self, n, normalize)\n\n    if startingMonth is None:\n        startingMonth = self._default_startingMonth\n    object.__setattr__(self, \"startingMonth\", startingMonth)",
                "def is_anchored(self) -> bool:\n    return self.n == 1 and self.startingMonth is not None",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    kwargs = {}\n    if suffix:\n        kwargs[\"startingMonth\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n    else:\n        if cls._from_name_startingMonth is not None:\n            kwargs[\"startingMonth\"] = cls._from_name_startingMonth\n    return cls(**kwargs)",
                "@property\ndef rule_code(self) -> str:\n    month = ccalendar.MONTH_ALIASES[self.startingMonth]\n    return f\"{self._prefix}-{month}\"",
                "@apply_wraps\ndef apply(self, other):\n    # months_since: find the calendar quarter containing other.month,\n    # e.g. if other.month == 8, the calendar quarter is [Jul, Aug, Sep].\n    # Then find the month in that quarter containing an is_on_offset date for\n    # self.  `months_since` is the number of months to shift other.month\n    # to get to this on-offset month.\n    months_since = other.month % 3 - self.startingMonth % 3\n    qtrs = liboffsets.roll_qtrday(\n        other, self.n, self.startingMonth, day_opt=self._day_opt, modby=3\n    )\n    months = qtrs * 3 - months_since\n    return shift_month(other, months, self._day_opt)",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    mod_month = (dt.month - self.startingMonth) % 3\n    return mod_month == 0 and dt.day == self._get_offset_day(dt)",
                "@apply_index_wraps\ndef apply_index(self, dtindex):\n    shifted = liboffsets.shift_quarters(\n        dtindex.asi8, self.n, self.startingMonth, self._day_opt\n    )\n    # TODO: going through __new__ raises on call to _validate_frequency;\n    #  are we passing incorrect freq?\n    return type(dtindex)._simple_new(\n        shifted, freq=dtindex.freq, dtype=dtindex.dtype\n    )",
                "def _get_offset_day(self, other: datetime) -> int:\n    # override BaseOffset method to use self.month instead of other.month\n    # TODO: there may be a more performant way to do this\n    return liboffsets.get_day_of_month(\n        other.replace(month=self.month), self._day_opt\n    )",
                "@apply_wraps\ndef apply(self, other):\n    years = roll_yearday(other, self.n, self.month, self._day_opt)\n    months = years * 12 + (self.month - other.month)\n    return shift_month(other, months, self._day_opt)",
                "@apply_index_wraps\ndef apply_index(self, dtindex):\n    shifted = liboffsets.shift_quarters(\n        dtindex.asi8, self.n, self.month, self._day_opt, modby=12\n    )\n    # TODO: going through __new__ raises on call to _validate_frequency;\n    #  are we passing incorrect freq?\n    return type(dtindex)._simple_new(\n        shifted, freq=dtindex.freq, dtype=dtindex.dtype\n    )",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    return dt.month == self.month and dt.day == self._get_offset_day(dt)",
                "def __init__(self, n=1, normalize=False, month=None):\n    BaseOffset.__init__(self, n, normalize)\n\n    month = month if month is not None else self._default_month\n    object.__setattr__(self, \"month\", month)\n\n    if self.month < 1 or self.month > 12:\n        raise ValueError(\"Month must go from 1 to 12\")",
                "@classmethod\ndef _from_name(cls, suffix=None):\n    kwargs = {}\n    if suffix:\n        kwargs[\"month\"] = ccalendar.MONTH_TO_CAL_NUM[suffix]\n    return cls(**kwargs)",
                "@property\ndef rule_code(self) -> str:\n    month = ccalendar.MONTH_ALIASES[self.month]\n    return f\"{self._prefix}-{month}\"",
                "def __init__(\n    self, n=1, normalize=False, weekday=0, startingMonth=1, variation=\"nearest\"\n):\n    BaseOffset.__init__(self, n, normalize)\n    object.__setattr__(self, \"startingMonth\", startingMonth)\n    object.__setattr__(self, \"weekday\", weekday)\n\n    object.__setattr__(self, \"variation\", variation)\n\n    if self.n == 0:\n        raise ValueError(\"N cannot be 0\")\n\n    if self.variation not in [\"nearest\", \"last\"]:\n        raise ValueError(f\"{self.variation} is not a valid variation\")",
                "def is_anchored(self) -> bool:\n    return (\n        self.n == 1 and self.startingMonth is not None and self.weekday is not None\n    )",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    dt = datetime(dt.year, dt.month, dt.day)\n    year_end = self.get_year_end(dt)\n\n    if self.variation == \"nearest\":\n        # We have to check the year end of \"this\" cal year AND the previous\n        return year_end == dt or self.get_year_end(shift_month(dt, -1, None)) == dt\n    else:\n        return year_end == dt",
                "@apply_wraps\ndef apply(self, other):\n    norm = Timestamp(other).normalize()\n\n    n = self.n\n    prev_year = self.get_year_end(datetime(other.year - 1, self.startingMonth, 1))\n    cur_year = self.get_year_end(datetime(other.year, self.startingMonth, 1))\n    next_year = self.get_year_end(datetime(other.year + 1, self.startingMonth, 1))\n\n    prev_year = conversion.localize_pydatetime(prev_year, other.tzinfo)\n    cur_year = conversion.localize_pydatetime(cur_year, other.tzinfo)\n    next_year = conversion.localize_pydatetime(next_year, other.tzinfo)\n\n    # Note: next_year.year == other.year + 1, so we will always\n    # have other < next_year\n    if norm == prev_year:\n        n -= 1\n    elif norm == cur_year:\n        pass\n    elif n > 0:\n        if norm < prev_year:\n            n -= 2\n        elif prev_year < norm < cur_year:\n            n -= 1\n        elif cur_year < norm < next_year:\n            pass\n    else:\n        if cur_year < norm < next_year:\n            n += 1\n        elif prev_year < norm < cur_year:\n            pass\n        elif (\n            norm.year == prev_year.year\n            and norm < prev_year\n            and prev_year - norm <= timedelta(6)\n        ):\n            # GH#14774, error when next_year.year == cur_year.year\n            # e.g. prev_year == datetime(2004, 1, 3),\n            # other == datetime(2004, 1, 1)\n            n -= 1\n        else:\n            assert False\n\n    shifted = datetime(other.year + n, self.startingMonth, 1)\n    result = self.get_year_end(shifted)\n    result = datetime(\n        result.year,\n        result.month,\n        result.day,\n        other.hour,\n        other.minute,\n        other.second,\n        other.microsecond,\n    )\n    return result",
                "def get_year_end(self, dt):\n    assert dt.tzinfo is None\n\n    dim = ccalendar.get_days_in_month(dt.year, self.startingMonth)\n    target_date = datetime(dt.year, self.startingMonth, dim)\n    wkday_diff = self.weekday - target_date.weekday()\n    if wkday_diff == 0:\n        # year_end is the same for \"last\" and \"nearest\" cases\n        return target_date\n\n    if self.variation == \"last\":\n        days_forward = (wkday_diff % 7) - 7\n\n        # days_forward is always negative, so we always end up\n        # in the same year as dt\n        return target_date + timedelta(days=days_forward)\n    else:\n        # variation == \"nearest\":\n        days_forward = wkday_diff % 7\n        if days_forward <= 3:\n            # The upcoming self.weekday is closer than the previous one\n            return target_date + timedelta(days_forward)\n        else:\n            # The previous self.weekday is closer than the upcoming one\n            return target_date + timedelta(days_forward - 7)",
                "@property\ndef rule_code(self) -> str:\n    prefix = self._prefix\n    suffix = self.get_rule_code_suffix()\n    return f\"{prefix}-{suffix}\"",
                "def _get_suffix_prefix(self) -> str:\n    if self.variation == \"nearest\":\n        return \"N\"\n    else:\n        return \"L\"",
                "def get_rule_code_suffix(self) -> str:\n    prefix = self._get_suffix_prefix()\n    month = ccalendar.MONTH_ALIASES[self.startingMonth]\n    weekday = ccalendar.int_to_weekday[self.weekday]\n    return f\"{prefix}-{month}-{weekday}\"",
                "@classmethod\ndef _parse_suffix(cls, varion_code, startingMonth_code, weekday_code):\n    if varion_code == \"N\":\n        variation = \"nearest\"\n    elif varion_code == \"L\":\n        variation = \"last\"\n    else:\n        raise ValueError(f\"Unable to parse varion_code: {varion_code}\")\n\n    startingMonth = ccalendar.MONTH_TO_CAL_NUM[startingMonth_code]\n    weekday = ccalendar.weekday_to_int[weekday_code]\n\n    return {\n        \"weekday\": weekday,\n        \"startingMonth\": startingMonth,\n        \"variation\": variation,\n    }",
                "@classmethod\ndef _from_name(cls, *args):\n    return cls(**cls._parse_suffix(*args))",
                "def __init__(\n    self,\n    n=1,\n    normalize=False,\n    weekday=0,\n    startingMonth=1,\n    qtr_with_extra_week=1,\n    variation=\"nearest\",\n):\n    BaseOffset.__init__(self, n, normalize)\n\n    object.__setattr__(self, \"startingMonth\", startingMonth)\n    object.__setattr__(self, \"weekday\", weekday)\n    object.__setattr__(self, \"qtr_with_extra_week\", qtr_with_extra_week)\n    object.__setattr__(self, \"variation\", variation)\n\n    if self.n == 0:\n        raise ValueError(\"N cannot be 0\")",
                "@cache_readonly\ndef _offset(self):\n    return FY5253(\n        startingMonth=self.startingMonth,\n        weekday=self.weekday,\n        variation=self.variation,\n    )",
                "def is_anchored(self) -> bool:\n    return self.n == 1 and self._offset.is_anchored()",
                "def _rollback_to_year(self, other):\n    \"\"\"\n    Roll `other` back to the most recent date that was on a fiscal year\n    end.\n\n    Return the date of that year-end, the number of full quarters\n    elapsed between that year-end and other, and the remaining Timedelta\n    since the most recent quarter-end.\n\n    Parameters\n    ----------\n    other : datetime or Timestamp\n\n    Returns\n    -------\n    tuple of\n    prev_year_end : Timestamp giving most recent fiscal year end\n    num_qtrs : int\n    tdelta : Timedelta\n    \"\"\"\n    num_qtrs = 0\n\n    norm = Timestamp(other).tz_localize(None)\n    start = self._offset.rollback(norm)\n    # Note: start <= norm and self._offset.is_on_offset(start)\n\n    if start < norm:\n        # roll adjustment\n        qtr_lens = self.get_weeks(norm)\n\n        # check thet qtr_lens is consistent with self._offset addition\n        end = liboffsets.shift_day(start, days=7 * sum(qtr_lens))\n        assert self._offset.is_on_offset(end), (start, end, qtr_lens)\n\n        tdelta = norm - start\n        for qlen in qtr_lens:\n            if qlen * 7 <= tdelta.days:\n                num_qtrs += 1\n                tdelta -= Timedelta(days=qlen * 7)\n            else:\n                break\n    else:\n        tdelta = Timedelta(0)\n\n    # Note: we always have tdelta.value >= 0\n    return start, num_qtrs, tdelta",
                "@apply_wraps\ndef apply(self, other):\n    # Note: self.n == 0 is not allowed.\n    n = self.n\n\n    prev_year_end, num_qtrs, tdelta = self._rollback_to_year(other)\n    res = prev_year_end\n    n += num_qtrs\n    if self.n <= 0 and tdelta.value > 0:\n        n += 1\n\n    # Possible speedup by handling years first.\n    years = n // 4\n    if years:\n        res += self._offset * years\n        n -= years * 4\n\n    # Add an extra day to make *sure* we are getting the quarter lengths\n    # for the upcoming year, not the previous year\n    qtr_lens = self.get_weeks(res + Timedelta(days=1))\n\n    # Note: we always have 0 <= n < 4\n    weeks = sum(qtr_lens[:n])\n    if weeks:\n        res = liboffsets.shift_day(res, days=weeks * 7)\n\n    return res",
                "def get_weeks(self, dt):\n    ret = [13] * 4\n\n    year_has_extra_week = self.year_has_extra_week(dt)\n\n    if year_has_extra_week:\n        ret[self.qtr_with_extra_week - 1] = 14\n\n    return ret",
                "def year_has_extra_week(self, dt: datetime) -> bool:\n    # Avoid round-down errors --> normalize to get\n    # e.g. '370D' instead of '360D23H'\n    norm = Timestamp(dt).normalize().tz_localize(None)\n\n    next_year_end = self._offset.rollforward(norm)\n    prev_year_end = norm - self._offset\n    weeks_in_year = (next_year_end - prev_year_end).days / 7\n    assert weeks_in_year in [52, 53], weeks_in_year\n    return weeks_in_year == 53",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    if self._offset.is_on_offset(dt):\n        return True\n\n    next_year_end = dt - self._offset\n\n    qtr_lens = self.get_weeks(dt)\n\n    current = next_year_end\n    for qtr_len in qtr_lens:\n        current = liboffsets.shift_day(current, days=qtr_len * 7)\n        if dt == current:\n            return True\n    return False",
                "@property\ndef rule_code(self) -> str:\n    suffix = self._offset.get_rule_code_suffix()\n    qtr = self.qtr_with_extra_week\n    return f\"{self._prefix}-{suffix}-{qtr}\"",
                "@classmethod\ndef _from_name(cls, *args):\n    return cls(\n        **dict(FY5253._parse_suffix(*args[:-1]), qtr_with_extra_week=int(args[-1]))\n    )",
                "@apply_wraps\ndef apply(self, other):\n    current_easter = easter(other.year)\n    current_easter = datetime(\n        current_easter.year, current_easter.month, current_easter.day\n    )\n    current_easter = conversion.localize_pydatetime(current_easter, other.tzinfo)\n\n    n = self.n\n    if n >= 0 and other < current_easter:\n        n -= 1\n    elif n < 0 and other > current_easter:\n        n += 1\n    # TODO: Why does this handle the 0 case the opposite of others?\n\n    # NOTE: easter returns a datetime.date so we have to convert to type of\n    # other\n    new = easter(other.year + n)\n    new = datetime(\n        new.year,\n        new.month,\n        new.day,\n        other.hour,\n        other.minute,\n        other.second,\n        other.microsecond,\n    )\n    return new",
                "def is_on_offset(self, dt: datetime) -> bool:\n    if self.normalize and not _is_normalized(dt):\n        return False\n    return date(dt.year, dt.month, dt.day) == easter(dt.year)",
                "def f(self, other):\n    try:\n        return op(self.delta, other.delta)\n    except AttributeError as err:\n        # comparing with a non-Tick object\n        raise TypeError(\n            f\"Invalid comparison between {type(self).__name__} \"\n            f\"and {type(other).__name__}\"\n        ) from err",
                "def __init__(self, n=1, normalize=False):\n    BaseOffset.__init__(self, n, normalize)\n    if normalize:\n        raise ValueError(\n            \"Tick offset with `normalize=True` are not allowed.\"\n        )  # GH#21427",
                "def __add__(self, other):\n    if isinstance(other, Tick):\n        if type(self) == type(other):\n            return type(self)(self.n + other.n)\n        else:\n            return delta_to_tick(self.delta + other.delta)\n    elif isinstance(other, Period):\n        return other + self\n    try:\n        return self.apply(other)\n    except ApplyTypeError:\n        return NotImplemented\n    except OverflowError as err:\n        raise OverflowError(\n            f\"the add operation between {self} and {other} will overflow\"\n        ) from err",
                "def __eq__(self, other: Any) -> bool:\n    if isinstance(other, str):\n        from pandas.tseries.frequencies import to_offset\n\n        try:\n            # GH#23524 if to_offset fails, we are dealing with an\n            #  incomparable type so == is False and != is True\n            other = to_offset(other)\n        except ValueError:\n            # e.g. \"infer\"\n            return False\n\n    if isinstance(other, Tick):\n        return self.delta == other.delta\n    else:\n        return False",
                "def __hash__(self) -> int:\n    return hash(self._params)",
                "def __ne__(self, other):\n    if isinstance(other, str):\n        from pandas.tseries.frequencies import to_offset\n\n        try:\n            # GH#23524 if to_offset fails, we are dealing with an\n            #  incomparable type so == is False and != is True\n            other = to_offset(other)\n        except ValueError:\n            # e.g. \"infer\"\n            return True\n\n    if isinstance(other, Tick):\n        return self.delta != other.delta\n    else:\n        return True",
                "@property\ndef delta(self) -> Timedelta:\n    return self.n * self._inc",
                "@property\ndef nanos(self):\n    return delta_to_nanoseconds(self.delta)",
                "def apply(self, other):\n    # Timestamp can handle tz and nano sec, thus no need to use apply_wraps\n    if isinstance(other, Timestamp):\n\n        # GH 15126\n        # in order to avoid a recursive\n        # call of __add__ and __radd__ if there is\n        # an exception, when we call using the + operator,\n        # we directly call the known method\n        result = other.__add__(self)\n        if result is NotImplemented:\n            raise OverflowError\n        return result\n    elif isinstance(other, (datetime, np.datetime64, date)):\n        return as_timestamp(other) + self\n\n    if isinstance(other, timedelta):\n        return other + self.delta\n    elif isinstance(other, type(self)):\n        return type(self)(self.n + other.n)\n\n    raise ApplyTypeError(f\"Unhandled type: {type(other).__name__}\")",
                "def is_anchored(self) -> bool:\n    return False",
                "def get_str(td):\n    off_str = \"\"\n    if td.days > 0:\n        off_str += str(td.days) + \"D\"\n    if td.seconds > 0:\n        s = td.seconds\n        hrs = int(s / 3600)\n        if hrs != 0:\n            off_str += str(hrs) + \"H\"\n            s -= hrs * 3600\n        mts = int(s / 60)\n        if mts != 0:\n            off_str += str(mts) + \"Min\"\n            s -= mts * 60\n        if s != 0:\n            off_str += str(s) + \"s\"\n    if td.microseconds > 0:\n        off_str += str(td.microseconds) + \"us\"\n    return off_str"
            ],
            "inscope_function_signatures": [
                "as_timestamp(obj)",
                "apply_wraps(func)",
                "_tick_comp(op)",
                "delta_to_tick(delta: timedelta) -> Tick",
                "generate_range(start=None, end=None, periods=None, offset=BDay())",
                "wrapper(self, other)",
                "__init__(self, n=1, normalize=False, **kwds)",
                "apply(self, other)",
                "apply_index(self, i)",
                "is_anchored(self) -> bool",
                "onOffset(self, dt)",
                "isAnchored(self) -> bool",
                "_repr_attrs(self) -> str",
                "name(self) -> str",
                "rollback(self, dt)",
                "rollforward(self, dt)",
                "is_on_offset(self, dt)",
                "_prefix(self) -> str",
                "rule_code(self) -> str",
                "freqstr(self) -> str",
                "_offset_str(self) -> str",
                "nanos(self)",
                "_from_name(cls, suffix=None)",
                "__init__(self, weekmask, holidays, calendar)",
                "offset(self)",
                "_repr_attrs(self) -> str",
                "__init__(self, n=1, normalize=False, offset=timedelta(0))",
                "_offset_str(self) -> str",
                "apply(self, other)",
                "apply_index(self, i)",
                "is_on_offset(self, dt: datetime) -> bool",
                "__init__(self, start='09:00', end='17:00', offset=timedelta(0))",
                "next_bday(self)",
                "_next_opening_time(self, other, sign=1)",
                "_prev_opening_time(self, other)",
                "_get_business_hours_by_sec(self, start, end)",
                "rollback(self, dt)",
                "rollforward(self, dt)",
                "_get_closing_time(self, dt)",
                "apply(self, other)",
                "is_on_offset(self, dt)",
                "_is_on_offset(self, dt)",
                "_repr_attrs(self)",
                "__init__(self, n=1, normalize=False, start='09:00', end='17:00', offset=timedelta(0))",
                "__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
                "apply(self, other)",
                "apply_index(self, i)",
                "is_on_offset(self, dt: datetime) -> bool",
                "__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, start='09:00', end='17:00', offset=timedelta(0))",
                "name(self) -> str",
                "is_on_offset(self, dt: datetime) -> bool",
                "apply(self, other)",
                "apply_index(self, i)",
                "__init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri', holidays=None, calendar=None, offset=timedelta(0))",
                "cbday_roll(self)",
                "m_offset(self)",
                "month_roll(self)",
                "apply(self, other)",
                "__init__(self, n=1, normalize=False, day_of_month=None)",
                "_from_name(cls, suffix=None)",
                "rule_code(self) -> str",
                "apply(self, other)",
                "_apply(self, n, other)",
                "apply_index(self, i)",
                "_get_roll(self, i, before_day_of_month, after_day_of_month)",
                "_apply_index_days(self, i, roll)",
                "is_on_offset(self, dt: datetime) -> bool",
                "_apply(self, n, other)",
                "_get_roll(self, i, before_day_of_month, after_day_of_month)",
                "_apply_index_days(self, i, roll)",
                "is_on_offset(self, dt: datetime) -> bool",
                "_apply(self, n, other)",
                "_get_roll(self, i, before_day_of_month, after_day_of_month)",
                "_apply_index_days(self, i, roll)",
                "__init__(self, n=1, normalize=False, weekday=None)",
                "is_anchored(self) -> bool",
                "apply(self, other)",
                "apply_index(self, i)",
                "_end_apply_index(self, dtindex)",
                "is_on_offset(self, dt: datetime) -> bool",
                "rule_code(self) -> str",
                "_from_name(cls, suffix=None)",
                "apply(self, other)",
                "is_on_offset(self, dt)",
                "__init__(self, n=1, normalize=False, week=0, weekday=0)",
                "_get_offset_day(self, other: datetime) -> int",
                "rule_code(self) -> str",
                "_from_name(cls, suffix=None)",
                "__init__(self, n=1, normalize=False, weekday=0)",
                "_get_offset_day(self, other: datetime) -> int",
                "rule_code(self) -> str",
                "_from_name(cls, suffix=None)",
                "__init__(self, n=1, normalize=False, startingMonth=None)",
                "is_anchored(self) -> bool",
                "_from_name(cls, suffix=None)",
                "rule_code(self) -> str",
                "apply(self, other)",
                "is_on_offset(self, dt: datetime) -> bool",
                "apply_index(self, dtindex)",
                "_get_offset_day(self, other: datetime) -> int",
                "apply(self, other)",
                "apply_index(self, dtindex)",
                "is_on_offset(self, dt: datetime) -> bool",
                "__init__(self, n=1, normalize=False, month=None)",
                "_from_name(cls, suffix=None)",
                "rule_code(self) -> str",
                "__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, variation='nearest')",
                "is_anchored(self) -> bool",
                "is_on_offset(self, dt: datetime) -> bool",
                "apply(self, other)",
                "get_year_end(self, dt)",
                "rule_code(self) -> str",
                "_get_suffix_prefix(self) -> str",
                "get_rule_code_suffix(self) -> str",
                "_parse_suffix(cls, varion_code, startingMonth_code, weekday_code)",
                "_from_name(cls, *args)",
                "__init__(self, n=1, normalize=False, weekday=0, startingMonth=1, qtr_with_extra_week=1, variation='nearest')",
                "_offset(self)",
                "is_anchored(self) -> bool",
                "_rollback_to_year(self, other)",
                "apply(self, other)",
                "get_weeks(self, dt)",
                "year_has_extra_week(self, dt: datetime) -> bool",
                "is_on_offset(self, dt: datetime) -> bool",
                "rule_code(self) -> str",
                "_from_name(cls, *args)",
                "apply(self, other)",
                "is_on_offset(self, dt: datetime) -> bool",
                "f(self, other)",
                "__init__(self, n=1, normalize=False)",
                "__add__(self, other)",
                "__eq__(self, other: Any) -> bool",
                "__hash__(self) -> int",
                "__ne__(self, other)",
                "delta(self) -> Timedelta",
                "nanos(self)",
                "apply(self, other)",
                "is_anchored(self) -> bool",
                "get_str(td)"
            ],
            "variables_in_file": {
                "__all__": [
                    40
                ],
                "isinstance": [
                    2564,
                    2575,
                    1556,
                    2586,
                    1056,
                    2597,
                    1071,
                    2613,
                    439,
                    573,
                    2624,
                    2627,
                    2629,
                    585,
                    84,
                    852,
                    98,
                    101,
                    616,
                    108,
                    2547,
                    2552,
                    122,
                    892
                ],
                "obj": [
                    90,
                    84,
                    85,
                    87
                ],
                "Timestamp": [
                    130,
                    2122,
                    108,
                    2734,
                    2736,
                    145,
                    116,
                    84,
                    2357,
                    87,
                    2613,
                    2423
                ],
                "OutOfBoundsDatetime": [
                    88,
                    135
                ],
                "other": [
                    2560,
                    2564,
                    2570,
                    2575,
                    2576,
                    1554,
                    1556,
                    1558,
                    1562,
                    2586,
                    1564,
                    1056,
                    1057,
                    1568,
                    2592,
                    2597,
                    2598,
                    1071,
                    1072,
                    2613,
                    2620,
                    2624,
                    2625,
                    2627,
                    2628,
                    2629,
                    2630,
                    2632,
                    585,
                    2122,
                    587,
                    2125,
                    2126,
                    2127,
                    2129,
                    2130,
                    2131,
                    96,
                    98,
                    611,
                    100,
                    101,
                    102,
                    104,
                    105,
                    616,
                    617,
                    108,
                    109,
                    111,
                    1649,
                    2163,
                    1652,
                    1654,
                    1143,
                    1144,
                    1145,
                    1657,
                    2169,
                    2170,
                    2171,
                    2172,
                    136,
                    1716,
                    742,
                    744,
                    751,
                    753,
                    758,
                    1784,
                    1785,
                    762,
                    1276,
                    764,
                    1280,
                    769,
                    773,
                    273,
                    276,
                    279,
                    792,
                    283,
                    286,
                    290,
                    292,
                    294,
                    2357,
                    1335,
                    1337,
                    1853,
                    1855,
                    1344,
                    1346,
                    1858,
                    1349,
                    2387,
                    852,
                    854,
                    857,
                    858,
                    859,
                    860,
                    861,
                    862,
                    863,
                    864,
                    870,
                    871,
                    873,
                    875,
                    876,
                    877,
                    878,
                    902,
                    903,
                    904,
                    905,
                    907,
                    916,
                    1430,
                    1943,
                    920,
                    1948,
                    925,
                    1949,
                    1950,
                    929,
                    936,
                    2475,
                    941,
                    943,
                    2479,
                    2482,
                    947,
                    2484,
                    2490,
                    2495,
                    2496,
                    2497,
                    2498,
                    1487,
                    2517,
                    2522,
                    2547,
                    2548,
                    2549,
                    2551,
                    2552,
                    2553,
                    2555
                ],
                "NaT": [
                    96,
                    97,
                    2737,
                    2735
                ],
                "timedelta": [
                    1536,
                    652,
                    910,
                    2191,
                    913,
                    1042,
                    2197,
                    2200,
                    921,
                    1564,
                    927,
                    1568,
                    548,
                    294,
                    937,
                    943,
                    1071,
                    573,
                    574,
                    2627,
                    1228,
                    845,
                    2638,
                    1109,
                    98,
                    611,
                    616,
                    2154,
                    875,
                    1006
                ],
                "Tick": [
                    98,
                    2691,
                    2597,
                    2661,
                    616,
                    2666,
                    2638,
                    1071,
                    2575,
                    2671,
                    2547,
                    2676,
                    439,
                    2681,
                    2686
                ],
                "DateOffset": [
                    98,
                    1218,
                    1219,
                    1667,
                    2243,
                    487,
                    1737,
                    1931,
                    1808,
                    2036,
                    1525,
                    439,
                    1303,
                    311,
                    2461
                ],
                "func": [
                    136,
                    100,
                    94,
                    111
                ],
                "self": [
                    2091,
                    2092,
                    2093,
                    2095,
                    2097,
                    2100,
                    2101,
                    2105,
                    2109,
                    2112,
                    2114,
                    2116,
                    2124,
                    2125,
                    2126,
                    2127,
                    100,
                    108,
                    111,
                    113,
                    2163,
                    2164,
                    117,
                    121,
                    122,
                    2179,
                    2180,
                    2181,
                    136,
                    138,
                    2186,
                    2204,
                    2205,
                    2209,
                    2215,
                    2216,
                    2217,
                    261,
                    264,
                    265,
                    2314,
                    268,
                    2316,
                    2317,
                    2318,
                    272,
                    2319,
                    2321,
                    275,
                    277,
                    2327,
                    2328,
                    281,
                    282,
                    283,
                    2329,
                    285,
                    286,
                    2333,
                    288,
                    294,
                    2358,
                    311,
                    313,
                    2363,
                    316,
                    2367,
                    328,
                    330,
                    335,
                    2385,
                    2387,
                    2390,
                    2396,
                    350,
                    352,
                    2401,
                    354,
                    2413,
                    367,
                    2416,
                    375,
                    2425,
                    2426,
                    383,
                    2432,
                    2434,
                    2437,
                    391,
                    2439,
                    395,
                    2450,
                    2451,
                    2452,
                    405,
                    417,
                    418,
                    431,
                    432,
                    2481,
                    436,
                    439,
                    446,
                    2503,
                    456,
                    461,
                    463,
                    465,
                    466,
                    2517,
                    471,
                    472,
                    2521,
                    484,
                    2535,
                    2548,
                    2549,
                    2551,
                    2553,
                    2555,
                    510,
                    511,
                    512,
                    2560,
                    526,
                    2576,
                    529,
                    530,
                    2583,
                    549,
                    550,
                    2598,
                    2604,
                    2608,
                    2620,
                    573,
                    575,
                    576,
                    2625,
                    578,
                    2628,
                    581,
                    2629,
                    2630,
                    586,
                    612,
                    613,
                    617,
                    630,
                    635,
                    639,
                    646,
                    681,
                    682,
                    692,
                    693,
                    694,
                    701,
                    705,
                    709,
                    710,
                    711,
                    739,
                    740,
                    742,
                    744,
                    745,
                    750,
                    753,
                    757,
                    764,
                    768,
                    792,
                    809,
                    810,
                    811,
                    813,
                    814,
                    822,
                    823,
                    824,
                    826,
                    843,
                    846,
                    866,
                    870,
                    871,
                    873,
                    876,
                    877,
                    878,
                    882,
                    883,
                    892,
                    895,
                    896,
                    897,
                    902,
                    903,
                    916,
                    925,
                    929,
                    941,
                    942,
                    952,
                    961,
                    971,
                    972,
                    974,
                    977,
                    979,
                    989,
                    991,
                    1008,
                    1044,
                    1045,
                    1047,
                    1051,
                    1061,
                    1067,
                    1068,
                    1072,
                    1083,
                    1086,
                    1111,
                    1112,
                    1114,
                    1115,
                    1130,
                    1131,
                    1133,
                    1134,
                    1137,
                    1139,
                    1143,
                    1144,
                    1145,
                    1149,
                    1230,
                    1231,
                    1233,
                    1240,
                    1242,
                    1252,
                    1265,
                    1267,
                    1270,
                    1276,
                    1279,
                    1280,
                    1282,
                    1283,
                    1310,
                    1313,
                    1315,
                    1316,
                    1319,
                    1320,
                    1329,
                    1330,
                    1335,
                    1344,
                    1346,
                    1349,
                    1355,
                    1362,
                    1371,
                    1386,
                    1397,
                    1403,
                    1422,
                    1425,
                    1429,
                    1433,
                    1460,
                    1480,
                    1482,
                    1486,
                    1490,
                    1517,
                    1541,
                    1542,
                    1544,
                    1545,
                    1546,
                    1549,
                    1553,
                    1554,
                    1558,
                    1561,
                    1563,
                    1564,
                    1572,
                    1577,
                    1580,
                    1597,
                    1600,
                    1604,
                    1613,
                    1619,
                    1621,
                    1623,
                    1628,
                    1629,
                    1631,
                    1649,
                    1651,
                    1658,
                    1662,
                    1664,
                    1694,
                    1695,
                    1696,
                    1698,
                    1699,
                    1700,
                    1701,
                    1718,
                    1719,
                    1723,
                    1724,
                    1762,
                    1763,
                    1765,
                    1768,
                    1769,
                    1787,
                    1792,
                    1793,
                    1822,
                    1825,
                    1826,
                    1829,
                    1843,
                    1844,
                    1853,
                    1855,
                    1858,
                    1861,
                    1863,
                    1864,
                    1869,
                    1943,
                    1948,
                    1949,
                    1950,
                    1955,
                    1964,
                    1966,
                    1969,
                    1971,
                    1972,
                    1974,
                    1986,
                    1987
                ],
                "np.datetime64": [
                    2624,
                    1058,
                    101
                ],
                "np": [
                    664,
                    665,
                    1436,
                    1437,
                    1440,
                    673,
                    1058,
                    1441,
                    1060,
                    1444,
                    1086,
                    2624,
                    1603,
                    1493,
                    1495,
                    1496,
                    1499,
                    1500,
                    101,
                    635
                ],
                "datetime": [
                    2180,
                    773,
                    645,
                    1421,
                    1939,
                    1556,
                    799,
                    1056,
                    801,
                    1703,
                    1064,
                    1065,
                    1963,
                    2476,
                    1716,
                    1082,
                    2491,
                    956,
                    2108,
                    2111,
                    2624,
                    1860,
                    2502,
                    1479,
                    585,
                    2125,
                    2126,
                    2127,
                    1618,
                    852,
                    857,
                    101,
                    1771,
                    1136,
                    2163,
                    2420,
                    2165,
                    1785,
                    2431
                ],
                "date": [
                    2624,
                    2505,
                    101
                ],
                "as_timestamp": [
                    416,
                    2625,
                    292,
                    102,
                    430
                ],
                "tz": [
                    132,
                    133,
                    104,
                    142,
                    143,
                    114
                ],
                "getattr": [
                    104,
                    105,
                    395,
                    2639,
                    276,
                    854
                ],
                "nano": [
                    105,
                    122,
                    121,
                    130
                ],
                "self._adjust_dst": [
                    113,
                    108
                ],
                "other.tz_localize": [
                    109
                ],
                "result": [
                    129,
                    130,
                    642,
                    132,
                    133,
                    643,
                    1283,
                    136,
                    1284,
                    140,
                    142,
                    143,
                    145,
                    147,
                    2167,
                    2168,
                    1065,
                    1068,
                    1069,
                    2174,
                    2620,
                    2621,
                    2623,
                    611,
                    613,
                    614,
                    111,
                    114,
                    116,
                    2164,
                    118,
                    2165,
                    2166,
                    122,
                    123,
                    126
                ],
                "conversion.localize_pydatetime": [
                    290,
                    133,
                    143,
                    2479,
                    2129,
                    114,
                    2130,
                    2131
                ],
                "conversion": [
                    290,
                    133,
                    143,
                    2479,
                    2129,
                    114,
                    2130,
                    2131,
                    125
                ],
                "self.normalize": [
                    2432,
                    646,
                    138,
                    1422,
                    418,
                    1964,
                    432,
                    1072,
                    436,
                    952,
                    1083,
                    2109,
                    1861,
                    2503,
                    1480,
                    1619,
                    617,
                    1137,
                    117,
                    121,
                    1662
                ],
                "result.normalize": [
                    118
                ],
                "Nano": [
                    122,
                    2805,
                    2658
                ],
                "result.nanosecond": [
                    122
                ],
                "result.tz": [
                    123,
                    126
                ],
                "value": [
                    129,
                    130,
                    395,
                    396,
                    1517,
                    1362,
                    1460,
                    125
                ],
                "conversion.tz_convert_single": [
                    125
                ],
                "result.value": [
                    129,
                    126
                ],
                "timezones.UTC": [
                    126
                ],
                "timezones": [
                    126
                ],
                "result.tzinfo": [
                    132,
                    142
                ],
                "as_datetime": [
                    136,
                    273
                ],
                "normalize_date": [
                    140
                ],
                "functools.wraps": [
                    94
                ],
                "functools": [
                    94
                ],
                "wrapper": [
                    149
                ],
                "BaseOffset": [
                    261,
                    1541,
                    2314,
                    1044,
                    156,
                    1694,
                    1822,
                    1310,
                    549,
                    2471,
                    2091,
                    1969,
                    1230,
                    1111,
                    1762,
                    1126,
                    2535,
                    1008,
                    251
                ],
                "_params": [
                    251
                ],
                "cache_readonly": [
                    1250,
                    458,
                    1260,
                    1235,
                    2324,
                    696,
                    251
                ],
                "BaseOffset._params.fget": [
                    251
                ],
                "BaseOffset._params": [
                    251
                ],
                "_use_relativedelta": [
                    252
                ],
                "_adjust_dst": [
                    545,
                    1123,
                    2468,
                    2085,
                    1936,
                    1815,
                    1304,
                    1690,
                    2300,
                    253,
                    1758,
                    1535
                ],
                "_attributes": [
                    546,
                    1538,
                    1124,
                    2469,
                    2086,
                    1031,
                    1096,
                    2532,
                    1003,
                    1691,
                    1937,
                    1816,
                    1307,
                    1214,
                    2301,
                    254,
                    1759
                ],
                "frozenset": [
                    546,
                    1538,
                    1124,
                    2469,
                    2086,
                    1031,
                    1096,
                    2532,
                    1003,
                    1691,
                    1937,
                    1759,
                    1816,
                    1307,
                    1214,
                    2301,
                    254,
                    255
                ],
                "list": [
                    254
                ],
                "liboffsets.relativedelta_kwds": [
                    254
                ],
                "liboffsets": [
                    1280,
                    2366,
                    1954,
                    2529,
                    2406,
                    263,
                    2443,
                    332,
                    1868,
                    1854,
                    1942,
                    1335,
                    664,
                    665,
                    1659,
                    1144,
                    1149,
                    254
                ],
                "_deprecations": [
                    255
                ],
                "normalize": [
                    258,
                    261,
                    1541,
                    2314,
                    1044,
                    1694,
                    1822,
                    1310,
                    549,
                    2091,
                    1969,
                    2122,
                    1230,
                    1111,
                    1762,
                    2535,
                    2536,
                    1008,
                    2423
                ],
                "BaseOffset.__init__": [
                    1762,
                    549,
                    261,
                    1126,
                    1541,
                    2471,
                    2314,
                    1694,
                    2091,
                    2535,
                    1230,
                    1822,
                    1008,
                    1969,
                    1044,
                    1111,
                    1310
                ],
                "n": [
                    1280,
                    1282,
                    261,
                    1541,
                    2314,
                    2394,
                    912,
                    1044,
                    1428,
                    1429,
                    1433,
                    1435,
                    2397,
                    1437,
                    1310,
                    1439,
                    1694,
                    1822,
                    1444,
                    549,
                    2091,
                    1969,
                    2481,
                    2482,
                    2483,
                    2484,
                    2485,
                    1335,
                    2490,
                    1345,
                    1347,
                    1349,
                    586,
                    2124,
                    1485,
                    590,
                    591,
                    1230,
                    593,
                    1486,
                    595,
                    1490,
                    1492,
                    598,
                    1111,
                    1493,
                    1494,
                    2136,
                    603,
                    604,
                    1499,
                    606,
                    2139,
                    2141,
                    609,
                    866,
                    1762,
                    2143,
                    869,
                    2148,
                    2385,
                    2404,
                    2535,
                    2159,
                    1008,
                    2163,
                    2389,
                    886,
                    887,
                    1144,
                    1145,
                    2391
                ],
                "off": [
                    1602,
                    263,
                    264,
                    1616,
                    1595
                ],
                "use_rd": [
                    265,
                    263
                ],
                "liboffsets._determine_offset": [
                    263
                ],
                "kwds": [
                    357,
                    263,
                    328,
                    266,
                    267,
                    330,
                    335,
                    345,
                    316
                ],
                "object.__setattr__": [
                    512,
                    1542,
                    264,
                    265,
                    268,
                    2316,
                    2317,
                    2318,
                    2319,
                    1045,
                    1695,
                    1696,
                    1313,
                    1826,
                    1315,
                    550,
                    2092,
                    2093,
                    2095,
                    692,
                    693,
                    694,
                    1972,
                    1231,
                    1112,
                    1763,
                    510,
                    511
                ],
                "object": [
                    512,
                    1542,
                    264,
                    265,
                    268,
                    2316,
                    2317,
                    2318,
                    2319,
                    1045,
                    1695,
                    1696,
                    1313,
                    1826,
                    1315,
                    550,
                    2092,
                    2093,
                    2095,
                    692,
                    693,
                    694,
                    1972,
                    1231,
                    1112,
                    1763,
                    510,
                    511
                ],
                "key": [
                    266,
                    267,
                    268
                ],
                "val": [
                    267,
                    268
                ],
                "self._use_relativedelta": [
                    288,
                    352,
                    328,
                    272,
                    277
                ],
                "len": [
                    656,
                    275,
                    661,
                    668,
                    670
                ],
                "self.kwds": [
                    418,
                    432,
                    275,
                    1240,
                    316
                ],
                "tzinfo": [
                    288,
                    290,
                    276,
                    277
                ],
                "other.replace": [
                    1943,
                    279
                ],
                "self.n": [
                    1280,
                    1549,
                    2321,
                    1554,
                    281,
                    282,
                    1051,
                    1433,
                    285,
                    1561,
                    1948,
                    2333,
                    1955,
                    1061,
                    294,
                    1829,
                    1577,
                    810,
                    2604,
                    1072,
                    2097,
                    2481,
                    823,
                    1335,
                    2105,
                    701,
                    1855,
                    1344,
                    1600,
                    1346,
                    1604,
                    2630,
                    330,
                    586,
                    971,
                    1613,
                    1869,
                    335,
                    2124,
                    465,
                    466,
                    1490,
                    2385,
                    2390,
                    1240,
                    350,
                    354,
                    866,
                    1765,
                    617,
                    745,
                    1133,
                    750,
                    367,
                    1651,
                    2549,
                    630,
                    1144,
                    635,
                    1149,
                    639
                ],
                "i": [
                    1152,
                    282,
                    1434,
                    285,
                    1575,
                    680,
                    681,
                    1578,
                    683,
                    1580,
                    1461,
                    1462,
                    843,
                    332,
                    333,
                    846,
                    1360,
                    977,
                    1361,
                    339,
                    979,
                    341,
                    1491,
                    1371,
                    350,
                    351,
                    1374,
                    354,
                    1380,
                    1383,
                    1386,
                    1388,
                    1518,
                    625,
                    628,
                    631,
                    1149
                ],
                "range": [
                    680,
                    282,
                    285
                ],
                "self._offset": [
                    354,
                    2434,
                    2437,
                    526,
                    2450,
                    2358,
                    471,
                    2425,
                    2426,
                    283,
                    2396,
                    2333,
                    286,
                    2367
                ],
                "apply_wraps": [
                    804,
                    1273,
                    583,
                    2120,
                    2473,
                    270,
                    1551,
                    1647,
                    817,
                    850,
                    2382,
                    1332,
                    1141,
                    1846,
                    1049,
                    1946
                ],
                "type": [
                    1152,
                    1558,
                    418,
                    1959,
                    432,
                    439,
                    311,
                    313,
                    1344,
                    1346,
                    2629,
                    2630,
                    2632,
                    333,
                    1873,
                    2521,
                    2522,
                    1383,
                    2548,
                    2549
                ],
                "NotImplementedError": [
                    452,
                    358,
                    462,
                    312,
                    1080
                ],
                "__name__": [
                    2632,
                    2521,
                    1558,
                    313,
                    2522
                ],
                "relativedelta_fast": [
                    328,
                    357,
                    317
                ],
                "issubset": [
                    328
                ],
                "set": [
                    328,
                    357
                ],
                "months": [
                    1857,
                    1858,
                    1655,
                    330,
                    331,
                    332,
                    1485,
                    1487,
                    1651,
                    1428,
                    1652,
                    1430,
                    1653,
                    1654,
                    1657,
                    1949,
                    1950
                ],
                "kwds.get": [
                    330,
                    335
                ],
                "shifted": [
                    640,
                    1152,
                    642,
                    1659,
                    1954,
                    1960,
                    1577,
                    1578,
                    1608,
                    1609,
                    332,
                    333,
                    1868,
                    1874,
                    340,
                    341,
                    1382,
                    1383,
                    2163,
                    2164,
                    631,
                    1657,
                    1658,
                    635,
                    636,
                    1149
                ],
                "liboffsets.shift_months": [
                    332,
                    1149
                ],
                "i.asi8": [
                    332,
                    1149
                ],
                "i.dtype": [
                    1152,
                    333
                ],
                "weeks": [
                    611,
                    2404,
                    2405,
                    2406,
                    590,
                    335,
                    336,
                    595,
                    340
                ],
                "asper": [
                    640,
                    1380,
                    1382,
                    1575,
                    1577,
                    339,
                    628,
                    340,
                    636
                ],
                "i.to_period": [
                    1380,
                    339,
                    628,
                    1575
                ],
                "asper._time_shift": [
                    640,
                    1577,
                    340
                ],
                "shifted.to_timestamp": [
                    642,
                    1383,
                    1609,
                    1578,
                    341
                ],
                "i.to_perioddelta": [
                    1578,
                    1361,
                    625,
                    341,
                    631,
                    1374
                ],
                "timedelta_kwds": [
                    348,
                    349,
                    343
                ],
                "k": [
                    1568,
                    1561,
                    344,
                    345,
                    346,
                    1565,
                    1566
                ],
                "v": [
                    344,
                    345
                ],
                "kwds.items": [
                    345
                ],
                "delta": [
                    2639,
                    2641,
                    1362,
                    2642,
                    2644,
                    1365,
                    1368,
                    2652,
                    349,
                    350
                ],
                "Timedelta": [
                    2692,
                    2603,
                    1460,
                    1462,
                    1602,
                    2373,
                    2377,
                    1616,
                    1362,
                    349,
                    2401,
                    2530,
                    2662,
                    2667,
                    1517,
                    2672,
                    2677,
                    2682,
                    2687
                ],
                "hasattr": [
                    352
                ],
                "kwd": [
                    360,
                    357
                ],
                "apply_index_wraps": [
                    1952,
                    1570,
                    296,
                    1866,
                    1357,
                    623,
                    1147
                ],
                "bool": [
                    2563,
                    645,
                    1548,
                    1421,
                    2332,
                    1828,
                    1963,
                    2103,
                    1082,
                    2108,
                    1860,
                    2502,
                    1479,
                    2634,
                    1618,
                    364,
                    1136,
                    2420,
                    377,
                    2431
                ],
                "warnings.warn": [
                    370,
                    378
                ],
                "warnings": [
                    370,
                    378
                ],
                "FutureWarning": [
                    380,
                    372
                ],
                "self.is_on_offset": [
                    417,
                    809,
                    431,
                    822,
                    375
                ],
                "dt": [
                    1664,
                    2177,
                    2432,
                    2112,
                    2179,
                    2180,
                    646,
                    2434,
                    648,
                    2437,
                    2439,
                    2444,
                    1422,
                    1424,
                    1425,
                    2423,
                    416,
                    417,
                    418,
                    419,
                    2118,
                    809,
                    811,
                    1964,
                    813,
                    430,
                    431,
                    432,
                    433,
                    814,
                    815,
                    436,
                    1966,
                    822,
                    2503,
                    824,
                    952,
                    826,
                    827,
                    955,
                    445,
                    446,
                    956,
                    957,
                    961,
                    1083,
                    1085,
                    2109,
                    1861,
                    2111,
                    1863,
                    1480,
                    1864,
                    1482,
                    2116,
                    844,
                    845,
                    972,
                    974,
                    975,
                    2505,
                    1619,
                    1623,
                    2413,
                    1137,
                    1139,
                    375,
                    1662
                ],
                "self.is_anchored": [
                    1130,
                    383
                ],
                "exclude": [
                    394,
                    389
                ],
                "attrs": [
                    992,
                    390,
                    396,
                    399,
                    400,
                    530,
                    532,
                    534,
                    535,
                    991
                ],
                "attr": [
                    391,
                    392,
                    394,
                    395,
                    396
                ],
                "sorted": [
                    391
                ],
                "self.__dict__": [
                    391
                ],
                "attr.startswith": [
                    392
                ],
                "attrs.append": [
                    396
                ],
                "out": [
                    992,
                    993,
                    398,
                    400,
                    401,
                    533,
                    535,
                    536,
                    986
                ],
                "join": [
                    400,
                    992,
                    987,
                    535
                ],
                "str": [
                    388,
                    2564,
                    528,
                    2449,
                    404,
                    2586,
                    2203,
                    2208,
                    2214,
                    552,
                    556,
                    1328,
                    561,
                    1842,
                    565,
                    568,
                    1722,
                    570,
                    1985,
                    451,
                    455,
                    459,
                    1626,
                    479,
                    1129,
                    1791
                ],
                "self.rule_code": [
                    461,
                    1131,
                    405
                ],
                "property": [
                    1984,
                    482,
                    450,
                    454,
                    520,
                    1128,
                    2602,
                    2606,
                    1327,
                    2448,
                    1841,
                    403,
                    1721,
                    1625,
                    2202,
                    1790
                ],
                "_is_normalized": [
                    2432,
                    1861,
                    646,
                    2503,
                    1480,
                    1964,
                    1422,
                    1137,
                    1619,
                    436,
                    952,
                    1083,
                    2109,
                    1662
                ],
                "a": [
                    445,
                    447
                ],
                "b": [
                    446,
                    447
                ],
                "self._prefix": [
                    705,
                    1793,
                    1987,
                    1252,
                    456,
                    1631,
                    1265,
                    1330,
                    2204,
                    1844,
                    2452,
                    1242,
                    1724,
                    991
                ],
                "code": [
                    466,
                    468,
                    461
                ],
                "repr": [
                    1729,
                    581,
                    1798,
                    463,
                    530
                ],
                "fstr": [
                    472,
                    466,
                    468,
                    477
                ],
                "self._offset_str": [
                    472
                ],
                "AttributeError": [
                    473,
                    2518
                ],
                "ValueError": [
                    1798,
                    1546,
                    2571,
                    657,
                    2322,
                    662,
                    669,
                    2593,
                    1699,
                    1317,
                    1701,
                    686,
                    2098,
                    2227,
                    2101,
                    1975,
                    1729,
                    2768,
                    2782,
                    484,
                    1766,
                    1769,
                    2537,
                    492
                ],
                "suffix": [
                    1797,
                    1800,
                    2450,
                    2452,
                    2205,
                    2206,
                    1834,
                    1835,
                    1325,
                    1329,
                    1330,
                    1980,
                    1981,
                    1728,
                    1732,
                    1733,
                    1627,
                    1630,
                    1631,
                    1635,
                    1638,
                    491,
                    492
                ],
                "cls": [
                    2240,
                    1729,
                    1734,
                    1639,
                    1798,
                    1801,
                    1325,
                    493,
                    1837,
                    1838,
                    1839,
                    2456,
                    1982
                ],
                "classmethod": [
                    1633,
                    1795,
                    1831,
                    488,
                    1323,
                    2220,
                    2454,
                    1977,
                    2238,
                    1726
                ],
                "calendar": [
                    512,
                    503,
                    1233,
                    1047,
                    504,
                    1114
                ],
                "holidays": [
                    503,
                    1233,
                    1047,
                    504,
                    1114,
                    511
                ],
                "_get_calendar": [
                    503
                ],
                "weekmask": [
                    1233,
                    1047,
                    504,
                    1114,
                    510
                ],
                "self.offset": [
                    576,
                    578,
                    612,
                    581,
                    613,
                    617,
                    1067,
                    1068,
                    1072,
                    529,
                    530,
                    573,
                    575
                ],
                "BusinessMixin": [
                    539,
                    651,
                    1191
                ],
                "SingleConstructorOffset": [
                    1089,
                    1122,
                    2529,
                    996,
                    539
                ],
                "_prefix": [
                    2688,
                    1537,
                    1923,
                    2693,
                    1030,
                    1160,
                    1290,
                    1418,
                    1296,
                    1169,
                    1689,
                    1178,
                    544,
                    1187,
                    2084,
                    2299,
                    2683,
                    1477,
                    1094,
                    1997,
                    2008,
                    1757,
                    1890,
                    2018,
                    2531,
                    2663,
                    1001,
                    1900,
                    2028,
                    2668,
                    2673,
                    2678,
                    1915
                ],
                "offset": [
                    1045,
                    550,
                    2732,
                    2739,
                    2740,
                    694,
                    2743,
                    2742,
                    2745,
                    2750,
                    2753,
                    2756,
                    2766,
                    1231,
                    2768,
                    1112,
                    1115,
                    2780,
                    2782,
                    2787,
                    2788,
                    1009
                ],
                "off_str": [
                    576,
                    578,
                    579,
                    554,
                    556,
                    561,
                    565,
                    568,
                    570,
                    571
                ],
                "td.days": [
                    555,
                    556
                ],
                "td": [
                    555,
                    556,
                    557,
                    558,
                    569,
                    570
                ],
                "td.seconds": [
                    557,
                    558
                ],
                "s": [
                    558,
                    559,
                    562,
                    563,
                    566,
                    567,
                    568
                ],
                "hrs": [
                    560,
                    561,
                    562,
                    559
                ],
                "int": [
                    802,
                    1315,
                    1732,
                    1703,
                    1771,
                    559,
                    563,
                    1939,
                    1813,
                    1814,
                    2582,
                    2457
                ],
                "mts": [
                    563,
                    564,
                    565,
                    566
                ],
                "td.microseconds": [
                    569,
                    570
                ],
                "zero": [
                    574,
                    575
                ],
                "get_str": [
                    576,
                    578
                ],
                "wday": [
                    587,
                    591,
                    1717,
                    598,
                    1718,
                    600,
                    601,
                    1786,
                    603,
                    604,
                    1787
                ],
                "other.weekday": [
                    1562,
                    587
                ],
                "days": [
                    609,
                    611,
                    2427,
                    600,
                    603,
                    606
                ],
                "BDay": [
                    1072,
                    617,
                    2706,
                    2696
                ],
                "ApplyTypeError": [
                    2632,
                    619,
                    1074,
                    949,
                    2556
                ],
                "time": [
                    642,
                    1388,
                    625,
                    631,
                    1374
                ],
                "asi8": [
                    1361,
                    631
                ],
                "roll": [
                    640,
                    1052,
                    1438,
                    1054,
                    1442,
                    1444,
                    1061,
                    1445,
                    1460,
                    1603,
                    1608,
                    1613,
                    1614,
                    1493,
                    1497,
                    1371,
                    1501,
                    1502,
                    1382,
                    1386,
                    1517,
                    635,
                    636,
                    639
                ],
                "np.where": [
                    1440,
                    1441,
                    1603,
                    1444,
                    1500,
                    1493,
                    1499,
                    1495,
                    1496,
                    635,
                    1436,
                    1437
                ],
                "asper._addsub_int_array": [
                    636,
                    1382
                ],
                "operator.add": [
                    1608,
                    636,
                    1382
                ],
                "operator": [
                    1382,
                    1608,
                    2541,
                    2542,
                    2543,
                    2544,
                    2513,
                    636
                ],
                "dt.weekday": [
                    648,
                    1623
                ],
                "is_list_like": [
                    659,
                    654
                ],
                "start": [
                    654,
                    655,
                    656,
                    664,
                    668,
                    670,
                    799,
                    800,
                    673,
                    676,
                    681,
                    683,
                    2734,
                    2735,
                    2739,
                    692,
                    2740,
                    2358,
                    2361,
                    2745,
                    2366,
                    2367,
                    2750,
                    2369,
                    2752,
                    2753,
                    2755,
                    2380,
                    1115,
                    1009
                ],
                "end": [
                    659,
                    660,
                    661,
                    665,
                    668,
                    800,
                    801,
                    677,
                    681,
                    683,
                    2736,
                    2737,
                    693,
                    2742,
                    2743,
                    2745,
                    2746,
                    2749,
                    2366,
                    2367,
                    2750,
                    2753,
                    2757,
                    2760,
                    2771,
                    2774,
                    1115,
                    1009
                ],
                "np.array": [
                    664,
                    665
                ],
                "liboffsets._validate_business_time": [
                    664,
                    665
                ],
                "x": [
                    664,
                    665
                ],
                "num_openings": [
                    680,
                    683,
                    670
                ],
                "index": [
                    673,
                    676,
                    677
                ],
                "np.argsort": [
                    673
                ],
                "tuple": [
                    676,
                    677
                ],
                "total_secs": [
                    681,
                    682,
                    685,
                    679
                ],
                "self._get_business_hours_by_sec": [
                    681,
                    682,
                    846,
                    882,
                    979
                ],
                "nb_offset": [
                    704,
                    714,
                    708,
                    702
                ],
                "self._prefix.startswith": [
                    705
                ],
                "CustomBusinessDay": [
                    707,
                    2701,
                    2799,
                    1240,
                    893
                ],
                "self.weekmask": [
                    709,
                    895
                ],
                "self.holidays": [
                    896,
                    710
                ],
                "self.calendar": [
                    897,
                    1061,
                    1086,
                    711
                ],
                "BusinessDay": [
                    900,
                    2696,
                    2793,
                    714,
                    1012
                ],
                "earliest_start": [
                    754,
                    762,
                    746,
                    739
                ],
                "self.start": [
                    768,
                    739,
                    740,
                    873,
                    843,
                    977,
                    883,
                    757,
                    989
                ],
                "latest_start": [
                    765,
                    740,
                    748,
                    751
                ],
                "self.next_bday.is_on_offset": [
                    902,
                    742
                ],
                "self.next_bday": [
                    902,
                    742,
                    744,
                    753,
                    764
                ],
                "sign": [
                    744,
                    745,
                    750,
                    753,
                    764
                ],
                "hour": [
                    770,
                    773,
                    746,
                    748,
                    754,
                    759,
                    765
                ],
                "minute": [
                    770,
                    773,
                    746,
                    748,
                    754,
                    759,
                    765
                ],
                "earliest_start.hour": [
                    746,
                    754
                ],
                "earliest_start.minute": [
                    746,
                    754
                ],
                "latest_start.hour": [
                    748,
                    765
                ],
                "latest_start.minute": [
                    748,
                    765
                ],
                "other.time": [
                    769,
                    870,
                    873,
                    751,
                    758,
                    762
                ],
                "st": [
                    768,
                    769,
                    770,
                    843,
                    844,
                    846,
                    977,
                    882,
                    883,
                    978,
                    757,
                    758,
                    759,
                    979,
                    988,
                    989
                ],
                "st.hour": [
                    978,
                    770,
                    844,
                    759
                ],
                "st.minute": [
                    978,
                    770,
                    844,
                    759
                ],
                "reversed": [
                    768
                ],
                "other.year": [
                    773,
                    2475,
                    2125,
                    2126,
                    2127,
                    2490,
                    2163,
                    1716,
                    1785,
                    1784,
                    1337,
                    858
                ],
                "other.month": [
                    773,
                    1949,
                    1716,
                    1785,
                    1784,
                    1337,
                    859,
                    1853
                ],
                "other.day": [
                    1280,
                    1344,
                    1346,
                    773,
                    1652,
                    1654,
                    1335,
                    1144,
                    860
                ],
                "self._next_opening_time": [
                    929,
                    871,
                    877,
                    813,
                    942,
                    974,
                    824,
                    792,
                    925
                ],
                "dtstart": [
                    802,
                    799
                ],
                "start.hour": [
                    799
                ],
                "start.minute": [
                    799
                ],
                "day": [
                    800,
                    801,
                    1486,
                    1487,
                    1429,
                    1430
                ],
                "until": [
                    801,
                    802
                ],
                "end.hour": [
                    801
                ],
                "end.minute": [
                    801
                ],
                "total_seconds": [
                    802,
                    975
                ],
                "self._prev_opening_time": [
                    903,
                    811,
                    972,
                    916,
                    826
                ],
                "self._get_closing_time": [
                    878,
                    916,
                    941,
                    814
                ],
                "enumerate": [
                    977,
                    843
                ],
                "dt.hour": [
                    844,
                    957
                ],
                "dt.minute": [
                    844,
                    957
                ],
                "self.end": [
                    870,
                    846,
                    883,
                    979,
                    989
                ],
                "nanosecond": [
                    933,
                    854
                ],
                "other.hour": [
                    2169,
                    861,
                    2495
                ],
                "other.minute": [
                    2496,
                    2170,
                    862
                ],
                "other.second": [
                    2497,
                    2171,
                    863
                ],
                "other.microsecond": [
                    864,
                    2498,
                    2172
                ],
                "self._is_on_offset": [
                    961,
                    876,
                    870
                ],
                "businesshours": [
                    976,
                    881,
                    979,
                    980,
                    886
                ],
                "sum": [
                    881,
                    2404,
                    2366
                ],
                "en": [
                    882,
                    883,
                    988,
                    989
                ],
                "zip": [
                    883,
                    989
                ],
                "bd": [
                    900,
                    886,
                    888,
                    891,
                    894
                ],
                "r": [
                    888,
                    910,
                    886
                ],
                "divmod": [
                    886
                ],
                "abs": [
                    886
                ],
                "_CustomMixin": [
                    1089,
                    1191,
                    1233,
                    1012,
                    1047,
                    1114,
                    892
                ],
                "skip_bd": [
                    905,
                    907,
                    900,
                    893
                ],
                "prev_open": [
                    904,
                    905,
                    903
                ],
                "remain": [
                    904,
                    905
                ],
                "bhour_remain": [
                    931,
                    932,
                    936,
                    937,
                    940,
                    910,
                    913,
                    918,
                    920,
                    921,
                    924,
                    927
                ],
                "bhour": [
                    929,
                    931,
                    932,
                    940,
                    943,
                    915,
                    918,
                    924,
                    925
                ],
                "dt.tzinfo": [
                    2177,
                    955
                ],
                "dt.year": [
                    2179,
                    2180,
                    2505,
                    1424,
                    957,
                    2111
                ],
                "dt.month": [
                    1863,
                    2505,
                    1966,
                    1424,
                    957,
                    2111
                ],
                "dt.day": [
                    1664,
                    1864,
                    2505,
                    1482,
                    1966,
                    1425,
                    1139,
                    957,
                    2111
                ],
                "dt.second": [
                    957
                ],
                "dt.microsecond": [
                    957
                ],
                "op": [
                    972,
                    974,
                    975,
                    2513,
                    978,
                    2517,
                    2525
                ],
                "span": [
                    980,
                    975
                ],
                "op.hour": [
                    978
                ],
                "op.minute": [
                    978
                ],
                "_repr_attrs": [
                    986
                ],
                "super": [
                    1009,
                    986
                ],
                "hours": [
                    987,
                    991
                ],
                "st.strftime": [
                    988
                ],
                "en.strftime": [
                    988
                ],
                "BusinessHourMixin": [
                    1089,
                    1115,
                    996
                ],
                "_anchor": [
                    1002,
                    1095
                ],
                "__init__": [
                    1009,
                    1126,
                    2471
                ],
                "_CustomMixin.__init__": [
                    1233,
                    1114,
                    1047
                ],
                "date_in": [
                    1057,
                    1058,
                    1065
                ],
                "np_dt": [
                    1058,
                    1061
                ],
                "date_in.date": [
                    1058
                ],
                "np_incr_dt": [
                    1064,
                    1060
                ],
                "np.busday_offset": [
                    1060
                ],
                "dt_date": [
                    1064,
                    1065
                ],
                "np_incr_dt.astype": [
                    1064
                ],
                "datetime.combine": [
                    1065
                ],
                "date_in.time": [
                    1065
                ],
                "day64": [
                    1085,
                    1086
                ],
                "_to_dt64D": [
                    1085
                ],
                "np.is_busday": [
                    1086
                ],
                "BusinessHourMixin.__init__": [
                    1115
                ],
                "month": [
                    1986,
                    1987,
                    2216,
                    2218,
                    1133,
                    1134,
                    1971,
                    1843,
                    1844,
                    1972
                ],
                "ccalendar.MONTH_ALIASES": [
                    2216,
                    1986,
                    1843,
                    1133
                ],
                "ccalendar": [
                    1792,
                    2179,
                    1800,
                    1424,
                    2216,
                    2217,
                    1835,
                    1843,
                    2229,
                    2230,
                    1337,
                    1723,
                    1981,
                    1986,
                    1733,
                    1629,
                    1638,
                    1133,
                    1784
                ],
                "self.code_rule": [
                    1134
                ],
                "self._get_offset_day": [
                    1664,
                    1864,
                    1966,
                    1649,
                    1139,
                    1143,
                    1658
                ],
                "compare_day": [
                    1649,
                    1652,
                    1654,
                    1143,
                    1144
                ],
                "liboffsets.roll_convention": [
                    1144,
                    1280,
                    1335
                ],
                "shift_month": [
                    1858,
                    2116,
                    1487,
                    1657,
                    1430,
                    1145,
                    1950
                ],
                "self._day_opt": [
                    1858,
                    1955,
                    1869,
                    1943,
                    1145,
                    1948,
                    1149,
                    1950,
                    1855
                ],
                "_simple_new": [
                    1152,
                    1873,
                    1959
                ],
                "i.freq": [
                    1152
                ],
                "MonthOffset": [
                    1155,
                    1191,
                    1164,
                    1173,
                    1182
                ],
                "_day_opt": [
                    1891,
                    1188,
                    1924,
                    2019,
                    1161,
                    1901,
                    1998,
                    2029,
                    1170,
                    2009,
                    1179,
                    1916
                ],
                "is_on_offset": [
                    1218
                ],
                "DateOffset.is_on_offset": [
                    1218
                ],
                "apply_index": [
                    1219
                ],
                "DateOffset.apply_index": [
                    1219
                ],
                "cbday": [
                    1240,
                    1244,
                    1247
                ],
                "self._prefix.endswith": [
                    1265,
                    1242,
                    1252
                ],
                "roll_func": [
                    1248,
                    1267,
                    1270,
                    1271,
                    1244,
                    1247
                ],
                "cbday.rollforward": [
                    1244
                ],
                "cbday.rollback": [
                    1247
                ],
                "moff": [
                    1257,
                    1258,
                    1254
                ],
                "MonthBegin": [
                    2804,
                    1254
                ],
                "MonthEnd": [
                    1257,
                    2803
                ],
                "self.m_offset.rollback": [
                    1267
                ],
                "self.m_offset": [
                    1282,
                    1267,
                    1270
                ],
                "self.m_offset.rollforward": [
                    1270
                ],
                "cur_month_offset_date": [
                    1282,
                    1276,
                    1279
                ],
                "self.month_roll": [
                    1276
                ],
                "compare_date": [
                    1280,
                    1279
                ],
                "self.cbday_roll": [
                    1283,
                    1279
                ],
                "compare_date.day": [
                    1280
                ],
                "new": [
                    1282,
                    1283,
                    2500,
                    2490,
                    2491,
                    2492,
                    2493,
                    2494
                ],
                "_CustomBusinessMonth": [
                    1288,
                    1289,
                    1294,
                    1295
                ],
                "Substitution": [
                    1293,
                    1287
                ],
                "Appender": [
                    1288,
                    1294
                ],
                "_CustomBusinessMonth.__doc__": [
                    1288,
                    1294
                ],
                "_default_day_of_month": [
                    1305
                ],
                "_min_day_of_month": [
                    1306,
                    1419
                ],
                "day_of_month": [
                    1312,
                    1315
                ],
                "self._default_day_of_month": [
                    1313
                ],
                "self._min_day_of_month": [
                    1316,
                    1319
                ],
                "self.day_of_month": [
                    1316,
                    1320,
                    1482,
                    1517,
                    1486,
                    1329,
                    1362,
                    1425,
                    1460,
                    1429,
                    1335
                ],
                "days_in_month": [
                    1424,
                    1337,
                    1346,
                    1425
                ],
                "ccalendar.get_days_in_month": [
                    1424,
                    1337,
                    1784,
                    2179
                ],
                "SemiMonthBegin": [
                    1344,
                    2807
                ],
                "SemiMonthEnd": [
                    1346,
                    2806
                ],
                "self._apply": [
                    1349
                ],
                "AbstractMethodError": [
                    1403,
                    1355,
                    1397
                ],
                "dti": [
                    1360,
                    1383
                ],
                "days_from_start": [
                    1368,
                    1361,
                    1365
                ],
                "before_day_of_month": [
                    1493,
                    1371,
                    1365,
                    1437
                ],
                "after_day_of_month": [
                    1440,
                    1441,
                    1444,
                    1496,
                    1499,
                    1368,
                    1371
                ],
                "self._get_roll": [
                    1371
                ],
                "self._apply_index_days": [
                    1386
                ],
                "SemiMonthOffset": [
                    1465,
                    1406
                ],
                "is_month_end": [
                    1434,
                    1436
                ],
                "i.is_month_end": [
                    1434
                ],
                "roll_end": [
                    1436,
                    1438
                ],
                "roll_before": [
                    1441,
                    1442,
                    1437,
                    1438
                ],
                "roll_after": [
                    1440,
                    1442,
                    1496,
                    1497,
                    1499,
                    1501
                ],
                "nanos": [
                    2656,
                    2658,
                    1517,
                    1518,
                    1460,
                    1461,
                    2652,
                    2653,
                    2654,
                    2655
                ],
                "nanos.astype": [
                    1461,
                    1518
                ],
                "is_month_start": [
                    1491,
                    1500,
                    1495
                ],
                "i.is_month_start": [
                    1491
                ],
                "roll_start": [
                    1497,
                    1500,
                    1501,
                    1495
                ],
                "_inc": [
                    1536,
                    2530,
                    2692,
                    2662,
                    2667,
                    2672,
                    2677,
                    2682,
                    2687
                ],
                "weekday": [
                    1792,
                    1793,
                    1542,
                    1800,
                    1801,
                    2317,
                    1695,
                    2217,
                    2218,
                    2093,
                    2230,
                    2233,
                    1723,
                    1724,
                    1733,
                    1734,
                    1629,
                    1630,
                    1763,
                    1636,
                    1638,
                    1639
                ],
                "self.weekday": [
                    1792,
                    2181,
                    1544,
                    1545,
                    1546,
                    1549,
                    1553,
                    2328,
                    1563,
                    1564,
                    1698,
                    1699,
                    1572,
                    2217,
                    1718,
                    2105,
                    1723,
                    1621,
                    1623,
                    1628,
                    1629,
                    1768,
                    1769,
                    1787
                ],
                "self._inc": [
                    1554,
                    2604
                ],
                "TypeError": [
                    2520,
                    1557
                ],
                "otherDay": [
                    1562,
                    1563,
                    1564
                ],
                "self._end_apply_index": [
                    1580
                ],
                "dtindex.to_perioddelta": [
                    1595
                ],
                "dtindex": [
                    1602,
                    1955,
                    1959,
                    1960,
                    1869,
                    1873,
                    1874,
                    1595,
                    1598
                ],
                "base": [
                    1609,
                    1614,
                    1616,
                    1597,
                    1598
                ],
                "mult": [
                    1597
                ],
                "libfrequencies.get_freq_code": [
                    1597
                ],
                "libfrequencies": [
                    1597
                ],
                "self.freqstr": [
                    1597
                ],
                "base_period": [
                    1608,
                    1614,
                    1604,
                    1598
                ],
                "dtindex.to_period": [
                    1598
                ],
                "normed": [
                    1602,
                    1604
                ],
                "base_period.to_timestamp": [
                    1604
                ],
                "base_period._addsub_int_array": [
                    1608
                ],
                "to_timestamp": [
                    1614
                ],
                "base_period._time_shift": [
                    1614
                ],
                "ccalendar.int_to_weekday": [
                    1792,
                    2217,
                    1723,
                    1629
                ],
                "ccalendar.weekday_to_int": [
                    1800,
                    2230,
                    1733,
                    1638
                ],
                "to_day": [
                    1658,
                    1659
                ],
                "liboffsets.shift_day": [
                    2406,
                    1659,
                    2443,
                    2366
                ],
                "shifted.day": [
                    1659
                ],
                "_WeekOfMonthMixin": [
                    1737,
                    1667
                ],
                "week": [
                    1696,
                    1732,
                    1734
                ],
                "self.week": [
                    1724,
                    1700,
                    1701,
                    1719
                ],
                "mstart": [
                    1716,
                    1717
                ],
                "mstart.weekday": [
                    1717
                ],
                "shift_days": [
                    1787,
                    1788,
                    1718,
                    1719
                ],
                "ccalendar.int_to_weekday.get": [
                    1792,
                    1723
                ],
                "cls._prefix": [
                    1729,
                    1798
                ],
                "dim": [
                    2179,
                    2180,
                    1784,
                    1785,
                    1788
                ],
                "mend": [
                    1785,
                    1786
                ],
                "mend.weekday": [
                    1786
                ],
                "_default_startingMonth": [
                    1888,
                    1921,
                    1898,
                    1813,
                    1914
                ],
                "Optional": [
                    1813,
                    1814
                ],
                "_from_name_startingMonth": [
                    1889,
                    1922,
                    1899,
                    1814
                ],
                "startingMonth": [
                    1824,
                    1825,
                    1826,
                    2092,
                    2316,
                    2229,
                    2234
                ],
                "self._default_startingMonth": [
                    1825
                ],
                "self.startingMonth": [
                    2179,
                    2180,
                    1829,
                    1863,
                    2216,
                    1869,
                    2125,
                    2126,
                    2127,
                    1843,
                    2163,
                    2327,
                    2105,
                    1853,
                    1855
                ],
                "kwargs": [
                    1833,
                    1835,
                    1838,
                    1839,
                    1979,
                    1981,
                    1982
                ],
                "ccalendar.MONTH_TO_CAL_NUM": [
                    1835,
                    1981,
                    2229
                ],
                "cls._from_name_startingMonth": [
                    1837,
                    1838
                ],
                "months_since": [
                    1857,
                    1853
                ],
                "qtrs": [
                    1857,
                    1854
                ],
                "liboffsets.roll_qtrday": [
                    1854
                ],
                "mod_month": [
                    1864,
                    1863
                ],
                "liboffsets.shift_quarters": [
                    1954,
                    1868
                ],
                "dtindex.asi8": [
                    1955,
                    1869
                ],
                "dtindex.freq": [
                    1960,
                    1874
                ],
                "dtindex.dtype": [
                    1960,
                    1874
                ],
                "QuarterOffset": [
                    1904,
                    1919,
                    1878,
                    1895
                ],
                "_outputName": [
                    1920,
                    1896,
                    1995,
                    2006,
                    1913,
                    1887
                ],
                "liboffsets.get_day_of_month": [
                    1942
                ],
                "self.month": [
                    1986,
                    1955,
                    1966,
                    1974,
                    1943,
                    1948,
                    1949
                ],
                "years": [
                    2397,
                    2396,
                    2394,
                    2395,
                    1948,
                    1949
                ],
                "roll_yearday": [
                    1948
                ],
                "self._default_month": [
                    1971
                ],
                "YearOffset": [
                    2022,
                    2001,
                    2012,
                    1990
                ],
                "_default_month": [
                    2017,
                    2027,
                    1996,
                    2007
                ],
                "variation": [
                    2223,
                    2319,
                    2225,
                    2095,
                    2235
                ],
                "self.variation": [
                    2209,
                    2114,
                    2186,
                    2100,
                    2101,
                    2329
                ],
                "year_end": [
                    2112,
                    2116,
                    2118
                ],
                "self.get_year_end": [
                    2112,
                    2116,
                    2125,
                    2126,
                    2127,
                    2164
                ],
                "norm": [
                    2357,
                    2358,
                    2361,
                    2363,
                    2369,
                    2122,
                    2135,
                    2137,
                    2140,
                    2142,
                    2144,
                    2147,
                    2149,
                    2152,
                    2153,
                    2154,
                    2423,
                    2425,
                    2426
                ],
                "prev_year": [
                    2149,
                    2152,
                    2153,
                    2154,
                    2125,
                    2129,
                    2135,
                    2140,
                    2142
                ],
                "cur_year": [
                    2144,
                    2147,
                    2149,
                    2126,
                    2130,
                    2137,
                    2142
                ],
                "next_year": [
                    2144,
                    2147,
                    2131,
                    2127
                ],
                "other.tzinfo": [
                    2129,
                    2130,
                    2131,
                    2479
                ],
                "norm.year": [
                    2152
                ],
                "prev_year.year": [
                    2152
                ],
                "result.year": [
                    2166
                ],
                "result.month": [
                    2167
                ],
                "result.day": [
                    2168
                ],
                "target_date": [
                    2180,
                    2181,
                    2184,
                    2191,
                    2197,
                    2200
                ],
                "wkday_diff": [
                    2194,
                    2187,
                    2181,
                    2182
                ],
                "target_date.weekday": [
                    2181
                ],
                "days_forward": [
                    2187,
                    2191,
                    2194,
                    2195,
                    2197,
                    2200
                ],
                "prefix": [
                    2218,
                    2204,
                    2206,
                    2215
                ],
                "self.get_rule_code_suffix": [
                    2205
                ],
                "self._get_suffix_prefix": [
                    2215
                ],
                "varion_code": [
                    2224,
                    2227,
                    2222
                ],
                "startingMonth_code": [
                    2229
                ],
                "weekday_code": [
                    2230
                ],
                "cls._parse_suffix": [
                    2240
                ],
                "args": [
                    2240,
                    2457
                ],
                "qtr_with_extra_week": [
                    2318
                ],
                "FY5253": [
                    2457,
                    2818,
                    2326
                ],
                "self._offset.is_anchored": [
                    2333
                ],
                "num_qtrs": [
                    2372,
                    2380,
                    2387,
                    2355,
                    2389
                ],
                "tz_localize": [
                    2357,
                    2423
                ],
                "self._offset.rollback": [
                    2358
                ],
                "qtr_lens": [
                    2401,
                    2370,
                    2404,
                    2439,
                    2442,
                    2363,
                    2366,
                    2367
                ],
                "self.get_weeks": [
                    2401,
                    2363,
                    2439
                ],
                "self._offset.is_on_offset": [
                    2434,
                    2367
                ],
                "tdelta": [
                    2369,
                    2371,
                    2373,
                    2377,
                    2380,
                    2387,
                    2390
                ],
                "qlen": [
                    2370,
                    2371,
                    2373
                ],
                "tdelta.days": [
                    2371
                ],
                "prev_year_end": [
                    2427,
                    2426,
                    2387,
                    2388
                ],
                "self._rollback_to_year": [
                    2387
                ],
                "res": [
                    2401,
                    2406,
                    2408,
                    2388,
                    2396
                ],
                "tdelta.value": [
                    2390
                ],
                "ret": [
                    2416,
                    2418,
                    2411
                ],
                "year_has_extra_week": [
                    2413,
                    2415
                ],
                "self.year_has_extra_week": [
                    2413
                ],
                "self.qtr_with_extra_week": [
                    2416,
                    2451
                ],
                "next_year_end": [
                    2425,
                    2441,
                    2427,
                    2437
                ],
                "self._offset.rollforward": [
                    2425
                ],
                "weeks_in_year": [
                    2427,
                    2428,
                    2429
                ],
                "current": [
                    2441,
                    2443,
                    2444
                ],
                "qtr_len": [
                    2442,
                    2443
                ],
                "self._offset.get_rule_code_suffix": [
                    2450
                ],
                "qtr": [
                    2451,
                    2452
                ],
                "dict": [
                    2457
                ],
                "FY5253._parse_suffix": [
                    2457
                ],
                "current_easter": [
                    2475,
                    2476,
                    2477,
                    2479,
                    2482,
                    2484
                ],
                "easter": [
                    2505,
                    2490,
                    2475
                ],
                "current_easter.year": [
                    2477
                ],
                "current_easter.month": [
                    2477
                ],
                "current_easter.day": [
                    2477
                ],
                "new.year": [
                    2492
                ],
                "new.month": [
                    2493
                ],
                "new.day": [
                    2494
                ],
                "operator.eq": [
                    2513
                ],
                "operator.ne": [
                    2513
                ],
                "self.delta": [
                    2628,
                    2598,
                    2576,
                    2608,
                    2517,
                    2551
                ],
                "other.delta": [
                    2576,
                    2517,
                    2598,
                    2551
                ],
                "err": [
                    2561,
                    2523
                ],
                "f.__name__": [
                    2525
                ],
                "f": [
                    2525,
                    2526
                ],
                "op.__name__": [
                    2525
                ],
                "liboffsets._Tick": [
                    2529
                ],
                "__gt__": [
                    2541
                ],
                "_tick_comp": [
                    2544,
                    2541,
                    2542,
                    2543
                ],
                "operator.gt": [
                    2541
                ],
                "__ge__": [
                    2542
                ],
                "operator.ge": [
                    2542
                ],
                "__lt__": [
                    2543
                ],
                "operator.lt": [
                    2543
                ],
                "__le__": [
                    2544
                ],
                "operator.le": [
                    2544
                ],
                "other.n": [
                    2549,
                    2630
                ],
                "delta_to_tick": [
                    2551
                ],
                "Period": [
                    2552
                ],
                "self.apply": [
                    2555
                ],
                "NotImplemented": [
                    2621,
                    2557
                ],
                "OverflowError": [
                    2622,
                    2558,
                    2559
                ],
                "Any": [
                    2563
                ],
                "to_offset": [
                    2592,
                    2570,
                    2732
                ],
                "hash": [
                    2583
                ],
                "self._params": [
                    2583
                ],
                "delta_to_nanoseconds": [
                    2608,
                    2652
                ],
                "other.__add__": [
                    2620
                ],
                "delta.microseconds": [
                    2639
                ],
                "delta.seconds": [
                    2641,
                    2644
                ],
                "Day": [
                    2816,
                    2642
                ],
                "delta.days": [
                    2642,
                    2644
                ],
                "seconds": [
                    2644,
                    2645,
                    2646,
                    2647,
                    2648,
                    2650
                ],
                "Hour": [
                    2646,
                    2815
                ],
                "Minute": [
                    2648,
                    2810
                ],
                "Second": [
                    2809,
                    2650
                ],
                "Milli": [
                    2814,
                    2654
                ],
                "Micro": [
                    2656,
                    2811
                ],
                "BMonthEnd": [
                    2697
                ],
                "BusinessMonthEnd": [
                    2697,
                    2795
                ],
                "BMonthBegin": [
                    2698
                ],
                "BusinessMonthBegin": [
                    2698,
                    2794
                ],
                "CBMonthEnd": [
                    2699
                ],
                "CustomBusinessMonthEnd": [
                    2800,
                    2699
                ],
                "CBMonthBegin": [
                    2700
                ],
                "CustomBusinessMonthBegin": [
                    2801,
                    2700
                ],
                "CDay": [
                    2701
                ],
                "offset.is_on_offset": [
                    2739,
                    2742
                ],
                "offset.rollforward": [
                    2740
                ],
                "offset.rollback": [
                    2743
                ],
                "periods": [
                    2745,
                    2747,
                    2753,
                    2750
                ],
                "offset.n": [
                    2745,
                    2756
                ],
                "cur": [
                    2755,
                    2757,
                    2758,
                    2760,
                    2766,
                    2767,
                    2769,
                    2771,
                    2772,
                    2774,
                    2780,
                    2781,
                    2783
                ],
                "next_date": [
                    2766,
                    2767,
                    2769,
                    2780,
                    2781,
                    2783
                ],
                "offset.apply": [
                    2780,
                    2766
                ],
                "prefix_mapping": [
                    2786
                ],
                "offset._prefix": [
                    2787
                ],
                "YearBegin": [
                    2789
                ],
                "YearEnd": [
                    2790
                ],
                "BYearBegin": [
                    2791
                ],
                "BYearEnd": [
                    2792
                ],
                "BQuarterEnd": [
                    2796
                ],
                "BQuarterBegin": [
                    2797
                ],
                "BusinessHour": [
                    2798
                ],
                "CustomBusinessHour": [
                    2802
                ],
                "Week": [
                    2808
                ],
                "QuarterEnd": [
                    2812
                ],
                "QuarterBegin": [
                    2813
                ],
                "WeekOfMonth": [
                    2817
                ],
                "FY5253Quarter": [
                    2819
                ]
            },
            "filtered_variables_in_file": {
                "__all__": [
                    40
                ],
                "obj": [
                    90,
                    84,
                    85,
                    87
                ],
                "Timestamp": [
                    130,
                    2122,
                    108,
                    2734,
                    2736,
                    145,
                    116,
                    84,
                    2357,
                    87,
                    2613,
                    2423
                ],
                "OutOfBoundsDatetime": [
                    88,
                    135
                ],
                "other": [
                    2560,
                    2564,
                    2570,
                    2575,
                    2576,
                    1554,
                    1556,
                    1558,
                    1562,
                    2586,
                    1564,
                    1056,
                    1057,
                    1568,
                    2592,
                    2597,
                    2598,
                    1071,
                    1072,
                    2613,
                    2620,
                    2624,
                    2625,
                    2627,
                    2628,
                    2629,
                    2630,
                    2632,
                    585,
                    2122,
                    587,
                    2125,
                    2126,
                    2127,
                    2129,
                    2130,
                    2131,
                    96,
                    98,
                    611,
                    100,
                    101,
                    102,
                    104,
                    105,
                    616,
                    617,
                    108,
                    109,
                    111,
                    1649,
                    2163,
                    1652,
                    1654,
                    1143,
                    1144,
                    1145,
                    1657,
                    2169,
                    2170,
                    2171,
                    2172,
                    136,
                    1716,
                    742,
                    744,
                    751,
                    753,
                    758,
                    1784,
                    1785,
                    762,
                    1276,
                    764,
                    1280,
                    769,
                    773,
                    273,
                    276,
                    279,
                    792,
                    283,
                    286,
                    290,
                    292,
                    294,
                    2357,
                    1335,
                    1337,
                    1853,
                    1855,
                    1344,
                    1346,
                    1858,
                    1349,
                    2387,
                    852,
                    854,
                    857,
                    858,
                    859,
                    860,
                    861,
                    862,
                    863,
                    864,
                    870,
                    871,
                    873,
                    875,
                    876,
                    877,
                    878,
                    902,
                    903,
                    904,
                    905,
                    907,
                    916,
                    1430,
                    1943,
                    920,
                    1948,
                    925,
                    1949,
                    1950,
                    929,
                    936,
                    2475,
                    941,
                    943,
                    2479,
                    2482,
                    947,
                    2484,
                    2490,
                    2495,
                    2496,
                    2497,
                    2498,
                    1487,
                    2517,
                    2522,
                    2547,
                    2548,
                    2549,
                    2551,
                    2552,
                    2553,
                    2555
                ],
                "NaT": [
                    96,
                    97,
                    2737,
                    2735
                ],
                "timedelta": [
                    1536,
                    652,
                    910,
                    2191,
                    913,
                    1042,
                    2197,
                    2200,
                    921,
                    1564,
                    927,
                    1568,
                    548,
                    294,
                    937,
                    943,
                    1071,
                    573,
                    574,
                    2627,
                    1228,
                    845,
                    2638,
                    1109,
                    98,
                    611,
                    616,
                    2154,
                    875,
                    1006
                ],
                "Tick": [
                    98,
                    2691,
                    2597,
                    2661,
                    616,
                    2666,
                    2638,
                    1071,
                    2575,
                    2671,
                    2547,
                    2676,
                    439,
                    2681,
                    2686
                ],
                "DateOffset": [
                    98,
                    1218,
                    1219,
                    1667,
                    2243,
                    487,
                    1737,
                    1931,
                    1808,
                    2036,
                    1525,
                    439,
                    1303,
                    311,
                    2461
                ],
                "func": [
                    136,
                    100,
                    94,
                    111
                ],
                "self": [
                    2091,
                    2092,
                    2093,
                    2095,
                    2097,
                    2100,
                    2101,
                    2105,
                    2109,
                    2112,
                    2114,
                    2116,
                    2124,
                    2125,
                    2126,
                    2127,
                    100,
                    108,
                    111,
                    113,
                    2163,
                    2164,
                    117,
                    121,
                    122,
                    2179,
                    2180,
                    2181,
                    136,
                    138,
                    2186,
                    2204,
                    2205,
                    2209,
                    2215,
                    2216,
                    2217,
                    261,
                    264,
                    265,
                    2314,
                    268,
                    2316,
                    2317,
                    2318,
                    272,
                    2319,
                    2321,
                    275,
                    277,
                    2327,
                    2328,
                    281,
                    282,
                    283,
                    2329,
                    285,
                    286,
                    2333,
                    288,
                    294,
                    2358,
                    311,
                    313,
                    2363,
                    316,
                    2367,
                    328,
                    330,
                    335,
                    2385,
                    2387,
                    2390,
                    2396,
                    350,
                    352,
                    2401,
                    354,
                    2413,
                    367,
                    2416,
                    375,
                    2425,
                    2426,
                    383,
                    2432,
                    2434,
                    2437,
                    391,
                    2439,
                    395,
                    2450,
                    2451,
                    2452,
                    405,
                    417,
                    418,
                    431,
                    432,
                    2481,
                    436,
                    439,
                    446,
                    2503,
                    456,
                    461,
                    463,
                    465,
                    466,
                    2517,
                    471,
                    472,
                    2521,
                    484,
                    2535,
                    2548,
                    2549,
                    2551,
                    2553,
                    2555,
                    510,
                    511,
                    512,
                    2560,
                    526,
                    2576,
                    529,
                    530,
                    2583,
                    549,
                    550,
                    2598,
                    2604,
                    2608,
                    2620,
                    573,
                    575,
                    576,
                    2625,
                    578,
                    2628,
                    581,
                    2629,
                    2630,
                    586,
                    612,
                    613,
                    617,
                    630,
                    635,
                    639,
                    646,
                    681,
                    682,
                    692,
                    693,
                    694,
                    701,
                    705,
                    709,
                    710,
                    711,
                    739,
                    740,
                    742,
                    744,
                    745,
                    750,
                    753,
                    757,
                    764,
                    768,
                    792,
                    809,
                    810,
                    811,
                    813,
                    814,
                    822,
                    823,
                    824,
                    826,
                    843,
                    846,
                    866,
                    870,
                    871,
                    873,
                    876,
                    877,
                    878,
                    882,
                    883,
                    892,
                    895,
                    896,
                    897,
                    902,
                    903,
                    916,
                    925,
                    929,
                    941,
                    942,
                    952,
                    961,
                    971,
                    972,
                    974,
                    977,
                    979,
                    989,
                    991,
                    1008,
                    1044,
                    1045,
                    1047,
                    1051,
                    1061,
                    1067,
                    1068,
                    1072,
                    1083,
                    1086,
                    1111,
                    1112,
                    1114,
                    1115,
                    1130,
                    1131,
                    1133,
                    1134,
                    1137,
                    1139,
                    1143,
                    1144,
                    1145,
                    1149,
                    1230,
                    1231,
                    1233,
                    1240,
                    1242,
                    1252,
                    1265,
                    1267,
                    1270,
                    1276,
                    1279,
                    1280,
                    1282,
                    1283,
                    1310,
                    1313,
                    1315,
                    1316,
                    1319,
                    1320,
                    1329,
                    1330,
                    1335,
                    1344,
                    1346,
                    1349,
                    1355,
                    1362,
                    1371,
                    1386,
                    1397,
                    1403,
                    1422,
                    1425,
                    1429,
                    1433,
                    1460,
                    1480,
                    1482,
                    1486,
                    1490,
                    1517,
                    1541,
                    1542,
                    1544,
                    1545,
                    1546,
                    1549,
                    1553,
                    1554,
                    1558,
                    1561,
                    1563,
                    1564,
                    1572,
                    1577,
                    1580,
                    1597,
                    1600,
                    1604,
                    1613,
                    1619,
                    1621,
                    1623,
                    1628,
                    1629,
                    1631,
                    1649,
                    1651,
                    1658,
                    1662,
                    1664,
                    1694,
                    1695,
                    1696,
                    1698,
                    1699,
                    1700,
                    1701,
                    1718,
                    1719,
                    1723,
                    1724,
                    1762,
                    1763,
                    1765,
                    1768,
                    1769,
                    1787,
                    1792,
                    1793,
                    1822,
                    1825,
                    1826,
                    1829,
                    1843,
                    1844,
                    1853,
                    1855,
                    1858,
                    1861,
                    1863,
                    1864,
                    1869,
                    1943,
                    1948,
                    1949,
                    1950,
                    1955,
                    1964,
                    1966,
                    1969,
                    1971,
                    1972,
                    1974,
                    1986,
                    1987
                ],
                "np.datetime64": [
                    2624,
                    1058,
                    101
                ],
                "np": [
                    664,
                    665,
                    1436,
                    1437,
                    1440,
                    673,
                    1058,
                    1441,
                    1060,
                    1444,
                    1086,
                    2624,
                    1603,
                    1493,
                    1495,
                    1496,
                    1499,
                    1500,
                    101,
                    635
                ],
                "datetime": [
                    2180,
                    773,
                    645,
                    1421,
                    1939,
                    1556,
                    799,
                    1056,
                    801,
                    1703,
                    1064,
                    1065,
                    1963,
                    2476,
                    1716,
                    1082,
                    2491,
                    956,
                    2108,
                    2111,
                    2624,
                    1860,
                    2502,
                    1479,
                    585,
                    2125,
                    2126,
                    2127,
                    1618,
                    852,
                    857,
                    101,
                    1771,
                    1136,
                    2163,
                    2420,
                    2165,
                    1785,
                    2431
                ],
                "date": [
                    2624,
                    2505,
                    101
                ],
                "as_timestamp": [
                    416,
                    2625,
                    292,
                    102,
                    430
                ],
                "tz": [
                    132,
                    133,
                    104,
                    142,
                    143,
                    114
                ],
                "nano": [
                    105,
                    122,
                    121,
                    130
                ],
                "self._adjust_dst": [
                    113,
                    108
                ],
                "other.tz_localize": [
                    109
                ],
                "result": [
                    129,
                    130,
                    642,
                    132,
                    133,
                    643,
                    1283,
                    136,
                    1284,
                    140,
                    142,
                    143,
                    145,
                    147,
                    2167,
                    2168,
                    1065,
                    1068,
                    1069,
                    2174,
                    2620,
                    2621,
                    2623,
                    611,
                    613,
                    614,
                    111,
                    114,
                    116,
                    2164,
                    118,
                    2165,
                    2166,
                    122,
                    123,
                    126
                ],
                "conversion.localize_pydatetime": [
                    290,
                    133,
                    143,
                    2479,
                    2129,
                    114,
                    2130,
                    2131
                ],
                "conversion": [
                    290,
                    133,
                    143,
                    2479,
                    2129,
                    114,
                    2130,
                    2131,
                    125
                ],
                "self.normalize": [
                    2432,
                    646,
                    138,
                    1422,
                    418,
                    1964,
                    432,
                    1072,
                    436,
                    952,
                    1083,
                    2109,
                    1861,
                    2503,
                    1480,
                    1619,
                    617,
                    1137,
                    117,
                    121,
                    1662
                ],
                "result.normalize": [
                    118
                ],
                "Nano": [
                    122,
                    2805,
                    2658
                ],
                "result.nanosecond": [
                    122
                ],
                "result.tz": [
                    123,
                    126
                ],
                "value": [
                    129,
                    130,
                    395,
                    396,
                    1517,
                    1362,
                    1460,
                    125
                ],
                "conversion.tz_convert_single": [
                    125
                ],
                "result.value": [
                    129,
                    126
                ],
                "timezones.UTC": [
                    126
                ],
                "timezones": [
                    126
                ],
                "result.tzinfo": [
                    132,
                    142
                ],
                "as_datetime": [
                    136,
                    273
                ],
                "normalize_date": [
                    140
                ],
                "functools.wraps": [
                    94
                ],
                "functools": [
                    94
                ],
                "wrapper": [
                    149
                ],
                "BaseOffset": [
                    261,
                    1541,
                    2314,
                    1044,
                    156,
                    1694,
                    1822,
                    1310,
                    549,
                    2471,
                    2091,
                    1969,
                    1230,
                    1111,
                    1762,
                    1126,
                    2535,
                    1008,
                    251
                ],
                "_params": [
                    251
                ],
                "cache_readonly": [
                    1250,
                    458,
                    1260,
                    1235,
                    2324,
                    696,
                    251
                ],
                "BaseOffset._params.fget": [
                    251
                ],
                "BaseOffset._params": [
                    251
                ],
                "_use_relativedelta": [
                    252
                ],
                "_adjust_dst": [
                    545,
                    1123,
                    2468,
                    2085,
                    1936,
                    1815,
                    1304,
                    1690,
                    2300,
                    253,
                    1758,
                    1535
                ],
                "_attributes": [
                    546,
                    1538,
                    1124,
                    2469,
                    2086,
                    1031,
                    1096,
                    2532,
                    1003,
                    1691,
                    1937,
                    1816,
                    1307,
                    1214,
                    2301,
                    254,
                    1759
                ],
                "liboffsets.relativedelta_kwds": [
                    254
                ],
                "liboffsets": [
                    1280,
                    2366,
                    1954,
                    2529,
                    2406,
                    263,
                    2443,
                    332,
                    1868,
                    1854,
                    1942,
                    1335,
                    664,
                    665,
                    1659,
                    1144,
                    1149,
                    254
                ],
                "_deprecations": [
                    255
                ],
                "normalize": [
                    258,
                    261,
                    1541,
                    2314,
                    1044,
                    1694,
                    1822,
                    1310,
                    549,
                    2091,
                    1969,
                    2122,
                    1230,
                    1111,
                    1762,
                    2535,
                    2536,
                    1008,
                    2423
                ],
                "BaseOffset.__init__": [
                    1762,
                    549,
                    261,
                    1126,
                    1541,
                    2471,
                    2314,
                    1694,
                    2091,
                    2535,
                    1230,
                    1822,
                    1008,
                    1969,
                    1044,
                    1111,
                    1310
                ],
                "n": [
                    1280,
                    1282,
                    261,
                    1541,
                    2314,
                    2394,
                    912,
                    1044,
                    1428,
                    1429,
                    1433,
                    1435,
                    2397,
                    1437,
                    1310,
                    1439,
                    1694,
                    1822,
                    1444,
                    549,
                    2091,
                    1969,
                    2481,
                    2482,
                    2483,
                    2484,
                    2485,
                    1335,
                    2490,
                    1345,
                    1347,
                    1349,
                    586,
                    2124,
                    1485,
                    590,
                    591,
                    1230,
                    593,
                    1486,
                    595,
                    1490,
                    1492,
                    598,
                    1111,
                    1493,
                    1494,
                    2136,
                    603,
                    604,
                    1499,
                    606,
                    2139,
                    2141,
                    609,
                    866,
                    1762,
                    2143,
                    869,
                    2148,
                    2385,
                    2404,
                    2535,
                    2159,
                    1008,
                    2163,
                    2389,
                    886,
                    887,
                    1144,
                    1145,
                    2391
                ],
                "off": [
                    1602,
                    263,
                    264,
                    1616,
                    1595
                ],
                "use_rd": [
                    265,
                    263
                ],
                "liboffsets._determine_offset": [
                    263
                ],
                "kwds": [
                    357,
                    263,
                    328,
                    266,
                    267,
                    330,
                    335,
                    345,
                    316
                ],
                "object.__setattr__": [
                    512,
                    1542,
                    264,
                    265,
                    268,
                    2316,
                    2317,
                    2318,
                    2319,
                    1045,
                    1695,
                    1696,
                    1313,
                    1826,
                    1315,
                    550,
                    2092,
                    2093,
                    2095,
                    692,
                    693,
                    694,
                    1972,
                    1231,
                    1112,
                    1763,
                    510,
                    511
                ],
                "key": [
                    266,
                    267,
                    268
                ],
                "val": [
                    267,
                    268
                ],
                "self._use_relativedelta": [
                    288,
                    352,
                    328,
                    272,
                    277
                ],
                "self.kwds": [
                    418,
                    432,
                    275,
                    1240,
                    316
                ],
                "tzinfo": [
                    288,
                    290,
                    276,
                    277
                ],
                "other.replace": [
                    1943,
                    279
                ],
                "self.n": [
                    1280,
                    1549,
                    2321,
                    1554,
                    281,
                    282,
                    1051,
                    1433,
                    285,
                    1561,
                    1948,
                    2333,
                    1955,
                    1061,
                    294,
                    1829,
                    1577,
                    810,
                    2604,
                    1072,
                    2097,
                    2481,
                    823,
                    1335,
                    2105,
                    701,
                    1855,
                    1344,
                    1600,
                    1346,
                    1604,
                    2630,
                    330,
                    586,
                    971,
                    1613,
                    1869,
                    335,
                    2124,
                    465,
                    466,
                    1490,
                    2385,
                    2390,
                    1240,
                    350,
                    354,
                    866,
                    1765,
                    617,
                    745,
                    1133,
                    750,
                    367,
                    1651,
                    2549,
                    630,
                    1144,
                    635,
                    1149,
                    639
                ],
                "i": [
                    1152,
                    282,
                    1434,
                    285,
                    1575,
                    680,
                    681,
                    1578,
                    683,
                    1580,
                    1461,
                    1462,
                    843,
                    332,
                    333,
                    846,
                    1360,
                    977,
                    1361,
                    339,
                    979,
                    341,
                    1491,
                    1371,
                    350,
                    351,
                    1374,
                    354,
                    1380,
                    1383,
                    1386,
                    1388,
                    1518,
                    625,
                    628,
                    631,
                    1149
                ],
                "self._offset": [
                    354,
                    2434,
                    2437,
                    526,
                    2450,
                    2358,
                    471,
                    2425,
                    2426,
                    283,
                    2396,
                    2333,
                    286,
                    2367
                ],
                "apply_wraps": [
                    804,
                    1273,
                    583,
                    2120,
                    2473,
                    270,
                    1551,
                    1647,
                    817,
                    850,
                    2382,
                    1332,
                    1141,
                    1846,
                    1049,
                    1946
                ],
                "relativedelta_fast": [
                    328,
                    357,
                    317
                ],
                "issubset": [
                    328
                ],
                "months": [
                    1857,
                    1858,
                    1655,
                    330,
                    331,
                    332,
                    1485,
                    1487,
                    1651,
                    1428,
                    1652,
                    1430,
                    1653,
                    1654,
                    1657,
                    1949,
                    1950
                ],
                "kwds.get": [
                    330,
                    335
                ],
                "shifted": [
                    640,
                    1152,
                    642,
                    1659,
                    1954,
                    1960,
                    1577,
                    1578,
                    1608,
                    1609,
                    332,
                    333,
                    1868,
                    1874,
                    340,
                    341,
                    1382,
                    1383,
                    2163,
                    2164,
                    631,
                    1657,
                    1658,
                    635,
                    636,
                    1149
                ],
                "liboffsets.shift_months": [
                    332,
                    1149
                ],
                "i.asi8": [
                    332,
                    1149
                ],
                "i.dtype": [
                    1152,
                    333
                ],
                "weeks": [
                    611,
                    2404,
                    2405,
                    2406,
                    590,
                    335,
                    336,
                    595,
                    340
                ],
                "asper": [
                    640,
                    1380,
                    1382,
                    1575,
                    1577,
                    339,
                    628,
                    340,
                    636
                ],
                "i.to_period": [
                    1380,
                    339,
                    628,
                    1575
                ],
                "asper._time_shift": [
                    640,
                    1577,
                    340
                ],
                "shifted.to_timestamp": [
                    642,
                    1383,
                    1609,
                    1578,
                    341
                ],
                "i.to_perioddelta": [
                    1578,
                    1361,
                    625,
                    341,
                    631,
                    1374
                ],
                "timedelta_kwds": [
                    348,
                    349,
                    343
                ],
                "k": [
                    1568,
                    1561,
                    344,
                    345,
                    346,
                    1565,
                    1566
                ],
                "v": [
                    344,
                    345
                ],
                "kwds.items": [
                    345
                ],
                "delta": [
                    2639,
                    2641,
                    1362,
                    2642,
                    2644,
                    1365,
                    1368,
                    2652,
                    349,
                    350
                ],
                "Timedelta": [
                    2692,
                    2603,
                    1460,
                    1462,
                    1602,
                    2373,
                    2377,
                    1616,
                    1362,
                    349,
                    2401,
                    2530,
                    2662,
                    2667,
                    1517,
                    2672,
                    2677,
                    2682,
                    2687
                ],
                "kwd": [
                    360,
                    357
                ],
                "apply_index_wraps": [
                    1952,
                    1570,
                    296,
                    1866,
                    1357,
                    623,
                    1147
                ],
                "warnings.warn": [
                    370,
                    378
                ],
                "warnings": [
                    370,
                    378
                ],
                "self.is_on_offset": [
                    417,
                    809,
                    431,
                    822,
                    375
                ],
                "dt": [
                    1664,
                    2177,
                    2432,
                    2112,
                    2179,
                    2180,
                    646,
                    2434,
                    648,
                    2437,
                    2439,
                    2444,
                    1422,
                    1424,
                    1425,
                    2423,
                    416,
                    417,
                    418,
                    419,
                    2118,
                    809,
                    811,
                    1964,
                    813,
                    430,
                    431,
                    432,
                    433,
                    814,
                    815,
                    436,
                    1966,
                    822,
                    2503,
                    824,
                    952,
                    826,
                    827,
                    955,
                    445,
                    446,
                    956,
                    957,
                    961,
                    1083,
                    1085,
                    2109,
                    1861,
                    2111,
                    1863,
                    1480,
                    1864,
                    1482,
                    2116,
                    844,
                    845,
                    972,
                    974,
                    975,
                    2505,
                    1619,
                    1623,
                    2413,
                    1137,
                    1139,
                    375,
                    1662
                ],
                "self.is_anchored": [
                    1130,
                    383
                ],
                "exclude": [
                    394,
                    389
                ],
                "attrs": [
                    992,
                    390,
                    396,
                    399,
                    400,
                    530,
                    532,
                    534,
                    535,
                    991
                ],
                "attr": [
                    391,
                    392,
                    394,
                    395,
                    396
                ],
                "self.__dict__": [
                    391
                ],
                "attr.startswith": [
                    392
                ],
                "attrs.append": [
                    396
                ],
                "out": [
                    992,
                    993,
                    398,
                    400,
                    401,
                    533,
                    535,
                    536,
                    986
                ],
                "join": [
                    400,
                    992,
                    987,
                    535
                ],
                "self.rule_code": [
                    461,
                    1131,
                    405
                ],
                "_is_normalized": [
                    2432,
                    1861,
                    646,
                    2503,
                    1480,
                    1964,
                    1422,
                    1137,
                    1619,
                    436,
                    952,
                    1083,
                    2109,
                    1662
                ],
                "a": [
                    445,
                    447
                ],
                "b": [
                    446,
                    447
                ],
                "self._prefix": [
                    705,
                    1793,
                    1987,
                    1252,
                    456,
                    1631,
                    1265,
                    1330,
                    2204,
                    1844,
                    2452,
                    1242,
                    1724,
                    991
                ],
                "code": [
                    466,
                    468,
                    461
                ],
                "fstr": [
                    472,
                    466,
                    468,
                    477
                ],
                "self._offset_str": [
                    472
                ],
                "suffix": [
                    1797,
                    1800,
                    2450,
                    2452,
                    2205,
                    2206,
                    1834,
                    1835,
                    1325,
                    1329,
                    1330,
                    1980,
                    1981,
                    1728,
                    1732,
                    1733,
                    1627,
                    1630,
                    1631,
                    1635,
                    1638,
                    491,
                    492
                ],
                "cls": [
                    2240,
                    1729,
                    1734,
                    1639,
                    1798,
                    1801,
                    1325,
                    493,
                    1837,
                    1838,
                    1839,
                    2456,
                    1982
                ],
                "calendar": [
                    512,
                    503,
                    1233,
                    1047,
                    504,
                    1114
                ],
                "holidays": [
                    503,
                    1233,
                    1047,
                    504,
                    1114,
                    511
                ],
                "_get_calendar": [
                    503
                ],
                "weekmask": [
                    1233,
                    1047,
                    504,
                    1114,
                    510
                ],
                "self.offset": [
                    576,
                    578,
                    612,
                    581,
                    613,
                    617,
                    1067,
                    1068,
                    1072,
                    529,
                    530,
                    573,
                    575
                ],
                "BusinessMixin": [
                    539,
                    651,
                    1191
                ],
                "SingleConstructorOffset": [
                    1089,
                    1122,
                    2529,
                    996,
                    539
                ],
                "_prefix": [
                    2688,
                    1537,
                    1923,
                    2693,
                    1030,
                    1160,
                    1290,
                    1418,
                    1296,
                    1169,
                    1689,
                    1178,
                    544,
                    1187,
                    2084,
                    2299,
                    2683,
                    1477,
                    1094,
                    1997,
                    2008,
                    1757,
                    1890,
                    2018,
                    2531,
                    2663,
                    1001,
                    1900,
                    2028,
                    2668,
                    2673,
                    2678,
                    1915
                ],
                "offset": [
                    1045,
                    550,
                    2732,
                    2739,
                    2740,
                    694,
                    2743,
                    2742,
                    2745,
                    2750,
                    2753,
                    2756,
                    2766,
                    1231,
                    2768,
                    1112,
                    1115,
                    2780,
                    2782,
                    2787,
                    2788,
                    1009
                ],
                "off_str": [
                    576,
                    578,
                    579,
                    554,
                    556,
                    561,
                    565,
                    568,
                    570,
                    571
                ],
                "td.days": [
                    555,
                    556
                ],
                "td": [
                    555,
                    556,
                    557,
                    558,
                    569,
                    570
                ],
                "td.seconds": [
                    557,
                    558
                ],
                "s": [
                    558,
                    559,
                    562,
                    563,
                    566,
                    567,
                    568
                ],
                "hrs": [
                    560,
                    561,
                    562,
                    559
                ],
                "mts": [
                    563,
                    564,
                    565,
                    566
                ],
                "td.microseconds": [
                    569,
                    570
                ],
                "zero": [
                    574,
                    575
                ],
                "get_str": [
                    576,
                    578
                ],
                "wday": [
                    587,
                    591,
                    1717,
                    598,
                    1718,
                    600,
                    601,
                    1786,
                    603,
                    604,
                    1787
                ],
                "other.weekday": [
                    1562,
                    587
                ],
                "days": [
                    609,
                    611,
                    2427,
                    600,
                    603,
                    606
                ],
                "BDay": [
                    1072,
                    617,
                    2706,
                    2696
                ],
                "ApplyTypeError": [
                    2632,
                    619,
                    1074,
                    949,
                    2556
                ],
                "time": [
                    642,
                    1388,
                    625,
                    631,
                    1374
                ],
                "asi8": [
                    1361,
                    631
                ],
                "roll": [
                    640,
                    1052,
                    1438,
                    1054,
                    1442,
                    1444,
                    1061,
                    1445,
                    1460,
                    1603,
                    1608,
                    1613,
                    1614,
                    1493,
                    1497,
                    1371,
                    1501,
                    1502,
                    1382,
                    1386,
                    1517,
                    635,
                    636,
                    639
                ],
                "np.where": [
                    1440,
                    1441,
                    1603,
                    1444,
                    1500,
                    1493,
                    1499,
                    1495,
                    1496,
                    635,
                    1436,
                    1437
                ],
                "asper._addsub_int_array": [
                    636,
                    1382
                ],
                "operator.add": [
                    1608,
                    636,
                    1382
                ],
                "operator": [
                    1382,
                    1608,
                    2541,
                    2542,
                    2543,
                    2544,
                    2513,
                    636
                ],
                "dt.weekday": [
                    648,
                    1623
                ],
                "is_list_like": [
                    659,
                    654
                ],
                "start": [
                    654,
                    655,
                    656,
                    664,
                    668,
                    670,
                    799,
                    800,
                    673,
                    676,
                    681,
                    683,
                    2734,
                    2735,
                    2739,
                    692,
                    2740,
                    2358,
                    2361,
                    2745,
                    2366,
                    2367,
                    2750,
                    2369,
                    2752,
                    2753,
                    2755,
                    2380,
                    1115,
                    1009
                ],
                "end": [
                    659,
                    660,
                    661,
                    665,
                    668,
                    800,
                    801,
                    677,
                    681,
                    683,
                    2736,
                    2737,
                    693,
                    2742,
                    2743,
                    2745,
                    2746,
                    2749,
                    2366,
                    2367,
                    2750,
                    2753,
                    2757,
                    2760,
                    2771,
                    2774,
                    1115,
                    1009
                ],
                "np.array": [
                    664,
                    665
                ],
                "liboffsets._validate_business_time": [
                    664,
                    665
                ],
                "x": [
                    664,
                    665
                ],
                "num_openings": [
                    680,
                    683,
                    670
                ],
                "index": [
                    673,
                    676,
                    677
                ],
                "np.argsort": [
                    673
                ],
                "total_secs": [
                    681,
                    682,
                    685,
                    679
                ],
                "self._get_business_hours_by_sec": [
                    681,
                    682,
                    846,
                    882,
                    979
                ],
                "nb_offset": [
                    704,
                    714,
                    708,
                    702
                ],
                "self._prefix.startswith": [
                    705
                ],
                "CustomBusinessDay": [
                    707,
                    2701,
                    2799,
                    1240,
                    893
                ],
                "self.weekmask": [
                    709,
                    895
                ],
                "self.holidays": [
                    896,
                    710
                ],
                "self.calendar": [
                    897,
                    1061,
                    1086,
                    711
                ],
                "BusinessDay": [
                    900,
                    2696,
                    2793,
                    714,
                    1012
                ],
                "earliest_start": [
                    754,
                    762,
                    746,
                    739
                ],
                "self.start": [
                    768,
                    739,
                    740,
                    873,
                    843,
                    977,
                    883,
                    757,
                    989
                ],
                "latest_start": [
                    765,
                    740,
                    748,
                    751
                ],
                "self.next_bday.is_on_offset": [
                    902,
                    742
                ],
                "self.next_bday": [
                    902,
                    742,
                    744,
                    753,
                    764
                ],
                "sign": [
                    744,
                    745,
                    750,
                    753,
                    764
                ],
                "hour": [
                    770,
                    773,
                    746,
                    748,
                    754,
                    759,
                    765
                ],
                "minute": [
                    770,
                    773,
                    746,
                    748,
                    754,
                    759,
                    765
                ],
                "earliest_start.hour": [
                    746,
                    754
                ],
                "earliest_start.minute": [
                    746,
                    754
                ],
                "latest_start.hour": [
                    748,
                    765
                ],
                "latest_start.minute": [
                    748,
                    765
                ],
                "other.time": [
                    769,
                    870,
                    873,
                    751,
                    758,
                    762
                ],
                "st": [
                    768,
                    769,
                    770,
                    843,
                    844,
                    846,
                    977,
                    882,
                    883,
                    978,
                    757,
                    758,
                    759,
                    979,
                    988,
                    989
                ],
                "st.hour": [
                    978,
                    770,
                    844,
                    759
                ],
                "st.minute": [
                    978,
                    770,
                    844,
                    759
                ],
                "other.year": [
                    773,
                    2475,
                    2125,
                    2126,
                    2127,
                    2490,
                    2163,
                    1716,
                    1785,
                    1784,
                    1337,
                    858
                ],
                "other.month": [
                    773,
                    1949,
                    1716,
                    1785,
                    1784,
                    1337,
                    859,
                    1853
                ],
                "other.day": [
                    1280,
                    1344,
                    1346,
                    773,
                    1652,
                    1654,
                    1335,
                    1144,
                    860
                ],
                "self._next_opening_time": [
                    929,
                    871,
                    877,
                    813,
                    942,
                    974,
                    824,
                    792,
                    925
                ],
                "dtstart": [
                    802,
                    799
                ],
                "start.hour": [
                    799
                ],
                "start.minute": [
                    799
                ],
                "day": [
                    800,
                    801,
                    1486,
                    1487,
                    1429,
                    1430
                ],
                "until": [
                    801,
                    802
                ],
                "end.hour": [
                    801
                ],
                "end.minute": [
                    801
                ],
                "total_seconds": [
                    802,
                    975
                ],
                "self._prev_opening_time": [
                    903,
                    811,
                    972,
                    916,
                    826
                ],
                "self._get_closing_time": [
                    878,
                    916,
                    941,
                    814
                ],
                "dt.hour": [
                    844,
                    957
                ],
                "dt.minute": [
                    844,
                    957
                ],
                "self.end": [
                    870,
                    846,
                    883,
                    979,
                    989
                ],
                "nanosecond": [
                    933,
                    854
                ],
                "other.hour": [
                    2169,
                    861,
                    2495
                ],
                "other.minute": [
                    2496,
                    2170,
                    862
                ],
                "other.second": [
                    2497,
                    2171,
                    863
                ],
                "other.microsecond": [
                    864,
                    2498,
                    2172
                ],
                "self._is_on_offset": [
                    961,
                    876,
                    870
                ],
                "businesshours": [
                    976,
                    881,
                    979,
                    980,
                    886
                ],
                "en": [
                    882,
                    883,
                    988,
                    989
                ],
                "bd": [
                    900,
                    886,
                    888,
                    891,
                    894
                ],
                "r": [
                    888,
                    910,
                    886
                ],
                "_CustomMixin": [
                    1089,
                    1191,
                    1233,
                    1012,
                    1047,
                    1114,
                    892
                ],
                "skip_bd": [
                    905,
                    907,
                    900,
                    893
                ],
                "prev_open": [
                    904,
                    905,
                    903
                ],
                "remain": [
                    904,
                    905
                ],
                "bhour_remain": [
                    931,
                    932,
                    936,
                    937,
                    940,
                    910,
                    913,
                    918,
                    920,
                    921,
                    924,
                    927
                ],
                "bhour": [
                    929,
                    931,
                    932,
                    940,
                    943,
                    915,
                    918,
                    924,
                    925
                ],
                "dt.tzinfo": [
                    2177,
                    955
                ],
                "dt.year": [
                    2179,
                    2180,
                    2505,
                    1424,
                    957,
                    2111
                ],
                "dt.month": [
                    1863,
                    2505,
                    1966,
                    1424,
                    957,
                    2111
                ],
                "dt.day": [
                    1664,
                    1864,
                    2505,
                    1482,
                    1966,
                    1425,
                    1139,
                    957,
                    2111
                ],
                "dt.second": [
                    957
                ],
                "dt.microsecond": [
                    957
                ],
                "op": [
                    972,
                    974,
                    975,
                    2513,
                    978,
                    2517,
                    2525
                ],
                "span": [
                    980,
                    975
                ],
                "op.hour": [
                    978
                ],
                "op.minute": [
                    978
                ],
                "_repr_attrs": [
                    986
                ],
                "hours": [
                    987,
                    991
                ],
                "st.strftime": [
                    988
                ],
                "en.strftime": [
                    988
                ],
                "BusinessHourMixin": [
                    1089,
                    1115,
                    996
                ],
                "_anchor": [
                    1002,
                    1095
                ],
                "__init__": [
                    1009,
                    1126,
                    2471
                ],
                "_CustomMixin.__init__": [
                    1233,
                    1114,
                    1047
                ],
                "date_in": [
                    1057,
                    1058,
                    1065
                ],
                "np_dt": [
                    1058,
                    1061
                ],
                "date_in.date": [
                    1058
                ],
                "np_incr_dt": [
                    1064,
                    1060
                ],
                "np.busday_offset": [
                    1060
                ],
                "dt_date": [
                    1064,
                    1065
                ],
                "np_incr_dt.astype": [
                    1064
                ],
                "datetime.combine": [
                    1065
                ],
                "date_in.time": [
                    1065
                ],
                "day64": [
                    1085,
                    1086
                ],
                "_to_dt64D": [
                    1085
                ],
                "np.is_busday": [
                    1086
                ],
                "BusinessHourMixin.__init__": [
                    1115
                ],
                "month": [
                    1986,
                    1987,
                    2216,
                    2218,
                    1133,
                    1134,
                    1971,
                    1843,
                    1844,
                    1972
                ],
                "ccalendar.MONTH_ALIASES": [
                    2216,
                    1986,
                    1843,
                    1133
                ],
                "ccalendar": [
                    1792,
                    2179,
                    1800,
                    1424,
                    2216,
                    2217,
                    1835,
                    1843,
                    2229,
                    2230,
                    1337,
                    1723,
                    1981,
                    1986,
                    1733,
                    1629,
                    1638,
                    1133,
                    1784
                ],
                "self.code_rule": [
                    1134
                ],
                "self._get_offset_day": [
                    1664,
                    1864,
                    1966,
                    1649,
                    1139,
                    1143,
                    1658
                ],
                "compare_day": [
                    1649,
                    1652,
                    1654,
                    1143,
                    1144
                ],
                "liboffsets.roll_convention": [
                    1144,
                    1280,
                    1335
                ],
                "shift_month": [
                    1858,
                    2116,
                    1487,
                    1657,
                    1430,
                    1145,
                    1950
                ],
                "self._day_opt": [
                    1858,
                    1955,
                    1869,
                    1943,
                    1145,
                    1948,
                    1149,
                    1950,
                    1855
                ],
                "_simple_new": [
                    1152,
                    1873,
                    1959
                ],
                "i.freq": [
                    1152
                ],
                "MonthOffset": [
                    1155,
                    1191,
                    1164,
                    1173,
                    1182
                ],
                "_day_opt": [
                    1891,
                    1188,
                    1924,
                    2019,
                    1161,
                    1901,
                    1998,
                    2029,
                    1170,
                    2009,
                    1179,
                    1916
                ],
                "is_on_offset": [
                    1218
                ],
                "DateOffset.is_on_offset": [
                    1218
                ],
                "apply_index": [
                    1219
                ],
                "DateOffset.apply_index": [
                    1219
                ],
                "cbday": [
                    1240,
                    1244,
                    1247
                ],
                "self._prefix.endswith": [
                    1265,
                    1242,
                    1252
                ],
                "roll_func": [
                    1248,
                    1267,
                    1270,
                    1271,
                    1244,
                    1247
                ],
                "cbday.rollforward": [
                    1244
                ],
                "cbday.rollback": [
                    1247
                ],
                "moff": [
                    1257,
                    1258,
                    1254
                ],
                "MonthBegin": [
                    2804,
                    1254
                ],
                "MonthEnd": [
                    1257,
                    2803
                ],
                "self.m_offset.rollback": [
                    1267
                ],
                "self.m_offset": [
                    1282,
                    1267,
                    1270
                ],
                "self.m_offset.rollforward": [
                    1270
                ],
                "cur_month_offset_date": [
                    1282,
                    1276,
                    1279
                ],
                "self.month_roll": [
                    1276
                ],
                "compare_date": [
                    1280,
                    1279
                ],
                "self.cbday_roll": [
                    1283,
                    1279
                ],
                "compare_date.day": [
                    1280
                ],
                "new": [
                    1282,
                    1283,
                    2500,
                    2490,
                    2491,
                    2492,
                    2493,
                    2494
                ],
                "_CustomBusinessMonth": [
                    1288,
                    1289,
                    1294,
                    1295
                ],
                "Substitution": [
                    1293,
                    1287
                ],
                "Appender": [
                    1288,
                    1294
                ],
                "_CustomBusinessMonth.__doc__": [
                    1288,
                    1294
                ],
                "_default_day_of_month": [
                    1305
                ],
                "_min_day_of_month": [
                    1306,
                    1419
                ],
                "day_of_month": [
                    1312,
                    1315
                ],
                "self._default_day_of_month": [
                    1313
                ],
                "self._min_day_of_month": [
                    1316,
                    1319
                ],
                "self.day_of_month": [
                    1316,
                    1320,
                    1482,
                    1517,
                    1486,
                    1329,
                    1362,
                    1425,
                    1460,
                    1429,
                    1335
                ],
                "days_in_month": [
                    1424,
                    1337,
                    1346,
                    1425
                ],
                "ccalendar.get_days_in_month": [
                    1424,
                    1337,
                    1784,
                    2179
                ],
                "SemiMonthBegin": [
                    1344,
                    2807
                ],
                "SemiMonthEnd": [
                    1346,
                    2806
                ],
                "self._apply": [
                    1349
                ],
                "AbstractMethodError": [
                    1403,
                    1355,
                    1397
                ],
                "dti": [
                    1360,
                    1383
                ],
                "days_from_start": [
                    1368,
                    1361,
                    1365
                ],
                "before_day_of_month": [
                    1493,
                    1371,
                    1365,
                    1437
                ],
                "after_day_of_month": [
                    1440,
                    1441,
                    1444,
                    1496,
                    1499,
                    1368,
                    1371
                ],
                "self._get_roll": [
                    1371
                ],
                "self._apply_index_days": [
                    1386
                ],
                "SemiMonthOffset": [
                    1465,
                    1406
                ],
                "is_month_end": [
                    1434,
                    1436
                ],
                "i.is_month_end": [
                    1434
                ],
                "roll_end": [
                    1436,
                    1438
                ],
                "roll_before": [
                    1441,
                    1442,
                    1437,
                    1438
                ],
                "roll_after": [
                    1440,
                    1442,
                    1496,
                    1497,
                    1499,
                    1501
                ],
                "nanos": [
                    2656,
                    2658,
                    1517,
                    1518,
                    1460,
                    1461,
                    2652,
                    2653,
                    2654,
                    2655
                ],
                "nanos.astype": [
                    1461,
                    1518
                ],
                "is_month_start": [
                    1491,
                    1500,
                    1495
                ],
                "i.is_month_start": [
                    1491
                ],
                "roll_start": [
                    1497,
                    1500,
                    1501,
                    1495
                ],
                "_inc": [
                    1536,
                    2530,
                    2692,
                    2662,
                    2667,
                    2672,
                    2677,
                    2682,
                    2687
                ],
                "weekday": [
                    1792,
                    1793,
                    1542,
                    1800,
                    1801,
                    2317,
                    1695,
                    2217,
                    2218,
                    2093,
                    2230,
                    2233,
                    1723,
                    1724,
                    1733,
                    1734,
                    1629,
                    1630,
                    1763,
                    1636,
                    1638,
                    1639
                ],
                "self.weekday": [
                    1792,
                    2181,
                    1544,
                    1545,
                    1546,
                    1549,
                    1553,
                    2328,
                    1563,
                    1564,
                    1698,
                    1699,
                    1572,
                    2217,
                    1718,
                    2105,
                    1723,
                    1621,
                    1623,
                    1628,
                    1629,
                    1768,
                    1769,
                    1787
                ],
                "self._inc": [
                    1554,
                    2604
                ],
                "otherDay": [
                    1562,
                    1563,
                    1564
                ],
                "self._end_apply_index": [
                    1580
                ],
                "dtindex.to_perioddelta": [
                    1595
                ],
                "dtindex": [
                    1602,
                    1955,
                    1959,
                    1960,
                    1869,
                    1873,
                    1874,
                    1595,
                    1598
                ],
                "base": [
                    1609,
                    1614,
                    1616,
                    1597,
                    1598
                ],
                "mult": [
                    1597
                ],
                "libfrequencies.get_freq_code": [
                    1597
                ],
                "libfrequencies": [
                    1597
                ],
                "self.freqstr": [
                    1597
                ],
                "base_period": [
                    1608,
                    1614,
                    1604,
                    1598
                ],
                "dtindex.to_period": [
                    1598
                ],
                "normed": [
                    1602,
                    1604
                ],
                "base_period.to_timestamp": [
                    1604
                ],
                "base_period._addsub_int_array": [
                    1608
                ],
                "to_timestamp": [
                    1614
                ],
                "base_period._time_shift": [
                    1614
                ],
                "ccalendar.int_to_weekday": [
                    1792,
                    2217,
                    1723,
                    1629
                ],
                "ccalendar.weekday_to_int": [
                    1800,
                    2230,
                    1733,
                    1638
                ],
                "to_day": [
                    1658,
                    1659
                ],
                "liboffsets.shift_day": [
                    2406,
                    1659,
                    2443,
                    2366
                ],
                "shifted.day": [
                    1659
                ],
                "_WeekOfMonthMixin": [
                    1737,
                    1667
                ],
                "week": [
                    1696,
                    1732,
                    1734
                ],
                "self.week": [
                    1724,
                    1700,
                    1701,
                    1719
                ],
                "mstart": [
                    1716,
                    1717
                ],
                "mstart.weekday": [
                    1717
                ],
                "shift_days": [
                    1787,
                    1788,
                    1718,
                    1719
                ],
                "ccalendar.int_to_weekday.get": [
                    1792,
                    1723
                ],
                "cls._prefix": [
                    1729,
                    1798
                ],
                "dim": [
                    2179,
                    2180,
                    1784,
                    1785,
                    1788
                ],
                "mend": [
                    1785,
                    1786
                ],
                "mend.weekday": [
                    1786
                ],
                "_default_startingMonth": [
                    1888,
                    1921,
                    1898,
                    1813,
                    1914
                ],
                "Optional": [
                    1813,
                    1814
                ],
                "_from_name_startingMonth": [
                    1889,
                    1922,
                    1899,
                    1814
                ],
                "startingMonth": [
                    1824,
                    1825,
                    1826,
                    2092,
                    2316,
                    2229,
                    2234
                ],
                "self._default_startingMonth": [
                    1825
                ],
                "self.startingMonth": [
                    2179,
                    2180,
                    1829,
                    1863,
                    2216,
                    1869,
                    2125,
                    2126,
                    2127,
                    1843,
                    2163,
                    2327,
                    2105,
                    1853,
                    1855
                ],
                "kwargs": [
                    1833,
                    1835,
                    1838,
                    1839,
                    1979,
                    1981,
                    1982
                ],
                "ccalendar.MONTH_TO_CAL_NUM": [
                    1835,
                    1981,
                    2229
                ],
                "cls._from_name_startingMonth": [
                    1837,
                    1838
                ],
                "months_since": [
                    1857,
                    1853
                ],
                "qtrs": [
                    1857,
                    1854
                ],
                "liboffsets.roll_qtrday": [
                    1854
                ],
                "mod_month": [
                    1864,
                    1863
                ],
                "liboffsets.shift_quarters": [
                    1954,
                    1868
                ],
                "dtindex.asi8": [
                    1955,
                    1869
                ],
                "dtindex.freq": [
                    1960,
                    1874
                ],
                "dtindex.dtype": [
                    1960,
                    1874
                ],
                "QuarterOffset": [
                    1904,
                    1919,
                    1878,
                    1895
                ],
                "_outputName": [
                    1920,
                    1896,
                    1995,
                    2006,
                    1913,
                    1887
                ],
                "liboffsets.get_day_of_month": [
                    1942
                ],
                "self.month": [
                    1986,
                    1955,
                    1966,
                    1974,
                    1943,
                    1948,
                    1949
                ],
                "years": [
                    2397,
                    2396,
                    2394,
                    2395,
                    1948,
                    1949
                ],
                "roll_yearday": [
                    1948
                ],
                "self._default_month": [
                    1971
                ],
                "YearOffset": [
                    2022,
                    2001,
                    2012,
                    1990
                ],
                "_default_month": [
                    2017,
                    2027,
                    1996,
                    2007
                ],
                "variation": [
                    2223,
                    2319,
                    2225,
                    2095,
                    2235
                ],
                "self.variation": [
                    2209,
                    2114,
                    2186,
                    2100,
                    2101,
                    2329
                ],
                "year_end": [
                    2112,
                    2116,
                    2118
                ],
                "self.get_year_end": [
                    2112,
                    2116,
                    2125,
                    2126,
                    2127,
                    2164
                ],
                "norm": [
                    2357,
                    2358,
                    2361,
                    2363,
                    2369,
                    2122,
                    2135,
                    2137,
                    2140,
                    2142,
                    2144,
                    2147,
                    2149,
                    2152,
                    2153,
                    2154,
                    2423,
                    2425,
                    2426
                ],
                "prev_year": [
                    2149,
                    2152,
                    2153,
                    2154,
                    2125,
                    2129,
                    2135,
                    2140,
                    2142
                ],
                "cur_year": [
                    2144,
                    2147,
                    2149,
                    2126,
                    2130,
                    2137,
                    2142
                ],
                "next_year": [
                    2144,
                    2147,
                    2131,
                    2127
                ],
                "other.tzinfo": [
                    2129,
                    2130,
                    2131,
                    2479
                ],
                "norm.year": [
                    2152
                ],
                "prev_year.year": [
                    2152
                ],
                "result.year": [
                    2166
                ],
                "result.month": [
                    2167
                ],
                "result.day": [
                    2168
                ],
                "target_date": [
                    2180,
                    2181,
                    2184,
                    2191,
                    2197,
                    2200
                ],
                "wkday_diff": [
                    2194,
                    2187,
                    2181,
                    2182
                ],
                "target_date.weekday": [
                    2181
                ],
                "days_forward": [
                    2187,
                    2191,
                    2194,
                    2195,
                    2197,
                    2200
                ],
                "prefix": [
                    2218,
                    2204,
                    2206,
                    2215
                ],
                "self.get_rule_code_suffix": [
                    2205
                ],
                "self._get_suffix_prefix": [
                    2215
                ],
                "varion_code": [
                    2224,
                    2227,
                    2222
                ],
                "startingMonth_code": [
                    2229
                ],
                "weekday_code": [
                    2230
                ],
                "cls._parse_suffix": [
                    2240
                ],
                "args": [
                    2240,
                    2457
                ],
                "qtr_with_extra_week": [
                    2318
                ],
                "FY5253": [
                    2457,
                    2818,
                    2326
                ],
                "self._offset.is_anchored": [
                    2333
                ],
                "num_qtrs": [
                    2372,
                    2380,
                    2387,
                    2355,
                    2389
                ],
                "tz_localize": [
                    2357,
                    2423
                ],
                "self._offset.rollback": [
                    2358
                ],
                "qtr_lens": [
                    2401,
                    2370,
                    2404,
                    2439,
                    2442,
                    2363,
                    2366,
                    2367
                ],
                "self.get_weeks": [
                    2401,
                    2363,
                    2439
                ],
                "self._offset.is_on_offset": [
                    2434,
                    2367
                ],
                "tdelta": [
                    2369,
                    2371,
                    2373,
                    2377,
                    2380,
                    2387,
                    2390
                ],
                "qlen": [
                    2370,
                    2371,
                    2373
                ],
                "tdelta.days": [
                    2371
                ],
                "prev_year_end": [
                    2427,
                    2426,
                    2387,
                    2388
                ],
                "self._rollback_to_year": [
                    2387
                ],
                "res": [
                    2401,
                    2406,
                    2408,
                    2388,
                    2396
                ],
                "tdelta.value": [
                    2390
                ],
                "ret": [
                    2416,
                    2418,
                    2411
                ],
                "year_has_extra_week": [
                    2413,
                    2415
                ],
                "self.year_has_extra_week": [
                    2413
                ],
                "self.qtr_with_extra_week": [
                    2416,
                    2451
                ],
                "next_year_end": [
                    2425,
                    2441,
                    2427,
                    2437
                ],
                "self._offset.rollforward": [
                    2425
                ],
                "weeks_in_year": [
                    2427,
                    2428,
                    2429
                ],
                "current": [
                    2441,
                    2443,
                    2444
                ],
                "qtr_len": [
                    2442,
                    2443
                ],
                "self._offset.get_rule_code_suffix": [
                    2450
                ],
                "qtr": [
                    2451,
                    2452
                ],
                "FY5253._parse_suffix": [
                    2457
                ],
                "current_easter": [
                    2475,
                    2476,
                    2477,
                    2479,
                    2482,
                    2484
                ],
                "easter": [
                    2505,
                    2490,
                    2475
                ],
                "current_easter.year": [
                    2477
                ],
                "current_easter.month": [
                    2477
                ],
                "current_easter.day": [
                    2477
                ],
                "new.year": [
                    2492
                ],
                "new.month": [
                    2493
                ],
                "new.day": [
                    2494
                ],
                "operator.eq": [
                    2513
                ],
                "operator.ne": [
                    2513
                ],
                "self.delta": [
                    2628,
                    2598,
                    2576,
                    2608,
                    2517,
                    2551
                ],
                "other.delta": [
                    2576,
                    2517,
                    2598,
                    2551
                ],
                "err": [
                    2561,
                    2523
                ],
                "f.__name__": [
                    2525
                ],
                "f": [
                    2525,
                    2526
                ],
                "op.__name__": [
                    2525
                ],
                "liboffsets._Tick": [
                    2529
                ],
                "__gt__": [
                    2541
                ],
                "_tick_comp": [
                    2544,
                    2541,
                    2542,
                    2543
                ],
                "operator.gt": [
                    2541
                ],
                "__ge__": [
                    2542
                ],
                "operator.ge": [
                    2542
                ],
                "__lt__": [
                    2543
                ],
                "operator.lt": [
                    2543
                ],
                "__le__": [
                    2544
                ],
                "operator.le": [
                    2544
                ],
                "other.n": [
                    2549,
                    2630
                ],
                "delta_to_tick": [
                    2551
                ],
                "Period": [
                    2552
                ],
                "self.apply": [
                    2555
                ],
                "Any": [
                    2563
                ],
                "to_offset": [
                    2592,
                    2570,
                    2732
                ],
                "self._params": [
                    2583
                ],
                "delta_to_nanoseconds": [
                    2608,
                    2652
                ],
                "other.__add__": [
                    2620
                ],
                "delta.microseconds": [
                    2639
                ],
                "delta.seconds": [
                    2641,
                    2644
                ],
                "Day": [
                    2816,
                    2642
                ],
                "delta.days": [
                    2642,
                    2644
                ],
                "seconds": [
                    2644,
                    2645,
                    2646,
                    2647,
                    2648,
                    2650
                ],
                "Hour": [
                    2646,
                    2815
                ],
                "Minute": [
                    2648,
                    2810
                ],
                "Second": [
                    2809,
                    2650
                ],
                "Milli": [
                    2814,
                    2654
                ],
                "Micro": [
                    2656,
                    2811
                ],
                "BMonthEnd": [
                    2697
                ],
                "BusinessMonthEnd": [
                    2697,
                    2795
                ],
                "BMonthBegin": [
                    2698
                ],
                "BusinessMonthBegin": [
                    2698,
                    2794
                ],
                "CBMonthEnd": [
                    2699
                ],
                "CustomBusinessMonthEnd": [
                    2800,
                    2699
                ],
                "CBMonthBegin": [
                    2700
                ],
                "CustomBusinessMonthBegin": [
                    2801,
                    2700
                ],
                "CDay": [
                    2701
                ],
                "offset.is_on_offset": [
                    2739,
                    2742
                ],
                "offset.rollforward": [
                    2740
                ],
                "offset.rollback": [
                    2743
                ],
                "periods": [
                    2745,
                    2747,
                    2753,
                    2750
                ],
                "offset.n": [
                    2745,
                    2756
                ],
                "cur": [
                    2755,
                    2757,
                    2758,
                    2760,
                    2766,
                    2767,
                    2769,
                    2771,
                    2772,
                    2774,
                    2780,
                    2781,
                    2783
                ],
                "next_date": [
                    2766,
                    2767,
                    2769,
                    2780,
                    2781,
                    2783
                ],
                "offset.apply": [
                    2780,
                    2766
                ],
                "prefix_mapping": [
                    2786
                ],
                "offset._prefix": [
                    2787
                ],
                "YearBegin": [
                    2789
                ],
                "YearEnd": [
                    2790
                ],
                "BYearBegin": [
                    2791
                ],
                "BYearEnd": [
                    2792
                ],
                "BQuarterEnd": [
                    2796
                ],
                "BQuarterBegin": [
                    2797
                ],
                "BusinessHour": [
                    2798
                ],
                "CustomBusinessHour": [
                    2802
                ],
                "Week": [
                    2808
                ],
                "QuarterEnd": [
                    2812
                ],
                "QuarterBegin": [
                    2813
                ],
                "WeekOfMonth": [
                    2817
                ],
                "FY5253Quarter": [
                    2819
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-11-01 00:00:00', '1999-11-01 00:01:00',\\n               '1999-11-01 00:02:00', '1999-11-01 00:03:0...          '2000-02-01 10:38:00', '2000-02-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.MonthBegin'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-11-01 00:00:00', '1999-11-01 00:01:00',\\n               '1999-11-01 00:02:00', '1999-11-01 00:03:0...          '2000-02-01 10:38:00', '2000-02-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-02-01 00:00:00', '2000-02-01 00:01:00',\\n               '2000-02-01 00:02:00', '2000-02-01 00:03:0...          '2000-04-01 10:38:00', '2000-04-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.MonthBegin'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-02-01 00:00:00', '2000-02-01 00:01:00',\\n               '2000-02-01 00:02:00', '2000-02-01 00:03:0...          '2000-04-01 10:38:00', '2000-04-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-11-30 00:00:00', '1999-11-30 00:01:00',\\n               '1999-11-30 00:02:00', '1999-11-30 00:03:0...          '2000-01-31 10:38:00', '2000-01-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.MonthEnd'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-11-30 00:00:00', '1999-11-30 00:01:00',\\n               '1999-11-30 00:02:00', '1999-11-30 00:03:0...          '2000-01-31 10:38:00', '2000-01-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-01-31 00:00:00', '2000-01-31 00:01:00',\\n               '2000-01-31 00:02:00', '2000-01-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.MonthEnd'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-01-31 00:00:00', '2000-01-31 00:01:00',\\n               '2000-01-31 00:02:00', '2000-01-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-11-01 00:00:00', '1999-11-01 00:01:00',\\n               '1999-11-01 00:02:00', '1999-11-01 00:03:0...          '2000-02-01 10:38:00', '2000-02-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BusinessMonthBegin'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-11-01 00:00:00', '1999-11-01 00:01:00',\\n               '1999-11-01 00:02:00', '1999-11-01 00:03:0...          '2000-02-01 10:38:00', '2000-02-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-01-03 00:00:00', '2000-01-03 00:01:00',\\n               '2000-01-03 00:02:00', '2000-01-03 00:03:0...          '2000-04-03 10:38:00', '2000-04-03 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BusinessMonthBegin'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-01-03 00:00:00', '2000-01-03 00:01:00',\\n               '2000-01-03 00:02:00', '2000-01-03 00:03:0...          '2000-04-03 10:38:00', '2000-04-03 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-11-30 00:00:00', '1999-11-30 00:01:00',\\n               '1999-11-30 00:02:00', '1999-11-30 00:03:0...          '2000-01-31 10:38:00', '2000-01-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BusinessMonthEnd'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-11-30 00:00:00', '1999-11-30 00:01:00',\\n               '1999-11-30 00:02:00', '1999-11-30 00:03:0...          '2000-01-31 10:38:00', '2000-01-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-01-31 00:00:00', '2000-01-31 00:01:00',\\n               '2000-01-31 00:02:00', '2000-01-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BusinessMonthEnd'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-01-31 00:00:00', '2000-01-31 00:01:00',\\n               '2000-01-31 00:02:00', '2000-01-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-09-01 00:00:00', '1999-09-01 00:01:00',\\n               '1999-09-01 00:02:00', '1999-09-01 00:03:0...          '1999-12-01 10:38:00', '1999-12-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.QuarterBegin'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-09-01 00:00:00', '1999-09-01 00:01:00',\\n               '1999-09-01 00:02:00', '1999-09-01 00:03:0...          '1999-12-01 10:38:00', '1999-12-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-03-01 00:00:00', '2000-03-01 00:01:00',\\n               '2000-03-01 00:02:00', '2000-03-01 00:03:0...          '2000-06-01 10:38:00', '2000-06-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.QuarterBegin'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-03-01 00:00:00', '2000-03-01 00:01:00',\\n               '2000-03-01 00:02:00', '2000-03-01 00:03:0...          '2000-06-01 10:38:00', '2000-06-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-09-30 00:00:00', '1999-09-30 00:01:00',\\n               '1999-09-30 00:02:00', '1999-09-30 00:03:0...          '1999-09-30 10:38:00', '1999-09-30 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.QuarterEnd'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-09-30 00:00:00', '1999-09-30 00:01:00',\\n               '1999-09-30 00:02:00', '1999-09-30 00:03:0...          '1999-09-30 10:38:00', '1999-09-30 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-03-31 00:00:00', '2000-03-31 00:01:00',\\n               '2000-03-31 00:02:00', '2000-03-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.QuarterEnd'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-03-31 00:00:00', '2000-03-31 00:01:00',\\n               '2000-03-31 00:02:00', '2000-03-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-09-01 00:00:00', '1999-09-01 00:01:00',\\n               '1999-09-01 00:02:00', '1999-09-01 00:03:0...          '1999-12-01 10:38:00', '1999-12-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BQuarterBegin'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-09-01 00:00:00', '1999-09-01 00:01:00',\\n               '1999-09-01 00:02:00', '1999-09-01 00:03:0...          '1999-12-01 10:38:00', '1999-12-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-03-01 00:00:00', '2000-03-01 00:01:00',\\n               '2000-03-01 00:02:00', '2000-03-01 00:03:0...          '2000-06-01 10:38:00', '2000-06-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BQuarterBegin'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-03-01 00:00:00', '2000-03-01 00:01:00',\\n               '2000-03-01 00:02:00', '2000-03-01 00:03:0...          '2000-06-01 10:38:00', '2000-06-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1999-09-30 00:00:00', '1999-09-30 00:01:00',\\n               '1999-09-30 00:02:00', '1999-09-30 00:03:0...          '1999-09-30 10:38:00', '1999-09-30 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BQuarterEnd'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1999-09-30 00:00:00', '1999-09-30 00:01:00',\\n               '1999-09-30 00:02:00', '1999-09-30 00:03:0...          '1999-09-30 10:38:00', '1999-09-30 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-03-31 00:00:00', '2000-03-31 00:01:00',\\n               '2000-03-31 00:02:00', '2000-03-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BQuarterEnd'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-03-31 00:00:00', '2000-03-31 00:01:00',\\n               '2000-03-31 00:02:00', '2000-03-31 00:03:0...          '2000-03-31 10:38:00', '2000-03-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1998-01-01 00:00:00', '1998-01-01 00:01:00',\\n               '1998-01-01 00:02:00', '1998-01-01 00:03:0...          '1999-01-01 10:38:00', '1999-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.YearBegin'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1998-01-01 00:00:00', '1998-01-01 00:01:00',\\n               '1998-01-01 00:02:00', '1998-01-01 00:03:0...          '1999-01-01 10:38:00', '1999-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2001-01-01 00:00:00', '2001-01-01 00:01:00',\\n               '2001-01-01 00:02:00', '2001-01-01 00:03:0...          '2001-01-01 10:38:00', '2001-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.YearBegin'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2001-01-01 00:00:00', '2001-01-01 00:01:00',\\n               '2001-01-01 00:02:00', '2001-01-01 00:03:0...          '2001-01-01 10:38:00', '2001-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1998-12-31 00:00:00', '1998-12-31 00:01:00',\\n               '1998-12-31 00:02:00', '1998-12-31 00:03:0...          '1998-12-31 10:38:00', '1998-12-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.YearEnd'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1998-12-31 00:00:00', '1998-12-31 00:01:00',\\n               '1998-12-31 00:02:00', '1998-12-31 00:03:0...          '1998-12-31 10:38:00', '1998-12-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-12-31 00:00:00', '2000-12-31 00:01:00',\\n               '2000-12-31 00:02:00', '2000-12-31 00:03:0...          '2000-12-31 10:38:00', '2000-12-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.YearEnd'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-12-31 00:00:00', '2000-12-31 00:01:00',\\n               '2000-12-31 00:02:00', '2000-12-31 00:03:0...          '2000-12-31 10:38:00', '2000-12-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1998-01-01 00:00:00', '1998-01-01 00:01:00',\\n               '1998-01-01 00:02:00', '1998-01-01 00:03:0...          '1999-01-01 10:38:00', '1999-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BYearBegin'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1998-01-01 00:00:00', '1998-01-01 00:01:00',\\n               '1998-01-01 00:02:00', '1998-01-01 00:03:0...          '1999-01-01 10:38:00', '1999-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-01-03 00:00:00', '2000-01-03 00:01:00',\\n               '2000-01-03 00:02:00', '2000-01-03 00:03:0...          '2001-01-01 10:38:00', '2001-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BYearBegin'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-01-03 00:00:00', '2000-01-03 00:01:00',\\n               '2000-01-03 00:02:00', '2000-01-03 00:03:0...          '2001-01-01 10:38:00', '2001-01-01 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['1998-12-31 00:00:00', '1998-12-31 00:01:00',\\n               '1998-12-31 00:02:00', '1998-12-31 00:03:0...          '1998-12-31 10:38:00', '1998-12-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BYearEnd'>, n = -2\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['1998-12-31 00:00:00', '1998-12-31 00:01:00',\\n               '1998-12-31 00:02:00', '1998-12-31 00:03:0...          '1998-12-31 10:38:00', '1998-12-31 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_20/pandas/tests/tseries/offsets/test_yqm_offsets.py",
                "test_function": "test_apply_index",
                "test_function_code": "@pytest.mark.parametrize(\"n\", [-2, 1])\n@pytest.mark.parametrize(\n    \"cls\",\n    [\n        MonthBegin,\n        MonthEnd,\n        BMonthBegin,\n        BMonthEnd,\n        QuarterBegin,\n        QuarterEnd,\n        BQuarterBegin,\n        BQuarterEnd,\n        YearBegin,\n        YearEnd,\n        BYearBegin,\n        BYearEnd,\n    ],\n)\ndef test_apply_index(cls, n):\n    offset = cls(n=n)\n    rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n    ser = pd.Series(rng)\n\n    res = rng + offset\n    assert res.freq is None  # not retained\n    res_v2 = offset.apply_index(rng)\n    assert (res == res_v2).all()\n    assert res[0] == rng[0] + offset\n    assert res[-1] == rng[-1] + offset\n    res2 = ser + offset\n    # apply_index is only for indexes, not series, so no res2_v2\n    assert res2.iloc[0] == ser.iloc[0] + offset\n    assert res2.iloc[-1] == ser.iloc[-1] + offset",
                "test_error": "AssertionError: assert <Minute> is None  +  where <Minute> = DatetimeIndex(['2000-12-29 00:00:00', '2000-12-29 00:01:00',\\n               '2000-12-29 00:02:00', '2000-12-29 00:03:0...          '2000-12-29 10:38:00', '2000-12-29 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq",
                "full_test_error": "cls = <class 'pandas.tseries.offsets.BYearEnd'>, n = 1\n\n    @pytest.mark.parametrize(\"n\", [-2, 1])\n    @pytest.mark.parametrize(\n        \"cls\",\n        [\n            MonthBegin,\n            MonthEnd,\n            BMonthBegin,\n            BMonthEnd,\n            QuarterBegin,\n            QuarterEnd,\n            BQuarterBegin,\n            BQuarterEnd,\n            YearBegin,\n            YearEnd,\n            BYearBegin,\n            BYearEnd,\n        ],\n    )\n    def test_apply_index(cls, n):\n        offset = cls(n=n)\n        rng = pd.date_range(start=\"1/1/2000\", periods=100000, freq=\"T\")\n        ser = pd.Series(rng)\n    \n        res = rng + offset\n>       assert res.freq is None  # not retained\nE       AssertionError: assert <Minute> is None\nE        +  where <Minute> = DatetimeIndex(['2000-12-29 00:00:00', '2000-12-29 00:01:00',\\n               '2000-12-29 00:02:00', '2000-12-29 00:03:0...          '2000-12-29 10:38:00', '2000-12-29 10:39:00'],\\n              dtype='datetime64[ns]', length=100000, freq='T').freq\n\npandas/tests/tseries/offsets/test_yqm_offsets.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('n', [-2, 1])",
                    "pytest.mark.parametrize('cls', [MonthBegin, MonthEnd, BMonthBegin, BMonthEnd, QuarterBegin, QuarterEnd, BQuarterBegin, BQuarterEnd, YearBegin, YearEnd, BYearBegin, BYearEnd])"
                ]
            }
        ]
    }
}