{
    "pandas": [
        {
            "bugID": 149,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 142,
            "file_name": "pandas/io/parquet.py",
            "replace_code": "def write(\n    self, df, path, compression=\"snappy\", index=None, partition_cols=None, **kwargs\n):\n\n    self.validate_dataframe(df)\n    \n    # Updated to use correct mode when accessing the file\n    if is_s3_url(path):\n        if \"w\" in kwargs.get(\"mode\", \"r\"):\n            mode = \"wb\"\n        else:\n            mode = \"rb\"\n        \n        path, _, _, _ = get_filepath_or_buffer(path, mode=mode)\n        kwargs[\"open_with\"] = lambda path, _: path\n    else:\n        path, _, _, _ = get_filepath_or_buffer(path, mode=kwargs.get(\"mode\", \"rb\"))\n    \n    with catch_warnings(record=True):\n        self.api.write(\n            path,\n            df,\n            compression=compression,\n            write_index=index,\n            partition_on=partition_cols,\n            **kwargs\n        )"
        }
    ]
}