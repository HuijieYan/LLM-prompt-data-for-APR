{
    "pandas": [
        {
            "bugID": 149,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 142,
            "file_name": "pandas/io/parquet.py",
            "replace_code": "def write(self, df, path, compression=\"snappy\", index=None, partition_cols=None, **kwargs):\n    import gcsfs\n    self.validate_dataframe(df)\n    \n    if partition_cols is not None:\n        kwargs[\"file_scheme\"] = \"hive\"\n        \n    if path.startswith('gs://'):\n        import gcsfs\n        fs = gcsfs.GCSFileSystem()\n        with fs.open(path, 'wb') as f:\n            self.api.write(\n                f,\n                df,\n                compression=compression,\n                write_index=index,\n                partition_on=partition_cols,\n                **kwargs\n            )\n    else:\n        with catch_warnings(record=True):\n            self.api.write(\n                path,\n                df,\n                compression=compression,\n                write_index=index,\n                partition_on=partition_cols,\n                **kwargs\n            )"
        }
    ]
}