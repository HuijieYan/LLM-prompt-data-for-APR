{
    "pandas": [
        {
            "bugID": 160,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 73,
            "file_name": "pandas/core/computation/expressions.py",
            "replace_code": "def _can_use_numexpr(op, op_str, a, b, dtype_check):\n    import numpy as np\n    from collections import defaultdict\n    \"\"\" \n    Return a boolean if we WILL be using numexpr \n    \"\"\"\n    if op_str is not None:\n        op_str_to_func_mapping = {\n            '+': np.add,\n            '-': np.subtract,\n            '*': np.multiply,\n            '/': np.divide,\n            '%': np.mod,\n            'truediv': np.true_divide,\n            'floordiv': np.floor_divide\n        }\n    \n        func = op_str_to_func_mapping.get(op_str)\n        if func is None:\n            return False\n    \n        elements = a.size\n        if elements > _MIN_ELEMENTS:\n            if hasattr(a, \"dtypes\") and hasattr(b, \"dtypes\"):\n                dtypes = a.dtypes.combine_first(b.dtypes)\n                return len(dtypes) == 1 and dtypes.index[0] in _ALLOWED_DTYPES[dtype_check]\n            return False\n        return False\n    return False"
        }
    ]
}