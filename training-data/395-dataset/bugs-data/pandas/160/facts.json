{
    "1.1.1": "def _can_use_numexpr(op, op_str, a, b, dtype_check):\n    \n    if op_str is not None:\n\n        # required min elements (otherwise we are adding overhead)\n        if np.prod(a.shape) > _MIN_ELEMENTS:\n\n            # check for dtype compatibility\n            dtypes = set()\n            for o in [a, b]:\n                if hasattr(o, \"dtypes\"):\n                    s = o.dtypes.value_counts()\n                    if len(s) > 1:\n                        return False\n                    dtypes |= set(s.index.astype(str))\n                elif isinstance(o, np.ndarray):\n                    dtypes |= {o.dtype.name}\n\n            # allowed are a superset\n            if not len(dtypes) or _ALLOWED_DTYPES[dtype_check] >= dtypes:\n                return True\n\n    return False\n",
    "1.1.2": "return a boolean if we WILL be using numexpr ",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_160/pandas/core/computation/expressions.py",
    "1.3.2": null,
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_160/pandas/tests/test_expressions.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_160/pandas/tests/test_expressions.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_160/pandas/tests/test_expressions.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_160/pandas/tests/test_expressions.py"
    ],
    "2.1.1": [
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ],
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ],
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ],
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x11999b280>\naxis = 1, arith = 'add'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>, op_str = '+'\na = 0      -0.681111\n1      -0.769614\n2       0.213508\n3      -0.225428\n4       1.152981\n          ...   \n9995    0.521720\n9996    0.323996\n9997   -0.582085\n9998   -1.271188\n9999    0.239019\nName: A, Length: 10000, dtype: float64\nb = -0.6811107566823306, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ],
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x119c35760>\naxis = 1, arith = 'sub'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function sub>, op_str = '-'\na = 0      -0.681111\n1      -0.769614\n2       0.213508\n3      -0.225428\n4       1.152981\n          ...   \n9995    0.521720\n9996    0.323996\n9997   -0.582085\n9998   -1.271188\n9999    0.239019\nName: A, Length: 10000, dtype: float64\nb = -0.6811107566823306, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ],
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x121cfcbe0>\naxis = 1, arith = 'mul'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function mul>, op_str = '*'\na = 0      -0.681111\n1      -0.769614\n2       0.213508\n3      -0.225428\n4       1.152981\n          ...   \n9995    0.521720\n9996    0.323996\n9997   -0.582085\n9998   -1.271188\n9999    0.239019\nName: A, Length: 10000, dtype: float64\nb = -0.6811107566823306, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ],
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x121ce0280>\naxis = 1, arith = 'truediv'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function truediv>, op_str = '/'\na = 0      -0.681111\n1      -0.769614\n2       0.213508\n3      -0.225428\n4       1.152981\n          ...   \n9995    0.521720\n9996    0.323996\n9997   -0.582085\n9998   -1.271188\n9999    0.239019\nName: A, Length: 10000, dtype: float64\nb = -0.6811107566823306, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "a.shape": "(10000, 4)",
                "a": "array of shape 10000",
                "b": "A    0.442643\nB   -1.502771\nC   -1.089178\nD    0.059592\nName: 0, dtype: float64",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0       0.442643\n1      -1.368258\n2       0.282984\n3       1.352933\n4      -0.235411\n          ...   \n9995    0.316491\n9996   -1.140483\n9997    0.838539\n9998    1.610890\n9999    2.428664\nName: A, Length: 10000, dtype: float64",
                "b": "0.44264254462607894",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([ 0.44264254, -1.36825847,  0.28298421, ...,  0.83853874,\n        1.61089018,  2.42866416])",
                "b": "0.44264254462607894",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0      -1.502771\n1      -0.633649\n2      -1.370719\n3       2.633795\n4       0.116608\n          ...   \n9995   -0.433836\n9996   -0.558918\n9997    0.187714\n9998   -1.078948\n9999   -0.500127\nName: B, Length: 10000, dtype: float64",
                "b": "-1.5027705584715065",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([-1.50277056, -0.63364913, -1.37071898, ...,  0.18771425,\n       -1.07894826, -0.50012712])",
                "b": "-1.5027705584715065",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0      -1.089178\n1      -0.895849\n2      -1.081483\n3       1.280792\n4       0.335009\n          ...   \n9995   -0.110793\n9996   -1.915337\n9997   -0.278462\n9998   -0.070274\n9999    1.543581\nName: C, Length: 10000, dtype: float64",
                "b": "-1.089177629460994",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([-1.08917763, -0.89584949, -1.08148316, ..., -0.27846161,\n       -0.07027392,  1.54358077])",
                "b": "-1.089177629460994",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0       0.059592\n1      -0.743866\n2       0.410375\n3      -1.003095\n4      -0.909747\n          ...   \n9995    1.033666\n9996   -0.748404\n9997   -1.060742\n9998    0.769330\n9999    0.813806\nName: D, Length: 10000, dtype: float64",
                "b": "0.0595919136780893",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([ 0.05959191, -0.74386629,  0.4103754 , ..., -1.06074178,\n        0.76933005,  0.8138064 ])",
                "b": "0.0595919136780893",
                "dtype_check": "'evaluate'"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "a.shape": "tuple",
                "a": "DataFrame",
                "b": "Series",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "a.shape": "(10000, 4)",
                "a": "array of shape 10000",
                "b": "A   -1.231673\nB    0.119631\nC    0.091445\nD   -0.151206\nName: 0, dtype: float64",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "op_str": "'+'",
                "a.shape": "(10000,)",
                "a": "0      -1.231673\n1       1.835840\n2      -0.660322\n3      -0.496448\n4      -0.966505\n          ...   \n9995    1.077255\n9996    0.142158\n9997   -0.402862\n9998   -0.139746\n9999   -1.113026\nName: A, Length: 10000, dtype: float64",
                "b": "-1.2316731048001448",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-1.2316731048001448",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'+'",
                "a.shape": "(10000,)",
                "a": "0       0.119631\n1       1.444957\n2      -1.212408\n3       1.555816\n4       0.229536\n          ...   \n9995   -0.863474\n9996    0.656991\n9997   -0.760815\n9998    0.167814\n9999    0.038096\nName: B, Length: 10000, dtype: float64",
                "b": "0.11963062073689662",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.11963062073689662",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'+'",
                "a.shape": "(10000,)",
                "a": "0       0.091445\n1       0.848504\n2       0.371640\n3      -1.359481\n4       0.452869\n          ...   \n9995    0.378597\n9996   -1.199490\n9997    2.034095\n9998    1.969442\n9999   -1.800928\nName: C, Length: 10000, dtype: float64",
                "b": "0.0914450054290737",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.0914450054290737",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'+'",
                "a.shape": "(10000,)",
                "a": "0      -0.151206\n1      -0.998737\n2      -0.181065\n3      -1.421259\n4       1.835550\n          ...   \n9995    0.286962\n9996    1.010393\n9997    0.724847\n9998    0.536394\n9999   -1.192393\nName: D, Length: 10000, dtype: float64",
                "b": "-0.15120555785840994",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-0.15120555785840994",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'-'",
                "a.shape": "(10000,)",
                "a": "0      -1.231673\n1       1.835840\n2      -0.660322\n3      -0.496448\n4      -0.966505\n          ...   \n9995    1.077255\n9996    0.142158\n9997   -0.402862\n9998   -0.139746\n9999   -1.113026\nName: A, Length: 10000, dtype: float64",
                "b": "-1.2316731048001448",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-1.2316731048001448",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'-'",
                "a.shape": "(10000,)",
                "a": "0       0.119631\n1       1.444957\n2      -1.212408\n3       1.555816\n4       0.229536\n          ...   \n9995   -0.863474\n9996    0.656991\n9997   -0.760815\n9998    0.167814\n9999    0.038096\nName: B, Length: 10000, dtype: float64",
                "b": "0.11963062073689662",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.11963062073689662",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'-'",
                "a.shape": "(10000,)",
                "a": "0       0.091445\n1       0.848504\n2       0.371640\n3      -1.359481\n4       0.452869\n          ...   \n9995    0.378597\n9996   -1.199490\n9997    2.034095\n9998    1.969442\n9999   -1.800928\nName: C, Length: 10000, dtype: float64",
                "b": "0.0914450054290737",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.0914450054290737",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'-'",
                "a.shape": "(10000,)",
                "a": "0      -0.151206\n1      -0.998737\n2      -0.181065\n3      -1.421259\n4       1.835550\n          ...   \n9995    0.286962\n9996    1.010393\n9997    0.724847\n9998    0.536394\n9999   -1.192393\nName: D, Length: 10000, dtype: float64",
                "b": "-0.15120555785840994",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-0.15120555785840994",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'*'",
                "a.shape": "(10000,)",
                "a": "0      -1.231673\n1       1.835840\n2      -0.660322\n3      -0.496448\n4      -0.966505\n          ...   \n9995    1.077255\n9996    0.142158\n9997   -0.402862\n9998   -0.139746\n9999   -1.113026\nName: A, Length: 10000, dtype: float64",
                "b": "-1.2316731048001448",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-1.2316731048001448",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'*'",
                "a.shape": "(10000,)",
                "a": "0       0.119631\n1       1.444957\n2      -1.212408\n3       1.555816\n4       0.229536\n          ...   \n9995   -0.863474\n9996    0.656991\n9997   -0.760815\n9998    0.167814\n9999    0.038096\nName: B, Length: 10000, dtype: float64",
                "b": "0.11963062073689662",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.11963062073689662",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'*'",
                "a.shape": "(10000,)",
                "a": "0       0.091445\n1       0.848504\n2       0.371640\n3      -1.359481\n4       0.452869\n          ...   \n9995    0.378597\n9996   -1.199490\n9997    2.034095\n9998    1.969442\n9999   -1.800928\nName: C, Length: 10000, dtype: float64",
                "b": "0.0914450054290737",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.0914450054290737",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'*'",
                "a.shape": "(10000,)",
                "a": "0      -0.151206\n1      -0.998737\n2      -0.181065\n3      -1.421259\n4       1.835550\n          ...   \n9995    0.286962\n9996    1.010393\n9997    0.724847\n9998    0.536394\n9999   -1.192393\nName: D, Length: 10000, dtype: float64",
                "b": "-0.15120555785840994",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-0.15120555785840994",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0      -1.231673\n1       1.835840\n2      -0.660322\n3      -0.496448\n4      -0.966505\n          ...   \n9995    1.077255\n9996    0.142158\n9997   -0.402862\n9998   -0.139746\n9999   -1.113026\nName: A, Length: 10000, dtype: float64",
                "b": "-1.2316731048001448",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([-1.2316731 ,  1.83583962, -0.66032248, ..., -0.40286152,\n       -0.13974616, -1.11302614])",
                "b": "-1.2316731048001448",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0       0.119631\n1       1.444957\n2      -1.212408\n3       1.555816\n4       0.229536\n          ...   \n9995   -0.863474\n9996    0.656991\n9997   -0.760815\n9998    0.167814\n9999    0.038096\nName: B, Length: 10000, dtype: float64",
                "b": "0.11963062073689662",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([ 0.11963062,  1.44495733, -1.21240779, ..., -0.76081457,\n        0.16781393,  0.0380963 ])",
                "b": "0.11963062073689662",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0       0.091445\n1       0.848504\n2       0.371640\n3      -1.359481\n4       0.452869\n          ...   \n9995    0.378597\n9996   -1.199490\n9997    2.034095\n9998    1.969442\n9999   -1.800928\nName: C, Length: 10000, dtype: float64",
                "b": "0.0914450054290737",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([ 0.09144501,  0.84850386,  0.37164026, ...,  2.03409467,\n        1.96944232, -1.80092772])",
                "b": "0.0914450054290737",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "0      -0.151206\n1      -0.998737\n2      -0.181065\n3      -1.421259\n4       1.835550\n          ...   \n9995    0.286962\n9996    1.010393\n9997    0.724847\n9998    0.536394\n9999   -1.192393\nName: D, Length: 10000, dtype: float64",
                "b": "-0.15120555785840994",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "a.shape": "(10000,)",
                "a": "array([-0.15120556, -0.99873698, -0.18106548, ...,  0.7248467 ,\n        0.53639359, -1.19239286])",
                "b": "-0.15120555785840994",
                "dtype_check": "'evaluate'"
            },
            {}
        ],
        [
            {
                "op_str": "'/'",
                "a.shape": "(10000,)",
                "a": "0      -1.231673\n1       1.835840\n2      -0.660322\n3      -0.496448\n4      -0.966505\n          ...   \n9995    1.077255\n9996    0.142158\n9997   -0.402862\n9998   -0.139746\n9999   -1.113026\nName: A, Length: 10000, dtype: float64",
                "b": "-1.2316731048001448",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-1.2316731048001448",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'/'",
                "a.shape": "(10000,)",
                "a": "0       0.119631\n1       1.444957\n2      -1.212408\n3       1.555816\n4       0.229536\n          ...   \n9995   -0.863474\n9996    0.656991\n9997   -0.760815\n9998    0.167814\n9999    0.038096\nName: B, Length: 10000, dtype: float64",
                "b": "0.11963062073689662",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.11963062073689662",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'/'",
                "a.shape": "(10000,)",
                "a": "0       0.091445\n1       0.848504\n2       0.371640\n3      -1.359481\n4       0.452869\n          ...   \n9995    0.378597\n9996   -1.199490\n9997    2.034095\n9998    1.969442\n9999   -1.800928\nName: C, Length: 10000, dtype: float64",
                "b": "0.0914450054290737",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "0.0914450054290737",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ],
        [
            {
                "op_str": "'/'",
                "a.shape": "(10000,)",
                "a": "0      -0.151206\n1      -0.998737\n2      -0.181065\n3      -1.421259\n4       1.835550\n          ...   \n9995    0.286962\n9996    1.010393\n9997    0.724847\n9998    0.536394\n9999   -1.192393\nName: D, Length: 10000, dtype: float64",
                "b": "-0.15120555785840994",
                "dtype_check": "'evaluate'"
            },
            {
                "dtypes": "{'float64'}",
                "o": "-0.15120555785840994",
                "o.ndim": "0",
                "o.dtype": "dtype('float64')"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "a.shape": "tuple",
                "a": "DataFrame",
                "b": "Series",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}