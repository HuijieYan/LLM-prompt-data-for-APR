{
    "pandas": [
        {
            "bugID": 98,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 271,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def __new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> \"Index\":\n\n    from pandas import RangeIndex, PeriodIndex, DatetimeIndex, TimedeltaIndex\n    from pandas.core.arrays import Categorical\n    from pandas.core.arrays.categorical import is_categorical_dtype\n    from pandas.core.dtypes.base import is_period_dtype, is_datetime64_any_dtype, \\\n        is_timedelta64_dtype, is_extension_array_dtype\n    from pandas.core.dtypes.common import is_object_dtype, is_bool_dtype, \\\n        is_signed_integer_dtype, is_unsigned_integer_dtype, is_float_dtype, \\\n        is_list_like, is_scalar\n    import numpy as np\n    from pandas import CategoricalIndex\n    from pandas import RangeIndex, PeriodIndex, DatetimeIndex, TimedeltaIndex\n    from pandas.core.arrays import Categorical\n    from pandas.core.arrays.categorical import is_categorical_dtype\n    from pandas.core.dtypes.base import is_period_dtype, is_datetime64_any_dtype, \\\n        is_timedelta64_dtype, is_extension_array_dtype\n    from pandas.core.dtypes.common import is_object_dtype, is_bool_dtype, \\\n        is_signed_integer_dtype, is_unsigned_integer_dtype, is_float_dtype, \\\n        is_list_like, is_scalar\n    import numpy as np\n    \n    name = maybe_extract_name(name, data, cls)\n    \n    if isinstance(data, Categorical):\n        # ensure users don't accidentally put a PandasArray in an index.\n        data = data.to_numpy()\n    \n    # range\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, dtype=dtype, name=name)\n    \n    # categorical\n    elif is_categorical_dtype(data) or is_categorical_dtype(dtype):\n        from pandas import CategoricalIndex\n        return CategoricalIndex(data, dtype=dtype, copy=copy, name=name, **kwargs)\n    \n    # interval\n    elif (is_period_dtype(data) or is_period_dtype(dtype)) and not is_object_dtype(dtype):\n        closed = kwargs.get(\"closed\", None)\n        return PeriodIndex(data, dtype=dtype, name=name, copy=copy, closed=closed)\n    \n    elif is_datetime64_any_dtype(data) or is_datetime64_any_dtype(dtype) or \"tz\" in kwargs:\n        if is_object_dtype(dtype):\n            # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n            #  will raise in the where `data` is already tz-aware.  So\n            #  we leave it out of this step and cast to object-dtype after\n            #  the DatetimeIndex construction.\n            # Note we can pass copy=False because the .astype below\n            #  will always make a copy\n            return DatetimeIndex(data, copy=False, name=name, **kwargs).astype(object)\n        else:\n            return DatetimeIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n    \n    elif is_timedelta64_dtype(data) or is_timedelta64_dtype(dtype):\n        if is_object_dtype(dtype):\n            # Note we can pass copy=False because the .astype below\n            #  will always make a copy\n            return TimedeltaIndex(data, copy=False, name=name, **kwargs).astype(object)\n        else:\n            return TimedeltaIndex(data, copy=copy, name=name, dtype=dtype, **kwargs)\n    \n    # extension dtype\n    elif is_extension_array_dtype(data) or is_extension_array_dtype(dtype):\n        if not (dtype is None or is_object_dtype(dtype)):\n            # coerce to the provided dtype\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n        else:\n            data = np.asarray(data, dtype=object)\n    \n        # coerce to the object dtype\n        data = data.astype(object)\n        return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n    \n    elif is_list_like(data):\n        result = _construct_index(data, dtype=dtype, copy=copy, name=name, tupleize_cols=tupleize_cols, **kwargs)\n        return result\n    else:\n        if is_scalar(data):\n            Msg = \"data\" if data is None else \"data argument\"\n            raise ValueError(f\"Input passed to {cls} is not string or list-like\")"
        }
    ]
}