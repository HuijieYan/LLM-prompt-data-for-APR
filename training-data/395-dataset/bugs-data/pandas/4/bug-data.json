{
    "pandas:4": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_4/pandas/core/indexes/base.py": {
            "buggy_functions": [
                {
                    "function_name": "_join_multi",
                    "function_code": "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n\n    # figure out join names\n    self_names = set(com.not_none(*self.names))\n    other_names = set(com.not_none(*other.names))\n    overlap = self_names & other_names\n\n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n\n    if self_is_mi and other_is_mi:\n\n        # Drop the non-matching levels from left and right respectively\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n\n        # if only the order differs\n        if not len(ldrop_names + rdrop_names):\n            self_jnlevels = self\n            other_jnlevels = other.reorder_levels(self.names)\n        else:\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n\n        # Join left and right\n        # Join on same leveled multi-index frames is supported\n        join_idx, lidx, ridx = self_jnlevels.join(\n            other_jnlevels, how, return_indexers=True\n        )\n\n        # Restore the dropped levels\n        # Returned index level order is\n        # common levels, ldrop_names, rdrop_names\n        dropped_names = ldrop_names + rdrop_names\n\n        levels, codes, names = _restore_dropped_levels_multijoin(\n            self, other, dropped_names, join_idx, lidx, ridx\n        )\n\n        # Re-create the multi-index\n        multi_join_idx = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n\n        multi_join_idx = multi_join_idx.remove_unused_levels()\n\n        return multi_join_idx, lidx, ridx\n\n    jl = list(overlap)[0]\n\n    # Case where only one index is multi\n    # make the indices into mi's that match\n    flip_order = False\n    if self_is_mi:\n        self, other = other, self\n        flip_order = True\n        # flip if join method is right or left\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n    level = other.names.index(jl)\n    result = self._join_level(\n        other, level, how=how, return_indexers=return_indexers\n    )\n\n    if flip_order:\n        if isinstance(result, tuple):\n            return result[0], result[2], result[1]\n    return result\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 3479,
                    "variables": {
                        "self_names": [
                            3498,
                            3484,
                            3486
                        ],
                        "set": [
                            3484,
                            3485
                        ],
                        "com.not_none": [
                            3484,
                            3485
                        ],
                        "com": [
                            3484,
                            3485
                        ],
                        "self.names": [
                            3504,
                            3484
                        ],
                        "self": [
                            3521,
                            3492,
                            3503,
                            3504,
                            3506,
                            3539,
                            3545,
                            3484
                        ],
                        "other_names": [
                            3499,
                            3485,
                            3486
                        ],
                        "other.names": [
                            3544,
                            3485
                        ],
                        "other": [
                            3521,
                            3493,
                            3504,
                            3507,
                            3539,
                            3544,
                            3546,
                            3485
                        ],
                        "overlap": [
                            3489,
                            3498,
                            3499,
                            3533,
                            3486
                        ],
                        "ValueError": [
                            3490
                        ],
                        "self_is_mi": [
                            3538,
                            3492,
                            3495
                        ],
                        "isinstance": [
                            3492,
                            3493,
                            3550
                        ],
                        "ABCMultiIndex": [
                            3492,
                            3493
                        ],
                        "other_is_mi": [
                            3493,
                            3495
                        ],
                        "ldrop_names": [
                            3506,
                            3498,
                            3518,
                            3502
                        ],
                        "list": [
                            3498,
                            3499,
                            3533
                        ],
                        "rdrop_names": [
                            3499,
                            3518,
                            3507,
                            3502
                        ],
                        "len": [
                            3502
                        ],
                        "self_jnlevels": [
                            3511,
                            3506,
                            3503
                        ],
                        "other_jnlevels": [
                            3504,
                            3507,
                            3512
                        ],
                        "other.reorder_levels": [
                            3504
                        ],
                        "self.droplevel": [
                            3506
                        ],
                        "other.droplevel": [
                            3507
                        ],
                        "join_idx": [
                            3521,
                            3511
                        ],
                        "lidx": [
                            3521,
                            3531,
                            3511
                        ],
                        "ridx": [
                            3521,
                            3531,
                            3511
                        ],
                        "self_jnlevels.join": [
                            3511
                        ],
                        "how": [
                            3512,
                            3546,
                            3542
                        ],
                        "dropped_names": [
                            3521,
                            3518
                        ],
                        "levels": [
                            3520,
                            3526
                        ],
                        "codes": [
                            3520,
                            3526
                        ],
                        "names": [
                            3520,
                            3526
                        ],
                        "_restore_dropped_levels_multijoin": [
                            3520
                        ],
                        "multi_join_idx": [
                            3529,
                            3531,
                            3525
                        ],
                        "MultiIndex": [
                            3525
                        ],
                        "multi_join_idx.remove_unused_levels": [
                            3529
                        ],
                        "jl": [
                            3544,
                            3533
                        ],
                        "flip_order": [
                            3537,
                            3540,
                            3549
                        ],
                        "get": [
                            3542
                        ],
                        "level": [
                            3544,
                            3546
                        ],
                        "other.names.index": [
                            3544
                        ],
                        "result": [
                            3552,
                            3545,
                            3550,
                            3551
                        ],
                        "self._join_level": [
                            3545
                        ],
                        "return_indexers": [
                            3546
                        ],
                        "tuple": [
                            3550
                        ]
                    },
                    "filtered_variables": {
                        "self_names": [
                            3498,
                            3484,
                            3486
                        ],
                        "com.not_none": [
                            3484,
                            3485
                        ],
                        "com": [
                            3484,
                            3485
                        ],
                        "self.names": [
                            3504,
                            3484
                        ],
                        "self": [
                            3521,
                            3492,
                            3503,
                            3504,
                            3506,
                            3539,
                            3545,
                            3484
                        ],
                        "other_names": [
                            3499,
                            3485,
                            3486
                        ],
                        "other.names": [
                            3544,
                            3485
                        ],
                        "other": [
                            3521,
                            3493,
                            3504,
                            3507,
                            3539,
                            3544,
                            3546,
                            3485
                        ],
                        "overlap": [
                            3489,
                            3498,
                            3499,
                            3533,
                            3486
                        ],
                        "self_is_mi": [
                            3538,
                            3492,
                            3495
                        ],
                        "ABCMultiIndex": [
                            3492,
                            3493
                        ],
                        "other_is_mi": [
                            3493,
                            3495
                        ],
                        "ldrop_names": [
                            3506,
                            3498,
                            3518,
                            3502
                        ],
                        "rdrop_names": [
                            3499,
                            3518,
                            3507,
                            3502
                        ],
                        "self_jnlevels": [
                            3511,
                            3506,
                            3503
                        ],
                        "other_jnlevels": [
                            3504,
                            3507,
                            3512
                        ],
                        "other.reorder_levels": [
                            3504
                        ],
                        "self.droplevel": [
                            3506
                        ],
                        "other.droplevel": [
                            3507
                        ],
                        "join_idx": [
                            3521,
                            3511
                        ],
                        "lidx": [
                            3521,
                            3531,
                            3511
                        ],
                        "ridx": [
                            3521,
                            3531,
                            3511
                        ],
                        "self_jnlevels.join": [
                            3511
                        ],
                        "how": [
                            3512,
                            3546,
                            3542
                        ],
                        "dropped_names": [
                            3521,
                            3518
                        ],
                        "levels": [
                            3520,
                            3526
                        ],
                        "codes": [
                            3520,
                            3526
                        ],
                        "names": [
                            3520,
                            3526
                        ],
                        "_restore_dropped_levels_multijoin": [
                            3520
                        ],
                        "multi_join_idx": [
                            3529,
                            3531,
                            3525
                        ],
                        "MultiIndex": [
                            3525
                        ],
                        "multi_join_idx.remove_unused_levels": [
                            3529
                        ],
                        "jl": [
                            3544,
                            3533
                        ],
                        "flip_order": [
                            3537,
                            3540,
                            3549
                        ],
                        "get": [
                            3542
                        ],
                        "level": [
                            3544,
                            3546
                        ],
                        "other.names.index": [
                            3544
                        ],
                        "result": [
                            3552,
                            3545,
                            3550,
                            3551
                        ],
                        "self._join_level": [
                            3545
                        ],
                        "return_indexers": [
                            3546
                        ]
                    },
                    "diff_line_number": 3531,
                    "class_data": {
                        "signature": "class Index(IndexOpsMixin, PandasObject)",
                        "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: object)\n    If dtype is None, we find the dtype that best fits the data.\n    If an actual dtype is provided, we coerce to that dtype if it's safe.\n    Otherwise, an error will be raised.\ncopy : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex : Index of datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nPeriodIndex : Index of Period data.\nInt64Index : A special case of :class:`Index` with purely integer labels.\nUInt64Index : A special case of :class:`Index` with purely unsigned integer labels.\nFloat64Index : A special case of :class:`Index` with purely float labels.\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nInt64Index([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')",
                        "constructor_docstring": null,
                        "functions": [
                            "def _left_indexer_unique(self, left, right):\n    return libjoin.left_join_indexer_unique(left, right)",
                            "def _left_indexer(self, left, right):\n    return libjoin.left_join_indexer(left, right)",
                            "def _inner_indexer(self, left, right):\n    return libjoin.inner_join_indexer(left, right)",
                            "def _outer_indexer(self, left, right):\n    return libjoin.outer_join_indexer(left, right)",
                            "def __new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index':\n    from pandas.core.indexes.range import RangeIndex\n    name = maybe_extract_name(name, data, cls)\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n    if 'tz' in kwargs:\n        tz = kwargs.pop('tz')\n        validate_tz_from_dtype(dtype, tz)\n        dtype = tz_to_dtype(tz)\n    if isinstance(data, ABCPandasArray):\n        data = data.to_numpy()\n    data_dtype = getattr(data, 'dtype', None)\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, dtype=dtype, name=name)\n    elif is_categorical_dtype(data_dtype) or is_categorical_dtype(dtype):\n        from pandas.core.indexes.category import CategoricalIndex\n        return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n    elif is_interval_dtype(data_dtype) or is_interval_dtype(dtype):\n        from pandas.core.indexes.interval import IntervalIndex\n        return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n    elif is_datetime64_any_dtype(data_dtype) or is_datetime64_any_dtype(dtype):\n        from pandas import DatetimeIndex\n        return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n    elif is_timedelta64_dtype(data_dtype) or is_timedelta64_dtype(dtype):\n        from pandas import TimedeltaIndex\n        return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n    elif is_period_dtype(data_dtype) or is_period_dtype(dtype):\n        from pandas import PeriodIndex\n        return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n    elif is_extension_array_dtype(data_dtype) or is_extension_array_dtype(dtype):\n        if not (dtype is None or is_object_dtype(dtype)):\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n        else:\n            data = np.asarray(data, dtype=object)\n        data = data.astype(object)\n        return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n    elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n        from pandas.core.indexes.numeric import Float64Index, Int64Index, UInt64Index\n        if dtype is not None:\n            data = _maybe_cast_with_dtype(data, dtype, copy)\n            dtype = data.dtype\n        if is_signed_integer_dtype(data.dtype):\n            return Int64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_unsigned_integer_dtype(data.dtype):\n            return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_float_dtype(data.dtype):\n            return Float64Index(data, copy=copy, dtype=dtype, name=name)\n        elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n            subarr = data.astype('object')\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n        if copy:\n            subarr = subarr.copy()\n        if dtype is None:\n            new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n            if new_dtype is not None:\n                return cls(new_data, dtype=new_dtype, copy=False, name=name, **kwargs)\n        if kwargs:\n            raise TypeError(f'Unexpected keyword arguments {repr(set(kwargs))}')\n        if subarr.ndim > 1:\n            raise ValueError('Index data must be 1-dimensional')\n        return cls._simple_new(subarr, name)\n    elif data is None or is_scalar(data):\n        raise cls._scalar_data_error(data)\n    elif hasattr(data, '__array__'):\n        return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n    else:\n        if tupleize_cols and is_list_like(data):\n            if is_iterator(data):\n                data = list(data)\n            if data and all((isinstance(e, tuple) for e in data)):\n                from pandas.core.indexes.multi import MultiIndex\n                return MultiIndex.from_tuples(data, names=name or kwargs.get('names'))\n        subarr = com.asarray_tuplesafe(data, dtype=object)\n        return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
                            "@property\ndef asi8(self):\n    \"\"\"\n    Integer representation of the values.\n\n    Returns\n    -------\n    ndarray\n        An ndarray with int64 dtype.\n    \"\"\"\n    return None",
                            "@classmethod\ndef _simple_new(cls, values, name: Label=None):\n    \"\"\"\n    We require that we have a dtype compat for the values. If we are passed\n    a non-dtype compat, then coerce using the constructor.\n\n    Must be careful not to recurse.\n    \"\"\"\n    assert isinstance(values, np.ndarray), type(values)\n    result = object.__new__(cls)\n    result._data = values\n    result._index_data = values\n    result._name = name\n    result._cache = {}\n    return result._reset_identity()",
                            "@cache_readonly\ndef _constructor(self):\n    return type(self)",
                            "def _get_attributes_dict(self):\n    \"\"\"\n    Return an attributes dict for my class.\n    \"\"\"\n    return {k: getattr(self, k, None) for k in self._attributes}",
                            "def _shallow_copy(self, values=None, name: Label=no_default):\n    \"\"\"\n    Create a new Index with the same class as the caller, don't copy the\n    data, use the same object attributes with passed in attributes taking\n    precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    name : Label, defaults to self.name\n    \"\"\"\n    name = self.name if name is no_default else name\n    cache = self._cache.copy() if values is None else {}\n    if values is None:\n        values = self._values\n    result = self._simple_new(values, name=name)\n    result._cache = cache\n    return result",
                            "def is_(self, other) -> bool:\n    \"\"\"\n    More flexible, faster check like ``is`` but that works through views.\n\n    Note: this is *not* the same as ``Index.identical()``, which checks\n    that metadata is also the same.\n\n    Parameters\n    ----------\n    other : object\n        other object to compare against.\n\n    Returns\n    -------\n    True if both have same underlying data, False otherwise : bool\n    \"\"\"\n    return self._id is getattr(other, '_id', Ellipsis) and self._id is not None",
                            "def _reset_identity(self):\n    \"\"\"\n    Initializes or resets ``_id`` attribute with new object.\n    \"\"\"\n    self._id = _Identity()\n    return self",
                            "def _cleanup(self):\n    self._engine.clear_mapping()",
                            "@cache_readonly\ndef _engine(self):\n    target_values = self._get_engine_target()\n    return self._engine_type(lambda: target_values, len(self))",
                            "def __len__(self) -> int:\n    \"\"\"\n    Return the length of the Index.\n    \"\"\"\n    return len(self._data)",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The array interface, return my values.\n    \"\"\"\n    return np.asarray(self._data, dtype=dtype)",
                            "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc.\n    \"\"\"\n    result = lib.item_from_zerodim(result)\n    if is_bool_dtype(result) or lib.is_scalar(result) or np.ndim(result) > 1:\n        return result\n    attrs = self._get_attributes_dict()\n    return Index(result, **attrs)",
                            "@cache_readonly\ndef dtype(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                            "def ravel(self, order='C'):\n    \"\"\"\n    Return an ndarray of the flattened values of the underlying data.\n\n    Returns\n    -------\n    numpy.ndarray\n        Flattened array.\n\n    See Also\n    --------\n    numpy.ndarray.ravel\n    \"\"\"\n    values = self._get_engine_target()\n    return values.ravel(order=order)",
                            "def view(self, cls=None):\n    if cls is not None and (not hasattr(cls, '_typ')):\n        result = self._data.view(cls)\n    else:\n        result = self._shallow_copy()\n    if isinstance(result, Index):\n        result._id = self._id\n    return result",
                            "def astype(self, dtype, copy=True):\n    \"\"\"\n    Create an Index with values cast to dtypes. The class of a new Index\n    is determined by dtype. When conversion is impossible, a ValueError\n    exception is raised.\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n        Note that any signed integer `dtype` is treated as ``'int64'``,\n        and any unsigned integer `dtype` is treated as ``'uint64'``,\n        regardless of the size.\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and internal requirements on dtype are\n        satisfied, the original data is used to create a new Index\n        or the original Index is returned.\n\n    Returns\n    -------\n    Index\n        Index with values cast to specified dtype.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n    if is_dtype_equal(self.dtype, dtype):\n        return self.copy() if copy else self\n    elif is_categorical_dtype(dtype):\n        from pandas.core.indexes.category import CategoricalIndex\n        return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n    elif is_extension_array_dtype(dtype):\n        return Index(np.asarray(self), name=self.name, dtype=dtype, copy=copy)\n    try:\n        casted = self.values.astype(dtype, copy=copy)\n    except (TypeError, ValueError) as err:\n        raise TypeError(f'Cannot cast {type(self).__name__} to dtype {dtype}') from err\n    return Index(casted, name=self.name, dtype=dtype)",
                            "@Appender(_index_shared_docs['take'] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    if kwargs:\n        nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    if self._can_hold_na:\n        taken = self._assert_take_fillable(self._values, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=self._na_value)\n    else:\n        if allow_fill and fill_value is not None:\n            cls_name = type(self).__name__\n            raise ValueError(f'Unable to fill values because {cls_name} cannot contain NA')\n        taken = self._values.take(indices)\n    return self._shallow_copy(taken)",
                            "def _assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan):\n    \"\"\"\n    Internal method to handle NA filling of take.\n    \"\"\"\n    indices = ensure_platform_int(indices)\n    if allow_fill and fill_value is not None:\n        if (indices < -1).any():\n            raise ValueError('When allow_fill=True and fill_value is not None, all indices must be >= -1')\n        taken = algos.take(values, indices, allow_fill=allow_fill, fill_value=na_value)\n    else:\n        taken = values.take(indices)\n    return taken",
                            "@Appender(_index_shared_docs['repeat'] % _index_doc_kwargs)\ndef repeat(self, repeats, axis=None):\n    repeats = ensure_platform_int(repeats)\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    return self._shallow_copy(self._values.repeat(repeats))",
                            "def copy(self, name=None, deep=False, dtype=None, names=None):\n    \"\"\"\n    Make a copy of this object.\n\n    Name and dtype sets those attributes on the new object.\n\n    Parameters\n    ----------\n    name : Label, optional\n        Set name for new object.\n    deep : bool, default False\n    dtype : numpy dtype or pandas type, optional\n        Set dtype for new object.\n    names : list-like, optional\n        Kept for compatibility with MultiIndex. Should not be used.\n\n    Returns\n    -------\n    Index\n        Index refer to new object which is a copy of this object.\n\n    Notes\n    -----\n    In most cases, there should be no functional difference from using\n    ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n    \"\"\"\n    if deep:\n        new_index = self._shallow_copy(self._data.copy())\n    else:\n        new_index = self._shallow_copy()\n    names = self._validate_names(name=name, names=names, deep=deep)\n    new_index = new_index.set_names(names)\n    if dtype:\n        new_index = new_index.astype(dtype)\n    return new_index",
                            "def __copy__(self, **kwargs):\n    return self.copy(**kwargs)",
                            "def __deepcopy__(self, memo=None):\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                            "def __repr__(self) -> str_t:\n    \"\"\"\n    Return a string representation for this object.\n    \"\"\"\n    klass_name = type(self).__name__\n    data = self._format_data()\n    attrs = self._format_attrs()\n    space = self._format_space()\n    attrs_str = [f'{k}={v}' for k, v in attrs]\n    prepr = f',{space}'.join(attrs_str)\n    if data is None:\n        data = ''\n    res = f'{klass_name}({data}{prepr})'\n    return res",
                            "def _format_space(self) -> str_t:\n    return ' '",
                            "@property\ndef _formatter_func(self):\n    \"\"\"\n    Return the formatter function.\n    \"\"\"\n    return default_pprint",
                            "def _format_data(self, name=None) -> str_t:\n    \"\"\"\n    Return the formatted data as a unicode string.\n    \"\"\"\n    is_justify = True\n    if self.inferred_type == 'string':\n        is_justify = False\n    elif self.inferred_type == 'categorical':\n        if is_object_dtype(self.categories):\n            is_justify = False\n    return format_object_summary(self, self._formatter_func, is_justify=is_justify, name=name)",
                            "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    return format_object_attrs(self)",
                            "def _mpl_repr(self):\n    return self.values",
                            "def format(self, name: bool=False, formatter=None, **kwargs):\n    \"\"\"\n    Render a string representation of the Index.\n    \"\"\"\n    header = []\n    if name:\n        header.append(pprint_thing(self.name, escape_chars=('\\t', '\\r', '\\n')) if self.name is not None else '')\n    if formatter is not None:\n        return header + list(self.map(formatter))\n    return self._format_with_header(header, **kwargs)",
                            "def _format_with_header(self, header, na_rep='NaN', **kwargs):\n    values = self.values\n    from pandas.io.formats.format import format_array\n    if is_categorical_dtype(values.dtype):\n        values = np.array(values)\n    elif is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, safe=1)\n    if is_object_dtype(values.dtype):\n        result = [pprint_thing(x, escape_chars=('\\t', '\\r', '\\n')) for x in values]\n        mask = isna(values)\n        if mask.any():\n            result = np.array(result)\n            result[mask] = na_rep\n            result = result.tolist()\n    else:\n        result = _trim_front(format_array(values, None, justify='left'))\n    return header + result",
                            "def to_native_types(self, slicer=None, **kwargs):\n    \"\"\"\n    Format specified values of `self` and return them.\n\n    Parameters\n    ----------\n    slicer : int, array-like\n        An indexer into `self` that specifies which values\n        are used in the formatting process.\n    kwargs : dict\n        Options for specifying how the values should be formatted.\n        These options include the following:\n\n        1) na_rep : str\n            The value that serves as a placeholder for NULL values\n        2) quoting : bool or None\n            Whether or not there are quoted values in `self`\n        3) date_format : str\n            The format used to represent date-like values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Formatted values.\n    \"\"\"\n    values = self\n    if slicer is not None:\n        values = values[slicer]\n    return values._format_native_types(**kwargs)",
                            "def _format_native_types(self, na_rep='', quoting=None, **kwargs):\n    \"\"\"\n    Actually format specific types of the index.\n    \"\"\"\n    mask = isna(self)\n    if not self.is_object() and (not quoting):\n        values = np.asarray(self).astype(str)\n    else:\n        values = np.array(self, dtype=object, copy=True)\n    values[mask] = na_rep\n    return values",
                            "def _summary(self, name=None) -> str_t:\n    \"\"\"\n    Return a summarized representation.\n\n    Parameters\n    ----------\n    name : str\n        name to use in the summary representation\n\n    Returns\n    -------\n    String with a summarized representation of the index\n    \"\"\"\n    if len(self) > 0:\n        head = self[0]\n        if hasattr(head, 'format') and (not isinstance(head, str)):\n            head = head.format()\n        tail = self[-1]\n        if hasattr(tail, 'format') and (not isinstance(tail, str)):\n            tail = tail.format()\n        index_summary = f', {head} to {tail}'\n    else:\n        index_summary = ''\n    if name is None:\n        name = type(self).__name__\n    return f'{name}: {len(self)} entries{index_summary}'",
                            "def to_flat_index(self):\n    \"\"\"\n    Identity method.\n\n    .. versionadded:: 0.24.0\n\n    This is implemented for compatibility with subclass implementations\n    when chaining.\n\n    Returns\n    -------\n    pd.Index\n        Caller.\n\n    See Also\n    --------\n    MultiIndex.to_flat_index : Subclass implementation.\n    \"\"\"\n    return self",
                            "def to_series(self, index=None, name=None):\n    \"\"\"\n    Create a Series with both index and values equal to the index keys.\n\n    Useful with map for returning an indexer based on an index.\n\n    Parameters\n    ----------\n    index : Index, optional\n        Index of resulting Series. If None, defaults to original index.\n    name : str, optional\n        Dame of resulting Series. If None, defaults to name of original\n        index.\n\n    Returns\n    -------\n    Series\n        The dtype will be based on the type of the Index values.\n    \"\"\"\n    from pandas import Series\n    if index is None:\n        index = self._shallow_copy()\n    if name is None:\n        name = self.name\n    return Series(self.values.copy(), index=index, name=name)",
                            "def to_frame(self, index: bool=True, name=None):\n    \"\"\"\n    Create a DataFrame with a column containing the Index.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    index : bool, default True\n        Set the index of the returned DataFrame as the original Index.\n\n    name : object, default None\n        The passed name should substitute for the index name (if it has\n        one).\n\n    Returns\n    -------\n    DataFrame\n        DataFrame containing the original Index data.\n\n    See Also\n    --------\n    Index.to_series : Convert an Index to a Series.\n    Series.to_frame : Convert Series to DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n    >>> idx.to_frame()\n           animal\n    animal\n    Ant       Ant\n    Bear     Bear\n    Cow       Cow\n\n    By default, the original Index is reused. To enforce a new Index:\n\n    >>> idx.to_frame(index=False)\n        animal\n    0   Ant\n    1  Bear\n    2   Cow\n\n    To override the name of the resulting column, specify `name`:\n\n    >>> idx.to_frame(index=False, name='zoo')\n        zoo\n    0   Ant\n    1  Bear\n    2   Cow\n    \"\"\"\n    from pandas import DataFrame\n    if name is None:\n        name = self.name or 0\n    result = DataFrame({name: self._values.copy()})\n    if index:\n        result.index = self\n    return result",
                            "@property\ndef name(self):\n    \"\"\"\n    Return Index or MultiIndex name.\n    \"\"\"\n    return self._name",
                            "@name.setter\ndef name(self, value):\n    if self._no_setting_name:\n        raise RuntimeError(\"Cannot set name on a level of a MultiIndex. Use 'MultiIndex.set_names' instead.\")\n    maybe_extract_name(value, None, type(self))\n    self._name = value",
                            "def _validate_names(self, name=None, names=None, deep: bool=False):\n    \"\"\"\n    Handles the quirks of having a singular 'name' parameter for general\n    Index and plural 'names' parameter for MultiIndex.\n    \"\"\"\n    from copy import deepcopy\n    if names is not None and name is not None:\n        raise TypeError('Can only provide one of `names` and `name`')\n    elif names is None and name is None:\n        return deepcopy(self.names) if deep else self.names\n    elif names is not None:\n        if not is_list_like(names):\n            raise TypeError('Must pass list-like as `names`.')\n        return names\n    else:\n        if not is_list_like(name):\n            return [name]\n        return name",
                            "def _get_names(self):\n    return FrozenList((self.name,))",
                            "def _set_names(self, values, level=None):\n    \"\"\"\n    Set new names on index. Each name has to be a hashable type.\n\n    Parameters\n    ----------\n    values : str or sequence\n        name(s) to set\n    level : int, level name, or sequence of int/level names (default None)\n        If the index is a MultiIndex (hierarchical), level(s) to set (None\n        for all levels).  Otherwise level must be None\n\n    Raises\n    ------\n    TypeError if each name is not hashable.\n    \"\"\"\n    if not is_list_like(values):\n        raise ValueError('Names must be a list-like')\n    if len(values) != 1:\n        raise ValueError(f'Length of new names must be 1, got {len(values)}')\n    for name in values:\n        if not is_hashable(name):\n            raise TypeError(f'{type(self).__name__}.name must be a hashable type')\n    self._name = values[0]",
                            "def set_names(self, names, level=None, inplace: bool=False):\n    \"\"\"\n    Set Index or MultiIndex name.\n\n    Able to set new names partially and by level.\n\n    Parameters\n    ----------\n    names : label or list of label\n        Name(s) to set.\n    level : int, label or list of int or label, optional\n        If the index is a MultiIndex, level(s) to set (None for all\n        levels). Otherwise level must be None.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.rename : Able to set new names without level.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n    >>> idx.set_names('quarter')\n    Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               )\n    >>> idx.set_names(['kind', 'year'], inplace=True)\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.set_names('species', level=0)\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    \"\"\"\n    if level is not None and (not isinstance(self, ABCMultiIndex)):\n        raise ValueError('Level must be None for non-MultiIndex')\n    if level is not None and (not is_list_like(level)) and is_list_like(names):\n        raise TypeError('Names must be a string when a single level is provided.')\n    if not is_list_like(names) and level is None and (self.nlevels > 1):\n        raise TypeError('Must pass list-like as `names`.')\n    if not is_list_like(names):\n        names = [names]\n    if level is not None and (not is_list_like(level)):\n        level = [level]\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._set_names(names, level=level)\n    if not inplace:\n        return idx",
                            "def rename(self, name, inplace=False):\n    \"\"\"\n    Alter Index or MultiIndex name.\n\n    Able to set new names without level. Defaults to returning new index.\n    Length of names must match number of levels in MultiIndex.\n\n    Parameters\n    ----------\n    name : label or list of labels\n        Name(s) to set.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.set_names : Able to set new names partially and by level.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n    >>> idx.rename('grade')\n    Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]],\n    ...                                   names=['kind', 'year'])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.rename(['species', 'year'])\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    >>> idx.rename('species')\n    Traceback (most recent call last):\n    TypeError: Must pass list-like as `names`.\n    \"\"\"\n    return self.set_names([name], inplace=inplace)",
                            "@property\ndef nlevels(self) -> int:\n    \"\"\"\n    Number of levels.\n    \"\"\"\n    return 1",
                            "def _sort_levels_monotonic(self):\n    \"\"\"\n    Compat with MultiIndex.\n    \"\"\"\n    return self",
                            "def _validate_index_level(self, level):\n    \"\"\"\n    Validate index level.\n\n    For single-level Index getting level number is a no-op, but some\n    verification must be done like in MultiIndex.\n\n    \"\"\"\n    if isinstance(level, int):\n        if level < 0 and level != -1:\n            raise IndexError(f'Too many levels: Index has only 1 level, {level} is not a valid level number')\n        elif level > 0:\n            raise IndexError(f'Too many levels: Index has only 1 level, not {level + 1}')\n    elif level != self.name:\n        raise KeyError(f'Requested level ({level}) does not match index name ({self.name})')",
                            "def _get_level_number(self, level) -> int:\n    self._validate_index_level(level)\n    return 0",
                            "def sortlevel(self, level=None, ascending=True, sort_remaining=None):\n    \"\"\"\n    For internal compatibility with with the Index API.\n\n    Sort the Index. This is for compat with MultiIndex\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        False to sort in descending order\n\n    level, sort_remaining are compat parameters\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    return self.sort_values(return_indexer=True, ascending=ascending)",
                            "def _get_level_values(self, level):\n    \"\"\"\n    Return an Index of values for requested level.\n\n    This is primarily useful to get an individual level of values from a\n    MultiIndex, but is provided on Index as well for compatibility.\n\n    Parameters\n    ----------\n    level : int or str\n        It is either the integer position or the name of the level.\n\n    Returns\n    -------\n    Index\n        Calling object, as there is only one level in the Index.\n\n    See Also\n    --------\n    MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n    Notes\n    -----\n    For Index, level should be 0, since there are no multiple levels.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abc'))\n    >>> idx\n    Index(['a', 'b', 'c'], dtype='object')\n\n    Get level values by supplying `level` as integer:\n\n    >>> idx.get_level_values(0)\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n    self._validate_index_level(level)\n    return self",
                            "def droplevel(self, level=0):\n    \"\"\"\n    Return index with requested level(s) removed.\n\n    If resulting index has only 1 level left, the result will be\n    of Index type, not MultiIndex.\n\n    .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n    Parameters\n    ----------\n    level : int, str, or list-like, default 0\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or indexes of levels.\n\n    Returns\n    -------\n    Index or MultiIndex\n    \"\"\"\n    if not isinstance(level, (tuple, list)):\n        level = [level]\n    levnums = sorted((self._get_level_number(lev) for lev in level))[::-1]\n    if len(level) == 0:\n        return self\n    if len(level) >= self.nlevels:\n        raise ValueError(f'Cannot remove {len(level)} levels from an index with {self.nlevels} levels: at least one level must be left.')\n    new_levels = list(self.levels)\n    new_codes = list(self.codes)\n    new_names = list(self.names)\n    for i in levnums:\n        new_levels.pop(i)\n        new_codes.pop(i)\n        new_names.pop(i)\n    if len(new_levels) == 1:\n        mask = new_codes[0] == -1\n        result = new_levels[0].take(new_codes[0])\n        if mask.any():\n            result = result.putmask(mask, np.nan)\n        result._name = new_names[0]\n        return result\n    else:\n        from pandas.core.indexes.multi import MultiIndex\n        return MultiIndex(levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False)",
                            "def _get_grouper_for_level(self, mapper, level=None):\n    \"\"\"\n    Get index grouper corresponding to an index level\n\n    Parameters\n    ----------\n    mapper: Group mapping function or None\n        Function mapping index values to groups\n    level : int or None\n        Index level\n\n    Returns\n    -------\n    grouper : Index\n        Index of values to group on.\n    labels : ndarray of int or None\n        Array of locations in level_index.\n    uniques : Index or None\n        Index of unique values for level.\n    \"\"\"\n    assert level is None or level == 0\n    if mapper is None:\n        grouper = self\n    else:\n        grouper = self.map(mapper)\n    return (grouper, None, None)",
                            "@property\ndef is_monotonic(self) -> bool:\n    \"\"\"\n    Alias for is_monotonic_increasing.\n    \"\"\"\n    return self.is_monotonic_increasing",
                            "@property\ndef is_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic increasing (only equal or\n    increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3]).is_monotonic_increasing\n    True\n    >>> Index([1, 2, 2]).is_monotonic_increasing\n    True\n    >>> Index([1, 3, 2]).is_monotonic_increasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_increasing",
                            "@property\ndef is_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic decreasing (only equal or\n    decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1]).is_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2]).is_monotonic_decreasing\n    True\n    >>> Index([3, 1, 2]).is_monotonic_decreasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_decreasing",
                            "@property\ndef _is_strictly_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic increasing\n    (only increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3])._is_strictly_monotonic_increasing\n    True\n    >>> Index([1, 2, 2])._is_strictly_monotonic_increasing\n    False\n    >>> Index([1, 3, 2])._is_strictly_monotonic_increasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_increasing",
                            "@property\ndef _is_strictly_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic decreasing\n    (only decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1])._is_strictly_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2])._is_strictly_monotonic_decreasing\n    False\n    >>> Index([3, 1, 2])._is_strictly_monotonic_decreasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_decreasing",
                            "@cache_readonly\ndef is_unique(self) -> bool:\n    \"\"\"\n    Return if the index has unique values.\n    \"\"\"\n    return self._engine.is_unique",
                            "@property\ndef has_duplicates(self) -> bool:\n    \"\"\"\n    Check if the Index has duplicate values.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index has duplicate values.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 5, 7, 7])\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([1, 5, 7])\n    >>> idx.has_duplicates\n    False\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([\"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    False\n    \"\"\"\n    return not self.is_unique",
                            "def is_boolean(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of booleans.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of booleans.\n\n    See Also\n    --------\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([True, False, True])\n    >>> idx.is_boolean()\n    True\n\n    >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n    >>> idx.is_boolean()\n    False\n\n    >>> idx = pd.Index([True, False, \"True\"])\n    >>> idx.is_boolean()\n    False\n    \"\"\"\n    return self.inferred_type in ['boolean']",
                            "def is_integer(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of integers.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of integers.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_integer()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_integer()\n    False\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_integer()\n    False\n    \"\"\"\n    return self.inferred_type in ['integer']",
                            "def is_floating(self) -> bool:\n    \"\"\"\n    Check if the Index is a floating type.\n\n    The Index may consist of only floats, NaNs, or a mix of floats,\n    integers, or NaNs.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of only consists of floats, NaNs, or\n        a mix of floats, integers, or NaNs.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_floating()\n    False\n    \"\"\"\n    return self.inferred_type in ['floating', 'mixed-integer-float', 'integer-na']",
                            "def is_numeric(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of numeric data.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of numeric data.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n    >>> idx.is_numeric()\n    False\n    \"\"\"\n    return self.inferred_type in ['integer', 'floating']",
                            "def is_object(self) -> bool:\n    \"\"\"\n    Check if the Index is of the object dtype.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index is of the object dtype.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.is_object()\n    False\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_object()\n    False\n    \"\"\"\n    return is_object_dtype(self.dtype)",
                            "def is_categorical(self) -> bool:\n    \"\"\"\n    Check if the Index holds categorical data.\n\n    Returns\n    -------\n    bool\n        True if the Index is categorical.\n\n    See Also\n    --------\n    CategoricalIndex : Index for categorical data.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.is_categorical()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_categorical()\n    False\n\n    >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n    >>> s\n    0        Peter\n    1       Victor\n    2    Elisabeth\n    3          Mar\n    dtype: object\n    >>> s.index.is_categorical()\n    False\n    \"\"\"\n    return self.inferred_type in ['categorical']",
                            "def is_interval(self) -> bool:\n    \"\"\"\n    Check if the Index holds Interval objects.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds Interval objects.\n\n    See Also\n    --------\n    IntervalIndex : Index for Interval objects.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([pd.Interval(left=0, right=5),\n    ...                 pd.Interval(left=5, right=10)])\n    >>> idx.is_interval()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_interval()\n    False\n    \"\"\"\n    return self.inferred_type in ['interval']",
                            "def is_mixed(self) -> bool:\n    \"\"\"\n    Check if the Index holds data with mixed data types.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds data with mixed data types.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', np.nan, 'b'])\n    >>> idx.is_mixed()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 5.0])\n    >>> idx.is_mixed()\n    False\n    \"\"\"\n    warnings.warn('Index.is_mixed is deprecated and will be removed in a future version. Check index.inferred_type directly instead.', FutureWarning, stacklevel=2)\n    return self.inferred_type in ['mixed']",
                            "def holds_integer(self) -> bool:\n    \"\"\"\n    Whether the type is an integer type.\n    \"\"\"\n    return self.inferred_type in ['integer', 'mixed-integer']",
                            "@cache_readonly\ndef inferred_type(self) -> str_t:\n    \"\"\"\n    Return a string of the type inferred from the values.\n    \"\"\"\n    return lib.infer_dtype(self._values, skipna=False)",
                            "@cache_readonly\ndef is_all_dates(self) -> bool:\n    \"\"\"\n    Whether or not the index values only consist of dates.\n    \"\"\"\n    return is_datetime_array(ensure_object(self._values))",
                            "def __reduce__(self):\n    d = dict(data=self._data)\n    d.update(self._get_attributes_dict())\n    return (_new_Index, (type(self), d), None)",
                            "@cache_readonly\ndef _isnan(self):\n    \"\"\"\n    Return if each value is NaN.\n    \"\"\"\n    if self._can_hold_na:\n        return isna(self)\n    else:\n        values = np.empty(len(self), dtype=np.bool_)\n        values.fill(False)\n        return values",
                            "@cache_readonly\ndef _nan_idxs(self):\n    if self._can_hold_na:\n        return self._isnan.nonzero()[0]\n    else:\n        return np.array([], dtype=np.int64)",
                            "@cache_readonly\ndef hasnans(self) -> bool:\n    \"\"\"\n    Return if I have any nans; enables various perf speedups.\n    \"\"\"\n    if self._can_hold_na:\n        return bool(self._isnan.any())\n    else:\n        return False",
                            "def isna(self):\n    \"\"\"\n    Detect missing values.\n\n    Return a boolean same-sized object indicating if the values are NA.\n    NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n    mapped to ``True`` values.\n    Everything else get mapped to ``False`` values. Characters such as\n    empty strings `''` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n    Returns\n    -------\n    numpy.ndarray\n        A boolean array of whether my values are NA.\n\n    See Also\n    --------\n    Index.notna : Boolean inverse of isna.\n    Index.dropna : Omit entries with missing values.\n    isna : Top-level isna.\n    Series.isna : Detect missing values in Series object.\n\n    Examples\n    --------\n    Show which entries in a pandas.Index are NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.isna()\n    array([False, False,  True])\n\n    Empty strings are not considered NA values. None is considered an NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.isna()\n    array([False, False, False,  True])\n\n    For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n    >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n    ...                         pd.Timestamp(''), None, pd.NaT])\n    >>> idx\n    DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> idx.isna()\n    array([False,  True,  True,  True])\n    \"\"\"\n    return self._isnan",
                            "def notna(self):\n    \"\"\"\n    Detect existing (non-missing) values.\n\n    Return a boolean same-sized object indicating if the values are not NA.\n    Non-missing values get mapped to ``True``. Characters such as empty\n    strings ``''`` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n    NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n    values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Boolean array to indicate which entries are not NA.\n\n    See Also\n    --------\n    Index.notnull : Alias of notna.\n    Index.isna: Inverse of notna.\n    notna : Top-level notna.\n\n    Examples\n    --------\n    Show which entries in an Index are not NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.notna()\n    array([ True,  True, False])\n\n    Empty strings are not considered NA values. None is considered a NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.notna()\n    array([ True,  True,  True, False])\n    \"\"\"\n    return ~self.isna()",
                            "def fillna(self, value=None, downcast=None):\n    \"\"\"\n    Fill NA/NaN values with the specified value.\n\n    Parameters\n    ----------\n    value : scalar\n        Scalar value to use to fill holes (e.g. 0).\n        This value cannot be a list-likes.\n    downcast : dict, default is None\n        A dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    Index\n\n    See Also\n    --------\n    DataFrame.fillna : Fill NaN values of a DataFrame.\n    Series.fillna : Fill NaN Values of a Series.\n    \"\"\"\n    self._assert_can_do_op(value)\n    if self.hasnans:\n        result = self.putmask(self._isnan, value)\n        if downcast is None:\n            return Index(result, name=self.name)\n    return self._shallow_copy()",
                            "def dropna(self, how='any'):\n    \"\"\"\n    Return Index without NA/NaN values.\n\n    Parameters\n    ----------\n    how : {'any', 'all'}, default 'any'\n        If the Index is a MultiIndex, drop the value when any or all levels\n        are NaN.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if how not in ('any', 'all'):\n        raise ValueError(f'invalid how option: {how}')\n    if self.hasnans:\n        return self._shallow_copy(self._values[~self._isnan])\n    return self._shallow_copy()",
                            "def unique(self, level=None):\n    \"\"\"\n    Return unique values in the index. Uniques are returned in order\n    of appearance, this does NOT sort.\n\n    Parameters\n    ----------\n    level : int or str, optional, default None\n        Only return values from specified level (for MultiIndex).\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    Index without duplicates\n\n    See Also\n    --------\n    unique\n    Series.unique\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    result = super().unique()\n    return self._shallow_copy(result)",
                            "def drop_duplicates(self, keep='first'):\n    \"\"\"\n    Return Index with duplicate values removed.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', ``False``}, default 'first'\n        - 'first' : Drop duplicates except for the first occurrence.\n        - 'last' : Drop duplicates except for the last occurrence.\n        - ``False`` : Drop all duplicates.\n\n    Returns\n    -------\n    deduplicated : Index\n\n    See Also\n    --------\n    Series.drop_duplicates : Equivalent method on Series.\n    DataFrame.drop_duplicates : Equivalent method on DataFrame.\n    Index.duplicated : Related method on Index, indicating duplicate\n        Index values.\n\n    Examples\n    --------\n    Generate an pandas.Index with duplicate values.\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\n    The `keep` parameter controls  which duplicate values are removed.\n    The value 'first' keeps the first occurrence for each\n    set of duplicated entries. The default value of keep is 'first'.\n\n    >>> idx.drop_duplicates(keep='first')\n    Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\n    The value 'last' keeps the last occurrence for each set of duplicated\n    entries.\n\n    >>> idx.drop_duplicates(keep='last')\n    Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\n    The value ``False`` discards all sets of duplicated entries.\n\n    >>> idx.drop_duplicates(keep=False)\n    Index(['cow', 'beetle', 'hippo'], dtype='object')\n    \"\"\"\n    return super().drop_duplicates(keep=keep)",
                            "def duplicated(self, keep='first'):\n    \"\"\"\n    Indicate duplicate index values.\n\n    Duplicated values are indicated as ``True`` values in the resulting\n    array. Either all duplicates, all except the first, or all except the\n    last occurrence of duplicates can be indicated.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', False}, default 'first'\n        The value or values in a set of duplicates to mark as missing.\n\n        - 'first' : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - 'last' : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - ``False`` : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.duplicated : Equivalent method on pandas.Series.\n    DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n    Index.drop_duplicates : Remove duplicate values from Index.\n\n    Examples\n    --------\n    By default, for each set of duplicated values, the first occurrence is\n    set to False and all others to True:\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n    >>> idx.duplicated()\n    array([False, False,  True, False,  True])\n\n    which is equivalent to\n\n    >>> idx.duplicated(keep='first')\n    array([False, False,  True, False,  True])\n\n    By using 'last', the last occurrence of each set of duplicated values\n    is set on False and all others on True:\n\n    >>> idx.duplicated(keep='last')\n    array([ True, False,  True, False, False])\n\n    By setting keep on ``False``, all duplicates are True:\n\n    >>> idx.duplicated(keep=False)\n    array([ True, False,  True, False,  True])\n    \"\"\"\n    return super().duplicated(keep=keep)",
                            "def _get_unique_index(self, dropna: bool=False):\n    \"\"\"\n    Returns an index containing unique values.\n\n    Parameters\n    ----------\n    dropna : bool, default False\n        If True, NaN values are dropped.\n\n    Returns\n    -------\n    uniques : index\n    \"\"\"\n    if self.is_unique and (not dropna):\n        return self\n    if not self.is_unique:\n        values = self.unique()\n        if not isinstance(self, ABCMultiIndex):\n            values = values._data\n    else:\n        values = self._values\n    if dropna:\n        try:\n            if self.hasnans:\n                values = values[~isna(values)]\n        except NotImplementedError:\n            pass\n    return self._shallow_copy(values)",
                            "def __add__(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame)):\n        return NotImplemented\n    from pandas import Series\n    return Index(Series(self) + other)",
                            "def __radd__(self, other):\n    from pandas import Series\n    return Index(other + Series(self))",
                            "def __iadd__(self, other):\n    return self + other",
                            "def __sub__(self, other):\n    return Index(np.array(self) - other)",
                            "def __rsub__(self, other):\n    from pandas import Series\n    return Index(other - Series(self))",
                            "def __and__(self, other):\n    return self.intersection(other)",
                            "def __or__(self, other):\n    return self.union(other)",
                            "def __xor__(self, other):\n    return self.symmetric_difference(other)",
                            "def __nonzero__(self):\n    raise ValueError(f'The truth value of a {type(self).__name__} is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().')",
                            "def _get_reconciled_name_object(self, other):\n    \"\"\"\n    If the result of a set operation will be self,\n    return self, unless the name changes, in which\n    case make a shallow copy of self.\n    \"\"\"\n    name = get_op_result_name(self, other)\n    if self.name != name:\n        return self._shallow_copy(name=name)\n    return self",
                            "def _union_incompatible_dtypes(self, other, sort):\n    \"\"\"\n    Casts this and other index to object dtype to allow the formation\n    of a union between incompatible types.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    this = self.astype(object, copy=False)\n    other = Index(other).astype(object, copy=False)\n    return Index.union(this, other, sort=sort).astype(object, copy=False)",
                            "def _is_compatible_with_other(self, other) -> bool:\n    \"\"\"\n    Check whether this and the other dtype are compatible with each other.\n    Meaning a union can be formed between them without needing to be cast\n    to dtype object.\n\n    Parameters\n    ----------\n    other : Index or array-like\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
                            "def _validate_sort_keyword(self, sort):\n    if sort not in [None, False]:\n        raise ValueError(f\"The 'sort' keyword only takes the values of None or False; {sort} was passed.\")",
                            "def union(self, other, sort=None):\n    \"\"\"\n    Form the union of two Index objects.\n\n    If the Index objects are incompatible, both Index objects will be\n    cast to dtype('object') first.\n\n        .. versionchanged:: 0.25.0\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : bool or None, default None\n        Whether to sort the resulting Index.\n\n        * None : Sort the result, except when\n\n          1. `self` and `other` are equal.\n          2. `self` or `other` has length 0.\n          3. Some values in `self` or `other` cannot be compared.\n             A RuntimeWarning is issued in this case.\n\n        * False : do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    union : Index\n\n    Examples\n    --------\n    Union matching dtypes\n\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.union(idx2)\n    Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n    Union mismatched dtypes\n\n    >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n    >>> idx2 = pd.Index([1, 2, 3, 4])\n    >>> idx1.union(idx2)\n    Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    if not self._is_compatible_with_other(other):\n        return self._union_incompatible_dtypes(other, sort=sort)\n    return self._union(other, sort=sort)",
                            "def _union(self, other, sort):\n    \"\"\"\n    Specific union logic should go here. In subclasses, union behavior\n    should be overwritten here rather than in `self.union`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if not len(other) or self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not len(self):\n        return other._get_reconciled_name_object(self)\n    lvals = self._values\n    rvals = other._values\n    if sort is None and self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._outer_indexer(lvals, rvals)[0]\n        except TypeError:\n            result = list(lvals)\n            value_set = set(lvals)\n            result.extend([x for x in rvals if x not in value_set])\n            result = Index(result)._values\n    else:\n        if self.is_unique:\n            indexer = self.get_indexer(other)\n            indexer = (indexer == -1).nonzero()[0]\n        else:\n            indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n        if len(indexer) > 0:\n            other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n            result = concat_compat((lvals, other_diff))\n        else:\n            result = lvals\n        if sort is None:\n            try:\n                result = algos.safe_sort(result)\n            except TypeError as err:\n                warnings.warn(f'{err}, sort order is undefined for incomparable objects', RuntimeWarning, stacklevel=3)\n    return self._wrap_setop_result(other, result)",
                            "def _wrap_setop_result(self, other, result):\n    name = get_op_result_name(self, other)\n    return self._shallow_copy(result, name=name)",
                            "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two Index objects.\n\n    This returns a new Index with elements common to the index and `other`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default from ``True`` to ``False``, to match\n           the behaviour of 0.23.4 and earlier.\n\n    Returns\n    -------\n    intersection : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.intersection(idx2)\n    Int64Index([3, 4], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other = ensure_index(other)\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this.intersection(other, sort=sort)\n    lvals = self._values\n    rvals = other._values\n    if self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._inner_indexer(lvals, rvals)[0]\n        except TypeError:\n            pass\n        else:\n            return self._wrap_setop_result(other, result)\n    try:\n        indexer = Index(rvals).get_indexer(lvals)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n    except (InvalidIndexError, IncompatibleFrequency):\n        indexer = algos.unique1d(Index(rvals).get_indexer_non_unique(lvals)[0])\n        indexer = indexer[indexer != -1]\n    taken = other.take(indexer)\n    res_name = get_op_result_name(self, other)\n    if sort is None:\n        taken = algos.safe_sort(taken.values)\n        return self._shallow_copy(taken, name=res_name)\n    taken.name = res_name\n    return taken",
                            "def difference(self, other, sort=None):\n    \"\"\"\n    Return a new Index with elements from the index that are not in\n    `other`.\n\n    This is the set difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    difference : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([2, 1, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.difference(idx2)\n    Int64Index([1, 2], dtype='int64')\n    >>> idx1.difference(idx2, sort=False)\n    Int64Index([2, 1], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    if self.equals(other):\n        return self._shallow_copy(self._data[:0])\n    other, result_name = self._convert_can_do_setop(other)\n    this = self._get_unique_index()\n    indexer = this.get_indexer(other)\n    indexer = indexer.take((indexer != -1).nonzero()[0])\n    label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n    the_diff = this.values.take(label_diff)\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n    return this._shallow_copy(the_diff, name=result_name)",
                            "def symmetric_difference(self, other, result_name=None, sort=None):\n    \"\"\"\n    Compute the symmetric difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    result_name : str\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    symmetric_difference : Index\n\n    Notes\n    -----\n    ``symmetric_difference`` contains elements that appear in either\n    ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n    ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\n    dropped.\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([2, 3, 4, 5])\n    >>> idx1.symmetric_difference(idx2)\n    Int64Index([1, 5], dtype='int64')\n\n    You can also use the ``^`` operator:\n\n    >>> idx1 ^ idx2\n    Int64Index([1, 5], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_name_update = self._convert_can_do_setop(other)\n    if result_name is None:\n        result_name = result_name_update\n    this = self._get_unique_index()\n    other = other._get_unique_index()\n    indexer = this.get_indexer(other)\n    common_indexer = indexer.take((indexer != -1).nonzero()[0])\n    left_indexer = np.setdiff1d(np.arange(this.size), common_indexer, assume_unique=True)\n    left_diff = this._values.take(left_indexer)\n    right_indexer = (indexer == -1).nonzero()[0]\n    right_diff = other._values.take(right_indexer)\n    the_diff = concat_compat([left_diff, right_diff])\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n    return Index(the_diff, dtype=self.dtype, name=result_name)",
                            "def _assert_can_do_setop(self, other):\n    if not is_list_like(other):\n        raise TypeError('Input must be Index or array-like')\n    return True",
                            "def _convert_can_do_setop(self, other):\n    if not isinstance(other, Index):\n        other = Index(other, name=self.name)\n        result_name = self.name\n    else:\n        result_name = get_op_result_name(self, other)\n    return (other, result_name)",
                            "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location, slice or boolean mask for requested label.\n\n    Parameters\n    ----------\n    key : label\n    method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n        * default: exact matches only.\n        * pad / ffill: find the PREVIOUS index value if no exact match.\n        * backfill / bfill: use NEXT index value if no exact match\n        * nearest: use the NEAREST index value if no exact match. Tied\n          distances are broken by preferring the larger index value.\n    tolerance : int or float, optional\n        Maximum distance from index value for inexact matches. The value of\n        the index at the matching location most satisfy the equation\n        ``abs(index[loc] - key) <= tolerance``.\n\n    Returns\n    -------\n    loc : int if unique index, slice if monotonic index, else mask\n\n    Examples\n    --------\n    >>> unique_index = pd.Index(list('abc'))\n    >>> unique_index.get_loc('b')\n    1\n\n    >>> monotonic_index = pd.Index(list('abbc'))\n    >>> monotonic_index.get_loc('b')\n    slice(1, 3, None)\n\n    >>> non_monotonic_index = pd.Index(list('abcb'))\n    >>> non_monotonic_index.get_loc('b')\n    array([False,  True, False,  True])\n    \"\"\"\n    if method is None:\n        if tolerance is not None:\n            raise ValueError('tolerance argument only valid if using pad, backfill or nearest lookups')\n        casted_key = self._maybe_cast_indexer(key)\n        try:\n            return self._engine.get_loc(casted_key)\n        except KeyError as err:\n            raise KeyError(key) from err\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n    indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n    if indexer.ndim > 1 or indexer.size > 1:\n        raise TypeError('get_loc requires scalar valued input')\n    loc = indexer.item()\n    if loc == -1:\n        raise KeyError(key)\n    return loc",
                            "@Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray:\n    method = missing.clean_reindex_fill_method(method)\n    target = ensure_index(target)\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n    if target.is_boolean() and self.is_numeric():\n        return ensure_platform_int(np.repeat(-1, target.size))\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer(ptarget, method=method, limit=limit, tolerance=tolerance)\n    if not is_dtype_equal(self.dtype, target.dtype):\n        this = self.astype(object)\n        target = target.astype(object)\n        return this.get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    if not self.is_unique:\n        raise InvalidIndexError('Reindexing only valid with uniquely valued Index objects')\n    if method == 'pad' or method == 'backfill':\n        indexer = self._get_fill_indexer(target, method, limit, tolerance)\n    elif method == 'nearest':\n        indexer = self._get_nearest_indexer(target, limit, tolerance)\n    else:\n        if tolerance is not None:\n            raise ValueError('tolerance argument only valid if doing pad, backfill or nearest reindexing')\n        if limit is not None:\n            raise ValueError('limit argument only valid if doing pad, backfill or nearest reindexing')\n        indexer = self._engine.get_indexer(target._get_engine_target())\n    return ensure_platform_int(indexer)",
                            "def _convert_tolerance(self, tolerance, target):\n    tolerance = np.asarray(tolerance)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError('list-like tolerance size must match target index size')\n    return tolerance",
                            "def _get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray:\n    target_values = target._get_engine_target()\n    if self.is_monotonic_increasing and target.is_monotonic_increasing:\n        engine_method = self._engine.get_pad_indexer if method == 'pad' else self._engine.get_backfill_indexer\n        indexer = engine_method(target_values, limit)\n    else:\n        indexer = self._get_fill_indexer_searchsorted(target, method, limit)\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target_values, indexer, tolerance)\n    return indexer",
                            "def _get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray:\n    \"\"\"\n    Fallback pad/backfill get_indexer that works for monotonic decreasing\n    indexes and non-monotonic targets.\n    \"\"\"\n    if limit is not None:\n        raise ValueError(f'limit argument for {repr(method)} method only well-defined if index and target are monotonic')\n    side = 'left' if method == 'pad' else 'right'\n    indexer = self.get_indexer(target)\n    nonexact = indexer == -1\n    indexer[nonexact] = self._searchsorted_monotonic(target[nonexact], side)\n    if side == 'left':\n        indexer[nonexact] -= 1\n    else:\n        indexer[indexer == len(self)] = -1\n    return indexer",
                            "def _get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray:\n    \"\"\"\n    Get the indexer for the nearest index labels; requires an index with\n    values that can be subtracted from each other (e.g., not strings or\n    tuples).\n    \"\"\"\n    left_indexer = self.get_indexer(target, 'pad', limit=limit)\n    right_indexer = self.get_indexer(target, 'backfill', limit=limit)\n    target_values = target._values\n    left_distances = np.abs(self._values[left_indexer] - target_values)\n    right_distances = np.abs(self._values[right_indexer] - target_values)\n    op = operator.lt if self.is_monotonic_increasing else operator.le\n    indexer = np.where(op(left_distances, right_distances) | (right_indexer == -1), left_indexer, right_indexer)\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target_values, indexer, tolerance)\n    return indexer",
                            "def _filter_indexer_tolerance(self, target: Union['Index', np.ndarray, ExtensionArray], indexer: np.ndarray, tolerance) -> np.ndarray:\n    distance = abs(self._values[indexer] - target)\n    indexer = np.where(distance <= tolerance, indexer, -1)\n    return indexer",
                            "def _get_partial_string_timestamp_match_key(self, key):\n    \"\"\"\n    Translate any partial string timestamp matches in key, returning the\n    new key.\n\n    Only relevant for MultiIndex.\n    \"\"\"\n    return key",
                            "def _validate_positional_slice(self, key: slice):\n    \"\"\"\n    For positional indexing, a slice must have either int or None\n    for each of start, stop, and step.\n    \"\"\"\n    self._validate_indexer('positional', key.start, 'iloc')\n    self._validate_indexer('positional', key.stop, 'iloc')\n    self._validate_indexer('positional', key.step, 'iloc')",
                            "def _convert_slice_indexer(self, key: slice, kind: str_t):\n    \"\"\"\n    Convert a slice indexer.\n\n    By definition, these are labels unless 'iloc' is passed in.\n    Floats are not allowed as the start, step, or stop of the slice.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in ['loc', 'getitem'], kind\n    start, stop, step = (key.start, key.stop, key.step)\n\n    def is_int(v):\n        return v is None or is_integer(v)\n    is_index_slice = is_int(start) and is_int(stop) and is_int(step)\n    is_positional = is_index_slice and (not (self.is_integer() or self.is_categorical()))\n    if kind == 'getitem':\n        '\\n            called from the getitem slicers, validate that we are in fact\\n            integers\\n            '\n        if self.is_integer() or is_index_slice:\n            self._validate_indexer('slice', key.start, 'getitem')\n            self._validate_indexer('slice', key.stop, 'getitem')\n            self._validate_indexer('slice', key.step, 'getitem')\n            return key\n    if is_positional:\n        try:\n            if start is not None:\n                self.get_loc(start)\n            if stop is not None:\n                self.get_loc(stop)\n            is_positional = False\n        except KeyError:\n            pass\n    if com.is_null_slice(key):\n        indexer = key\n    elif is_positional:\n        if kind == 'loc':\n            warnings.warn('Slicing a positional slice with .loc is not supported, and will raise TypeError in a future version.  Use .loc with labels or .iloc with positions instead.', FutureWarning, stacklevel=6)\n        indexer = key\n    else:\n        indexer = self.slice_indexer(start, stop, step, kind=kind)\n    return indexer",
                            "def _convert_listlike_indexer(self, keyarr):\n    \"\"\"\n    Parameters\n    ----------\n    keyarr : list-like\n        Indexer to convert.\n\n    Returns\n    -------\n    indexer : numpy.ndarray or None\n        Return an ndarray or None if cannot convert.\n    keyarr : numpy.ndarray\n        Return tuple-safe keys.\n    \"\"\"\n    if isinstance(keyarr, Index):\n        keyarr = self._convert_index_indexer(keyarr)\n    else:\n        keyarr = self._convert_arr_indexer(keyarr)\n    indexer = self._convert_list_indexer(keyarr)\n    return (indexer, keyarr)",
                            "def _convert_arr_indexer(self, keyarr):\n    \"\"\"\n    Convert an array-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : array-like\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : array-like\n    \"\"\"\n    keyarr = com.asarray_tuplesafe(keyarr)\n    return keyarr",
                            "def _convert_index_indexer(self, keyarr):\n    \"\"\"\n    Convert an Index indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : Index (or sub-class)\n    \"\"\"\n    return keyarr",
                            "def _convert_list_indexer(self, keyarr):\n    \"\"\"\n    Convert a list-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n    kind : iloc, loc, optional\n\n    Returns\n    -------\n    positional indexer or None\n    \"\"\"\n    return None",
                            "def _invalid_indexer(self, form: str_t, key):\n    \"\"\"\n    Consistent invalid indexer message.\n    \"\"\"\n    raise TypeError(f'cannot do {form} indexing on {type(self).__name__} with these indexers [{key}] of type {type(key).__name__}')",
                            "def _can_reindex(self, indexer):\n    \"\"\"\n    Check if we are allowing reindexing with this particular indexer.\n\n    Parameters\n    ----------\n    indexer : an integer indexer\n\n    Raises\n    ------\n    ValueError if its a duplicate axis\n    \"\"\"\n    if not self.is_unique and len(indexer):\n        raise ValueError('cannot reindex from a duplicate axis')",
                            "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values\n    as necessary).\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n    \"\"\"\n    preserve_names = not hasattr(target, 'name')\n    target = ensure_has_len(target)\n    if not isinstance(target, Index) and len(target) == 0:\n        if isinstance(self, ABCRangeIndex):\n            values = range(0)\n        else:\n            values = self._data[:0]\n        target = self._simple_new(values, name=self.name)\n    else:\n        target = ensure_index(target)\n    if level is not None:\n        if method is not None:\n            raise TypeError('Fill method not supported if level passed')\n        _, indexer, _ = self._join_level(target, level, how='right', return_indexers=True)\n    elif self.equals(target):\n        indexer = None\n    elif self.is_unique and (not getattr(self, 'is_overlapping', False)):\n        indexer = self.get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    else:\n        if method is not None or limit is not None:\n            raise ValueError('cannot reindex a non-unique index with a method or limit')\n        indexer, missing = self.get_indexer_non_unique(target)\n    if preserve_names and target.nlevels == 1 and (target.name != self.name):\n        target = target.copy()\n        target.name = self.name\n    return (target, indexer)",
                            "def _reindex_non_unique(self, target):\n    \"\"\"\n    Create a new index with target's values (move/add/delete values as\n    necessary) use with non-unique Index and a possibly non-unique target.\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n\n    \"\"\"\n    target = ensure_index(target)\n    indexer, missing = self.get_indexer_non_unique(target)\n    check = indexer != -1\n    new_labels = self.take(indexer[check])\n    new_indexer = None\n    if len(missing):\n        length = np.arange(len(indexer))\n        missing = ensure_platform_int(missing)\n        missing_labels = target.take(missing)\n        missing_indexer = ensure_int64(length[~check])\n        cur_labels = self.take(indexer[check]).values\n        cur_indexer = ensure_int64(length[check])\n        new_labels = np.empty(tuple([len(indexer)]), dtype=object)\n        new_labels[cur_indexer] = cur_labels\n        new_labels[missing_indexer] = missing_labels\n        if target.is_unique:\n            new_indexer = np.arange(len(indexer))\n            new_indexer[cur_indexer] = np.arange(len(cur_labels))\n            new_indexer[missing_indexer] = -1\n        else:\n            indexer[~check] = -1\n            new_indexer = np.arange(len(self.take(indexer)))\n            new_indexer[~check] = -1\n    new_index = Index(new_labels, name=self.name)\n    return (new_index, indexer, new_indexer)",
                            "def join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    \"\"\"\n    Compute join_index and indexers to conform data\n    structures to the new index.\n\n    Parameters\n    ----------\n    other : Index\n    how : {'left', 'right', 'inner', 'outer'}\n    level : int or level name, default None\n    return_indexers : bool, default False\n    sort : bool, default False\n        Sort the join keys lexicographically in the result Index. If False,\n        the order of the join keys depends on the join type (how keyword).\n\n    Returns\n    -------\n    join_index, (left_indexer, right_indexer)\n    \"\"\"\n    other = ensure_index(other)\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n    if level is None and (self_is_mi or other_is_mi):\n        if self.names == other.names:\n            pass\n        else:\n            return self._join_multi(other, how=how, return_indexers=return_indexers)\n    if level is not None and (self_is_mi or other_is_mi):\n        return self._join_level(other, level, how=how, return_indexers=return_indexers)\n    if len(other) == 0 and how in ('left', 'outer'):\n        join_index = self._shallow_copy()\n        if return_indexers:\n            rindexer = np.repeat(-1, len(join_index))\n            return (join_index, None, rindexer)\n        else:\n            return join_index\n    if len(self) == 0 and how in ('right', 'outer'):\n        join_index = other._shallow_copy()\n        if return_indexers:\n            lindexer = np.repeat(-1, len(join_index))\n            return (join_index, lindexer, None)\n        else:\n            return join_index\n    if self._join_precedence < other._join_precedence:\n        how = {'right': 'left', 'left': 'right'}.get(how, how)\n        result = other.join(self, how=how, level=level, return_indexers=return_indexers)\n        if return_indexers:\n            x, y, z = result\n            result = (x, z, y)\n        return result\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this.join(other, how=how, return_indexers=return_indexers)\n    _validate_join_method(how)\n    if not self.is_unique and (not other.is_unique):\n        return self._join_non_unique(other, how=how, return_indexers=return_indexers)\n    elif not self.is_unique or not other.is_unique:\n        if self.is_monotonic and other.is_monotonic:\n            return self._join_monotonic(other, how=how, return_indexers=return_indexers)\n        else:\n            return self._join_non_unique(other, how=how, return_indexers=return_indexers)\n    elif self.is_monotonic and other.is_monotonic:\n        try:\n            return self._join_monotonic(other, how=how, return_indexers=return_indexers)\n        except TypeError:\n            pass\n    if how == 'left':\n        join_index = self\n    elif how == 'right':\n        join_index = other\n    elif how == 'inner':\n        join_index = self.intersection(other, sort=False)\n    elif how == 'outer':\n        join_index = self.union(other)\n    if sort:\n        join_index = join_index.sort_values()\n    if return_indexers:\n        if join_index is self:\n            lindexer = None\n        else:\n            lindexer = self.get_indexer(join_index)\n        if join_index is other:\n            rindexer = None\n        else:\n            rindexer = other.get_indexer(join_index)\n        return (join_index, lindexer, rindexer)\n    else:\n        return join_index",
                            "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    self_names = set(com.not_none(*self.names))\n    other_names = set(com.not_none(*other.names))\n    overlap = self_names & other_names\n    if not overlap:\n        raise ValueError('cannot join with no overlapping index names')\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n    if self_is_mi and other_is_mi:\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n        if not len(ldrop_names + rdrop_names):\n            self_jnlevels = self\n            other_jnlevels = other.reorder_levels(self.names)\n        else:\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n        join_idx, lidx, ridx = self_jnlevels.join(other_jnlevels, how, return_indexers=True)\n        dropped_names = ldrop_names + rdrop_names\n        levels, codes, names = _restore_dropped_levels_multijoin(self, other, dropped_names, join_idx, lidx, ridx)\n        multi_join_idx = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n        multi_join_idx = multi_join_idx.remove_unused_levels()\n        return (multi_join_idx, lidx, ridx)\n    jl = list(overlap)[0]\n    flip_order = False\n    if self_is_mi:\n        self, other = (other, self)\n        flip_order = True\n        how = {'right': 'left', 'left': 'right'}.get(how, how)\n    level = other.names.index(jl)\n    result = self._join_level(other, level, how=how, return_indexers=return_indexers)\n    if flip_order:\n        if isinstance(result, tuple):\n            return (result[0], result[2], result[1])\n    return result",
                            "def _join_non_unique(self, other, how='left', return_indexers=False):\n    from pandas.core.reshape.merge import _get_join_indexers\n    assert self.dtype == other.dtype\n    lvalues = self._get_engine_target()\n    rvalues = other._get_engine_target()\n    left_idx, right_idx = _get_join_indexers([lvalues], [rvalues], how=how, sort=True)\n    left_idx = ensure_platform_int(left_idx)\n    right_idx = ensure_platform_int(right_idx)\n    join_index = np.asarray(lvalues.take(left_idx))\n    mask = left_idx == -1\n    np.putmask(join_index, mask, rvalues.take(right_idx))\n    join_index = self._wrap_joined_index(join_index, other)\n    if return_indexers:\n        return (join_index, left_idx, right_idx)\n    else:\n        return join_index",
                            "def _join_level(self, other, level, how='left', return_indexers=False, keep_order=True):\n    \"\"\"\n    The join method *only* affects the level of the resulting\n    MultiIndex. Otherwise it just exactly aligns the Index data to the\n    labels of the level in the MultiIndex.\n\n    If ```keep_order == True```, the order of the data indexed by the\n    MultiIndex will not be changed; otherwise, it will tie out\n    with `other`.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    def _get_leaf_sorter(labels):\n        \"\"\"\n        Returns sorter for the inner most level while preserving the\n        order of higher levels.\n        \"\"\"\n        if labels[0].size == 0:\n            return np.empty(0, dtype='int64')\n        if len(labels) == 1:\n            lab = ensure_int64(labels[0])\n            sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n            return sorter\n        tic = labels[0][:-1] != labels[0][1:]\n        for lab in labels[1:-1]:\n            tic |= lab[:-1] != lab[1:]\n        starts = np.hstack(([True], tic, [True])).nonzero()[0]\n        lab = ensure_int64(labels[-1])\n        return lib.get_level_sorter(lab, ensure_int64(starts))\n    if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n        raise TypeError('Join on level between two MultiIndex objects is ambiguous')\n    left, right = (self, other)\n    flip_order = not isinstance(self, MultiIndex)\n    if flip_order:\n        left, right = (right, left)\n        how = {'right': 'left', 'left': 'right'}.get(how, how)\n    level = left._get_level_number(level)\n    old_level = left.levels[level]\n    if not right.is_unique:\n        raise NotImplementedError('Index._join_level on non-unique index is not implemented')\n    new_level, left_lev_indexer, right_lev_indexer = old_level.join(right, how=how, return_indexers=True)\n    if left_lev_indexer is None:\n        if keep_order or len(left) == 0:\n            left_indexer = None\n            join_index = left\n        else:\n            left_indexer = _get_leaf_sorter(left.codes[:level + 1])\n            join_index = left[left_indexer]\n    else:\n        left_lev_indexer = ensure_int64(left_lev_indexer)\n        rev_indexer = lib.get_reverse_indexer(left_lev_indexer, len(old_level))\n        new_lev_codes = algos.take_nd(rev_indexer, left.codes[level], allow_fill=False)\n        new_codes = list(left.codes)\n        new_codes[level] = new_lev_codes\n        new_levels = list(left.levels)\n        new_levels[level] = new_level\n        if keep_order:\n            left_indexer = np.arange(len(left), dtype=np.intp)\n            mask = new_lev_codes != -1\n            if not mask.all():\n                new_codes = [lab[mask] for lab in new_codes]\n                left_indexer = left_indexer[mask]\n        elif level == 0:\n            ngroups = 1 + new_lev_codes.max()\n            left_indexer, counts = libalgos.groupsort_indexer(new_lev_codes, ngroups)\n            left_indexer = left_indexer[counts[0]:]\n            new_codes = [lab[left_indexer] for lab in new_codes]\n        else:\n            mask = new_lev_codes != -1\n            mask_all = mask.all()\n            if not mask_all:\n                new_codes = [lab[mask] for lab in new_codes]\n            left_indexer = _get_leaf_sorter(new_codes[:level + 1])\n            new_codes = [lab[left_indexer] for lab in new_codes]\n            if not mask_all:\n                left_indexer = mask.nonzero()[0][left_indexer]\n        join_index = MultiIndex(levels=new_levels, codes=new_codes, names=left.names, verify_integrity=False)\n    if right_lev_indexer is not None:\n        right_indexer = algos.take_nd(right_lev_indexer, join_index.codes[level], allow_fill=False)\n    else:\n        right_indexer = join_index.codes[level]\n    if flip_order:\n        left_indexer, right_indexer = (right_indexer, left_indexer)\n    if return_indexers:\n        left_indexer = None if left_indexer is None else ensure_platform_int(left_indexer)\n        right_indexer = None if right_indexer is None else ensure_platform_int(right_indexer)\n        return (join_index, left_indexer, right_indexer)\n    else:\n        return join_index",
                            "def _join_monotonic(self, other, how='left', return_indexers=False):\n    assert other.dtype == self.dtype\n    if self.equals(other):\n        ret_index = other if how == 'right' else self\n        if return_indexers:\n            return (ret_index, None, None)\n        else:\n            return ret_index\n    sv = self._get_engine_target()\n    ov = other._get_engine_target()\n    if self.is_unique and other.is_unique:\n        if how == 'left':\n            join_index = self\n            lidx = None\n            ridx = self._left_indexer_unique(sv, ov)\n        elif how == 'right':\n            join_index = other\n            lidx = self._left_indexer_unique(ov, sv)\n            ridx = None\n        elif how == 'inner':\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n        elif how == 'outer':\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n    else:\n        if how == 'left':\n            join_index, lidx, ridx = self._left_indexer(sv, ov)\n        elif how == 'right':\n            join_index, ridx, lidx = self._left_indexer(ov, sv)\n        elif how == 'inner':\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n        elif how == 'outer':\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n        join_index = self._wrap_joined_index(join_index, other)\n    if return_indexers:\n        lidx = None if lidx is None else ensure_platform_int(lidx)\n        ridx = None if ridx is None else ensure_platform_int(ridx)\n        return (join_index, lidx, ridx)\n    else:\n        return join_index",
                            "def _wrap_joined_index(self, joined, other):\n    name = get_op_result_name(self, other)\n    return Index(joined, name=name)",
                            "@property\ndef values(self) -> np.ndarray:\n    \"\"\"\n    Return an array representing the data in the Index.\n\n    .. warning::\n\n       We recommend using :attr:`Index.array` or\n       :meth:`Index.to_numpy`, depending on whether you need\n       a reference to the underlying data or a NumPy array.\n\n    Returns\n    -------\n    array: numpy.ndarray or ExtensionArray\n\n    See Also\n    --------\n    Index.array : Reference to the underlying data.\n    Index.to_numpy : A NumPy array representing the underlying data.\n    \"\"\"\n    return self._data.view(np.ndarray)",
                            "@cache_readonly\n@doc(IndexOpsMixin.array)\ndef array(self) -> ExtensionArray:\n    array = self._data\n    if isinstance(array, np.ndarray):\n        from pandas.core.arrays.numpy_ import PandasArray\n        array = PandasArray(array)\n    return array",
                            "@property\ndef _values(self) -> Union[ExtensionArray, np.ndarray]:\n    \"\"\"\n    The best array representation.\n\n    This is an ndarray or ExtensionArray.\n\n    ``_values`` are consistent between``Series`` and ``Index``.\n\n    It may differ from the public '.values' method.\n\n    index             | values          | _values       |\n    ----------------- | --------------- | ------------- |\n    Index             | ndarray         | ndarray       |\n    CategoricalIndex  | Categorical     | Categorical   |\n    DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n    DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n    PeriodIndex       | ndarray[object] | PeriodArray   |\n    IntervalIndex     | IntervalArray   | IntervalArray |\n\n    See Also\n    --------\n    values\n    \"\"\"\n    return self._data",
                            "def _get_engine_target(self) -> np.ndarray:\n    \"\"\"\n    Get the ndarray that we can pass to the IndexEngine constructor.\n    \"\"\"\n    return self._values",
                            "@doc(IndexOpsMixin.memory_usage)\ndef memory_usage(self, deep: bool=False) -> int:\n    result = super().memory_usage(deep=deep)\n    result += self._engine.sizeof(deep=deep)\n    return result",
                            "def where(self, cond, other=None):\n    \"\"\"\n    Replace values where the condition is False.\n\n    The replacement is taken from other.\n\n    Parameters\n    ----------\n    cond : bool array-like with the same length as self\n        Condition to select the values on.\n    other : scalar, or array-like, default None\n        Replacement if the condition is False.\n\n    Returns\n    -------\n    pandas.Index\n        A copy of self with values replaced from other\n        where the condition is False.\n\n    See Also\n    --------\n    Series.where : Same method for Series.\n    DataFrame.where : Same method for DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n    >>> idx\n    Index(['car', 'bike', 'train', 'tractor'], dtype='object')\n    >>> idx.where(idx.isin(['car', 'train']), 'other')\n    Index(['car', 'other', 'train', 'other'], dtype='object')\n    \"\"\"\n    if other is None:\n        other = self._na_value\n    dtype = self.dtype\n    values = self.values\n    if is_bool(other) or is_bool_dtype(other):\n        values = values.astype(object)\n        dtype = None\n    values = np.where(cond, values, other)\n    if self._is_numeric_dtype and np.any(isna(values)):\n        dtype = None\n    return Index(values, dtype=dtype, name=self.name)",
                            "@classmethod\ndef _scalar_data_error(cls, data):\n    return TypeError(f'{cls.__name__}(...) must be called with a collection of some kind, {repr(data)} was passed')",
                            "@classmethod\ndef _string_data_error(cls, data):\n    raise TypeError('String dtype not supported, you may need to explicitly cast to a numeric type')",
                            "def _coerce_scalar_to_index(self, item):\n    \"\"\"\n    We need to coerce a scalar to a compat for our index type.\n\n    Parameters\n    ----------\n    item : scalar item to coerce\n    \"\"\"\n    dtype = self.dtype\n    if self._is_numeric_dtype and isna(item):\n        dtype = None\n    return Index([item], dtype=dtype, **self._get_attributes_dict())",
                            "def _to_safe_for_reshape(self):\n    \"\"\"\n    Convert to object if we are a categorical.\n    \"\"\"\n    return self",
                            "def _convert_for_op(self, value):\n    \"\"\"\n    Convert value to be insertable to ndarray.\n    \"\"\"\n    return value",
                            "def _assert_can_do_op(self, value):\n    \"\"\"\n    Check value is valid for scalar op.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"'value' must be a scalar, passed: {type(value).__name__}\")",
                            "@property\ndef _has_complex_internals(self) -> bool:\n    \"\"\"\n    Indicates if an index is not directly backed by a numpy array\n    \"\"\"\n    return False",
                            "def _is_memory_usage_qualified(self) -> bool:\n    \"\"\"\n    Return a boolean if we need a qualified .info display.\n    \"\"\"\n    return self.is_object()",
                            "def is_type_compatible(self, kind) -> bool:\n    \"\"\"\n    Whether the index type is compatible with the provided type.\n    \"\"\"\n    return kind == self.inferred_type",
                            "def __contains__(self, key: Any) -> bool:\n    \"\"\"\n    Return a boolean indicating whether the provided key is in the index.\n\n    Parameters\n    ----------\n    key : label\n        The key to check if it is present in the index.\n\n    Returns\n    -------\n    bool\n        Whether the key search is in the index.\n\n    Raises\n    ------\n    TypeError\n        If the key is not hashable.\n\n    See Also\n    --------\n    Index.isin : Returns an ndarray of boolean dtype indicating whether the\n        list-like key is in the index.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n\n    >>> 2 in idx\n    True\n    >>> 6 in idx\n    False\n    \"\"\"\n    hash(key)\n    try:\n        return key in self._engine\n    except (OverflowError, TypeError, ValueError):\n        return False",
                            "def __hash__(self):\n    raise TypeError(f'unhashable type: {repr(type(self).__name__)}')",
                            "def __setitem__(self, key, value):\n    raise TypeError('Index does not support mutable operations')",
                            "def __getitem__(self, key):\n    \"\"\"\n    Override numpy.ndarray's __getitem__ method to work as desired.\n\n    This function adds lists and Series as valid boolean indexers\n    (ndarrays only supports ndarray with dtype=bool).\n\n    If resulting ndim != 1, plain ndarray is returned instead of\n    corresponding `Index` subclass.\n\n    \"\"\"\n    getitem = self._data.__getitem__\n    promote = self._shallow_copy\n    if is_scalar(key):\n        key = com.cast_scalar_indexer(key)\n        return getitem(key)\n    if isinstance(key, slice):\n        return promote(getitem(key))\n    if com.is_bool_indexer(key):\n        key = np.asarray(key, dtype=bool)\n    result = getitem(key)\n    if not is_scalar(result):\n        if np.ndim(result) > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return promote(result)\n    else:\n        return result",
                            "def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n    \"\"\"\n    Faster check for ``name in self`` when we know `name` is a Python\n    identifier (e.g. in NDFrame.__getattr__, which hits this to support\n    . key lookup). For indexes that can't hold identifiers (everything\n    but object & categorical) we just return False.\n\n    https://github.com/pandas-dev/pandas/issues/19764\n    \"\"\"\n    if self.is_object() or self.is_categorical():\n        return name in self\n    return False",
                            "def append(self, other):\n    \"\"\"\n    Append a collection of Index options together.\n\n    Parameters\n    ----------\n    other : Index or list/tuple of indices\n\n    Returns\n    -------\n    appended : Index\n    \"\"\"\n    to_concat = [self]\n    if isinstance(other, (list, tuple)):\n        to_concat = to_concat + list(other)\n    else:\n        to_concat.append(other)\n    for obj in to_concat:\n        if not isinstance(obj, Index):\n            raise TypeError('all inputs must be Index')\n    names = {obj.name for obj in to_concat}\n    name = None if len(names) > 1 else self.name\n    return self._concat(to_concat, name)",
                            "def _concat(self, to_concat, name):\n    typs = _concat.get_dtype_kinds(to_concat)\n    if len(typs) == 1:\n        return self._concat_same_dtype(to_concat, name=name)\n    return Index._concat_same_dtype(self, to_concat, name=name)",
                            "def _concat_same_dtype(self, to_concat, name):\n    \"\"\"\n    Concatenate to_concat which has the same class.\n    \"\"\"\n    klasses = (ABCDatetimeIndex, ABCTimedeltaIndex, ABCPeriodIndex, ExtensionArray, ABCIntervalIndex)\n    to_concat = [x.astype(object) if isinstance(x, klasses) else x for x in to_concat]\n    self = to_concat[0]\n    attribs = self._get_attributes_dict()\n    attribs['name'] = name\n    to_concat = [x._values if isinstance(x, Index) else x for x in to_concat]\n    res_values = np.concatenate(to_concat)\n    return Index(res_values, name=name)",
                            "def putmask(self, mask, value):\n    \"\"\"\n    Return a new Index of the values set with the mask.\n\n    Returns\n    -------\n    Index\n\n    See Also\n    --------\n    numpy.ndarray.putmask\n    \"\"\"\n    values = self.values.copy()\n    try:\n        np.putmask(values, mask, self._convert_for_op(value))\n        if is_period_dtype(self.dtype):\n            values = type(self)(values)._data\n        return self._shallow_copy(values)\n    except (ValueError, TypeError) as err:\n        if is_object_dtype(self):\n            raise err\n        return self.astype(object).putmask(mask, value)",
                            "def equals(self, other: Any) -> bool:\n    \"\"\"\n    Determine if two Index object are equal.\n\n    The things that are being compared are:\n\n    * The elements inside the Index object.\n    * The order of the elements inside the Index object.\n\n    Parameters\n    ----------\n    other : Any\n        The other object to compare against.\n\n    Returns\n    -------\n    bool\n        True if \"other\" is an Index and it has the same elements and order\n        as the calling index; False otherwise.\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3])\n    >>> idx1\n    Int64Index([1, 2, 3], dtype='int64')\n    >>> idx1.equals(pd.Index([1, 2, 3]))\n    True\n\n    The elements inside are compared\n\n    >>> idx2 = pd.Index([\"1\", \"2\", \"3\"])\n    >>> idx2\n    Index(['1', '2', '3'], dtype='object')\n\n    >>> idx1.equals(idx2)\n    False\n\n    The order is compared\n\n    >>> ascending_idx = pd.Index([1, 2, 3])\n    >>> ascending_idx\n    Int64Index([1, 2, 3], dtype='int64')\n    >>> descending_idx = pd.Index([3, 2, 1])\n    >>> descending_idx\n    Int64Index([3, 2, 1], dtype='int64')\n    >>> ascending_idx.equals(descending_idx)\n    False\n\n    The dtype is *not* compared\n\n    >>> int64_idx = pd.Int64Index([1, 2, 3])\n    >>> int64_idx\n    Int64Index([1, 2, 3], dtype='int64')\n    >>> uint64_idx = pd.UInt64Index([1, 2, 3])\n    >>> uint64_idx\n    UInt64Index([1, 2, 3], dtype='uint64')\n    >>> int64_idx.equals(uint64_idx)\n    True\n    \"\"\"\n    if self.is_(other):\n        return True\n    if not isinstance(other, Index):\n        return False\n    if is_object_dtype(self.dtype) and (not is_object_dtype(other.dtype)):\n        return other.equals(self)\n    if isinstance(other, ABCMultiIndex):\n        return other.equals(self)\n    if is_extension_array_dtype(other.dtype):\n        return other.equals(self)\n    return array_equivalent(self._values, other._values)",
                            "def identical(self, other) -> bool:\n    \"\"\"\n    Similar to equals, but check that other comparable attributes are\n    also equal.\n\n    Returns\n    -------\n    bool\n        If two Index objects have equal elements and same type True,\n        otherwise False.\n    \"\"\"\n    return self.equals(other) and all((getattr(self, c, None) == getattr(other, c, None) for c in self._comparables)) and (type(self) == type(other))",
                            "def asof(self, label):\n    \"\"\"\n    Return the label from the index, or, if not present, the previous one.\n\n    Assuming that the index is sorted, return the passed index label if it\n    is in the index, or return the previous index label if the passed one\n    is not in the index.\n\n    Parameters\n    ----------\n    label : object\n        The label up to which the method returns the latest index label.\n\n    Returns\n    -------\n    object\n        The passed label if it is in the index. The previous label if the\n        passed label is not in the sorted index or `NaN` if there is no\n        such label.\n\n    See Also\n    --------\n    Series.asof : Return the latest value in a Series up to the\n        passed index.\n    merge_asof : Perform an asof merge (similar to left join but it\n        matches on nearest key rather than equal key).\n    Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n        with method='pad'.\n\n    Examples\n    --------\n    `Index.asof` returns the latest index label up to the passed label.\n\n    >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n    >>> idx.asof('2014-01-01')\n    '2013-12-31'\n\n    If the label is in the index, the method returns the passed label.\n\n    >>> idx.asof('2014-01-02')\n    '2014-01-02'\n\n    If all of the labels in the index are later than the passed label,\n    NaN is returned.\n\n    >>> idx.asof('1999-01-02')\n    nan\n\n    If the index is not sorted, an error is raised.\n\n    >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n    ...                            '2014-01-03'])\n    >>> idx_not_sorted.asof('2013-12-31')\n    Traceback (most recent call last):\n    ValueError: index must be monotonic increasing or decreasing\n    \"\"\"\n    try:\n        loc = self.get_loc(label, method='pad')\n    except KeyError:\n        return self._na_value\n    else:\n        if isinstance(loc, slice):\n            loc = loc.indices(len(self))[-1]\n        return self[loc]",
                            "def asof_locs(self, where, mask):\n    \"\"\"\n    Find the locations (indices) of the labels from the index for\n    every entry in the `where` argument.\n\n    As in the `asof` function, if the label (a particular entry in\n    `where`) is not in the index, the latest index label up to the\n    passed label is chosen and its index returned.\n\n    If all of the labels in the index are later than a label in `where`,\n    -1 is returned.\n\n    `mask` is used to ignore NA values in the index during calculation.\n\n    Parameters\n    ----------\n    where : Index\n        An Index consisting of an array of timestamps.\n    mask : array-like\n        Array of booleans denoting where values in the original\n        data are not NA.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array of locations (indices) of the labels from the Index\n        which correspond to the return values of the `asof` function\n        for every element in `where`.\n    \"\"\"\n    locs = self.values[mask].searchsorted(where.values, side='right')\n    locs = np.where(locs > 0, locs - 1, 0)\n    result = np.arange(len(self))[mask].take(locs)\n    first = mask.argmax()\n    result[(locs == 0) & (where.values < self.values[first])] = -1\n    return result",
                            "def sort_values(self, return_indexer=False, ascending=True, key: Optional[Callable]=None):\n    \"\"\"\n    Return a sorted copy of the index.\n\n    Return a sorted copy of the index, and optionally return the indices\n    that sorted the index itself.\n\n    Parameters\n    ----------\n    return_indexer : bool, default False\n        Should the indices that would sort the index be returned.\n    ascending : bool, default True\n        Should the index values be sorted in an ascending order.\n    key : callable, optional\n        If not None, apply the key function to the index values\n        before sorting. This is similar to the `key` argument in the\n        builtin :meth:`sorted` function, with the notable difference that\n        this `key` function should be *vectorized*. It should expect an\n        ``Index`` and return an ``Index`` of the same shape.\n\n        .. versionadded:: 1.1.0\n\n    Returns\n    -------\n    sorted_index : pandas.Index\n        Sorted copy of the index.\n    indexer : numpy.ndarray, optional\n        The indices that the index itself was sorted by.\n\n    See Also\n    --------\n    Series.sort_values : Sort values of a Series.\n    DataFrame.sort_values : Sort values in a DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index([10, 100, 1, 1000])\n    >>> idx\n    Int64Index([10, 100, 1, 1000], dtype='int64')\n\n    Sort values in ascending order (default behavior).\n\n    >>> idx.sort_values()\n    Int64Index([1, 10, 100, 1000], dtype='int64')\n\n    Sort values in descending order, and also get the indices `idx` was\n    sorted by.\n\n    >>> idx.sort_values(ascending=False, return_indexer=True)\n    (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n    \"\"\"\n    idx = ensure_key_mapped(self, key)\n    _as = idx.argsort()\n    if not ascending:\n        _as = _as[::-1]\n    sorted_index = self.take(_as)\n    if return_indexer:\n        return (sorted_index, _as)\n    else:\n        return sorted_index",
                            "def sort(self, *args, **kwargs):\n    \"\"\"\n    Use sort_values instead.\n    \"\"\"\n    raise TypeError('cannot sort an Index object in-place, use sort_values instead')",
                            "def shift(self, periods=1, freq=None):\n    \"\"\"\n    Shift index by desired number of time frequency increments.\n\n    This method is for shifting the values of datetime-like indexes\n    by a specified time increment a given number of times.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods (or increments) to shift by,\n        can be positive or negative.\n    freq : pandas.DateOffset, pandas.Timedelta or str, optional\n        Frequency increment to shift by.\n        If None, the index is shifted by its own `freq` attribute.\n        Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n    Returns\n    -------\n    pandas.Index\n        Shifted index.\n\n    See Also\n    --------\n    Series.shift : Shift values of Series.\n\n    Notes\n    -----\n    This method is only implemented for datetime-like index classes,\n    i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\n    Examples\n    --------\n    Put the first 5 month starts of 2011 into an index.\n\n    >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n    >>> month_starts\n    DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n                   '2011-05-01'],\n                  dtype='datetime64[ns]', freq='MS')\n\n    Shift the index by 10 days.\n\n    >>> month_starts.shift(10, freq='D')\n    DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n                   '2011-05-11'],\n                  dtype='datetime64[ns]', freq=None)\n\n    The default value of `freq` is the `freq` attribute of the index,\n    which is 'MS' (month start) in this example.\n\n    >>> month_starts.shift(10)\n    DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n                   '2012-03-01'],\n                  dtype='datetime64[ns]', freq='MS')\n    \"\"\"\n    raise NotImplementedError(f'Not supported for type {type(self).__name__}')",
                            "def argsort(self, *args, **kwargs) -> np.ndarray:\n    \"\"\"\n    Return the integer indices that would sort the index.\n\n    Parameters\n    ----------\n    *args\n        Passed to `numpy.ndarray.argsort`.\n    **kwargs\n        Passed to `numpy.ndarray.argsort`.\n\n    Returns\n    -------\n    numpy.ndarray\n        Integer indices that would sort the index if used as\n        an indexer.\n\n    See Also\n    --------\n    numpy.argsort : Similar method for NumPy arrays.\n    Index.sort_values : Return sorted copy of Index.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n    >>> idx\n    Index(['b', 'a', 'd', 'c'], dtype='object')\n\n    >>> order = idx.argsort()\n    >>> order\n    array([1, 0, 3, 2])\n\n    >>> idx[order]\n    Index(['a', 'b', 'c', 'd'], dtype='object')\n    \"\"\"\n    result = self.asi8\n    if result is None:\n        result = np.array(self)\n    return result.argsort(*args, **kwargs)",
                            "def get_value(self, series: 'Series', key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing.\n\n    Returns\n    -------\n    scalar or Series\n    \"\"\"\n    warnings.warn('get_value is deprecated and will be removed in a future version. Use Series[key] instead', FutureWarning, stacklevel=2)\n    self._check_indexing_error(key)\n    try:\n        loc = self.get_loc(key)\n    except KeyError:\n        if not self._should_fallback_to_positional():\n            raise\n        elif is_integer(key):\n            loc = key\n        else:\n            raise\n    return self._get_values_for_loc(series, loc, key)",
                            "def _check_indexing_error(self, key):\n    if not is_scalar(key):\n        raise InvalidIndexError(key)",
                            "def _should_fallback_to_positional(self) -> bool:\n    \"\"\"\n    Should an integer key be treated as positional?\n    \"\"\"\n    if self.holds_integer() or self.is_boolean():\n        return False\n    return True",
                            "def _get_values_for_loc(self, series: 'Series', loc, key):\n    \"\"\"\n    Do a positional lookup on the given Series, returning either a scalar\n    or a Series.\n\n    Assumes that `series.index is self`\n\n    key is included for MultiIndex compat.\n    \"\"\"\n    if is_integer(loc):\n        return series._values[loc]\n    return series.iloc[loc]",
                            "def set_value(self, arr, key, value):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray.\n\n    .. deprecated:: 1.0\n\n    Notes\n    -----\n    Only use this if you know what you're doing.\n    \"\"\"\n    warnings.warn(\"The 'set_value' method is deprecated, and will be removed in a future version.\", FutureWarning, stacklevel=2)\n    loc = self._engine.get_loc(key)\n    validate_numeric_casting(arr.dtype, value)\n    arr[loc] = value",
                            "@Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer_non_unique(ptarget)\n    if not self._is_comparable_dtype(target.dtype):\n        no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n        return (no_matches, no_matches)\n    if is_categorical_dtype(target.dtype):\n        tgt_values = np.asarray(target)\n    else:\n        tgt_values = target._get_engine_target()\n    indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n    return (ensure_platform_int(indexer), missing)",
                            "def get_indexer_for(self, target, **kwargs):\n    \"\"\"\n    Guaranteed return of an indexer even when non-unique.\n\n    This dispatches to get_indexer or get_indexer_non_unique\n    as appropriate.\n\n    Returns\n    -------\n    numpy.ndarray\n        List of indices.\n    \"\"\"\n    if self.is_unique:\n        return self.get_indexer(target, **kwargs)\n    indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n    return indexer",
                            "def _maybe_promote(self, other: 'Index'):\n    \"\"\"\n    When dealing with an object-dtype Index and a non-object Index, see\n    if we can upcast the object-dtype one to improve performance.\n    \"\"\"\n    if self.inferred_type == 'date' and isinstance(other, ABCDatetimeIndex):\n        return (type(other)(self), other)\n    elif self.inferred_type == 'timedelta' and isinstance(other, ABCTimedeltaIndex):\n        return (type(other)(self), other)\n    elif self.inferred_type == 'boolean':\n        if not is_object_dtype(self.dtype):\n            return (self.astype('object'), other.astype('object'))\n    if not is_object_dtype(self.dtype) and is_object_dtype(other.dtype):\n        other, self = other._maybe_promote(self)\n    return (self, other)",
                            "def _is_comparable_dtype(self, dtype: DtypeObj) -> bool:\n    \"\"\"\n    Can we compare values of the given dtype to our own?\n    \"\"\"\n    return True",
                            "def groupby(self, values) -> PrettyDict[Hashable, np.ndarray]:\n    \"\"\"\n    Group the index labels by a given array of values.\n\n    Parameters\n    ----------\n    values : array\n        Values used to determine the groups.\n\n    Returns\n    -------\n    dict\n        {group name -> group labels}\n    \"\"\"\n    if isinstance(values, ABCMultiIndex):\n        values = values._values\n    values = Categorical(values)\n    result = values._reverse_indexer()\n    result = {k: self.take(v) for k, v in result.items()}\n    return PrettyDict(result)",
                            "def map(self, mapper, na_action=None):\n    \"\"\"\n    Map values using input correspondence (a dict, Series, or function).\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n    na_action : {None, 'ignore'}\n        If 'ignore', propagate NA values, without passing them to the\n        mapping correspondence.\n\n    Returns\n    -------\n    applied : Union[Index, MultiIndex], inferred\n        The output of the mapping function applied to the index.\n        If the function returns a tuple with more than one element\n        a MultiIndex will be returned.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n    new_values = super()._map_values(mapper, na_action=na_action)\n    attributes = self._get_attributes_dict()\n    if new_values.size and isinstance(new_values[0], tuple):\n        if isinstance(self, MultiIndex):\n            names = self.names\n        elif attributes.get('name'):\n            names = [attributes.get('name')] * len(new_values[0])\n        else:\n            names = None\n        return MultiIndex.from_tuples(new_values, names=names)\n    attributes['copy'] = False\n    if not new_values.size:\n        attributes['dtype'] = self.dtype\n    return Index(new_values, **attributes)",
                            "def _transform_index(self, func, level=None) -> 'Index':\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n    \"\"\"\n    if isinstance(self, ABCMultiIndex):\n        if level is not None:\n            items = [tuple((func(y) if i == level else y for i, y in enumerate(x))) for x in self]\n        else:\n            items = [tuple((func(y) for y in x)) for x in self]\n        return type(self).from_tuples(items, names=self.names)\n    else:\n        items = [func(x) for x in self]\n        return Index(items, name=self.name, tupleize_cols=False)",
                            "def isin(self, values, level=None):\n    \"\"\"\n    Return a boolean array where the index values are in `values`.\n\n    Compute boolean array of whether each index value is found in the\n    passed set of values. The length of the returned boolean array matches\n    the length of the index.\n\n    Parameters\n    ----------\n    values : set or list-like\n        Sought values.\n    level : str or int, optional\n        Name or position of the index level to use (if the index is a\n        `MultiIndex`).\n\n    Returns\n    -------\n    is_contained : ndarray\n        NumPy array of boolean values.\n\n    See Also\n    --------\n    Series.isin : Same for Series.\n    DataFrame.isin : Same method for DataFrames.\n\n    Notes\n    -----\n    In the case of `MultiIndex` you must either specify `values` as a\n    list-like object containing tuples that are the same length as the\n    number of levels, or specify `level`. Otherwise it will raise a\n    ``ValueError``.\n\n    If `level` is specified:\n\n    - if it is the name of one *and only one* index level, use that level;\n    - otherwise it should be a number indicating level position.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1,2,3])\n    >>> idx\n    Int64Index([1, 2, 3], dtype='int64')\n\n    Check whether each index value in a list of values.\n\n    >>> idx.isin([1, 4])\n    array([ True, False, False])\n\n    >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n    ...                                  ['red', 'blue', 'green']],\n    ...                                  names=('number', 'color'))\n    >>> midx\n    MultiIndex([(1,   'red'),\n                (2,  'blue'),\n                (3, 'green')],\n               names=['number', 'color'])\n\n    Check whether the strings in the 'color' level of the MultiIndex\n    are in a list of colors.\n\n    >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n    array([ True, False, False])\n\n    To check across the levels of a MultiIndex, pass a list of tuples:\n\n    >>> midx.isin([(1, 'red'), (3, 'red')])\n    array([ True, False, False])\n\n    For a DatetimeIndex, string values in `values` are converted to\n    Timestamps.\n\n    >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n    >>> dti = pd.to_datetime(dates)\n    >>> dti\n    DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n    dtype='datetime64[ns]', freq=None)\n\n    >>> dti.isin(['2000-03-11'])\n    array([ True, False, False])\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    return algos.isin(self, values)",
                            "def _get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True):\n    raise NotImplementedError",
                            "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    For an ordered or unique index, compute the slice indexer for input\n    labels and step.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, default None\n    kind : str, default None\n\n    Returns\n    -------\n    indexer : slice\n\n    Raises\n    ------\n    KeyError : If key does not exist, or key is not unique and index is\n        not ordered.\n\n    Notes\n    -----\n    This function assumes that the data is sorted, so use at your own peril\n\n    Examples\n    --------\n    This is a method on all index types. For example you can do:\n\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_indexer(start='b', end='c')\n    slice(1, 3, None)\n\n    >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n    >>> idx.slice_indexer(start='b', end=('c', 'g'))\n    slice(1, 3, None)\n    \"\"\"\n    start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n    if not is_scalar(start_slice):\n        raise AssertionError('Start slice bound is non-scalar')\n    if not is_scalar(end_slice):\n        raise AssertionError('End slice bound is non-scalar')\n    return slice(start_slice, end_slice, step)",
                            "def _maybe_cast_indexer(self, key):\n    \"\"\"\n    If we have a float key and are not a floating index, then try to cast\n    to an int if equivalent.\n    \"\"\"\n    if not self.is_floating():\n        return com.cast_scalar_indexer(key)\n    return key",
                            "def _validate_indexer(self, form: str_t, key, kind: str_t):\n    \"\"\"\n    If we are positional indexer, validate that we have appropriate\n    typed bounds must be an integer.\n    \"\"\"\n    assert kind in ['getitem', 'iloc']\n    if key is None:\n        pass\n    elif is_integer(key):\n        pass\n    else:\n        self._invalid_indexer(form, key)",
                            "def _maybe_cast_slice_bound(self, label, side: str_t, kind):\n    \"\"\"\n    This function should be overloaded in subclasses that allow non-trivial\n    casting on label-slice bounds, e.g. datetime-like indices allowing\n    strings containing formatted datetimes.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    label : object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n    \"\"\"\n    assert kind in ['loc', 'getitem', None]\n    if is_float(label):\n        self._invalid_indexer('slice', label)\n    elif is_integer(label):\n        self._invalid_indexer('slice', label)\n    return label",
                            "def _searchsorted_monotonic(self, label, side='left'):\n    if self.is_monotonic_increasing:\n        return self.searchsorted(label, side=side)\n    elif self.is_monotonic_decreasing:\n        pos = self[::-1].searchsorted(label, side='right' if side == 'left' else 'left')\n        return len(self) - pos\n    raise ValueError('index must be monotonic increasing or decreasing')",
                            "def get_slice_bound(self, label, side: str_t, kind) -> int:\n    \"\"\"\n    Calculate slice bound that corresponds to given label.\n\n    Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n    of given label.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    int\n        Index of label.\n    \"\"\"\n    assert kind in ['loc', 'getitem', None]\n    if side not in ('left', 'right'):\n        raise ValueError(f\"Invalid value for side kwarg, must be either 'left' or 'right': {side}\")\n    original_label = label\n    label = self._maybe_cast_slice_bound(label, side, kind)\n    try:\n        slc = self.get_loc(label)\n    except KeyError as err:\n        try:\n            return self._searchsorted_monotonic(label, side)\n        except ValueError:\n            raise err\n    if isinstance(slc, np.ndarray):\n        if is_bool_dtype(slc):\n            slc = lib.maybe_booleans_to_slice(slc.view('u1'))\n        else:\n            slc = lib.maybe_indices_to_slice(slc.astype('i8'), len(self))\n        if isinstance(slc, np.ndarray):\n            raise KeyError(f'Cannot get {side} slice bound for non-unique label: {repr(original_label)}')\n    if isinstance(slc, slice):\n        if side == 'left':\n            return slc.start\n        else:\n            return slc.stop\n    elif side == 'right':\n        return slc + 1\n    else:\n        return slc",
                            "def slice_locs(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    Compute slice locations for input labels.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, defaults None\n        If None, defaults to 1.\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    start, end : int\n\n    See Also\n    --------\n    Index.get_loc : Get location for a single label.\n\n    Notes\n    -----\n    This method only works if the index is monotonic or unique.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_locs(start='b', end='c')\n    (1, 3)\n    \"\"\"\n    inc = step is None or step >= 0\n    if not inc:\n        start, end = (end, start)\n    if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n        try:\n            ts_start = Timestamp(start)\n            ts_end = Timestamp(end)\n        except (ValueError, TypeError):\n            pass\n        else:\n            if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                raise ValueError('Both dates must have the same UTC offset')\n    start_slice = None\n    if start is not None:\n        start_slice = self.get_slice_bound(start, 'left', kind)\n    if start_slice is None:\n        start_slice = 0\n    end_slice = None\n    if end is not None:\n        end_slice = self.get_slice_bound(end, 'right', kind)\n    if end_slice is None:\n        end_slice = len(self)\n    if not inc:\n        end_slice, start_slice = (start_slice - 1, end_slice - 1)\n        if end_slice == -1:\n            end_slice -= len(self)\n        if start_slice == -1:\n            start_slice -= len(self)\n    return (start_slice, end_slice)",
                            "def delete(self, loc):\n    \"\"\"\n    Make new Index with passed location(-s) deleted.\n\n    Parameters\n    ----------\n    loc : int or list of int\n        Location of item(-s) which will be deleted.\n        Use a list of locations to delete more than one value at the same time.\n\n    Returns\n    -------\n    Index\n        New Index with passed location(-s) deleted.\n\n    See Also\n    --------\n    numpy.delete : Delete any rows and column from NumPy array (ndarray).\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete(1)\n    Index(['a', 'c'], dtype='object')\n\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete([0, 2])\n    Index(['b'], dtype='object')\n    \"\"\"\n    return self._shallow_copy(np.delete(self._data, loc))",
                            "def insert(self, loc: int, item):\n    \"\"\"\n    Make new Index inserting new item at location.\n\n    Follows Python list.append semantics for negative values.\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    arr = np.asarray(self)\n    item = self._coerce_scalar_to_index(item)._values\n    idx = np.concatenate((arr[:loc], item, arr[loc:]))\n    return Index(idx, name=self.name)",
                            "def drop(self, labels, errors: str_t='raise'):\n    \"\"\"\n    Make new Index with passed list of labels deleted.\n\n    Parameters\n    ----------\n    labels : array-like\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    Returns\n    -------\n    dropped : Index\n\n    Raises\n    ------\n    KeyError\n        If not all of the labels are found in the selected axis\n    \"\"\"\n    arr_dtype = 'object' if self.dtype == 'object' else None\n    labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n    indexer = self.get_indexer(labels)\n    mask = indexer == -1\n    if mask.any():\n        if errors != 'ignore':\n            raise KeyError(f'{labels[mask]} not found in axis')\n        indexer = indexer[~mask]\n    return self.delete(indexer)",
                            "@classmethod\ndef _add_comparison_methods(cls):\n    \"\"\"\n    Add in comparison methods.\n    \"\"\"\n    cls.__eq__ = _make_comparison_op(operator.eq, cls)\n    cls.__ne__ = _make_comparison_op(operator.ne, cls)\n    cls.__lt__ = _make_comparison_op(operator.lt, cls)\n    cls.__gt__ = _make_comparison_op(operator.gt, cls)\n    cls.__le__ = _make_comparison_op(operator.le, cls)\n    cls.__ge__ = _make_comparison_op(operator.ge, cls)",
                            "@classmethod\ndef _add_numeric_methods_add_sub_disabled(cls):\n    \"\"\"\n    Add in the numeric add/sub methods to disable.\n    \"\"\"\n    cls.__add__ = make_invalid_op('__add__')\n    cls.__radd__ = make_invalid_op('__radd__')\n    cls.__iadd__ = make_invalid_op('__iadd__')\n    cls.__sub__ = make_invalid_op('__sub__')\n    cls.__rsub__ = make_invalid_op('__rsub__')\n    cls.__isub__ = make_invalid_op('__isub__')",
                            "@classmethod\ndef _add_numeric_methods_disabled(cls):\n    \"\"\"\n    Add in numeric methods to disable other than add/sub.\n    \"\"\"\n    cls.__pow__ = make_invalid_op('__pow__')\n    cls.__rpow__ = make_invalid_op('__rpow__')\n    cls.__mul__ = make_invalid_op('__mul__')\n    cls.__rmul__ = make_invalid_op('__rmul__')\n    cls.__floordiv__ = make_invalid_op('__floordiv__')\n    cls.__rfloordiv__ = make_invalid_op('__rfloordiv__')\n    cls.__truediv__ = make_invalid_op('__truediv__')\n    cls.__rtruediv__ = make_invalid_op('__rtruediv__')\n    cls.__mod__ = make_invalid_op('__mod__')\n    cls.__divmod__ = make_invalid_op('__divmod__')\n    cls.__neg__ = make_invalid_op('__neg__')\n    cls.__pos__ = make_invalid_op('__pos__')\n    cls.__abs__ = make_invalid_op('__abs__')\n    cls.__inv__ = make_invalid_op('__inv__')",
                            "@classmethod\ndef _add_numeric_methods_binary(cls):\n    \"\"\"\n    Add in numeric methods.\n    \"\"\"\n    cls.__add__ = _make_arithmetic_op(operator.add, cls)\n    cls.__radd__ = _make_arithmetic_op(ops.radd, cls)\n    cls.__sub__ = _make_arithmetic_op(operator.sub, cls)\n    cls.__rsub__ = _make_arithmetic_op(ops.rsub, cls)\n    cls.__rpow__ = _make_arithmetic_op(ops.rpow, cls)\n    cls.__pow__ = _make_arithmetic_op(operator.pow, cls)\n    cls.__truediv__ = _make_arithmetic_op(operator.truediv, cls)\n    cls.__rtruediv__ = _make_arithmetic_op(ops.rtruediv, cls)\n    cls.__mod__ = _make_arithmetic_op(operator.mod, cls)\n    cls.__floordiv__ = _make_arithmetic_op(operator.floordiv, cls)\n    cls.__rfloordiv__ = _make_arithmetic_op(ops.rfloordiv, cls)\n    cls.__divmod__ = _make_arithmetic_op(divmod, cls)\n    cls.__mul__ = _make_arithmetic_op(operator.mul, cls)\n    cls.__rmul__ = _make_arithmetic_op(ops.rmul, cls)",
                            "@classmethod\ndef _add_numeric_methods_unary(cls):\n    \"\"\"\n    Add in numeric unary methods.\n    \"\"\"\n\n    def _make_evaluate_unary(op, opstr: str_t):\n\n        def _evaluate_numeric_unary(self):\n            attrs = self._get_attributes_dict()\n            return Index(op(self.values), **attrs)\n        _evaluate_numeric_unary.__name__ = opstr\n        return _evaluate_numeric_unary\n    cls.__neg__ = _make_evaluate_unary(operator.neg, '__neg__')\n    cls.__pos__ = _make_evaluate_unary(operator.pos, '__pos__')\n    cls.__abs__ = _make_evaluate_unary(np.abs, '__abs__')\n    cls.__inv__ = _make_evaluate_unary(lambda x: -x, '__inv__')",
                            "@classmethod\ndef _add_numeric_methods(cls):\n    cls._add_numeric_methods_unary()\n    cls._add_numeric_methods_binary()",
                            "@classmethod\ndef _add_logical_methods(cls):\n    \"\"\"\n    Add in logical methods.\n    \"\"\"\n    _doc = '\\n        %(desc)s\\n\\n        Parameters\\n        ----------\\n        *args\\n            These parameters will be passed to numpy.%(outname)s.\\n        **kwargs\\n            These parameters will be passed to numpy.%(outname)s.\\n\\n        Returns\\n        -------\\n        %(outname)s : bool or array_like (if axis is specified)\\n            A single element array_like may be converted to bool.'\n    _index_shared_docs['index_all'] = dedent('\\n\\n        See Also\\n        --------\\n        Index.any : Return whether any element in an Index is True.\\n        Series.any : Return whether any element in a Series is True.\\n        Series.all : Return whether all elements in a Series are True.\\n\\n        Notes\\n        -----\\n        Not a Number (NaN), positive infinity and negative infinity\\n        evaluate to True because these are not equal to zero.\\n\\n        Examples\\n        --------\\n        **all**\\n\\n        True, because nonzero integers are considered True.\\n\\n        >>> pd.Index([1, 2, 3]).all()\\n        True\\n\\n        False, because ``0`` is considered False.\\n\\n        >>> pd.Index([0, 1, 2]).all()\\n        False\\n\\n        **any**\\n\\n        True, because ``1`` is considered True.\\n\\n        >>> pd.Index([0, 0, 1]).any()\\n        True\\n\\n        False, because ``0`` is considered False.\\n\\n        >>> pd.Index([0, 0, 0]).any()\\n        False\\n        ')\n    _index_shared_docs['index_any'] = dedent('\\n\\n        See Also\\n        --------\\n        Index.all : Return whether all elements are True.\\n        Series.all : Return whether all elements are True.\\n\\n        Notes\\n        -----\\n        Not a Number (NaN), positive infinity and negative infinity\\n        evaluate to True because these are not equal to zero.\\n\\n        Examples\\n        --------\\n        >>> index = pd.Index([0, 1, 2])\\n        >>> index.any()\\n        True\\n\\n        >>> index = pd.Index([0, 0, 0])\\n        >>> index.any()\\n        False\\n        ')\n\n    def _make_logical_function(name: str_t, desc: str_t, f):\n\n        @Substitution(outname=name, desc=desc)\n        @Appender(_index_shared_docs['index_' + name])\n        @Appender(_doc)\n        def logical_func(self, *args, **kwargs):\n            result = f(self.values)\n            if isinstance(result, (np.ndarray, ABCSeries, Index)) and result.ndim == 0:\n                return result.dtype.type(result.item())\n            else:\n                return result\n        logical_func.__name__ = name\n        return logical_func\n    cls.all = _make_logical_function('all', 'Return whether all elements are True.', np.all)\n    cls.any = _make_logical_function('any', 'Return whether any element is True.', np.any)",
                            "@classmethod\ndef _add_logical_methods_disabled(cls):\n    \"\"\"\n    Add in logical methods to disable.\n    \"\"\"\n    cls.all = make_invalid_op('all')\n    cls.any = make_invalid_op('any')",
                            "@property\ndef shape(self):\n    \"\"\"\n    Return a tuple of the shape of the underlying data.\n    \"\"\"\n    return self._values.shape",
                            "def is_int(v):\n    return v is None or is_integer(v)",
                            "def _get_leaf_sorter(labels):\n    \"\"\"\n    Returns sorter for the inner most level while preserving the\n    order of higher levels.\n    \"\"\"\n    if labels[0].size == 0:\n        return np.empty(0, dtype='int64')\n    if len(labels) == 1:\n        lab = ensure_int64(labels[0])\n        sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n        return sorter\n    tic = labels[0][:-1] != labels[0][1:]\n    for lab in labels[1:-1]:\n        tic |= lab[:-1] != lab[1:]\n    starts = np.hstack(([True], tic, [True])).nonzero()[0]\n    lab = ensure_int64(labels[-1])\n    return lib.get_level_sorter(lab, ensure_int64(starts))",
                            "def _make_evaluate_unary(op, opstr: str_t):\n\n    def _evaluate_numeric_unary(self):\n        attrs = self._get_attributes_dict()\n        return Index(op(self.values), **attrs)\n    _evaluate_numeric_unary.__name__ = opstr\n    return _evaluate_numeric_unary",
                            "def _make_logical_function(name: str_t, desc: str_t, f):\n\n    @Substitution(outname=name, desc=desc)\n    @Appender(_index_shared_docs['index_' + name])\n    @Appender(_doc)\n    def logical_func(self, *args, **kwargs):\n        result = f(self.values)\n        if isinstance(result, (np.ndarray, ABCSeries, Index)) and result.ndim == 0:\n            return result.dtype.type(result.item())\n        else:\n            return result\n    logical_func.__name__ = name\n    return logical_func",
                            "def _evaluate_numeric_unary(self):\n    attrs = self._get_attributes_dict()\n    return Index(op(self.values), **attrs)",
                            "@Substitution(outname=name, desc=desc)\n@Appender(_index_shared_docs['index_' + name])\n@Appender(_doc)\ndef logical_func(self, *args, **kwargs):\n    result = f(self.values)\n    if isinstance(result, (np.ndarray, ABCSeries, Index)) and result.ndim == 0:\n        return result.dtype.type(result.item())\n    else:\n        return result"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_deprecations",
                            "_join_precedence",
                            "_typ",
                            "_data",
                            "_id",
                            "_name",
                            "_no_setting_name",
                            "_comparables",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_can_hold_na",
                            "_defer_to_indexing",
                            "_engine_type",
                            "_supports_partial_string_indexing",
                            "_accessors",
                            "str",
                            "names",
                            "get_level_values",
                            "_na_value",
                            "isnull",
                            "notnull",
                            "__bool__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_left_indexer_unique(self, left, right)",
                            "_left_indexer(self, left, right)",
                            "_inner_indexer(self, left, right)",
                            "_outer_indexer(self, left, right)",
                            "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                            "asi8(self)",
                            "_simple_new(cls, values, name: Label=None)",
                            "_constructor(self)",
                            "_get_attributes_dict(self)",
                            "_shallow_copy(self, values=None, name: Label=no_default)",
                            "is_(self, other) -> bool",
                            "_reset_identity(self)",
                            "_cleanup(self)",
                            "_engine(self)",
                            "__len__(self) -> int",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__array_wrap__(self, result, context=None)",
                            "dtype(self)",
                            "ravel(self, order='C')",
                            "view(self, cls=None)",
                            "astype(self, dtype, copy=True)",
                            "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                            "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                            "repeat(self, repeats, axis=None)",
                            "copy(self, name=None, deep=False, dtype=None, names=None)",
                            "__copy__(self, **kwargs)",
                            "__deepcopy__(self, memo=None)",
                            "__repr__(self) -> str_t",
                            "_format_space(self) -> str_t",
                            "_formatter_func(self)",
                            "_format_data(self, name=None) -> str_t",
                            "_format_attrs(self)",
                            "_mpl_repr(self)",
                            "format(self, name: bool=False, formatter=None, **kwargs)",
                            "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                            "to_native_types(self, slicer=None, **kwargs)",
                            "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                            "_summary(self, name=None) -> str_t",
                            "to_flat_index(self)",
                            "to_series(self, index=None, name=None)",
                            "to_frame(self, index: bool=True, name=None)",
                            "name(self)",
                            "name(self, value)",
                            "_validate_names(self, name=None, names=None, deep: bool=False)",
                            "_get_names(self)",
                            "_set_names(self, values, level=None)",
                            "set_names(self, names, level=None, inplace: bool=False)",
                            "rename(self, name, inplace=False)",
                            "nlevels(self) -> int",
                            "_sort_levels_monotonic(self)",
                            "_validate_index_level(self, level)",
                            "_get_level_number(self, level) -> int",
                            "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                            "_get_level_values(self, level)",
                            "droplevel(self, level=0)",
                            "_get_grouper_for_level(self, mapper, level=None)",
                            "is_monotonic(self) -> bool",
                            "is_monotonic_increasing(self) -> bool",
                            "is_monotonic_decreasing(self) -> bool",
                            "_is_strictly_monotonic_increasing(self) -> bool",
                            "_is_strictly_monotonic_decreasing(self) -> bool",
                            "is_unique(self) -> bool",
                            "has_duplicates(self) -> bool",
                            "is_boolean(self) -> bool",
                            "is_integer(self) -> bool",
                            "is_floating(self) -> bool",
                            "is_numeric(self) -> bool",
                            "is_object(self) -> bool",
                            "is_categorical(self) -> bool",
                            "is_interval(self) -> bool",
                            "is_mixed(self) -> bool",
                            "holds_integer(self) -> bool",
                            "inferred_type(self) -> str_t",
                            "is_all_dates(self) -> bool",
                            "__reduce__(self)",
                            "_isnan(self)",
                            "_nan_idxs(self)",
                            "hasnans(self) -> bool",
                            "isna(self)",
                            "notna(self)",
                            "fillna(self, value=None, downcast=None)",
                            "dropna(self, how='any')",
                            "unique(self, level=None)",
                            "drop_duplicates(self, keep='first')",
                            "duplicated(self, keep='first')",
                            "_get_unique_index(self, dropna: bool=False)",
                            "__add__(self, other)",
                            "__radd__(self, other)",
                            "__iadd__(self, other)",
                            "__sub__(self, other)",
                            "__rsub__(self, other)",
                            "__and__(self, other)",
                            "__or__(self, other)",
                            "__xor__(self, other)",
                            "__nonzero__(self)",
                            "_get_reconciled_name_object(self, other)",
                            "_union_incompatible_dtypes(self, other, sort)",
                            "_is_compatible_with_other(self, other) -> bool",
                            "_validate_sort_keyword(self, sort)",
                            "union(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_wrap_setop_result(self, other, result)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "symmetric_difference(self, other, result_name=None, sort=None)",
                            "_assert_can_do_setop(self, other)",
                            "_convert_can_do_setop(self, other)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                            "_convert_tolerance(self, tolerance, target)",
                            "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                            "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                            "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                            "_filter_indexer_tolerance(self, target: Union['Index', np.ndarray, ExtensionArray], indexer: np.ndarray, tolerance) -> np.ndarray",
                            "_get_partial_string_timestamp_match_key(self, key)",
                            "_validate_positional_slice(self, key: slice)",
                            "_convert_slice_indexer(self, key: slice, kind: str_t)",
                            "_convert_listlike_indexer(self, keyarr)",
                            "_convert_arr_indexer(self, keyarr)",
                            "_convert_index_indexer(self, keyarr)",
                            "_convert_list_indexer(self, keyarr)",
                            "_invalid_indexer(self, form: str_t, key)",
                            "_can_reindex(self, indexer)",
                            "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                            "_reindex_non_unique(self, target)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_join_multi(self, other, how, return_indexers=True)",
                            "_join_non_unique(self, other, how='left', return_indexers=False)",
                            "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                            "_join_monotonic(self, other, how='left', return_indexers=False)",
                            "_wrap_joined_index(self, joined, other)",
                            "values(self) -> np.ndarray",
                            "array(self) -> ExtensionArray",
                            "_values(self) -> Union[ExtensionArray, np.ndarray]",
                            "_get_engine_target(self) -> np.ndarray",
                            "memory_usage(self, deep: bool=False) -> int",
                            "where(self, cond, other=None)",
                            "_scalar_data_error(cls, data)",
                            "_string_data_error(cls, data)",
                            "_coerce_scalar_to_index(self, item)",
                            "_to_safe_for_reshape(self)",
                            "_convert_for_op(self, value)",
                            "_assert_can_do_op(self, value)",
                            "_has_complex_internals(self) -> bool",
                            "_is_memory_usage_qualified(self) -> bool",
                            "is_type_compatible(self, kind) -> bool",
                            "__contains__(self, key: Any) -> bool",
                            "__hash__(self)",
                            "__setitem__(self, key, value)",
                            "__getitem__(self, key)",
                            "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                            "append(self, other)",
                            "_concat(self, to_concat, name)",
                            "_concat_same_dtype(self, to_concat, name)",
                            "putmask(self, mask, value)",
                            "equals(self, other: Any) -> bool",
                            "identical(self, other) -> bool",
                            "asof(self, label)",
                            "asof_locs(self, where, mask)",
                            "sort_values(self, return_indexer=False, ascending=True, key: Optional[Callable]=None)",
                            "sort(self, *args, **kwargs)",
                            "shift(self, periods=1, freq=None)",
                            "argsort(self, *args, **kwargs) -> np.ndarray",
                            "get_value(self, series: 'Series', key)",
                            "_check_indexing_error(self, key)",
                            "_should_fallback_to_positional(self) -> bool",
                            "_get_values_for_loc(self, series: 'Series', loc, key)",
                            "set_value(self, arr, key, value)",
                            "get_indexer_non_unique(self, target)",
                            "get_indexer_for(self, target, **kwargs)",
                            "_maybe_promote(self, other: 'Index')",
                            "_is_comparable_dtype(self, dtype: DtypeObj) -> bool",
                            "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                            "map(self, mapper, na_action=None)",
                            "_transform_index(self, func, level=None) -> 'Index'",
                            "isin(self, values, level=None)",
                            "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                            "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                            "_maybe_cast_indexer(self, key)",
                            "_validate_indexer(self, form: str_t, key, kind: str_t)",
                            "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                            "_searchsorted_monotonic(self, label, side='left')",
                            "get_slice_bound(self, label, side: str_t, kind) -> int",
                            "slice_locs(self, start=None, end=None, step=None, kind=None)",
                            "delete(self, loc)",
                            "insert(self, loc: int, item)",
                            "drop(self, labels, errors: str_t='raise')",
                            "_add_comparison_methods(cls)",
                            "_add_numeric_methods_add_sub_disabled(cls)",
                            "_add_numeric_methods_disabled(cls)",
                            "_add_numeric_methods_binary(cls)",
                            "_add_numeric_methods_unary(cls)",
                            "_add_numeric_methods(cls)",
                            "_add_logical_methods(cls)",
                            "_add_logical_methods_disabled(cls)",
                            "shape(self)",
                            "is_int(v)",
                            "_get_leaf_sorter(labels)",
                            "_make_evaluate_unary(op, opstr: str_t)",
                            "_make_logical_function(name: str_t, desc: str_t, f)",
                            "_evaluate_numeric_unary(self)",
                            "logical_func(self, *args, **kwargs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com.not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.names": {
                                    "variable_value": "FrozenList(['a', 'b', 'c'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "8"
                                },
                                "other_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.names": {
                                    "variable_value": "FrozenList(['a', 'b'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "overlap": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_is_mi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_is_mi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ldrop_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rdrop_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_jnlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_jnlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reorder_levels": {
                                    "variable_value": "<bound method MultiIndex.reorder_levels of MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.droplevel": {
                                    "variable_value": "<bound method Index.droplevel of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other.droplevel": {
                                    "variable_value": "<bound method Index.droplevel of MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "join_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lidx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ridx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_jnlevels.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "how": {
                                    "variable_value": "'left'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "dropped_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_restore_dropped_levels_multijoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "multi_join_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "multi_join_idx.remove_unused_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "jl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "flip_order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.names.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._join_level": {
                                    "variable_value": "<bound method Index._join_level of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "return_indexers": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self_names": {
                                    "variable_value": "{'b', 'a', 'c'}",
                                    "variable_type": "set",
                                    "variable_shape": "3"
                                },
                                "com.not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.names": {
                                    "variable_value": "FrozenList(['a', 'b', 'c'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "8"
                                },
                                "other_names": {
                                    "variable_value": "{'b', 'a'}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "other.names": {
                                    "variable_value": "FrozenList(['a', 'b'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "overlap": {
                                    "variable_value": "{'b', 'a'}",
                                    "variable_type": "set",
                                    "variable_shape": "2"
                                },
                                "self_is_mi": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_is_mi": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ldrop_names": {
                                    "variable_value": "['c']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "rdrop_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "self_jnlevels": {
                                    "variable_value": "MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "8"
                                },
                                "other_jnlevels": {
                                    "variable_value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "other.reorder_levels": {
                                    "variable_value": "<bound method MultiIndex.reorder_levels of MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.droplevel": {
                                    "variable_value": "<bound method Index.droplevel of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other.droplevel": {
                                    "variable_value": "<bound method Index.droplevel of MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "join_idx": {
                                    "variable_value": "MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "8"
                                },
                                "lidx": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "ridx": {
                                    "variable_value": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "self_jnlevels.join": {
                                    "variable_value": "<bound method Index.join of MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "how": {
                                    "variable_value": "'left'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "dropped_names": {
                                    "variable_value": "['c']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "levels": {
                                    "variable_value": "FrozenList([[1, 2], [3, 4], [5, 6]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "3"
                                },
                                "codes": {
                                    "variable_value": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "3"
                                },
                                "names": {
                                    "variable_value": "FrozenList(['a', 'b', 'c'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "3"
                                },
                                "_restore_dropped_levels_multijoin": {
                                    "variable_value": "<function _restore_dropped_levels_multijoin at 0x1065f91f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "multi_join_idx": {
                                    "variable_value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "8"
                                },
                                "MultiIndex": {
                                    "variable_value": "<class 'pandas.core.indexes.multi.MultiIndex'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x105d34400>"
                                },
                                "multi_join_idx.remove_unused_levels": {
                                    "variable_value": "<bound method MultiIndex.remove_unused_levels of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "jl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "flip_order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.names.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._join_level": {
                                    "variable_value": "<bound method Index._join_level of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "return_indexers": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com.not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.names": {
                                    "variable_value": "FrozenList(['a', 'b', 'c'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "3"
                                },
                                "self": {
                                    "variable_value": "MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "8"
                                },
                                "other_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.names": {
                                    "variable_value": "FrozenList(['a', 'b'])",
                                    "variable_type": "FrozenList",
                                    "variable_shape": "2"
                                },
                                "other": {
                                    "variable_value": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])",
                                    "variable_type": "MultiIndex",
                                    "variable_shape": "4"
                                },
                                "overlap": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_is_mi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCMultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_is_mi": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ldrop_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rdrop_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_jnlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other_jnlevels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.reorder_levels": {
                                    "variable_value": "<bound method MultiIndex.reorder_levels of MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.droplevel": {
                                    "variable_value": "<bound method Index.droplevel of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "other.droplevel": {
                                    "variable_value": "<bound method Index.droplevel of MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "join_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lidx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ridx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self_jnlevels.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "how": {
                                    "variable_value": "'left'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "dropped_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_restore_dropped_levels_multijoin": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "multi_join_idx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MultiIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "multi_join_idx.remove_unused_levels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "return_indexers": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "jl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "flip_order": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "level": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other.names.index": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._join_level": {
                                    "variable_value": "<bound method Index._join_level of MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _make_comparison_op(op, cls):\n    @unpack_zerodim_and_defer(op.__name__)\n    def cmp_method(self, other):\n\n        if is_object_dtype(self.dtype) and isinstance(other, ABCCategorical):\n            left = type(other)(self._values, dtype=other.dtype)\n            return op(left, other)\n        elif is_object_dtype(self.dtype) and isinstance(other, ExtensionArray):\n            # e.g. PeriodArray\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, other)\n\n        elif is_object_dtype(self.dtype) and not isinstance(self, ABCMultiIndex):\n            # don't pass MultiIndex\n            with np.errstate(all=\"ignore\"):\n                result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n\n        else:\n            with np.errstate(all=\"ignore\"):\n                result = op(self._values, np.asarray(other))\n\n        if is_bool_dtype(result):\n            return result\n        return ops.invalid_comparison(self, other, op)\n\n    name = f\"__{op.__name__}__\"\n    return set_function_name(cmp_method, name, cls)",
                "def _make_arithmetic_op(op, cls):\n    def index_arithmetic_method(self, other):\n        if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n            return NotImplemented\n\n        from pandas import Series\n\n        result = op(Series(self), other)\n        if isinstance(result, tuple):\n            return (Index(result[0]), Index(result[1]))\n        return Index(result)\n\n    name = f\"__{op.__name__}__\"\n    return set_function_name(index_arithmetic_method, name, cls)",
                "def _new_Index(cls, d):\n    \"\"\"\n    This is called upon unpickling, rather than the default which doesn't\n    have arguments and breaks __new__.\n    \"\"\"\n    # required for backward compat, because PI can't be instantiated with\n    # ordinals through __new__ GH #13277\n    if issubclass(cls, ABCPeriodIndex):\n        from pandas.core.indexes.period import _new_PeriodIndex\n\n        return _new_PeriodIndex(cls, **d)\n\n    if issubclass(cls, ABCMultiIndex):\n        if \"labels\" in d and \"codes\" not in d:\n            # GH#23752 \"labels\" kwarg has been replaced with \"codes\"\n            d[\"codes\"] = d.pop(\"labels\")\n\n    return cls.__new__(cls, **d)",
                "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"\n    Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=[\"name\"])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([[\"a\", \"a\"], [\"a\", \"b\"]], names=[\"L1\", \"L2\"])\n    MultiIndex([('a', 'a'),\n                ('a', 'b')],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)",
                "def ensure_index(index_like, copy: bool = False):\n    \"\"\"\n    Ensure that we have an index from some index-like object.\n\n    Parameters\n    ----------\n    index_like : sequence\n        An Index or other sequence\n    copy : bool, default False\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    See Also\n    --------\n    ensure_index_from_sequences\n\n    Examples\n    --------\n    >>> ensure_index(['a', 'b'])\n    Index(['a', 'b'], dtype='object')\n\n    >>> ensure_index([('a', 'a'),  ('b', 'c')])\n    Index([('a', 'a'), ('b', 'c')], dtype='object')\n\n    >>> ensure_index([['a', 'a'], ['b', 'c']])\n    MultiIndex([('a', 'b'),\n            ('a', 'c')],\n           )\n    \"\"\"\n    if isinstance(index_like, Index):\n        if copy:\n            index_like = index_like.copy()\n        return index_like\n    if hasattr(index_like, \"name\"):\n        return Index(index_like, name=index_like.name, copy=copy)\n\n    if is_iterator(index_like):\n        index_like = list(index_like)\n\n    # must check for exactly list here because of strict type\n    # check in clean_index_list\n    if isinstance(index_like, list):\n        if type(index_like) != list:\n            index_like = list(index_like)\n\n        converted, all_arrays = lib.clean_index_list(index_like)\n\n        if len(converted) > 0 and all_arrays:\n            from pandas.core.indexes.multi import MultiIndex\n\n            return MultiIndex.from_arrays(converted)\n        else:\n            index_like = converted\n    else:\n        # clean_index_list does the equivalent of copying\n        # so only need to do this if not list instance\n        if copy:\n            index_like = copy_func(index_like)\n\n    return Index(index_like)",
                "def ensure_has_len(seq):\n    \"\"\"\n    If seq is an iterator, put its values into a list.\n    \"\"\"\n    try:\n        len(seq)\n    except TypeError:\n        return list(seq)\n    else:\n        return seq",
                "def _trim_front(strings):\n    \"\"\"\n    Trims zeros and decimal points.\n    \"\"\"\n    trimmed = strings\n    while len(strings) > 0 and all(x[0] == \" \" for x in trimmed):\n        trimmed = [x[1:] for x in trimmed]\n    return trimmed",
                "def _validate_join_method(method: str):\n    if method not in [\"left\", \"right\", \"inner\", \"outer\"]:\n        raise ValueError(f\"do not recognize join method {method}\")",
                "def default_index(n):\n    from pandas.core.indexes.range import RangeIndex\n\n    return RangeIndex(0, n, name=None)",
                "def maybe_extract_name(name, obj, cls) -> Label:\n    \"\"\"\n    If no name is passed, then extract it from data, validating hashability.\n    \"\"\"\n    if name is None and isinstance(obj, (Index, ABCSeries)):\n        # Note we don't just check for \"name\" attribute since that would\n        #  pick up e.g. dtype.name\n        name = obj.name\n\n    # GH#29069\n    if not is_hashable(name):\n        raise TypeError(f\"{cls.__name__}.name must be a hashable type\")\n\n    return name",
                "def _maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:\n    \"\"\"\n    If a dtype is passed, cast to the closest matching dtype that is supported\n    by Index.\n\n    Parameters\n    ----------\n    data : np.ndarray\n    dtype : np.dtype\n    copy : bool\n\n    Returns\n    -------\n    np.ndarray\n    \"\"\"\n    # we need to avoid having numpy coerce\n    # things that look like ints/floats to ints unless\n    # they are actually ints, e.g. '0' and 0.0\n    # should not be coerced\n    # GH 11836\n    if is_integer_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"integer\":\n            data = maybe_cast_to_integer_array(data, dtype, copy=copy)\n        elif inferred in [\"floating\", \"mixed-integer-float\"]:\n            if isna(data).any():\n                raise ValueError(\"cannot convert float NaN to integer\")\n\n            if inferred == \"mixed-integer-float\":\n                data = maybe_cast_to_integer_array(data, dtype)\n\n            # If we are actually all equal to integers,\n            # then coerce to integer.\n            try:\n                data = _try_convert_to_int_array(data, copy, dtype)\n            except ValueError:\n                data = np.array(data, dtype=np.float64, copy=copy)\n\n        elif inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    elif is_float_dtype(dtype):\n        inferred = lib.infer_dtype(data, skipna=False)\n        if inferred == \"string\":\n            pass\n        else:\n            data = data.astype(dtype)\n    else:\n        data = np.array(data, dtype=dtype, copy=copy)\n\n    return data",
                "def _maybe_cast_data_without_dtype(subarr):\n    \"\"\"\n    If we have an arraylike input but no passed dtype, try to infer\n    a supported dtype.\n\n    Parameters\n    ----------\n    subarr : np.ndarray, Index, or Series\n\n    Returns\n    -------\n    converted : np.ndarray or ExtensionArray\n    dtype : np.dtype or ExtensionDtype\n    \"\"\"\n    # Runtime import needed bc IntervalArray imports Index\n    from pandas.core.arrays import (\n        IntervalArray,\n        PeriodArray,\n        DatetimeArray,\n        TimedeltaArray,\n    )\n\n    inferred = lib.infer_dtype(subarr, skipna=False)\n\n    if inferred == \"integer\":\n        try:\n            data = _try_convert_to_int_array(subarr, False, None)\n            return data, data.dtype\n        except ValueError:\n            pass\n\n        return subarr, object\n\n    elif inferred in [\"floating\", \"mixed-integer-float\", \"integer-na\"]:\n        # TODO: Returns IntegerArray for integer-na case in the future\n        return subarr, np.float64\n\n    elif inferred == \"interval\":\n        try:\n            data = IntervalArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        except ValueError:\n            # GH27172: mixed closed Intervals --> object dtype\n            pass\n    elif inferred == \"boolean\":\n        # don't support boolean explicitly ATM\n        pass\n    elif inferred != \"string\":\n        if inferred.startswith(\"datetime\"):\n            try:\n                data = DatetimeArray._from_sequence(subarr, copy=False)\n                return data, data.dtype\n            except (ValueError, OutOfBoundsDatetime):\n                # GH 27011\n                # If we have mixed timezones, just send it\n                # down the base constructor\n                pass\n\n        elif inferred.startswith(\"timedelta\"):\n            data = TimedeltaArray._from_sequence(subarr, copy=False)\n            return data, data.dtype\n        elif inferred == \"period\":\n            try:\n                data = PeriodArray._from_sequence(subarr)\n                return data, data.dtype\n            except IncompatibleFrequency:\n                pass\n\n    return subarr, subarr.dtype",
                "def _try_convert_to_int_array(\n    data: np.ndarray, copy: bool, dtype: np.dtype\n) -> np.ndarray:\n    \"\"\"\n    Attempt to convert an array of data into an integer array.\n\n    Parameters\n    ----------\n    data : The data to convert.\n    copy : bool\n        Whether to copy the data or not.\n    dtype : np.dtype\n\n    Returns\n    -------\n    int_array : data converted to either an ndarray[int64] or ndarray[uint64]\n\n    Raises\n    ------\n    ValueError if the conversion was not successful.\n    \"\"\"\n    if not is_unsigned_integer_dtype(dtype):\n        # skip int64 conversion attempt if uint-like dtype is passed, as\n        # this could return Int64Index when UInt64Index is what's desired\n        try:\n            res = data.astype(\"i8\", copy=False)\n            if (res == data).all():\n                return res  # TODO: might still need to copy\n        except (OverflowError, TypeError, ValueError):\n            pass\n\n    # Conversion to int64 failed (possibly due to overflow) or was skipped,\n    # so let's try now with uint64.\n    try:\n        res = data.astype(\"u8\", copy=False)\n        if (res == data).all():\n            return res  # TODO: might still need to copy\n    except (OverflowError, TypeError, ValueError):\n        pass\n\n    raise ValueError",
                "def _maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs):\n    \"\"\"\n    If an object dtype was specified, create the non-object Index\n    and then convert it to object.\n\n    Parameters\n    ----------\n    dtype : np.dtype, ExtensionDtype, str\n    klass : Index subclass\n    data : list-like\n    copy : bool\n    name : hashable\n    **kwargs\n\n    Returns\n    -------\n    Index\n\n    Notes\n    -----\n    We assume that calling .astype(object) on this klass will make a copy.\n    \"\"\"\n\n    # GH#23524 passing `dtype=object` to DatetimeIndex is invalid,\n    #  will raise in the where `data` is already tz-aware.  So\n    #  we leave it out of this step and cast to object-dtype after\n    #  the DatetimeIndex construction.\n\n    if is_dtype_equal(_o_dtype, dtype):\n        # Note we can pass copy=False because the .astype below\n        #  will always make a copy\n        index = klass(data, copy=False, name=name, **kwargs)\n        return index.astype(object)\n\n    return klass(data, dtype=dtype, copy=copy, name=name, **kwargs)",
                "@unpack_zerodim_and_defer(op.__name__)\ndef cmp_method(self, other):\n\n    if is_object_dtype(self.dtype) and isinstance(other, ABCCategorical):\n        left = type(other)(self._values, dtype=other.dtype)\n        return op(left, other)\n    elif is_object_dtype(self.dtype) and isinstance(other, ExtensionArray):\n        # e.g. PeriodArray\n        with np.errstate(all=\"ignore\"):\n            result = op(self._values, other)\n\n    elif is_object_dtype(self.dtype) and not isinstance(self, ABCMultiIndex):\n        # don't pass MultiIndex\n        with np.errstate(all=\"ignore\"):\n            result = ops.comp_method_OBJECT_ARRAY(op, self._values, other)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            result = op(self._values, np.asarray(other))\n\n    if is_bool_dtype(result):\n        return result\n    return ops.invalid_comparison(self, other, op)",
                "def index_arithmetic_method(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame, ABCTimedeltaIndex)):\n        return NotImplemented\n\n    from pandas import Series\n\n    result = op(Series(self), other)\n    if isinstance(result, tuple):\n        return (Index(result[0]), Index(result[1]))\n    return Index(result)",
                "def _left_indexer_unique(self, left, right):\n    return libjoin.left_join_indexer_unique(left, right)",
                "def _left_indexer(self, left, right):\n    return libjoin.left_join_indexer(left, right)",
                "def _inner_indexer(self, left, right):\n    return libjoin.inner_join_indexer(left, right)",
                "def _outer_indexer(self, left, right):\n    return libjoin.outer_join_indexer(left, right)",
                "def __new__(\n    cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs\n) -> \"Index\":\n\n    from pandas.core.indexes.range import RangeIndex\n\n    name = maybe_extract_name(name, data, cls)\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n    if \"tz\" in kwargs:\n        tz = kwargs.pop(\"tz\")\n        validate_tz_from_dtype(dtype, tz)\n        dtype = tz_to_dtype(tz)\n\n    if isinstance(data, ABCPandasArray):\n        # ensure users don't accidentally put a PandasArray in an index.\n        data = data.to_numpy()\n\n    data_dtype = getattr(data, \"dtype\", None)\n\n    # range\n    if isinstance(data, RangeIndex):\n        return RangeIndex(start=data, copy=copy, dtype=dtype, name=name)\n    elif isinstance(data, range):\n        return RangeIndex.from_range(data, dtype=dtype, name=name)\n\n    # categorical\n    elif is_categorical_dtype(data_dtype) or is_categorical_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas.core.indexes.category import CategoricalIndex\n\n        return _maybe_asobject(dtype, CategoricalIndex, data, copy, name, **kwargs)\n\n    # interval\n    elif is_interval_dtype(data_dtype) or is_interval_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas.core.indexes.interval import IntervalIndex\n\n        return _maybe_asobject(dtype, IntervalIndex, data, copy, name, **kwargs)\n\n    elif is_datetime64_any_dtype(data_dtype) or is_datetime64_any_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas import DatetimeIndex\n\n        return _maybe_asobject(dtype, DatetimeIndex, data, copy, name, **kwargs)\n\n    elif is_timedelta64_dtype(data_dtype) or is_timedelta64_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas import TimedeltaIndex\n\n        return _maybe_asobject(dtype, TimedeltaIndex, data, copy, name, **kwargs)\n\n    elif is_period_dtype(data_dtype) or is_period_dtype(dtype):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas import PeriodIndex\n\n        return _maybe_asobject(dtype, PeriodIndex, data, copy, name, **kwargs)\n\n    # extension dtype\n    elif is_extension_array_dtype(data_dtype) or is_extension_array_dtype(dtype):\n        if not (dtype is None or is_object_dtype(dtype)):\n            # coerce to the provided dtype\n            ea_cls = dtype.construct_array_type()\n            data = ea_cls._from_sequence(data, dtype=dtype, copy=False)\n        else:\n            data = np.asarray(data, dtype=object)\n\n        # coerce to the object dtype\n        data = data.astype(object)\n        return Index(data, dtype=object, copy=copy, name=name, **kwargs)\n\n    # index-like\n    elif isinstance(data, (np.ndarray, Index, ABCSeries)):\n        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423\n        from pandas.core.indexes.numeric import (\n            Float64Index,\n            Int64Index,\n            UInt64Index,\n        )\n\n        if dtype is not None:\n            # we need to avoid having numpy coerce\n            # things that look like ints/floats to ints unless\n            # they are actually ints, e.g. '0' and 0.0\n            # should not be coerced\n            # GH 11836\n            data = _maybe_cast_with_dtype(data, dtype, copy)\n            dtype = data.dtype  # TODO: maybe not for object?\n\n        # maybe coerce to a sub-class\n        if is_signed_integer_dtype(data.dtype):\n            return Int64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_unsigned_integer_dtype(data.dtype):\n            return UInt64Index(data, copy=copy, dtype=dtype, name=name)\n        elif is_float_dtype(data.dtype):\n            return Float64Index(data, copy=copy, dtype=dtype, name=name)\n        elif issubclass(data.dtype.type, np.bool) or is_bool_dtype(data):\n            subarr = data.astype(\"object\")\n        else:\n            subarr = com.asarray_tuplesafe(data, dtype=object)\n\n        # asarray_tuplesafe does not always copy underlying data,\n        # so need to make sure that this happens\n        if copy:\n            subarr = subarr.copy()\n\n        if dtype is None:\n            new_data, new_dtype = _maybe_cast_data_without_dtype(subarr)\n            if new_dtype is not None:\n                return cls(\n                    new_data, dtype=new_dtype, copy=False, name=name, **kwargs\n                )\n\n        if kwargs:\n            raise TypeError(f\"Unexpected keyword arguments {repr(set(kwargs))}\")\n        if subarr.ndim > 1:\n            # GH#13601, GH#20285, GH#27125\n            raise ValueError(\"Index data must be 1-dimensional\")\n        return cls._simple_new(subarr, name)\n\n    elif data is None or is_scalar(data):\n        raise cls._scalar_data_error(data)\n    elif hasattr(data, \"__array__\"):\n        return Index(np.asarray(data), dtype=dtype, copy=copy, name=name, **kwargs)\n    else:\n        if tupleize_cols and is_list_like(data):\n            # GH21470: convert iterable to list before determining if empty\n            if is_iterator(data):\n                data = list(data)\n\n            if data and all(isinstance(e, tuple) for e in data):\n                # we must be all tuples, otherwise don't construct\n                # 10697\n                from pandas.core.indexes.multi import MultiIndex\n\n                return MultiIndex.from_tuples(\n                    data, names=name or kwargs.get(\"names\")\n                )\n        # other iterable of some kind\n        subarr = com.asarray_tuplesafe(data, dtype=object)\n        return Index(subarr, dtype=dtype, copy=copy, name=name, **kwargs)",
                "@property\ndef asi8(self):\n    \"\"\"\n    Integer representation of the values.\n\n    Returns\n    -------\n    ndarray\n        An ndarray with int64 dtype.\n    \"\"\"\n    return None",
                "@classmethod\ndef _simple_new(cls, values, name: Label = None):\n    \"\"\"\n    We require that we have a dtype compat for the values. If we are passed\n    a non-dtype compat, then coerce using the constructor.\n\n    Must be careful not to recurse.\n    \"\"\"\n    assert isinstance(values, np.ndarray), type(values)\n\n    result = object.__new__(cls)\n    result._data = values\n    # _index_data is a (temporary?) fix to ensure that the direct data\n    # manipulation we do in `_libs/reduction.pyx` continues to work.\n    # We need access to the actual ndarray, since we're messing with\n    # data buffers and strides.\n    result._index_data = values\n    result._name = name\n    result._cache = {}\n\n    return result._reset_identity()",
                "@cache_readonly\ndef _constructor(self):\n    return type(self)",
                "def _get_attributes_dict(self):\n    \"\"\"\n    Return an attributes dict for my class.\n    \"\"\"\n    return {k: getattr(self, k, None) for k in self._attributes}",
                "def _shallow_copy(self, values=None, name: Label = no_default):\n    \"\"\"\n    Create a new Index with the same class as the caller, don't copy the\n    data, use the same object attributes with passed in attributes taking\n    precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    name : Label, defaults to self.name\n    \"\"\"\n    name = self.name if name is no_default else name\n    cache = self._cache.copy() if values is None else {}\n    if values is None:\n        values = self._values\n\n    result = self._simple_new(values, name=name)\n    result._cache = cache\n    return result",
                "def is_(self, other) -> bool:\n    \"\"\"\n    More flexible, faster check like ``is`` but that works through views.\n\n    Note: this is *not* the same as ``Index.identical()``, which checks\n    that metadata is also the same.\n\n    Parameters\n    ----------\n    other : object\n        other object to compare against.\n\n    Returns\n    -------\n    True if both have same underlying data, False otherwise : bool\n    \"\"\"\n    # use something other than None to be clearer\n    return self._id is getattr(other, \"_id\", Ellipsis) and self._id is not None",
                "def _reset_identity(self):\n    \"\"\"\n    Initializes or resets ``_id`` attribute with new object.\n    \"\"\"\n    self._id = _Identity()\n    return self",
                "def _cleanup(self):\n    self._engine.clear_mapping()",
                "@cache_readonly\ndef _engine(self):\n    # property, for now, slow to look up\n\n    # to avoid a reference cycle, bind `target_values` to a local variable, so\n    # `self` is not passed into the lambda.\n    target_values = self._get_engine_target()\n    return self._engine_type(lambda: target_values, len(self))",
                "def __len__(self) -> int:\n    \"\"\"\n    Return the length of the Index.\n    \"\"\"\n    return len(self._data)",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The array interface, return my values.\n    \"\"\"\n    return np.asarray(self._data, dtype=dtype)",
                "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc.\n    \"\"\"\n    result = lib.item_from_zerodim(result)\n    if is_bool_dtype(result) or lib.is_scalar(result) or np.ndim(result) > 1:\n        return result\n\n    attrs = self._get_attributes_dict()\n    return Index(result, **attrs)",
                "@cache_readonly\ndef dtype(self):\n    \"\"\"\n    Return the dtype object of the underlying data.\n    \"\"\"\n    return self._data.dtype",
                "def ravel(self, order=\"C\"):\n    \"\"\"\n    Return an ndarray of the flattened values of the underlying data.\n\n    Returns\n    -------\n    numpy.ndarray\n        Flattened array.\n\n    See Also\n    --------\n    numpy.ndarray.ravel\n    \"\"\"\n    values = self._get_engine_target()\n    return values.ravel(order=order)",
                "def view(self, cls=None):\n\n    # we need to see if we are subclassing an\n    # index type here\n    if cls is not None and not hasattr(cls, \"_typ\"):\n        result = self._data.view(cls)\n    else:\n        result = self._shallow_copy()\n    if isinstance(result, Index):\n        result._id = self._id\n    return result",
                "def astype(self, dtype, copy=True):\n    \"\"\"\n    Create an Index with values cast to dtypes. The class of a new Index\n    is determined by dtype. When conversion is impossible, a ValueError\n    exception is raised.\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n        Note that any signed integer `dtype` is treated as ``'int64'``,\n        and any unsigned integer `dtype` is treated as ``'uint64'``,\n        regardless of the size.\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and internal requirements on dtype are\n        satisfied, the original data is used to create a new Index\n        or the original Index is returned.\n\n    Returns\n    -------\n    Index\n        Index with values cast to specified dtype.\n    \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n    if is_dtype_equal(self.dtype, dtype):\n        return self.copy() if copy else self\n\n    elif is_categorical_dtype(dtype):\n        from pandas.core.indexes.category import CategoricalIndex\n\n        return CategoricalIndex(self.values, name=self.name, dtype=dtype, copy=copy)\n\n    elif is_extension_array_dtype(dtype):\n        return Index(np.asarray(self), name=self.name, dtype=dtype, copy=copy)\n\n    try:\n        casted = self.values.astype(dtype, copy=copy)\n    except (TypeError, ValueError) as err:\n        raise TypeError(\n            f\"Cannot cast {type(self).__name__} to dtype {dtype}\"\n        ) from err\n    return Index(casted, name=self.name, dtype=dtype)",
                "@Appender(_index_shared_docs[\"take\"] % _index_doc_kwargs)\ndef take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):\n    if kwargs:\n        nv.validate_take(tuple(), kwargs)\n    indices = ensure_platform_int(indices)\n    if self._can_hold_na:\n        taken = self._assert_take_fillable(\n            self._values,\n            indices,\n            allow_fill=allow_fill,\n            fill_value=fill_value,\n            na_value=self._na_value,\n        )\n    else:\n        if allow_fill and fill_value is not None:\n            cls_name = type(self).__name__\n            raise ValueError(\n                f\"Unable to fill values because {cls_name} cannot contain NA\"\n            )\n        taken = self._values.take(indices)\n    return self._shallow_copy(taken)",
                "def _assert_take_fillable(\n    self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan\n):\n    \"\"\"\n    Internal method to handle NA filling of take.\n    \"\"\"\n    indices = ensure_platform_int(indices)\n\n    # only fill if we are passing a non-None fill_value\n    if allow_fill and fill_value is not None:\n        if (indices < -1).any():\n            raise ValueError(\n                \"When allow_fill=True and fill_value is not None, \"\n                \"all indices must be >= -1\"\n            )\n        taken = algos.take(\n            values, indices, allow_fill=allow_fill, fill_value=na_value\n        )\n    else:\n        taken = values.take(indices)\n    return taken",
                "@Appender(_index_shared_docs[\"repeat\"] % _index_doc_kwargs)\ndef repeat(self, repeats, axis=None):\n    repeats = ensure_platform_int(repeats)\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    return self._shallow_copy(self._values.repeat(repeats))",
                "def copy(self, name=None, deep=False, dtype=None, names=None):\n    \"\"\"\n    Make a copy of this object.\n\n    Name and dtype sets those attributes on the new object.\n\n    Parameters\n    ----------\n    name : Label, optional\n        Set name for new object.\n    deep : bool, default False\n    dtype : numpy dtype or pandas type, optional\n        Set dtype for new object.\n    names : list-like, optional\n        Kept for compatibility with MultiIndex. Should not be used.\n\n    Returns\n    -------\n    Index\n        Index refer to new object which is a copy of this object.\n\n    Notes\n    -----\n    In most cases, there should be no functional difference from using\n    ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n    \"\"\"\n    if deep:\n        new_index = self._shallow_copy(self._data.copy())\n    else:\n        new_index = self._shallow_copy()\n\n    names = self._validate_names(name=name, names=names, deep=deep)\n    new_index = new_index.set_names(names)\n\n    if dtype:\n        new_index = new_index.astype(dtype)\n    return new_index",
                "def __copy__(self, **kwargs):\n    return self.copy(**kwargs)",
                "def __deepcopy__(self, memo=None):\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                "def __repr__(self) -> str_t:\n    \"\"\"\n    Return a string representation for this object.\n    \"\"\"\n    klass_name = type(self).__name__\n    data = self._format_data()\n    attrs = self._format_attrs()\n    space = self._format_space()\n    attrs_str = [f\"{k}={v}\" for k, v in attrs]\n    prepr = f\",{space}\".join(attrs_str)\n\n    # no data provided, just attributes\n    if data is None:\n        data = \"\"\n\n    res = f\"{klass_name}({data}{prepr})\"\n\n    return res",
                "def _format_space(self) -> str_t:\n\n    # using space here controls if the attributes\n    # are line separated or not (the default)\n\n    # max_seq_items = get_option('display.max_seq_items')\n    # if len(self) > max_seq_items:\n    #    space = \"\\n%s\" % (' ' * (len(klass) + 1))\n    return \" \"",
                "@property\ndef _formatter_func(self):\n    \"\"\"\n    Return the formatter function.\n    \"\"\"\n    return default_pprint",
                "def _format_data(self, name=None) -> str_t:\n    \"\"\"\n    Return the formatted data as a unicode string.\n    \"\"\"\n    # do we want to justify (only do so for non-objects)\n    is_justify = True\n\n    if self.inferred_type == \"string\":\n        is_justify = False\n    elif self.inferred_type == \"categorical\":\n        if is_object_dtype(self.categories):  # type: ignore\n            is_justify = False\n\n    return format_object_summary(\n        self, self._formatter_func, is_justify=is_justify, name=name\n    )",
                "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value).\n    \"\"\"\n    return format_object_attrs(self)",
                "def _mpl_repr(self):\n    # how to represent ourselves to matplotlib\n    return self.values",
                "def format(self, name: bool = False, formatter=None, **kwargs):\n    \"\"\"\n    Render a string representation of the Index.\n    \"\"\"\n    header = []\n    if name:\n        header.append(\n            pprint_thing(self.name, escape_chars=(\"\\t\", \"\\r\", \"\\n\"))\n            if self.name is not None\n            else \"\"\n        )\n\n    if formatter is not None:\n        return header + list(self.map(formatter))\n\n    return self._format_with_header(header, **kwargs)",
                "def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n    values = self.values\n\n    from pandas.io.formats.format import format_array\n\n    if is_categorical_dtype(values.dtype):\n        values = np.array(values)\n\n    elif is_object_dtype(values.dtype):\n        values = lib.maybe_convert_objects(values, safe=1)\n\n    if is_object_dtype(values.dtype):\n        result = [pprint_thing(x, escape_chars=(\"\\t\", \"\\r\", \"\\n\")) for x in values]\n\n        # could have nans\n        mask = isna(values)\n        if mask.any():\n            result = np.array(result)\n            result[mask] = na_rep\n            result = result.tolist()\n\n    else:\n        result = _trim_front(format_array(values, None, justify=\"left\"))\n    return header + result",
                "def to_native_types(self, slicer=None, **kwargs):\n    \"\"\"\n    Format specified values of `self` and return them.\n\n    Parameters\n    ----------\n    slicer : int, array-like\n        An indexer into `self` that specifies which values\n        are used in the formatting process.\n    kwargs : dict\n        Options for specifying how the values should be formatted.\n        These options include the following:\n\n        1) na_rep : str\n            The value that serves as a placeholder for NULL values\n        2) quoting : bool or None\n            Whether or not there are quoted values in `self`\n        3) date_format : str\n            The format used to represent date-like values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Formatted values.\n    \"\"\"\n    values = self\n    if slicer is not None:\n        values = values[slicer]\n    return values._format_native_types(**kwargs)",
                "def _format_native_types(self, na_rep=\"\", quoting=None, **kwargs):\n    \"\"\"\n    Actually format specific types of the index.\n    \"\"\"\n    mask = isna(self)\n    if not self.is_object() and not quoting:\n        values = np.asarray(self).astype(str)\n    else:\n        values = np.array(self, dtype=object, copy=True)\n\n    values[mask] = na_rep\n    return values",
                "def _summary(self, name=None) -> str_t:\n    \"\"\"\n    Return a summarized representation.\n\n    Parameters\n    ----------\n    name : str\n        name to use in the summary representation\n\n    Returns\n    -------\n    String with a summarized representation of the index\n    \"\"\"\n    if len(self) > 0:\n        head = self[0]\n        if hasattr(head, \"format\") and not isinstance(head, str):\n            head = head.format()\n        tail = self[-1]\n        if hasattr(tail, \"format\") and not isinstance(tail, str):\n            tail = tail.format()\n        index_summary = f\", {head} to {tail}\"\n    else:\n        index_summary = \"\"\n\n    if name is None:\n        name = type(self).__name__\n    return f\"{name}: {len(self)} entries{index_summary}\"",
                "def to_flat_index(self):\n    \"\"\"\n    Identity method.\n\n    .. versionadded:: 0.24.0\n\n    This is implemented for compatibility with subclass implementations\n    when chaining.\n\n    Returns\n    -------\n    pd.Index\n        Caller.\n\n    See Also\n    --------\n    MultiIndex.to_flat_index : Subclass implementation.\n    \"\"\"\n    return self",
                "def to_series(self, index=None, name=None):\n    \"\"\"\n    Create a Series with both index and values equal to the index keys.\n\n    Useful with map for returning an indexer based on an index.\n\n    Parameters\n    ----------\n    index : Index, optional\n        Index of resulting Series. If None, defaults to original index.\n    name : str, optional\n        Dame of resulting Series. If None, defaults to name of original\n        index.\n\n    Returns\n    -------\n    Series\n        The dtype will be based on the type of the Index values.\n    \"\"\"\n    from pandas import Series\n\n    if index is None:\n        index = self._shallow_copy()\n    if name is None:\n        name = self.name\n\n    return Series(self.values.copy(), index=index, name=name)",
                "def to_frame(self, index: bool = True, name=None):\n    \"\"\"\n    Create a DataFrame with a column containing the Index.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    index : bool, default True\n        Set the index of the returned DataFrame as the original Index.\n\n    name : object, default None\n        The passed name should substitute for the index name (if it has\n        one).\n\n    Returns\n    -------\n    DataFrame\n        DataFrame containing the original Index data.\n\n    See Also\n    --------\n    Index.to_series : Convert an Index to a Series.\n    Series.to_frame : Convert Series to DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\n    >>> idx.to_frame()\n           animal\n    animal\n    Ant       Ant\n    Bear     Bear\n    Cow       Cow\n\n    By default, the original Index is reused. To enforce a new Index:\n\n    >>> idx.to_frame(index=False)\n        animal\n    0   Ant\n    1  Bear\n    2   Cow\n\n    To override the name of the resulting column, specify `name`:\n\n    >>> idx.to_frame(index=False, name='zoo')\n        zoo\n    0   Ant\n    1  Bear\n    2   Cow\n    \"\"\"\n    from pandas import DataFrame\n\n    if name is None:\n        name = self.name or 0\n    result = DataFrame({name: self._values.copy()})\n\n    if index:\n        result.index = self\n    return result",
                "@property\ndef name(self):\n    \"\"\"\n    Return Index or MultiIndex name.\n    \"\"\"\n    return self._name",
                "@name.setter\ndef name(self, value):\n    if self._no_setting_name:\n        # Used in MultiIndex.levels to avoid silently ignoring name updates.\n        raise RuntimeError(\n            \"Cannot set name on a level of a MultiIndex. Use \"\n            \"'MultiIndex.set_names' instead.\"\n        )\n    maybe_extract_name(value, None, type(self))\n    self._name = value",
                "def _validate_names(self, name=None, names=None, deep: bool = False):\n    \"\"\"\n    Handles the quirks of having a singular 'name' parameter for general\n    Index and plural 'names' parameter for MultiIndex.\n    \"\"\"\n    from copy import deepcopy\n\n    if names is not None and name is not None:\n        raise TypeError(\"Can only provide one of `names` and `name`\")\n    elif names is None and name is None:\n        return deepcopy(self.names) if deep else self.names\n    elif names is not None:\n        if not is_list_like(names):\n            raise TypeError(\"Must pass list-like as `names`.\")\n        return names\n    else:\n        if not is_list_like(name):\n            return [name]\n        return name",
                "def _get_names(self):\n    return FrozenList((self.name,))",
                "def _set_names(self, values, level=None):\n    \"\"\"\n    Set new names on index. Each name has to be a hashable type.\n\n    Parameters\n    ----------\n    values : str or sequence\n        name(s) to set\n    level : int, level name, or sequence of int/level names (default None)\n        If the index is a MultiIndex (hierarchical), level(s) to set (None\n        for all levels).  Otherwise level must be None\n\n    Raises\n    ------\n    TypeError if each name is not hashable.\n    \"\"\"\n    if not is_list_like(values):\n        raise ValueError(\"Names must be a list-like\")\n    if len(values) != 1:\n        raise ValueError(f\"Length of new names must be 1, got {len(values)}\")\n\n    # GH 20527\n    # All items in 'name' need to be hashable:\n    for name in values:\n        if not is_hashable(name):\n            raise TypeError(f\"{type(self).__name__}.name must be a hashable type\")\n    self._name = values[0]",
                "def set_names(self, names, level=None, inplace: bool = False):\n    \"\"\"\n    Set Index or MultiIndex name.\n\n    Able to set new names partially and by level.\n\n    Parameters\n    ----------\n    names : label or list of label\n        Name(s) to set.\n    level : int, label or list of int or label, optional\n        If the index is a MultiIndex, level(s) to set (None for all\n        levels). Otherwise level must be None.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.rename : Able to set new names without level.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n    >>> idx.set_names('quarter')\n    Int64Index([1, 2, 3, 4], dtype='int64', name='quarter')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               )\n    >>> idx.set_names(['kind', 'year'], inplace=True)\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.set_names('species', level=0)\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    \"\"\"\n    if level is not None and not isinstance(self, ABCMultiIndex):\n        raise ValueError(\"Level must be None for non-MultiIndex\")\n\n    if level is not None and not is_list_like(level) and is_list_like(names):\n        raise TypeError(\"Names must be a string when a single level is provided.\")\n\n    if not is_list_like(names) and level is None and self.nlevels > 1:\n        raise TypeError(\"Must pass list-like as `names`.\")\n\n    if not is_list_like(names):\n        names = [names]\n    if level is not None and not is_list_like(level):\n        level = [level]\n\n    if inplace:\n        idx = self\n    else:\n        idx = self._shallow_copy()\n    idx._set_names(names, level=level)\n    if not inplace:\n        return idx",
                "def rename(self, name, inplace=False):\n    \"\"\"\n    Alter Index or MultiIndex name.\n\n    Able to set new names without level. Defaults to returning new index.\n    Length of names must match number of levels in MultiIndex.\n\n    Parameters\n    ----------\n    name : label or list of labels\n        Name(s) to set.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Index or\n        MultiIndex.\n\n    Returns\n    -------\n    Index\n        The same type as the caller or None if inplace is True.\n\n    See Also\n    --------\n    Index.set_names : Able to set new names partially and by level.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\n    >>> idx.rename('grade')\n    Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')\n\n    >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],\n    ...                                   [2018, 2019]],\n    ...                                   names=['kind', 'year'])\n    >>> idx\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['kind', 'year'])\n    >>> idx.rename(['species', 'year'])\n    MultiIndex([('python', 2018),\n                ('python', 2019),\n                ( 'cobra', 2018),\n                ( 'cobra', 2019)],\n               names=['species', 'year'])\n    >>> idx.rename('species')\n    Traceback (most recent call last):\n    TypeError: Must pass list-like as `names`.\n    \"\"\"\n    return self.set_names([name], inplace=inplace)",
                "@property\ndef nlevels(self) -> int:\n    \"\"\"\n    Number of levels.\n    \"\"\"\n    return 1",
                "def _sort_levels_monotonic(self):\n    \"\"\"\n    Compat with MultiIndex.\n    \"\"\"\n    return self",
                "def _validate_index_level(self, level):\n    \"\"\"\n    Validate index level.\n\n    For single-level Index getting level number is a no-op, but some\n    verification must be done like in MultiIndex.\n\n    \"\"\"\n    if isinstance(level, int):\n        if level < 0 and level != -1:\n            raise IndexError(\n                \"Too many levels: Index has only 1 level, \"\n                f\"{level} is not a valid level number\"\n            )\n        elif level > 0:\n            raise IndexError(\n                f\"Too many levels: Index has only 1 level, not {level + 1}\"\n            )\n    elif level != self.name:\n        raise KeyError(\n            f\"Requested level ({level}) does not match index name ({self.name})\"\n        )",
                "def _get_level_number(self, level) -> int:\n    self._validate_index_level(level)\n    return 0",
                "def sortlevel(self, level=None, ascending=True, sort_remaining=None):\n    \"\"\"\n    For internal compatibility with with the Index API.\n\n    Sort the Index. This is for compat with MultiIndex\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        False to sort in descending order\n\n    level, sort_remaining are compat parameters\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    return self.sort_values(return_indexer=True, ascending=ascending)",
                "def _get_level_values(self, level):\n    \"\"\"\n    Return an Index of values for requested level.\n\n    This is primarily useful to get an individual level of values from a\n    MultiIndex, but is provided on Index as well for compatibility.\n\n    Parameters\n    ----------\n    level : int or str\n        It is either the integer position or the name of the level.\n\n    Returns\n    -------\n    Index\n        Calling object, as there is only one level in the Index.\n\n    See Also\n    --------\n    MultiIndex.get_level_values : Get values for a level of a MultiIndex.\n\n    Notes\n    -----\n    For Index, level should be 0, since there are no multiple levels.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abc'))\n    >>> idx\n    Index(['a', 'b', 'c'], dtype='object')\n\n    Get level values by supplying `level` as integer:\n\n    >>> idx.get_level_values(0)\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n    self._validate_index_level(level)\n    return self",
                "def droplevel(self, level=0):\n    \"\"\"\n    Return index with requested level(s) removed.\n\n    If resulting index has only 1 level left, the result will be\n    of Index type, not MultiIndex.\n\n    .. versionadded:: 0.23.1 (support for non-MultiIndex)\n\n    Parameters\n    ----------\n    level : int, str, or list-like, default 0\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or indexes of levels.\n\n    Returns\n    -------\n    Index or MultiIndex\n    \"\"\"\n    if not isinstance(level, (tuple, list)):\n        level = [level]\n\n    levnums = sorted(self._get_level_number(lev) for lev in level)[::-1]\n\n    if len(level) == 0:\n        return self\n    if len(level) >= self.nlevels:\n        raise ValueError(\n            f\"Cannot remove {len(level)} levels from an index with {self.nlevels} \"\n            \"levels: at least one level must be left.\"\n        )\n    # The two checks above guarantee that here self is a MultiIndex\n\n    new_levels = list(self.levels)\n    new_codes = list(self.codes)\n    new_names = list(self.names)\n\n    for i in levnums:\n        new_levels.pop(i)\n        new_codes.pop(i)\n        new_names.pop(i)\n\n    if len(new_levels) == 1:\n\n        # set nan if needed\n        mask = new_codes[0] == -1\n        result = new_levels[0].take(new_codes[0])\n        if mask.any():\n            result = result.putmask(mask, np.nan)\n\n        result._name = new_names[0]\n        return result\n    else:\n        from pandas.core.indexes.multi import MultiIndex\n\n        return MultiIndex(\n            levels=new_levels,\n            codes=new_codes,\n            names=new_names,\n            verify_integrity=False,\n        )",
                "def _get_grouper_for_level(self, mapper, level=None):\n    \"\"\"\n    Get index grouper corresponding to an index level\n\n    Parameters\n    ----------\n    mapper: Group mapping function or None\n        Function mapping index values to groups\n    level : int or None\n        Index level\n\n    Returns\n    -------\n    grouper : Index\n        Index of values to group on.\n    labels : ndarray of int or None\n        Array of locations in level_index.\n    uniques : Index or None\n        Index of unique values for level.\n    \"\"\"\n    assert level is None or level == 0\n    if mapper is None:\n        grouper = self\n    else:\n        grouper = self.map(mapper)\n\n    return grouper, None, None",
                "@property\ndef is_monotonic(self) -> bool:\n    \"\"\"\n    Alias for is_monotonic_increasing.\n    \"\"\"\n    return self.is_monotonic_increasing",
                "@property\ndef is_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic increasing (only equal or\n    increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3]).is_monotonic_increasing\n    True\n    >>> Index([1, 2, 2]).is_monotonic_increasing\n    True\n    >>> Index([1, 3, 2]).is_monotonic_increasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_increasing",
                "@property\ndef is_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is monotonic decreasing (only equal or\n    decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1]).is_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2]).is_monotonic_decreasing\n    True\n    >>> Index([3, 1, 2]).is_monotonic_decreasing\n    False\n    \"\"\"\n    return self._engine.is_monotonic_decreasing",
                "@property\ndef _is_strictly_monotonic_increasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic increasing\n    (only increasing) values.\n\n    Examples\n    --------\n    >>> Index([1, 2, 3])._is_strictly_monotonic_increasing\n    True\n    >>> Index([1, 2, 2])._is_strictly_monotonic_increasing\n    False\n    >>> Index([1, 3, 2])._is_strictly_monotonic_increasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_increasing",
                "@property\ndef _is_strictly_monotonic_decreasing(self) -> bool:\n    \"\"\"\n    Return if the index is strictly monotonic decreasing\n    (only decreasing) values.\n\n    Examples\n    --------\n    >>> Index([3, 2, 1])._is_strictly_monotonic_decreasing\n    True\n    >>> Index([3, 2, 2])._is_strictly_monotonic_decreasing\n    False\n    >>> Index([3, 1, 2])._is_strictly_monotonic_decreasing\n    False\n    \"\"\"\n    return self.is_unique and self.is_monotonic_decreasing",
                "@cache_readonly\ndef is_unique(self) -> bool:\n    \"\"\"\n    Return if the index has unique values.\n    \"\"\"\n    return self._engine.is_unique",
                "@property\ndef has_duplicates(self) -> bool:\n    \"\"\"\n    Check if the Index has duplicate values.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index has duplicate values.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 5, 7, 7])\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([1, 5, 7])\n    >>> idx.has_duplicates\n    False\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    True\n\n    >>> idx = pd.Index([\"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.has_duplicates\n    False\n    \"\"\"\n    return not self.is_unique",
                "def is_boolean(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of booleans.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of booleans.\n\n    See Also\n    --------\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([True, False, True])\n    >>> idx.is_boolean()\n    True\n\n    >>> idx = pd.Index([\"True\", \"False\", \"True\"])\n    >>> idx.is_boolean()\n    False\n\n    >>> idx = pd.Index([True, False, \"True\"])\n    >>> idx.is_boolean()\n    False\n    \"\"\"\n    return self.inferred_type in [\"boolean\"]",
                "def is_integer(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of integers.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of integers.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_integer()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_integer()\n    False\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_integer()\n    False\n    \"\"\"\n    return self.inferred_type in [\"integer\"]",
                "def is_floating(self) -> bool:\n    \"\"\"\n    Check if the Index is a floating type.\n\n    The Index may consist of only floats, NaNs, or a mix of floats,\n    integers, or NaNs.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of only consists of floats, NaNs, or\n        a mix of floats, integers, or NaNs.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4, np.nan])\n    >>> idx.is_floating()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_floating()\n    False\n    \"\"\"\n    return self.inferred_type in [\"floating\", \"mixed-integer-float\", \"integer-na\"]",
                "def is_numeric(self) -> bool:\n    \"\"\"\n    Check if the Index only consists of numeric data.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index only consists of numeric data.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])\n    >>> idx.is_numeric()\n    True\n\n    >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\n    >>> idx.is_numeric()\n    False\n    \"\"\"\n    return self.inferred_type in [\"integer\", \"floating\"]",
                "def is_object(self) -> bool:\n    \"\"\"\n    Check if the Index is of the object dtype.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index is of the object dtype.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Apple\", \"Mango\", 2.0])\n    >>> idx.is_object()\n    True\n\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.is_object()\n    False\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])\n    >>> idx.is_object()\n    False\n    \"\"\"\n    return is_object_dtype(self.dtype)",
                "def is_categorical(self) -> bool:\n    \"\"\"\n    Check if the Index holds categorical data.\n\n    Returns\n    -------\n    bool\n        True if the Index is categorical.\n\n    See Also\n    --------\n    CategoricalIndex : Index for categorical data.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_interval : Check if the Index holds Interval objects.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n    ...                 \"Watermelon\"]).astype(\"category\")\n    >>> idx.is_categorical()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_categorical()\n    False\n\n    >>> s = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\n    >>> s\n    0        Peter\n    1       Victor\n    2    Elisabeth\n    3          Mar\n    dtype: object\n    >>> s.index.is_categorical()\n    False\n    \"\"\"\n    return self.inferred_type in [\"categorical\"]",
                "def is_interval(self) -> bool:\n    \"\"\"\n    Check if the Index holds Interval objects.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds Interval objects.\n\n    See Also\n    --------\n    IntervalIndex : Index for Interval objects.\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_mixed : Check if the Index holds data with mixed data types.\n\n    Examples\n    --------\n    >>> idx = pd.Index([pd.Interval(left=0, right=5),\n    ...                 pd.Interval(left=5, right=10)])\n    >>> idx.is_interval()\n    True\n\n    >>> idx = pd.Index([1, 3, 5, 7])\n    >>> idx.is_interval()\n    False\n    \"\"\"\n    return self.inferred_type in [\"interval\"]",
                "def is_mixed(self) -> bool:\n    \"\"\"\n    Check if the Index holds data with mixed data types.\n\n    Returns\n    -------\n    bool\n        Whether or not the Index holds data with mixed data types.\n\n    See Also\n    --------\n    is_boolean : Check if the Index only consists of booleans.\n    is_integer : Check if the Index only consists of integers.\n    is_floating : Check if the Index is a floating type.\n    is_numeric : Check if the Index only consists of numeric data.\n    is_object : Check if the Index is of the object dtype.\n    is_categorical : Check if the Index holds categorical data.\n    is_interval : Check if the Index holds Interval objects.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', np.nan, 'b'])\n    >>> idx.is_mixed()\n    True\n\n    >>> idx = pd.Index([1.0, 2.0, 3.0, 5.0])\n    >>> idx.is_mixed()\n    False\n    \"\"\"\n    warnings.warn(\n        \"Index.is_mixed is deprecated and will be removed in a future version. \"\n        \"Check index.inferred_type directly instead.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.inferred_type in [\"mixed\"]",
                "def holds_integer(self) -> bool:\n    \"\"\"\n    Whether the type is an integer type.\n    \"\"\"\n    return self.inferred_type in [\"integer\", \"mixed-integer\"]",
                "@cache_readonly\ndef inferred_type(self) -> str_t:\n    \"\"\"\n    Return a string of the type inferred from the values.\n    \"\"\"\n    return lib.infer_dtype(self._values, skipna=False)",
                "@cache_readonly\ndef is_all_dates(self) -> bool:\n    \"\"\"\n    Whether or not the index values only consist of dates.\n    \"\"\"\n    return is_datetime_array(ensure_object(self._values))",
                "def __reduce__(self):\n    d = dict(data=self._data)\n    d.update(self._get_attributes_dict())\n    return _new_Index, (type(self), d), None",
                "@cache_readonly\ndef _isnan(self):\n    \"\"\"\n    Return if each value is NaN.\n    \"\"\"\n    if self._can_hold_na:\n        return isna(self)\n    else:\n        # shouldn't reach to this condition by checking hasnans beforehand\n        values = np.empty(len(self), dtype=np.bool_)\n        values.fill(False)\n        return values",
                "@cache_readonly\ndef _nan_idxs(self):\n    if self._can_hold_na:\n        return self._isnan.nonzero()[0]\n    else:\n        return np.array([], dtype=np.int64)",
                "@cache_readonly\ndef hasnans(self) -> bool:\n    \"\"\"\n    Return if I have any nans; enables various perf speedups.\n    \"\"\"\n    if self._can_hold_na:\n        return bool(self._isnan.any())\n    else:\n        return False",
                "def isna(self):\n    \"\"\"\n    Detect missing values.\n\n    Return a boolean same-sized object indicating if the values are NA.\n    NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get\n    mapped to ``True`` values.\n    Everything else get mapped to ``False`` values. Characters such as\n    empty strings `''` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n    Returns\n    -------\n    numpy.ndarray\n        A boolean array of whether my values are NA.\n\n    See Also\n    --------\n    Index.notna : Boolean inverse of isna.\n    Index.dropna : Omit entries with missing values.\n    isna : Top-level isna.\n    Series.isna : Detect missing values in Series object.\n\n    Examples\n    --------\n    Show which entries in a pandas.Index are NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.isna()\n    array([False, False,  True])\n\n    Empty strings are not considered NA values. None is considered an NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.isna()\n    array([False, False, False,  True])\n\n    For datetimes, `NaT` (Not a Time) is considered as an NA value.\n\n    >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),\n    ...                         pd.Timestamp(''), None, pd.NaT])\n    >>> idx\n    DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],\n                  dtype='datetime64[ns]', freq=None)\n    >>> idx.isna()\n    array([False,  True,  True,  True])\n    \"\"\"\n    return self._isnan",
                "def notna(self):\n    \"\"\"\n    Detect existing (non-missing) values.\n\n    Return a boolean same-sized object indicating if the values are not NA.\n    Non-missing values get mapped to ``True``. Characters such as empty\n    strings ``''`` or :attr:`numpy.inf` are not considered NA values\n    (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n    NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``\n    values.\n\n    Returns\n    -------\n    numpy.ndarray\n        Boolean array to indicate which entries are not NA.\n\n    See Also\n    --------\n    Index.notnull : Alias of notna.\n    Index.isna: Inverse of notna.\n    notna : Top-level notna.\n\n    Examples\n    --------\n    Show which entries in an Index are not NA. The result is an\n    array.\n\n    >>> idx = pd.Index([5.2, 6.0, np.NaN])\n    >>> idx\n    Float64Index([5.2, 6.0, nan], dtype='float64')\n    >>> idx.notna()\n    array([ True,  True, False])\n\n    Empty strings are not considered NA values. None is considered a NA\n    value.\n\n    >>> idx = pd.Index(['black', '', 'red', None])\n    >>> idx\n    Index(['black', '', 'red', None], dtype='object')\n    >>> idx.notna()\n    array([ True,  True,  True, False])\n    \"\"\"\n    return ~self.isna()",
                "def fillna(self, value=None, downcast=None):\n    \"\"\"\n    Fill NA/NaN values with the specified value.\n\n    Parameters\n    ----------\n    value : scalar\n        Scalar value to use to fill holes (e.g. 0).\n        This value cannot be a list-likes.\n    downcast : dict, default is None\n        A dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    Index\n\n    See Also\n    --------\n    DataFrame.fillna : Fill NaN values of a DataFrame.\n    Series.fillna : Fill NaN Values of a Series.\n    \"\"\"\n    self._assert_can_do_op(value)\n    if self.hasnans:\n        result = self.putmask(self._isnan, value)\n        if downcast is None:\n            # no need to care metadata other than name\n            # because it can't have freq if\n            return Index(result, name=self.name)\n    return self._shallow_copy()",
                "def dropna(self, how=\"any\"):\n    \"\"\"\n    Return Index without NA/NaN values.\n\n    Parameters\n    ----------\n    how : {'any', 'all'}, default 'any'\n        If the Index is a MultiIndex, drop the value when any or all levels\n        are NaN.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if how not in (\"any\", \"all\"):\n        raise ValueError(f\"invalid how option: {how}\")\n\n    if self.hasnans:\n        return self._shallow_copy(self._values[~self._isnan])\n    return self._shallow_copy()",
                "def unique(self, level=None):\n    \"\"\"\n    Return unique values in the index. Uniques are returned in order\n    of appearance, this does NOT sort.\n\n    Parameters\n    ----------\n    level : int or str, optional, default None\n        Only return values from specified level (for MultiIndex).\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    Index without duplicates\n\n    See Also\n    --------\n    unique\n    Series.unique\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    result = super().unique()\n    return self._shallow_copy(result)",
                "def drop_duplicates(self, keep=\"first\"):\n    \"\"\"\n    Return Index with duplicate values removed.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', ``False``}, default 'first'\n        - 'first' : Drop duplicates except for the first occurrence.\n        - 'last' : Drop duplicates except for the last occurrence.\n        - ``False`` : Drop all duplicates.\n\n    Returns\n    -------\n    deduplicated : Index\n\n    See Also\n    --------\n    Series.drop_duplicates : Equivalent method on Series.\n    DataFrame.drop_duplicates : Equivalent method on DataFrame.\n    Index.duplicated : Related method on Index, indicating duplicate\n        Index values.\n\n    Examples\n    --------\n    Generate an pandas.Index with duplicate values.\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])\n\n    The `keep` parameter controls  which duplicate values are removed.\n    The value 'first' keeps the first occurrence for each\n    set of duplicated entries. The default value of keep is 'first'.\n\n    >>> idx.drop_duplicates(keep='first')\n    Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')\n\n    The value 'last' keeps the last occurrence for each set of duplicated\n    entries.\n\n    >>> idx.drop_duplicates(keep='last')\n    Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')\n\n    The value ``False`` discards all sets of duplicated entries.\n\n    >>> idx.drop_duplicates(keep=False)\n    Index(['cow', 'beetle', 'hippo'], dtype='object')\n    \"\"\"\n    return super().drop_duplicates(keep=keep)",
                "def duplicated(self, keep=\"first\"):\n    \"\"\"\n    Indicate duplicate index values.\n\n    Duplicated values are indicated as ``True`` values in the resulting\n    array. Either all duplicates, all except the first, or all except the\n    last occurrence of duplicates can be indicated.\n\n    Parameters\n    ----------\n    keep : {'first', 'last', False}, default 'first'\n        The value or values in a set of duplicates to mark as missing.\n\n        - 'first' : Mark duplicates as ``True`` except for the first\n          occurrence.\n        - 'last' : Mark duplicates as ``True`` except for the last\n          occurrence.\n        - ``False`` : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.duplicated : Equivalent method on pandas.Series.\n    DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n    Index.drop_duplicates : Remove duplicate values from Index.\n\n    Examples\n    --------\n    By default, for each set of duplicated values, the first occurrence is\n    set to False and all others to True:\n\n    >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])\n    >>> idx.duplicated()\n    array([False, False,  True, False,  True])\n\n    which is equivalent to\n\n    >>> idx.duplicated(keep='first')\n    array([False, False,  True, False,  True])\n\n    By using 'last', the last occurrence of each set of duplicated values\n    is set on False and all others on True:\n\n    >>> idx.duplicated(keep='last')\n    array([ True, False,  True, False, False])\n\n    By setting keep on ``False``, all duplicates are True:\n\n    >>> idx.duplicated(keep=False)\n    array([ True, False,  True, False,  True])\n    \"\"\"\n    return super().duplicated(keep=keep)",
                "def _get_unique_index(self, dropna: bool = False):\n    \"\"\"\n    Returns an index containing unique values.\n\n    Parameters\n    ----------\n    dropna : bool, default False\n        If True, NaN values are dropped.\n\n    Returns\n    -------\n    uniques : index\n    \"\"\"\n    if self.is_unique and not dropna:\n        return self\n\n    if not self.is_unique:\n        values = self.unique()\n        if not isinstance(self, ABCMultiIndex):\n            # extract an array to pass to _shallow_copy\n            values = values._data\n    else:\n        values = self._values\n\n    if dropna:\n        try:\n            if self.hasnans:\n                values = values[~isna(values)]\n        except NotImplementedError:\n            pass\n\n    return self._shallow_copy(values)",
                "def __add__(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame)):\n        return NotImplemented\n    from pandas import Series\n\n    return Index(Series(self) + other)",
                "def __radd__(self, other):\n    from pandas import Series\n\n    return Index(other + Series(self))",
                "def __iadd__(self, other):\n    # alias for __add__\n    return self + other",
                "def __sub__(self, other):\n    return Index(np.array(self) - other)",
                "def __rsub__(self, other):\n    # wrap Series to ensure we pin name correctly\n    from pandas import Series\n\n    return Index(other - Series(self))",
                "def __and__(self, other):\n    return self.intersection(other)",
                "def __or__(self, other):\n    return self.union(other)",
                "def __xor__(self, other):\n    return self.symmetric_difference(other)",
                "def __nonzero__(self):\n    raise ValueError(\n        f\"The truth value of a {type(self).__name__} is ambiguous. \"\n        \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n    )",
                "def _get_reconciled_name_object(self, other):\n    \"\"\"\n    If the result of a set operation will be self,\n    return self, unless the name changes, in which\n    case make a shallow copy of self.\n    \"\"\"\n    name = get_op_result_name(self, other)\n    if self.name != name:\n        return self._shallow_copy(name=name)\n    return self",
                "def _union_incompatible_dtypes(self, other, sort):\n    \"\"\"\n    Casts this and other index to object dtype to allow the formation\n    of a union between incompatible types.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    this = self.astype(object, copy=False)\n    # cast to Index for when `other` is list-like\n    other = Index(other).astype(object, copy=False)\n    return Index.union(this, other, sort=sort).astype(object, copy=False)",
                "def _is_compatible_with_other(self, other) -> bool:\n    \"\"\"\n    Check whether this and the other dtype are compatible with each other.\n    Meaning a union can be formed between them without needing to be cast\n    to dtype object.\n\n    Parameters\n    ----------\n    other : Index or array-like\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return type(self) is type(other) and is_dtype_equal(self.dtype, other.dtype)",
                "def _validate_sort_keyword(self, sort):\n    if sort not in [None, False]:\n        raise ValueError(\n            \"The 'sort' keyword only takes the values of \"\n            f\"None or False; {sort} was passed.\"\n        )",
                "def union(self, other, sort=None):\n    \"\"\"\n    Form the union of two Index objects.\n\n    If the Index objects are incompatible, both Index objects will be\n    cast to dtype('object') first.\n\n        .. versionchanged:: 0.25.0\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : bool or None, default None\n        Whether to sort the resulting Index.\n\n        * None : Sort the result, except when\n\n          1. `self` and `other` are equal.\n          2. `self` or `other` has length 0.\n          3. Some values in `self` or `other` cannot be compared.\n             A RuntimeWarning is issued in this case.\n\n        * False : do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    union : Index\n\n    Examples\n    --------\n    Union matching dtypes\n\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.union(idx2)\n    Int64Index([1, 2, 3, 4, 5, 6], dtype='int64')\n\n    Union mismatched dtypes\n\n    >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])\n    >>> idx2 = pd.Index([1, 2, 3, 4])\n    >>> idx1.union(idx2)\n    Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n\n    if not self._is_compatible_with_other(other):\n        return self._union_incompatible_dtypes(other, sort=sort)\n\n    return self._union(other, sort=sort)",
                "def _union(self, other, sort):\n    \"\"\"\n    Specific union logic should go here. In subclasses, union behavior\n    should be overwritten here rather than in `self.union`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if not len(other) or self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if not len(self):\n        return other._get_reconciled_name_object(self)\n\n    # TODO(EA): setops-refactor, clean all this up\n    lvals = self._values\n    rvals = other._values\n\n    if sort is None and self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._outer_indexer(lvals, rvals)[0]\n        except TypeError:\n            # incomparable objects\n            result = list(lvals)\n\n            # worth making this faster? a very unusual case\n            value_set = set(lvals)\n            result.extend([x for x in rvals if x not in value_set])\n            result = Index(result)._values  # do type inference here\n    else:\n        # find indexes of things in \"other\" that are not in \"self\"\n        if self.is_unique:\n            indexer = self.get_indexer(other)\n            indexer = (indexer == -1).nonzero()[0]\n        else:\n            indexer = algos.unique1d(self.get_indexer_non_unique(other)[1])\n\n        if len(indexer) > 0:\n            other_diff = algos.take_nd(rvals, indexer, allow_fill=False)\n            result = concat_compat((lvals, other_diff))\n\n        else:\n            result = lvals\n\n        if sort is None:\n            try:\n                result = algos.safe_sort(result)\n            except TypeError as err:\n                warnings.warn(\n                    f\"{err}, sort order is undefined for incomparable objects\",\n                    RuntimeWarning,\n                    stacklevel=3,\n                )\n\n    # for subclasses\n    return self._wrap_setop_result(other, result)",
                "def _wrap_setop_result(self, other, result):\n    name = get_op_result_name(self, other)\n    return self._shallow_copy(result, name=name)",
                "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two Index objects.\n\n    This returns a new Index with elements common to the index and `other`.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Whether to sort the resulting index.\n\n        * False : do not sort the result.\n        * None : sort the result, except when `self` and `other` are equal\n          or when the values cannot be compared.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default from ``True`` to ``False``, to match\n           the behaviour of 0.23.4 and earlier.\n\n    Returns\n    -------\n    intersection : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.intersection(idx2)\n    Int64Index([3, 4], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other = ensure_index(other)\n\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype(\"O\")\n        other = other.astype(\"O\")\n        return this.intersection(other, sort=sort)\n\n    # TODO(EA): setops-refactor, clean all this up\n    lvals = self._values\n    rvals = other._values\n\n    if self.is_monotonic and other.is_monotonic:\n        try:\n            result = self._inner_indexer(lvals, rvals)[0]\n        except TypeError:\n            pass\n        else:\n            return self._wrap_setop_result(other, result)\n\n    try:\n        indexer = Index(rvals).get_indexer(lvals)\n        indexer = indexer.take((indexer != -1).nonzero()[0])\n    except (InvalidIndexError, IncompatibleFrequency):\n        # InvalidIndexError raised by get_indexer if non-unique\n        # IncompatibleFrequency raised by PeriodIndex.get_indexer\n        indexer = algos.unique1d(Index(rvals).get_indexer_non_unique(lvals)[0])\n        indexer = indexer[indexer != -1]\n\n    taken = other.take(indexer)\n    res_name = get_op_result_name(self, other)\n\n    if sort is None:\n        taken = algos.safe_sort(taken.values)\n        return self._shallow_copy(taken, name=res_name)\n\n    taken.name = res_name\n    return taken",
                "def difference(self, other, sort=None):\n    \"\"\"\n    Return a new Index with elements from the index that are not in\n    `other`.\n\n    This is the set difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    difference : Index\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([2, 1, 3, 4])\n    >>> idx2 = pd.Index([3, 4, 5, 6])\n    >>> idx1.difference(idx2)\n    Int64Index([1, 2], dtype='int64')\n    >>> idx1.difference(idx2, sort=False)\n    Int64Index([2, 1], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n\n    if self.equals(other):\n        # pass an empty np.ndarray with the appropriate dtype\n        return self._shallow_copy(self._data[:0])\n\n    other, result_name = self._convert_can_do_setop(other)\n\n    this = self._get_unique_index()\n\n    indexer = this.get_indexer(other)\n    indexer = indexer.take((indexer != -1).nonzero()[0])\n\n    label_diff = np.setdiff1d(np.arange(this.size), indexer, assume_unique=True)\n    the_diff = this.values.take(label_diff)\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n\n    return this._shallow_copy(the_diff, name=result_name)",
                "def symmetric_difference(self, other, result_name=None, sort=None):\n    \"\"\"\n    Compute the symmetric difference of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    result_name : str\n    sort : False or None, default None\n        Whether to sort the resulting index. By default, the\n        values are attempted to be sorted, but any TypeError from\n        incomparable elements is caught by pandas.\n\n        * None : Attempt to sort the result, but catch any TypeErrors\n          from comparing incomparable elements.\n        * False : Do not sort the result.\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default value from ``True`` to ``None``\n           (without change in behaviour).\n\n    Returns\n    -------\n    symmetric_difference : Index\n\n    Notes\n    -----\n    ``symmetric_difference`` contains elements that appear in either\n    ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by\n    ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates\n    dropped.\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3, 4])\n    >>> idx2 = pd.Index([2, 3, 4, 5])\n    >>> idx1.symmetric_difference(idx2)\n    Int64Index([1, 5], dtype='int64')\n\n    You can also use the ``^`` operator:\n\n    >>> idx1 ^ idx2\n    Int64Index([1, 5], dtype='int64')\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    other, result_name_update = self._convert_can_do_setop(other)\n    if result_name is None:\n        result_name = result_name_update\n\n    this = self._get_unique_index()\n    other = other._get_unique_index()\n    indexer = this.get_indexer(other)\n\n    # {this} minus {other}\n    common_indexer = indexer.take((indexer != -1).nonzero()[0])\n    left_indexer = np.setdiff1d(\n        np.arange(this.size), common_indexer, assume_unique=True\n    )\n    left_diff = this._values.take(left_indexer)\n\n    # {other} minus {this}\n    right_indexer = (indexer == -1).nonzero()[0]\n    right_diff = other._values.take(right_indexer)\n\n    the_diff = concat_compat([left_diff, right_diff])\n    if sort is None:\n        try:\n            the_diff = algos.safe_sort(the_diff)\n        except TypeError:\n            pass\n\n    return Index(the_diff, dtype=self.dtype, name=result_name)",
                "def _assert_can_do_setop(self, other):\n    if not is_list_like(other):\n        raise TypeError(\"Input must be Index or array-like\")\n    return True",
                "def _convert_can_do_setop(self, other):\n    if not isinstance(other, Index):\n        other = Index(other, name=self.name)\n        result_name = self.name\n    else:\n        result_name = get_op_result_name(self, other)\n    return other, result_name",
                "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location, slice or boolean mask for requested label.\n\n    Parameters\n    ----------\n    key : label\n    method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional\n        * default: exact matches only.\n        * pad / ffill: find the PREVIOUS index value if no exact match.\n        * backfill / bfill: use NEXT index value if no exact match\n        * nearest: use the NEAREST index value if no exact match. Tied\n          distances are broken by preferring the larger index value.\n    tolerance : int or float, optional\n        Maximum distance from index value for inexact matches. The value of\n        the index at the matching location most satisfy the equation\n        ``abs(index[loc] - key) <= tolerance``.\n\n    Returns\n    -------\n    loc : int if unique index, slice if monotonic index, else mask\n\n    Examples\n    --------\n    >>> unique_index = pd.Index(list('abc'))\n    >>> unique_index.get_loc('b')\n    1\n\n    >>> monotonic_index = pd.Index(list('abbc'))\n    >>> monotonic_index.get_loc('b')\n    slice(1, 3, None)\n\n    >>> non_monotonic_index = pd.Index(list('abcb'))\n    >>> non_monotonic_index.get_loc('b')\n    array([False,  True, False,  True])\n    \"\"\"\n    if method is None:\n        if tolerance is not None:\n            raise ValueError(\n                \"tolerance argument only valid if using pad, \"\n                \"backfill or nearest lookups\"\n            )\n        casted_key = self._maybe_cast_indexer(key)\n        try:\n            return self._engine.get_loc(casted_key)\n        except KeyError as err:\n            raise KeyError(key) from err\n\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n\n    indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n    if indexer.ndim > 1 or indexer.size > 1:\n        raise TypeError(\"get_loc requires scalar valued input\")\n    loc = indexer.item()\n    if loc == -1:\n        raise KeyError(key)\n    return loc",
                "@Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)\ndef get_indexer(\n    self, target, method=None, limit=None, tolerance=None\n) -> np.ndarray:\n    method = missing.clean_reindex_fill_method(method)\n    target = ensure_index(target)\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n\n    # Treat boolean labels passed to a numeric index as not found. Without\n    # this fix False and True would be treated as 0 and 1 respectively.\n    # (GH #16877)\n    if target.is_boolean() and self.is_numeric():\n        return ensure_platform_int(np.repeat(-1, target.size))\n\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer(\n            ptarget, method=method, limit=limit, tolerance=tolerance\n        )\n\n    if not is_dtype_equal(self.dtype, target.dtype):\n        this = self.astype(object)\n        target = target.astype(object)\n        return this.get_indexer(\n            target, method=method, limit=limit, tolerance=tolerance\n        )\n\n    if not self.is_unique:\n        raise InvalidIndexError(\n            \"Reindexing only valid with uniquely valued Index objects\"\n        )\n\n    if method == \"pad\" or method == \"backfill\":\n        indexer = self._get_fill_indexer(target, method, limit, tolerance)\n    elif method == \"nearest\":\n        indexer = self._get_nearest_indexer(target, limit, tolerance)\n    else:\n        if tolerance is not None:\n            raise ValueError(\n                \"tolerance argument only valid if doing pad, \"\n                \"backfill or nearest reindexing\"\n            )\n        if limit is not None:\n            raise ValueError(\n                \"limit argument only valid if doing pad, \"\n                \"backfill or nearest reindexing\"\n            )\n\n        indexer = self._engine.get_indexer(target._get_engine_target())\n\n    return ensure_platform_int(indexer)",
                "def _convert_tolerance(self, tolerance, target):\n    # override this method on subclasses\n    tolerance = np.asarray(tolerance)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError(\"list-like tolerance size must match target index size\")\n    return tolerance",
                "def _get_fill_indexer(\n    self, target: \"Index\", method: str_t, limit=None, tolerance=None\n) -> np.ndarray:\n\n    target_values = target._get_engine_target()\n\n    if self.is_monotonic_increasing and target.is_monotonic_increasing:\n        engine_method = (\n            self._engine.get_pad_indexer\n            if method == \"pad\"\n            else self._engine.get_backfill_indexer\n        )\n        indexer = engine_method(target_values, limit)\n    else:\n        indexer = self._get_fill_indexer_searchsorted(target, method, limit)\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target_values, indexer, tolerance)\n    return indexer",
                "def _get_fill_indexer_searchsorted(\n    self, target: \"Index\", method: str_t, limit=None\n) -> np.ndarray:\n    \"\"\"\n    Fallback pad/backfill get_indexer that works for monotonic decreasing\n    indexes and non-monotonic targets.\n    \"\"\"\n    if limit is not None:\n        raise ValueError(\n            f\"limit argument for {repr(method)} method only well-defined \"\n            \"if index and target are monotonic\"\n        )\n\n    side = \"left\" if method == \"pad\" else \"right\"\n\n    # find exact matches first (this simplifies the algorithm)\n    indexer = self.get_indexer(target)\n    nonexact = indexer == -1\n    indexer[nonexact] = self._searchsorted_monotonic(target[nonexact], side)\n    if side == \"left\":\n        # searchsorted returns \"indices into a sorted array such that,\n        # if the corresponding elements in v were inserted before the\n        # indices, the order of a would be preserved\".\n        # Thus, we need to subtract 1 to find values to the left.\n        indexer[nonexact] -= 1\n        # This also mapped not found values (values of 0 from\n        # np.searchsorted) to -1, which conveniently is also our\n        # sentinel for missing values\n    else:\n        # Mark indices to the right of the largest value as not found\n        indexer[indexer == len(self)] = -1\n    return indexer",
                "def _get_nearest_indexer(self, target: \"Index\", limit, tolerance) -> np.ndarray:\n    \"\"\"\n    Get the indexer for the nearest index labels; requires an index with\n    values that can be subtracted from each other (e.g., not strings or\n    tuples).\n    \"\"\"\n    left_indexer = self.get_indexer(target, \"pad\", limit=limit)\n    right_indexer = self.get_indexer(target, \"backfill\", limit=limit)\n\n    target_values = target._values\n    left_distances = np.abs(self._values[left_indexer] - target_values)\n    right_distances = np.abs(self._values[right_indexer] - target_values)\n\n    op = operator.lt if self.is_monotonic_increasing else operator.le\n    indexer = np.where(\n        op(left_distances, right_distances) | (right_indexer == -1),\n        left_indexer,\n        right_indexer,\n    )\n    if tolerance is not None:\n        indexer = self._filter_indexer_tolerance(target_values, indexer, tolerance)\n    return indexer",
                "def _filter_indexer_tolerance(\n    self,\n    target: Union[\"Index\", np.ndarray, ExtensionArray],\n    indexer: np.ndarray,\n    tolerance,\n) -> np.ndarray:\n    distance = abs(self._values[indexer] - target)\n    indexer = np.where(distance <= tolerance, indexer, -1)\n    return indexer",
                "def _get_partial_string_timestamp_match_key(self, key):\n    \"\"\"\n    Translate any partial string timestamp matches in key, returning the\n    new key.\n\n    Only relevant for MultiIndex.\n    \"\"\"\n    # GH#10331\n    return key",
                "def _validate_positional_slice(self, key: slice):\n    \"\"\"\n    For positional indexing, a slice must have either int or None\n    for each of start, stop, and step.\n    \"\"\"\n    self._validate_indexer(\"positional\", key.start, \"iloc\")\n    self._validate_indexer(\"positional\", key.stop, \"iloc\")\n    self._validate_indexer(\"positional\", key.step, \"iloc\")",
                "def _convert_slice_indexer(self, key: slice, kind: str_t):\n    \"\"\"\n    Convert a slice indexer.\n\n    By definition, these are labels unless 'iloc' is passed in.\n    Floats are not allowed as the start, step, or stop of the slice.\n\n    Parameters\n    ----------\n    key : label of the slice bound\n    kind : {'loc', 'getitem'}\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\"], kind\n\n    # potentially cast the bounds to integers\n    start, stop, step = key.start, key.stop, key.step\n\n    # figure out if this is a positional indexer\n    def is_int(v):\n        return v is None or is_integer(v)\n\n    is_index_slice = is_int(start) and is_int(stop) and is_int(step)\n    is_positional = is_index_slice and not (\n        self.is_integer() or self.is_categorical()\n    )\n\n    if kind == \"getitem\":\n        \"\"\"\n        called from the getitem slicers, validate that we are in fact\n        integers\n        \"\"\"\n        if self.is_integer() or is_index_slice:\n            self._validate_indexer(\"slice\", key.start, \"getitem\")\n            self._validate_indexer(\"slice\", key.stop, \"getitem\")\n            self._validate_indexer(\"slice\", key.step, \"getitem\")\n            return key\n\n    # convert the slice to an indexer here\n\n    # if we are mixed and have integers\n    if is_positional:\n        try:\n            # Validate start & stop\n            if start is not None:\n                self.get_loc(start)\n            if stop is not None:\n                self.get_loc(stop)\n            is_positional = False\n        except KeyError:\n            pass\n\n    if com.is_null_slice(key):\n        # It doesn't matter if we are positional or label based\n        indexer = key\n    elif is_positional:\n        if kind == \"loc\":\n            # GH#16121, GH#24612, GH#31810\n            warnings.warn(\n                \"Slicing a positional slice with .loc is not supported, \"\n                \"and will raise TypeError in a future version.  \"\n                \"Use .loc with labels or .iloc with positions instead.\",\n                FutureWarning,\n                stacklevel=6,\n            )\n        indexer = key\n    else:\n        indexer = self.slice_indexer(start, stop, step, kind=kind)\n\n    return indexer",
                "def _convert_listlike_indexer(self, keyarr):\n    \"\"\"\n    Parameters\n    ----------\n    keyarr : list-like\n        Indexer to convert.\n\n    Returns\n    -------\n    indexer : numpy.ndarray or None\n        Return an ndarray or None if cannot convert.\n    keyarr : numpy.ndarray\n        Return tuple-safe keys.\n    \"\"\"\n    if isinstance(keyarr, Index):\n        keyarr = self._convert_index_indexer(keyarr)\n    else:\n        keyarr = self._convert_arr_indexer(keyarr)\n\n    indexer = self._convert_list_indexer(keyarr)\n    return indexer, keyarr",
                "def _convert_arr_indexer(self, keyarr):\n    \"\"\"\n    Convert an array-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : array-like\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : array-like\n    \"\"\"\n    keyarr = com.asarray_tuplesafe(keyarr)\n    return keyarr",
                "def _convert_index_indexer(self, keyarr):\n    \"\"\"\n    Convert an Index indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n\n    Returns\n    -------\n    converted_keyarr : Index (or sub-class)\n    \"\"\"\n    return keyarr",
                "def _convert_list_indexer(self, keyarr):\n    \"\"\"\n    Convert a list-like indexer to the appropriate dtype.\n\n    Parameters\n    ----------\n    keyarr : Index (or sub-class)\n        Indexer to convert.\n    kind : iloc, loc, optional\n\n    Returns\n    -------\n    positional indexer or None\n    \"\"\"\n    return None",
                "def _invalid_indexer(self, form: str_t, key):\n    \"\"\"\n    Consistent invalid indexer message.\n    \"\"\"\n    raise TypeError(\n        f\"cannot do {form} indexing on {type(self).__name__} with these \"\n        f\"indexers [{key}] of type {type(key).__name__}\"\n    )",
                "def _can_reindex(self, indexer):\n    \"\"\"\n    Check if we are allowing reindexing with this particular indexer.\n\n    Parameters\n    ----------\n    indexer : an integer indexer\n\n    Raises\n    ------\n    ValueError if its a duplicate axis\n    \"\"\"\n    # trying to reindex on an axis with duplicates\n    if not self.is_unique and len(indexer):\n        raise ValueError(\"cannot reindex from a duplicate axis\")",
                "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values\n    as necessary).\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n    \"\"\"\n    # GH6552: preserve names when reindexing to non-named target\n    # (i.e. neither Index nor Series).\n    preserve_names = not hasattr(target, \"name\")\n\n    # GH7774: preserve dtype/tz if target is empty and not an Index.\n    target = ensure_has_len(target)  # target may be an iterator\n\n    if not isinstance(target, Index) and len(target) == 0:\n        if isinstance(self, ABCRangeIndex):\n            values = range(0)\n        else:\n            values = self._data[:0]  # appropriately-dtyped empty array\n        target = self._simple_new(values, name=self.name)\n    else:\n        target = ensure_index(target)\n\n    if level is not None:\n        if method is not None:\n            raise TypeError(\"Fill method not supported if level passed\")\n        _, indexer, _ = self._join_level(\n            target, level, how=\"right\", return_indexers=True\n        )\n    else:\n        if self.equals(target):\n            indexer = None\n        else:\n            # check is_overlapping for IntervalIndex compat\n            if self.is_unique and not getattr(self, \"is_overlapping\", False):\n                indexer = self.get_indexer(\n                    target, method=method, limit=limit, tolerance=tolerance\n                )\n            else:\n                if method is not None or limit is not None:\n                    raise ValueError(\n                        \"cannot reindex a non-unique index \"\n                        \"with a method or limit\"\n                    )\n                indexer, missing = self.get_indexer_non_unique(target)\n\n    if preserve_names and target.nlevels == 1 and target.name != self.name:\n        target = target.copy()\n        target.name = self.name\n\n    return target, indexer",
                "def _reindex_non_unique(self, target):\n    \"\"\"\n    Create a new index with target's values (move/add/delete values as\n    necessary) use with non-unique Index and a possibly non-unique target.\n\n    Parameters\n    ----------\n    target : an iterable\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index.\n    indexer : np.ndarray or None\n        Indices of output values in original index.\n\n    \"\"\"\n    target = ensure_index(target)\n    indexer, missing = self.get_indexer_non_unique(target)\n    check = indexer != -1\n    new_labels = self.take(indexer[check])\n    new_indexer = None\n\n    if len(missing):\n        length = np.arange(len(indexer))\n\n        missing = ensure_platform_int(missing)\n        missing_labels = target.take(missing)\n        missing_indexer = ensure_int64(length[~check])\n        cur_labels = self.take(indexer[check]).values\n        cur_indexer = ensure_int64(length[check])\n\n        new_labels = np.empty(tuple([len(indexer)]), dtype=object)\n        new_labels[cur_indexer] = cur_labels\n        new_labels[missing_indexer] = missing_labels\n\n        # a unique indexer\n        if target.is_unique:\n\n            # see GH5553, make sure we use the right indexer\n            new_indexer = np.arange(len(indexer))\n            new_indexer[cur_indexer] = np.arange(len(cur_labels))\n            new_indexer[missing_indexer] = -1\n\n        # we have a non_unique selector, need to use the original\n        # indexer here\n        else:\n\n            # need to retake to have the same size as the indexer\n            indexer[~check] = -1\n\n            # reset the new indexer to account for the new size\n            new_indexer = np.arange(len(self.take(indexer)))\n            new_indexer[~check] = -1\n\n    new_index = Index(new_labels, name=self.name)\n    return new_index, indexer, new_indexer",
                "def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n    \"\"\"\n    Compute join_index and indexers to conform data\n    structures to the new index.\n\n    Parameters\n    ----------\n    other : Index\n    how : {'left', 'right', 'inner', 'outer'}\n    level : int or level name, default None\n    return_indexers : bool, default False\n    sort : bool, default False\n        Sort the join keys lexicographically in the result Index. If False,\n        the order of the join keys depends on the join type (how keyword).\n\n    Returns\n    -------\n    join_index, (left_indexer, right_indexer)\n    \"\"\"\n    other = ensure_index(other)\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n\n    # try to figure out the join level\n    # GH3662\n    if level is None and (self_is_mi or other_is_mi):\n\n        # have the same levels/names so a simple join\n        if self.names == other.names:\n            pass\n        else:\n            return self._join_multi(other, how=how, return_indexers=return_indexers)\n\n    # join on the level\n    if level is not None and (self_is_mi or other_is_mi):\n        return self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n\n    if len(other) == 0 and how in (\"left\", \"outer\"):\n        join_index = self._shallow_copy()\n        if return_indexers:\n            rindexer = np.repeat(-1, len(join_index))\n            return join_index, None, rindexer\n        else:\n            return join_index\n\n    if len(self) == 0 and how in (\"right\", \"outer\"):\n        join_index = other._shallow_copy()\n        if return_indexers:\n            lindexer = np.repeat(-1, len(join_index))\n            return join_index, lindexer, None\n        else:\n            return join_index\n\n    if self._join_precedence < other._join_precedence:\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n        result = other.join(\n            self, how=how, level=level, return_indexers=return_indexers\n        )\n        if return_indexers:\n            x, y, z = result\n            result = x, z, y\n        return result\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype(\"O\")\n        other = other.astype(\"O\")\n        return this.join(other, how=how, return_indexers=return_indexers)\n\n    _validate_join_method(how)\n\n    if not self.is_unique and not other.is_unique:\n        return self._join_non_unique(\n            other, how=how, return_indexers=return_indexers\n        )\n    elif not self.is_unique or not other.is_unique:\n        if self.is_monotonic and other.is_monotonic:\n            return self._join_monotonic(\n                other, how=how, return_indexers=return_indexers\n            )\n        else:\n            return self._join_non_unique(\n                other, how=how, return_indexers=return_indexers\n            )\n    elif self.is_monotonic and other.is_monotonic:\n        try:\n            return self._join_monotonic(\n                other, how=how, return_indexers=return_indexers\n            )\n        except TypeError:\n            pass\n\n    if how == \"left\":\n        join_index = self\n    elif how == \"right\":\n        join_index = other\n    elif how == \"inner\":\n        # TODO: sort=False here for backwards compat. It may\n        # be better to use the sort parameter passed into join\n        join_index = self.intersection(other, sort=False)\n    elif how == \"outer\":\n        # TODO: sort=True here for backwards compat. It may\n        # be better to use the sort parameter passed into join\n        join_index = self.union(other)\n\n    if sort:\n        join_index = join_index.sort_values()\n\n    if return_indexers:\n        if join_index is self:\n            lindexer = None\n        else:\n            lindexer = self.get_indexer(join_index)\n        if join_index is other:\n            rindexer = None\n        else:\n            rindexer = other.get_indexer(join_index)\n        return join_index, lindexer, rindexer\n    else:\n        return join_index",
                "def _join_multi(self, other, how, return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n\n    # figure out join names\n    self_names = set(com.not_none(*self.names))\n    other_names = set(com.not_none(*other.names))\n    overlap = self_names & other_names\n\n    # need at least 1 in common\n    if not overlap:\n        raise ValueError(\"cannot join with no overlapping index names\")\n\n    self_is_mi = isinstance(self, ABCMultiIndex)\n    other_is_mi = isinstance(other, ABCMultiIndex)\n\n    if self_is_mi and other_is_mi:\n\n        # Drop the non-matching levels from left and right respectively\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n\n        # if only the order differs\n        if not len(ldrop_names + rdrop_names):\n            self_jnlevels = self\n            other_jnlevels = other.reorder_levels(self.names)\n        else:\n            self_jnlevels = self.droplevel(ldrop_names)\n            other_jnlevels = other.droplevel(rdrop_names)\n\n        # Join left and right\n        # Join on same leveled multi-index frames is supported\n        join_idx, lidx, ridx = self_jnlevels.join(\n            other_jnlevels, how, return_indexers=True\n        )\n\n        # Restore the dropped levels\n        # Returned index level order is\n        # common levels, ldrop_names, rdrop_names\n        dropped_names = ldrop_names + rdrop_names\n\n        levels, codes, names = _restore_dropped_levels_multijoin(\n            self, other, dropped_names, join_idx, lidx, ridx\n        )\n\n        # Re-create the multi-index\n        multi_join_idx = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n\n        multi_join_idx = multi_join_idx.remove_unused_levels()\n\n        return multi_join_idx, lidx, ridx\n\n    jl = list(overlap)[0]\n\n    # Case where only one index is multi\n    # make the indices into mi's that match\n    flip_order = False\n    if self_is_mi:\n        self, other = other, self\n        flip_order = True\n        # flip if join method is right or left\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n    level = other.names.index(jl)\n    result = self._join_level(\n        other, level, how=how, return_indexers=return_indexers\n    )\n\n    if flip_order:\n        if isinstance(result, tuple):\n            return result[0], result[2], result[1]\n    return result",
                "def _join_non_unique(self, other, how=\"left\", return_indexers=False):\n    from pandas.core.reshape.merge import _get_join_indexers\n\n    # We only get here if dtypes match\n    assert self.dtype == other.dtype\n\n    lvalues = self._get_engine_target()\n    rvalues = other._get_engine_target()\n\n    left_idx, right_idx = _get_join_indexers(\n        [lvalues], [rvalues], how=how, sort=True\n    )\n\n    left_idx = ensure_platform_int(left_idx)\n    right_idx = ensure_platform_int(right_idx)\n\n    join_index = np.asarray(lvalues.take(left_idx))\n    mask = left_idx == -1\n    np.putmask(join_index, mask, rvalues.take(right_idx))\n\n    join_index = self._wrap_joined_index(join_index, other)\n\n    if return_indexers:\n        return join_index, left_idx, right_idx\n    else:\n        return join_index",
                "def _join_level(\n    self, other, level, how=\"left\", return_indexers=False, keep_order=True\n):\n    \"\"\"\n    The join method *only* affects the level of the resulting\n    MultiIndex. Otherwise it just exactly aligns the Index data to the\n    labels of the level in the MultiIndex.\n\n    If ```keep_order == True```, the order of the data indexed by the\n    MultiIndex will not be changed; otherwise, it will tie out\n    with `other`.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    def _get_leaf_sorter(labels):\n        \"\"\"\n        Returns sorter for the inner most level while preserving the\n        order of higher levels.\n        \"\"\"\n        if labels[0].size == 0:\n            return np.empty(0, dtype=\"int64\")\n\n        if len(labels) == 1:\n            lab = ensure_int64(labels[0])\n            sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n            return sorter\n\n        # find indexers of beginning of each set of\n        # same-key labels w.r.t all but last level\n        tic = labels[0][:-1] != labels[0][1:]\n        for lab in labels[1:-1]:\n            tic |= lab[:-1] != lab[1:]\n\n        starts = np.hstack(([True], tic, [True])).nonzero()[0]\n        lab = ensure_int64(labels[-1])\n        return lib.get_level_sorter(lab, ensure_int64(starts))\n\n    if isinstance(self, MultiIndex) and isinstance(other, MultiIndex):\n        raise TypeError(\"Join on level between two MultiIndex objects is ambiguous\")\n\n    left, right = self, other\n\n    flip_order = not isinstance(self, MultiIndex)\n    if flip_order:\n        left, right = right, left\n        how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n\n    level = left._get_level_number(level)\n    old_level = left.levels[level]\n\n    if not right.is_unique:\n        raise NotImplementedError(\n            \"Index._join_level on non-unique index is not implemented\"\n        )\n\n    new_level, left_lev_indexer, right_lev_indexer = old_level.join(\n        right, how=how, return_indexers=True\n    )\n\n    if left_lev_indexer is None:\n        if keep_order or len(left) == 0:\n            left_indexer = None\n            join_index = left\n        else:  # sort the leaves\n            left_indexer = _get_leaf_sorter(left.codes[: level + 1])\n            join_index = left[left_indexer]\n\n    else:\n        left_lev_indexer = ensure_int64(left_lev_indexer)\n        rev_indexer = lib.get_reverse_indexer(left_lev_indexer, len(old_level))\n\n        new_lev_codes = algos.take_nd(\n            rev_indexer, left.codes[level], allow_fill=False\n        )\n\n        new_codes = list(left.codes)\n        new_codes[level] = new_lev_codes\n\n        new_levels = list(left.levels)\n        new_levels[level] = new_level\n\n        if keep_order:  # just drop missing values. o.w. keep order\n            left_indexer = np.arange(len(left), dtype=np.intp)\n            mask = new_lev_codes != -1\n            if not mask.all():\n                new_codes = [lab[mask] for lab in new_codes]\n                left_indexer = left_indexer[mask]\n\n        else:  # tie out the order with other\n            if level == 0:  # outer most level, take the fast route\n                ngroups = 1 + new_lev_codes.max()\n                left_indexer, counts = libalgos.groupsort_indexer(\n                    new_lev_codes, ngroups\n                )\n\n                # missing values are placed first; drop them!\n                left_indexer = left_indexer[counts[0] :]\n                new_codes = [lab[left_indexer] for lab in new_codes]\n\n            else:  # sort the leaves\n                mask = new_lev_codes != -1\n                mask_all = mask.all()\n                if not mask_all:\n                    new_codes = [lab[mask] for lab in new_codes]\n\n                left_indexer = _get_leaf_sorter(new_codes[: level + 1])\n                new_codes = [lab[left_indexer] for lab in new_codes]\n\n                # left_indexers are w.r.t masked frame.\n                # reverse to original frame!\n                if not mask_all:\n                    left_indexer = mask.nonzero()[0][left_indexer]\n\n        join_index = MultiIndex(\n            levels=new_levels,\n            codes=new_codes,\n            names=left.names,\n            verify_integrity=False,\n        )\n\n    if right_lev_indexer is not None:\n        right_indexer = algos.take_nd(\n            right_lev_indexer, join_index.codes[level], allow_fill=False\n        )\n    else:\n        right_indexer = join_index.codes[level]\n\n    if flip_order:\n        left_indexer, right_indexer = right_indexer, left_indexer\n\n    if return_indexers:\n        left_indexer = (\n            None if left_indexer is None else ensure_platform_int(left_indexer)\n        )\n        right_indexer = (\n            None if right_indexer is None else ensure_platform_int(right_indexer)\n        )\n        return join_index, left_indexer, right_indexer\n    else:\n        return join_index",
                "def _join_monotonic(self, other, how=\"left\", return_indexers=False):\n    # We only get here with matching dtypes\n    assert other.dtype == self.dtype\n\n    if self.equals(other):\n        ret_index = other if how == \"right\" else self\n        if return_indexers:\n            return ret_index, None, None\n        else:\n            return ret_index\n\n    sv = self._get_engine_target()\n    ov = other._get_engine_target()\n\n    if self.is_unique and other.is_unique:\n        # We can perform much better than the general case\n        if how == \"left\":\n            join_index = self\n            lidx = None\n            ridx = self._left_indexer_unique(sv, ov)\n        elif how == \"right\":\n            join_index = other\n            lidx = self._left_indexer_unique(ov, sv)\n            ridx = None\n        elif how == \"inner\":\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n        elif how == \"outer\":\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n            join_index = self._wrap_joined_index(join_index, other)\n    else:\n        if how == \"left\":\n            join_index, lidx, ridx = self._left_indexer(sv, ov)\n        elif how == \"right\":\n            join_index, ridx, lidx = self._left_indexer(ov, sv)\n        elif how == \"inner\":\n            join_index, lidx, ridx = self._inner_indexer(sv, ov)\n        elif how == \"outer\":\n            join_index, lidx, ridx = self._outer_indexer(sv, ov)\n        join_index = self._wrap_joined_index(join_index, other)\n\n    if return_indexers:\n        lidx = None if lidx is None else ensure_platform_int(lidx)\n        ridx = None if ridx is None else ensure_platform_int(ridx)\n        return join_index, lidx, ridx\n    else:\n        return join_index",
                "def _wrap_joined_index(self, joined, other):\n    name = get_op_result_name(self, other)\n    return Index(joined, name=name)",
                "@property\ndef values(self) -> np.ndarray:\n    \"\"\"\n    Return an array representing the data in the Index.\n\n    .. warning::\n\n       We recommend using :attr:`Index.array` or\n       :meth:`Index.to_numpy`, depending on whether you need\n       a reference to the underlying data or a NumPy array.\n\n    Returns\n    -------\n    array: numpy.ndarray or ExtensionArray\n\n    See Also\n    --------\n    Index.array : Reference to the underlying data.\n    Index.to_numpy : A NumPy array representing the underlying data.\n    \"\"\"\n    return self._data.view(np.ndarray)",
                "@cache_readonly\n@doc(IndexOpsMixin.array)\ndef array(self) -> ExtensionArray:\n    array = self._data\n    if isinstance(array, np.ndarray):\n        from pandas.core.arrays.numpy_ import PandasArray\n\n        array = PandasArray(array)\n    return array",
                "@property\ndef _values(self) -> Union[ExtensionArray, np.ndarray]:\n    \"\"\"\n    The best array representation.\n\n    This is an ndarray or ExtensionArray.\n\n    ``_values`` are consistent between``Series`` and ``Index``.\n\n    It may differ from the public '.values' method.\n\n    index             | values          | _values       |\n    ----------------- | --------------- | ------------- |\n    Index             | ndarray         | ndarray       |\n    CategoricalIndex  | Categorical     | Categorical   |\n    DatetimeIndex     | ndarray[M8ns]   | DatetimeArray |\n    DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray |\n    PeriodIndex       | ndarray[object] | PeriodArray   |\n    IntervalIndex     | IntervalArray   | IntervalArray |\n\n    See Also\n    --------\n    values\n    \"\"\"\n    return self._data",
                "def _get_engine_target(self) -> np.ndarray:\n    \"\"\"\n    Get the ndarray that we can pass to the IndexEngine constructor.\n    \"\"\"\n    return self._values",
                "@doc(IndexOpsMixin.memory_usage)\ndef memory_usage(self, deep: bool = False) -> int:\n    result = super().memory_usage(deep=deep)\n\n    # include our engine hashtable\n    result += self._engine.sizeof(deep=deep)\n    return result",
                "def where(self, cond, other=None):\n    \"\"\"\n    Replace values where the condition is False.\n\n    The replacement is taken from other.\n\n    Parameters\n    ----------\n    cond : bool array-like with the same length as self\n        Condition to select the values on.\n    other : scalar, or array-like, default None\n        Replacement if the condition is False.\n\n    Returns\n    -------\n    pandas.Index\n        A copy of self with values replaced from other\n        where the condition is False.\n\n    See Also\n    --------\n    Series.where : Same method for Series.\n    DataFrame.where : Same method for DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])\n    >>> idx\n    Index(['car', 'bike', 'train', 'tractor'], dtype='object')\n    >>> idx.where(idx.isin(['car', 'train']), 'other')\n    Index(['car', 'other', 'train', 'other'], dtype='object')\n    \"\"\"\n    if other is None:\n        other = self._na_value\n\n    dtype = self.dtype\n    values = self.values\n\n    if is_bool(other) or is_bool_dtype(other):\n\n        # bools force casting\n        values = values.astype(object)\n        dtype = None\n\n    values = np.where(cond, values, other)\n\n    if self._is_numeric_dtype and np.any(isna(values)):\n        # We can't coerce to the numeric dtype of \"self\" (unless\n        # it's float) if there are NaN values in our output.\n        dtype = None\n\n    return Index(values, dtype=dtype, name=self.name)",
                "@classmethod\ndef _scalar_data_error(cls, data):\n    # We return the TypeError so that we can raise it from the constructor\n    #  in order to keep mypy happy\n    return TypeError(\n        f\"{cls.__name__}(...) must be called with a collection of some \"\n        f\"kind, {repr(data)} was passed\"\n    )",
                "@classmethod\ndef _string_data_error(cls, data):\n    raise TypeError(\n        \"String dtype not supported, you may need \"\n        \"to explicitly cast to a numeric type\"\n    )",
                "def _coerce_scalar_to_index(self, item):\n    \"\"\"\n    We need to coerce a scalar to a compat for our index type.\n\n    Parameters\n    ----------\n    item : scalar item to coerce\n    \"\"\"\n    dtype = self.dtype\n\n    if self._is_numeric_dtype and isna(item):\n        # We can't coerce to the numeric dtype of \"self\" (unless\n        # it's float) if there are NaN values in our output.\n        dtype = None\n\n    return Index([item], dtype=dtype, **self._get_attributes_dict())",
                "def _to_safe_for_reshape(self):\n    \"\"\"\n    Convert to object if we are a categorical.\n    \"\"\"\n    return self",
                "def _convert_for_op(self, value):\n    \"\"\"\n    Convert value to be insertable to ndarray.\n    \"\"\"\n    return value",
                "def _assert_can_do_op(self, value):\n    \"\"\"\n    Check value is valid for scalar op.\n    \"\"\"\n    if not is_scalar(value):\n        raise TypeError(f\"'value' must be a scalar, passed: {type(value).__name__}\")",
                "@property\ndef _has_complex_internals(self) -> bool:\n    \"\"\"\n    Indicates if an index is not directly backed by a numpy array\n    \"\"\"\n    # used to avoid libreduction code paths, which raise or require conversion\n    return False",
                "def _is_memory_usage_qualified(self) -> bool:\n    \"\"\"\n    Return a boolean if we need a qualified .info display.\n    \"\"\"\n    return self.is_object()",
                "def is_type_compatible(self, kind) -> bool:\n    \"\"\"\n    Whether the index type is compatible with the provided type.\n    \"\"\"\n    return kind == self.inferred_type",
                "def __contains__(self, key: Any) -> bool:\n    \"\"\"\n    Return a boolean indicating whether the provided key is in the index.\n\n    Parameters\n    ----------\n    key : label\n        The key to check if it is present in the index.\n\n    Returns\n    -------\n    bool\n        Whether the key search is in the index.\n\n    Raises\n    ------\n    TypeError\n        If the key is not hashable.\n\n    See Also\n    --------\n    Index.isin : Returns an ndarray of boolean dtype indicating whether the\n        list-like key is in the index.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1, 2, 3, 4])\n    >>> idx\n    Int64Index([1, 2, 3, 4], dtype='int64')\n\n    >>> 2 in idx\n    True\n    >>> 6 in idx\n    False\n    \"\"\"\n    hash(key)\n    try:\n        return key in self._engine\n    except (OverflowError, TypeError, ValueError):\n        return False",
                "def __hash__(self):\n    raise TypeError(f\"unhashable type: {repr(type(self).__name__)}\")",
                "def __setitem__(self, key, value):\n    raise TypeError(\"Index does not support mutable operations\")",
                "def __getitem__(self, key):\n    \"\"\"\n    Override numpy.ndarray's __getitem__ method to work as desired.\n\n    This function adds lists and Series as valid boolean indexers\n    (ndarrays only supports ndarray with dtype=bool).\n\n    If resulting ndim != 1, plain ndarray is returned instead of\n    corresponding `Index` subclass.\n\n    \"\"\"\n    # There's no custom logic to be implemented in __getslice__, so it's\n    # not overloaded intentionally.\n    getitem = self._data.__getitem__\n    promote = self._shallow_copy\n\n    if is_scalar(key):\n        key = com.cast_scalar_indexer(key)\n        return getitem(key)\n\n    if isinstance(key, slice):\n        # This case is separated from the conditional above to avoid\n        # pessimization of basic indexing.\n        return promote(getitem(key))\n\n    if com.is_bool_indexer(key):\n        key = np.asarray(key, dtype=bool)\n\n    result = getitem(key)\n    if not is_scalar(result):\n        if np.ndim(result) > 1:\n            deprecate_ndim_indexing(result)\n            return result\n        return promote(result)\n    else:\n        return result",
                "def _can_hold_identifiers_and_holds_name(self, name) -> bool:\n    \"\"\"\n    Faster check for ``name in self`` when we know `name` is a Python\n    identifier (e.g. in NDFrame.__getattr__, which hits this to support\n    . key lookup). For indexes that can't hold identifiers (everything\n    but object & categorical) we just return False.\n\n    https://github.com/pandas-dev/pandas/issues/19764\n    \"\"\"\n    if self.is_object() or self.is_categorical():\n        return name in self\n    return False",
                "def append(self, other):\n    \"\"\"\n    Append a collection of Index options together.\n\n    Parameters\n    ----------\n    other : Index or list/tuple of indices\n\n    Returns\n    -------\n    appended : Index\n    \"\"\"\n    to_concat = [self]\n\n    if isinstance(other, (list, tuple)):\n        to_concat = to_concat + list(other)\n    else:\n        to_concat.append(other)\n\n    for obj in to_concat:\n        if not isinstance(obj, Index):\n            raise TypeError(\"all inputs must be Index\")\n\n    names = {obj.name for obj in to_concat}\n    name = None if len(names) > 1 else self.name\n\n    return self._concat(to_concat, name)",
                "def _concat(self, to_concat, name):\n\n    typs = _concat.get_dtype_kinds(to_concat)\n\n    if len(typs) == 1:\n        return self._concat_same_dtype(to_concat, name=name)\n    return Index._concat_same_dtype(self, to_concat, name=name)",
                "def _concat_same_dtype(self, to_concat, name):\n    \"\"\"\n    Concatenate to_concat which has the same class.\n    \"\"\"\n    # must be overridden in specific classes\n    klasses = (\n        ABCDatetimeIndex,\n        ABCTimedeltaIndex,\n        ABCPeriodIndex,\n        ExtensionArray,\n        ABCIntervalIndex,\n    )\n    to_concat = [\n        x.astype(object) if isinstance(x, klasses) else x for x in to_concat\n    ]\n\n    self = to_concat[0]\n    attribs = self._get_attributes_dict()\n    attribs[\"name\"] = name\n\n    to_concat = [x._values if isinstance(x, Index) else x for x in to_concat]\n\n    res_values = np.concatenate(to_concat)\n    return Index(res_values, name=name)",
                "def putmask(self, mask, value):\n    \"\"\"\n    Return a new Index of the values set with the mask.\n\n    Returns\n    -------\n    Index\n\n    See Also\n    --------\n    numpy.ndarray.putmask\n    \"\"\"\n    values = self.values.copy()\n    try:\n        np.putmask(values, mask, self._convert_for_op(value))\n        if is_period_dtype(self.dtype):\n            # .values cast to object, so we need to cast back\n            values = type(self)(values)._data\n        return self._shallow_copy(values)\n    except (ValueError, TypeError) as err:\n        if is_object_dtype(self):\n            raise err\n\n        # coerces to object\n        return self.astype(object).putmask(mask, value)",
                "def equals(self, other: Any) -> bool:\n    \"\"\"\n    Determine if two Index object are equal.\n\n    The things that are being compared are:\n\n    * The elements inside the Index object.\n    * The order of the elements inside the Index object.\n\n    Parameters\n    ----------\n    other : Any\n        The other object to compare against.\n\n    Returns\n    -------\n    bool\n        True if \"other\" is an Index and it has the same elements and order\n        as the calling index; False otherwise.\n\n    Examples\n    --------\n    >>> idx1 = pd.Index([1, 2, 3])\n    >>> idx1\n    Int64Index([1, 2, 3], dtype='int64')\n    >>> idx1.equals(pd.Index([1, 2, 3]))\n    True\n\n    The elements inside are compared\n\n    >>> idx2 = pd.Index([\"1\", \"2\", \"3\"])\n    >>> idx2\n    Index(['1', '2', '3'], dtype='object')\n\n    >>> idx1.equals(idx2)\n    False\n\n    The order is compared\n\n    >>> ascending_idx = pd.Index([1, 2, 3])\n    >>> ascending_idx\n    Int64Index([1, 2, 3], dtype='int64')\n    >>> descending_idx = pd.Index([3, 2, 1])\n    >>> descending_idx\n    Int64Index([3, 2, 1], dtype='int64')\n    >>> ascending_idx.equals(descending_idx)\n    False\n\n    The dtype is *not* compared\n\n    >>> int64_idx = pd.Int64Index([1, 2, 3])\n    >>> int64_idx\n    Int64Index([1, 2, 3], dtype='int64')\n    >>> uint64_idx = pd.UInt64Index([1, 2, 3])\n    >>> uint64_idx\n    UInt64Index([1, 2, 3], dtype='uint64')\n    >>> int64_idx.equals(uint64_idx)\n    True\n    \"\"\"\n    if self.is_(other):\n        return True\n\n    if not isinstance(other, Index):\n        return False\n\n    if is_object_dtype(self.dtype) and not is_object_dtype(other.dtype):\n        # if other is not object, use other's logic for coercion\n        return other.equals(self)\n\n    if isinstance(other, ABCMultiIndex):\n        # d-level MultiIndex can equal d-tuple Index\n        return other.equals(self)\n\n    if is_extension_array_dtype(other.dtype):\n        # All EA-backed Index subclasses override equals\n        return other.equals(self)\n\n    return array_equivalent(self._values, other._values)",
                "def identical(self, other) -> bool:\n    \"\"\"\n    Similar to equals, but check that other comparable attributes are\n    also equal.\n\n    Returns\n    -------\n    bool\n        If two Index objects have equal elements and same type True,\n        otherwise False.\n    \"\"\"\n    return (\n        self.equals(other)\n        and all(\n            (\n                getattr(self, c, None) == getattr(other, c, None)\n                for c in self._comparables\n            )\n        )\n        and type(self) == type(other)\n    )",
                "def asof(self, label):\n    \"\"\"\n    Return the label from the index, or, if not present, the previous one.\n\n    Assuming that the index is sorted, return the passed index label if it\n    is in the index, or return the previous index label if the passed one\n    is not in the index.\n\n    Parameters\n    ----------\n    label : object\n        The label up to which the method returns the latest index label.\n\n    Returns\n    -------\n    object\n        The passed label if it is in the index. The previous label if the\n        passed label is not in the sorted index or `NaN` if there is no\n        such label.\n\n    See Also\n    --------\n    Series.asof : Return the latest value in a Series up to the\n        passed index.\n    merge_asof : Perform an asof merge (similar to left join but it\n        matches on nearest key rather than equal key).\n    Index.get_loc : An `asof` is a thin wrapper around `get_loc`\n        with method='pad'.\n\n    Examples\n    --------\n    `Index.asof` returns the latest index label up to the passed label.\n\n    >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\n    >>> idx.asof('2014-01-01')\n    '2013-12-31'\n\n    If the label is in the index, the method returns the passed label.\n\n    >>> idx.asof('2014-01-02')\n    '2014-01-02'\n\n    If all of the labels in the index are later than the passed label,\n    NaN is returned.\n\n    >>> idx.asof('1999-01-02')\n    nan\n\n    If the index is not sorted, an error is raised.\n\n    >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',\n    ...                            '2014-01-03'])\n    >>> idx_not_sorted.asof('2013-12-31')\n    Traceback (most recent call last):\n    ValueError: index must be monotonic increasing or decreasing\n    \"\"\"\n    try:\n        loc = self.get_loc(label, method=\"pad\")\n    except KeyError:\n        return self._na_value\n    else:\n        if isinstance(loc, slice):\n            loc = loc.indices(len(self))[-1]\n        return self[loc]",
                "def asof_locs(self, where, mask):\n    \"\"\"\n    Find the locations (indices) of the labels from the index for\n    every entry in the `where` argument.\n\n    As in the `asof` function, if the label (a particular entry in\n    `where`) is not in the index, the latest index label up to the\n    passed label is chosen and its index returned.\n\n    If all of the labels in the index are later than a label in `where`,\n    -1 is returned.\n\n    `mask` is used to ignore NA values in the index during calculation.\n\n    Parameters\n    ----------\n    where : Index\n        An Index consisting of an array of timestamps.\n    mask : array-like\n        Array of booleans denoting where values in the original\n        data are not NA.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array of locations (indices) of the labels from the Index\n        which correspond to the return values of the `asof` function\n        for every element in `where`.\n    \"\"\"\n    locs = self.values[mask].searchsorted(where.values, side=\"right\")\n    locs = np.where(locs > 0, locs - 1, 0)\n\n    result = np.arange(len(self))[mask].take(locs)\n\n    first = mask.argmax()\n    result[(locs == 0) & (where.values < self.values[first])] = -1\n\n    return result",
                "def sort_values(\n    self, return_indexer=False, ascending=True, key: Optional[Callable] = None\n):\n    \"\"\"\n    Return a sorted copy of the index.\n\n    Return a sorted copy of the index, and optionally return the indices\n    that sorted the index itself.\n\n    Parameters\n    ----------\n    return_indexer : bool, default False\n        Should the indices that would sort the index be returned.\n    ascending : bool, default True\n        Should the index values be sorted in an ascending order.\n    key : callable, optional\n        If not None, apply the key function to the index values\n        before sorting. This is similar to the `key` argument in the\n        builtin :meth:`sorted` function, with the notable difference that\n        this `key` function should be *vectorized*. It should expect an\n        ``Index`` and return an ``Index`` of the same shape.\n\n        .. versionadded:: 1.1.0\n\n    Returns\n    -------\n    sorted_index : pandas.Index\n        Sorted copy of the index.\n    indexer : numpy.ndarray, optional\n        The indices that the index itself was sorted by.\n\n    See Also\n    --------\n    Series.sort_values : Sort values of a Series.\n    DataFrame.sort_values : Sort values in a DataFrame.\n\n    Examples\n    --------\n    >>> idx = pd.Index([10, 100, 1, 1000])\n    >>> idx\n    Int64Index([10, 100, 1, 1000], dtype='int64')\n\n    Sort values in ascending order (default behavior).\n\n    >>> idx.sort_values()\n    Int64Index([1, 10, 100, 1000], dtype='int64')\n\n    Sort values in descending order, and also get the indices `idx` was\n    sorted by.\n\n    >>> idx.sort_values(ascending=False, return_indexer=True)\n    (Int64Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n    \"\"\"\n    idx = ensure_key_mapped(self, key)\n\n    _as = idx.argsort()\n    if not ascending:\n        _as = _as[::-1]\n\n    sorted_index = self.take(_as)\n\n    if return_indexer:\n        return sorted_index, _as\n    else:\n        return sorted_index",
                "def sort(self, *args, **kwargs):\n    \"\"\"\n    Use sort_values instead.\n    \"\"\"\n    raise TypeError(\"cannot sort an Index object in-place, use sort_values instead\")",
                "def shift(self, periods=1, freq=None):\n    \"\"\"\n    Shift index by desired number of time frequency increments.\n\n    This method is for shifting the values of datetime-like indexes\n    by a specified time increment a given number of times.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods (or increments) to shift by,\n        can be positive or negative.\n    freq : pandas.DateOffset, pandas.Timedelta or str, optional\n        Frequency increment to shift by.\n        If None, the index is shifted by its own `freq` attribute.\n        Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.\n\n    Returns\n    -------\n    pandas.Index\n        Shifted index.\n\n    See Also\n    --------\n    Series.shift : Shift values of Series.\n\n    Notes\n    -----\n    This method is only implemented for datetime-like index classes,\n    i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.\n\n    Examples\n    --------\n    Put the first 5 month starts of 2011 into an index.\n\n    >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\n    >>> month_starts\n    DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',\n                   '2011-05-01'],\n                  dtype='datetime64[ns]', freq='MS')\n\n    Shift the index by 10 days.\n\n    >>> month_starts.shift(10, freq='D')\n    DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',\n                   '2011-05-11'],\n                  dtype='datetime64[ns]', freq=None)\n\n    The default value of `freq` is the `freq` attribute of the index,\n    which is 'MS' (month start) in this example.\n\n    >>> month_starts.shift(10)\n    DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',\n                   '2012-03-01'],\n                  dtype='datetime64[ns]', freq='MS')\n    \"\"\"\n    raise NotImplementedError(f\"Not supported for type {type(self).__name__}\")",
                "def argsort(self, *args, **kwargs) -> np.ndarray:\n    \"\"\"\n    Return the integer indices that would sort the index.\n\n    Parameters\n    ----------\n    *args\n        Passed to `numpy.ndarray.argsort`.\n    **kwargs\n        Passed to `numpy.ndarray.argsort`.\n\n    Returns\n    -------\n    numpy.ndarray\n        Integer indices that would sort the index if used as\n        an indexer.\n\n    See Also\n    --------\n    numpy.argsort : Similar method for NumPy arrays.\n    Index.sort_values : Return sorted copy of Index.\n\n    Examples\n    --------\n    >>> idx = pd.Index(['b', 'a', 'd', 'c'])\n    >>> idx\n    Index(['b', 'a', 'd', 'c'], dtype='object')\n\n    >>> order = idx.argsort()\n    >>> order\n    array([1, 0, 3, 2])\n\n    >>> idx[order]\n    Index(['a', 'b', 'c', 'd'], dtype='object')\n    \"\"\"\n    result = self.asi8\n\n    if result is None:\n        result = np.array(self)\n\n    return result.argsort(*args, **kwargs)",
                "def get_value(self, series: \"Series\", key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing.\n\n    Returns\n    -------\n    scalar or Series\n    \"\"\"\n    warnings.warn(\n        \"get_value is deprecated and will be removed in a future version. \"\n        \"Use Series[key] instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n\n    self._check_indexing_error(key)\n\n    try:\n        # GH 20882, 21257\n        # First try to convert the key to a location\n        # If that fails, raise a KeyError if an integer\n        # index, otherwise, see if key is an integer, and\n        # try that\n        loc = self.get_loc(key)\n    except KeyError:\n        if not self._should_fallback_to_positional():\n            raise\n        elif is_integer(key):\n            # If the Index cannot hold integer, then this is unambiguously\n            #  a locational lookup.\n            loc = key\n        else:\n            raise\n\n    return self._get_values_for_loc(series, loc, key)",
                "def _check_indexing_error(self, key):\n    if not is_scalar(key):\n        # if key is not a scalar, directly raise an error (the code below\n        # would convert to numpy arrays and raise later any way) - GH29926\n        raise InvalidIndexError(key)",
                "def _should_fallback_to_positional(self) -> bool:\n    \"\"\"\n    Should an integer key be treated as positional?\n    \"\"\"\n    if self.holds_integer() or self.is_boolean():\n        return False\n    return True",
                "def _get_values_for_loc(self, series: \"Series\", loc, key):\n    \"\"\"\n    Do a positional lookup on the given Series, returning either a scalar\n    or a Series.\n\n    Assumes that `series.index is self`\n\n    key is included for MultiIndex compat.\n    \"\"\"\n    if is_integer(loc):\n        return series._values[loc]\n\n    return series.iloc[loc]",
                "def set_value(self, arr, key, value):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray.\n\n    .. deprecated:: 1.0\n\n    Notes\n    -----\n    Only use this if you know what you're doing.\n    \"\"\"\n    warnings.warn(\n        (\n            \"The 'set_value' method is deprecated, and \"\n            \"will be removed in a future version.\"\n        ),\n        FutureWarning,\n        stacklevel=2,\n    )\n    loc = self._engine.get_loc(key)\n    validate_numeric_casting(arr.dtype, value)\n    arr[loc] = value",
                "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer_non_unique(ptarget)\n\n    if not self._is_comparable_dtype(target.dtype):\n        no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n        return no_matches, no_matches\n\n    if is_categorical_dtype(target.dtype):\n        tgt_values = np.asarray(target)\n    else:\n        tgt_values = target._get_engine_target()\n\n    indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n    return ensure_platform_int(indexer), missing",
                "def get_indexer_for(self, target, **kwargs):\n    \"\"\"\n    Guaranteed return of an indexer even when non-unique.\n\n    This dispatches to get_indexer or get_indexer_non_unique\n    as appropriate.\n\n    Returns\n    -------\n    numpy.ndarray\n        List of indices.\n    \"\"\"\n    if self.is_unique:\n        return self.get_indexer(target, **kwargs)\n    indexer, _ = self.get_indexer_non_unique(target, **kwargs)\n    return indexer",
                "def _maybe_promote(self, other: \"Index\"):\n    \"\"\"\n    When dealing with an object-dtype Index and a non-object Index, see\n    if we can upcast the object-dtype one to improve performance.\n    \"\"\"\n\n    if self.inferred_type == \"date\" and isinstance(other, ABCDatetimeIndex):\n        return type(other)(self), other\n    elif self.inferred_type == \"timedelta\" and isinstance(other, ABCTimedeltaIndex):\n        # TODO: we dont have tests that get here\n        return type(other)(self), other\n    elif self.inferred_type == \"boolean\":\n        if not is_object_dtype(self.dtype):\n            return self.astype(\"object\"), other.astype(\"object\")\n\n    if not is_object_dtype(self.dtype) and is_object_dtype(other.dtype):\n        # Reverse op so we dont need to re-implement on the subclasses\n        other, self = other._maybe_promote(self)\n\n    return self, other",
                "def _is_comparable_dtype(self, dtype: DtypeObj) -> bool:\n    \"\"\"\n    Can we compare values of the given dtype to our own?\n    \"\"\"\n    return True",
                "def groupby(self, values) -> PrettyDict[Hashable, np.ndarray]:\n    \"\"\"\n    Group the index labels by a given array of values.\n\n    Parameters\n    ----------\n    values : array\n        Values used to determine the groups.\n\n    Returns\n    -------\n    dict\n        {group name -> group labels}\n    \"\"\"\n    # TODO: if we are a MultiIndex, we can do better\n    # that converting to tuples\n    if isinstance(values, ABCMultiIndex):\n        values = values._values\n    values = Categorical(values)\n    result = values._reverse_indexer()\n\n    # map to the label\n    result = {k: self.take(v) for k, v in result.items()}\n\n    return PrettyDict(result)",
                "def map(self, mapper, na_action=None):\n    \"\"\"\n    Map values using input correspondence (a dict, Series, or function).\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n    na_action : {None, 'ignore'}\n        If 'ignore', propagate NA values, without passing them to the\n        mapping correspondence.\n\n    Returns\n    -------\n    applied : Union[Index, MultiIndex], inferred\n        The output of the mapping function applied to the index.\n        If the function returns a tuple with more than one element\n        a MultiIndex will be returned.\n    \"\"\"\n    from pandas.core.indexes.multi import MultiIndex\n\n    new_values = super()._map_values(mapper, na_action=na_action)\n\n    attributes = self._get_attributes_dict()\n\n    # we can return a MultiIndex\n    if new_values.size and isinstance(new_values[0], tuple):\n        if isinstance(self, MultiIndex):\n            names = self.names\n        elif attributes.get(\"name\"):\n            names = [attributes.get(\"name\")] * len(new_values[0])\n        else:\n            names = None\n        return MultiIndex.from_tuples(new_values, names=names)\n\n    attributes[\"copy\"] = False\n    if not new_values.size:\n        # empty\n        attributes[\"dtype\"] = self.dtype\n\n    return Index(new_values, **attributes)",
                "def _transform_index(self, func, level=None) -> \"Index\":\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n    \"\"\"\n    if isinstance(self, ABCMultiIndex):\n        if level is not None:\n            items = [\n                tuple(func(y) if i == level else y for i, y in enumerate(x))\n                for x in self\n            ]\n        else:\n            items = [tuple(func(y) for y in x) for x in self]\n        return type(self).from_tuples(items, names=self.names)\n    else:\n        items = [func(x) for x in self]\n        return Index(items, name=self.name, tupleize_cols=False)",
                "def isin(self, values, level=None):\n    \"\"\"\n    Return a boolean array where the index values are in `values`.\n\n    Compute boolean array of whether each index value is found in the\n    passed set of values. The length of the returned boolean array matches\n    the length of the index.\n\n    Parameters\n    ----------\n    values : set or list-like\n        Sought values.\n    level : str or int, optional\n        Name or position of the index level to use (if the index is a\n        `MultiIndex`).\n\n    Returns\n    -------\n    is_contained : ndarray\n        NumPy array of boolean values.\n\n    See Also\n    --------\n    Series.isin : Same for Series.\n    DataFrame.isin : Same method for DataFrames.\n\n    Notes\n    -----\n    In the case of `MultiIndex` you must either specify `values` as a\n    list-like object containing tuples that are the same length as the\n    number of levels, or specify `level`. Otherwise it will raise a\n    ``ValueError``.\n\n    If `level` is specified:\n\n    - if it is the name of one *and only one* index level, use that level;\n    - otherwise it should be a number indicating level position.\n\n    Examples\n    --------\n    >>> idx = pd.Index([1,2,3])\n    >>> idx\n    Int64Index([1, 2, 3], dtype='int64')\n\n    Check whether each index value in a list of values.\n\n    >>> idx.isin([1, 4])\n    array([ True, False, False])\n\n    >>> midx = pd.MultiIndex.from_arrays([[1,2,3],\n    ...                                  ['red', 'blue', 'green']],\n    ...                                  names=('number', 'color'))\n    >>> midx\n    MultiIndex([(1,   'red'),\n                (2,  'blue'),\n                (3, 'green')],\n               names=['number', 'color'])\n\n    Check whether the strings in the 'color' level of the MultiIndex\n    are in a list of colors.\n\n    >>> midx.isin(['red', 'orange', 'yellow'], level='color')\n    array([ True, False, False])\n\n    To check across the levels of a MultiIndex, pass a list of tuples:\n\n    >>> midx.isin([(1, 'red'), (3, 'red')])\n    array([ True, False, False])\n\n    For a DatetimeIndex, string values in `values` are converted to\n    Timestamps.\n\n    >>> dates = ['2000-03-11', '2000-03-12', '2000-03-13']\n    >>> dti = pd.to_datetime(dates)\n    >>> dti\n    DatetimeIndex(['2000-03-11', '2000-03-12', '2000-03-13'],\n    dtype='datetime64[ns]', freq=None)\n\n    >>> dti.isin(['2000-03-11'])\n    array([ True, False, False])\n    \"\"\"\n    if level is not None:\n        self._validate_index_level(level)\n    return algos.isin(self, values)",
                "def _get_string_slice(self, key: str_t, use_lhs: bool = True, use_rhs: bool = True):\n    # this is for partial string indexing,\n    # overridden in DatetimeIndex, TimedeltaIndex and PeriodIndex\n    raise NotImplementedError",
                "def slice_indexer(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    For an ordered or unique index, compute the slice indexer for input\n    labels and step.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, default None\n    kind : str, default None\n\n    Returns\n    -------\n    indexer : slice\n\n    Raises\n    ------\n    KeyError : If key does not exist, or key is not unique and index is\n        not ordered.\n\n    Notes\n    -----\n    This function assumes that the data is sorted, so use at your own peril\n\n    Examples\n    --------\n    This is a method on all index types. For example you can do:\n\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_indexer(start='b', end='c')\n    slice(1, 3, None)\n\n    >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])\n    >>> idx.slice_indexer(start='b', end=('c', 'g'))\n    slice(1, 3, None)\n    \"\"\"\n    start_slice, end_slice = self.slice_locs(start, end, step=step, kind=kind)\n\n    # return a slice\n    if not is_scalar(start_slice):\n        raise AssertionError(\"Start slice bound is non-scalar\")\n    if not is_scalar(end_slice):\n        raise AssertionError(\"End slice bound is non-scalar\")\n\n    return slice(start_slice, end_slice, step)",
                "def _maybe_cast_indexer(self, key):\n    \"\"\"\n    If we have a float key and are not a floating index, then try to cast\n    to an int if equivalent.\n    \"\"\"\n    if not self.is_floating():\n        return com.cast_scalar_indexer(key)\n    return key",
                "def _validate_indexer(self, form: str_t, key, kind: str_t):\n    \"\"\"\n    If we are positional indexer, validate that we have appropriate\n    typed bounds must be an integer.\n    \"\"\"\n    assert kind in [\"getitem\", \"iloc\"]\n\n    if key is None:\n        pass\n    elif is_integer(key):\n        pass\n    else:\n        self._invalid_indexer(form, key)",
                "def _maybe_cast_slice_bound(self, label, side: str_t, kind):\n    \"\"\"\n    This function should be overloaded in subclasses that allow non-trivial\n    casting on label-slice bounds, e.g. datetime-like indices allowing\n    strings containing formatted datetimes.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    label : object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\", None]\n\n    # We are a plain index here (sub-class override this method if they\n    # wish to have special treatment for floats/ints, e.g. Float64Index and\n    # datetimelike Indexes\n    # reject them\n    if is_float(label):\n        self._invalid_indexer(\"slice\", label)\n\n    # we are trying to find integer bounds on a non-integer based index\n    # this is rejected (generally .loc gets you here)\n    elif is_integer(label):\n        self._invalid_indexer(\"slice\", label)\n\n    return label",
                "def _searchsorted_monotonic(self, label, side=\"left\"):\n    if self.is_monotonic_increasing:\n        return self.searchsorted(label, side=side)\n    elif self.is_monotonic_decreasing:\n        # np.searchsorted expects ascending sort order, have to reverse\n        # everything for it to work (element ordering, search side and\n        # resulting value).\n        pos = self[::-1].searchsorted(\n            label, side=\"right\" if side == \"left\" else \"left\"\n        )\n        return len(self) - pos\n\n    raise ValueError(\"index must be monotonic increasing or decreasing\")",
                "def get_slice_bound(self, label, side: str_t, kind) -> int:\n    \"\"\"\n    Calculate slice bound that corresponds to given label.\n\n    Returns leftmost (one-past-the-rightmost if ``side=='right'``) position\n    of given label.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    int\n        Index of label.\n    \"\"\"\n    assert kind in [\"loc\", \"getitem\", None]\n\n    if side not in (\"left\", \"right\"):\n        raise ValueError(\n            \"Invalid value for side kwarg, must be either \"\n            f\"'left' or 'right': {side}\"\n        )\n\n    original_label = label\n\n    # For datetime indices label may be a string that has to be converted\n    # to datetime boundary according to its resolution.\n    label = self._maybe_cast_slice_bound(label, side, kind)\n\n    # we need to look up the label\n    try:\n        slc = self.get_loc(label)\n    except KeyError as err:\n        try:\n            return self._searchsorted_monotonic(label, side)\n        except ValueError:\n            # raise the original KeyError\n            raise err\n\n    if isinstance(slc, np.ndarray):\n        # get_loc may return a boolean array or an array of indices, which\n        # is OK as long as they are representable by a slice.\n        if is_bool_dtype(slc):\n            slc = lib.maybe_booleans_to_slice(slc.view(\"u1\"))\n        else:\n            slc = lib.maybe_indices_to_slice(slc.astype(\"i8\"), len(self))\n        if isinstance(slc, np.ndarray):\n            raise KeyError(\n                f\"Cannot get {side} slice bound for non-unique \"\n                f\"label: {repr(original_label)}\"\n            )\n\n    if isinstance(slc, slice):\n        if side == \"left\":\n            return slc.start\n        else:\n            return slc.stop\n    else:\n        if side == \"right\":\n            return slc + 1\n        else:\n            return slc",
                "def slice_locs(self, start=None, end=None, step=None, kind=None):\n    \"\"\"\n    Compute slice locations for input labels.\n\n    Parameters\n    ----------\n    start : label, default None\n        If None, defaults to the beginning.\n    end : label, default None\n        If None, defaults to the end.\n    step : int, defaults None\n        If None, defaults to 1.\n    kind : {'loc', 'getitem'} or None\n\n    Returns\n    -------\n    start, end : int\n\n    See Also\n    --------\n    Index.get_loc : Get location for a single label.\n\n    Notes\n    -----\n    This method only works if the index is monotonic or unique.\n\n    Examples\n    --------\n    >>> idx = pd.Index(list('abcd'))\n    >>> idx.slice_locs(start='b', end='c')\n    (1, 3)\n    \"\"\"\n    inc = step is None or step >= 0\n\n    if not inc:\n        # If it's a reverse slice, temporarily swap bounds.\n        start, end = end, start\n\n    # GH 16785: If start and end happen to be date strings with UTC offsets\n    # attempt to parse and check that the offsets are the same\n    if isinstance(start, (str, datetime)) and isinstance(end, (str, datetime)):\n        try:\n            ts_start = Timestamp(start)\n            ts_end = Timestamp(end)\n        except (ValueError, TypeError):\n            pass\n        else:\n            if not tz_compare(ts_start.tzinfo, ts_end.tzinfo):\n                raise ValueError(\"Both dates must have the same UTC offset\")\n\n    start_slice = None\n    if start is not None:\n        start_slice = self.get_slice_bound(start, \"left\", kind)\n    if start_slice is None:\n        start_slice = 0\n\n    end_slice = None\n    if end is not None:\n        end_slice = self.get_slice_bound(end, \"right\", kind)\n    if end_slice is None:\n        end_slice = len(self)\n\n    if not inc:\n        # Bounds at this moment are swapped, swap them back and shift by 1.\n        #\n        # slice_locs('B', 'A', step=-1): s='B', e='A'\n        #\n        #              s='A'                 e='B'\n        # AFTER SWAP:    |                     |\n        #                v ------------------> V\n        #           -----------------------------------\n        #           | | |A|A|A|A| | | | | |B|B| | | | |\n        #           -----------------------------------\n        #              ^ <------------------ ^\n        # SHOULD BE:   |                     |\n        #           end=s-1              start=e-1\n        #\n        end_slice, start_slice = start_slice - 1, end_slice - 1\n\n        # i == -1 triggers ``len(self) + i`` selection that points to the\n        # last element, not before-the-first one, subtracting len(self)\n        # compensates that.\n        if end_slice == -1:\n            end_slice -= len(self)\n        if start_slice == -1:\n            start_slice -= len(self)\n\n    return start_slice, end_slice",
                "def delete(self, loc):\n    \"\"\"\n    Make new Index with passed location(-s) deleted.\n\n    Parameters\n    ----------\n    loc : int or list of int\n        Location of item(-s) which will be deleted.\n        Use a list of locations to delete more than one value at the same time.\n\n    Returns\n    -------\n    Index\n        New Index with passed location(-s) deleted.\n\n    See Also\n    --------\n    numpy.delete : Delete any rows and column from NumPy array (ndarray).\n\n    Examples\n    --------\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete(1)\n    Index(['a', 'c'], dtype='object')\n\n    >>> idx = pd.Index(['a', 'b', 'c'])\n    >>> idx.delete([0, 2])\n    Index(['b'], dtype='object')\n    \"\"\"\n    return self._shallow_copy(np.delete(self._data, loc))",
                "def insert(self, loc: int, item):\n    \"\"\"\n    Make new Index inserting new item at location.\n\n    Follows Python list.append semantics for negative values.\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    # Note: this method is overridden by all ExtensionIndex subclasses,\n    #  so self is never backed by an EA.\n    arr = np.asarray(self)\n    item = self._coerce_scalar_to_index(item)._values\n    idx = np.concatenate((arr[:loc], item, arr[loc:]))\n    return Index(idx, name=self.name)",
                "def drop(self, labels, errors: str_t = \"raise\"):\n    \"\"\"\n    Make new Index with passed list of labels deleted.\n\n    Parameters\n    ----------\n    labels : array-like\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    Returns\n    -------\n    dropped : Index\n\n    Raises\n    ------\n    KeyError\n        If not all of the labels are found in the selected axis\n    \"\"\"\n    arr_dtype = \"object\" if self.dtype == \"object\" else None\n    labels = com.index_labels_to_array(labels, dtype=arr_dtype)\n    indexer = self.get_indexer(labels)\n    mask = indexer == -1\n    if mask.any():\n        if errors != \"ignore\":\n            raise KeyError(f\"{labels[mask]} not found in axis\")\n        indexer = indexer[~mask]\n    return self.delete(indexer)",
                "@classmethod\ndef _add_comparison_methods(cls):\n    \"\"\"\n    Add in comparison methods.\n    \"\"\"\n    cls.__eq__ = _make_comparison_op(operator.eq, cls)\n    cls.__ne__ = _make_comparison_op(operator.ne, cls)\n    cls.__lt__ = _make_comparison_op(operator.lt, cls)\n    cls.__gt__ = _make_comparison_op(operator.gt, cls)\n    cls.__le__ = _make_comparison_op(operator.le, cls)\n    cls.__ge__ = _make_comparison_op(operator.ge, cls)",
                "@classmethod\ndef _add_numeric_methods_add_sub_disabled(cls):\n    \"\"\"\n    Add in the numeric add/sub methods to disable.\n    \"\"\"\n    cls.__add__ = make_invalid_op(\"__add__\")\n    cls.__radd__ = make_invalid_op(\"__radd__\")\n    cls.__iadd__ = make_invalid_op(\"__iadd__\")\n    cls.__sub__ = make_invalid_op(\"__sub__\")\n    cls.__rsub__ = make_invalid_op(\"__rsub__\")\n    cls.__isub__ = make_invalid_op(\"__isub__\")",
                "@classmethod\ndef _add_numeric_methods_disabled(cls):\n    \"\"\"\n    Add in numeric methods to disable other than add/sub.\n    \"\"\"\n    cls.__pow__ = make_invalid_op(\"__pow__\")\n    cls.__rpow__ = make_invalid_op(\"__rpow__\")\n    cls.__mul__ = make_invalid_op(\"__mul__\")\n    cls.__rmul__ = make_invalid_op(\"__rmul__\")\n    cls.__floordiv__ = make_invalid_op(\"__floordiv__\")\n    cls.__rfloordiv__ = make_invalid_op(\"__rfloordiv__\")\n    cls.__truediv__ = make_invalid_op(\"__truediv__\")\n    cls.__rtruediv__ = make_invalid_op(\"__rtruediv__\")\n    cls.__mod__ = make_invalid_op(\"__mod__\")\n    cls.__divmod__ = make_invalid_op(\"__divmod__\")\n    cls.__neg__ = make_invalid_op(\"__neg__\")\n    cls.__pos__ = make_invalid_op(\"__pos__\")\n    cls.__abs__ = make_invalid_op(\"__abs__\")\n    cls.__inv__ = make_invalid_op(\"__inv__\")",
                "@classmethod\ndef _add_numeric_methods_binary(cls):\n    \"\"\"\n    Add in numeric methods.\n    \"\"\"\n    cls.__add__ = _make_arithmetic_op(operator.add, cls)\n    cls.__radd__ = _make_arithmetic_op(ops.radd, cls)\n    cls.__sub__ = _make_arithmetic_op(operator.sub, cls)\n    cls.__rsub__ = _make_arithmetic_op(ops.rsub, cls)\n    cls.__rpow__ = _make_arithmetic_op(ops.rpow, cls)\n    cls.__pow__ = _make_arithmetic_op(operator.pow, cls)\n\n    cls.__truediv__ = _make_arithmetic_op(operator.truediv, cls)\n    cls.__rtruediv__ = _make_arithmetic_op(ops.rtruediv, cls)\n\n    # TODO: rmod? rdivmod?\n    cls.__mod__ = _make_arithmetic_op(operator.mod, cls)\n    cls.__floordiv__ = _make_arithmetic_op(operator.floordiv, cls)\n    cls.__rfloordiv__ = _make_arithmetic_op(ops.rfloordiv, cls)\n    cls.__divmod__ = _make_arithmetic_op(divmod, cls)\n    cls.__mul__ = _make_arithmetic_op(operator.mul, cls)\n    cls.__rmul__ = _make_arithmetic_op(ops.rmul, cls)",
                "@classmethod\ndef _add_numeric_methods_unary(cls):\n    \"\"\"\n    Add in numeric unary methods.\n    \"\"\"\n\n    def _make_evaluate_unary(op, opstr: str_t):\n        def _evaluate_numeric_unary(self):\n\n            attrs = self._get_attributes_dict()\n            return Index(op(self.values), **attrs)\n\n        _evaluate_numeric_unary.__name__ = opstr\n        return _evaluate_numeric_unary\n\n    cls.__neg__ = _make_evaluate_unary(operator.neg, \"__neg__\")\n    cls.__pos__ = _make_evaluate_unary(operator.pos, \"__pos__\")\n    cls.__abs__ = _make_evaluate_unary(np.abs, \"__abs__\")\n    cls.__inv__ = _make_evaluate_unary(lambda x: -x, \"__inv__\")",
                "@classmethod\ndef _add_numeric_methods(cls):\n    cls._add_numeric_methods_unary()\n    cls._add_numeric_methods_binary()",
                "@classmethod\ndef _add_logical_methods(cls):\n    \"\"\"\n    Add in logical methods.\n    \"\"\"\n    _doc = \"\"\"\n    %(desc)s\n\n    Parameters\n    ----------\n    *args\n        These parameters will be passed to numpy.%(outname)s.\n    **kwargs\n        These parameters will be passed to numpy.%(outname)s.\n\n    Returns\n    -------\n    %(outname)s : bool or array_like (if axis is specified)\n        A single element array_like may be converted to bool.\"\"\"\n\n    _index_shared_docs[\"index_all\"] = dedent(\n        \"\"\"\n\n    See Also\n    --------\n    Index.any : Return whether any element in an Index is True.\n    Series.any : Return whether any element in a Series is True.\n    Series.all : Return whether all elements in a Series are True.\n\n    Notes\n    -----\n    Not a Number (NaN), positive infinity and negative infinity\n    evaluate to True because these are not equal to zero.\n\n    Examples\n    --------\n    **all**\n\n    True, because nonzero integers are considered True.\n\n    >>> pd.Index([1, 2, 3]).all()\n    True\n\n    False, because ``0`` is considered False.\n\n    >>> pd.Index([0, 1, 2]).all()\n    False\n\n    **any**\n\n    True, because ``1`` is considered True.\n\n    >>> pd.Index([0, 0, 1]).any()\n    True\n\n    False, because ``0`` is considered False.\n\n    >>> pd.Index([0, 0, 0]).any()\n    False\n    \"\"\"\n    )\n\n    _index_shared_docs[\"index_any\"] = dedent(\n        \"\"\"\n\n    See Also\n    --------\n    Index.all : Return whether all elements are True.\n    Series.all : Return whether all elements are True.\n\n    Notes\n    -----\n    Not a Number (NaN), positive infinity and negative infinity\n    evaluate to True because these are not equal to zero.\n\n    Examples\n    --------\n    >>> index = pd.Index([0, 1, 2])\n    >>> index.any()\n    True\n\n    >>> index = pd.Index([0, 0, 0])\n    >>> index.any()\n    False\n    \"\"\"\n    )\n\n    def _make_logical_function(name: str_t, desc: str_t, f):\n        @Substitution(outname=name, desc=desc)\n        @Appender(_index_shared_docs[\"index_\" + name])\n        @Appender(_doc)\n        def logical_func(self, *args, **kwargs):\n            result = f(self.values)\n            if (\n                isinstance(result, (np.ndarray, ABCSeries, Index))\n                and result.ndim == 0\n            ):\n                # return NumPy type\n                return result.dtype.type(result.item())\n            else:  # pragma: no cover\n                return result\n\n        logical_func.__name__ = name\n        return logical_func\n\n    cls.all = _make_logical_function(\n        \"all\", \"Return whether all elements are True.\", np.all\n    )\n    cls.any = _make_logical_function(\n        \"any\", \"Return whether any element is True.\", np.any\n    )",
                "@classmethod\ndef _add_logical_methods_disabled(cls):\n    \"\"\"\n    Add in logical methods to disable.\n    \"\"\"\n    cls.all = make_invalid_op(\"all\")\n    cls.any = make_invalid_op(\"any\")",
                "@property\ndef shape(self):\n    \"\"\"\n    Return a tuple of the shape of the underlying data.\n    \"\"\"\n    # not using \"(len(self), )\" to return \"correct\" shape if the values\n    # consists of a >1 D array (see GH-27775)\n    # overridden in MultiIndex.shape to avoid materializing the values\n    return self._values.shape",
                "def is_int(v):\n    return v is None or is_integer(v)",
                "def _get_leaf_sorter(labels):\n    \"\"\"\n    Returns sorter for the inner most level while preserving the\n    order of higher levels.\n    \"\"\"\n    if labels[0].size == 0:\n        return np.empty(0, dtype=\"int64\")\n\n    if len(labels) == 1:\n        lab = ensure_int64(labels[0])\n        sorter, _ = libalgos.groupsort_indexer(lab, 1 + lab.max())\n        return sorter\n\n    # find indexers of beginning of each set of\n    # same-key labels w.r.t all but last level\n    tic = labels[0][:-1] != labels[0][1:]\n    for lab in labels[1:-1]:\n        tic |= lab[:-1] != lab[1:]\n\n    starts = np.hstack(([True], tic, [True])).nonzero()[0]\n    lab = ensure_int64(labels[-1])\n    return lib.get_level_sorter(lab, ensure_int64(starts))",
                "def _make_evaluate_unary(op, opstr: str_t):\n    def _evaluate_numeric_unary(self):\n\n        attrs = self._get_attributes_dict()\n        return Index(op(self.values), **attrs)\n\n    _evaluate_numeric_unary.__name__ = opstr\n    return _evaluate_numeric_unary",
                "def _make_logical_function(name: str_t, desc: str_t, f):\n    @Substitution(outname=name, desc=desc)\n    @Appender(_index_shared_docs[\"index_\" + name])\n    @Appender(_doc)\n    def logical_func(self, *args, **kwargs):\n        result = f(self.values)\n        if (\n            isinstance(result, (np.ndarray, ABCSeries, Index))\n            and result.ndim == 0\n        ):\n            # return NumPy type\n            return result.dtype.type(result.item())\n        else:  # pragma: no cover\n            return result\n\n    logical_func.__name__ = name\n    return logical_func",
                "def _evaluate_numeric_unary(self):\n\n    attrs = self._get_attributes_dict()\n    return Index(op(self.values), **attrs)",
                "@Substitution(outname=name, desc=desc)\n@Appender(_index_shared_docs[\"index_\" + name])\n@Appender(_doc)\ndef logical_func(self, *args, **kwargs):\n    result = f(self.values)\n    if (\n        isinstance(result, (np.ndarray, ABCSeries, Index))\n        and result.ndim == 0\n    ):\n        # return NumPy type\n        return result.dtype.type(result.item())\n    else:  # pragma: no cover\n        return result"
            ],
            "inscope_function_signatures": [
                "_make_comparison_op(op, cls)",
                "_make_arithmetic_op(op, cls)",
                "_new_Index(cls, d)",
                "ensure_index_from_sequences(sequences, names=None)",
                "ensure_index(index_like, copy: bool=False)",
                "ensure_has_len(seq)",
                "_trim_front(strings)",
                "_validate_join_method(method: str)",
                "default_index(n)",
                "maybe_extract_name(name, obj, cls) -> Label",
                "_maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray",
                "_maybe_cast_data_without_dtype(subarr)",
                "_try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype) -> np.ndarray",
                "_maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
                "cmp_method(self, other)",
                "index_arithmetic_method(self, other)",
                "_left_indexer_unique(self, left, right)",
                "_left_indexer(self, left, right)",
                "_inner_indexer(self, left, right)",
                "_outer_indexer(self, left, right)",
                "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                "asi8(self)",
                "_simple_new(cls, values, name: Label=None)",
                "_constructor(self)",
                "_get_attributes_dict(self)",
                "_shallow_copy(self, values=None, name: Label=no_default)",
                "is_(self, other) -> bool",
                "_reset_identity(self)",
                "_cleanup(self)",
                "_engine(self)",
                "__len__(self) -> int",
                "__array__(self, dtype=None) -> np.ndarray",
                "__array_wrap__(self, result, context=None)",
                "dtype(self)",
                "ravel(self, order='C')",
                "view(self, cls=None)",
                "astype(self, dtype, copy=True)",
                "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                "repeat(self, repeats, axis=None)",
                "copy(self, name=None, deep=False, dtype=None, names=None)",
                "__copy__(self, **kwargs)",
                "__deepcopy__(self, memo=None)",
                "__repr__(self) -> str_t",
                "_format_space(self) -> str_t",
                "_formatter_func(self)",
                "_format_data(self, name=None) -> str_t",
                "_format_attrs(self)",
                "_mpl_repr(self)",
                "format(self, name: bool=False, formatter=None, **kwargs)",
                "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                "to_native_types(self, slicer=None, **kwargs)",
                "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                "_summary(self, name=None) -> str_t",
                "to_flat_index(self)",
                "to_series(self, index=None, name=None)",
                "to_frame(self, index: bool=True, name=None)",
                "name(self)",
                "name(self, value)",
                "_validate_names(self, name=None, names=None, deep: bool=False)",
                "_get_names(self)",
                "_set_names(self, values, level=None)",
                "set_names(self, names, level=None, inplace: bool=False)",
                "rename(self, name, inplace=False)",
                "nlevels(self) -> int",
                "_sort_levels_monotonic(self)",
                "_validate_index_level(self, level)",
                "_get_level_number(self, level) -> int",
                "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                "_get_level_values(self, level)",
                "droplevel(self, level=0)",
                "_get_grouper_for_level(self, mapper, level=None)",
                "is_monotonic(self) -> bool",
                "is_monotonic_increasing(self) -> bool",
                "is_monotonic_decreasing(self) -> bool",
                "_is_strictly_monotonic_increasing(self) -> bool",
                "_is_strictly_monotonic_decreasing(self) -> bool",
                "is_unique(self) -> bool",
                "has_duplicates(self) -> bool",
                "is_boolean(self) -> bool",
                "is_integer(self) -> bool",
                "is_floating(self) -> bool",
                "is_numeric(self) -> bool",
                "is_object(self) -> bool",
                "is_categorical(self) -> bool",
                "is_interval(self) -> bool",
                "is_mixed(self) -> bool",
                "holds_integer(self) -> bool",
                "inferred_type(self) -> str_t",
                "is_all_dates(self) -> bool",
                "__reduce__(self)",
                "_isnan(self)",
                "_nan_idxs(self)",
                "hasnans(self) -> bool",
                "isna(self)",
                "notna(self)",
                "fillna(self, value=None, downcast=None)",
                "dropna(self, how='any')",
                "unique(self, level=None)",
                "drop_duplicates(self, keep='first')",
                "duplicated(self, keep='first')",
                "_get_unique_index(self, dropna: bool=False)",
                "__add__(self, other)",
                "__radd__(self, other)",
                "__iadd__(self, other)",
                "__sub__(self, other)",
                "__rsub__(self, other)",
                "__and__(self, other)",
                "__or__(self, other)",
                "__xor__(self, other)",
                "__nonzero__(self)",
                "_get_reconciled_name_object(self, other)",
                "_union_incompatible_dtypes(self, other, sort)",
                "_is_compatible_with_other(self, other) -> bool",
                "_validate_sort_keyword(self, sort)",
                "union(self, other, sort=None)",
                "_union(self, other, sort)",
                "_wrap_setop_result(self, other, result)",
                "intersection(self, other, sort=False)",
                "difference(self, other, sort=None)",
                "symmetric_difference(self, other, result_name=None, sort=None)",
                "_assert_can_do_setop(self, other)",
                "_convert_can_do_setop(self, other)",
                "get_loc(self, key, method=None, tolerance=None)",
                "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                "_convert_tolerance(self, tolerance, target)",
                "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                "_filter_indexer_tolerance(self, target: Union['Index', np.ndarray, ExtensionArray], indexer: np.ndarray, tolerance) -> np.ndarray",
                "_get_partial_string_timestamp_match_key(self, key)",
                "_validate_positional_slice(self, key: slice)",
                "_convert_slice_indexer(self, key: slice, kind: str_t)",
                "_convert_listlike_indexer(self, keyarr)",
                "_convert_arr_indexer(self, keyarr)",
                "_convert_index_indexer(self, keyarr)",
                "_convert_list_indexer(self, keyarr)",
                "_invalid_indexer(self, form: str_t, key)",
                "_can_reindex(self, indexer)",
                "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                "_reindex_non_unique(self, target)",
                "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                "_join_multi(self, other, how, return_indexers=True)",
                "_join_non_unique(self, other, how='left', return_indexers=False)",
                "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                "_join_monotonic(self, other, how='left', return_indexers=False)",
                "_wrap_joined_index(self, joined, other)",
                "values(self) -> np.ndarray",
                "array(self) -> ExtensionArray",
                "_values(self) -> Union[ExtensionArray, np.ndarray]",
                "_get_engine_target(self) -> np.ndarray",
                "memory_usage(self, deep: bool=False) -> int",
                "where(self, cond, other=None)",
                "_scalar_data_error(cls, data)",
                "_string_data_error(cls, data)",
                "_coerce_scalar_to_index(self, item)",
                "_to_safe_for_reshape(self)",
                "_convert_for_op(self, value)",
                "_assert_can_do_op(self, value)",
                "_has_complex_internals(self) -> bool",
                "_is_memory_usage_qualified(self) -> bool",
                "is_type_compatible(self, kind) -> bool",
                "__contains__(self, key: Any) -> bool",
                "__hash__(self)",
                "__setitem__(self, key, value)",
                "__getitem__(self, key)",
                "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                "append(self, other)",
                "_concat(self, to_concat, name)",
                "_concat_same_dtype(self, to_concat, name)",
                "putmask(self, mask, value)",
                "equals(self, other: Any) -> bool",
                "identical(self, other) -> bool",
                "asof(self, label)",
                "asof_locs(self, where, mask)",
                "sort_values(self, return_indexer=False, ascending=True, key: Optional[Callable]=None)",
                "sort(self, *args, **kwargs)",
                "shift(self, periods=1, freq=None)",
                "argsort(self, *args, **kwargs) -> np.ndarray",
                "get_value(self, series: 'Series', key)",
                "_check_indexing_error(self, key)",
                "_should_fallback_to_positional(self) -> bool",
                "_get_values_for_loc(self, series: 'Series', loc, key)",
                "set_value(self, arr, key, value)",
                "get_indexer_non_unique(self, target)",
                "get_indexer_for(self, target, **kwargs)",
                "_maybe_promote(self, other: 'Index')",
                "_is_comparable_dtype(self, dtype: DtypeObj) -> bool",
                "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                "map(self, mapper, na_action=None)",
                "_transform_index(self, func, level=None) -> 'Index'",
                "isin(self, values, level=None)",
                "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                "_maybe_cast_indexer(self, key)",
                "_validate_indexer(self, form: str_t, key, kind: str_t)",
                "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                "_searchsorted_monotonic(self, label, side='left')",
                "get_slice_bound(self, label, side: str_t, kind) -> int",
                "slice_locs(self, start=None, end=None, step=None, kind=None)",
                "delete(self, loc)",
                "insert(self, loc: int, item)",
                "drop(self, labels, errors: str_t='raise')",
                "_add_comparison_methods(cls)",
                "_add_numeric_methods_add_sub_disabled(cls)",
                "_add_numeric_methods_disabled(cls)",
                "_add_numeric_methods_binary(cls)",
                "_add_numeric_methods_unary(cls)",
                "_add_numeric_methods(cls)",
                "_add_logical_methods(cls)",
                "_add_logical_methods_disabled(cls)",
                "shape(self)",
                "is_int(v)",
                "_get_leaf_sorter(labels)",
                "_make_evaluate_unary(op, opstr: str_t)",
                "_make_logical_function(name: str_t, desc: str_t, f)",
                "_evaluate_numeric_unary(self)",
                "logical_func(self, *args, **kwargs)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    91
                ],
                "__all__": [
                    95
                ],
                "_unsortable_types": [
                    97
                ],
                "frozenset": [
                    97,
                    233
                ],
                "_index_doc_kwargs": [
                    99,
                    4645,
                    683,
                    2901,
                    766
                ],
                "dict": [
                    107,
                    769,
                    1962,
                    99
                ],
                "_index_shared_docs": [
                    4645,
                    2854,
                    107,
                    683,
                    655,
                    4623,
                    5361,
                    2901,
                    5430,
                    727,
                    5403,
                    766
                ],
                "str_t": [
                    864,
                    5217,
                    2981,
                    3207,
                    5322,
                    108,
                    3068,
                    847,
                    976,
                    4945,
                    2962,
                    4882,
                    5009,
                    5428,
                    1945,
                    828,
                    4959
                ],
                "str": [
                    994,
                    5603,
                    230,
                    969,
                    108,
                    278,
                    5115,
                    991
                ],
                "is_object_dtype": [
                    4224,
                    874,
                    4696,
                    115,
                    916,
                    4693,
                    118,
                    919,
                    344,
                    4153,
                    123,
                    1823
                ],
                "self.dtype": [
                    4224,
                    3724,
                    1823,
                    4772,
                    2603,
                    3884,
                    4148,
                    4693,
                    3927,
                    4696,
                    2777,
                    3422,
                    3558,
                    2922,
                    115,
                    5236,
                    2421,
                    118,
                    123,
                    636
                ],
                "self": [
                    4096,
                    4098,
                    2055,
                    4105,
                    4106,
                    4124,
                    4125,
                    4145,
                    4147,
                    4148,
                    2101,
                    4150,
                    4151,
                    4153,
                    4157,
                    2128,
                    2129,
                    2130,
                    2134,
                    2135,
                    2154,
                    2155,
                    2156,
                    115,
                    116,
                    118,
                    121,
                    4218,
                    123,
                    126,
                    4224,
                    130,
                    4226,
                    134,
                    2183,
                    4230,
                    2185,
                    4234,
                    4236,
                    147,
                    4250,
                    4253,
                    4254,
                    4257,
                    4317,
                    4319,
                    4322,
                    4323,
                    2304,
                    2305,
                    4354,
                    2307,
                    2308,
                    2309,
                    4357,
                    4360,
                    2313,
                    2317,
                    2322,
                    2332,
                    2337,
                    2341,
                    2344,
                    2350,
                    2353,
                    2356,
                    2359,
                    2363,
                    4417,
                    4423,
                    2378,
                    2379,
                    2380,
                    2381,
                    2402,
                    2421,
                    4492,
                    2481,
                    2482,
                    4529,
                    2484,
                    2485,
                    4532,
                    2487,
                    4552,
                    2508,
                    2509,
                    2511,
                    2512,
                    4560,
                    4562,
                    2515,
                    2518,
                    2520,
                    4571,
                    477,
                    2531,
                    2532,
                    486,
                    2535,
                    4583,
                    501,
                    502,
                    504,
                    506,
                    2555,
                    2558,
                    2559,
                    4619,
                    527,
                    533,
                    534,
                    537,
                    545,
                    546,
                    2596,
                    2597,
                    2600,
                    2601,
                    4648,
                    2603,
                    556,
                    2604,
                    4649,
                    4652,
                    4653,
                    2609,
                    562,
                    2612,
                    4661,
                    2614,
                    2618,
                    572,
                    580,
                    4676,
                    2630,
                    4677,
                    4678,
                    2634,
                    4687,
                    4688,
                    4689,
                    595,
                    4691,
                    4692,
                    4693,
                    4694,
                    4696,
                    4698,
                    603,
                    4700,
                    605,
                    607,
                    2678,
                    2679,
                    2681,
                    4730,
                    2683,
                    636,
                    637,
                    2685,
                    2687,
                    642,
                    645,
                    648,
                    651,
                    653,
                    4757,
                    4761,
                    4762,
                    4772,
                    688,
                    689,
                    690,
                    4784,
                    4788,
                    694,
                    4791,
                    4792,
                    698,
                    4794,
                    4795,
                    2749,
                    702,
                    703,
                    2750,
                    2751,
                    2755,
                    2777,
                    2786,
                    2787,
                    2789,
                    770,
                    4879,
                    4880,
                    2837,
                    2839,
                    2844,
                    2846,
                    802,
                    804,
                    806,
                    814,
                    823,
                    4926,
                    832,
                    833,
                    834,
                    835,
                    4941,
                    2908,
                    4957,
                    2913,
                    2916,
                    2917,
                    871,
                    873,
                    874,
                    2922,
                    2923,
                    878,
                    2929,
                    885,
                    2935,
                    889,
                    2937,
                    4986,
                    4991,
                    898,
                    899,
                    4996,
                    4997,
                    2950,
                    4998,
                    904,
                    906,
                    5002,
                    909,
                    5005,
                    2967,
                    2969,
                    2971,
                    2975,
                    2977,
                    5039,
                    5043,
                    2996,
                    2998,
                    5046,
                    958,
                    5057,
                    3010,
                    967,
                    968,
                    969,
                    971,
                    3019,
                    3020,
                    3023,
                    3024,
                    3026,
                    3033,
                    989,
                    990,
                    993,
                    3042,
                    1001,
                    1002,
                    3064,
                    3065,
                    3066,
                    1025,
                    5127,
                    5133,
                    5135,
                    3091,
                    1049,
                    1051,
                    3099,
                    1053,
                    3100,
                    3101,
                    3102,
                    5158,
                    3112,
                    5160,
                    3114,
                    3134,
                    5193,
                    3153,
                    3155,
                    1109,
                    1110,
                    3157,
                    1113,
                    5212,
                    5213,
                    5215,
                    1124,
                    1128,
                    1134,
                    1135,
                    5236,
                    5238,
                    1147,
                    5244,
                    1158,
                    3212,
                    3232,
                    1185,
                    1186,
                    3259,
                    3262,
                    3263,
                    3270,
                    3274,
                    5325,
                    3278,
                    3279,
                    5326,
                    3288,
                    3290,
                    3292,
                    1246,
                    1252,
                    1261,
                    1263,
                    3314,
                    3316,
                    3325,
                    3348,
                    3351,
                    1317,
                    3377,
                    1333,
                    3385,
                    5433,
                    3388,
                    3392,
                    3397,
                    1353,
                    1355,
                    3404,
                    1359,
                    3412,
                    3415,
                    5469,
                    3422,
                    3423,
                    1379,
                    3429,
                    3430,
                    3433,
                    3434,
                    3435,
                    3439,
                    3442,
                    3444,
                    3451,
                    3457,
                    3461,
                    1417,
                    1418,
                    3467,
                    3470,
                    3484,
                    1444,
                    3492,
                    1447,
                    1448,
                    1450,
                    3503,
                    3504,
                    1455,
                    1456,
                    1457,
                    3506,
                    3521,
                    3539,
                    3545,
                    1506,
                    1508,
                    3558,
                    3560,
                    1520,
                    3574,
                    1537,
                    1554,
                    3618,
                    1571,
                    3621,
                    3623,
                    1588,
                    1595,
                    1627,
                    1662,
                    3724,
                    3726,
                    3727,
                    3733,
                    3736,
                    3739,
                    3741,
                    3744,
                    1697,
                    3747,
                    3748,
                    3750,
                    3751,
                    3754,
                    3756,
                    3758,
                    3760,
                    3761,
                    3771,
                    1740,
                    3797,
                    3802,
                    1783,
                    3833,
                    3839,
                    3846,
                    1823,
                    3882,
                    3884,
                    3885,
                    3895,
                    3900,
                    1866,
                    3927,
                    3929,
                    3934,
                    3940,
                    1899,
                    3967,
                    3973,
                    1936,
                    1942,
                    1949,
                    1956,
                    1962,
                    1963,
                    1964,
                    4012,
                    4017,
                    1977,
                    1978,
                    1981,
                    1987,
                    1988,
                    4035,
                    4036,
                    1997,
                    1998,
                    4068,
                    4069,
                    4084
                ],
                "isinstance": [
                    4228,
                    2309,
                    5115,
                    142,
                    148,
                    2328,
                    4121,
                    4760,
                    4761,
                    414,
                    4128,
                    1441,
                    3618,
                    3492,
                    3493,
                    3623,
                    298,
                    5548,
                    4784,
                    305,
                    3377,
                    307,
                    3378,
                    5560,
                    3258,
                    3259,
                    5051,
                    5435,
                    1343,
                    5058,
                    5064,
                    4042,
                    461,
                    4687,
                    3152,
                    4689,
                    3803,
                    606,
                    1246,
                    991,
                    2785,
                    994,
                    3550,
                    356,
                    4321,
                    5618,
                    115,
                    4724,
                    118,
                    4086,
                    123,
                    4092,
                    4221
                ],
                "other": [
                    527,
                    3618,
                    2597,
                    2598,
                    3621,
                    2600,
                    2601,
                    2603,
                    2605,
                    2606,
                    2610,
                    2612,
                    2618,
                    2629,
                    2630,
                    4687,
                    4688,
                    4689,
                    4087,
                    4691,
                    4694,
                    4696,
                    4698,
                    4700,
                    115,
                    116,
                    117,
                    118,
                    2679,
                    2681,
                    121,
                    4218,
                    2685,
                    126,
                    4221,
                    4224,
                    2689,
                    130,
                    4226,
                    4228,
                    134,
                    4230,
                    4232,
                    4234,
                    3724,
                    4236,
                    142,
                    3726,
                    3727,
                    147,
                    3734,
                    3736,
                    4250,
                    4253,
                    3743,
                    4257,
                    3748,
                    3751,
                    3761,
                    3771,
                    2750,
                    2751,
                    2756,
                    2757,
                    2768,
                    2780,
                    2785,
                    2786,
                    2789,
                    2790,
                    2328,
                    2332,
                    2337,
                    2341,
                    2344,
                    3881,
                    3882,
                    2350,
                    3887,
                    3376,
                    2353,
                    3378,
                    2356,
                    3893,
                    2359,
                    3385,
                    3388,
                    3393,
                    3396,
                    2378,
                    3405,
                    3412,
                    3414,
                    3422,
                    3424,
                    3425,
                    2404,
                    2405,
                    3429,
                    3431,
                    3433,
                    3434,
                    3436,
                    3440,
                    3442,
                    2421,
                    3445,
                    3453,
                    3457,
                    3461,
                    3471,
                    3474,
                    3485,
                    3493,
                    3504,
                    2482,
                    3507,
                    2484,
                    2485,
                    2487,
                    3521,
                    2508,
                    2509,
                    2512,
                    3539,
                    2516,
                    2518,
                    3544,
                    3546,
                    2532,
                    3558,
                    2535,
                    3561,
                    3574,
                    4086,
                    4089,
                    2555,
                    2558
                ],
                "ABCCategorical": [
                    115
                ],
                "left": [
                    3621,
                    3625,
                    3628,
                    3629,
                    3641,
                    3643,
                    3645,
                    3646,
                    3653,
                    3656,
                    3659,
                    3663,
                    3697,
                    244,
                    116,
                    117,
                    247,
                    250,
                    253
                ],
                "type": [
                    651,
                    3212,
                    3213,
                    4492,
                    1185,
                    4257,
                    1964,
                    4017,
                    4150,
                    4792,
                    5561,
                    698,
                    2363,
                    832,
                    461,
                    4688,
                    4691,
                    477,
                    1001,
                    1134,
                    3953,
                    116,
                    2421
                ],
                "self._values": [
                    130,
                    770,
                    2313,
                    4236,
                    1949,
                    1956,
                    2609,
                    690,
                    702,
                    3023,
                    3024,
                    2515,
                    1110,
                    5469,
                    3042,
                    2155,
                    116,
                    504,
                    121,
                    126,
                    3839
                ],
                "other.dtype": [
                    4224,
                    3558,
                    4232,
                    2603,
                    3724,
                    116,
                    2421,
                    4696,
                    3422
                ],
                "op": [
                    130,
                    134,
                    136,
                    5326,
                    112,
                    3026,
                    147,
                    3028,
                    117,
                    152,
                    121,
                    126
                ],
                "ExtensionArray": [
                    256,
                    3810,
                    4117,
                    118,
                    3801,
                    3038
                ],
                "np.errstate": [
                    120,
                    129,
                    125
                ],
                "np": [
                    3601,
                    3614,
                    4130,
                    5666,
                    4653,
                    558,
                    5679,
                    4657,
                    562,
                    4147,
                    569,
                    5193,
                    3663,
                    5719,
                    5212,
                    5214,
                    4708,
                    120,
                    5756,
                    125,
                    5757,
                    129,
                    130,
                    2692,
                    645,
                    160,
                    706,
                    3778,
                    2761,
                    2762,
                    3797,
                    5333,
                    3803,
                    3810,
                    3320,
                    3835,
                    256,
                    3328,
                    4355,
                    4357,
                    3336,
                    3337,
                    3348,
                    2844,
                    2344,
                    3893,
                    3895,
                    5435,
                    3399,
                    5447,
                    5450,
                    3407,
                    2904,
                    349,
                    2914,
                    356,
                    380,
                    2956,
                    4494,
                    914,
                    2963,
                    407,
                    925,
                    2982,
                    1969,
                    4532,
                    5051,
                    1981,
                    1470,
                    5058,
                    3013,
                    1990,
                    969,
                    971,
                    461,
                    3023,
                    3024,
                    4048,
                    3027,
                    4052,
                    3038,
                    3039,
                    3041,
                    3043,
                    3570,
                    3572,
                    5630
                ],
                "result": [
                    2614,
                    568,
                    569,
                    570,
                    2618,
                    573,
                    2130,
                    1110,
                    2134,
                    1113,
                    1114,
                    603,
                    605,
                    606,
                    607,
                    608,
                    4727,
                    121,
                    4730,
                    4732,
                    126,
                    130,
                    132,
                    133,
                    2184,
                    2185,
                    147,
                    148,
                    149,
                    150,
                    3843,
                    4357,
                    3846,
                    3847,
                    4360,
                    4362,
                    5433,
                    5435,
                    5436,
                    5439,
                    5441,
                    3414,
                    3418,
                    3419,
                    3420,
                    920,
                    925,
                    926,
                    927,
                    930,
                    931,
                    4529,
                    4531,
                    4532,
                    4534,
                    1468,
                    1470,
                    1472,
                    1473,
                    463,
                    464,
                    4050,
                    4051,
                    4052,
                    4053,
                    4054,
                    4055,
                    469,
                    3545,
                    4057,
                    470,
                    471,
                    473,
                    2520,
                    2523,
                    2527,
                    2528,
                    3550,
                    3551,
                    3552,
                    2539,
                    2542,
                    2546,
                    507,
                    506,
                    2555,
                    508,
                    2559
                ],
                "ABCMultiIndex": [
                    3492,
                    2309,
                    3493,
                    4228,
                    176,
                    3377,
                    3378,
                    4784,
                    4724,
                    123,
                    1246
                ],
                "ops.comp_method_OBJECT_ARRAY": [
                    126
                ],
                "ops": [
                    5314,
                    134,
                    5299,
                    5301,
                    5302,
                    5306,
                    126,
                    5311
                ],
                "np.asarray": [
                    130,
                    645,
                    969,
                    2956,
                    5212,
                    4048,
                    4657,
                    562,
                    3570,
                    407,
                    2844,
                    349
                ],
                "is_bool_dtype": [
                    132,
                    3887,
                    569,
                    380,
                    5054
                ],
                "ops.invalid_comparison": [
                    134
                ],
                "unpack_zerodim_and_defer": [
                    112
                ],
                "op.__name__": [
                    112,
                    152,
                    136
                ],
                "name": [
                    896,
                    1153,
                    1154,
                    1155,
                    4096,
                    4098,
                    1146,
                    136,
                    137,
                    394,
                    4105,
                    4106,
                    5624,
                    402,
                    407,
                    152,
                    153,
                    1050,
                    1051,
                    5627,
                    1053,
                    4126,
                    1183,
                    1184,
                    289,
                    4131,
                    420,
                    1317,
                    806,
                    424,
                    306,
                    308,
                    5429,
                    5430,
                    315,
                    3771,
                    3772,
                    322,
                    5443,
                    5829,
                    328,
                    5832,
                    2378,
                    2379,
                    2380,
                    334,
                    340,
                    1108,
                    470,
                    1109,
                    1110,
                    353,
                    4069,
                    1126,
                    1000,
                    1001,
                    1002,
                    878,
                    5618,
                    501,
                    5621,
                    375,
                    1144,
                    377,
                    506,
                    379,
                    2558,
                    2559
                ],
                "set_function_name": [
                    137,
                    153
                ],
                "cmp_method": [
                    137
                ],
                "cls": [
                    5254,
                    5255,
                    5256,
                    137,
                    393,
                    5257,
                    5258,
                    5259,
                    402,
                    5266,
                    5267,
                    405,
                    5268,
                    5269,
                    5270,
                    153,
                    5271,
                    5278,
                    5279,
                    5280,
                    289,
                    5281,
                    5282,
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5288,
                    5289,
                    171,
                    5290,
                    5291,
                    174,
                    176,
                    5298,
                    5299,
                    5300,
                    181,
                    5301,
                    5302,
                    5303,
                    5305,
                    5306,
                    5309,
                    5310,
                    5311,
                    5312,
                    5313,
                    5314,
                    3908,
                    5446,
                    5449,
                    463,
                    5458,
                    5331,
                    5332,
                    5333,
                    5334,
                    5459,
                    602,
                    603,
                    5338,
                    5339,
                    5625
                ],
                "ABCSeries": [
                    356,
                    142,
                    5618,
                    2328,
                    5435
                ],
                "ABCDataFrame": [
                    2328,
                    142
                ],
                "ABCTimedeltaIndex": [
                    4689,
                    4115,
                    142
                ],
                "NotImplemented": [
                    2329,
                    143
                ],
                "Series": [
                    2337,
                    2350,
                    147,
                    2332,
                    1053
                ],
                "tuple": [
                    3328,
                    769,
                    1441,
                    3550,
                    686,
                    4787,
                    148,
                    4086,
                    4791,
                    4760,
                    414
                ],
                "Index": [
                    645,
                    5512,
                    4106,
                    653,
                    149,
                    150,
                    407,
                    3351,
                    2332,
                    4128,
                    2337,
                    4131,
                    4774,
                    424,
                    2344,
                    5548,
                    2350,
                    5553,
                    3258,
                    4795,
                    3772,
                    2621,
                    573,
                    3900,
                    5435,
                    2626,
                    5578,
                    5326,
                    3152,
                    2134,
                    2777,
                    606,
                    3934,
                    2528,
                    353,
                    2785,
                    2786,
                    356,
                    2404,
                    2405,
                    5215,
                    5472,
                    5473,
                    5474,
                    5618,
                    4092,
                    4221
                ],
                "index_arithmetic_method": [
                    153
                ],
                "Exception": [
                    156
                ],
                "_o_dtype": [
                    160,
                    5826
                ],
                "np.dtype": [
                    160,
                    5756,
                    5630
                ],
                "object": [
                    3328,
                    4121,
                    160,
                    161,
                    423,
                    3890,
                    4157,
                    5830,
                    971,
                    463,
                    5715,
                    349,
                    352,
                    353,
                    2402,
                    2404,
                    2405,
                    2923,
                    2924,
                    383
                ],
                "_Identity": [
                    161,
                    533
                ],
                "issubclass": [
                    176,
                    171,
                    380
                ],
                "ABCPeriodIndex": [
                    171,
                    4116
                ],
                "_new_PeriodIndex": [
                    174
                ],
                "d": [
                    1962,
                    1963,
                    1964,
                    174,
                    177,
                    179,
                    181
                ],
                "d.pop": [
                    179
                ],
                "cls.__new__": [
                    181
                ],
                "IndexOpsMixin": [
                    184,
                    232,
                    3841,
                    3800
                ],
                "PandasObject": [
                    184,
                    231
                ],
                "_deprecations": [
                    230
                ],
                "FrozenSet": [
                    230
                ],
                "PandasObject._deprecations": [
                    231
                ],
                "IndexOpsMixin._deprecations": [
                    232
                ],
                "_join_precedence": [
                    237
                ],
                "libjoin.left_join_indexer_unique": [
                    244
                ],
                "libjoin": [
                    250,
                    244,
                    253,
                    247
                ],
                "right": [
                    3621,
                    3625,
                    3631,
                    244,
                    3637,
                    247,
                    250,
                    253
                ],
                "libjoin.left_join_indexer": [
                    247
                ],
                "libjoin.inner_join_indexer": [
                    250
                ],
                "libjoin.outer_join_indexer": [
                    253
                ],
                "_typ": [
                    255
                ],
                "_data": [
                    256,
                    4150
                ],
                "Union": [
                    256,
                    3810,
                    3038
                ],
                "np.ndarray": [
                    256,
                    4494,
                    2963,
                    2982,
                    558,
                    5051,
                    5435,
                    3778,
                    5058,
                    3013,
                    461,
                    3797,
                    2904,
                    3803,
                    3038,
                    3039,
                    3041,
                    3810,
                    356,
                    4708,
                    3835,
                    5756,
                    5757,
                    5630
                ],
                "_id": [
                    257
                ],
                "_name": [
                    258
                ],
                "Label": [
                    258,
                    5798,
                    454,
                    488,
                    5614
                ],
                "_no_setting_name": [
                    262
                ],
                "bool": [
                    1664,
                    3969,
                    3842,
                    1540,
                    262,
                    3975,
                    5517,
                    4238,
                    1938,
                    4882,
                    1557,
                    1055,
                    1952,
                    1825,
                    1699,
                    1190,
                    1574,
                    5630,
                    5798,
                    1591,
                    1598,
                    4159,
                    1993,
                    1868,
                    1742,
                    1998,
                    4048,
                    4059,
                    1629,
                    4702,
                    3963,
                    4579,
                    2407,
                    1516,
                    1901,
                    1137,
                    1523,
                    2291,
                    3956,
                    1785,
                    891,
                    5756,
                    510
                ],
                "_comparables": [
                    263
                ],
                "_attributes": [
                    264
                ],
                "_is_numeric_dtype": [
                    265
                ],
                "_can_hold_na": [
                    266
                ],
                "_defer_to_indexing": [
                    269
                ],
                "_engine_type": [
                    271
                ],
                "libindex.ObjectEngine": [
                    271
                ],
                "libindex": [
                    271
                ],
                "_supports_partial_string_indexing": [
                    274
                ],
                "_accessors": [
                    276
                ],
                "CachedAccessor": [
                    278
                ],
                "StringMethods": [
                    278
                ],
                "maybe_extract_name": [
                    289,
                    1134
                ],
                "data": [
                    5651,
                    404,
                    405,
                    406,
                    407,
                    5653,
                    409,
                    5655,
                    411,
                    412,
                    5659,
                    414,
                    5780,
                    5664,
                    289,
                    5666,
                    5781,
                    420,
                    5789,
                    5790,
                    423,
                    5671,
                    5673,
                    298,
                    300,
                    5677,
                    302,
                    5679,
                    305,
                    306,
                    307,
                    308,
                    5681,
                    315,
                    833,
                    322,
                    3909,
                    5829,
                    328,
                    840,
                    841,
                    843,
                    5832,
                    334,
                    5710,
                    5711,
                    340,
                    347,
                    5723,
                    349,
                    5724,
                    352,
                    353,
                    356,
                    5734,
                    5735,
                    5743,
                    5744,
                    370,
                    371,
                    5747,
                    5748,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    383
                ],
                "dtype": [
                    642,
                    644,
                    645,
                    390,
                    648,
                    651,
                    653,
                    5776,
                    5650,
                    5653,
                    407,
                    5659,
                    5664,
                    291,
                    292,
                    295,
                    296,
                    424,
                    809,
                    810,
                    3884,
                    5671,
                    5672,
                    5677,
                    5679,
                    306,
                    562,
                    308,
                    3891,
                    311,
                    3898,
                    315,
                    3900,
                    318,
                    322,
                    5826,
                    324,
                    328,
                    5832,
                    330,
                    334,
                    336,
                    340,
                    343,
                    344,
                    3927,
                    346,
                    347,
                    3932,
                    3934,
                    364,
                    633,
                    370,
                    371,
                    375,
                    377,
                    634,
                    379,
                    636,
                    639
                ],
                "pandas_dtype": [
                    634,
                    292
                ],
                "kwargs": [
                    394,
                    906,
                    397,
                    398,
                    407,
                    420,
                    293,
                    294,
                    424,
                    685,
                    686,
                    814,
                    4534,
                    315,
                    961,
                    322,
                    4677,
                    4678,
                    5829,
                    328,
                    5832,
                    334,
                    340,
                    353
                ],
                "tz": [
                    296,
                    294,
                    295
                ],
                "kwargs.pop": [
                    294
                ],
                "validate_tz_from_dtype": [
                    295
                ],
                "tz_to_dtype": [
                    296
                ],
                "ABCPandasArray": [
                    298
                ],
                "data.to_numpy": [
                    300
                ],
                "data_dtype": [
                    324,
                    330,
                    302,
                    336,
                    343,
                    311,
                    318
                ],
                "getattr": [
                    486,
                    3278,
                    527,
                    302,
                    4253
                ],
                "RangeIndex": [
                    305,
                    306,
                    5611,
                    308
                ],
                "copy": [
                    642,
                    387,
                    645,
                    648,
                    5653,
                    407,
                    5664,
                    5666,
                    424,
                    5549,
                    5679,
                    5553,
                    306,
                    315,
                    322,
                    5575,
                    328,
                    5832,
                    334,
                    340,
                    353,
                    370,
                    375,
                    377,
                    379,
                    637
                ],
                "range": [
                    307,
                    3260
                ],
                "RangeIndex.from_range": [
                    308
                ],
                "is_categorical_dtype": [
                    4656,
                    913,
                    639,
                    311
                ],
                "_maybe_asobject": [
                    322,
                    328,
                    334,
                    340,
                    315
                ],
                "CategoricalIndex": [
                    642,
                    315
                ],
                "is_interval_dtype": [
                    318
                ],
                "IntervalIndex": [
                    322
                ],
                "is_datetime64_any_dtype": [
                    324
                ],
                "DatetimeIndex": [
                    328
                ],
                "is_timedelta64_dtype": [
                    330
                ],
                "TimedeltaIndex": [
                    334
                ],
                "is_period_dtype": [
                    336,
                    4148
                ],
                "PeriodIndex": [
                    340
                ],
                "is_extension_array_dtype": [
                    4232,
                    644,
                    343
                ],
                "ea_cls": [
                    346,
                    347
                ],
                "dtype.construct_array_type": [
                    346
                ],
                "ea_cls._from_sequence": [
                    347
                ],
                "data.astype": [
                    352,
                    5789,
                    5671,
                    5677,
                    5780,
                    381
                ],
                "_maybe_cast_with_dtype": [
                    370
                ],
                "data.dtype": [
                    5735,
                    5711,
                    5744,
                    371,
                    5748,
                    374,
                    376,
                    378,
                    380,
                    5724
                ],
                "is_signed_integer_dtype": [
                    374
                ],
                "Int64Index": [
                    375
                ],
                "is_unsigned_integer_dtype": [
                    376,
                    5776
                ],
                "UInt64Index": [
                    377
                ],
                "is_float_dtype": [
                    5672,
                    378
                ],
                "Float64Index": [
                    379
                ],
                "data.dtype.type": [
                    380
                ],
                "np.bool": [
                    380
                ],
                "subarr": [
                    388,
                    5734,
                    391,
                    423,
                    424,
                    5706,
                    5710,
                    399,
                    5743,
                    402,
                    5715,
                    5747,
                    5719,
                    5752,
                    5723,
                    381,
                    383
                ],
                "com.asarray_tuplesafe": [
                    423,
                    3173,
                    383
                ],
                "com": [
                    3173,
                    423,
                    4039,
                    4942,
                    3119,
                    4047,
                    5237,
                    3484,
                    3485,
                    383
                ],
                "subarr.copy": [
                    388
                ],
                "new_data": [
                    394,
                    391
                ],
                "new_dtype": [
                    392,
                    394,
                    391
                ],
                "_maybe_cast_data_without_dtype": [
                    391
                ],
                "TypeError": [
                    649,
                    650,
                    2697,
                    3211,
                    5625,
                    398,
                    5783,
                    2848,
                    1185,
                    5792,
                    3619,
                    4013,
                    4017,
                    4020,
                    2615,
                    4152,
                    3907,
                    3269,
                    3914,
                    4434,
                    5587,
                    2774,
                    2521,
                    2781,
                    1250,
                    1253,
                    3953,
                    2547,
                    3447,
                    1145,
                    4093,
                    1150,
                    5119
                ],
                "repr": [
                    5061,
                    3909,
                    2989,
                    398,
                    4017
                ],
                "set": [
                    3485,
                    3484,
                    2526,
                    398
                ],
                "subarr.ndim": [
                    399
                ],
                "ValueError": [
                    2945,
                    5123,
                    649,
                    2958,
                    5007,
                    401,
                    2833,
                    5783,
                    5656,
                    1177,
                    1179,
                    5792,
                    3233,
                    3490,
                    5665,
                    5795,
                    5030,
                    1449,
                    2988,
                    4013,
                    5047,
                    4152,
                    2362,
                    699,
                    716,
                    5712,
                    3284,
                    5725,
                    1247,
                    5605,
                    2152,
                    5736,
                    2425,
                    2940,
                    5119
                ],
                "cls._simple_new": [
                    402
                ],
                "is_scalar": [
                    4929,
                    4931,
                    4038,
                    3952,
                    4051,
                    404,
                    4574
                ],
                "cls._scalar_data_error": [
                    405
                ],
                "hasattr": [
                    994,
                    5552,
                    3253,
                    406,
                    602,
                    991
                ],
                "tupleize_cols": [
                    409
                ],
                "is_list_like": [
                    1153,
                    1249,
                    1252,
                    1255,
                    1257,
                    1176,
                    409,
                    2780,
                    1149
                ],
                "is_iterator": [
                    411,
                    5555
                ],
                "list": [
                    904,
                    412,
                    1441,
                    3498,
                    3499,
                    1455,
                    1456,
                    1457,
                    5556,
                    5560,
                    5561,
                    5562,
                    3656,
                    3659,
                    3533,
                    5588,
                    2523,
                    4086,
                    4087
                ],
                "all": [
                    414,
                    5598,
                    5781,
                    4251,
                    5790
                ],
                "e": [
                    414
                ],
                "MultiIndex.from_tuples": [
                    419,
                    4767
                ],
                "MultiIndex": [
                    5569,
                    3618,
                    419,
                    3525,
                    1477,
                    3623,
                    5514,
                    3694,
                    4761,
                    4767
                ],
                "kwargs.get": [
                    420
                ],
                "property": [
                    3777,
                    3809,
                    1539,
                    1188,
                    1573,
                    1322,
                    441,
                    1515,
                    1522,
                    3955,
                    1556,
                    5461,
                    857,
                    1597,
                    1119
                ],
                "values": [
                    2308,
                    2311,
                    2313,
                    909,
                    2318,
                    4880,
                    913,
                    914,
                    2322,
                    916,
                    917,
                    919,
                    920,
                    1176,
                    1178,
                    923,
                    1179,
                    1183,
                    930,
                    1186,
                    3885,
                    4145,
                    3890,
                    4147,
                    3893,
                    4150,
                    3895,
                    4151,
                    3260,
                    1981,
                    958,
                    1982,
                    960,
                    961,
                    1983,
                    3262,
                    3263,
                    3900,
                    969,
                    971,
                    461,
                    973,
                    974,
                    464,
                    721,
                    595,
                    596,
                    469,
                    724,
                    4727,
                    4724,
                    4725,
                    502,
                    503,
                    504,
                    4726,
                    506,
                    3325
                ],
                "object.__new__": [
                    463
                ],
                "result._data": [
                    464
                ],
                "result._index_data": [
                    469
                ],
                "result._name": [
                    1472,
                    470
                ],
                "result._cache": [
                    507,
                    471
                ],
                "result._reset_identity": [
                    473
                ],
                "classmethod": [
                    5249,
                    5316,
                    453,
                    3912,
                    5261,
                    5293,
                    5453,
                    5336,
                    5273,
                    5341,
                    3903
                ],
                "cache_readonly": [
                    1985,
                    1992,
                    3799,
                    1972,
                    475,
                    1590,
                    1944,
                    1951,
                    539,
                    575
                ],
                "k": [
                    4730,
                    836,
                    486
                ],
                "self._attributes": [
                    486
                ],
                "no_default": [
                    488,
                    501
                ],
                "self.name": [
                    4096,
                    642,
                    899,
                    898,
                    645,
                    1158,
                    653,
                    3351,
                    1051,
                    4795,
                    3900,
                    3263,
                    1353,
                    1355,
                    2379,
                    1109,
                    2134,
                    3290,
                    3292,
                    5215,
                    2786,
                    2787,
                    501
                ],
                "cache": [
                    507,
                    502
                ],
                "self._cache.copy": [
                    502
                ],
                "self._cache": [
                    502
                ],
                "self._simple_new": [
                    506,
                    3263
                ],
                "self._id": [
                    533,
                    607,
                    527
                ],
                "Ellipsis": [
                    527
                ],
                "self._engine.clear_mapping": [
                    537
                ],
                "self._engine": [
                    1537,
                    2971,
                    2950,
                    3846,
                    4619,
                    4012,
                    1554,
                    4661,
                    2839,
                    537,
                    2969,
                    1595
                ],
                "target_values": [
                    545,
                    546,
                    2977,
                    3022,
                    3023,
                    3024,
                    2965,
                    3033,
                    2973
                ],
                "self._get_engine_target": [
                    3560,
                    545,
                    595,
                    3733
                ],
                "self._engine_type": [
                    546
                ],
                "len": [
                    3328,
                    4096,
                    4357,
                    5509,
                    3336,
                    3337,
                    4104,
                    5005,
                    5135,
                    3603,
                    3348,
                    1178,
                    1179,
                    4764,
                    3232,
                    546,
                    1446,
                    5158,
                    1448,
                    5160,
                    1450,
                    556,
                    3502,
                    1464,
                    3641,
                    3258,
                    1981,
                    5566,
                    5057,
                    3010,
                    3650,
                    3396,
                    3399,
                    2508,
                    3404,
                    2511,
                    3407,
                    3663,
                    5586,
                    989,
                    5598,
                    4322,
                    2537,
                    1002,
                    3319,
                    3320
                ],
                "self._data": [
                    802,
                    4035,
                    580,
                    5193,
                    1962,
                    2683,
                    556,
                    562,
                    3797,
                    3833,
                    3802,
                    603,
                    3262
                ],
                "int": [
                    3842,
                    552,
                    1323,
                    5195,
                    1358,
                    5009,
                    1343
                ],
                "lib.item_from_zerodim": [
                    568
                ],
                "lib": [
                    3616,
                    5057,
                    3650,
                    5673,
                    5706,
                    5651,
                    917,
                    568,
                    569,
                    5564,
                    1949,
                    5055
                ],
                "lib.is_scalar": [
                    569
                ],
                "np.ndim": [
                    569,
                    4052
                ],
                "attrs": [
                    834,
                    836,
                    5325,
                    5326,
                    572,
                    573
                ],
                "self._get_attributes_dict": [
                    1963,
                    5325,
                    4757,
                    572,
                    4125,
                    3934
                ],
                "self._data.dtype": [
                    580
                ],
                "values.ravel": [
                    596
                ],
                "order": [
                    596
                ],
                "self._data.view": [
                    603,
                    3797
                ],
                "self._shallow_copy": [
                    770,
                    2185,
                    2322,
                    1049,
                    802,
                    804,
                    4151,
                    703,
                    4036,
                    3397,
                    5193,
                    2634,
                    2380,
                    2135,
                    605,
                    2155,
                    2156,
                    1263,
                    2683,
                    2559
                ],
                "result._id": [
                    607
                ],
                "is_dtype_equal": [
                    5826,
                    2922,
                    2603,
                    2421,
                    636,
                    3422
                ],
                "self.copy": [
                    637,
                    814,
                    823
                ],
                "self.values": [
                    642,
                    4354,
                    5433,
                    648,
                    4360,
                    909,
                    3885,
                    5326,
                    4145,
                    889,
                    1053
                ],
                "casted": [
                    648,
                    653
                ],
                "self.values.astype": [
                    648
                ],
                "__name__": [
                    832,
                    1185,
                    1001,
                    651,
                    3212,
                    3213,
                    4492,
                    3953,
                    4017,
                    698,
                    2363
                ],
                "err": [
                    652,
                    2549,
                    2841,
                    4154,
                    5049
                ],
                "nv.validate_take": [
                    686
                ],
                "nv": [
                    769,
                    686
                ],
                "indices": [
                    711,
                    715,
                    687,
                    721,
                    691,
                    724,
                    702
                ],
                "ensure_platform_int": [
                    768,
                    3713,
                    2914,
                    3716,
                    711,
                    2952,
                    687,
                    3567,
                    3568,
                    3764,
                    3765,
                    4662,
                    3322
                ],
                "self._can_hold_na": [
                    688,
                    1977,
                    1987,
                    1997
                ],
                "taken": [
                    2629,
                    2633,
                    2634,
                    2636,
                    2637,
                    720,
                    689,
                    724,
                    725,
                    702,
                    703
                ],
                "self._assert_take_fillable": [
                    689
                ],
                "allow_fill": [
                    697,
                    714,
                    692,
                    721
                ],
                "fill_value": [
                    697,
                    714,
                    693
                ],
                "self._na_value": [
                    3882,
                    694,
                    4319
                ],
                "cls_name": [
                    698,
                    700
                ],
                "self._values.take": [
                    702
                ],
                "Appender": [
                    4645,
                    683,
                    2901,
                    5430,
                    5431,
                    766
                ],
                "np.nan": [
                    1969,
                    706,
                    1470
                ],
                "any": [
                    715,
                    5655
                ],
                "algos.take": [
                    720
                ],
                "algos": [
                    2626,
                    3652,
                    2535,
                    2696,
                    2633,
                    2538,
                    720,
                    4880,
                    2546,
                    2773,
                    3702
                ],
                "na_value": [
                    721
                ],
                "values.take": [
                    724
                ],
                "repeats": [
                    768,
                    770
                ],
                "nv.validate_repeat": [
                    769
                ],
                "axis": [
                    769
                ],
                "self._values.repeat": [
                    770
                ],
                "deep": [
                    801,
                    3843,
                    806,
                    3846,
                    1147
                ],
                "new_index": [
                    802,
                    804,
                    807,
                    810,
                    811,
                    3351,
                    3352
                ],
                "self._data.copy": [
                    802
                ],
                "names": [
                    4096,
                    5510,
                    5511,
                    5512,
                    5514,
                    4762,
                    4764,
                    4766,
                    1151,
                    4767,
                    1188,
                    806,
                    807,
                    3520,
                    3526,
                    1249,
                    1252,
                    1255,
                    1256,
                    1264,
                    1144,
                    1146,
                    1148,
                    1149,
                    4095
                ],
                "self._validate_names": [
                    806
                ],
                "new_index.set_names": [
                    807
                ],
                "new_index.astype": [
                    810
                ],
                "klass_name": [
                    832,
                    843
                ],
                "self._format_data": [
                    833
                ],
                "self._format_attrs": [
                    834
                ],
                "space": [
                    835,
                    837
                ],
                "self._format_space": [
                    835
                ],
                "attrs_str": [
                    836,
                    837
                ],
                "v": [
                    4730,
                    836,
                    3087
                ],
                "prepr": [
                    843,
                    837
                ],
                "join": [
                    837
                ],
                "res": [
                    843,
                    845,
                    5780,
                    5781,
                    5782,
                    5789,
                    5790,
                    5791
                ],
                "default_pprint": [
                    862
                ],
                "is_justify": [
                    872,
                    875,
                    869,
                    878
                ],
                "self.inferred_type": [
                    1697,
                    3973,
                    871,
                    873,
                    1866,
                    1899,
                    1740,
                    4687,
                    1936,
                    4689,
                    4692,
                    1942,
                    1783,
                    1662
                ],
                "self.categories": [
                    874
                ],
                "format_object_summary": [
                    877
                ],
                "self._formatter_func": [
                    878
                ],
                "format_object_attrs": [
                    885
                ],
                "header": [
                    897,
                    931,
                    904,
                    906,
                    895
                ],
                "header.append": [
                    897
                ],
                "pprint_thing": [
                    920,
                    898
                ],
                "formatter": [
                    904,
                    903
                ],
                "self.map": [
                    904,
                    1508
                ],
                "self._format_with_header": [
                    906
                ],
                "values.dtype": [
                    913,
                    916,
                    919
                ],
                "np.array": [
                    5666,
                    1990,
                    2344,
                    971,
                    5679,
                    914,
                    4532,
                    925
                ],
                "lib.maybe_convert_objects": [
                    917
                ],
                "x": [
                    4128,
                    5599,
                    4787,
                    4788,
                    5334,
                    4791,
                    920,
                    4121,
                    3418,
                    3419,
                    4794,
                    5598,
                    2527
                ],
                "mask": [
                    4354,
                    4357,
                    4359,
                    923,
                    924,
                    926,
                    4147,
                    1467,
                    1469,
                    1470,
                    4157,
                    967,
                    973,
                    3664,
                    3665,
                    3666,
                    3667,
                    3681,
                    3682,
                    3684,
                    3692,
                    3571,
                    3572,
                    5239,
                    5240,
                    5242,
                    5243
                ],
                "isna": [
                    5655,
                    967,
                    2057,
                    2318,
                    3895,
                    3929,
                    1978,
                    923
                ],
                "mask.any": [
                    5240,
                    924,
                    1469
                ],
                "na_rep": [
                    973,
                    926
                ],
                "result.tolist": [
                    927
                ],
                "_trim_front": [
                    930
                ],
                "format_array": [
                    930
                ],
                "slicer": [
                    960,
                    959
                ],
                "values._format_native_types": [
                    961
                ],
                "self.is_object": [
                    968,
                    4068,
                    3967
                ],
                "quoting": [
                    968
                ],
                "astype": [
                    969,
                    2404,
                    2405
                ],
                "head": [
                    992,
                    996,
                    990,
                    991
                ],
                "head.format": [
                    992
                ],
                "tail": [
                    993,
                    994,
                    995,
                    996
                ],
                "tail.format": [
                    995
                ],
                "index_summary": [
                    1002,
                    996,
                    998
                ],
                "index": [
                    5829,
                    5830,
                    1048,
                    1049,
                    1112,
                    1053
                ],
                "self.values.copy": [
                    4145,
                    1053
                ],
                "DataFrame": [
                    1110
                ],
                "self._values.copy": [
                    1110
                ],
                "result.index": [
                    1113
                ],
                "self._name": [
                    1186,
                    1124,
                    1135
                ],
                "self._no_setting_name": [
                    1128
                ],
                "RuntimeError": [
                    1130
                ],
                "value": [
                    3946,
                    4620,
                    4621,
                    1134,
                    1135,
                    2128,
                    3952,
                    2130,
                    3953,
                    4147,
                    4157
                ],
                "name.setter": [
                    1126
                ],
                "deepcopy": [
                    1147
                ],
                "self.names": [
                    3504,
                    1457,
                    4792,
                    3385,
                    4762,
                    1147,
                    3484
                ],
                "FrozenList": [
                    1158
                ],
                "is_hashable": [
                    1184,
                    5624
                ],
                "_set_names": [
                    1188
                ],
                "_get_names": [
                    1188
                ],
                "level": [
                    2182,
                    2183,
                    1417,
                    4878,
                    4879,
                    1441,
                    1442,
                    1444,
                    1446,
                    1448,
                    1450,
                    3628,
                    3629,
                    4785,
                    4787,
                    3382,
                    3645,
                    1343,
                    1344,
                    3391,
                    3393,
                    1347,
                    3267,
                    1349,
                    3653,
                    1351,
                    3271,
                    1353,
                    3657,
                    1355,
                    3660,
                    1359,
                    3670,
                    3415,
                    3544,
                    3546,
                    1246,
                    1504,
                    1249,
                    1252,
                    3686,
                    1257,
                    1258,
                    1264,
                    3703,
                    3706
                ],
                "self.nlevels": [
                    1448,
                    1450,
                    1252
                ],
                "inplace": [
                    1265,
                    1260,
                    1317
                ],
                "idx": [
                    4417,
                    4419,
                    1261,
                    1263,
                    1264,
                    1266,
                    5214,
                    5215
                ],
                "idx._set_names": [
                    1264
                ],
                "self.set_names": [
                    1317
                ],
                "IndexError": [
                    1345,
                    1350
                ],
                "KeyError": [
                    2851,
                    5059,
                    1354,
                    3116,
                    4561,
                    5044,
                    2840,
                    2841,
                    5242,
                    4318
                ],
                "self._validate_index_level": [
                    2183,
                    1417,
                    4879,
                    1359
                ],
                "self.sort_values": [
                    1379
                ],
                "ascending": [
                    1379,
                    4420
                ],
                "get_level_values": [
                    1420
                ],
                "_get_level_values": [
                    1420
                ],
                "levnums": [
                    1459,
                    1444
                ],
                "sorted": [
                    1444
                ],
                "self._get_level_number": [
                    1444
                ],
                "lev": [
                    1444
                ],
                "new_levels": [
                    1478,
                    3659,
                    3660,
                    1455,
                    3695,
                    1460,
                    1464,
                    1468
                ],
                "self.levels": [
                    1455
                ],
                "new_codes": [
                    3684,
                    3686,
                    1479,
                    3656,
                    3657,
                    3687,
                    1456,
                    3696,
                    3666,
                    1461,
                    1467,
                    1468,
                    3678
                ],
                "self.codes": [
                    1456
                ],
                "new_names": [
                    1472,
                    1457,
                    1462,
                    1480
                ],
                "i": [
                    1459,
                    1460,
                    1461,
                    1462,
                    4787
                ],
                "new_levels.pop": [
                    1460
                ],
                "new_codes.pop": [
                    1461
                ],
                "new_names.pop": [
                    1462
                ],
                "take": [
                    1468,
                    4357
                ],
                "result.putmask": [
                    1470
                ],
                "mapper": [
                    1505,
                    4755,
                    1508
                ],
                "grouper": [
                    1506,
                    1508,
                    1510
                ],
                "self.is_monotonic_increasing": [
                    1571,
                    4996,
                    1520,
                    3026,
                    2967
                ],
                "self._engine.is_monotonic_increasing": [
                    1537
                ],
                "self._engine.is_monotonic_decreasing": [
                    1554
                ],
                "self.is_unique": [
                    2304,
                    3232,
                    2307,
                    1571,
                    2531,
                    3429,
                    4676,
                    3433,
                    3278,
                    2929,
                    1588,
                    3736,
                    1627
                ],
                "self.is_monotonic_decreasing": [
                    1588,
                    4998
                ],
                "self._engine.is_unique": [
                    1595
                ],
                "warnings.warn": [
                    4545,
                    4611,
                    1930,
                    2548,
                    3125
                ],
                "warnings": [
                    4545,
                    4611,
                    1930,
                    2548,
                    3125
                ],
                "FutureWarning": [
                    4616,
                    3129,
                    4548,
                    1933
                ],
                "lib.infer_dtype": [
                    5673,
                    5706,
                    5651,
                    1949
                ],
                "is_datetime_array": [
                    1956
                ],
                "ensure_object": [
                    1956
                ],
                "d.update": [
                    1963
                ],
                "_new_Index": [
                    1964
                ],
                "_na_value": [
                    1969
                ],
                "np.empty": [
                    3328,
                    3601,
                    1981
                ],
                "np.bool_": [
                    1981
                ],
                "values.fill": [
                    1982
                ],
                "self._isnan.nonzero": [
                    1988
                ],
                "self._isnan": [
                    1988,
                    2055,
                    2155,
                    1998,
                    2130
                ],
                "np.int64": [
                    1990
                ],
                "self._isnan.any": [
                    1998
                ],
                "isnull": [
                    2057
                ],
                "self.isna": [
                    2101
                ],
                "notnull": [
                    2103
                ],
                "notna": [
                    2103
                ],
                "self._assert_can_do_op": [
                    2128
                ],
                "self.hasnans": [
                    2129,
                    2154,
                    2317
                ],
                "self.putmask": [
                    2130
                ],
                "downcast": [
                    2131
                ],
                "how": [
                    3458,
                    3727,
                    3738,
                    3742,
                    3746,
                    3749,
                    3753,
                    3626,
                    3755,
                    3757,
                    3759,
                    3637,
                    3512,
                    3388,
                    3393,
                    3396,
                    3404,
                    3413,
                    3542,
                    3415,
                    3546,
                    3425,
                    3427,
                    2151,
                    2152,
                    3431,
                    3436,
                    3564,
                    3440,
                    3445,
                    3450,
                    3452,
                    3454
                ],
                "unique": [
                    2184
                ],
                "super": [
                    3843,
                    2184,
                    2289,
                    4755,
                    2233
                ],
                "drop_duplicates": [
                    2233
                ],
                "keep": [
                    2233,
                    2289
                ],
                "duplicated": [
                    2289
                ],
                "dropna": [
                    2304,
                    2315
                ],
                "self.unique": [
                    2308
                ],
                "values._data": [
                    2311
                ],
                "NotImplementedError": [
                    3632,
                    4492,
                    4885,
                    2319
                ],
                "self.intersection": [
                    2353,
                    3457
                ],
                "self.union": [
                    2356,
                    3461
                ],
                "self.symmetric_difference": [
                    2359
                ],
                "__bool__": [
                    2367
                ],
                "__nonzero__": [
                    2367
                ],
                "get_op_result_name": [
                    2789,
                    2630,
                    2378,
                    3771,
                    2558
                ],
                "this": [
                    2689,
                    2402,
                    2755,
                    2692,
                    2405,
                    2693,
                    2757,
                    3423,
                    3425,
                    2762,
                    2923,
                    2604,
                    2700,
                    2606,
                    2764,
                    2925,
                    2687
                ],
                "self.astype": [
                    2402,
                    2923,
                    2604,
                    4694,
                    4157,
                    3423
                ],
                "Index.union": [
                    2405
                ],
                "sort": [
                    2596,
                    2405,
                    2694,
                    3463,
                    2632,
                    2606,
                    2544,
                    2481,
                    2771,
                    2485,
                    2518,
                    2487,
                    2424,
                    2678,
                    2427,
                    2749
                ],
                "self._validate_sort_keyword": [
                    2481,
                    2596,
                    2749,
                    2678
                ],
                "self._assert_can_do_setop": [
                    2482,
                    2597,
                    2750,
                    2679
                ],
                "self._is_compatible_with_other": [
                    2484
                ],
                "self._union_incompatible_dtypes": [
                    2485
                ],
                "self._union": [
                    2487
                ],
                "self.equals": [
                    2600,
                    3274,
                    2508,
                    3726,
                    2681,
                    4250
                ],
                "self._get_reconciled_name_object": [
                    2601,
                    2509
                ],
                "other._get_reconciled_name_object": [
                    2512
                ],
                "lvals": [
                    2626,
                    2539,
                    2542,
                    2609,
                    2515,
                    2614,
                    2520,
                    2523,
                    2621,
                    2526
                ],
                "rvals": [
                    2626,
                    2538,
                    2610,
                    2516,
                    2614,
                    2520,
                    2621,
                    2527
                ],
                "other._values": [
                    2768,
                    4236,
                    2610,
                    2516
                ],
                "self.is_monotonic": [
                    3434,
                    3442,
                    2612,
                    2518
                ],
                "other.is_monotonic": [
                    3434,
                    3442,
                    2612,
                    2518
                ],
                "self._outer_indexer": [
                    2520,
                    3760,
                    3750
                ],
                "value_set": [
                    2526,
                    2527
                ],
                "result.extend": [
                    2527
                ],
                "_values": [
                    2528,
                    5213
                ],
                "indexer": [
                    3328,
                    2689,
                    2690,
                    2692,
                    2950,
                    2952,
                    3336,
                    3345,
                    3348,
                    3352,
                    2973,
                    2846,
                    2847,
                    2975,
                    2849,
                    2977,
                    2978,
                    3232,
                    3121,
                    2996,
                    2997,
                    2998,
                    4661,
                    4662,
                    3004,
                    2621,
                    2622,
                    3132,
                    3134,
                    3136,
                    2626,
                    2627,
                    3010,
                    2629,
                    2757,
                    3011,
                    2760,
                    3270,
                    4678,
                    3275,
                    4679,
                    2767,
                    3279,
                    3027,
                    3157,
                    3158,
                    3288,
                    3033,
                    3034,
                    5239,
                    3294,
                    3042,
                    3043,
                    2532,
                    2533,
                    3044,
                    2535,
                    2537,
                    2538,
                    3314,
                    3315,
                    3316,
                    5238,
                    2935,
                    3320,
                    2937,
                    5243,
                    5244,
                    3325
                ],
                "self.get_indexer": [
                    2532,
                    4677,
                    3019,
                    3020,
                    3470,
                    3279,
                    2996,
                    5238,
                    2846
                ],
                "nonzero": [
                    2690,
                    2533,
                    3614,
                    2760,
                    2767,
                    2622
                ],
                "algos.unique1d": [
                    2626,
                    2535
                ],
                "self.get_indexer_non_unique": [
                    3288,
                    3314,
                    4678,
                    2535
                ],
                "other_diff": [
                    2538,
                    2539
                ],
                "algos.take_nd": [
                    2538,
                    3652,
                    3702
                ],
                "concat_compat": [
                    2770,
                    2539
                ],
                "algos.safe_sort": [
                    2696,
                    2633,
                    2546,
                    2773
                ],
                "RuntimeWarning": [
                    2550
                ],
                "self._wrap_setop_result": [
                    2618,
                    2555
                ],
                "ensure_index": [
                    3265,
                    2598,
                    4647,
                    3376,
                    3313,
                    2906
                ],
                "other.astype": [
                    3424,
                    2605,
                    4694
                ],
                "this.intersection": [
                    2606
                ],
                "self._inner_indexer": [
                    3747,
                    3758,
                    2614
                ],
                "get_indexer": [
                    2621
                ],
                "indexer.take": [
                    2760,
                    2690,
                    2622
                ],
                "InvalidIndexError": [
                    4577,
                    2930,
                    2623
                ],
                "IncompatibleFrequency": [
                    5749,
                    2623
                ],
                "get_indexer_non_unique": [
                    2626
                ],
                "other.take": [
                    2629
                ],
                "res_name": [
                    2634,
                    2636,
                    2630
                ],
                "taken.values": [
                    2633
                ],
                "taken.name": [
                    2636
                ],
                "result_name": [
                    2752,
                    2753,
                    2787,
                    2789,
                    2790,
                    2700,
                    2777,
                    2685
                ],
                "self._convert_can_do_setop": [
                    2685,
                    2751
                ],
                "self._get_unique_index": [
                    2755,
                    2687
                ],
                "this.get_indexer": [
                    2689,
                    2925,
                    2757
                ],
                "label_diff": [
                    2692,
                    2693
                ],
                "np.setdiff1d": [
                    2761,
                    2692
                ],
                "np.arange": [
                    2692,
                    4357,
                    3336,
                    3337,
                    2762,
                    3663,
                    3348,
                    3320
                ],
                "this.size": [
                    2762,
                    2692
                ],
                "the_diff": [
                    2693,
                    2696,
                    2700,
                    2770,
                    2773,
                    2777
                ],
                "this.values.take": [
                    2693
                ],
                "this.values": [
                    2693
                ],
                "this._shallow_copy": [
                    2700
                ],
                "result_name_update": [
                    2753,
                    2751
                ],
                "other._get_unique_index": [
                    2756
                ],
                "common_indexer": [
                    2760,
                    2762
                ],
                "left_indexer": [
                    3712,
                    3713,
                    3718,
                    3642,
                    3645,
                    3646,
                    2761,
                    3019,
                    2764,
                    3023,
                    3663,
                    3667,
                    3029,
                    3672,
                    3677,
                    3678,
                    3686,
                    3687,
                    3692,
                    3709
                ],
                "left_diff": [
                    2770,
                    2764
                ],
                "this._values.take": [
                    2764
                ],
                "this._values": [
                    2764
                ],
                "right_indexer": [
                    3715,
                    3716,
                    3718,
                    3020,
                    2767,
                    2768,
                    3024,
                    3028,
                    3030,
                    3702,
                    3706,
                    3709
                ],
                "right_diff": [
                    2768,
                    2770
                ],
                "other._values.take": [
                    2768
                ],
                "method": [
                    3268,
                    5604,
                    5605,
                    2919,
                    2989,
                    2926,
                    2831,
                    3280,
                    2993,
                    3283,
                    2934,
                    2935,
                    2936,
                    2905,
                    2970,
                    2846,
                    2975
                ],
                "tolerance": [
                    2956,
                    2957,
                    2959,
                    2832,
                    2843,
                    2844,
                    2846,
                    2976,
                    2977,
                    3280,
                    3032,
                    3033,
                    2907,
                    2908,
                    3043,
                    2919,
                    2926,
                    2935,
                    2937,
                    2939
                ],
                "casted_key": [
                    2837,
                    2839
                ],
                "self._maybe_cast_indexer": [
                    2837
                ],
                "key": [
                    3083,
                    4619,
                    3213,
                    2837,
                    2841,
                    3100,
                    3101,
                    3102,
                    2844,
                    2846,
                    3103,
                    2851,
                    4010,
                    4012,
                    3119,
                    3121,
                    3132,
                    4417,
                    4038,
                    4039,
                    4040,
                    4552,
                    4042,
                    4045,
                    4942,
                    4047,
                    4048,
                    4560,
                    4050,
                    4943,
                    4564,
                    4567,
                    4952,
                    4954,
                    4571,
                    4957,
                    4574,
                    4577,
                    3057,
                    3064,
                    3065,
                    3066
                ],
                "self._engine.get_loc": [
                    4619,
                    2839
                ],
                "self._convert_tolerance": [
                    2844,
                    2908
                ],
                "indexer.ndim": [
                    2847
                ],
                "indexer.size": [
                    2847
                ],
                "loc": [
                    2849,
                    2850,
                    4321,
                    2852,
                    4322,
                    4323,
                    4599,
                    5193,
                    4619,
                    4621,
                    4560,
                    4596,
                    4597,
                    4567,
                    4571,
                    4317,
                    5214
                ],
                "indexer.item": [
                    2849
                ],
                "missing.clean_reindex_fill_method": [
                    2905
                ],
                "missing": [
                    3314,
                    4661,
                    4662,
                    3319,
                    3288,
                    2905,
                    3322,
                    3323
                ],
                "target": [
                    3333,
                    2950,
                    2957,
                    2965,
                    2967,
                    2975,
                    4647,
                    4648,
                    4649,
                    4652,
                    4656,
                    4657,
                    4659,
                    2996,
                    3253,
                    2998,
                    3256,
                    3258,
                    3263,
                    3265,
                    4677,
                    4678,
                    3271,
                    3274,
                    3019,
                    3020,
                    3022,
                    3280,
                    3288,
                    2906,
                    3290,
                    2908,
                    3291,
                    3292,
                    3294,
                    2913,
                    2914,
                    3042,
                    2916,
                    2917,
                    2922,
                    2924,
                    2926,
                    3313,
                    3314,
                    2935,
                    2937,
                    3323
                ],
                "target.is_boolean": [
                    2913
                ],
                "self.is_numeric": [
                    2913
                ],
                "np.repeat": [
                    2914,
                    3407,
                    3399
                ],
                "target.size": [
                    2914,
                    2957
                ],
                "pself": [
                    2916,
                    2917,
                    2918,
                    4648,
                    4649,
                    4650
                ],
                "ptarget": [
                    2916,
                    2917,
                    2919,
                    4648,
                    4649,
                    4650
                ],
                "self._maybe_promote": [
                    4648,
                    2916
                ],
                "pself.get_indexer": [
                    2918
                ],
                "limit": [
                    2944,
                    2919,
                    2987,
                    3019,
                    3020,
                    2926,
                    3280,
                    3283,
                    2935,
                    2937,
                    2973,
                    2975
                ],
                "target.dtype": [
                    4656,
                    2922,
                    4652
                ],
                "target.astype": [
                    2924
                ],
                "self._get_fill_indexer": [
                    2935
                ],
                "self._get_nearest_indexer": [
                    2937
                ],
                "self._engine.get_indexer": [
                    2950
                ],
                "target._get_engine_target": [
                    4659,
                    2965,
                    2950
                ],
                "tolerance.size": [
                    2957
                ],
                "target.is_monotonic_increasing": [
                    2967
                ],
                "engine_method": [
                    2968,
                    2973
                ],
                "self._engine.get_pad_indexer": [
                    2969
                ],
                "self._engine.get_backfill_indexer": [
                    2971
                ],
                "self._get_fill_indexer_searchsorted": [
                    2975
                ],
                "self._filter_indexer_tolerance": [
                    2977,
                    3033
                ],
                "side": [
                    5060,
                    4997,
                    5029,
                    5032,
                    5065,
                    5003,
                    5070,
                    5039,
                    2993,
                    2998,
                    2999,
                    5046
                ],
                "nonexact": [
                    3004,
                    2997,
                    2998
                ],
                "self._searchsorted_monotonic": [
                    5046,
                    2998
                ],
                "target._values": [
                    3022
                ],
                "left_distances": [
                    3028,
                    3023
                ],
                "np.abs": [
                    3024,
                    5333,
                    3023
                ],
                "right_distances": [
                    3024,
                    3028
                ],
                "operator.lt": [
                    5256,
                    3026
                ],
                "operator": [
                    5313,
                    5254,
                    5255,
                    5256,
                    5257,
                    5258,
                    5259,
                    3026,
                    5298,
                    5300,
                    5331,
                    5332,
                    5303,
                    5305,
                    5309,
                    5310
                ],
                "operator.le": [
                    3026,
                    5258
                ],
                "np.where": [
                    4355,
                    3027,
                    3893,
                    3043
                ],
                "distance": [
                    3042,
                    3043
                ],
                "abs": [
                    3042
                ],
                "slice": [
                    4321,
                    4934,
                    5064,
                    4042,
                    3059,
                    3068
                ],
                "self._validate_indexer": [
                    3064,
                    3065,
                    3066,
                    3100,
                    3101,
                    3102
                ],
                "key.start": [
                    3064,
                    3083,
                    3100
                ],
                "key.stop": [
                    3065,
                    3083,
                    3101
                ],
                "key.step": [
                    3066,
                    3083,
                    3102
                ],
                "kind": [
                    5027,
                    3973,
                    5127,
                    3080,
                    5133,
                    5039,
                    4926,
                    3123,
                    4979,
                    3094,
                    4950,
                    3134
                ],
                "start": [
                    5126,
                    3111,
                    3112,
                    5127,
                    3083,
                    4926,
                    3089,
                    5111,
                    5115,
                    5117,
                    3134
                ],
                "stop": [
                    3113,
                    3114,
                    3083,
                    3089,
                    3134
                ],
                "step": [
                    4934,
                    3083,
                    3089,
                    5107,
                    3134,
                    4926
                ],
                "is_integer": [
                    3087,
                    4596,
                    4564,
                    4954,
                    4990
                ],
                "is_index_slice": [
                    3089,
                    3090,
                    3099
                ],
                "is_int": [
                    3089
                ],
                "is_positional": [
                    3122,
                    3090,
                    3115,
                    3108
                ],
                "self.is_integer": [
                    3099,
                    3091
                ],
                "self.is_categorical": [
                    3091,
                    4068
                ],
                "self.get_loc": [
                    3112,
                    3114,
                    4560,
                    5043,
                    4317
                ],
                "com.is_null_slice": [
                    3119
                ],
                "self.slice_indexer": [
                    3134
                ],
                "keyarr": [
                    3173,
                    3174,
                    3152,
                    3153,
                    3155,
                    3157,
                    3158,
                    3189
                ],
                "self._convert_index_indexer": [
                    3153
                ],
                "self._convert_arr_indexer": [
                    3155
                ],
                "self._convert_list_indexer": [
                    3157
                ],
                "form": [
                    3212,
                    4957
                ],
                "preserve_names": [
                    3290,
                    3253
                ],
                "ensure_has_len": [
                    3256
                ],
                "ABCRangeIndex": [
                    3259
                ],
                "_": [
                    4678,
                    3605,
                    3270
                ],
                "self._join_level": [
                    3392,
                    3545,
                    3270
                ],
                "target.nlevels": [
                    3290
                ],
                "target.name": [
                    3290,
                    3292
                ],
                "target.copy": [
                    3291
                ],
                "check": [
                    3345,
                    3315,
                    3316,
                    3349,
                    3324,
                    3325,
                    3326
                ],
                "new_labels": [
                    3328,
                    3329,
                    3330,
                    3316,
                    3351
                ],
                "self.take": [
                    4423,
                    3348,
                    3316,
                    4730,
                    3325
                ],
                "new_indexer": [
                    3336,
                    3337,
                    3338,
                    3348,
                    3317,
                    3349,
                    3352
                ],
                "length": [
                    3320,
                    3324,
                    3326
                ],
                "missing_labels": [
                    3330,
                    3323
                ],
                "target.take": [
                    3323
                ],
                "missing_indexer": [
                    3330,
                    3338,
                    3324
                ],
                "ensure_int64": [
                    3616,
                    3649,
                    3604,
                    3324,
                    3326,
                    3615
                ],
                "cur_labels": [
                    3329,
                    3325,
                    3337
                ],
                "cur_indexer": [
                    3329,
                    3337,
                    3326
                ],
                "target.is_unique": [
                    3333
                ],
                "self_is_mi": [
                    3492,
                    3495,
                    3377,
                    3538,
                    3382,
                    3391
                ],
                "other_is_mi": [
                    3493,
                    3495,
                    3378,
                    3382,
                    3391
                ],
                "other.names": [
                    3544,
                    3385,
                    3485
                ],
                "self._join_multi": [
                    3388
                ],
                "return_indexers": [
                    3393,
                    3425,
                    3398,
                    3431,
                    3466,
                    3436,
                    3406,
                    3440,
                    3728,
                    3763,
                    3445,
                    3415,
                    3576,
                    3417,
                    3546,
                    3388,
                    3711
                ],
                "join_index": [
                    3457,
                    3461,
                    3718,
                    3464,
                    3720,
                    3467,
                    3470,
                    3471,
                    3474,
                    3475,
                    3477,
                    3739,
                    3743,
                    3747,
                    3748,
                    3750,
                    3751,
                    3754,
                    3756,
                    3758,
                    3760,
                    3761,
                    3766,
                    3768,
                    3643,
                    3646,
                    3397,
                    3399,
                    3400,
                    3402,
                    3405,
                    3407,
                    3408,
                    3410,
                    3579,
                    3694,
                    3570,
                    3572,
                    3574,
                    3703,
                    3577,
                    3706,
                    3451,
                    3453
                ],
                "rindexer": [
                    3399,
                    3400,
                    3472,
                    3474,
                    3475
                ],
                "other._shallow_copy": [
                    3405
                ],
                "lindexer": [
                    3468,
                    3470,
                    3407,
                    3408,
                    3475
                ],
                "self._join_precedence": [
                    3412
                ],
                "other._join_precedence": [
                    3412
                ],
                "get": [
                    3626,
                    3413,
                    3542
                ],
                "other.join": [
                    3414
                ],
                "y": [
                    3418,
                    3419,
                    4787,
                    4791
                ],
                "z": [
                    3418,
                    3419
                ],
                "this.join": [
                    3425
                ],
                "_validate_join_method": [
                    3427
                ],
                "other.is_unique": [
                    3736,
                    3433,
                    3429
                ],
                "self._join_non_unique": [
                    3430,
                    3439
                ],
                "self._join_monotonic": [
                    3435,
                    3444
                ],
                "join_index.sort_values": [
                    3464
                ],
                "other.get_indexer": [
                    3474
                ],
                "self_names": [
                    3498,
                    3484,
                    3486
                ],
                "com.not_none": [
                    3484,
                    3485
                ],
                "other_names": [
                    3499,
                    3485,
                    3486
                ],
                "overlap": [
                    3489,
                    3498,
                    3499,
                    3533,
                    3486
                ],
                "ldrop_names": [
                    3506,
                    3498,
                    3518,
                    3502
                ],
                "rdrop_names": [
                    3499,
                    3518,
                    3507,
                    3502
                ],
                "self_jnlevels": [
                    3511,
                    3506,
                    3503
                ],
                "other_jnlevels": [
                    3504,
                    3507,
                    3512
                ],
                "other.reorder_levels": [
                    3504
                ],
                "self.droplevel": [
                    3506
                ],
                "other.droplevel": [
                    3507
                ],
                "join_idx": [
                    3521,
                    3511
                ],
                "lidx": [
                    3744,
                    3521,
                    3747,
                    3750,
                    3754,
                    3531,
                    3756,
                    3758,
                    3760,
                    3764,
                    3766,
                    3511,
                    3740
                ],
                "ridx": [
                    3745,
                    3521,
                    3747,
                    3750,
                    3754,
                    3531,
                    3756,
                    3758,
                    3760,
                    3765,
                    3766,
                    3511,
                    3741
                ],
                "self_jnlevels.join": [
                    3511
                ],
                "dropped_names": [
                    3521,
                    3518
                ],
                "levels": [
                    3520,
                    3526
                ],
                "codes": [
                    3520,
                    3526
                ],
                "_restore_dropped_levels_multijoin": [
                    3520
                ],
                "multi_join_idx": [
                    3529,
                    3531,
                    3525
                ],
                "multi_join_idx.remove_unused_levels": [
                    3529
                ],
                "jl": [
                    3544,
                    3533
                ],
                "flip_order": [
                    3623,
                    3624,
                    3537,
                    3540,
                    3708,
                    3549
                ],
                "other.names.index": [
                    3544
                ],
                "lvalues": [
                    3560,
                    3570,
                    3564
                ],
                "rvalues": [
                    3572,
                    3561,
                    3564
                ],
                "other._get_engine_target": [
                    3561,
                    3734
                ],
                "left_idx": [
                    3563,
                    3567,
                    3570,
                    3571,
                    3577
                ],
                "right_idx": [
                    3568,
                    3577,
                    3563,
                    3572
                ],
                "_get_join_indexers": [
                    3563
                ],
                "lvalues.take": [
                    3570
                ],
                "np.putmask": [
                    4147,
                    3572
                ],
                "rvalues.take": [
                    3572
                ],
                "self._wrap_joined_index": [
                    3761,
                    3748,
                    3574,
                    3751
                ],
                "size": [
                    3600
                ],
                "labels": [
                    5242,
                    3600,
                    3603,
                    3604,
                    5237,
                    5238,
                    3610,
                    3611,
                    3615
                ],
                "lab": [
                    3616,
                    3684,
                    3687,
                    3666,
                    3604,
                    3605,
                    3611,
                    3612,
                    3678,
                    3615
                ],
                "sorter": [
                    3605,
                    3606
                ],
                "libalgos.groupsort_indexer": [
                    3672,
                    3605
                ],
                "libalgos": [
                    3672,
                    3605
                ],
                "lab.max": [
                    3605
                ],
                "tic": [
                    3610,
                    3612,
                    3614
                ],
                "starts": [
                    3616,
                    3614
                ],
                "np.hstack": [
                    3614
                ],
                "lib.get_level_sorter": [
                    3616
                ],
                "left._get_level_number": [
                    3628
                ],
                "old_level": [
                    3650,
                    3636,
                    3629
                ],
                "left.levels": [
                    3659,
                    3629
                ],
                "right.is_unique": [
                    3631
                ],
                "new_level": [
                    3636,
                    3660
                ],
                "left_lev_indexer": [
                    3640,
                    3649,
                    3650,
                    3636
                ],
                "right_lev_indexer": [
                    3636,
                    3701,
                    3703
                ],
                "old_level.join": [
                    3636
                ],
                "keep_order": [
                    3641,
                    3662
                ],
                "_get_leaf_sorter": [
                    3645,
                    3686
                ],
                "left.codes": [
                    3656,
                    3653,
                    3645
                ],
                "rev_indexer": [
                    3650,
                    3653
                ],
                "lib.get_reverse_indexer": [
                    3650
                ],
                "new_lev_codes": [
                    3681,
                    3652,
                    3657,
                    3664,
                    3671,
                    3673
                ],
                "np.intp": [
                    4653,
                    3663
                ],
                "mask.all": [
                    3665,
                    3682
                ],
                "ngroups": [
                    3673,
                    3671
                ],
                "new_lev_codes.max": [
                    3671
                ],
                "counts": [
                    3672,
                    3677
                ],
                "mask_all": [
                    3691,
                    3682,
                    3683
                ],
                "mask.nonzero": [
                    3692
                ],
                "left.names": [
                    3697
                ],
                "join_index.codes": [
                    3706,
                    3703
                ],
                "ret_index": [
                    3729,
                    3731,
                    3727
                ],
                "sv": [
                    3744,
                    3747,
                    3750,
                    3754,
                    3756,
                    3758,
                    3760,
                    3733,
                    3741
                ],
                "ov": [
                    3744,
                    3747,
                    3750,
                    3754,
                    3756,
                    3758,
                    3760,
                    3734,
                    3741
                ],
                "self._left_indexer_unique": [
                    3744,
                    3741
                ],
                "self._left_indexer": [
                    3754,
                    3756
                ],
                "joined": [
                    3772
                ],
                "array": [
                    3802,
                    3803,
                    3806,
                    3807
                ],
                "PandasArray": [
                    3806
                ],
                "doc": [
                    3800,
                    3841
                ],
                "IndexOpsMixin.array": [
                    3800
                ],
                "memory_usage": [
                    3843
                ],
                "self._engine.sizeof": [
                    3846
                ],
                "IndexOpsMixin.memory_usage": [
                    3841
                ],
                "is_bool": [
                    3887
                ],
                "values.astype": [
                    3890
                ],
                "cond": [
                    3893
                ],
                "self._is_numeric_dtype": [
                    3929,
                    3895
                ],
                "np.any": [
                    5450,
                    3895
                ],
                "cls.__name__": [
                    5625,
                    3908
                ],
                "item": [
                    3929,
                    5214,
                    5213,
                    3934
                ],
                "Any": [
                    4159,
                    3975
                ],
                "hash": [
                    4010
                ],
                "OverflowError": [
                    5792,
                    4013,
                    5783
                ],
                "getitem": [
                    4040,
                    4050,
                    4035,
                    4045
                ],
                "self._data.__getitem__": [
                    4035
                ],
                "promote": [
                    4036,
                    4045,
                    4055
                ],
                "com.cast_scalar_indexer": [
                    4942,
                    4039
                ],
                "com.is_bool_indexer": [
                    4047
                ],
                "deprecate_ndim_indexing": [
                    4053
                ],
                "to_concat": [
                    4128,
                    4098,
                    4130,
                    4102,
                    4105,
                    4106,
                    4084,
                    4087,
                    4120,
                    4089,
                    4091,
                    4124,
                    4121,
                    4095
                ],
                "to_concat.append": [
                    4089
                ],
                "obj": [
                    5618,
                    5621,
                    4091,
                    4092,
                    4095
                ],
                "obj.name": [
                    5621,
                    4095
                ],
                "self._concat": [
                    4098
                ],
                "typs": [
                    4104,
                    4102
                ],
                "_concat.get_dtype_kinds": [
                    4102
                ],
                "_concat": [
                    4102
                ],
                "self._concat_same_dtype": [
                    4105
                ],
                "Index._concat_same_dtype": [
                    4106
                ],
                "klasses": [
                    4113,
                    4121
                ],
                "ABCDatetimeIndex": [
                    4114,
                    4687
                ],
                "ABCIntervalIndex": [
                    4118
                ],
                "x.astype": [
                    4121
                ],
                "attribs": [
                    4125,
                    4126
                ],
                "x._values": [
                    4128
                ],
                "res_values": [
                    4130,
                    4131
                ],
                "np.concatenate": [
                    4130,
                    5214
                ],
                "self._convert_for_op": [
                    4147
                ],
                "putmask": [
                    4157
                ],
                "self.is_": [
                    4218
                ],
                "other.equals": [
                    4226,
                    4230,
                    4234
                ],
                "array_equivalent": [
                    4236
                ],
                "c": [
                    4253,
                    4254
                ],
                "self._comparables": [
                    4254
                ],
                "label": [
                    4993,
                    4997,
                    5003,
                    5035,
                    5039,
                    5043,
                    5046,
                    4985,
                    4986,
                    4317,
                    4990,
                    4991
                ],
                "loc.indices": [
                    4322
                ],
                "locs": [
                    4360,
                    4354,
                    4355,
                    4357
                ],
                "searchsorted": [
                    4354,
                    5002
                ],
                "where.values": [
                    4360,
                    4354
                ],
                "where": [
                    4360,
                    4354
                ],
                "first": [
                    4360,
                    4359
                ],
                "mask.argmax": [
                    4359
                ],
                "Optional": [
                    4365
                ],
                "Callable": [
                    4365
                ],
                "ensure_key_mapped": [
                    4417
                ],
                "_as": [
                    4426,
                    4419,
                    4421,
                    4423
                ],
                "idx.argsort": [
                    4419
                ],
                "sorted_index": [
                    4426,
                    4428,
                    4423
                ],
                "return_indexer": [
                    4425
                ],
                "self.asi8": [
                    4529
                ],
                "result.argsort": [
                    4534
                ],
                "args": [
                    4534
                ],
                "self._check_indexing_error": [
                    4552
                ],
                "self._should_fallback_to_positional": [
                    4562
                ],
                "self._get_values_for_loc": [
                    4571
                ],
                "series": [
                    4571,
                    4597,
                    4599
                ],
                "self.holds_integer": [
                    4583
                ],
                "self.is_boolean": [
                    4583
                ],
                "series._values": [
                    4597
                ],
                "series.iloc": [
                    4599
                ],
                "validate_numeric_casting": [
                    4620
                ],
                "arr.dtype": [
                    4620
                ],
                "arr": [
                    4620,
                    4621,
                    5214,
                    5212
                ],
                "pself.get_indexer_non_unique": [
                    4650
                ],
                "self._is_comparable_dtype": [
                    4652
                ],
                "no_matches": [
                    4653,
                    4654
                ],
                "np.ones": [
                    4653
                ],
                "self.shape": [
                    4653
                ],
                "tgt_values": [
                    4657,
                    4659,
                    4661
                ],
                "self._engine.get_indexer_non_unique": [
                    4661
                ],
                "other._maybe_promote": [
                    4698
                ],
                "DtypeObj": [
                    4702
                ],
                "values._values": [
                    4725
                ],
                "Categorical": [
                    4726
                ],
                "values._reverse_indexer": [
                    4727
                ],
                "result.items": [
                    4730
                ],
                "PrettyDict": [
                    4708,
                    4732
                ],
                "Hashable": [
                    4708
                ],
                "new_values": [
                    4770,
                    4774,
                    4755,
                    4760,
                    4764,
                    4767
                ],
                "_map_values": [
                    4755
                ],
                "na_action": [
                    4755
                ],
                "attributes": [
                    4769,
                    4772,
                    4774,
                    4757,
                    4763,
                    4764
                ],
                "new_values.size": [
                    4760,
                    4770
                ],
                "attributes.get": [
                    4763,
                    4764
                ],
                "items": [
                    4786,
                    4791,
                    4792,
                    4794,
                    4795
                ],
                "func": [
                    4794,
                    4787,
                    4791
                ],
                "enumerate": [
                    4787
                ],
                "from_tuples": [
                    4792
                ],
                "algos.isin": [
                    4880
                ],
                "start_slice": [
                    5152,
                    4929,
                    5125,
                    4934,
                    5127,
                    5128,
                    5129,
                    5159,
                    5160,
                    5162,
                    4926
                ],
                "end_slice": [
                    5152,
                    4931,
                    5157,
                    4934,
                    5158,
                    5162,
                    5131,
                    5133,
                    5134,
                    5135,
                    4926
                ],
                "self.slice_locs": [
                    4926
                ],
                "end": [
                    5132,
                    5133,
                    4926,
                    5111,
                    5115,
                    5118
                ],
                "AssertionError": [
                    4930,
                    4932
                ],
                "self.is_floating": [
                    4941
                ],
                "self._invalid_indexer": [
                    4986,
                    4957,
                    4991
                ],
                "is_float": [
                    4985
                ],
                "self.searchsorted": [
                    4997
                ],
                "pos": [
                    5002,
                    5005
                ],
                "original_label": [
                    5035,
                    5061
                ],
                "self._maybe_cast_slice_bound": [
                    5039
                ],
                "slc": [
                    5057,
                    5058,
                    5064,
                    5066,
                    5068,
                    5071,
                    5073,
                    5043,
                    5051,
                    5054,
                    5055
                ],
                "lib.maybe_booleans_to_slice": [
                    5055
                ],
                "slc.view": [
                    5055
                ],
                "lib.maybe_indices_to_slice": [
                    5057
                ],
                "slc.astype": [
                    5057
                ],
                "slc.start": [
                    5066
                ],
                "slc.stop": [
                    5068
                ],
                "inc": [
                    5137,
                    5107,
                    5109
                ],
                "datetime": [
                    5115
                ],
                "ts_start": [
                    5122,
                    5117
                ],
                "Timestamp": [
                    5117,
                    5118
                ],
                "ts_end": [
                    5122,
                    5118
                ],
                "tz_compare": [
                    5122
                ],
                "ts_start.tzinfo": [
                    5122
                ],
                "ts_end.tzinfo": [
                    5122
                ],
                "self.get_slice_bound": [
                    5133,
                    5127
                ],
                "np.delete": [
                    5193
                ],
                "self._coerce_scalar_to_index": [
                    5213
                ],
                "arr_dtype": [
                    5236,
                    5237
                ],
                "com.index_labels_to_array": [
                    5237
                ],
                "errors": [
                    5241
                ],
                "self.delete": [
                    5244
                ],
                "cls.__eq__": [
                    5254
                ],
                "_make_comparison_op": [
                    5254,
                    5255,
                    5256,
                    5257,
                    5258,
                    5259
                ],
                "operator.eq": [
                    5254
                ],
                "cls.__ne__": [
                    5255
                ],
                "operator.ne": [
                    5255
                ],
                "cls.__lt__": [
                    5256
                ],
                "cls.__gt__": [
                    5257
                ],
                "operator.gt": [
                    5257
                ],
                "cls.__le__": [
                    5258
                ],
                "cls.__ge__": [
                    5259
                ],
                "operator.ge": [
                    5259
                ],
                "cls.__add__": [
                    5298,
                    5266
                ],
                "make_invalid_op": [
                    5266,
                    5267,
                    5268,
                    5269,
                    5270,
                    5271,
                    5278,
                    5279,
                    5280,
                    5281,
                    5282,
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5288,
                    5289,
                    5290,
                    5291,
                    5458,
                    5459
                ],
                "cls.__radd__": [
                    5267,
                    5299
                ],
                "cls.__iadd__": [
                    5268
                ],
                "cls.__sub__": [
                    5300,
                    5269
                ],
                "cls.__rsub__": [
                    5301,
                    5270
                ],
                "cls.__isub__": [
                    5271
                ],
                "cls.__pow__": [
                    5278,
                    5303
                ],
                "cls.__rpow__": [
                    5302,
                    5279
                ],
                "cls.__mul__": [
                    5280,
                    5313
                ],
                "cls.__rmul__": [
                    5281,
                    5314
                ],
                "cls.__floordiv__": [
                    5282,
                    5310
                ],
                "cls.__rfloordiv__": [
                    5283,
                    5311
                ],
                "cls.__truediv__": [
                    5305,
                    5284
                ],
                "cls.__rtruediv__": [
                    5306,
                    5285
                ],
                "cls.__mod__": [
                    5309,
                    5286
                ],
                "cls.__divmod__": [
                    5312,
                    5287
                ],
                "cls.__neg__": [
                    5288,
                    5331
                ],
                "cls.__pos__": [
                    5289,
                    5332
                ],
                "cls.__abs__": [
                    5290,
                    5333
                ],
                "cls.__inv__": [
                    5291,
                    5334
                ],
                "_make_arithmetic_op": [
                    5312,
                    5313,
                    5314,
                    5298,
                    5299,
                    5300,
                    5301,
                    5302,
                    5303,
                    5305,
                    5306,
                    5309,
                    5310,
                    5311
                ],
                "operator.add": [
                    5298
                ],
                "ops.radd": [
                    5299
                ],
                "operator.sub": [
                    5300
                ],
                "ops.rsub": [
                    5301
                ],
                "ops.rpow": [
                    5302
                ],
                "operator.pow": [
                    5303
                ],
                "operator.truediv": [
                    5305
                ],
                "ops.rtruediv": [
                    5306
                ],
                "operator.mod": [
                    5309
                ],
                "operator.floordiv": [
                    5310
                ],
                "ops.rfloordiv": [
                    5311
                ],
                "divmod": [
                    5312
                ],
                "operator.mul": [
                    5313
                ],
                "ops.rmul": [
                    5314
                ],
                "_evaluate_numeric_unary.__name__": [
                    5328
                ],
                "_evaluate_numeric_unary": [
                    5328,
                    5329
                ],
                "opstr": [
                    5328
                ],
                "_make_evaluate_unary": [
                    5331,
                    5332,
                    5333,
                    5334
                ],
                "operator.neg": [
                    5331
                ],
                "operator.pos": [
                    5332
                ],
                "cls._add_numeric_methods_unary": [
                    5338
                ],
                "cls._add_numeric_methods_binary": [
                    5339
                ],
                "_doc": [
                    5346,
                    5431
                ],
                "dedent": [
                    5361,
                    5403
                ],
                "f": [
                    5433
                ],
                "result.ndim": [
                    5436
                ],
                "result.dtype.type": [
                    5439
                ],
                "result.dtype": [
                    5439
                ],
                "result.item": [
                    5439
                ],
                "Substitution": [
                    5429
                ],
                "desc": [
                    5429
                ],
                "logical_func.__name__": [
                    5443
                ],
                "logical_func": [
                    5443,
                    5444
                ],
                "cls.all": [
                    5458,
                    5446
                ],
                "_make_logical_function": [
                    5449,
                    5446
                ],
                "np.all": [
                    5447
                ],
                "cls.any": [
                    5449,
                    5459
                ],
                "self._values.shape": [
                    5469
                ],
                "Index._add_numeric_methods_disabled": [
                    5472
                ],
                "Index._add_logical_methods": [
                    5473
                ],
                "Index._add_comparison_methods": [
                    5474
                ],
                "sequences": [
                    5512,
                    5514,
                    5509
                ],
                "MultiIndex.from_arrays": [
                    5569,
                    5514
                ],
                "index_like": [
                    5571,
                    5576,
                    5578,
                    5548,
                    5550,
                    5551,
                    5552,
                    5553,
                    5555,
                    5556,
                    5560,
                    5561,
                    5562,
                    5564
                ],
                "index_like.copy": [
                    5550
                ],
                "index_like.name": [
                    5553
                ],
                "converted": [
                    5569,
                    5571,
                    5564,
                    5566
                ],
                "all_arrays": [
                    5564,
                    5566
                ],
                "lib.clean_index_list": [
                    5564
                ],
                "copy_func": [
                    5576
                ],
                "seq": [
                    5586,
                    5588,
                    5590
                ],
                "trimmed": [
                    5600,
                    5597,
                    5598,
                    5599
                ],
                "strings": [
                    5597,
                    5598
                ],
                "n": [
                    5611
                ],
                "is_integer_dtype": [
                    5650
                ],
                "inferred": [
                    5728,
                    5731,
                    5668,
                    5732,
                    5673,
                    5674,
                    5706,
                    5708,
                    5742,
                    5745,
                    5651,
                    5652,
                    5717,
                    5654,
                    5721,
                    5658
                ],
                "maybe_cast_to_integer_array": [
                    5659,
                    5653
                ],
                "_try_convert_to_int_array": [
                    5664,
                    5710
                ],
                "np.float64": [
                    5666,
                    5719
                ],
                "IntervalArray._from_sequence": [
                    5723
                ],
                "IntervalArray": [
                    5723
                ],
                "inferred.startswith": [
                    5732,
                    5742
                ],
                "DatetimeArray._from_sequence": [
                    5734
                ],
                "DatetimeArray": [
                    5734
                ],
                "OutOfBoundsDatetime": [
                    5736
                ],
                "TimedeltaArray._from_sequence": [
                    5743
                ],
                "TimedeltaArray": [
                    5743
                ],
                "PeriodArray._from_sequence": [
                    5747
                ],
                "PeriodArray": [
                    5747
                ],
                "subarr.dtype": [
                    5752
                ],
                "klass": [
                    5832,
                    5829
                ],
                "index.astype": [
                    5830
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    91
                ],
                "__all__": [
                    95
                ],
                "_unsortable_types": [
                    97
                ],
                "_index_doc_kwargs": [
                    99,
                    4645,
                    683,
                    2901,
                    766
                ],
                "_index_shared_docs": [
                    4645,
                    2854,
                    107,
                    683,
                    655,
                    4623,
                    5361,
                    2901,
                    5430,
                    727,
                    5403,
                    766
                ],
                "str_t": [
                    864,
                    5217,
                    2981,
                    3207,
                    5322,
                    108,
                    3068,
                    847,
                    976,
                    4945,
                    2962,
                    4882,
                    5009,
                    5428,
                    1945,
                    828,
                    4959
                ],
                "is_object_dtype": [
                    4224,
                    874,
                    4696,
                    115,
                    916,
                    4693,
                    118,
                    919,
                    344,
                    4153,
                    123,
                    1823
                ],
                "self.dtype": [
                    4224,
                    3724,
                    1823,
                    4772,
                    2603,
                    3884,
                    4148,
                    4693,
                    3927,
                    4696,
                    2777,
                    3422,
                    3558,
                    2922,
                    115,
                    5236,
                    2421,
                    118,
                    123,
                    636
                ],
                "self": [
                    4096,
                    4098,
                    2055,
                    4105,
                    4106,
                    4124,
                    4125,
                    4145,
                    4147,
                    4148,
                    2101,
                    4150,
                    4151,
                    4153,
                    4157,
                    2128,
                    2129,
                    2130,
                    2134,
                    2135,
                    2154,
                    2155,
                    2156,
                    115,
                    116,
                    118,
                    121,
                    4218,
                    123,
                    126,
                    4224,
                    130,
                    4226,
                    134,
                    2183,
                    4230,
                    2185,
                    4234,
                    4236,
                    147,
                    4250,
                    4253,
                    4254,
                    4257,
                    4317,
                    4319,
                    4322,
                    4323,
                    2304,
                    2305,
                    4354,
                    2307,
                    2308,
                    2309,
                    4357,
                    4360,
                    2313,
                    2317,
                    2322,
                    2332,
                    2337,
                    2341,
                    2344,
                    2350,
                    2353,
                    2356,
                    2359,
                    2363,
                    4417,
                    4423,
                    2378,
                    2379,
                    2380,
                    2381,
                    2402,
                    2421,
                    4492,
                    2481,
                    2482,
                    4529,
                    2484,
                    2485,
                    4532,
                    2487,
                    4552,
                    2508,
                    2509,
                    2511,
                    2512,
                    4560,
                    4562,
                    2515,
                    2518,
                    2520,
                    4571,
                    477,
                    2531,
                    2532,
                    486,
                    2535,
                    4583,
                    501,
                    502,
                    504,
                    506,
                    2555,
                    2558,
                    2559,
                    4619,
                    527,
                    533,
                    534,
                    537,
                    545,
                    546,
                    2596,
                    2597,
                    2600,
                    2601,
                    4648,
                    2603,
                    556,
                    2604,
                    4649,
                    4652,
                    4653,
                    2609,
                    562,
                    2612,
                    4661,
                    2614,
                    2618,
                    572,
                    580,
                    4676,
                    2630,
                    4677,
                    4678,
                    2634,
                    4687,
                    4688,
                    4689,
                    595,
                    4691,
                    4692,
                    4693,
                    4694,
                    4696,
                    4698,
                    603,
                    4700,
                    605,
                    607,
                    2678,
                    2679,
                    2681,
                    4730,
                    2683,
                    636,
                    637,
                    2685,
                    2687,
                    642,
                    645,
                    648,
                    651,
                    653,
                    4757,
                    4761,
                    4762,
                    4772,
                    688,
                    689,
                    690,
                    4784,
                    4788,
                    694,
                    4791,
                    4792,
                    698,
                    4794,
                    4795,
                    2749,
                    702,
                    703,
                    2750,
                    2751,
                    2755,
                    2777,
                    2786,
                    2787,
                    2789,
                    770,
                    4879,
                    4880,
                    2837,
                    2839,
                    2844,
                    2846,
                    802,
                    804,
                    806,
                    814,
                    823,
                    4926,
                    832,
                    833,
                    834,
                    835,
                    4941,
                    2908,
                    4957,
                    2913,
                    2916,
                    2917,
                    871,
                    873,
                    874,
                    2922,
                    2923,
                    878,
                    2929,
                    885,
                    2935,
                    889,
                    2937,
                    4986,
                    4991,
                    898,
                    899,
                    4996,
                    4997,
                    2950,
                    4998,
                    904,
                    906,
                    5002,
                    909,
                    5005,
                    2967,
                    2969,
                    2971,
                    2975,
                    2977,
                    5039,
                    5043,
                    2996,
                    2998,
                    5046,
                    958,
                    5057,
                    3010,
                    967,
                    968,
                    969,
                    971,
                    3019,
                    3020,
                    3023,
                    3024,
                    3026,
                    3033,
                    989,
                    990,
                    993,
                    3042,
                    1001,
                    1002,
                    3064,
                    3065,
                    3066,
                    1025,
                    5127,
                    5133,
                    5135,
                    3091,
                    1049,
                    1051,
                    3099,
                    1053,
                    3100,
                    3101,
                    3102,
                    5158,
                    3112,
                    5160,
                    3114,
                    3134,
                    5193,
                    3153,
                    3155,
                    1109,
                    1110,
                    3157,
                    1113,
                    5212,
                    5213,
                    5215,
                    1124,
                    1128,
                    1134,
                    1135,
                    5236,
                    5238,
                    1147,
                    5244,
                    1158,
                    3212,
                    3232,
                    1185,
                    1186,
                    3259,
                    3262,
                    3263,
                    3270,
                    3274,
                    5325,
                    3278,
                    3279,
                    5326,
                    3288,
                    3290,
                    3292,
                    1246,
                    1252,
                    1261,
                    1263,
                    3314,
                    3316,
                    3325,
                    3348,
                    3351,
                    1317,
                    3377,
                    1333,
                    3385,
                    5433,
                    3388,
                    3392,
                    3397,
                    1353,
                    1355,
                    3404,
                    1359,
                    3412,
                    3415,
                    5469,
                    3422,
                    3423,
                    1379,
                    3429,
                    3430,
                    3433,
                    3434,
                    3435,
                    3439,
                    3442,
                    3444,
                    3451,
                    3457,
                    3461,
                    1417,
                    1418,
                    3467,
                    3470,
                    3484,
                    1444,
                    3492,
                    1447,
                    1448,
                    1450,
                    3503,
                    3504,
                    1455,
                    1456,
                    1457,
                    3506,
                    3521,
                    3539,
                    3545,
                    1506,
                    1508,
                    3558,
                    3560,
                    1520,
                    3574,
                    1537,
                    1554,
                    3618,
                    1571,
                    3621,
                    3623,
                    1588,
                    1595,
                    1627,
                    1662,
                    3724,
                    3726,
                    3727,
                    3733,
                    3736,
                    3739,
                    3741,
                    3744,
                    1697,
                    3747,
                    3748,
                    3750,
                    3751,
                    3754,
                    3756,
                    3758,
                    3760,
                    3761,
                    3771,
                    1740,
                    3797,
                    3802,
                    1783,
                    3833,
                    3839,
                    3846,
                    1823,
                    3882,
                    3884,
                    3885,
                    3895,
                    3900,
                    1866,
                    3927,
                    3929,
                    3934,
                    3940,
                    1899,
                    3967,
                    3973,
                    1936,
                    1942,
                    1949,
                    1956,
                    1962,
                    1963,
                    1964,
                    4012,
                    4017,
                    1977,
                    1978,
                    1981,
                    1987,
                    1988,
                    4035,
                    4036,
                    1997,
                    1998,
                    4068,
                    4069,
                    4084
                ],
                "other": [
                    527,
                    3618,
                    2597,
                    2598,
                    3621,
                    2600,
                    2601,
                    2603,
                    2605,
                    2606,
                    2610,
                    2612,
                    2618,
                    2629,
                    2630,
                    4687,
                    4688,
                    4689,
                    4087,
                    4691,
                    4694,
                    4696,
                    4698,
                    4700,
                    115,
                    116,
                    117,
                    118,
                    2679,
                    2681,
                    121,
                    4218,
                    2685,
                    126,
                    4221,
                    4224,
                    2689,
                    130,
                    4226,
                    4228,
                    134,
                    4230,
                    4232,
                    4234,
                    3724,
                    4236,
                    142,
                    3726,
                    3727,
                    147,
                    3734,
                    3736,
                    4250,
                    4253,
                    3743,
                    4257,
                    3748,
                    3751,
                    3761,
                    3771,
                    2750,
                    2751,
                    2756,
                    2757,
                    2768,
                    2780,
                    2785,
                    2786,
                    2789,
                    2790,
                    2328,
                    2332,
                    2337,
                    2341,
                    2344,
                    3881,
                    3882,
                    2350,
                    3887,
                    3376,
                    2353,
                    3378,
                    2356,
                    3893,
                    2359,
                    3385,
                    3388,
                    3393,
                    3396,
                    2378,
                    3405,
                    3412,
                    3414,
                    3422,
                    3424,
                    3425,
                    2404,
                    2405,
                    3429,
                    3431,
                    3433,
                    3434,
                    3436,
                    3440,
                    3442,
                    2421,
                    3445,
                    3453,
                    3457,
                    3461,
                    3471,
                    3474,
                    3485,
                    3493,
                    3504,
                    2482,
                    3507,
                    2484,
                    2485,
                    2487,
                    3521,
                    2508,
                    2509,
                    2512,
                    3539,
                    2516,
                    2518,
                    3544,
                    3546,
                    2532,
                    3558,
                    2535,
                    3561,
                    3574,
                    4086,
                    4089,
                    2555,
                    2558
                ],
                "ABCCategorical": [
                    115
                ],
                "left": [
                    3621,
                    3625,
                    3628,
                    3629,
                    3641,
                    3643,
                    3645,
                    3646,
                    3653,
                    3656,
                    3659,
                    3663,
                    3697,
                    244,
                    116,
                    117,
                    247,
                    250,
                    253
                ],
                "self._values": [
                    130,
                    770,
                    2313,
                    4236,
                    1949,
                    1956,
                    2609,
                    690,
                    702,
                    3023,
                    3024,
                    2515,
                    1110,
                    5469,
                    3042,
                    2155,
                    116,
                    504,
                    121,
                    126,
                    3839
                ],
                "other.dtype": [
                    4224,
                    3558,
                    4232,
                    2603,
                    3724,
                    116,
                    2421,
                    4696,
                    3422
                ],
                "op": [
                    130,
                    134,
                    136,
                    5326,
                    112,
                    3026,
                    147,
                    3028,
                    117,
                    152,
                    121,
                    126
                ],
                "ExtensionArray": [
                    256,
                    3810,
                    4117,
                    118,
                    3801,
                    3038
                ],
                "np.errstate": [
                    120,
                    129,
                    125
                ],
                "np": [
                    3601,
                    3614,
                    4130,
                    5666,
                    4653,
                    558,
                    5679,
                    4657,
                    562,
                    4147,
                    569,
                    5193,
                    3663,
                    5719,
                    5212,
                    5214,
                    4708,
                    120,
                    5756,
                    125,
                    5757,
                    129,
                    130,
                    2692,
                    645,
                    160,
                    706,
                    3778,
                    2761,
                    2762,
                    3797,
                    5333,
                    3803,
                    3810,
                    3320,
                    3835,
                    256,
                    3328,
                    4355,
                    4357,
                    3336,
                    3337,
                    3348,
                    2844,
                    2344,
                    3893,
                    3895,
                    5435,
                    3399,
                    5447,
                    5450,
                    3407,
                    2904,
                    349,
                    2914,
                    356,
                    380,
                    2956,
                    4494,
                    914,
                    2963,
                    407,
                    925,
                    2982,
                    1969,
                    4532,
                    5051,
                    1981,
                    1470,
                    5058,
                    3013,
                    1990,
                    969,
                    971,
                    461,
                    3023,
                    3024,
                    4048,
                    3027,
                    4052,
                    3038,
                    3039,
                    3041,
                    3043,
                    3570,
                    3572,
                    5630
                ],
                "result": [
                    2614,
                    568,
                    569,
                    570,
                    2618,
                    573,
                    2130,
                    1110,
                    2134,
                    1113,
                    1114,
                    603,
                    605,
                    606,
                    607,
                    608,
                    4727,
                    121,
                    4730,
                    4732,
                    126,
                    130,
                    132,
                    133,
                    2184,
                    2185,
                    147,
                    148,
                    149,
                    150,
                    3843,
                    4357,
                    3846,
                    3847,
                    4360,
                    4362,
                    5433,
                    5435,
                    5436,
                    5439,
                    5441,
                    3414,
                    3418,
                    3419,
                    3420,
                    920,
                    925,
                    926,
                    927,
                    930,
                    931,
                    4529,
                    4531,
                    4532,
                    4534,
                    1468,
                    1470,
                    1472,
                    1473,
                    463,
                    464,
                    4050,
                    4051,
                    4052,
                    4053,
                    4054,
                    4055,
                    469,
                    3545,
                    4057,
                    470,
                    471,
                    473,
                    2520,
                    2523,
                    2527,
                    2528,
                    3550,
                    3551,
                    3552,
                    2539,
                    2542,
                    2546,
                    507,
                    506,
                    2555,
                    508,
                    2559
                ],
                "ABCMultiIndex": [
                    3492,
                    2309,
                    3493,
                    4228,
                    176,
                    3377,
                    3378,
                    4784,
                    4724,
                    123,
                    1246
                ],
                "ops.comp_method_OBJECT_ARRAY": [
                    126
                ],
                "ops": [
                    5314,
                    134,
                    5299,
                    5301,
                    5302,
                    5306,
                    126,
                    5311
                ],
                "np.asarray": [
                    130,
                    645,
                    969,
                    2956,
                    5212,
                    4048,
                    4657,
                    562,
                    3570,
                    407,
                    2844,
                    349
                ],
                "is_bool_dtype": [
                    132,
                    3887,
                    569,
                    380,
                    5054
                ],
                "ops.invalid_comparison": [
                    134
                ],
                "unpack_zerodim_and_defer": [
                    112
                ],
                "op.__name__": [
                    112,
                    152,
                    136
                ],
                "name": [
                    896,
                    1153,
                    1154,
                    1155,
                    4096,
                    4098,
                    1146,
                    136,
                    137,
                    394,
                    4105,
                    4106,
                    5624,
                    402,
                    407,
                    152,
                    153,
                    1050,
                    1051,
                    5627,
                    1053,
                    4126,
                    1183,
                    1184,
                    289,
                    4131,
                    420,
                    1317,
                    806,
                    424,
                    306,
                    308,
                    5429,
                    5430,
                    315,
                    3771,
                    3772,
                    322,
                    5443,
                    5829,
                    328,
                    5832,
                    2378,
                    2379,
                    2380,
                    334,
                    340,
                    1108,
                    470,
                    1109,
                    1110,
                    353,
                    4069,
                    1126,
                    1000,
                    1001,
                    1002,
                    878,
                    5618,
                    501,
                    5621,
                    375,
                    1144,
                    377,
                    506,
                    379,
                    2558,
                    2559
                ],
                "set_function_name": [
                    137,
                    153
                ],
                "cmp_method": [
                    137
                ],
                "cls": [
                    5254,
                    5255,
                    5256,
                    137,
                    393,
                    5257,
                    5258,
                    5259,
                    402,
                    5266,
                    5267,
                    405,
                    5268,
                    5269,
                    5270,
                    153,
                    5271,
                    5278,
                    5279,
                    5280,
                    289,
                    5281,
                    5282,
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5288,
                    5289,
                    171,
                    5290,
                    5291,
                    174,
                    176,
                    5298,
                    5299,
                    5300,
                    181,
                    5301,
                    5302,
                    5303,
                    5305,
                    5306,
                    5309,
                    5310,
                    5311,
                    5312,
                    5313,
                    5314,
                    3908,
                    5446,
                    5449,
                    463,
                    5458,
                    5331,
                    5332,
                    5333,
                    5334,
                    5459,
                    602,
                    603,
                    5338,
                    5339,
                    5625
                ],
                "ABCSeries": [
                    356,
                    142,
                    5618,
                    2328,
                    5435
                ],
                "ABCDataFrame": [
                    2328,
                    142
                ],
                "ABCTimedeltaIndex": [
                    4689,
                    4115,
                    142
                ],
                "Series": [
                    2337,
                    2350,
                    147,
                    2332,
                    1053
                ],
                "Index": [
                    645,
                    5512,
                    4106,
                    653,
                    149,
                    150,
                    407,
                    3351,
                    2332,
                    4128,
                    2337,
                    4131,
                    4774,
                    424,
                    2344,
                    5548,
                    2350,
                    5553,
                    3258,
                    4795,
                    3772,
                    2621,
                    573,
                    3900,
                    5435,
                    2626,
                    5578,
                    5326,
                    3152,
                    2134,
                    2777,
                    606,
                    3934,
                    2528,
                    353,
                    2785,
                    2786,
                    356,
                    2404,
                    2405,
                    5215,
                    5472,
                    5473,
                    5474,
                    5618,
                    4092,
                    4221
                ],
                "index_arithmetic_method": [
                    153
                ],
                "_o_dtype": [
                    160,
                    5826
                ],
                "np.dtype": [
                    160,
                    5756,
                    5630
                ],
                "_Identity": [
                    161,
                    533
                ],
                "ABCPeriodIndex": [
                    171,
                    4116
                ],
                "_new_PeriodIndex": [
                    174
                ],
                "d": [
                    1962,
                    1963,
                    1964,
                    174,
                    177,
                    179,
                    181
                ],
                "d.pop": [
                    179
                ],
                "cls.__new__": [
                    181
                ],
                "IndexOpsMixin": [
                    184,
                    232,
                    3841,
                    3800
                ],
                "PandasObject": [
                    184,
                    231
                ],
                "_deprecations": [
                    230
                ],
                "FrozenSet": [
                    230
                ],
                "PandasObject._deprecations": [
                    231
                ],
                "IndexOpsMixin._deprecations": [
                    232
                ],
                "_join_precedence": [
                    237
                ],
                "libjoin.left_join_indexer_unique": [
                    244
                ],
                "libjoin": [
                    250,
                    244,
                    253,
                    247
                ],
                "right": [
                    3621,
                    3625,
                    3631,
                    244,
                    3637,
                    247,
                    250,
                    253
                ],
                "libjoin.left_join_indexer": [
                    247
                ],
                "libjoin.inner_join_indexer": [
                    250
                ],
                "libjoin.outer_join_indexer": [
                    253
                ],
                "_typ": [
                    255
                ],
                "_data": [
                    256,
                    4150
                ],
                "Union": [
                    256,
                    3810,
                    3038
                ],
                "np.ndarray": [
                    256,
                    4494,
                    2963,
                    2982,
                    558,
                    5051,
                    5435,
                    3778,
                    5058,
                    3013,
                    461,
                    3797,
                    2904,
                    3803,
                    3038,
                    3039,
                    3041,
                    3810,
                    356,
                    4708,
                    3835,
                    5756,
                    5757,
                    5630
                ],
                "_id": [
                    257
                ],
                "_name": [
                    258
                ],
                "Label": [
                    258,
                    5798,
                    454,
                    488,
                    5614
                ],
                "_no_setting_name": [
                    262
                ],
                "_comparables": [
                    263
                ],
                "_attributes": [
                    264
                ],
                "_is_numeric_dtype": [
                    265
                ],
                "_can_hold_na": [
                    266
                ],
                "_defer_to_indexing": [
                    269
                ],
                "_engine_type": [
                    271
                ],
                "libindex.ObjectEngine": [
                    271
                ],
                "libindex": [
                    271
                ],
                "_supports_partial_string_indexing": [
                    274
                ],
                "_accessors": [
                    276
                ],
                "CachedAccessor": [
                    278
                ],
                "StringMethods": [
                    278
                ],
                "maybe_extract_name": [
                    289,
                    1134
                ],
                "data": [
                    5651,
                    404,
                    405,
                    406,
                    407,
                    5653,
                    409,
                    5655,
                    411,
                    412,
                    5659,
                    414,
                    5780,
                    5664,
                    289,
                    5666,
                    5781,
                    420,
                    5789,
                    5790,
                    423,
                    5671,
                    5673,
                    298,
                    300,
                    5677,
                    302,
                    5679,
                    305,
                    306,
                    307,
                    308,
                    5681,
                    315,
                    833,
                    322,
                    3909,
                    5829,
                    328,
                    840,
                    841,
                    843,
                    5832,
                    334,
                    5710,
                    5711,
                    340,
                    347,
                    5723,
                    349,
                    5724,
                    352,
                    353,
                    356,
                    5734,
                    5735,
                    5743,
                    5744,
                    370,
                    371,
                    5747,
                    5748,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    383
                ],
                "dtype": [
                    642,
                    644,
                    645,
                    390,
                    648,
                    651,
                    653,
                    5776,
                    5650,
                    5653,
                    407,
                    5659,
                    5664,
                    291,
                    292,
                    295,
                    296,
                    424,
                    809,
                    810,
                    3884,
                    5671,
                    5672,
                    5677,
                    5679,
                    306,
                    562,
                    308,
                    3891,
                    311,
                    3898,
                    315,
                    3900,
                    318,
                    322,
                    5826,
                    324,
                    328,
                    5832,
                    330,
                    334,
                    336,
                    340,
                    343,
                    344,
                    3927,
                    346,
                    347,
                    3932,
                    3934,
                    364,
                    633,
                    370,
                    371,
                    375,
                    377,
                    634,
                    379,
                    636,
                    639
                ],
                "pandas_dtype": [
                    634,
                    292
                ],
                "kwargs": [
                    394,
                    906,
                    397,
                    398,
                    407,
                    420,
                    293,
                    294,
                    424,
                    685,
                    686,
                    814,
                    4534,
                    315,
                    961,
                    322,
                    4677,
                    4678,
                    5829,
                    328,
                    5832,
                    334,
                    340,
                    353
                ],
                "tz": [
                    296,
                    294,
                    295
                ],
                "kwargs.pop": [
                    294
                ],
                "validate_tz_from_dtype": [
                    295
                ],
                "tz_to_dtype": [
                    296
                ],
                "ABCPandasArray": [
                    298
                ],
                "data.to_numpy": [
                    300
                ],
                "data_dtype": [
                    324,
                    330,
                    302,
                    336,
                    343,
                    311,
                    318
                ],
                "RangeIndex": [
                    305,
                    306,
                    5611,
                    308
                ],
                "copy": [
                    642,
                    387,
                    645,
                    648,
                    5653,
                    407,
                    5664,
                    5666,
                    424,
                    5549,
                    5679,
                    5553,
                    306,
                    315,
                    322,
                    5575,
                    328,
                    5832,
                    334,
                    340,
                    353,
                    370,
                    375,
                    377,
                    379,
                    637
                ],
                "RangeIndex.from_range": [
                    308
                ],
                "is_categorical_dtype": [
                    4656,
                    913,
                    639,
                    311
                ],
                "_maybe_asobject": [
                    322,
                    328,
                    334,
                    340,
                    315
                ],
                "CategoricalIndex": [
                    642,
                    315
                ],
                "is_interval_dtype": [
                    318
                ],
                "IntervalIndex": [
                    322
                ],
                "is_datetime64_any_dtype": [
                    324
                ],
                "DatetimeIndex": [
                    328
                ],
                "is_timedelta64_dtype": [
                    330
                ],
                "TimedeltaIndex": [
                    334
                ],
                "is_period_dtype": [
                    336,
                    4148
                ],
                "PeriodIndex": [
                    340
                ],
                "is_extension_array_dtype": [
                    4232,
                    644,
                    343
                ],
                "ea_cls": [
                    346,
                    347
                ],
                "dtype.construct_array_type": [
                    346
                ],
                "ea_cls._from_sequence": [
                    347
                ],
                "data.astype": [
                    352,
                    5789,
                    5671,
                    5677,
                    5780,
                    381
                ],
                "_maybe_cast_with_dtype": [
                    370
                ],
                "data.dtype": [
                    5735,
                    5711,
                    5744,
                    371,
                    5748,
                    374,
                    376,
                    378,
                    380,
                    5724
                ],
                "is_signed_integer_dtype": [
                    374
                ],
                "Int64Index": [
                    375
                ],
                "is_unsigned_integer_dtype": [
                    376,
                    5776
                ],
                "UInt64Index": [
                    377
                ],
                "is_float_dtype": [
                    5672,
                    378
                ],
                "Float64Index": [
                    379
                ],
                "data.dtype.type": [
                    380
                ],
                "np.bool": [
                    380
                ],
                "subarr": [
                    388,
                    5734,
                    391,
                    423,
                    424,
                    5706,
                    5710,
                    399,
                    5743,
                    402,
                    5715,
                    5747,
                    5719,
                    5752,
                    5723,
                    381,
                    383
                ],
                "com.asarray_tuplesafe": [
                    423,
                    3173,
                    383
                ],
                "com": [
                    3173,
                    423,
                    4039,
                    4942,
                    3119,
                    4047,
                    5237,
                    3484,
                    3485,
                    383
                ],
                "subarr.copy": [
                    388
                ],
                "new_data": [
                    394,
                    391
                ],
                "new_dtype": [
                    392,
                    394,
                    391
                ],
                "_maybe_cast_data_without_dtype": [
                    391
                ],
                "subarr.ndim": [
                    399
                ],
                "cls._simple_new": [
                    402
                ],
                "is_scalar": [
                    4929,
                    4931,
                    4038,
                    3952,
                    4051,
                    404,
                    4574
                ],
                "cls._scalar_data_error": [
                    405
                ],
                "tupleize_cols": [
                    409
                ],
                "is_list_like": [
                    1153,
                    1249,
                    1252,
                    1255,
                    1257,
                    1176,
                    409,
                    2780,
                    1149
                ],
                "is_iterator": [
                    411,
                    5555
                ],
                "e": [
                    414
                ],
                "MultiIndex.from_tuples": [
                    419,
                    4767
                ],
                "MultiIndex": [
                    5569,
                    3618,
                    419,
                    3525,
                    1477,
                    3623,
                    5514,
                    3694,
                    4761,
                    4767
                ],
                "kwargs.get": [
                    420
                ],
                "values": [
                    2308,
                    2311,
                    2313,
                    909,
                    2318,
                    4880,
                    913,
                    914,
                    2322,
                    916,
                    917,
                    919,
                    920,
                    1176,
                    1178,
                    923,
                    1179,
                    1183,
                    930,
                    1186,
                    3885,
                    4145,
                    3890,
                    4147,
                    3893,
                    4150,
                    3895,
                    4151,
                    3260,
                    1981,
                    958,
                    1982,
                    960,
                    961,
                    1983,
                    3262,
                    3263,
                    3900,
                    969,
                    971,
                    461,
                    973,
                    974,
                    464,
                    721,
                    595,
                    596,
                    469,
                    724,
                    4727,
                    4724,
                    4725,
                    502,
                    503,
                    504,
                    4726,
                    506,
                    3325
                ],
                "object.__new__": [
                    463
                ],
                "result._data": [
                    464
                ],
                "result._index_data": [
                    469
                ],
                "result._name": [
                    1472,
                    470
                ],
                "result._cache": [
                    507,
                    471
                ],
                "result._reset_identity": [
                    473
                ],
                "cache_readonly": [
                    1985,
                    1992,
                    3799,
                    1972,
                    475,
                    1590,
                    1944,
                    1951,
                    539,
                    575
                ],
                "k": [
                    4730,
                    836,
                    486
                ],
                "self._attributes": [
                    486
                ],
                "no_default": [
                    488,
                    501
                ],
                "self.name": [
                    4096,
                    642,
                    899,
                    898,
                    645,
                    1158,
                    653,
                    3351,
                    1051,
                    4795,
                    3900,
                    3263,
                    1353,
                    1355,
                    2379,
                    1109,
                    2134,
                    3290,
                    3292,
                    5215,
                    2786,
                    2787,
                    501
                ],
                "cache": [
                    507,
                    502
                ],
                "self._cache.copy": [
                    502
                ],
                "self._cache": [
                    502
                ],
                "self._simple_new": [
                    506,
                    3263
                ],
                "self._id": [
                    533,
                    607,
                    527
                ],
                "self._engine.clear_mapping": [
                    537
                ],
                "self._engine": [
                    1537,
                    2971,
                    2950,
                    3846,
                    4619,
                    4012,
                    1554,
                    4661,
                    2839,
                    537,
                    2969,
                    1595
                ],
                "target_values": [
                    545,
                    546,
                    2977,
                    3022,
                    3023,
                    3024,
                    2965,
                    3033,
                    2973
                ],
                "self._get_engine_target": [
                    3560,
                    545,
                    595,
                    3733
                ],
                "self._engine_type": [
                    546
                ],
                "self._data": [
                    802,
                    4035,
                    580,
                    5193,
                    1962,
                    2683,
                    556,
                    562,
                    3797,
                    3833,
                    3802,
                    603,
                    3262
                ],
                "lib.item_from_zerodim": [
                    568
                ],
                "lib": [
                    3616,
                    5057,
                    3650,
                    5673,
                    5706,
                    5651,
                    917,
                    568,
                    569,
                    5564,
                    1949,
                    5055
                ],
                "lib.is_scalar": [
                    569
                ],
                "np.ndim": [
                    569,
                    4052
                ],
                "attrs": [
                    834,
                    836,
                    5325,
                    5326,
                    572,
                    573
                ],
                "self._get_attributes_dict": [
                    1963,
                    5325,
                    4757,
                    572,
                    4125,
                    3934
                ],
                "self._data.dtype": [
                    580
                ],
                "values.ravel": [
                    596
                ],
                "order": [
                    596
                ],
                "self._data.view": [
                    603,
                    3797
                ],
                "self._shallow_copy": [
                    770,
                    2185,
                    2322,
                    1049,
                    802,
                    804,
                    4151,
                    703,
                    4036,
                    3397,
                    5193,
                    2634,
                    2380,
                    2135,
                    605,
                    2155,
                    2156,
                    1263,
                    2683,
                    2559
                ],
                "result._id": [
                    607
                ],
                "is_dtype_equal": [
                    5826,
                    2922,
                    2603,
                    2421,
                    636,
                    3422
                ],
                "self.copy": [
                    637,
                    814,
                    823
                ],
                "self.values": [
                    642,
                    4354,
                    5433,
                    648,
                    4360,
                    909,
                    3885,
                    5326,
                    4145,
                    889,
                    1053
                ],
                "casted": [
                    648,
                    653
                ],
                "self.values.astype": [
                    648
                ],
                "err": [
                    652,
                    2549,
                    2841,
                    4154,
                    5049
                ],
                "nv.validate_take": [
                    686
                ],
                "nv": [
                    769,
                    686
                ],
                "indices": [
                    711,
                    715,
                    687,
                    721,
                    691,
                    724,
                    702
                ],
                "ensure_platform_int": [
                    768,
                    3713,
                    2914,
                    3716,
                    711,
                    2952,
                    687,
                    3567,
                    3568,
                    3764,
                    3765,
                    4662,
                    3322
                ],
                "self._can_hold_na": [
                    688,
                    1977,
                    1987,
                    1997
                ],
                "taken": [
                    2629,
                    2633,
                    2634,
                    2636,
                    2637,
                    720,
                    689,
                    724,
                    725,
                    702,
                    703
                ],
                "self._assert_take_fillable": [
                    689
                ],
                "allow_fill": [
                    697,
                    714,
                    692,
                    721
                ],
                "fill_value": [
                    697,
                    714,
                    693
                ],
                "self._na_value": [
                    3882,
                    694,
                    4319
                ],
                "cls_name": [
                    698,
                    700
                ],
                "self._values.take": [
                    702
                ],
                "Appender": [
                    4645,
                    683,
                    2901,
                    5430,
                    5431,
                    766
                ],
                "np.nan": [
                    1969,
                    706,
                    1470
                ],
                "algos.take": [
                    720
                ],
                "algos": [
                    2626,
                    3652,
                    2535,
                    2696,
                    2633,
                    2538,
                    720,
                    4880,
                    2546,
                    2773,
                    3702
                ],
                "na_value": [
                    721
                ],
                "values.take": [
                    724
                ],
                "repeats": [
                    768,
                    770
                ],
                "nv.validate_repeat": [
                    769
                ],
                "axis": [
                    769
                ],
                "self._values.repeat": [
                    770
                ],
                "deep": [
                    801,
                    3843,
                    806,
                    3846,
                    1147
                ],
                "new_index": [
                    802,
                    804,
                    807,
                    810,
                    811,
                    3351,
                    3352
                ],
                "self._data.copy": [
                    802
                ],
                "names": [
                    4096,
                    5510,
                    5511,
                    5512,
                    5514,
                    4762,
                    4764,
                    4766,
                    1151,
                    4767,
                    1188,
                    806,
                    807,
                    3520,
                    3526,
                    1249,
                    1252,
                    1255,
                    1256,
                    1264,
                    1144,
                    1146,
                    1148,
                    1149,
                    4095
                ],
                "self._validate_names": [
                    806
                ],
                "new_index.set_names": [
                    807
                ],
                "new_index.astype": [
                    810
                ],
                "klass_name": [
                    832,
                    843
                ],
                "self._format_data": [
                    833
                ],
                "self._format_attrs": [
                    834
                ],
                "space": [
                    835,
                    837
                ],
                "self._format_space": [
                    835
                ],
                "attrs_str": [
                    836,
                    837
                ],
                "v": [
                    4730,
                    836,
                    3087
                ],
                "prepr": [
                    843,
                    837
                ],
                "join": [
                    837
                ],
                "res": [
                    843,
                    845,
                    5780,
                    5781,
                    5782,
                    5789,
                    5790,
                    5791
                ],
                "default_pprint": [
                    862
                ],
                "is_justify": [
                    872,
                    875,
                    869,
                    878
                ],
                "self.inferred_type": [
                    1697,
                    3973,
                    871,
                    873,
                    1866,
                    1899,
                    1740,
                    4687,
                    1936,
                    4689,
                    4692,
                    1942,
                    1783,
                    1662
                ],
                "self.categories": [
                    874
                ],
                "format_object_summary": [
                    877
                ],
                "self._formatter_func": [
                    878
                ],
                "format_object_attrs": [
                    885
                ],
                "header": [
                    897,
                    931,
                    904,
                    906,
                    895
                ],
                "header.append": [
                    897
                ],
                "pprint_thing": [
                    920,
                    898
                ],
                "formatter": [
                    904,
                    903
                ],
                "self.map": [
                    904,
                    1508
                ],
                "self._format_with_header": [
                    906
                ],
                "values.dtype": [
                    913,
                    916,
                    919
                ],
                "np.array": [
                    5666,
                    1990,
                    2344,
                    971,
                    5679,
                    914,
                    4532,
                    925
                ],
                "lib.maybe_convert_objects": [
                    917
                ],
                "x": [
                    4128,
                    5599,
                    4787,
                    4788,
                    5334,
                    4791,
                    920,
                    4121,
                    3418,
                    3419,
                    4794,
                    5598,
                    2527
                ],
                "mask": [
                    4354,
                    4357,
                    4359,
                    923,
                    924,
                    926,
                    4147,
                    1467,
                    1469,
                    1470,
                    4157,
                    967,
                    973,
                    3664,
                    3665,
                    3666,
                    3667,
                    3681,
                    3682,
                    3684,
                    3692,
                    3571,
                    3572,
                    5239,
                    5240,
                    5242,
                    5243
                ],
                "isna": [
                    5655,
                    967,
                    2057,
                    2318,
                    3895,
                    3929,
                    1978,
                    923
                ],
                "mask.any": [
                    5240,
                    924,
                    1469
                ],
                "na_rep": [
                    973,
                    926
                ],
                "result.tolist": [
                    927
                ],
                "_trim_front": [
                    930
                ],
                "format_array": [
                    930
                ],
                "slicer": [
                    960,
                    959
                ],
                "values._format_native_types": [
                    961
                ],
                "self.is_object": [
                    968,
                    4068,
                    3967
                ],
                "quoting": [
                    968
                ],
                "astype": [
                    969,
                    2404,
                    2405
                ],
                "head": [
                    992,
                    996,
                    990,
                    991
                ],
                "head.format": [
                    992
                ],
                "tail": [
                    993,
                    994,
                    995,
                    996
                ],
                "tail.format": [
                    995
                ],
                "index_summary": [
                    1002,
                    996,
                    998
                ],
                "index": [
                    5829,
                    5830,
                    1048,
                    1049,
                    1112,
                    1053
                ],
                "self.values.copy": [
                    4145,
                    1053
                ],
                "DataFrame": [
                    1110
                ],
                "self._values.copy": [
                    1110
                ],
                "result.index": [
                    1113
                ],
                "self._name": [
                    1186,
                    1124,
                    1135
                ],
                "self._no_setting_name": [
                    1128
                ],
                "value": [
                    3946,
                    4620,
                    4621,
                    1134,
                    1135,
                    2128,
                    3952,
                    2130,
                    3953,
                    4147,
                    4157
                ],
                "name.setter": [
                    1126
                ],
                "deepcopy": [
                    1147
                ],
                "self.names": [
                    3504,
                    1457,
                    4792,
                    3385,
                    4762,
                    1147,
                    3484
                ],
                "FrozenList": [
                    1158
                ],
                "is_hashable": [
                    1184,
                    5624
                ],
                "_set_names": [
                    1188
                ],
                "_get_names": [
                    1188
                ],
                "level": [
                    2182,
                    2183,
                    1417,
                    4878,
                    4879,
                    1441,
                    1442,
                    1444,
                    1446,
                    1448,
                    1450,
                    3628,
                    3629,
                    4785,
                    4787,
                    3382,
                    3645,
                    1343,
                    1344,
                    3391,
                    3393,
                    1347,
                    3267,
                    1349,
                    3653,
                    1351,
                    3271,
                    1353,
                    3657,
                    1355,
                    3660,
                    1359,
                    3670,
                    3415,
                    3544,
                    3546,
                    1246,
                    1504,
                    1249,
                    1252,
                    3686,
                    1257,
                    1258,
                    1264,
                    3703,
                    3706
                ],
                "self.nlevels": [
                    1448,
                    1450,
                    1252
                ],
                "inplace": [
                    1265,
                    1260,
                    1317
                ],
                "idx": [
                    4417,
                    4419,
                    1261,
                    1263,
                    1264,
                    1266,
                    5214,
                    5215
                ],
                "idx._set_names": [
                    1264
                ],
                "self.set_names": [
                    1317
                ],
                "self._validate_index_level": [
                    2183,
                    1417,
                    4879,
                    1359
                ],
                "self.sort_values": [
                    1379
                ],
                "ascending": [
                    1379,
                    4420
                ],
                "get_level_values": [
                    1420
                ],
                "_get_level_values": [
                    1420
                ],
                "levnums": [
                    1459,
                    1444
                ],
                "self._get_level_number": [
                    1444
                ],
                "lev": [
                    1444
                ],
                "new_levels": [
                    1478,
                    3659,
                    3660,
                    1455,
                    3695,
                    1460,
                    1464,
                    1468
                ],
                "self.levels": [
                    1455
                ],
                "new_codes": [
                    3684,
                    3686,
                    1479,
                    3656,
                    3657,
                    3687,
                    1456,
                    3696,
                    3666,
                    1461,
                    1467,
                    1468,
                    3678
                ],
                "self.codes": [
                    1456
                ],
                "new_names": [
                    1472,
                    1457,
                    1462,
                    1480
                ],
                "i": [
                    1459,
                    1460,
                    1461,
                    1462,
                    4787
                ],
                "new_levels.pop": [
                    1460
                ],
                "new_codes.pop": [
                    1461
                ],
                "new_names.pop": [
                    1462
                ],
                "take": [
                    1468,
                    4357
                ],
                "result.putmask": [
                    1470
                ],
                "mapper": [
                    1505,
                    4755,
                    1508
                ],
                "grouper": [
                    1506,
                    1508,
                    1510
                ],
                "self.is_monotonic_increasing": [
                    1571,
                    4996,
                    1520,
                    3026,
                    2967
                ],
                "self._engine.is_monotonic_increasing": [
                    1537
                ],
                "self._engine.is_monotonic_decreasing": [
                    1554
                ],
                "self.is_unique": [
                    2304,
                    3232,
                    2307,
                    1571,
                    2531,
                    3429,
                    4676,
                    3433,
                    3278,
                    2929,
                    1588,
                    3736,
                    1627
                ],
                "self.is_monotonic_decreasing": [
                    1588,
                    4998
                ],
                "self._engine.is_unique": [
                    1595
                ],
                "warnings.warn": [
                    4545,
                    4611,
                    1930,
                    2548,
                    3125
                ],
                "warnings": [
                    4545,
                    4611,
                    1930,
                    2548,
                    3125
                ],
                "lib.infer_dtype": [
                    5673,
                    5706,
                    5651,
                    1949
                ],
                "is_datetime_array": [
                    1956
                ],
                "ensure_object": [
                    1956
                ],
                "d.update": [
                    1963
                ],
                "_new_Index": [
                    1964
                ],
                "_na_value": [
                    1969
                ],
                "np.empty": [
                    3328,
                    3601,
                    1981
                ],
                "np.bool_": [
                    1981
                ],
                "values.fill": [
                    1982
                ],
                "self._isnan.nonzero": [
                    1988
                ],
                "self._isnan": [
                    1988,
                    2055,
                    2155,
                    1998,
                    2130
                ],
                "np.int64": [
                    1990
                ],
                "self._isnan.any": [
                    1998
                ],
                "isnull": [
                    2057
                ],
                "self.isna": [
                    2101
                ],
                "notnull": [
                    2103
                ],
                "notna": [
                    2103
                ],
                "self._assert_can_do_op": [
                    2128
                ],
                "self.hasnans": [
                    2129,
                    2154,
                    2317
                ],
                "self.putmask": [
                    2130
                ],
                "downcast": [
                    2131
                ],
                "how": [
                    3458,
                    3727,
                    3738,
                    3742,
                    3746,
                    3749,
                    3753,
                    3626,
                    3755,
                    3757,
                    3759,
                    3637,
                    3512,
                    3388,
                    3393,
                    3396,
                    3404,
                    3413,
                    3542,
                    3415,
                    3546,
                    3425,
                    3427,
                    2151,
                    2152,
                    3431,
                    3436,
                    3564,
                    3440,
                    3445,
                    3450,
                    3452,
                    3454
                ],
                "unique": [
                    2184
                ],
                "drop_duplicates": [
                    2233
                ],
                "keep": [
                    2233,
                    2289
                ],
                "duplicated": [
                    2289
                ],
                "dropna": [
                    2304,
                    2315
                ],
                "self.unique": [
                    2308
                ],
                "values._data": [
                    2311
                ],
                "self.intersection": [
                    2353,
                    3457
                ],
                "self.union": [
                    2356,
                    3461
                ],
                "self.symmetric_difference": [
                    2359
                ],
                "__bool__": [
                    2367
                ],
                "__nonzero__": [
                    2367
                ],
                "get_op_result_name": [
                    2789,
                    2630,
                    2378,
                    3771,
                    2558
                ],
                "this": [
                    2689,
                    2402,
                    2755,
                    2692,
                    2405,
                    2693,
                    2757,
                    3423,
                    3425,
                    2762,
                    2923,
                    2604,
                    2700,
                    2606,
                    2764,
                    2925,
                    2687
                ],
                "self.astype": [
                    2402,
                    2923,
                    2604,
                    4694,
                    4157,
                    3423
                ],
                "Index.union": [
                    2405
                ],
                "sort": [
                    2596,
                    2405,
                    2694,
                    3463,
                    2632,
                    2606,
                    2544,
                    2481,
                    2771,
                    2485,
                    2518,
                    2487,
                    2424,
                    2678,
                    2427,
                    2749
                ],
                "self._validate_sort_keyword": [
                    2481,
                    2596,
                    2749,
                    2678
                ],
                "self._assert_can_do_setop": [
                    2482,
                    2597,
                    2750,
                    2679
                ],
                "self._is_compatible_with_other": [
                    2484
                ],
                "self._union_incompatible_dtypes": [
                    2485
                ],
                "self._union": [
                    2487
                ],
                "self.equals": [
                    2600,
                    3274,
                    2508,
                    3726,
                    2681,
                    4250
                ],
                "self._get_reconciled_name_object": [
                    2601,
                    2509
                ],
                "other._get_reconciled_name_object": [
                    2512
                ],
                "lvals": [
                    2626,
                    2539,
                    2542,
                    2609,
                    2515,
                    2614,
                    2520,
                    2523,
                    2621,
                    2526
                ],
                "rvals": [
                    2626,
                    2538,
                    2610,
                    2516,
                    2614,
                    2520,
                    2621,
                    2527
                ],
                "other._values": [
                    2768,
                    4236,
                    2610,
                    2516
                ],
                "self.is_monotonic": [
                    3434,
                    3442,
                    2612,
                    2518
                ],
                "other.is_monotonic": [
                    3434,
                    3442,
                    2612,
                    2518
                ],
                "self._outer_indexer": [
                    2520,
                    3760,
                    3750
                ],
                "value_set": [
                    2526,
                    2527
                ],
                "result.extend": [
                    2527
                ],
                "_values": [
                    2528,
                    5213
                ],
                "indexer": [
                    3328,
                    2689,
                    2690,
                    2692,
                    2950,
                    2952,
                    3336,
                    3345,
                    3348,
                    3352,
                    2973,
                    2846,
                    2847,
                    2975,
                    2849,
                    2977,
                    2978,
                    3232,
                    3121,
                    2996,
                    2997,
                    2998,
                    4661,
                    4662,
                    3004,
                    2621,
                    2622,
                    3132,
                    3134,
                    3136,
                    2626,
                    2627,
                    3010,
                    2629,
                    2757,
                    3011,
                    2760,
                    3270,
                    4678,
                    3275,
                    4679,
                    2767,
                    3279,
                    3027,
                    3157,
                    3158,
                    3288,
                    3033,
                    3034,
                    5239,
                    3294,
                    3042,
                    3043,
                    2532,
                    2533,
                    3044,
                    2535,
                    2537,
                    2538,
                    3314,
                    3315,
                    3316,
                    5238,
                    2935,
                    3320,
                    2937,
                    5243,
                    5244,
                    3325
                ],
                "self.get_indexer": [
                    2532,
                    4677,
                    3019,
                    3020,
                    3470,
                    3279,
                    2996,
                    5238,
                    2846
                ],
                "nonzero": [
                    2690,
                    2533,
                    3614,
                    2760,
                    2767,
                    2622
                ],
                "algos.unique1d": [
                    2626,
                    2535
                ],
                "self.get_indexer_non_unique": [
                    3288,
                    3314,
                    4678,
                    2535
                ],
                "other_diff": [
                    2538,
                    2539
                ],
                "algos.take_nd": [
                    2538,
                    3652,
                    3702
                ],
                "concat_compat": [
                    2770,
                    2539
                ],
                "algos.safe_sort": [
                    2696,
                    2633,
                    2546,
                    2773
                ],
                "self._wrap_setop_result": [
                    2618,
                    2555
                ],
                "ensure_index": [
                    3265,
                    2598,
                    4647,
                    3376,
                    3313,
                    2906
                ],
                "other.astype": [
                    3424,
                    2605,
                    4694
                ],
                "this.intersection": [
                    2606
                ],
                "self._inner_indexer": [
                    3747,
                    3758,
                    2614
                ],
                "get_indexer": [
                    2621
                ],
                "indexer.take": [
                    2760,
                    2690,
                    2622
                ],
                "InvalidIndexError": [
                    4577,
                    2930,
                    2623
                ],
                "IncompatibleFrequency": [
                    5749,
                    2623
                ],
                "get_indexer_non_unique": [
                    2626
                ],
                "other.take": [
                    2629
                ],
                "res_name": [
                    2634,
                    2636,
                    2630
                ],
                "taken.values": [
                    2633
                ],
                "taken.name": [
                    2636
                ],
                "result_name": [
                    2752,
                    2753,
                    2787,
                    2789,
                    2790,
                    2700,
                    2777,
                    2685
                ],
                "self._convert_can_do_setop": [
                    2685,
                    2751
                ],
                "self._get_unique_index": [
                    2755,
                    2687
                ],
                "this.get_indexer": [
                    2689,
                    2925,
                    2757
                ],
                "label_diff": [
                    2692,
                    2693
                ],
                "np.setdiff1d": [
                    2761,
                    2692
                ],
                "np.arange": [
                    2692,
                    4357,
                    3336,
                    3337,
                    2762,
                    3663,
                    3348,
                    3320
                ],
                "this.size": [
                    2762,
                    2692
                ],
                "the_diff": [
                    2693,
                    2696,
                    2700,
                    2770,
                    2773,
                    2777
                ],
                "this.values.take": [
                    2693
                ],
                "this.values": [
                    2693
                ],
                "this._shallow_copy": [
                    2700
                ],
                "result_name_update": [
                    2753,
                    2751
                ],
                "other._get_unique_index": [
                    2756
                ],
                "common_indexer": [
                    2760,
                    2762
                ],
                "left_indexer": [
                    3712,
                    3713,
                    3718,
                    3642,
                    3645,
                    3646,
                    2761,
                    3019,
                    2764,
                    3023,
                    3663,
                    3667,
                    3029,
                    3672,
                    3677,
                    3678,
                    3686,
                    3687,
                    3692,
                    3709
                ],
                "left_diff": [
                    2770,
                    2764
                ],
                "this._values.take": [
                    2764
                ],
                "this._values": [
                    2764
                ],
                "right_indexer": [
                    3715,
                    3716,
                    3718,
                    3020,
                    2767,
                    2768,
                    3024,
                    3028,
                    3030,
                    3702,
                    3706,
                    3709
                ],
                "right_diff": [
                    2768,
                    2770
                ],
                "other._values.take": [
                    2768
                ],
                "method": [
                    3268,
                    5604,
                    5605,
                    2919,
                    2989,
                    2926,
                    2831,
                    3280,
                    2993,
                    3283,
                    2934,
                    2935,
                    2936,
                    2905,
                    2970,
                    2846,
                    2975
                ],
                "tolerance": [
                    2956,
                    2957,
                    2959,
                    2832,
                    2843,
                    2844,
                    2846,
                    2976,
                    2977,
                    3280,
                    3032,
                    3033,
                    2907,
                    2908,
                    3043,
                    2919,
                    2926,
                    2935,
                    2937,
                    2939
                ],
                "casted_key": [
                    2837,
                    2839
                ],
                "self._maybe_cast_indexer": [
                    2837
                ],
                "key": [
                    3083,
                    4619,
                    3213,
                    2837,
                    2841,
                    3100,
                    3101,
                    3102,
                    2844,
                    2846,
                    3103,
                    2851,
                    4010,
                    4012,
                    3119,
                    3121,
                    3132,
                    4417,
                    4038,
                    4039,
                    4040,
                    4552,
                    4042,
                    4045,
                    4942,
                    4047,
                    4048,
                    4560,
                    4050,
                    4943,
                    4564,
                    4567,
                    4952,
                    4954,
                    4571,
                    4957,
                    4574,
                    4577,
                    3057,
                    3064,
                    3065,
                    3066
                ],
                "self._engine.get_loc": [
                    4619,
                    2839
                ],
                "self._convert_tolerance": [
                    2844,
                    2908
                ],
                "indexer.ndim": [
                    2847
                ],
                "indexer.size": [
                    2847
                ],
                "loc": [
                    2849,
                    2850,
                    4321,
                    2852,
                    4322,
                    4323,
                    4599,
                    5193,
                    4619,
                    4621,
                    4560,
                    4596,
                    4597,
                    4567,
                    4571,
                    4317,
                    5214
                ],
                "indexer.item": [
                    2849
                ],
                "missing.clean_reindex_fill_method": [
                    2905
                ],
                "missing": [
                    3314,
                    4661,
                    4662,
                    3319,
                    3288,
                    2905,
                    3322,
                    3323
                ],
                "target": [
                    3333,
                    2950,
                    2957,
                    2965,
                    2967,
                    2975,
                    4647,
                    4648,
                    4649,
                    4652,
                    4656,
                    4657,
                    4659,
                    2996,
                    3253,
                    2998,
                    3256,
                    3258,
                    3263,
                    3265,
                    4677,
                    4678,
                    3271,
                    3274,
                    3019,
                    3020,
                    3022,
                    3280,
                    3288,
                    2906,
                    3290,
                    2908,
                    3291,
                    3292,
                    3294,
                    2913,
                    2914,
                    3042,
                    2916,
                    2917,
                    2922,
                    2924,
                    2926,
                    3313,
                    3314,
                    2935,
                    2937,
                    3323
                ],
                "target.is_boolean": [
                    2913
                ],
                "self.is_numeric": [
                    2913
                ],
                "np.repeat": [
                    2914,
                    3407,
                    3399
                ],
                "target.size": [
                    2914,
                    2957
                ],
                "pself": [
                    2916,
                    2917,
                    2918,
                    4648,
                    4649,
                    4650
                ],
                "ptarget": [
                    2916,
                    2917,
                    2919,
                    4648,
                    4649,
                    4650
                ],
                "self._maybe_promote": [
                    4648,
                    2916
                ],
                "pself.get_indexer": [
                    2918
                ],
                "limit": [
                    2944,
                    2919,
                    2987,
                    3019,
                    3020,
                    2926,
                    3280,
                    3283,
                    2935,
                    2937,
                    2973,
                    2975
                ],
                "target.dtype": [
                    4656,
                    2922,
                    4652
                ],
                "target.astype": [
                    2924
                ],
                "self._get_fill_indexer": [
                    2935
                ],
                "self._get_nearest_indexer": [
                    2937
                ],
                "self._engine.get_indexer": [
                    2950
                ],
                "target._get_engine_target": [
                    4659,
                    2965,
                    2950
                ],
                "tolerance.size": [
                    2957
                ],
                "target.is_monotonic_increasing": [
                    2967
                ],
                "engine_method": [
                    2968,
                    2973
                ],
                "self._engine.get_pad_indexer": [
                    2969
                ],
                "self._engine.get_backfill_indexer": [
                    2971
                ],
                "self._get_fill_indexer_searchsorted": [
                    2975
                ],
                "self._filter_indexer_tolerance": [
                    2977,
                    3033
                ],
                "side": [
                    5060,
                    4997,
                    5029,
                    5032,
                    5065,
                    5003,
                    5070,
                    5039,
                    2993,
                    2998,
                    2999,
                    5046
                ],
                "nonexact": [
                    3004,
                    2997,
                    2998
                ],
                "self._searchsorted_monotonic": [
                    5046,
                    2998
                ],
                "target._values": [
                    3022
                ],
                "left_distances": [
                    3028,
                    3023
                ],
                "np.abs": [
                    3024,
                    5333,
                    3023
                ],
                "right_distances": [
                    3024,
                    3028
                ],
                "operator.lt": [
                    5256,
                    3026
                ],
                "operator": [
                    5313,
                    5254,
                    5255,
                    5256,
                    5257,
                    5258,
                    5259,
                    3026,
                    5298,
                    5300,
                    5331,
                    5332,
                    5303,
                    5305,
                    5309,
                    5310
                ],
                "operator.le": [
                    3026,
                    5258
                ],
                "np.where": [
                    4355,
                    3027,
                    3893,
                    3043
                ],
                "distance": [
                    3042,
                    3043
                ],
                "self._validate_indexer": [
                    3064,
                    3065,
                    3066,
                    3100,
                    3101,
                    3102
                ],
                "key.start": [
                    3064,
                    3083,
                    3100
                ],
                "key.stop": [
                    3065,
                    3083,
                    3101
                ],
                "key.step": [
                    3066,
                    3083,
                    3102
                ],
                "kind": [
                    5027,
                    3973,
                    5127,
                    3080,
                    5133,
                    5039,
                    4926,
                    3123,
                    4979,
                    3094,
                    4950,
                    3134
                ],
                "start": [
                    5126,
                    3111,
                    3112,
                    5127,
                    3083,
                    4926,
                    3089,
                    5111,
                    5115,
                    5117,
                    3134
                ],
                "stop": [
                    3113,
                    3114,
                    3083,
                    3089,
                    3134
                ],
                "step": [
                    4934,
                    3083,
                    3089,
                    5107,
                    3134,
                    4926
                ],
                "is_integer": [
                    3087,
                    4596,
                    4564,
                    4954,
                    4990
                ],
                "is_index_slice": [
                    3089,
                    3090,
                    3099
                ],
                "is_int": [
                    3089
                ],
                "is_positional": [
                    3122,
                    3090,
                    3115,
                    3108
                ],
                "self.is_integer": [
                    3099,
                    3091
                ],
                "self.is_categorical": [
                    3091,
                    4068
                ],
                "self.get_loc": [
                    3112,
                    3114,
                    4560,
                    5043,
                    4317
                ],
                "com.is_null_slice": [
                    3119
                ],
                "self.slice_indexer": [
                    3134
                ],
                "keyarr": [
                    3173,
                    3174,
                    3152,
                    3153,
                    3155,
                    3157,
                    3158,
                    3189
                ],
                "self._convert_index_indexer": [
                    3153
                ],
                "self._convert_arr_indexer": [
                    3155
                ],
                "self._convert_list_indexer": [
                    3157
                ],
                "form": [
                    3212,
                    4957
                ],
                "preserve_names": [
                    3290,
                    3253
                ],
                "ensure_has_len": [
                    3256
                ],
                "ABCRangeIndex": [
                    3259
                ],
                "_": [
                    4678,
                    3605,
                    3270
                ],
                "self._join_level": [
                    3392,
                    3545,
                    3270
                ],
                "target.nlevels": [
                    3290
                ],
                "target.name": [
                    3290,
                    3292
                ],
                "target.copy": [
                    3291
                ],
                "check": [
                    3345,
                    3315,
                    3316,
                    3349,
                    3324,
                    3325,
                    3326
                ],
                "new_labels": [
                    3328,
                    3329,
                    3330,
                    3316,
                    3351
                ],
                "self.take": [
                    4423,
                    3348,
                    3316,
                    4730,
                    3325
                ],
                "new_indexer": [
                    3336,
                    3337,
                    3338,
                    3348,
                    3317,
                    3349,
                    3352
                ],
                "length": [
                    3320,
                    3324,
                    3326
                ],
                "missing_labels": [
                    3330,
                    3323
                ],
                "target.take": [
                    3323
                ],
                "missing_indexer": [
                    3330,
                    3338,
                    3324
                ],
                "ensure_int64": [
                    3616,
                    3649,
                    3604,
                    3324,
                    3326,
                    3615
                ],
                "cur_labels": [
                    3329,
                    3325,
                    3337
                ],
                "cur_indexer": [
                    3329,
                    3337,
                    3326
                ],
                "target.is_unique": [
                    3333
                ],
                "self_is_mi": [
                    3492,
                    3495,
                    3377,
                    3538,
                    3382,
                    3391
                ],
                "other_is_mi": [
                    3493,
                    3495,
                    3378,
                    3382,
                    3391
                ],
                "other.names": [
                    3544,
                    3385,
                    3485
                ],
                "self._join_multi": [
                    3388
                ],
                "return_indexers": [
                    3393,
                    3425,
                    3398,
                    3431,
                    3466,
                    3436,
                    3406,
                    3440,
                    3728,
                    3763,
                    3445,
                    3415,
                    3576,
                    3417,
                    3546,
                    3388,
                    3711
                ],
                "join_index": [
                    3457,
                    3461,
                    3718,
                    3464,
                    3720,
                    3467,
                    3470,
                    3471,
                    3474,
                    3475,
                    3477,
                    3739,
                    3743,
                    3747,
                    3748,
                    3750,
                    3751,
                    3754,
                    3756,
                    3758,
                    3760,
                    3761,
                    3766,
                    3768,
                    3643,
                    3646,
                    3397,
                    3399,
                    3400,
                    3402,
                    3405,
                    3407,
                    3408,
                    3410,
                    3579,
                    3694,
                    3570,
                    3572,
                    3574,
                    3703,
                    3577,
                    3706,
                    3451,
                    3453
                ],
                "rindexer": [
                    3399,
                    3400,
                    3472,
                    3474,
                    3475
                ],
                "other._shallow_copy": [
                    3405
                ],
                "lindexer": [
                    3468,
                    3470,
                    3407,
                    3408,
                    3475
                ],
                "self._join_precedence": [
                    3412
                ],
                "other._join_precedence": [
                    3412
                ],
                "get": [
                    3626,
                    3413,
                    3542
                ],
                "other.join": [
                    3414
                ],
                "y": [
                    3418,
                    3419,
                    4787,
                    4791
                ],
                "z": [
                    3418,
                    3419
                ],
                "this.join": [
                    3425
                ],
                "_validate_join_method": [
                    3427
                ],
                "other.is_unique": [
                    3736,
                    3433,
                    3429
                ],
                "self._join_non_unique": [
                    3430,
                    3439
                ],
                "self._join_monotonic": [
                    3435,
                    3444
                ],
                "join_index.sort_values": [
                    3464
                ],
                "other.get_indexer": [
                    3474
                ],
                "self_names": [
                    3498,
                    3484,
                    3486
                ],
                "com.not_none": [
                    3484,
                    3485
                ],
                "other_names": [
                    3499,
                    3485,
                    3486
                ],
                "overlap": [
                    3489,
                    3498,
                    3499,
                    3533,
                    3486
                ],
                "ldrop_names": [
                    3506,
                    3498,
                    3518,
                    3502
                ],
                "rdrop_names": [
                    3499,
                    3518,
                    3507,
                    3502
                ],
                "self_jnlevels": [
                    3511,
                    3506,
                    3503
                ],
                "other_jnlevels": [
                    3504,
                    3507,
                    3512
                ],
                "other.reorder_levels": [
                    3504
                ],
                "self.droplevel": [
                    3506
                ],
                "other.droplevel": [
                    3507
                ],
                "join_idx": [
                    3521,
                    3511
                ],
                "lidx": [
                    3744,
                    3521,
                    3747,
                    3750,
                    3754,
                    3531,
                    3756,
                    3758,
                    3760,
                    3764,
                    3766,
                    3511,
                    3740
                ],
                "ridx": [
                    3745,
                    3521,
                    3747,
                    3750,
                    3754,
                    3531,
                    3756,
                    3758,
                    3760,
                    3765,
                    3766,
                    3511,
                    3741
                ],
                "self_jnlevels.join": [
                    3511
                ],
                "dropped_names": [
                    3521,
                    3518
                ],
                "levels": [
                    3520,
                    3526
                ],
                "codes": [
                    3520,
                    3526
                ],
                "_restore_dropped_levels_multijoin": [
                    3520
                ],
                "multi_join_idx": [
                    3529,
                    3531,
                    3525
                ],
                "multi_join_idx.remove_unused_levels": [
                    3529
                ],
                "jl": [
                    3544,
                    3533
                ],
                "flip_order": [
                    3623,
                    3624,
                    3537,
                    3540,
                    3708,
                    3549
                ],
                "other.names.index": [
                    3544
                ],
                "lvalues": [
                    3560,
                    3570,
                    3564
                ],
                "rvalues": [
                    3572,
                    3561,
                    3564
                ],
                "other._get_engine_target": [
                    3561,
                    3734
                ],
                "left_idx": [
                    3563,
                    3567,
                    3570,
                    3571,
                    3577
                ],
                "right_idx": [
                    3568,
                    3577,
                    3563,
                    3572
                ],
                "_get_join_indexers": [
                    3563
                ],
                "lvalues.take": [
                    3570
                ],
                "np.putmask": [
                    4147,
                    3572
                ],
                "rvalues.take": [
                    3572
                ],
                "self._wrap_joined_index": [
                    3761,
                    3748,
                    3574,
                    3751
                ],
                "size": [
                    3600
                ],
                "labels": [
                    5242,
                    3600,
                    3603,
                    3604,
                    5237,
                    5238,
                    3610,
                    3611,
                    3615
                ],
                "lab": [
                    3616,
                    3684,
                    3687,
                    3666,
                    3604,
                    3605,
                    3611,
                    3612,
                    3678,
                    3615
                ],
                "sorter": [
                    3605,
                    3606
                ],
                "libalgos.groupsort_indexer": [
                    3672,
                    3605
                ],
                "libalgos": [
                    3672,
                    3605
                ],
                "lab.max": [
                    3605
                ],
                "tic": [
                    3610,
                    3612,
                    3614
                ],
                "starts": [
                    3616,
                    3614
                ],
                "np.hstack": [
                    3614
                ],
                "lib.get_level_sorter": [
                    3616
                ],
                "left._get_level_number": [
                    3628
                ],
                "old_level": [
                    3650,
                    3636,
                    3629
                ],
                "left.levels": [
                    3659,
                    3629
                ],
                "right.is_unique": [
                    3631
                ],
                "new_level": [
                    3636,
                    3660
                ],
                "left_lev_indexer": [
                    3640,
                    3649,
                    3650,
                    3636
                ],
                "right_lev_indexer": [
                    3636,
                    3701,
                    3703
                ],
                "old_level.join": [
                    3636
                ],
                "keep_order": [
                    3641,
                    3662
                ],
                "_get_leaf_sorter": [
                    3645,
                    3686
                ],
                "left.codes": [
                    3656,
                    3653,
                    3645
                ],
                "rev_indexer": [
                    3650,
                    3653
                ],
                "lib.get_reverse_indexer": [
                    3650
                ],
                "new_lev_codes": [
                    3681,
                    3652,
                    3657,
                    3664,
                    3671,
                    3673
                ],
                "np.intp": [
                    4653,
                    3663
                ],
                "mask.all": [
                    3665,
                    3682
                ],
                "ngroups": [
                    3673,
                    3671
                ],
                "new_lev_codes.max": [
                    3671
                ],
                "counts": [
                    3672,
                    3677
                ],
                "mask_all": [
                    3691,
                    3682,
                    3683
                ],
                "mask.nonzero": [
                    3692
                ],
                "left.names": [
                    3697
                ],
                "join_index.codes": [
                    3706,
                    3703
                ],
                "ret_index": [
                    3729,
                    3731,
                    3727
                ],
                "sv": [
                    3744,
                    3747,
                    3750,
                    3754,
                    3756,
                    3758,
                    3760,
                    3733,
                    3741
                ],
                "ov": [
                    3744,
                    3747,
                    3750,
                    3754,
                    3756,
                    3758,
                    3760,
                    3734,
                    3741
                ],
                "self._left_indexer_unique": [
                    3744,
                    3741
                ],
                "self._left_indexer": [
                    3754,
                    3756
                ],
                "joined": [
                    3772
                ],
                "array": [
                    3802,
                    3803,
                    3806,
                    3807
                ],
                "PandasArray": [
                    3806
                ],
                "doc": [
                    3800,
                    3841
                ],
                "IndexOpsMixin.array": [
                    3800
                ],
                "memory_usage": [
                    3843
                ],
                "self._engine.sizeof": [
                    3846
                ],
                "IndexOpsMixin.memory_usage": [
                    3841
                ],
                "is_bool": [
                    3887
                ],
                "values.astype": [
                    3890
                ],
                "cond": [
                    3893
                ],
                "self._is_numeric_dtype": [
                    3929,
                    3895
                ],
                "np.any": [
                    5450,
                    3895
                ],
                "cls.__name__": [
                    5625,
                    3908
                ],
                "item": [
                    3929,
                    5214,
                    5213,
                    3934
                ],
                "Any": [
                    4159,
                    3975
                ],
                "getitem": [
                    4040,
                    4050,
                    4035,
                    4045
                ],
                "self._data.__getitem__": [
                    4035
                ],
                "promote": [
                    4036,
                    4045,
                    4055
                ],
                "com.cast_scalar_indexer": [
                    4942,
                    4039
                ],
                "com.is_bool_indexer": [
                    4047
                ],
                "deprecate_ndim_indexing": [
                    4053
                ],
                "to_concat": [
                    4128,
                    4098,
                    4130,
                    4102,
                    4105,
                    4106,
                    4084,
                    4087,
                    4120,
                    4089,
                    4091,
                    4124,
                    4121,
                    4095
                ],
                "to_concat.append": [
                    4089
                ],
                "obj": [
                    5618,
                    5621,
                    4091,
                    4092,
                    4095
                ],
                "obj.name": [
                    5621,
                    4095
                ],
                "self._concat": [
                    4098
                ],
                "typs": [
                    4104,
                    4102
                ],
                "_concat.get_dtype_kinds": [
                    4102
                ],
                "_concat": [
                    4102
                ],
                "self._concat_same_dtype": [
                    4105
                ],
                "Index._concat_same_dtype": [
                    4106
                ],
                "klasses": [
                    4113,
                    4121
                ],
                "ABCDatetimeIndex": [
                    4114,
                    4687
                ],
                "ABCIntervalIndex": [
                    4118
                ],
                "x.astype": [
                    4121
                ],
                "attribs": [
                    4125,
                    4126
                ],
                "x._values": [
                    4128
                ],
                "res_values": [
                    4130,
                    4131
                ],
                "np.concatenate": [
                    4130,
                    5214
                ],
                "self._convert_for_op": [
                    4147
                ],
                "putmask": [
                    4157
                ],
                "self.is_": [
                    4218
                ],
                "other.equals": [
                    4226,
                    4230,
                    4234
                ],
                "array_equivalent": [
                    4236
                ],
                "c": [
                    4253,
                    4254
                ],
                "self._comparables": [
                    4254
                ],
                "label": [
                    4993,
                    4997,
                    5003,
                    5035,
                    5039,
                    5043,
                    5046,
                    4985,
                    4986,
                    4317,
                    4990,
                    4991
                ],
                "loc.indices": [
                    4322
                ],
                "locs": [
                    4360,
                    4354,
                    4355,
                    4357
                ],
                "searchsorted": [
                    4354,
                    5002
                ],
                "where.values": [
                    4360,
                    4354
                ],
                "where": [
                    4360,
                    4354
                ],
                "first": [
                    4360,
                    4359
                ],
                "mask.argmax": [
                    4359
                ],
                "Optional": [
                    4365
                ],
                "Callable": [
                    4365
                ],
                "ensure_key_mapped": [
                    4417
                ],
                "_as": [
                    4426,
                    4419,
                    4421,
                    4423
                ],
                "idx.argsort": [
                    4419
                ],
                "sorted_index": [
                    4426,
                    4428,
                    4423
                ],
                "return_indexer": [
                    4425
                ],
                "self.asi8": [
                    4529
                ],
                "result.argsort": [
                    4534
                ],
                "args": [
                    4534
                ],
                "self._check_indexing_error": [
                    4552
                ],
                "self._should_fallback_to_positional": [
                    4562
                ],
                "self._get_values_for_loc": [
                    4571
                ],
                "series": [
                    4571,
                    4597,
                    4599
                ],
                "self.holds_integer": [
                    4583
                ],
                "self.is_boolean": [
                    4583
                ],
                "series._values": [
                    4597
                ],
                "series.iloc": [
                    4599
                ],
                "validate_numeric_casting": [
                    4620
                ],
                "arr.dtype": [
                    4620
                ],
                "arr": [
                    4620,
                    4621,
                    5214,
                    5212
                ],
                "pself.get_indexer_non_unique": [
                    4650
                ],
                "self._is_comparable_dtype": [
                    4652
                ],
                "no_matches": [
                    4653,
                    4654
                ],
                "np.ones": [
                    4653
                ],
                "self.shape": [
                    4653
                ],
                "tgt_values": [
                    4657,
                    4659,
                    4661
                ],
                "self._engine.get_indexer_non_unique": [
                    4661
                ],
                "other._maybe_promote": [
                    4698
                ],
                "DtypeObj": [
                    4702
                ],
                "values._values": [
                    4725
                ],
                "Categorical": [
                    4726
                ],
                "values._reverse_indexer": [
                    4727
                ],
                "result.items": [
                    4730
                ],
                "PrettyDict": [
                    4708,
                    4732
                ],
                "Hashable": [
                    4708
                ],
                "new_values": [
                    4770,
                    4774,
                    4755,
                    4760,
                    4764,
                    4767
                ],
                "_map_values": [
                    4755
                ],
                "na_action": [
                    4755
                ],
                "attributes": [
                    4769,
                    4772,
                    4774,
                    4757,
                    4763,
                    4764
                ],
                "new_values.size": [
                    4760,
                    4770
                ],
                "attributes.get": [
                    4763,
                    4764
                ],
                "items": [
                    4786,
                    4791,
                    4792,
                    4794,
                    4795
                ],
                "func": [
                    4794,
                    4787,
                    4791
                ],
                "from_tuples": [
                    4792
                ],
                "algos.isin": [
                    4880
                ],
                "start_slice": [
                    5152,
                    4929,
                    5125,
                    4934,
                    5127,
                    5128,
                    5129,
                    5159,
                    5160,
                    5162,
                    4926
                ],
                "end_slice": [
                    5152,
                    4931,
                    5157,
                    4934,
                    5158,
                    5162,
                    5131,
                    5133,
                    5134,
                    5135,
                    4926
                ],
                "self.slice_locs": [
                    4926
                ],
                "end": [
                    5132,
                    5133,
                    4926,
                    5111,
                    5115,
                    5118
                ],
                "self.is_floating": [
                    4941
                ],
                "self._invalid_indexer": [
                    4986,
                    4957,
                    4991
                ],
                "is_float": [
                    4985
                ],
                "self.searchsorted": [
                    4997
                ],
                "pos": [
                    5002,
                    5005
                ],
                "original_label": [
                    5035,
                    5061
                ],
                "self._maybe_cast_slice_bound": [
                    5039
                ],
                "slc": [
                    5057,
                    5058,
                    5064,
                    5066,
                    5068,
                    5071,
                    5073,
                    5043,
                    5051,
                    5054,
                    5055
                ],
                "lib.maybe_booleans_to_slice": [
                    5055
                ],
                "slc.view": [
                    5055
                ],
                "lib.maybe_indices_to_slice": [
                    5057
                ],
                "slc.astype": [
                    5057
                ],
                "slc.start": [
                    5066
                ],
                "slc.stop": [
                    5068
                ],
                "inc": [
                    5137,
                    5107,
                    5109
                ],
                "datetime": [
                    5115
                ],
                "ts_start": [
                    5122,
                    5117
                ],
                "Timestamp": [
                    5117,
                    5118
                ],
                "ts_end": [
                    5122,
                    5118
                ],
                "tz_compare": [
                    5122
                ],
                "ts_start.tzinfo": [
                    5122
                ],
                "ts_end.tzinfo": [
                    5122
                ],
                "self.get_slice_bound": [
                    5133,
                    5127
                ],
                "np.delete": [
                    5193
                ],
                "self._coerce_scalar_to_index": [
                    5213
                ],
                "arr_dtype": [
                    5236,
                    5237
                ],
                "com.index_labels_to_array": [
                    5237
                ],
                "errors": [
                    5241
                ],
                "self.delete": [
                    5244
                ],
                "cls.__eq__": [
                    5254
                ],
                "_make_comparison_op": [
                    5254,
                    5255,
                    5256,
                    5257,
                    5258,
                    5259
                ],
                "operator.eq": [
                    5254
                ],
                "cls.__ne__": [
                    5255
                ],
                "operator.ne": [
                    5255
                ],
                "cls.__lt__": [
                    5256
                ],
                "cls.__gt__": [
                    5257
                ],
                "operator.gt": [
                    5257
                ],
                "cls.__le__": [
                    5258
                ],
                "cls.__ge__": [
                    5259
                ],
                "operator.ge": [
                    5259
                ],
                "cls.__add__": [
                    5298,
                    5266
                ],
                "make_invalid_op": [
                    5266,
                    5267,
                    5268,
                    5269,
                    5270,
                    5271,
                    5278,
                    5279,
                    5280,
                    5281,
                    5282,
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5288,
                    5289,
                    5290,
                    5291,
                    5458,
                    5459
                ],
                "cls.__radd__": [
                    5267,
                    5299
                ],
                "cls.__iadd__": [
                    5268
                ],
                "cls.__sub__": [
                    5300,
                    5269
                ],
                "cls.__rsub__": [
                    5301,
                    5270
                ],
                "cls.__isub__": [
                    5271
                ],
                "cls.__pow__": [
                    5278,
                    5303
                ],
                "cls.__rpow__": [
                    5302,
                    5279
                ],
                "cls.__mul__": [
                    5280,
                    5313
                ],
                "cls.__rmul__": [
                    5281,
                    5314
                ],
                "cls.__floordiv__": [
                    5282,
                    5310
                ],
                "cls.__rfloordiv__": [
                    5283,
                    5311
                ],
                "cls.__truediv__": [
                    5305,
                    5284
                ],
                "cls.__rtruediv__": [
                    5306,
                    5285
                ],
                "cls.__mod__": [
                    5309,
                    5286
                ],
                "cls.__divmod__": [
                    5312,
                    5287
                ],
                "cls.__neg__": [
                    5288,
                    5331
                ],
                "cls.__pos__": [
                    5289,
                    5332
                ],
                "cls.__abs__": [
                    5290,
                    5333
                ],
                "cls.__inv__": [
                    5291,
                    5334
                ],
                "_make_arithmetic_op": [
                    5312,
                    5313,
                    5314,
                    5298,
                    5299,
                    5300,
                    5301,
                    5302,
                    5303,
                    5305,
                    5306,
                    5309,
                    5310,
                    5311
                ],
                "operator.add": [
                    5298
                ],
                "ops.radd": [
                    5299
                ],
                "operator.sub": [
                    5300
                ],
                "ops.rsub": [
                    5301
                ],
                "ops.rpow": [
                    5302
                ],
                "operator.pow": [
                    5303
                ],
                "operator.truediv": [
                    5305
                ],
                "ops.rtruediv": [
                    5306
                ],
                "operator.mod": [
                    5309
                ],
                "operator.floordiv": [
                    5310
                ],
                "ops.rfloordiv": [
                    5311
                ],
                "operator.mul": [
                    5313
                ],
                "ops.rmul": [
                    5314
                ],
                "_evaluate_numeric_unary.__name__": [
                    5328
                ],
                "_evaluate_numeric_unary": [
                    5328,
                    5329
                ],
                "opstr": [
                    5328
                ],
                "_make_evaluate_unary": [
                    5331,
                    5332,
                    5333,
                    5334
                ],
                "operator.neg": [
                    5331
                ],
                "operator.pos": [
                    5332
                ],
                "cls._add_numeric_methods_unary": [
                    5338
                ],
                "cls._add_numeric_methods_binary": [
                    5339
                ],
                "_doc": [
                    5346,
                    5431
                ],
                "dedent": [
                    5361,
                    5403
                ],
                "f": [
                    5433
                ],
                "result.ndim": [
                    5436
                ],
                "result.dtype.type": [
                    5439
                ],
                "result.dtype": [
                    5439
                ],
                "result.item": [
                    5439
                ],
                "Substitution": [
                    5429
                ],
                "desc": [
                    5429
                ],
                "logical_func.__name__": [
                    5443
                ],
                "logical_func": [
                    5443,
                    5444
                ],
                "cls.all": [
                    5458,
                    5446
                ],
                "_make_logical_function": [
                    5449,
                    5446
                ],
                "np.all": [
                    5447
                ],
                "cls.any": [
                    5449,
                    5459
                ],
                "self._values.shape": [
                    5469
                ],
                "Index._add_numeric_methods_disabled": [
                    5472
                ],
                "Index._add_logical_methods": [
                    5473
                ],
                "Index._add_comparison_methods": [
                    5474
                ],
                "sequences": [
                    5512,
                    5514,
                    5509
                ],
                "MultiIndex.from_arrays": [
                    5569,
                    5514
                ],
                "index_like": [
                    5571,
                    5576,
                    5578,
                    5548,
                    5550,
                    5551,
                    5552,
                    5553,
                    5555,
                    5556,
                    5560,
                    5561,
                    5562,
                    5564
                ],
                "index_like.copy": [
                    5550
                ],
                "index_like.name": [
                    5553
                ],
                "converted": [
                    5569,
                    5571,
                    5564,
                    5566
                ],
                "all_arrays": [
                    5564,
                    5566
                ],
                "lib.clean_index_list": [
                    5564
                ],
                "copy_func": [
                    5576
                ],
                "seq": [
                    5586,
                    5588,
                    5590
                ],
                "trimmed": [
                    5600,
                    5597,
                    5598,
                    5599
                ],
                "strings": [
                    5597,
                    5598
                ],
                "n": [
                    5611
                ],
                "is_integer_dtype": [
                    5650
                ],
                "inferred": [
                    5728,
                    5731,
                    5668,
                    5732,
                    5673,
                    5674,
                    5706,
                    5708,
                    5742,
                    5745,
                    5651,
                    5652,
                    5717,
                    5654,
                    5721,
                    5658
                ],
                "maybe_cast_to_integer_array": [
                    5659,
                    5653
                ],
                "_try_convert_to_int_array": [
                    5664,
                    5710
                ],
                "np.float64": [
                    5666,
                    5719
                ],
                "IntervalArray._from_sequence": [
                    5723
                ],
                "IntervalArray": [
                    5723
                ],
                "inferred.startswith": [
                    5732,
                    5742
                ],
                "DatetimeArray._from_sequence": [
                    5734
                ],
                "DatetimeArray": [
                    5734
                ],
                "OutOfBoundsDatetime": [
                    5736
                ],
                "TimedeltaArray._from_sequence": [
                    5743
                ],
                "TimedeltaArray": [
                    5743
                ],
                "PeriodArray._from_sequence": [
                    5747
                ],
                "PeriodArray": [
                    5747
                ],
                "subarr.dtype": [
                    5752
                ],
                "klass": [
                    5832,
                    5829
                ],
                "index.astype": [
                    5830
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_4/pandas/tests/indexes/multi/test_join.py",
                "test_function": "test_join_multi_return_indexers",
                "test_function_code": "def test_join_multi_return_indexers():\n    # GH 34074\n\n    midx1 = pd.MultiIndex.from_product([[1, 2], [3, 4], [5, 6]], names=[\"a\", \"b\", \"c\"])\n    midx2 = pd.MultiIndex.from_product([[1, 2], [3, 4]], names=[\"a\", \"b\"])\n\n    result = midx1.join(midx2, return_indexers=False)\n    tm.assert_index_equal(result, midx1)",
                "test_error": "AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'tuple'> instead",
                "full_test_error": "def test_join_multi_return_indexers():\n        # GH 34074\n    \n        midx1 = pd.MultiIndex.from_product([[1, 2], [3, 4], [5, 6]], names=[\"a\", \"b\", \"c\"])\n        midx2 = pd.MultiIndex.from_product([[1, 2], [3, 4]], names=[\"a\", \"b\"])\n    \n        result = midx1.join(midx2, return_indexers=False)\n>       tm.assert_index_equal(result, midx1)\n\npandas/tests/indexes/multi/test_join.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = (MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n  ...       (2, 4, 6)],\n           names=['a', 'b', 'c']), array([0, 1, 2, 3, 4, 5, 6, 7]), array([0, 0, 1, 1, 2, 2, 3, 3]))\nright = MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])\ncls = <class 'pandas.core.indexes.base.Index'>\n\n    def _check_isinstance(left, right, cls):\n        \"\"\"\n        Helper method for our assert_* methods that ensures that\n        the two objects being compared have the right type before\n        proceeding with the comparison.\n    \n        Parameters\n        ----------\n        left : The first object being compared.\n        right : The second object being compared.\n        cls : The class type to check against.\n    \n        Raises\n        ------\n        AssertionError : Either `left` or `right` is not an instance of `cls`.\n        \"\"\"\n        cls_name = cls.__name__\n    \n        if not isinstance(left, cls):\n>           raise AssertionError(\n                f\"{cls_name} Expected type {cls}, found {type(left)} instead\"\n            )\nE           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'tuple'> instead\n\npandas/_testing.py:410: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}