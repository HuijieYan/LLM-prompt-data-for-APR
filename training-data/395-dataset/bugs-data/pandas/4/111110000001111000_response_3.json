{
    "pandas": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 3479,
            "file_name": "pandas/core/indexes/base.py",
            "replace_code": "def _join_multi(self, other, how='left', return_indexers=True):\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    from pandas.core.indexes.multi import MultiIndex\n    from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    \n    # figure out join names\n    self_names = set(getattr(self, 'names', None))\n    other_names = set(getattr(other, 'names', None))\n    \n    # need at least 1 in common\n    if not (self_names and other_names and self_names & other_names):\n        raise ValueError(\"cannot join with no overlapping index names\")\n    \n    self_is_mi = isinstance(self, MultiIndex)\n    other_is_mi = isinstance(other, MultiIndex)\n    \n    if self_is_mi and other_is_mi:\n        overlap = self_names & other_names\n    \n        # Drop the non-matching levels from left and right respectively\n        ldrop_names = list(self_names - overlap)\n        rdrop_names = list(other_names - overlap)\n    \n        # if only the order differs\n        if not (ldrop_names or rdrop_names):\n            other_jnlevels = getattr(other, 'reorder_levels')()\n        else:\n            self_jnlevels = getattr(self, 'droplevel')(ldrop_names)\n            other_jnlevels = getattr(other, 'droplevel')(rdrop_names)\n    \n        # Join left and right\n        join_idx, lidx, ridx = self_jnlevels.join(\n            other_jnlevels, how, return_indexers=True\n        )\n    \n        # Restore the dropped levels\n        dropped_names = ldrop_names + rdrop_names\n        levels, codes, names = _restore_dropped_levels_multijoin(\n            self, other, dropped_names, join_idx, lidx, ridx\n        )\n    \n        # Re-create the multi-index\n        multi_join_idx = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n    \n        multi_join_idx = multi_join_idx.remove_unused_levels()\n    \n        return multi_join_idx, lidx, ridx\n    else:\n        jl = list(self_names & other_names)[0]\n    \n        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self\n            flip_order = True\n            # flip if join method is right or left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n    \n        level = other_names.index(jl)\n        result = getattr(self, '_join_level')(\n            other, level, how=how, return_indexers=return_indexers\n        )\n    \n        if flip_order:\n            if isinstance(result, tuple):\n                return result[0], result[2], result[1]\n        return result"
        }
    ]
}