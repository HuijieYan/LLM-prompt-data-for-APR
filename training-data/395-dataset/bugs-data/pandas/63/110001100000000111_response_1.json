{
    "pandas": [
        {
            "bugID": 63,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 2081,
            "file_name": "core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n\n    \"\"\"\n    Require the keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n    \n    for ax, i in zip(self.obj.axes, key):\n        if isinstance(ax, type(self.obj.index)):\n            if ax.is_integer() and not isinstance(i, (int, np.integer)):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n            elif not ax.is_integer() and not isinstance(i, (str, np.floating)):\n                raise ValueError(\n                    \"At based indexing on a non-integer \"\n                    \"index can only have non-integer \"\n                    \"indexers\"\n                )\n        else:\n            raise ValueError(\"Index type mismatch\")\n    return key"
        }
    ]
}