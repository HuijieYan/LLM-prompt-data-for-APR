{
    "1.1.1": "def _convert_key(self, key, is_setter: bool = False):\n    \n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    for ax, i in zip(self.obj.axes, key):\n        if ax.is_integer():\n            if not is_integer(i):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n        else:\n            if is_integer(i) and not (ax.holds_integer() or ax.is_floating()):\n                raise ValueError(\n                    \"At based indexing on an non-integer \"\n                    \"index can only have non-integer \"\n                    \"indexers\"\n                )\n    return key\n",
    "1.1.2": "Require they keys to be the same type as the index. (so we don't\nfallback)",
    "1.2.1": "@Appender(IndexingMixin.at.__doc__)\nclass _AtIndexer(_ScalarAccessIndexer)",
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_63/pandas/core/indexing.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_series_at_raises_type_error(self):\n        # at should not fallback\n        # GH 7814\n        # GH#31724 .at should match .loc\n        ser = Series([1, 2, 3], index=list(\"abc\"))\n        result = ser.at[\"a\"]\n        assert result == 1\n        result = ser.loc[\"a\"]\n        assert result == 1\n\n        msg = (\n            \"cannot do label indexing on <class 'pandas.core.indexes.base.Index'> \"\n            r\"with these indexers \\[0\\] of <class 'int'>\"\n        )\n        with pytest.raises(TypeError, match=msg):\n            ser.at[0]\n        with pytest.raises(TypeError, match=msg):\n            ser.loc[0]"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_63/pandas/tests/indexing/test_scalar.py"
    ],
    "2.1.1": [
        [
            "E                   ValueError: At based indexing on an non-integer index can only have non-integer indexers"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexing.test_scalar.TestScalar2 object at 0x110064370>\n\n    def test_series_at_raises_type_error(self):\n        # at should not fallback\n        # GH 7814\n        # GH#31724 .at should match .loc\n        ser = Series([1, 2, 3], index=list(\"abc\"))\n        result = ser.at[\"a\"]\n        assert result == 1\n        result = ser.loc[\"a\"]\n        assert result == 1\n    \n        msg = (\n            \"cannot do label indexing on <class 'pandas.core.indexes.base.Index'> \"\n            r\"with these indexers \\[0\\] of <class 'int'>\"\n        )\n        with pytest.raises(TypeError, match=msg):\n>           ser.at[0]\n\npandas/tests/indexing/test_scalar.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2059: in __getitem__\n    key = self._convert_key(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11014a720>, key = (0,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not (ax.holds_integer() or ax.is_floating()):\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )",
            "\npandas/core/indexing.py:2099: ValueError"
        ]
    ],
    "2.1.3": [
        [
            {
                "is_setter": "False",
                "key": "('a',)",
                "self.obj": "a    1\nb    2\nc    3\ndtype: int64",
                "self": "<pandas.core.indexing._AtIndexer object at 0x1177a6680>"
            },
            {
                "ax": "Index(['a', 'b', 'c'], dtype='object')",
                "i": "'a'",
                "ax.is_integer": "<bound method Index.is_integer of Index(['a', 'b', 'c'], dtype='object')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Index(['a', 'b', 'c'], dtype='object')>",
                "ax.is_floating": "<bound method Index.is_floating of Index(['a', 'b', 'c'], dtype='object')>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Index",
                "i": "str",
                "ax.is_integer": "method",
                "ax.holds_integer": "method",
                "ax.is_floating": "method"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "is_setter": "False",
                "key": "('a',)",
                "self.obj": "a    1\nb    2\nc    3\ndtype: int64",
                "self": "<pandas.core.indexing._AtIndexer object at 0x1145f60e0>"
            },
            {
                "lkey": "['a']",
                "n": "0",
                "ax": "Index(['a', 'b', 'c'], dtype='object')",
                "i": "'a'",
                "ax._convert_scalar_indexer": "<bound method Index._convert_scalar_indexer of Index(['a', 'b', 'c'], dtype='object')>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "lkey": "list",
                "n": "int",
                "ax": "Index",
                "i": "str",
                "ax._convert_scalar_indexer": "method"
            }
        ]
    ],
    "3.1.1": [
        "API/BUG: Inconsistent errors/msgs between loc vs at\n"
    ],
    "3.1.2": [
        "df = DataFrame({\"A\": [1, 2, 3]}, index=list(\"abc\"))\n\n>>> df.at[0]\nValueError: At based indexing on an non-integer index can only have non-integer indexers\n>>> df.loc[0]\nTypeError: cannot do label indexing on <class 'pandas.core.indexes.base.Index'> with these indexers [0] of <class 'int'>\nI would expect these to behave the same.\n"
    ]
}