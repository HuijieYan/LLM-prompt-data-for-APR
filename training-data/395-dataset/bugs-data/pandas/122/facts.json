{
    "1.1.1": "def equals(self, other):\n    self_axes, other_axes = self.axes, other.axes\n    if len(self_axes) != len(other_axes):\n        return False\n    if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n        return False\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    if len(self.blocks) != len(other.blocks):\n        return False\n\n    # canonicalize block order, using a tuple combining the type\n    # name and then mgr_locs because there might be unconsolidated\n    # blocks (say, Categorical) which can only be distinguished by\n    # the iteration order\n    def canonicalize(block):\n        return (block.dtype.name, block.mgr_locs.as_array.tolist())\n\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all(\n        block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n    )\n",
    "1.1.2": null,
    "1.2.1": "class BlockManager(PandasObject)",
    "1.2.2": "Core internal data structure to implement DataFrame, Series, etc.\n\nManage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a\nlightweight blocked set of labeled data to be manipulated by the DataFrame\npublic API class\n\nAttributes\n----------\nshape\nndim\naxes\nvalues\nitems\n\nMethods\n-------\nset_axis(axis, new_labels)\ncopy(deep=True)\n\nget_dtype_counts\nget_ftype_counts\nget_dtypes\nget_ftypes\n\napply(func, axes, block_filter_fn)\n\nget_bool_data\nget_numeric_data\n\nget_slice(slice_like, axis)\nget(label)\niget(loc)\n\ntake(indexer, axis)\nreindex_axis(new_labels, axis)\nreindex_indexer(new_labels, indexer, axis)\n\ndelete(label)\ninsert(loc, label, value)\nset(label, value)\n\nParameters\n----------\n\n\nNotes\n-----\nThis is *not* a public API class",
    "1.2.3": [
        "as_array(self, transpose=False, items=None)",
        "_consolidate_inplace(self)",
        "equals(self, other)",
        "canonicalize(block)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_122/pandas/core/internals/managers.py",
    "1.3.2": [
        "as_array(self, transpose=False, items=None)",
        "_consolidate_inplace(self)",
        "equals(self, other)",
        "dtype(self)",
        "_consolidate_inplace(self)",
        "canonicalize(block)"
    ],
    "1.4.1": [
        "def test_dataframe_not_equal():\n    # see GH28839\n    df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [\"s\", \"d\"]})\n    df2 = pd.DataFrame({\"a\": [\"s\", \"d\"], \"b\": [1, 2]})\n    assert df1.equals(df2) is False"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_122/pandas/tests/internals/test_internals.py"
    ],
    "2.1.1": [
        [
            "E       assert True is False\nE        +  where True = <bound method NDFrame.equals of    a  b\\n0  1  s\\n1  2  d>(   a  b\\n0  s  1\\n1  d  2)\nE        +    where <bound method NDFrame.equals of    a  b\\n0  1  s\\n1  2  d> =    a  b\\n0  1  s\\n1  2  d.equals"
        ]
    ],
    "2.1.2": [
        [
            "def test_dataframe_not_equal():\n        # see GH28839\n        df1 = pd.DataFrame({\"a\": [1, 2], \"b\": [\"s\", \"d\"]})\n        df2 = pd.DataFrame({\"a\": [\"s\", \"d\"], \"b\": [1, 2]})\n>       assert df1.equals(df2) is False",
            "\npandas/tests/internals/test_internals.py:1306: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "self": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                "other.axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "other": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                "self._consolidate_inplace": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                "other._consolidate_inplace": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                "self.blocks": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                "other.blocks": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)"
            },
            {
                "self_axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "other_axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "block.dtype": "dtype('int64')",
                "block": "IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64",
                "block.mgr_locs": "BlockPlacement(slice(0, 1, 1))",
                "canonicalize": "<function BlockManager.equals.<locals>.canonicalize at 0x1142068b0>",
                "block.equals": "<bound method Block.equals of IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.axes": "list",
                "self": "BlockManager",
                "other.axes": "list",
                "other": "BlockManager",
                "self._consolidate_inplace": "method",
                "other._consolidate_inplace": "method",
                "self.blocks": "tuple",
                "other.blocks": "tuple"
            },
            {
                "self_axes": "list",
                "other_axes": "list",
                "block.dtype": "dtype",
                "block": "IntBlock",
                "block.mgr_locs": "BlockPlacement",
                "canonicalize": "function",
                "block.equals": "method"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "self": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object",
                "other.axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "other": "BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object",
                "self._consolidate_inplace": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(0, 1, 1), 1 x 2, dtype: int64\nObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object>",
                "other._consolidate_inplace": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: Index(['a', 'b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=2, step=1)\nIntBlock: slice(1, 2, 1), 1 x 2, dtype: int64\nObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object>",
                "self.blocks": "(IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64, ObjectBlock: slice(1, 2, 1), 1 x 2, dtype: object)",
                "other.blocks": "(IntBlock: slice(1, 2, 1), 1 x 2, dtype: int64, ObjectBlock: slice(0, 1, 1), 1 x 2, dtype: object)"
            },
            {
                "self_axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "other_axes": "[Index(['a', 'b'], dtype='object'), RangeIndex(start=0, stop=2, step=1)]",
                "block.mgr_locs": "BlockPlacement(slice(0, 1, 1))",
                "block": "IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64",
                "block.dtype": "dtype('int64')",
                "canonicalize": "<function BlockManager.equals.<locals>.canonicalize at 0x1226495e0>",
                "block.equals": "<bound method Block.equals of IntBlock: slice(0, 1, 1), 1 x 2, dtype: int64>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.axes": "list",
                "self": "BlockManager",
                "other.axes": "list",
                "other": "BlockManager",
                "self._consolidate_inplace": "method",
                "other._consolidate_inplace": "method",
                "self.blocks": "tuple",
                "other.blocks": "tuple"
            },
            {
                "self_axes": "list",
                "other_axes": "list",
                "block.mgr_locs": "BlockPlacement",
                "block": "IntBlock",
                "block.dtype": "dtype",
                "canonicalize": "function",
                "block.equals": "method"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}