{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n        data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    from pandas.api.extensions import infer_dtype_from_scalar\n    from pandas.core.arrays.integer import (\n        construct_1d_arraylike_from_scalar,\n        is_integer_dtype,\n    )\n    from pandas.core.arrays.masked import maybe_upcast\n    from pandas.core.arrays.numpy_ import is_float_dtype\n    from pandas.core.arrays.period import maybe_cast_to_period\n    from pandas.core.arrays.string_ import string_array\n    from pandas.core.arrays.timedelta import ensure_binned_timedelta_array\n    from pandas.core.dtypes.inference import maybe_convert_platform\n    from pandas.core.tools.numeric import to_numeric\n    from pandas.core.tools.timedeltas import to_timedelta\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    from pandas.api.extensions import infer_dtype_from_scalar\n    from pandas.core.arrays.integer import (\n        construct_1d_arraylike_from_scalar,\n        is_integer_dtype,\n    )\n    from pandas.core.arrays.masked import maybe_upcast\n    from pandas.core.arrays.numpy_ import is_float_dtype\n    from pandas.core.arrays.period import maybe_cast_to_period\n    from pandas.core.arrays.string_ import string_array\n    from pandas.core.arrays.timedelta import ensure_binned_timedelta_array\n    from pandas.core.dtypes.inference import maybe_convert_platform\n    from pandas.core.tools.numeric import to_numeric\n    from pandas.core.tools.timedeltas import to_timedelta\n    \n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n    \n    if isinstance(data, ma.MaskedArray):\n        mask = ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = maybe_upcast(data, copy=True)\n            data.soften_mask()  # set hardmask False if it was True\n            data[mask] = fill_value\n        else:\n            data = data.copy()\n    \n    # extract ndarray or ExtensionArray, ensure we have no PandasArray\n    data = extract_array(data, extract_numpy=True)\n    \n    # GH#846\n    if isinstance(data, np.ndarray):\n    \n        if dtype is not None and is_float_dtype(data.dtype) and is_integer_dtype(dtype):\n            # possibility of nan -> garbage\n            try:\n                subarr = _try_cast(data, dtype, copy, True)\n            except ValueError:\n                if copy:\n                    subarr = data.copy()\n                else:\n                    subarr = np.array(data, copy=False)\n        else:\n            # we will try to copy be-definition here\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n    \n    elif isinstance(data, ABCExtensionArray):\n        # it is already ensured above this is not a PandasArray\n        subarr = data\n    \n        if dtype is not None:\n            subarr = subarr.astype(dtype, copy=copy)\n        elif copy:\n            subarr = subarr.copy()\n        return subarr\n    \n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = _try_cast(data, dtype, copy, raise_cast_failure)\n        else:\n            subarr = maybe_convert_platform(data)\n    \n        subarr = maybe_cast_to_datetime(subarr, dtype)\n    \n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = _try_cast(arr, dtype, copy, raise_cast_failure)\n    else:\n        subarr = _try_cast(data, dtype, copy, raise_cast_failure)"
        }
    ]
}