{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(\n    data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False\n):\n    import numpy as np\n    import pandas as pd\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    if dtype is not None:\n        dtype = pd.core.dtypes.common.pandas_dtype(dtype)\n    \n    if isinstance(data, np.ma.MaskedArray):\n        mask = np.ma.getmaskarray(data)\n        if mask.any():\n            data, fill_value = pd._libs.missing.maybe_upcast(data, copy=True)\n            data._mask = mask  # set hardmask False if it was True\n            data._data = np.ma.array(data._data, copy=False, mask=False)\n            data._update_inplace(data._data)\n        else:\n            data = data.copy()\n    \n    if isinstance(data, (np.ndarray, pd.core.arrays.ExtensionArray)):\n        if isinstance(data, np.ndarray):\n            if dtype is not None and pd.api.types.is_float_dtype(data.dtype) and pd.api.types.is_integer_dtype(dtype):\n                # possibility of nan -> garbage\n                try:\n                    subarr = pd._libs.lib.maybe_convert_objects(data, try_float=True)\n                    subarr = subarr.astype(dtype, copy=copy)\n                except ValueError:\n                    if copy:\n                        subarr = data.copy()\n                    else:\n                        subarr = np.array(data, copy=False)\n            else:\n                # we will try to copy be-definition here\n                subarr = pd._libs.lib.maybe_convert_objects(data, convert_dates=True, convert_datetimelike=True, try_float=True)\n                if dtype is not None:\n                    subarr = subarr.astype(dtype, copy=copy)\n                elif copy:\n                    subarr = subarr.copy()\n    \n        if isinstance(data, pd.core.arrays.ExtensionArray):\n            if dtype is not None:\n                subarr = subarr.astype(dtype, copy=copy)\n            elif copy:\n                subarr = subarr.copy()\n            return subarr\n    \n    elif isinstance(data, (list, tuple)) and len(data) > 0:\n        if dtype is not None:\n            subarr = pd._libs.lib.maybe_convert_objects(data, try_float=True, try_integer=True, copy=copy, convert_numeric=True)\n        else:\n            subarr = pd._libs.lib.maybe_convert_objects(data, try_float=True, try_integer=True, copy=copy)\n    \n    elif isinstance(data, range):\n        # GH#16804\n        arr = np.arange(data.start, data.stop, data.step, dtype=\"int64\")\n        subarr = pd._libs.lib.maybe_convert_objects(arr, try_float=True, try_integer=True, copy=copy)\n    else:\n        subarr = pd._libs.lib.maybe_convert_objects(data, try_float=True, try_integer=True, copy=copy)\n    \n    # scalar like, GH\n    if getattr(subarr, \"ndim\", 0) == 0:\n        if isinstance(data, (list, tuple)):  # pragma: no cover\n            subarr = np.array(data, dtype=object)\n    \n    # the result that we want\n    if subarr.ndim == 1:\n        if isinstance(data, np.ndarray):\n            if len(subarr) != len(index) and len(subarr) == 1:\n                subarr = pd._libs.lib.maybe_convert_objects([subarr[0]], try_float=True, try_integer=True, copy=False)\n    \n    elif subarr.ndim > 1:\n        if isinstance(data, np.ndarray):\n            raise Exception(\"Data must be 1-dimensional\")\n        else:\n            subarr = pd.core.arrays._asarray_tuplesafe(data, dtype=dtype)\n    \n    if not (pd.api.types.is_extension_array_dtype(subarr.dtype) or pd.api.types.is_extension_array_dtype(dtype)):\n        if pd.api.types.is_string_dtype(subarr.dtype):\n            if not np.all(pd.isna(data)):\n                data = np.array(data, dtype=dtype, copy=False)\n            subarr = np.array(data, dtype=object, copy=copy)\n    \n        if pd.api.types.is_object_dtype(subarr.dtype) and not pd.api.types.is_object_dtype(dtype):\n            inferred = pd.array(subarr, copy=False).dtype\n            if inferred in {\"interval\", \"period\"}:\n                subarr = pd.array(subarr)\n    \n    return subarr"
        }
    ]
}