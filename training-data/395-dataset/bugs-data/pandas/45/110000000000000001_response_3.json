{
    "pandas": [
        {
            "bugID": 45,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 389,
            "file_name": "pandas/core/construction.py",
            "replace_code": "def sanitize_array(data, index, dtype=None, copy: bool = False, raise_cast_failure: bool = False):\n    import numpy as np\n    import pandas as pd\n    import numpy.ma as ma\n    from pandas.api.types import pandas_dtype, infer_dtype_from_scalar, is_extension_array_dtype, is_object_dtype\n    from pandas.arrays import ABCExtensionArray\n    \"\"\"\n    Sanitize input data to an ndarray, copy if specified, coerce to the\n    dtype if specified.\n    \"\"\"\n    # handle masked array\n    if isinstance(data, ma.MaskedArray):\n        data = handle_masked_array(data, copy)\n    \n    # handle different data types\n    if isinstance(data, np.ndarray):\n        subarr = handle_ndarray(data, dtype, copy, raise_cast_failure)\n    elif isinstance(data, ABCExtensionArray):\n        subarr = handle_extension_array(data, dtype, copy)\n    elif isinstance(data, (list, tuple)):\n        subarr = handle_list_or_tuple(data, dtype, copy, raise_cast_failure)\n    \n    # handle scalar data\n    if np.isscalar(data):\n        subarr = handle_scalar(data)\n    \n    return subarr"
        }
    ]
}